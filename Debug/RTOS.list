
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800ce38  0800ce38  0001ce38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d500  0800d500  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d500  0800d500  0001d500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d508  0800d508  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d508  0800d508  0001d508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d50c  0800d50c  0001d50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004da0  200001e8  0800d6f4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004f88  0800d6f4  00024f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247e8  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000460b  00000000  00000000  000449fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf0  00000000  00000000  00049008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a80  00000000  00000000  0004abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bed4  00000000  00000000  0004c678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecbd  00000000  00000000  0006854c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab7f2  00000000  00000000  00087209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001329fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000886c  00000000  00000000  00132a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ce1c 	.word	0x0800ce1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800ce1c 	.word	0x0800ce1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <Write_MFRC522+0x58>)
 8000f74:	f002 ff44 	bl	8003e00 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000f78:	f107 010f 	add.w	r1, r7, #15
 8000f7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f80:	2201      	movs	r2, #1
 8000f82:	480a      	ldr	r0, [pc, #40]	; (8000fac <Write_MFRC522+0x5c>)
 8000f84:	f004 fc45 	bl	8005812 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8000f88:	1db9      	adds	r1, r7, #6
 8000f8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <Write_MFRC522+0x5c>)
 8000f92:	f004 fc3e 	bl	8005812 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2110      	movs	r1, #16
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <Write_MFRC522+0x58>)
 8000f9c:	f002 ff30 	bl	8003e00 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	20004e30 	.word	0x20004e30

08000fb0 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <Read_MFRC522+0x60>)
 8000fd6:	f002 ff13 	bl	8003e00 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000fda:	f107 010e 	add.w	r1, r7, #14
 8000fde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <Read_MFRC522+0x64>)
 8000fe6:	f004 fc14 	bl	8005812 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8000fea:	f107 010f 	add.w	r1, r7, #15
 8000fee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <Read_MFRC522+0x64>)
 8000ff6:	f004 fd48 	bl	8005a8a <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <Read_MFRC522+0x60>)
 8001000:	f002 fefe 	bl	8003e00 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020000 	.word	0x40020000
 8001014:	20004e30 	.word	0x20004e30

08001018 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffc0 	bl	8000fb0 <Read_MFRC522>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	4313      	orrs	r3, r2
 800103a:	b2da      	uxtb	r2, r3
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff85 	bl	8000f50 <Write_MFRC522>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	460a      	mov	r2, r1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4613      	mov	r3, r2
 800105c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffa5 	bl	8000fb0 <Read_MFRC522>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800106a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800106e:	43db      	mvns	r3, r3
 8001070:	b25a      	sxtb	r2, r3
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4013      	ands	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	b2da      	uxtb	r2, r3
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff65 	bl	8000f50 <Write_MFRC522>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8001092:	2103      	movs	r1, #3
 8001094:	2014      	movs	r0, #20
 8001096:	f7ff ffbf 	bl	8001018 <SetBitMask>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80010a2:	210f      	movs	r1, #15
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff53 	bl	8000f50 <Write_MFRC522>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4812      	ldr	r0, [pc, #72]	; (8001104 <MFRC522_Init+0x54>)
 80010ba:	f002 fea1 	bl	8003e00 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 80010be:	f7ff ffee 	bl	800109e <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	202a      	movs	r0, #42	; 0x2a
 80010c6:	f7ff ff43 	bl	8000f50 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 80010ca:	21a9      	movs	r1, #169	; 0xa9
 80010cc:	202b      	movs	r0, #43	; 0x2b
 80010ce:	f7ff ff3f 	bl	8000f50 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 80010d2:	2103      	movs	r1, #3
 80010d4:	202d      	movs	r0, #45	; 0x2d
 80010d6:	f7ff ff3b 	bl	8000f50 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 80010da:	21e8      	movs	r1, #232	; 0xe8
 80010dc:	202c      	movs	r0, #44	; 0x2c
 80010de:	f7ff ff37 	bl	8000f50 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	2015      	movs	r0, #21
 80010e6:	f7ff ff33 	bl	8000f50 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 80010ea:	213d      	movs	r1, #61	; 0x3d
 80010ec:	2011      	movs	r0, #17
 80010ee:	f7ff ff2f 	bl	8000f50 <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 80010f2:	2170      	movs	r1, #112	; 0x70
 80010f4:	2026      	movs	r0, #38	; 0x26
 80010f6:	f7ff ff2b 	bl	8000f50 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80010fa:	f7ff ffc8 	bl	800108e <AntennaOn>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020000 	.word	0x40020000

08001108 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8001114:	2107      	movs	r1, #7
 8001116:	200d      	movs	r0, #13
 8001118:	f7ff ff1a 	bl	8000f50 <Write_MFRC522>

  TagType[0] = reqMode;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2201      	movs	r2, #1
 800112c:	6839      	ldr	r1, [r7, #0]
 800112e:	200c      	movs	r0, #12
 8001130:	f000 f80f 	bl	8001152 <MFRC522_ToCard>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <MFRC522_Request+0x3c>
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2b10      	cmp	r3, #16
 8001142:	d001      	beq.n	8001148 <MFRC522_Request+0x40>
    status = MI_ERR;
 8001144:	2302      	movs	r3, #2
 8001146:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8001152:	b590      	push	{r4, r7, lr}
 8001154:	b089      	sub	sp, #36	; 0x24
 8001156:	af00      	add	r7, sp, #0
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	4613      	mov	r3, r2
 8001162:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8001164:	2302      	movs	r3, #2
 8001166:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d006      	beq.n	8001184 <MFRC522_ToCard+0x32>
 8001176:	2b0e      	cmp	r3, #14
 8001178:	d109      	bne.n	800118e <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 800117a:	2312      	movs	r3, #18
 800117c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 800117e:	2310      	movs	r3, #16
 8001180:	777b      	strb	r3, [r7, #29]
        break;
 8001182:	e005      	b.n	8001190 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001184:	2377      	movs	r3, #119	; 0x77
 8001186:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001188:	2330      	movs	r3, #48	; 0x30
 800118a:	777b      	strb	r3, [r7, #29]
        break;
 800118c:	e000      	b.n	8001190 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800118e:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8001190:	7fbb      	ldrb	r3, [r7, #30]
 8001192:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4619      	mov	r1, r3
 800119a:	2002      	movs	r0, #2
 800119c:	f7ff fed8 	bl	8000f50 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	2004      	movs	r0, #4
 80011a4:	f7ff ff53 	bl	800104e <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	200a      	movs	r0, #10
 80011ac:	f7ff ff34 	bl	8001018 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 80011b0:	2100      	movs	r1, #0
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff fecc 	bl	8000f50 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	e00a      	b.n	80011d4 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	4413      	add	r3, r2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	2009      	movs	r0, #9
 80011ca:	f7ff fec1 	bl	8000f50 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d3f0      	bcc.n	80011be <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	4619      	mov	r1, r3
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff feb5 	bl	8000f50 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b0c      	cmp	r3, #12
 80011ea:	d103      	bne.n	80011f4 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	200d      	movs	r0, #13
 80011f0:	f7ff ff12 	bl	8001018 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80011f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011f8:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80011fa:	2004      	movs	r0, #4
 80011fc:	f7ff fed8 	bl	8000fb0 <Read_MFRC522>
 8001200:	4603      	mov	r3, r0
 8001202:	773b      	strb	r3, [r7, #28]
    i--;
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	3b01      	subs	r3, #1
 8001208:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00a      	beq.n	8001226 <MFRC522_ToCard+0xd4>
 8001210:	7f3b      	ldrb	r3, [r7, #28]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d105      	bne.n	8001226 <MFRC522_ToCard+0xd4>
 800121a:	7f3a      	ldrb	r2, [r7, #28]
 800121c:	7f7b      	ldrb	r3, [r7, #29]
 800121e:	4013      	ands	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0e9      	beq.n	80011fa <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	200d      	movs	r0, #13
 800122a:	f7ff ff10 	bl	800104e <ClearBitMask>

  if (i != 0)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d052      	beq.n	80012da <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8001234:	2006      	movs	r0, #6
 8001236:	f7ff febb 	bl	8000fb0 <Read_MFRC522>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 031b 	and.w	r3, r3, #27
 8001240:	2b00      	cmp	r3, #0
 8001242:	d148      	bne.n	80012d6 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8001248:	7f3a      	ldrb	r2, [r7, #28]
 800124a:	7fbb      	ldrb	r3, [r7, #30]
 800124c:	4013      	ands	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8001258:	2301      	movs	r3, #1
 800125a:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b0c      	cmp	r3, #12
 8001260:	d13b      	bne.n	80012da <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8001262:	200a      	movs	r0, #10
 8001264:	f7ff fea4 	bl	8000fb0 <Read_MFRC522>
 8001268:	4603      	mov	r3, r0
 800126a:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 800126c:	200c      	movs	r0, #12
 800126e:	f7ff fe9f 	bl	8000fb0 <Read_MFRC522>
 8001272:	4603      	mov	r3, r0
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8001280:	7f3b      	ldrb	r3, [r7, #28]
 8001282:	3b01      	subs	r3, #1
 8001284:	00da      	lsls	r2, r3, #3
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	4413      	add	r3, r2
 800128a:	461a      	mov	r2, r3
 800128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e004      	b.n	800129c <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8001292:	7f3b      	ldrb	r3, [r7, #28]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	461a      	mov	r2, r3
 8001298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129a:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 800129c:	7f3b      	ldrb	r3, [r7, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <MFRC522_ToCard+0x154>
        {
          n = 1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 80012a6:	7f3b      	ldrb	r3, [r7, #28]
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d901      	bls.n	80012b0 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 80012ac:	2310      	movs	r3, #16
 80012ae:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	e00a      	b.n	80012cc <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	18d4      	adds	r4, r2, r3
 80012bc:	2009      	movs	r0, #9
 80012be:	f7ff fe77 	bl	8000fb0 <Read_MFRC522>
 80012c2:	4603      	mov	r3, r0
 80012c4:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	7f3b      	ldrb	r3, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3f0      	bcc.n	80012b6 <MFRC522_ToCard+0x164>
 80012d4:	e001      	b.n	80012da <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 80012d6:	2302      	movs	r3, #2
 80012d8:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 80012da:	7ffb      	ldrb	r3, [r7, #31]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3724      	adds	r7, #36	; 0x24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80012f0:	2100      	movs	r1, #0
 80012f2:	200d      	movs	r0, #13
 80012f4:	f7ff fe2c 	bl	8000f50 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2293      	movs	r2, #147	; 0x93
 80012fc:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3301      	adds	r3, #1
 8001302:	2220      	movs	r2, #32
 8001304:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2202      	movs	r2, #2
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	200c      	movs	r0, #12
 8001314:	f7ff ff1d 	bl	8001152 <MFRC522_ToCard>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	73bb      	strb	r3, [r7, #14]
 8001326:	e009      	b.n	800133c <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	7b7b      	ldrb	r3, [r7, #13]
 8001332:	4053      	eors	r3, r2
 8001334:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	3301      	adds	r3, #1
 800133a:	73bb      	strb	r3, [r7, #14]
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d9f2      	bls.n	8001328 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	7b7a      	ldrb	r2, [r7, #13]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8001350:	2302      	movs	r3, #2
 8001352:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <RCFilter_Init>:
#include "RCFilter.h"
#include <math.h>

void RCFilter_Init(RCFilter * filter, float cutoffFreqHz, float sampleFreq_Hz){
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	ed87 0a02 	vstr	s0, [r7, #8]
 800136c:	edc7 0a01 	vstr	s1, [r7, #4]
	/*Clear output buffer*/
	filter->out[0] = 0.0f;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
	filter->out[1] = 0.0f;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
	float sampleTime_s = 1.0f/ sampleFreq_Hz;
 8001380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001384:	ed97 7a01 	vldr	s14, [r7, #4]
 8001388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138c:	edc7 7a05 	vstr	s15, [r7, #20]
	/*Compute equivalent RC Constant from cutoff Frequency*/
	float RC = 1.0f/(2* M_PI * cutoffFreqHz);
 8001390:	68b8      	ldr	r0, [r7, #8]
 8001392:	f7ff f8e1 	bl	8000558 <__aeabi_f2d>
 8001396:	a31b      	add	r3, pc, #108	; (adr r3, 8001404 <RCFilter_Init+0xa4>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f934 	bl	8000608 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	f04f 0000 	mov.w	r0, #0
 80013a8:	4915      	ldr	r1, [pc, #84]	; (8001400 <RCFilter_Init+0xa0>)
 80013aa:	f7ff fa57 	bl	800085c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fbff 	bl	8000bb8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	613b      	str	r3, [r7, #16]
	/*Pre-compute filter coefficient for first order low-pass filter*/
	filter->coeff[0] = sampleTime_s/(sampleTime_s+ RC);
 80013be:	ed97 7a05 	vldr	s14, [r7, #20]
 80013c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	edc3 7a00 	vstr	s15, [r3]
	filter->coeff[1] = RC/(sampleTime_s+RC);
 80013d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80013e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	3ff00000 	.word	0x3ff00000
 8001404:	54442d18 	.word	0x54442d18
 8001408:	401921fb 	.word	0x401921fb

0800140c <RCFilter_Update>:

float RCFilter_Update(RCFilter *filter, float input){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	ed87 0a00 	vstr	s0, [r7]
	/* Shift output samples */
	filter->out[1] = filter->out[0];
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]

	/* Compute new ouput sample */
	filter->out[0] = filter->coeff[0] * input+filter->coeff[1] * filter->out[1];
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	edd7 7a00 	vldr	s15, [r7]
 800142a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	edd3 6a01 	vldr	s13, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a03 	vldr	s15, [r3, #12]
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return Filtered sample */
	return filter->out[0];
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	ee07 3a90 	vmov	s15, r3
}
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <MovAvgFilter_init>:

void MovAvgFilter_init(MovAvgFilter * filter){
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	/*Clear output buffer*/
	filter->out = 0.0f;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/*clear value*/
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e009      	b.n	800148a <MovAvgFilter_init+0x2c>
		filter -> val[i]= 0;
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b31      	cmp	r3, #49	; 0x31
 800148e:	ddf2      	ble.n	8001476 <MovAvgFilter_init+0x18>
	}
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <MovAvgFilter_Update>:

float MovAvgFilter_Update(MovAvgFilter *filter, float input){
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	ed87 0a00 	vstr	s0, [r7]
	/*Shifting Value and calculate the cumulative sum*/
	float sum = 0;
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e019      	b.n	80014ec <MovAvgFilter_Update+0x4c>
		filter->val[i] = filter-> val[i+1];
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	3301      	adds	r3, #1
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	601a      	str	r2, [r3, #0]
		sum += filter -> val[i];
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ed97 7a05 	vldr	s14, [r7, #20]
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	3301      	adds	r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b31      	cmp	r3, #49	; 0x31
 80014f0:	dde2      	ble.n	80014b8 <MovAvgFilter_Update+0x18>
	}
	(filter -> val[BUFF_LENGTH-1]) = input;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sum += input;
 80014fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80014fe:	edd7 7a00 	vldr	s15, [r7]
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	edc7 7a05 	vstr	s15, [r7, #20]

	/*Calculating the average*/
	float avg = sum/BUFF_LENGTH;
 800150a:	ed97 7a05 	vldr	s14, [r7, #20]
 800150e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800153c <MovAvgFilter_Update+0x9c>
 8001512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001516:	edc7 7a03 	vstr	s15, [r7, #12]
	filter -> out = avg;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	return filter -> out;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001528:	ee07 3a90 	vmov	s15, r3
}
 800152c:	eeb0 0a67 	vmov.f32	s0, s15
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	42480000 	.word	0x42480000

08001540 <HAL_ADC_ConvCpltCallback>:
	}
	return checksum;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  for(int i = 0; i<3; i++){
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e010      	b.n	8001570 <HAL_ADC_ConvCpltCallback+0x30>
	  value[i] = buffer[i];
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_ADC_ConvCpltCallback+0x44>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_ADC_ConvCpltCallback+0x48>)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i<3; i++){
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b02      	cmp	r3, #2
 8001574:	ddeb      	ble.n	800154e <HAL_ADC_ConvCpltCallback+0xe>
  }
  //Filtering Analog reading
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	20004dac 	.word	0x20004dac
 8001588:	20004ee0 	.word	0x20004ee0

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b09a      	sub	sp, #104	; 0x68
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001592:	f001 f97f 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001596:	f000 f865 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f000 fa1d 	bl	80019d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800159e:	f000 f9f3 	bl	8001988 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015a2:	f000 f9c7 	bl	8001934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015a6:	f000 f937 	bl	8001818 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015aa:	f000 f963 	bl	8001874 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015ae:	f000 f997 	bl	80018e0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80015b2:	f000 f8c3 	bl	800173c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2260      	movs	r2, #96	; 0x60
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f008 fd9a 	bl	800a0fc <memset>
  sprintf(txBuffer, "Bismillah..\n");
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4918      	ldr	r1, [pc, #96]	; (800162c <main+0xa0>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f009 fa07 	bl	800a9e0 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 80015d2:	1d39      	adds	r1, r7, #4
 80015d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015d8:	2264      	movs	r2, #100	; 0x64
 80015da:	4815      	ldr	r0, [pc, #84]	; (8001630 <main+0xa4>)
 80015dc:	f005 f905 	bl	80067ea <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015e0:	f005 ff02 	bl	80073e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 80015e4:	4a13      	ldr	r2, [pc, #76]	; (8001634 <main+0xa8>)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <main+0xac>)
 80015ea:	f005 ff47 	bl	800747c <osThreadNew>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <main+0xb0>)
 80015f2:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <main+0xb4>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4812      	ldr	r0, [pc, #72]	; (8001644 <main+0xb8>)
 80015fa:	f005 ff3f 	bl	800747c <osThreadNew>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <main+0xbc>)
 8001602:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
//  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <main+0xc0>)
 8001606:	2100      	movs	r1, #0
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <main+0xc4>)
 800160a:	f005 ff37 	bl	800747c <osThreadNew>
 800160e:	4603      	mov	r3, r0
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <main+0xc8>)
 8001612:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
//  SDCardTaskHandle = osThreadNew(SDCard, NULL, &SDCardTask_attributes);

  /* creation of ADCProcessingTa */
  ADCProcessingTaHandle = osThreadNew(ADCProcesing, NULL, &ADCProcessingTa_attributes);
 8001614:	4a10      	ldr	r2, [pc, #64]	; (8001658 <main+0xcc>)
 8001616:	2100      	movs	r1, #0
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <main+0xd0>)
 800161a:	f005 ff2f 	bl	800747c <osThreadNew>
 800161e:	4603      	mov	r3, r0
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <main+0xd4>)
 8001622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001624:	f005 ff04 	bl	8007430 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 8001628:	e7fe      	b.n	8001628 <main+0x9c>
 800162a:	bf00      	nop
 800162c:	0800ce7c 	.word	0x0800ce7c
 8001630:	20004e88 	.word	0x20004e88
 8001634:	0800d068 	.word	0x0800d068
 8001638:	08001b19 	.word	0x08001b19
 800163c:	20004e2c 	.word	0x20004e2c
 8001640:	0800d08c 	.word	0x0800d08c
 8001644:	08001c05 	.word	0x08001c05
 8001648:	20004b90 	.word	0x20004b90
 800164c:	0800d0b0 	.word	0x0800d0b0
 8001650:	08001c99 	.word	0x08001c99
 8001654:	20004e18 	.word	0x20004e18
 8001658:	0800d0d4 	.word	0x0800d0d4
 800165c:	08001e31 	.word	0x08001e31
 8001660:	20004da8 	.word	0x20004da8

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	; 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	2230      	movs	r2, #48	; 0x30
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f008 fd42 	bl	800a0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <SystemClock_Config+0xd0>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a28      	ldr	r2, [pc, #160]	; (8001734 <SystemClock_Config+0xd0>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <SystemClock_Config+0xd0>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <SystemClock_Config+0xd4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016b0:	4a21      	ldr	r2, [pc, #132]	; (8001738 <SystemClock_Config+0xd4>)
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <SystemClock_Config+0xd4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c8:	2301      	movs	r3, #1
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016cc:	2310      	movs	r3, #16
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d0:	2302      	movs	r3, #2
 80016d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016d8:	2310      	movs	r3, #16
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016e2:	2304      	movs	r3, #4
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016e6:	2307      	movs	r3, #7
 80016e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fb60 	bl	8004db4 <HAL_RCC_OscConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016fa:	f000 fc27 	bl	8001f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fe:	230f      	movs	r3, #15
 8001700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001702:	2302      	movs	r3, #2
 8001704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2102      	movs	r1, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fdc2 	bl	80052a4 <HAL_RCC_ClockConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001726:	f000 fc11 	bl	8001f4c <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	3750      	adds	r7, #80	; 0x50
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000

0800173c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <MX_ADC1_Init+0xd0>)
 8001750:	4a2f      	ldr	r2, [pc, #188]	; (8001810 <MX_ADC1_Init+0xd4>)
 8001752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <MX_ADC1_Init+0xd0>)
 8001756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800175a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <MX_ADC1_Init+0xd0>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <MX_ADC1_Init+0xd0>)
 8001764:	2201      	movs	r2, #1
 8001766:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <MX_ADC1_Init+0xd0>)
 800176a:	2201      	movs	r2, #1
 800176c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <MX_ADC1_Init+0xd0>)
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <MX_ADC1_Init+0xd0>)
 8001778:	2200      	movs	r2, #0
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <MX_ADC1_Init+0xd0>)
 800177e:	4a25      	ldr	r2, [pc, #148]	; (8001814 <MX_ADC1_Init+0xd8>)
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <MX_ADC1_Init+0xd0>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <MX_ADC1_Init+0xd0>)
 800178a:	2203      	movs	r2, #3
 800178c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <MX_ADC1_Init+0xd0>)
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_ADC1_Init+0xd0>)
 8001798:	2201      	movs	r2, #1
 800179a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800179c:	481b      	ldr	r0, [pc, #108]	; (800180c <MX_ADC1_Init+0xd0>)
 800179e:	f001 f8df 	bl	8002960 <HAL_ADC_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017a8:	f000 fbd0 	bl	8001f4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80017ac:	230f      	movs	r3, #15
 80017ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017b4:	2307      	movs	r3, #7
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <MX_ADC1_Init+0xd0>)
 80017be:	f001 fa17 	bl	8002bf0 <HAL_ADC_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017c8:	f000 fbc0 	bl	8001f4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017cc:	2308      	movs	r3, #8
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <MX_ADC1_Init+0xd0>)
 80017da:	f001 fa09 	bl	8002bf0 <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017e4:	f000 fbb2 	bl	8001f4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017e8:	2309      	movs	r3, #9
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017ec:	2303      	movs	r3, #3
 80017ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_ADC1_Init+0xd0>)
 80017f6:	f001 f9fb 	bl	8002bf0 <HAL_ADC_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001800:	f000 fba4 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20004cbc 	.word	0x20004cbc
 8001810:	40012000 	.word	0x40012000
 8001814:	0f000001 	.word	0x0f000001

08001818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_I2C1_Init+0x50>)
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <MX_I2C1_Init+0x54>)
 8001820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_I2C1_Init+0x50>)
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <MX_I2C1_Init+0x58>)
 8001826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_I2C1_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_I2C1_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_I2C1_Init+0x50>)
 8001836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_I2C1_Init+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_I2C1_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_I2C1_Init+0x50>)
 8001856:	f002 faed 	bl	8003e34 <HAL_I2C_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001860:	f000 fb74 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20004b3c 	.word	0x20004b3c
 800186c:	40005400 	.word	0x40005400
 8001870:	000186a0 	.word	0x000186a0

08001874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_SPI1_Init+0x64>)
 800187a:	4a18      	ldr	r2, [pc, #96]	; (80018dc <MX_SPI1_Init+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_SPI1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018a8:	2218      	movs	r2, #24
 80018aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018c6:	f003 ff1b 	bl	8005700 <HAL_SPI_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018d0:	f000 fb3c 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20004e30 	.word	0x20004e30
 80018dc:	40013000 	.word	0x40013000

080018e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <MX_USART1_UART_Init+0x50>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_USART1_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001918:	f004 ff1a 	bl	8006750 <HAL_UART_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001922:	f000 fb13 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20004d64 	.word	0x20004d64
 8001930:	40011000 	.word	0x40011000

08001934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_USART2_UART_Init+0x50>)
 800193c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800196c:	f004 fef0 	bl	8006750 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001976:	f000 fae9 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20004e88 	.word	0x20004e88
 8001984:	40004400 	.word	0x40004400

08001988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_DMA_Init+0x4c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <MX_DMA_Init+0x4c>)
 8001998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <MX_DMA_Init+0x4c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2105      	movs	r1, #5
 80019ae:	2038      	movs	r0, #56	; 0x38
 80019b0:	f001 fc76 	bl	80032a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019b4:	2038      	movs	r0, #56	; 0x38
 80019b6:	f001 fc8f 	bl	80032d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	203a      	movs	r0, #58	; 0x3a
 80019c0:	f001 fc6e 	bl	80032a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80019c4:	203a      	movs	r0, #58	; 0x3a
 80019c6:	f001 fc87 	bl	80032d8 <HAL_NVIC_EnableIRQ>

}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <MX_GPIO_Init+0x12c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a43      	ldr	r2, [pc, #268]	; (8001b04 <MX_GPIO_Init+0x12c>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a35      	ldr	r2, [pc, #212]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a2e      	ldr	r2, [pc, #184]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2112      	movs	r1, #18
 8001a62:	4829      	ldr	r0, [pc, #164]	; (8001b08 <MX_GPIO_Init+0x130>)
 8001a64:	f002 f9cc 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SDCARD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001a6e:	4827      	ldr	r0, [pc, #156]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a70:	f002 f9c6 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <MX_GPIO_Init+0x138>)
 8001a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4820      	ldr	r0, [pc, #128]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a8a:	f002 f835 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 8001a8e:	2312      	movs	r3, #18
 8001a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4818      	ldr	r0, [pc, #96]	; (8001b08 <MX_GPIO_Init+0x130>)
 8001aa6:	f002 f827 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin POWER_SEL_Pin IGNITION_LOGIC_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin;
 8001aaa:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4812      	ldr	r0, [pc, #72]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001ac4:	f002 f818 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGING_SIGNAL_Pin */
  GPIO_InitStruct.Pin = CHARGING_SIGNAL_Pin;
 8001ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGING_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <MX_GPIO_Init+0x13c>)
 8001ade:	f002 f80b 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IGNITION_SIGNAL_Pin;
 8001ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IGNITION_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_GPIO_Init+0x130>)
 8001af8:	f001 fffe 	bl	8003af8 <HAL_GPIO_Init>

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	10210000 	.word	0x10210000
 8001b14:	40020400 	.word	0x40020400

08001b18 <Display>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8001b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b1c:	b0c3      	sub	sp, #268	; 0x10c
 8001b1e:	af0a      	add	r7, sp, #40	; 0x28
 8001b20:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	f107 0318 	add.w	r3, r7, #24
 8001b2a:	22c4      	movs	r2, #196	; 0xc4
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f008 fae4 	bl	800a0fc <memset>
	sprintf(txBuffer, "Running Display Task..\n");
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	492b      	ldr	r1, [pc, #172]	; (8001be8 <Display+0xd0>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f008 ff50 	bl	800a9e0 <siprintf>
  /* Infinite loop */
	uint8_t identification = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  for(;;)
  {
	  //Identification Check
	  if (identification == 1){
 8001b46:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d106      	bne.n	8001b5c <Display+0x44>
		  xTaskNotifyGive(IMUTaskHandle);
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <Display+0xd4>)
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	2202      	movs	r2, #2
 8001b56:	2100      	movs	r1, #0
 8001b58:	f007 fa04 	bl	8008f64 <xTaskGenericNotify>
	  }

	  if(UID[0]== 0x29){ // Need to add driver database
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <Display+0xd8>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b29      	cmp	r3, #41	; 0x29
 8001b62:	d103      	bne.n	8001b6c <Display+0x54>
		  identification = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001b6a:	e002      	b.n	8001b72 <Display+0x5a>
	  } else {
		  identification = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	  }
	  //End of Identification Check
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <Display+0xd8>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001b76:	60bb      	str	r3, [r7, #8]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <Display+0xd8>)
 8001b7a:	785b      	ldrb	r3, [r3, #1]
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001b7c:	607b      	str	r3, [r7, #4]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <Display+0xd8>)
 8001b80:	789b      	ldrb	r3, [r3, #2]
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001b82:	461e      	mov	r6, r3
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <Display+0xd8>)
 8001b86:	78db      	ldrb	r3, [r3, #3]
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <Display+0xdc>)
 8001b8c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <Display+0xdc>)
 8001b92:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <Display+0xdc>)
 8001b98:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <Display+0xe0>)
 8001b9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fcd8 	bl	8000558 <__aeabi_f2d>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	f107 0014 	add.w	r0, r7, #20
 8001bb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001bb4:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001bb8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001bbc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001bc0:	6839      	ldr	r1, [r7, #0]
 8001bc2:	9101      	str	r1, [sp, #4]
 8001bc4:	9600      	str	r6, [sp, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	490c      	ldr	r1, [pc, #48]	; (8001bfc <Display+0xe4>)
 8001bcc:	f008 ff08 	bl	800a9e0 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
 8001bd0:	f107 0114 	add.w	r1, r7, #20
 8001bd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bd8:	22c8      	movs	r2, #200	; 0xc8
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <Display+0xe8>)
 8001bdc:	f004 fe05 	bl	80067ea <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(10);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f005 fcdd 	bl	80075a0 <osDelay>
	  if (identification == 1){
 8001be6:	e7ae      	b.n	8001b46 <Display+0x2e>
 8001be8:	0800ce8c 	.word	0x0800ce8c
 8001bec:	20004b90 	.word	0x20004b90
 8001bf0:	20000204 	.word	0x20000204
 8001bf4:	20004b98 	.word	0x20004b98
 8001bf8:	20004bf0 	.word	0x20004bf0
 8001bfc:	0800cea4 	.word	0x0800cea4
 8001c00:	20004e88 	.word	0x20004e88

08001c04 <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09c      	sub	sp, #112	; 0x70
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2260      	movs	r2, #96	; 0x60
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f008 fa6f 	bl	800a0fc <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	4918      	ldr	r1, [pc, #96]	; (8001c84 <IMU+0x80>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f008 fedb 	bl	800a9e0 <siprintf>

	uint8_t ID = MPU6050_Init(&hi2c1);
 8001c2a:	4817      	ldr	r0, [pc, #92]	; (8001c88 <IMU+0x84>)
 8001c2c:	f000 f993 	bl	8001f56 <MPU6050_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 8001c36:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4913      	ldr	r1, [pc, #76]	; (8001c8c <IMU+0x88>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f008 fecd 	bl	800a9e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 8001c46:	f107 0108 	add.w	r1, r7, #8
 8001c4a:	2364      	movs	r3, #100	; 0x64
 8001c4c:	2264      	movs	r2, #100	; 0x64
 8001c4e:	4810      	ldr	r0, [pc, #64]	; (8001c90 <IMU+0x8c>)
 8001c50:	f004 fdcb 	bl	80067ea <HAL_UART_Transmit>
	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	2264      	movs	r2, #100	; 0x64
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f008 fa4d 	bl	800a0fc <memset>
	osDelay(200);
 8001c62:	20c8      	movs	r0, #200	; 0xc8
 8001c64:	f005 fc9c 	bl	80075a0 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f007 f931 	bl	8008ed4 <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <IMU+0x90>)
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <IMU+0x84>)
 8001c76:	f000 f9e7 	bl	8002048 <MPU6050_Read_Accel>
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay,MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(50);
 8001c7a:	2032      	movs	r0, #50	; 0x32
 8001c7c:	f005 fc90 	bl	80075a0 <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001c80:	e7f2      	b.n	8001c68 <IMU+0x64>
 8001c82:	bf00      	nop
 8001c84:	0800cee0 	.word	0x0800cee0
 8001c88:	20004b3c 	.word	0x20004b3c
 8001c8c:	0800cef4 	.word	0x0800cef4
 8001c90:	20004e88 	.word	0x20004e88
 8001c94:	20004b98 	.word	0x20004b98

08001c98 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b0a5      	sub	sp, #148	; 0x94
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */
	char txBuffer [100] ={};
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2260      	movs	r2, #96	; 0x60
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f008 fa25 	bl	800a0fc <memset>
	u_char status, checksum1, cardstr[MAX_LEN];
	MFRC522_Init();
 8001cb2:	f7ff f9fd 	bl	80010b0 <MFRC522_Init>
	status = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	while (status == 0){
 8001cbc:	e018      	b.n	8001cf0 <RFID+0x58>
		status = Read_MFRC522(VersionReg);
 8001cbe:	2037      	movs	r0, #55	; 0x37
 8001cc0:	f7ff f976 	bl	8000fb0 <Read_MFRC522>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 8001cca:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001cce:	f107 0318 	add.w	r3, r7, #24
 8001cd2:	4950      	ldr	r1, [pc, #320]	; (8001e14 <RFID+0x17c>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f008 fe83 	bl	800a9e0 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 8001cda:	f107 0118 	add.w	r1, r7, #24
 8001cde:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ce2:	2264      	movs	r2, #100	; 0x64
 8001ce4:	484c      	ldr	r0, [pc, #304]	; (8001e18 <RFID+0x180>)
 8001ce6:	f004 fd80 	bl	80067ea <HAL_UART_Transmit>
		osDelay(100);
 8001cea:	2064      	movs	r0, #100	; 0x64
 8001cec:	f005 fc58 	bl	80075a0 <osDelay>
	while (status == 0){
 8001cf0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0e2      	beq.n	8001cbe <RFID+0x26>
	}
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	2264      	movs	r2, #100	; 0x64
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f008 f9fb 	bl	800a0fc <memset>
	status = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(200);
 8001d0c:	20c8      	movs	r0, #200	; 0xc8
 8001d0e:	f005 fc47 	bl	80075a0 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	4619      	mov	r1, r3
 8001d18:	2026      	movs	r0, #38	; 0x26
 8001d1a:	f7ff f9f5 	bl	8001108 <MFRC522_Request>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 8001d24:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d160      	bne.n	8001dee <RFID+0x156>
		  sprintf(txBuffer,"Card detected ..\n");
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	493a      	ldr	r1, [pc, #232]	; (8001e1c <RFID+0x184>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f008 fe54 	bl	800a9e0 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8001d38:	f107 0118 	add.w	r1, r7, #24
 8001d3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d40:	2264      	movs	r2, #100	; 0x64
 8001d42:	4835      	ldr	r0, [pc, #212]	; (8001e18 <RFID+0x180>)
 8001d44:	f004 fd51 	bl	80067ea <HAL_UART_Transmit>
		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
 8001d48:	7a3b      	ldrb	r3, [r7, #8]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	7a7b      	ldrb	r3, [r7, #9]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	7abb      	ldrb	r3, [r7, #10]
 8001d52:	f107 0018 	add.w	r0, r7, #24
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4931      	ldr	r1, [pc, #196]	; (8001e20 <RFID+0x188>)
 8001d5c:	f008 fe40 	bl	800a9e0 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	2264      	movs	r2, #100	; 0x64
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f008 f9c7 	bl	800a0fc <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fab6 	bl	80012e4 <MFRC522_Anticoll>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 8001d7e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d142      	bne.n	8001e0c <RFID+0x174>
			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
 8001d86:	7a3a      	ldrb	r2, [r7, #8]
 8001d88:	7a7b      	ldrb	r3, [r7, #9]
 8001d8a:	4053      	eors	r3, r2
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	7abb      	ldrb	r3, [r7, #10]
 8001d90:	4053      	eors	r3, r2
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	4053      	eors	r3, r2
 8001d98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  for(int i = 0; i <4 ;i++){
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001da2:	e010      	b.n	8001dc6 <RFID+0x12e>
				  UID[i]=cardstr[i];
 8001da4:	f107 0208 	add.w	r2, r7, #8
 8001da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dac:	4413      	add	r3, r2
 8001dae:	7819      	ldrb	r1, [r3, #0]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <RFID+0x18c>)
 8001db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001db6:	4413      	add	r3, r2
 8001db8:	460a      	mov	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 8001dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	ddea      	ble.n	8001da4 <RFID+0x10c>
			  }
			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
 8001dce:	7a3b      	ldrb	r3, [r7, #8]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	7a7b      	ldrb	r3, [r7, #9]
 8001dd4:	461c      	mov	r4, r3
 8001dd6:	7abb      	ldrb	r3, [r7, #10]
 8001dd8:	7afa      	ldrb	r2, [r7, #11]
 8001dda:	f107 0018 	add.w	r0, r7, #24
 8001dde:	9201      	str	r2, [sp, #4]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	4623      	mov	r3, r4
 8001de4:	460a      	mov	r2, r1
 8001de6:	4910      	ldr	r1, [pc, #64]	; (8001e28 <RFID+0x190>)
 8001de8:	f008 fdfa 	bl	800a9e0 <siprintf>
 8001dec:	e00e      	b.n	8001e0c <RFID+0x174>
//			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	2264      	movs	r2, #100	; 0x64
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f008 f980 	bl	800a0fc <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 8001dfc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	4909      	ldr	r1, [pc, #36]	; (8001e2c <RFID+0x194>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f008 fdea 	bl	800a9e0 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
    osDelay(100);
 8001e0c:	2064      	movs	r0, #100	; 0x64
 8001e0e:	f005 fbc7 	bl	80075a0 <osDelay>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8001e12:	e77e      	b.n	8001d12 <RFID+0x7a>
 8001e14:	0800cfb4 	.word	0x0800cfb4
 8001e18:	20004e88 	.word	0x20004e88
 8001e1c:	0800cfcc 	.word	0x0800cfcc
 8001e20:	0800cfe0 	.word	0x0800cfe0
 8001e24:	20000204 	.word	0x20000204
 8001e28:	0800cff8 	.word	0x0800cff8
 8001e2c:	0800d00c 	.word	0x0800d00c

08001e30 <ADCProcesing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCProcesing */
void ADCProcesing(void *argument)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b09c      	sub	sp, #112	; 0x70
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADCProcesing */
	char txBuffer[100] = {};
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2260      	movs	r2, #96	; 0x60
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f008 f959 	bl	800a0fc <memset>
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	492c      	ldr	r1, [pc, #176]	; (8001f00 <ADCProcesing+0xd0>)
 8001e4e:	482d      	ldr	r0, [pc, #180]	; (8001f04 <ADCProcesing+0xd4>)
 8001e50:	f000 fdca 	bl	80029e8 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization..\n");
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	492b      	ldr	r1, [pc, #172]	; (8001f08 <ADCProcesing+0xd8>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f008 fdc0 	bl	800a9e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8001e60:	f107 0108 	add.w	r1, r7, #8
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
 8001e68:	2264      	movs	r2, #100	; 0x64
 8001e6a:	4828      	ldr	r0, [pc, #160]	; (8001f0c <ADCProcesing+0xdc>)
 8001e6c:	f004 fcbd 	bl	80067ea <HAL_UART_Transmit>
	/* Initialize RC Filter */
	RCFilter_Init(&rcFiltFuel, 5.0f, 100.0f);
 8001e70:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001f10 <ADCProcesing+0xe0>
 8001e74:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001e78:	4826      	ldr	r0, [pc, #152]	; (8001f14 <ADCProcesing+0xe4>)
 8001e7a:	f7ff fa71 	bl	8001360 <RCFilter_Init>

	/*Initialize Moving Average Filter*/
	MovAvgFilter_init(&MAFiltFuel);
 8001e7e:	4826      	ldr	r0, [pc, #152]	; (8001f18 <ADCProcesing+0xe8>)
 8001e80:	f7ff faed 	bl	800145e <MovAvgFilter_init>
	/* Start ADC */
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 8001e84:	2203      	movs	r2, #3
 8001e86:	491e      	ldr	r1, [pc, #120]	; (8001f00 <ADCProcesing+0xd0>)
 8001e88:	481e      	ldr	r0, [pc, #120]	; (8001f04 <ADCProcesing+0xd4>)
 8001e8a:	f000 fdad 	bl	80029e8 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization Success..\n");
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	4922      	ldr	r1, [pc, #136]	; (8001f1c <ADCProcesing+0xec>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f008 fda3 	bl	800a9e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8001e9a:	f107 0108 	add.w	r1, r7, #8
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	2264      	movs	r2, #100	; 0x64
 8001ea4:	4819      	ldr	r0, [pc, #100]	; (8001f0c <ADCProcesing+0xdc>)
 8001ea6:	f004 fca0 	bl	80067ea <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  float input = (value[1]/ADC_RESOLUTION) * VOLTAGE_REFERENCE;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <ADCProcesing+0xf0>)
 8001eac:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eb0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001f24 <ADCProcesing+0xf4>
 8001eb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001eb8:	ee16 0a90 	vmov	r0, s13
 8001ebc:	f7fe fb4c 	bl	8000558 <__aeabi_f2d>
 8001ec0:	a30d      	add	r3, pc, #52	; (adr r3, 8001ef8 <ADCProcesing+0xc8>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	f7fe fb9f 	bl	8000608 <__aeabi_dmul>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe71 	bl	8000bb8 <__aeabi_d2f>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  RCFilter_Update(&rcFiltFuel, input);
 8001eda:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <ADCProcesing+0xe4>)
 8001ee0:	f7ff fa94 	bl	800140c <RCFilter_Update>
	  MovAvgFilter_Update(&MAFiltFuel, input);
 8001ee4:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <ADCProcesing+0xe8>)
 8001eea:	f7ff fad9 	bl	80014a0 <MovAvgFilter_Update>
//	  sprintf(txBuffer,"Raw : %.3f Filtered : %.3f\n", input, rcFiltFuel.out[0]);
//	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
	  osDelay(100); //100 Hz Sampling Rate
 8001eee:	2064      	movs	r0, #100	; 0x64
 8001ef0:	f005 fb56 	bl	80075a0 <osDelay>
  {
 8001ef4:	e7d9      	b.n	8001eaa <ADCProcesing+0x7a>
 8001ef6:	bf00      	nop
 8001ef8:	66666666 	.word	0x66666666
 8001efc:	400a6666 	.word	0x400a6666
 8001f00:	20004dac 	.word	0x20004dac
 8001f04:	20004cbc 	.word	0x20004cbc
 8001f08:	0800d018 	.word	0x0800d018
 8001f0c:	20004e88 	.word	0x20004e88
 8001f10:	42c80000 	.word	0x42c80000
 8001f14:	20004e1c 	.word	0x20004e1c
 8001f18:	20004bf0 	.word	0x20004bf0
 8001f1c:	0800d030 	.word	0x0800d030
 8001f20:	20004ee0 	.word	0x20004ee0
 8001f24:	45800000 	.word	0x45800000

08001f28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f3a:	f000 fccd 	bl	80028d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40010000 	.word	0x40010000

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i
}
 8001f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <Error_Handler+0x8>

08001f56 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b088      	sub	sp, #32
 8001f5a:	af04      	add	r7, sp, #16
 8001f5c:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 8001f5e:	2364      	movs	r3, #100	; 0x64
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	2301      	movs	r3, #1
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	f107 030f 	add.w	r3, r7, #15
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	2200      	movs	r2, #0
 8001f70:	21a6      	movs	r1, #166	; 0xa6
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f002 f99c 	bl	80042b0 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2be5      	cmp	r3, #229	; 0xe5
 8001f7c:	d15e      	bne.n	800203c <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8001f82:	2364      	movs	r3, #100	; 0x64
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	2301      	movs	r3, #1
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	f107 030e 	add.w	r3, r7, #14
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	222d      	movs	r2, #45	; 0x2d
 8001f94:	21a6      	movs	r1, #166	; 0xa6
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f002 f890 	bl	80040bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8001f9c:	2064      	movs	r0, #100	; 0x64
 8001f9e:	f000 fcbb 	bl	8002918 <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 8001fa2:	230b      	movs	r3, #11
 8001fa4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	2301      	movs	r3, #1
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	f107 030e 	add.w	r3, r7, #14
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2231      	movs	r2, #49	; 0x31
 8001fb8:	21a6      	movs	r1, #166	; 0xa6
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f002 f87e 	bl	80040bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8001fc0:	2064      	movs	r0, #100	; 0x64
 8001fc2:	f000 fca9 	bl	8002918 <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8001fc6:	2364      	movs	r3, #100	; 0x64
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	f107 030d 	add.w	r3, r7, #13
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	222c      	movs	r2, #44	; 0x2c
 8001fd8:	21a6      	movs	r1, #166	; 0xa6
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f002 f968 	bl	80042b0 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 8001fe0:	7b7b      	ldrb	r3, [r7, #13]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 8001fea:	7b7b      	ldrb	r3, [r7, #13]
 8001fec:	f043 030f 	orr.w	r3, r3, #15
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8001ff4:	2364      	movs	r3, #100	; 0x64
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f107 030d 	add.w	r3, r7, #13
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	222c      	movs	r2, #44	; 0x2c
 8002006:	21a6      	movs	r1, #166	; 0xa6
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f002 f857 	bl	80040bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800200e:	2064      	movs	r0, #100	; 0x64
 8002010:	f000 fc82 	bl	8002918 <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 8002014:	2308      	movs	r3, #8
 8002016:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002018:	2364      	movs	r3, #100	; 0x64
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	2301      	movs	r3, #1
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	f107 030e 	add.w	r3, r7, #14
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2301      	movs	r3, #1
 8002028:	222d      	movs	r2, #45	; 0x2d
 800202a:	21a6      	movs	r1, #166	; 0xa6
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f002 f845 	bl	80040bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002032:	2064      	movs	r0, #100	; 0x64
 8002034:	f000 fc70 	bl	8002918 <HAL_Delay>

        return check;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	e000      	b.n	800203e <MPU6050_Init+0xe8>
    }
    return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af04      	add	r7, sp, #16
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002052:	2364      	movs	r3, #100	; 0x64
 8002054:	9302      	str	r3, [sp, #8]
 8002056:	2306      	movs	r3, #6
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2301      	movs	r3, #1
 8002062:	2232      	movs	r2, #50	; 0x32
 8002064:	21a6      	movs	r1, #166	; 0xa6
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f002 f922 	bl	80042b0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 800206c:	7a7b      	ldrb	r3, [r7, #9]
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	b21a      	sxth	r2, r3
 8002072:	7a3b      	ldrb	r3, [r7, #8]
 8002074:	b21b      	sxth	r3, r3
 8002076:	4313      	orrs	r3, r2
 8002078:	b21a      	sxth	r2, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21a      	sxth	r2, r3
 8002084:	7abb      	ldrb	r3, [r7, #10]
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b21a      	sxth	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 8002090:	7b7b      	ldrb	r3, [r7, #13]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b21a      	sxth	r2, r3
 8002096:	7b3b      	ldrb	r3, [r7, #12]
 8002098:	b21b      	sxth	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b21a      	sxth	r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <MPU6050_Read_Accel+0x108>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ba:	ee17 0a90 	vmov	r0, s15
 80020be:	f7fe fa4b 	bl	8000558 <__aeabi_f2d>
 80020c2:	a321      	add	r3, pc, #132	; (adr r3, 8002148 <MPU6050_Read_Accel+0x100>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe fbc8 	bl	800085c <__aeabi_ddiv>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MPU6050_Read_Accel+0x108>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	ee17 0a90 	vmov	r0, s15
 80020f2:	f7fe fa31 	bl	8000558 <__aeabi_f2d>
 80020f6:	a314      	add	r3, pc, #80	; (adr r3, 8002148 <MPU6050_Read_Accel+0x100>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fbae 	bl	800085c <__aeabi_ddiv>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	6839      	ldr	r1, [r7, #0]
 8002106:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <MPU6050_Read_Accel+0x108>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002122:	ee17 0a90 	vmov	r0, s15
 8002126:	f7fe fa17 	bl	8000558 <__aeabi_f2d>
 800212a:	a307      	add	r3, pc, #28	; (adr r3, 8002148 <MPU6050_Read_Accel+0x100>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fb94 	bl	800085c <__aeabi_ddiv>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	6839      	ldr	r1, [r7, #0]
 800213a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	3a92a305 	.word	0x3a92a305
 800214c:	40239d01 	.word	0x40239d01
 8002150:	20000000 	.word	0x20000000

08002154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_MspInit+0x54>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <HAL_MspInit+0x54>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_MspInit+0x54>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_MspInit+0x54>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_MspInit+0x54>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_MspInit+0x54>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	210f      	movs	r1, #15
 8002196:	f06f 0001 	mvn.w	r0, #1
 800219a:	f001 f881 	bl	80032a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a3c      	ldr	r2, [pc, #240]	; (80022bc <HAL_ADC_MspInit+0x110>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d171      	bne.n	80022b2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_ADC_MspInit+0x114>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8002222:	2320      	movs	r3, #32
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002226:	2303      	movs	r3, #3
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4823      	ldr	r0, [pc, #140]	; (80022c4 <HAL_ADC_MspInit+0x118>)
 8002236:	f001 fc5f 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACCU_LEVEL_Pin|FUEL_LEVEL_Pin;
 800223a:	2303      	movs	r3, #3
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800223e:	2303      	movs	r3, #3
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	481e      	ldr	r0, [pc, #120]	; (80022c8 <HAL_ADC_MspInit+0x11c>)
 800224e:	f001 fc53 	bl	8003af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_ADC_MspInit+0x120>)
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_ADC_MspInit+0x124>)
 8002256:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_ADC_MspInit+0x120>)
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_ADC_MspInit+0x120>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_ADC_MspInit+0x120>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_ADC_MspInit+0x120>)
 800226c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002270:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_ADC_MspInit+0x120>)
 8002274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002278:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_ADC_MspInit+0x120>)
 800227c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002280:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_ADC_MspInit+0x120>)
 8002284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002288:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_ADC_MspInit+0x120>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_ADC_MspInit+0x120>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002296:	480d      	ldr	r0, [pc, #52]	; (80022cc <HAL_ADC_MspInit+0x120>)
 8002298:	f001 f82c 	bl	80032f4 <HAL_DMA_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80022a2:	f7ff fe53 	bl	8001f4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a08      	ldr	r2, [pc, #32]	; (80022cc <HAL_ADC_MspInit+0x120>)
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_ADC_MspInit+0x120>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	; 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40012000 	.word	0x40012000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40020400 	.word	0x40020400
 80022cc:	20004db8 	.word	0x20004db8
 80022d0:	40026410 	.word	0x40026410

080022d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_I2C_MspInit+0x84>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d12b      	bne.n	800234e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_I2C_MspInit+0x88>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_I2C_MspInit+0x88>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_I2C_MspInit+0x88>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002312:	23c0      	movs	r3, #192	; 0xc0
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002316:	2312      	movs	r3, #18
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002322:	2304      	movs	r3, #4
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	480c      	ldr	r0, [pc, #48]	; (8002360 <HAL_I2C_MspInit+0x8c>)
 800232e:	f001 fbe3 	bl	8003af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_I2C_MspInit+0x88>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_I2C_MspInit+0x88>)
 800233c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_I2C_MspInit+0x88>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800234e:	bf00      	nop
 8002350:	3728      	adds	r7, #40	; 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40005400 	.word	0x40005400
 800235c:	40023800 	.word	0x40023800
 8002360:	40020400 	.word	0x40020400

08002364 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_SPI_MspInit+0x84>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d12b      	bne.n	80023de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_SPI_MspInit+0x88>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	4a17      	ldr	r2, [pc, #92]	; (80023ec <HAL_SPI_MspInit+0x88>)
 8002390:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002394:	6453      	str	r3, [r2, #68]	; 0x44
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_SPI_MspInit+0x88>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_SPI_MspInit+0x88>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_SPI_MspInit+0x88>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_SPI_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023be:	23e0      	movs	r3, #224	; 0xe0
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ce:	2305      	movs	r3, #5
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <HAL_SPI_MspInit+0x8c>)
 80023da:	f001 fb8d 	bl	8003af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40013000 	.word	0x40013000
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020000 	.word	0x40020000

080023f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a4e      	ldr	r2, [pc, #312]	; (800254c <HAL_UART_MspInit+0x158>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d164      	bne.n	80024e0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <HAL_UART_MspInit+0x15c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_UART_MspInit+0x15c>)
 8002420:	f043 0310 	orr.w	r3, r3, #16
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <HAL_UART_MspInit+0x15c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_UART_MspInit+0x15c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a45      	ldr	r2, [pc, #276]	; (8002550 <HAL_UART_MspInit+0x15c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_UART_MspInit+0x15c>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800244e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002460:	2307      	movs	r3, #7
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	483a      	ldr	r0, [pc, #232]	; (8002554 <HAL_UART_MspInit+0x160>)
 800246c:	f001 fb44 	bl	8003af8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_UART_MspInit+0x164>)
 8002472:	4a3a      	ldr	r2, [pc, #232]	; (800255c <HAL_UART_MspInit+0x168>)
 8002474:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002476:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_UART_MspInit+0x164>)
 8002478:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800247c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800247e:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_UART_MspInit+0x164>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_UART_MspInit+0x164>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_UART_MspInit+0x164>)
 800248c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002490:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_UART_MspInit+0x164>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_UART_MspInit+0x164>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_UART_MspInit+0x164>)
 80024a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_UART_MspInit+0x164>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <HAL_UART_MspInit+0x164>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024b2:	4829      	ldr	r0, [pc, #164]	; (8002558 <HAL_UART_MspInit+0x164>)
 80024b4:	f000 ff1e 	bl	80032f4 <HAL_DMA_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024be:	f7ff fd45 	bl	8001f4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_UART_MspInit+0x164>)
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
 80024c8:	4a23      	ldr	r2, [pc, #140]	; (8002558 <HAL_UART_MspInit+0x164>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2105      	movs	r1, #5
 80024d2:	2025      	movs	r0, #37	; 0x25
 80024d4:	f000 fee4 	bl	80032a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024d8:	2025      	movs	r0, #37	; 0x25
 80024da:	f000 fefd 	bl	80032d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024de:	e030      	b.n	8002542 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <HAL_UART_MspInit+0x16c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12b      	bne.n	8002542 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_UART_MspInit+0x15c>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_UART_MspInit+0x15c>)
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_UART_MspInit+0x15c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_UART_MspInit+0x15c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_UART_MspInit+0x15c>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_UART_MspInit+0x15c>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002522:	230c      	movs	r3, #12
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002532:	2307      	movs	r3, #7
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <HAL_UART_MspInit+0x160>)
 800253e:	f001 fadb 	bl	8003af8 <HAL_GPIO_Init>
}
 8002542:	bf00      	nop
 8002544:	3730      	adds	r7, #48	; 0x30
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40011000 	.word	0x40011000
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000
 8002558:	20004d04 	.word	0x20004d04
 800255c:	40026440 	.word	0x40026440
 8002560:	40004400 	.word	0x40004400

08002564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002574:	2200      	movs	r2, #0
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	2019      	movs	r0, #25
 800257a:	f000 fe91 	bl	80032a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800257e:	2019      	movs	r0, #25
 8002580:	f000 feaa 	bl	80032d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_InitTick+0xa0>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_InitTick+0xa0>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6453      	str	r3, [r2, #68]	; 0x44
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_InitTick+0xa0>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025a0:	f107 0210 	add.w	r2, r7, #16
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 f876 	bl	800569c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025b0:	f003 f860 	bl	8005674 <HAL_RCC_GetPCLK2Freq>
 80025b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	4a13      	ldr	r2, [pc, #76]	; (8002608 <HAL_InitTick+0xa4>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	3b01      	subs	r3, #1
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_InitTick+0xa8>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_InitTick+0xac>)
 80025c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_InitTick+0xa8>)
 80025cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_InitTick+0xa8>)
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_InitTick+0xa8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_InitTick+0xa8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80025e4:	4809      	ldr	r0, [pc, #36]	; (800260c <HAL_InitTick+0xa8>)
 80025e6:	f003 fe33 	bl	8006250 <HAL_TIM_Base_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80025f0:	4806      	ldr	r0, [pc, #24]	; (800260c <HAL_InitTick+0xa8>)
 80025f2:	f003 fe87 	bl	8006304 <HAL_TIM_Base_Start_IT>
 80025f6:	4603      	mov	r3, r0
 80025f8:	e000      	b.n	80025fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	431bde83 	.word	0x431bde83
 800260c:	20004eec 	.word	0x20004eec
 8002610:	40010000 	.word	0x40010000

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <NMI_Handler+0x4>

0800261a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <MemManage_Handler+0x4>

08002626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <BusFault_Handler+0x4>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <UsageFault_Handler+0x4>

08002632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002646:	f003 febf 	bl	80063c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20004eec 	.word	0x20004eec

08002654 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <USART1_IRQHandler+0x10>)
 800265a:	f004 f959 	bl	8006910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20004d64 	.word	0x20004d64

08002668 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <DMA2_Stream0_IRQHandler+0x10>)
 800266e:	f000 ffd9 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20004db8 	.word	0x20004db8

0800267c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <DMA2_Stream2_IRQHandler+0x10>)
 8002682:	f000 ffcf 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20004d04 	.word	0x20004d04

08002690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
	return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_kill>:

int _kill(int pid, int sig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026aa:	f007 fcef 	bl	800a08c <__errno>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2216      	movs	r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
	return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_exit>:

void _exit (int status)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffe7 	bl	80026a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026d2:	e7fe      	b.n	80026d2 <_exit+0x12>

080026d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e00a      	b.n	80026fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026e6:	f3af 8000 	nop.w
 80026ea:	4601      	mov	r1, r0
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbf0      	blt.n	80026e6 <_read+0x12>
	}

return len;
 8002704:	687b      	ldr	r3, [r7, #4]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e009      	b.n	8002734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf1      	blt.n	8002720 <_write+0x12>
	}
	return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_close>:

int _close(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
	return -1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276e:	605a      	str	r2, [r3, #4]
	return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_isatty>:

int _isatty(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	return 1;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
	return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <_sbrk+0x5c>)
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <_sbrk+0x60>)
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <_sbrk+0x64>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <_sbrk+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e0:	f007 fc54 	bl	800a08c <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	e009      	b.n	8002804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <_sbrk+0x64>)
 8002800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20018000 	.word	0x20018000
 8002810:	00000400 	.word	0x00000400
 8002814:	20000208 	.word	0x20000208
 8002818:	20004f88 	.word	0x20004f88

0800281c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002844:	480d      	ldr	r0, [pc, #52]	; (800287c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002846:	490e      	ldr	r1, [pc, #56]	; (8002880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800284c:	e002      	b.n	8002854 <LoopCopyDataInit>

0800284e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002852:	3304      	adds	r3, #4

08002854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002858:	d3f9      	bcc.n	800284e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800285c:	4c0b      	ldr	r4, [pc, #44]	; (800288c <LoopFillZerobss+0x26>)
  movs r3, #0
 800285e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002860:	e001      	b.n	8002866 <LoopFillZerobss>

08002862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002864:	3204      	adds	r2, #4

08002866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002868:	d3fb      	bcc.n	8002862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800286a:	f7ff ffd7 	bl	800281c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286e:	f007 fc13 	bl	800a098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7fe fe8b 	bl	800158c <main>
  bx  lr    
 8002876:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002878:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002884:	0800d510 	.word	0x0800d510
  ldr r2, =_sbss
 8002888:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800288c:	20004f88 	.word	0x20004f88

08002890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC_IRQHandler>
	...

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_Init+0x40>)
 800289e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <HAL_Init+0x40>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <HAL_Init+0x40>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028bc:	2003      	movs	r0, #3
 80028be:	f000 fce4 	bl	800328a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7ff fe4e 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c8:	f7ff fc44 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00

080028d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_IncTick+0x20>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_IncTick+0x24>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <HAL_IncTick+0x24>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000000c 	.word	0x2000000c
 80028fc:	20004f34 	.word	0x20004f34

08002900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_GetTick+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20004f34 	.word	0x20004f34

08002918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff ffee 	bl	8002900 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d005      	beq.n	800293e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_Delay+0x44>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800293e:	bf00      	nop
 8002940:	f7ff ffde 	bl	8002900 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d8f7      	bhi.n	8002940 <HAL_Delay+0x28>
  {
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000000c 	.word	0x2000000c

08002960 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e033      	b.n	80029de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fc14 	bl	80021ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029a6:	f023 0302 	bic.w	r3, r3, #2
 80029aa:	f043 0202 	orr.w	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa3e 	bl	8002e34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
 80029ce:	e001      	b.n	80029d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_Start_DMA+0x1e>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e0ce      	b.n	8002ba4 <HAL_ADC_Start_DMA+0x1bc>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d018      	beq.n	8002a4e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a2c:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <HAL_ADC_Start_DMA+0x1c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5f      	ldr	r2, [pc, #380]	; (8002bb0 <HAL_ADC_Start_DMA+0x1c8>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	0c9a      	lsrs	r2, r3, #18
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a40:	e002      	b.n	8002a48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f9      	bne.n	8002a42 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5c:	d107      	bne.n	8002a6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	f040 8086 	bne.w	8002b8a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d106      	bne.n	8002acc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f023 0206 	bic.w	r2, r3, #6
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aca:	e002      	b.n	8002ad2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <HAL_ADC_Start_DMA+0x1cc>)
 8002adc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <HAL_ADC_Start_DMA+0x1d0>)
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HAL_ADC_Start_DMA+0x1d4>)
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	4a33      	ldr	r2, [pc, #204]	; (8002bc0 <HAL_ADC_Start_DMA+0x1d8>)
 8002af4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002afe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	334c      	adds	r3, #76	; 0x4c
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f000 fc8e 	bl	8003450 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d129      	bne.n	8002ba2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	e020      	b.n	8002ba2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_ADC_Start_DMA+0x1dc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d11b      	bne.n	8002ba2 <HAL_ADC_Start_DMA+0x1ba>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d114      	bne.n	8002ba2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	e00b      	b.n	8002ba2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	40012300 	.word	0x40012300
 8002bb8:	0800302d 	.word	0x0800302d
 8002bbc:	080030e7 	.word	0x080030e7
 8002bc0:	08003103 	.word	0x08003103
 8002bc4:	40012000 	.word	0x40012000

08002bc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1c>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e105      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x228>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b09      	cmp	r3, #9
 8002c1a:	d925      	bls.n	8002c68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	3b1e      	subs	r3, #30
 8002c32:	2207      	movs	r2, #7
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	400a      	ands	r2, r1
 8002c40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	4603      	mov	r3, r0
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4403      	add	r3, r0
 8002c5a:	3b1e      	subs	r3, #30
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	e022      	b.n	8002cae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6919      	ldr	r1, [r3, #16]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43da      	mvns	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	400a      	ands	r2, r1
 8002c8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6919      	ldr	r1, [r3, #16]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4403      	add	r3, r0
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d824      	bhi.n	8002d00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3b05      	subs	r3, #5
 8002cc8:	221f      	movs	r2, #31
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b05      	subs	r3, #5
 8002cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfe:	e04c      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d824      	bhi.n	8002d52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	3b23      	subs	r3, #35	; 0x23
 8002d1a:	221f      	movs	r2, #31
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43da      	mvns	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	400a      	ands	r2, r1
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	4618      	mov	r0, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	3b23      	subs	r3, #35	; 0x23
 8002d44:	fa00 f203 	lsl.w	r2, r0, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d50:	e023      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	3b41      	subs	r3, #65	; 0x41
 8002d64:	221f      	movs	r2, #31
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	400a      	ands	r2, r1
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4618      	mov	r0, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b41      	subs	r3, #65	; 0x41
 8002d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_ADC_ConfigChannel+0x234>)
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_ADC_ConfigChannel+0x238>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x1cc>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b12      	cmp	r3, #18
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_ADC_ConfigChannel+0x238>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d123      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x21e>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d003      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0x1e6>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b11      	cmp	r3, #17
 8002dd4:	d11b      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d111      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_ADC_ConfigChannel+0x23c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <HAL_ADC_ConfigChannel+0x240>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	0c9a      	lsrs	r2, r3, #18
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e00:	e002      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f9      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40012300 	.word	0x40012300
 8002e28:	40012000 	.word	0x40012000
 8002e2c:	20000004 	.word	0x20000004
 8002e30:	431bde83 	.word	0x431bde83

08002e34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e3c:	4b79      	ldr	r3, [pc, #484]	; (8003024 <ADC_Init+0x1f0>)
 8002e3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	021a      	lsls	r2, r3, #8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	4a58      	ldr	r2, [pc, #352]	; (8003028 <ADC_Init+0x1f4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d022      	beq.n	8002f12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6899      	ldr	r1, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e00f      	b.n	8002f32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0202 	bic.w	r2, r2, #2
 8002f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7e1b      	ldrb	r3, [r3, #24]
 8002f4c:	005a      	lsls	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01b      	beq.n	8002f98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	035a      	lsls	r2, r3, #13
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e007      	b.n	8002fa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	051a      	lsls	r2, r3, #20
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fea:	025a      	lsls	r2, r3, #9
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	029a      	lsls	r2, r3, #10
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40012300 	.word	0x40012300
 8003028:	0f000001 	.word	0x0f000001

0800302c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003042:	2b00      	cmp	r3, #0
 8003044:	d13c      	bne.n	80030c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d12b      	bne.n	80030b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003064:	2b00      	cmp	r3, #0
 8003066:	d127      	bne.n	80030b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003072:	2b00      	cmp	r3, #0
 8003074:	d006      	beq.n	8003084 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003080:	2b00      	cmp	r3, #0
 8003082:	d119      	bne.n	80030b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0220 	bic.w	r2, r2, #32
 8003092:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7fe fa41 	bl	8001540 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030be:	e00e      	b.n	80030de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff fd85 	bl	8002bdc <HAL_ADC_ErrorCallback>
}
 80030d2:	e004      	b.n	80030de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fd67 	bl	8002bc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0204 	orr.w	r2, r3, #4
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff fd5a 	bl	8002bdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ff4c 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b2:	f7ff ff61 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f7ff ffb1 	bl	8003224 <NVIC_EncodePriority>
 80032c2:	4602      	mov	r2, r0
 80032c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff80 	bl	80031d0 <__NVIC_SetPriority>
}
 80032d0:	bf00      	nop
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ff54 	bl	8003194 <__NVIC_EnableIRQ>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff fafe 	bl	8002900 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e099      	b.n	8003444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003330:	e00f      	b.n	8003352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003332:	f7ff fae5 	bl	8002900 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b05      	cmp	r3, #5
 800333e:	d908      	bls.n	8003352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2203      	movs	r2, #3
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e078      	b.n	8003444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e8      	bne.n	8003332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4b38      	ldr	r3, [pc, #224]	; (800344c <HAL_DMA_Init+0x158>)
 800336c:	4013      	ands	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d107      	bne.n	80033bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	4313      	orrs	r3, r2
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0307 	bic.w	r3, r3, #7
 80033d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d117      	bne.n	8003416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00e      	beq.n	8003416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fb01 	bl	8003a00 <DMA_CheckFifoParam>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2240      	movs	r2, #64	; 0x40
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003412:	2301      	movs	r3, #1
 8003414:	e016      	b.n	8003444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fab8 	bl	8003994 <DMA_CalcBaseAndBitshift>
 8003424:	4603      	mov	r3, r0
 8003426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	f010803f 	.word	0xf010803f

08003450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_DMA_Start_IT+0x26>
 8003472:	2302      	movs	r3, #2
 8003474:	e040      	b.n	80034f8 <HAL_DMA_Start_IT+0xa8>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d12f      	bne.n	80034ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fa4a 	bl	8003938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	223f      	movs	r2, #63	; 0x3f
 80034aa:	409a      	lsls	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0216 	orr.w	r2, r2, #22
 80034be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0208 	orr.w	r2, r2, #8
 80034d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e005      	b.n	80034f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800350e:	f7ff f9f7 	bl	8002900 <HAL_GetTick>
 8003512:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d008      	beq.n	8003532 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e052      	b.n	80035d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0216 	bic.w	r2, r2, #22
 8003540:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003550:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_DMA_Abort+0x62>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0208 	bic.w	r2, r2, #8
 8003570:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003582:	e013      	b.n	80035ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003584:	f7ff f9bc 	bl	8002900 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b05      	cmp	r3, #5
 8003590:	d90c      	bls.n	80035ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2203      	movs	r2, #3
 80035a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e015      	b.n	80035d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e4      	bne.n	8003584 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	223f      	movs	r2, #63	; 0x3f
 80035c0:	409a      	lsls	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d004      	beq.n	80035fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00c      	b.n	8003618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2205      	movs	r2, #5
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003630:	4b92      	ldr	r3, [pc, #584]	; (800387c <HAL_DMA_IRQHandler+0x258>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a92      	ldr	r2, [pc, #584]	; (8003880 <HAL_DMA_IRQHandler+0x25c>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	0a9b      	lsrs	r3, r3, #10
 800363c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2208      	movs	r2, #8
 8003650:	409a      	lsls	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01a      	beq.n	8003690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	2208      	movs	r2, #8
 800367e:	409a      	lsls	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	2201      	movs	r2, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	2201      	movs	r2, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	2204      	movs	r2, #4
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2204      	movs	r2, #4
 80036ea:	409a      	lsls	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	2210      	movs	r2, #16
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d043      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d03c      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2210      	movs	r2, #16
 8003720:	409a      	lsls	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d018      	beq.n	8003766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d024      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
 8003752:	e01f      	b.n	8003794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e016      	b.n	8003794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d107      	bne.n	8003784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0208 	bic.w	r2, r2, #8
 8003782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	2220      	movs	r2, #32
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 808e 	beq.w	80038c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8086 	beq.w	80038c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2220      	movs	r2, #32
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d136      	bne.n	800383c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0216 	bic.w	r2, r2, #22
 80037dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_DMA_IRQHandler+0x1da>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0208 	bic.w	r2, r2, #8
 800380c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	223f      	movs	r2, #63	; 0x3f
 8003814:	409a      	lsls	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	2b00      	cmp	r3, #0
 8003830:	d07d      	beq.n	800392e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
        }
        return;
 800383a:	e078      	b.n	800392e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01c      	beq.n	8003884 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d108      	bne.n	800386a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	2b00      	cmp	r3, #0
 800385e:	d030      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
 8003868:	e02b      	b.n	80038c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d027      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
 800387a:	e022      	b.n	80038c2 <HAL_DMA_IRQHandler+0x29e>
 800387c:	20000004 	.word	0x20000004
 8003880:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0210 	bic.w	r2, r2, #16
 80038a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d032      	beq.n	8003930 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d022      	beq.n	800391c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2205      	movs	r2, #5
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3301      	adds	r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d307      	bcc.n	800390a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f2      	bne.n	80038ee <HAL_DMA_IRQHandler+0x2ca>
 8003908:	e000      	b.n	800390c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800390a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
 800392c:	e000      	b.n	8003930 <HAL_DMA_IRQHandler+0x30c>
        return;
 800392e:	bf00      	nop
    }
  }
}
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop

08003938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d108      	bne.n	8003978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003976:	e007      	b.n	8003988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	3b10      	subs	r3, #16
 80039a4:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <DMA_CalcBaseAndBitshift+0x64>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <DMA_CalcBaseAndBitshift+0x68>)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d909      	bls.n	80039d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	; 0x58
 80039d4:	e007      	b.n	80039e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	aaaaaaab 	.word	0xaaaaaaab
 80039fc:	0800d110 	.word	0x0800d110

08003a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11f      	bne.n	8003a5a <DMA_CheckFifoParam+0x5a>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d856      	bhi.n	8003ace <DMA_CheckFifoParam+0xce>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <DMA_CheckFifoParam+0x28>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a4b 	.word	0x08003a4b
 8003a30:	08003a39 	.word	0x08003a39
 8003a34:	08003acf 	.word	0x08003acf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d046      	beq.n	8003ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a48:	e043      	b.n	8003ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a52:	d140      	bne.n	8003ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a58:	e03d      	b.n	8003ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a62:	d121      	bne.n	8003aa8 <DMA_CheckFifoParam+0xa8>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d837      	bhi.n	8003ada <DMA_CheckFifoParam+0xda>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <DMA_CheckFifoParam+0x70>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a87 	.word	0x08003a87
 8003a78:	08003a81 	.word	0x08003a81
 8003a7c:	08003a99 	.word	0x08003a99
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e030      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d025      	beq.n	8003ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a96:	e022      	b.n	8003ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa0:	d11f      	bne.n	8003ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aa6:	e01c      	b.n	8003ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d903      	bls.n	8003ab6 <DMA_CheckFifoParam+0xb6>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d003      	beq.n	8003abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ab4:	e018      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8003aba:	e015      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      break;
 8003acc:	e00b      	b.n	8003ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e00a      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e008      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e006      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e004      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	; 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e159      	b.n	8003dc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b14:	2201      	movs	r2, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	f040 8148 	bne.w	8003dc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d005      	beq.n	8003b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d130      	bne.n	8003bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b80:	2201      	movs	r2, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 0201 	and.w	r2, r3, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d017      	beq.n	8003be8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d123      	bne.n	8003c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	08da      	lsrs	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3208      	adds	r2, #8
 8003bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	220f      	movs	r2, #15
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	08da      	lsrs	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3208      	adds	r2, #8
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	2203      	movs	r2, #3
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0203 	and.w	r2, r3, #3
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80a2 	beq.w	8003dc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b57      	ldr	r3, [pc, #348]	; (8003de0 <HAL_GPIO_Init+0x2e8>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	4a56      	ldr	r2, [pc, #344]	; (8003de0 <HAL_GPIO_Init+0x2e8>)
 8003c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8e:	4b54      	ldr	r3, [pc, #336]	; (8003de0 <HAL_GPIO_Init+0x2e8>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c9a:	4a52      	ldr	r2, [pc, #328]	; (8003de4 <HAL_GPIO_Init+0x2ec>)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a49      	ldr	r2, [pc, #292]	; (8003de8 <HAL_GPIO_Init+0x2f0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d019      	beq.n	8003cfa <HAL_GPIO_Init+0x202>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a48      	ldr	r2, [pc, #288]	; (8003dec <HAL_GPIO_Init+0x2f4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_GPIO_Init+0x1fe>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a47      	ldr	r2, [pc, #284]	; (8003df0 <HAL_GPIO_Init+0x2f8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00d      	beq.n	8003cf2 <HAL_GPIO_Init+0x1fa>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a46      	ldr	r2, [pc, #280]	; (8003df4 <HAL_GPIO_Init+0x2fc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <HAL_GPIO_Init+0x1f6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a45      	ldr	r2, [pc, #276]	; (8003df8 <HAL_GPIO_Init+0x300>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <HAL_GPIO_Init+0x1f2>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	e008      	b.n	8003cfc <HAL_GPIO_Init+0x204>
 8003cea:	2307      	movs	r3, #7
 8003cec:	e006      	b.n	8003cfc <HAL_GPIO_Init+0x204>
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e004      	b.n	8003cfc <HAL_GPIO_Init+0x204>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e002      	b.n	8003cfc <HAL_GPIO_Init+0x204>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <HAL_GPIO_Init+0x204>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	f002 0203 	and.w	r2, r2, #3
 8003d02:	0092      	lsls	r2, r2, #2
 8003d04:	4093      	lsls	r3, r2
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d0c:	4935      	ldr	r1, [pc, #212]	; (8003de4 <HAL_GPIO_Init+0x2ec>)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	3302      	adds	r3, #2
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d1a:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <HAL_GPIO_Init+0x304>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d3e:	4a2f      	ldr	r2, [pc, #188]	; (8003dfc <HAL_GPIO_Init+0x304>)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d44:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <HAL_GPIO_Init+0x304>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d68:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <HAL_GPIO_Init+0x304>)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d6e:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <HAL_GPIO_Init+0x304>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d92:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <HAL_GPIO_Init+0x304>)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_GPIO_Init+0x304>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dbc:	4a0f      	ldr	r2, [pc, #60]	; (8003dfc <HAL_GPIO_Init+0x304>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b0f      	cmp	r3, #15
 8003dcc:	f67f aea2 	bls.w	8003b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	3724      	adds	r7, #36	; 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40013800 	.word	0x40013800
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40020400 	.word	0x40020400
 8003df0:	40020800 	.word	0x40020800
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40013c00 	.word	0x40013c00

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e1c:	e003      	b.n	8003e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e12b      	b.n	800409e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fa3a 	bl	80022d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e98:	f001 fbd8 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 8003e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4a81      	ldr	r2, [pc, #516]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d807      	bhi.n	8003eb8 <HAL_I2C_Init+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a80      	ldr	r2, [pc, #512]	; (80040ac <HAL_I2C_Init+0x278>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bf94      	ite	ls
 8003eb0:	2301      	movls	r3, #1
 8003eb2:	2300      	movhi	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e006      	b.n	8003ec6 <HAL_I2C_Init+0x92>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a7d      	ldr	r2, [pc, #500]	; (80040b0 <HAL_I2C_Init+0x27c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf94      	ite	ls
 8003ec0:	2301      	movls	r3, #1
 8003ec2:	2300      	movhi	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0e7      	b.n	800409e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a78      	ldr	r2, [pc, #480]	; (80040b4 <HAL_I2C_Init+0x280>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0c9b      	lsrs	r3, r3, #18
 8003ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d802      	bhi.n	8003f08 <HAL_I2C_Init+0xd4>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3301      	adds	r3, #1
 8003f06:	e009      	b.n	8003f1c <HAL_I2C_Init+0xe8>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	4a69      	ldr	r2, [pc, #420]	; (80040b8 <HAL_I2C_Init+0x284>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	495c      	ldr	r1, [pc, #368]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	d819      	bhi.n	8003f70 <HAL_I2C_Init+0x13c>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e59      	subs	r1, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f4a:	1c59      	adds	r1, r3, #1
 8003f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f50:	400b      	ands	r3, r1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_I2C_Init+0x138>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1e59      	subs	r1, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f64:	3301      	adds	r3, #1
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	e051      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	e04f      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d111      	bne.n	8003f9c <HAL_I2C_Init+0x168>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1e58      	subs	r0, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	440b      	add	r3, r1
 8003f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e012      	b.n	8003fc2 <HAL_I2C_Init+0x18e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e58      	subs	r0, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	0099      	lsls	r1, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Init+0x196>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e022      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_I2C_Init+0x1bc>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1e58      	subs	r0, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	440b      	add	r3, r1
 8003fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fee:	e00f      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e58      	subs	r0, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	0099      	lsls	r1, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	6809      	ldr	r1, [r1, #0]
 8004014:	4313      	orrs	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800403e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6911      	ldr	r1, [r2, #16]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68d2      	ldr	r2, [r2, #12]
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	430b      	orrs	r3, r1
 8004052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	000186a0 	.word	0x000186a0
 80040ac:	001e847f 	.word	0x001e847f
 80040b0:	003d08ff 	.word	0x003d08ff
 80040b4:	431bde83 	.word	0x431bde83
 80040b8:	10624dd3 	.word	0x10624dd3

080040bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	460b      	mov	r3, r1
 80040d0:	813b      	strh	r3, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d6:	f7fe fc13 	bl	8002900 <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	f040 80d9 	bne.w	800429c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2319      	movs	r3, #25
 80040f0:	2201      	movs	r2, #1
 80040f2:	496d      	ldr	r1, [pc, #436]	; (80042a8 <HAL_I2C_Mem_Write+0x1ec>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fc7f 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
 8004102:	e0cc      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Mem_Write+0x56>
 800410e:	2302      	movs	r3, #2
 8004110:	e0c5      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d007      	beq.n	8004138 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2221      	movs	r2, #33	; 0x21
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2240      	movs	r2, #64	; 0x40
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a4d      	ldr	r2, [pc, #308]	; (80042ac <HAL_I2C_Mem_Write+0x1f0>)
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800417a:	88f8      	ldrh	r0, [r7, #6]
 800417c:	893a      	ldrh	r2, [r7, #8]
 800417e:	8979      	ldrh	r1, [r7, #10]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	4603      	mov	r3, r0
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fab6 	bl	80046fc <I2C_RequestMemoryWrite>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d052      	beq.n	800423c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e081      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fd00 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d107      	bne.n	80041c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e06b      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b04      	cmp	r3, #4
 8004202:	d11b      	bne.n	800423c <HAL_I2C_Mem_Write+0x180>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	d017      	beq.n	800423c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1aa      	bne.n	800419a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fcec 	bl	8004c26 <I2C_WaitOnBTFFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e016      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	00100002 	.word	0x00100002
 80042ac:	ffff0000 	.word	0xffff0000

080042b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08c      	sub	sp, #48	; 0x30
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ca:	f7fe fb19 	bl	8002900 <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	f040 8208 	bne.w	80046ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2319      	movs	r3, #25
 80042e4:	2201      	movs	r2, #1
 80042e6:	497b      	ldr	r1, [pc, #492]	; (80044d4 <HAL_I2C_Mem_Read+0x224>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fb85 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	e1fb      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_I2C_Mem_Read+0x56>
 8004302:	2302      	movs	r3, #2
 8004304:	e1f4      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d007      	beq.n	800432c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2222      	movs	r2, #34	; 0x22
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800435c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <HAL_I2C_Mem_Read+0x228>)
 800436c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436e:	88f8      	ldrh	r0, [r7, #6]
 8004370:	893a      	ldrh	r2, [r7, #8]
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4603      	mov	r3, r0
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fa52 	bl	8004828 <I2C_RequestMemoryRead>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e1b0      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d113      	bne.n	80043be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004396:	2300      	movs	r3, #0
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e184      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d11b      	bne.n	80043fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e164      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	2b02      	cmp	r3, #2
 8004404:	d11b      	bne.n	800443e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004414:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004424:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	e144      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004454:	e138      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	2b03      	cmp	r3, #3
 800445c:	f200 80f1 	bhi.w	8004642 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004464:	2b01      	cmp	r3, #1
 8004466:	d123      	bne.n	80044b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fc1b 	bl	8004ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e139      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ae:	e10b      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d14e      	bne.n	8004556 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	2200      	movs	r2, #0
 80044c0:	4906      	ldr	r1, [pc, #24]	; (80044dc <HAL_I2C_Mem_Read+0x22c>)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fa98 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e10e      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
 80044d2:	bf00      	nop
 80044d4:	00100002 	.word	0x00100002
 80044d8:	ffff0000 	.word	0xffff0000
 80044dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004554:	e0b8      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	2200      	movs	r2, #0
 800455e:	4966      	ldr	r1, [pc, #408]	; (80046f8 <HAL_I2C_Mem_Read+0x448>)
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fa49 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0bf      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	2200      	movs	r2, #0
 80045ba:	494f      	ldr	r1, [pc, #316]	; (80046f8 <HAL_I2C_Mem_Read+0x448>)
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fa1b 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e091      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004640:	e042      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fb2e 	bl	8004ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e04c      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	d118      	bne.n	80046c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f47f aec2 	bne.w	8004456 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3728      	adds	r7, #40	; 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	00010004 	.word	0x00010004

080046fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	4603      	mov	r3, r0
 800470c:	817b      	strh	r3, [r7, #10]
 800470e:	460b      	mov	r3, r1
 8004710:	813b      	strh	r3, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	2200      	movs	r2, #0
 800472e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f960 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800474c:	d103      	bne.n	8004756 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e05f      	b.n	800481a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800475a:	897b      	ldrh	r3, [r7, #10]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004768:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	492d      	ldr	r1, [pc, #180]	; (8004824 <I2C_RequestMemoryWrite+0x128>)
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f998 	bl	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e04c      	b.n	800481a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004798:	6a39      	ldr	r1, [r7, #32]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fa02 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00d      	beq.n	80047c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d107      	bne.n	80047be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e02b      	b.n	800481a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047c8:	893b      	ldrh	r3, [r7, #8]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	611a      	str	r2, [r3, #16]
 80047d2:	e021      	b.n	8004818 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047d4:	893b      	ldrh	r3, [r7, #8]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b29b      	uxth	r3, r3
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e4:	6a39      	ldr	r1, [r7, #32]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f9dc 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d107      	bne.n	800480a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004808:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e005      	b.n	800481a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800480e:	893b      	ldrh	r3, [r7, #8]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	00010002 	.word	0x00010002

08004828 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	461a      	mov	r2, r3
 8004836:	4603      	mov	r3, r0
 8004838:	817b      	strh	r3, [r7, #10]
 800483a:	460b      	mov	r3, r1
 800483c:	813b      	strh	r3, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004850:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	2200      	movs	r2, #0
 800486a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f8c2 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004888:	d103      	bne.n	8004892 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0aa      	b.n	80049ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004896:	897b      	ldrh	r3, [r7, #10]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	6a3a      	ldr	r2, [r7, #32]
 80048aa:	4952      	ldr	r1, [pc, #328]	; (80049f4 <I2C_RequestMemoryRead+0x1cc>)
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f8fa 	bl	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e097      	b.n	80049ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	6a39      	ldr	r1, [r7, #32]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f964 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d107      	bne.n	80048fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e076      	b.n	80049ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d105      	bne.n	8004910 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004904:	893b      	ldrh	r3, [r7, #8]
 8004906:	b2da      	uxtb	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	611a      	str	r2, [r3, #16]
 800490e:	e021      	b.n	8004954 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004910:	893b      	ldrh	r3, [r7, #8]
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	b29b      	uxth	r3, r3
 8004916:	b2da      	uxtb	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004920:	6a39      	ldr	r1, [r7, #32]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f93e 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b04      	cmp	r3, #4
 8004934:	d107      	bne.n	8004946 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e050      	b.n	80049ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800494a:	893b      	ldrh	r3, [r7, #8]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004956:	6a39      	ldr	r1, [r7, #32]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f923 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b04      	cmp	r3, #4
 800496a:	d107      	bne.n	800497c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e035      	b.n	80049ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	2200      	movs	r2, #0
 8004998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f82b 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b6:	d103      	bne.n	80049c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e013      	b.n	80049ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049c4:	897b      	ldrh	r3, [r7, #10]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	6a3a      	ldr	r2, [r7, #32]
 80049d8:	4906      	ldr	r1, [pc, #24]	; (80049f4 <I2C_RequestMemoryRead+0x1cc>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f863 	bl	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	00010002 	.word	0x00010002

080049f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a08:	e025      	b.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d021      	beq.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fd ff75 	bl	8002900 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d116      	bne.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e023      	b.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10d      	bne.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	43da      	mvns	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	e00c      	b.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	43da      	mvns	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4013      	ands	r3, r2
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d0b6      	beq.n	8004a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ab4:	e051      	b.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	d123      	bne.n	8004b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0204 	orr.w	r2, r3, #4
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e046      	b.n	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d021      	beq.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b16:	f7fd fef3 	bl	8002900 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d302      	bcc.n	8004b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e020      	b.n	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10c      	bne.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf14      	ite	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	2300      	moveq	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e00b      	b.n	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	43da      	mvns	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d18d      	bne.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb0:	e02d      	b.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f8ce 	bl	8004d54 <I2C_IsAcknowledgeFailed>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e02d      	b.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d021      	beq.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fd fe99 	bl	8002900 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d116      	bne.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e007      	b.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d1ca      	bne.n	8004bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c32:	e02d      	b.n	8004c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f88d 	bl	8004d54 <I2C_IsAcknowledgeFailed>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e02d      	b.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d021      	beq.n	8004c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4c:	f7fd fe58 	bl	8002900 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d116      	bne.n	8004c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	f043 0220 	orr.w	r2, r3, #32
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e007      	b.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d1ca      	bne.n	8004c34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cb4:	e042      	b.n	8004d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d119      	bne.n	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0210 	mvn.w	r2, #16
 8004ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e029      	b.n	8004d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf8:	f7fd fe02 	bl	8002900 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d116      	bne.n	8004d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e007      	b.n	8004d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d1b5      	bne.n	8004cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6a:	d11b      	bne.n	8004da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f043 0204 	orr.w	r2, r3, #4
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e264      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d075      	beq.n	8004ebe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dd2:	4ba3      	ldr	r3, [pc, #652]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d00c      	beq.n	8004df8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dde:	4ba0      	ldr	r3, [pc, #640]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d112      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dea:	4b9d      	ldr	r3, [pc, #628]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df6:	d10b      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df8:	4b99      	ldr	r3, [pc, #612]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05b      	beq.n	8004ebc <HAL_RCC_OscConfig+0x108>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d157      	bne.n	8004ebc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e23f      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d106      	bne.n	8004e28 <HAL_RCC_OscConfig+0x74>
 8004e1a:	4b91      	ldr	r3, [pc, #580]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a90      	ldr	r2, [pc, #576]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e01d      	b.n	8004e64 <HAL_RCC_OscConfig+0xb0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x98>
 8004e32:	4b8b      	ldr	r3, [pc, #556]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a8a      	ldr	r2, [pc, #552]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a87      	ldr	r2, [pc, #540]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e00b      	b.n	8004e64 <HAL_RCC_OscConfig+0xb0>
 8004e4c:	4b84      	ldr	r3, [pc, #528]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a83      	ldr	r2, [pc, #524]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	4b81      	ldr	r3, [pc, #516]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a80      	ldr	r2, [pc, #512]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d013      	beq.n	8004e94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fd fd48 	bl	8002900 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e74:	f7fd fd44 	bl	8002900 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b64      	cmp	r3, #100	; 0x64
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e204      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0xc0>
 8004e92:	e014      	b.n	8004ebe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fd fd34 	bl	8002900 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fd fd30 	bl	8002900 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	; 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1f0      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eae:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0xe8>
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d063      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eca:	4b65      	ldr	r3, [pc, #404]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ed6:	4b62      	ldr	r3, [pc, #392]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d11c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ee2:	4b5f      	ldr	r3, [pc, #380]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d116      	bne.n	8004f1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eee:	4b5c      	ldr	r3, [pc, #368]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_RCC_OscConfig+0x152>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e1c4      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	4b56      	ldr	r3, [pc, #344]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4952      	ldr	r1, [pc, #328]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	e03a      	b.n	8004f92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f24:	4b4f      	ldr	r3, [pc, #316]	; (8005064 <HAL_RCC_OscConfig+0x2b0>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2a:	f7fd fce9 	bl	8002900 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f32:	f7fd fce5 	bl	8002900 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e1a5      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f44:	4b46      	ldr	r3, [pc, #280]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f50:	4b43      	ldr	r3, [pc, #268]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4940      	ldr	r1, [pc, #256]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]
 8004f64:	e015      	b.n	8004f92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f66:	4b3f      	ldr	r3, [pc, #252]	; (8005064 <HAL_RCC_OscConfig+0x2b0>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fcc8 	bl	8002900 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f74:	f7fd fcc4 	bl	8002900 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e184      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d030      	beq.n	8005000 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d016      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa6:	4b30      	ldr	r3, [pc, #192]	; (8005068 <HAL_RCC_OscConfig+0x2b4>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fd fca8 	bl	8002900 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fd fca4 	bl	8002900 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e164      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc6:	4b26      	ldr	r3, [pc, #152]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x200>
 8004fd2:	e015      	b.n	8005000 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <HAL_RCC_OscConfig+0x2b4>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fd fc91 	bl	8002900 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe2:	f7fd fc8d 	bl	8002900 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e14d      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8004ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 80a0 	beq.w	800514e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502c:	6413      	str	r3, [r2, #64]	; 0x40
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503a:	2301      	movs	r3, #1
 800503c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_OscConfig+0x2b8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d121      	bne.n	800508e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <HAL_RCC_OscConfig+0x2b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a07      	ldr	r2, [pc, #28]	; (800506c <HAL_RCC_OscConfig+0x2b8>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005056:	f7fd fc53 	bl	8002900 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	e011      	b.n	8005082 <HAL_RCC_OscConfig+0x2ce>
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800
 8005064:	42470000 	.word	0x42470000
 8005068:	42470e80 	.word	0x42470e80
 800506c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005070:	f7fd fc46 	bl	8002900 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e106      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	4b85      	ldr	r3, [pc, #532]	; (8005298 <HAL_RCC_OscConfig+0x4e4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d106      	bne.n	80050a4 <HAL_RCC_OscConfig+0x2f0>
 8005096:	4b81      	ldr	r3, [pc, #516]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	4a80      	ldr	r2, [pc, #512]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6713      	str	r3, [r2, #112]	; 0x70
 80050a2:	e01c      	b.n	80050de <HAL_RCC_OscConfig+0x32a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d10c      	bne.n	80050c6 <HAL_RCC_OscConfig+0x312>
 80050ac:	4b7b      	ldr	r3, [pc, #492]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	4a7a      	ldr	r2, [pc, #488]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80050b2:	f043 0304 	orr.w	r3, r3, #4
 80050b6:	6713      	str	r3, [r2, #112]	; 0x70
 80050b8:	4b78      	ldr	r3, [pc, #480]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	4a77      	ldr	r2, [pc, #476]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	6713      	str	r3, [r2, #112]	; 0x70
 80050c4:	e00b      	b.n	80050de <HAL_RCC_OscConfig+0x32a>
 80050c6:	4b75      	ldr	r3, [pc, #468]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4a74      	ldr	r2, [pc, #464]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70
 80050d2:	4b72      	ldr	r3, [pc, #456]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	4a71      	ldr	r2, [pc, #452]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d015      	beq.n	8005112 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e6:	f7fd fc0b 	bl	8002900 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ec:	e00a      	b.n	8005104 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fd fc07 	bl	8002900 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e0c5      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005104:	4b65      	ldr	r3, [pc, #404]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0ee      	beq.n	80050ee <HAL_RCC_OscConfig+0x33a>
 8005110:	e014      	b.n	800513c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005112:	f7fd fbf5 	bl	8002900 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fd fbf1 	bl	8002900 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0af      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005130:	4b5a      	ldr	r3, [pc, #360]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ee      	bne.n	800511a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d105      	bne.n	800514e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005142:	4b56      	ldr	r3, [pc, #344]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	4a55      	ldr	r2, [pc, #340]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 8005148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 809b 	beq.w	800528e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005158:	4b50      	ldr	r3, [pc, #320]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 030c 	and.w	r3, r3, #12
 8005160:	2b08      	cmp	r3, #8
 8005162:	d05c      	beq.n	800521e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d141      	bne.n	80051f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516c:	4b4c      	ldr	r3, [pc, #304]	; (80052a0 <HAL_RCC_OscConfig+0x4ec>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005172:	f7fd fbc5 	bl	8002900 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517a:	f7fd fbc1 	bl	8002900 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e081      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518c:	4b43      	ldr	r3, [pc, #268]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	019b      	lsls	r3, r3, #6
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	3b01      	subs	r3, #1
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	061b      	lsls	r3, r3, #24
 80051bc:	4937      	ldr	r1, [pc, #220]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c2:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <HAL_RCC_OscConfig+0x4ec>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fd fb9a 	bl	8002900 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fd fb96 	bl	8002900 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e056      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x41c>
 80051ee:	e04e      	b.n	800528e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f0:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <HAL_RCC_OscConfig+0x4ec>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f6:	f7fd fb83 	bl	8002900 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fd fb7f 	bl	8002900 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e03f      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005210:	4b22      	ldr	r3, [pc, #136]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0x44a>
 800521c:	e037      	b.n	800528e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e032      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800522a:	4b1c      	ldr	r3, [pc, #112]	; (800529c <HAL_RCC_OscConfig+0x4e8>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d028      	beq.n	800528a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d121      	bne.n	800528a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d11a      	bne.n	800528a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800525a:	4013      	ands	r3, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005260:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005262:	4293      	cmp	r3, r2
 8005264:	d111      	bne.n	800528a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	3b01      	subs	r3, #1
 8005274:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d107      	bne.n	800528a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d001      	beq.n	800528e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40007000 	.word	0x40007000
 800529c:	40023800 	.word	0x40023800
 80052a0:	42470060 	.word	0x42470060

080052a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0cc      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b8:	4b68      	ldr	r3, [pc, #416]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d90c      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b65      	ldr	r3, [pc, #404]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b63      	ldr	r3, [pc, #396]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0b8      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f8:	4b59      	ldr	r3, [pc, #356]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4a58      	ldr	r2, [pc, #352]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005310:	4b53      	ldr	r3, [pc, #332]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800531a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b50      	ldr	r3, [pc, #320]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	494d      	ldr	r1, [pc, #308]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d044      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d119      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d003      	beq.n	8005362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800535e:	2b03      	cmp	r3, #3
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e06f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005372:	4b3b      	ldr	r3, [pc, #236]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e067      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005382:	4b37      	ldr	r3, [pc, #220]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4934      	ldr	r1, [pc, #208]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005394:	f7fd fab4 	bl	8002900 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539c:	f7fd fab0 	bl	8002900 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e04f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	4b2b      	ldr	r3, [pc, #172]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 020c 	and.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d1eb      	bne.n	800539c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d20c      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b22      	ldr	r3, [pc, #136]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053da:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e032      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4916      	ldr	r1, [pc, #88]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005416:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	490e      	ldr	r1, [pc, #56]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800542a:	f000 f821 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 800542e:	4602      	mov	r2, r0
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	490a      	ldr	r1, [pc, #40]	; (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 800543c:	5ccb      	ldrb	r3, [r1, r3]
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd f88a 	bl	8002564 <HAL_InitTick>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023c00 	.word	0x40023c00
 8005460:	40023800 	.word	0x40023800
 8005464:	0800d0f8 	.word	0x0800d0f8
 8005468:	20000004 	.word	0x20000004
 800546c:	20000008 	.word	0x20000008

08005470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	607b      	str	r3, [r7, #4]
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	2300      	movs	r3, #0
 8005482:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005488:	4b67      	ldr	r3, [pc, #412]	; (8005628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 030c 	and.w	r3, r3, #12
 8005490:	2b08      	cmp	r3, #8
 8005492:	d00d      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005494:	2b08      	cmp	r3, #8
 8005496:	f200 80bd 	bhi.w	8005614 <HAL_RCC_GetSysClockFreq+0x1a4>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x34>
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d003      	beq.n	80054aa <HAL_RCC_GetSysClockFreq+0x3a>
 80054a2:	e0b7      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054a4:	4b61      	ldr	r3, [pc, #388]	; (800562c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054a6:	60bb      	str	r3, [r7, #8]
       break;
 80054a8:	e0b7      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054aa:	4b61      	ldr	r3, [pc, #388]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80054ac:	60bb      	str	r3, [r7, #8]
      break;
 80054ae:	e0b4      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054b0:	4b5d      	ldr	r3, [pc, #372]	; (8005628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ba:	4b5b      	ldr	r3, [pc, #364]	; (8005628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d04d      	beq.n	8005562 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c6:	4b58      	ldr	r3, [pc, #352]	; (8005628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	099b      	lsrs	r3, r3, #6
 80054cc:	461a      	mov	r2, r3
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054d6:	f04f 0100 	mov.w	r1, #0
 80054da:	ea02 0800 	and.w	r8, r2, r0
 80054de:	ea03 0901 	and.w	r9, r3, r1
 80054e2:	4640      	mov	r0, r8
 80054e4:	4649      	mov	r1, r9
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	014b      	lsls	r3, r1, #5
 80054f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054f4:	0142      	lsls	r2, r0, #5
 80054f6:	4610      	mov	r0, r2
 80054f8:	4619      	mov	r1, r3
 80054fa:	ebb0 0008 	subs.w	r0, r0, r8
 80054fe:	eb61 0109 	sbc.w	r1, r1, r9
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	018b      	lsls	r3, r1, #6
 800550c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005510:	0182      	lsls	r2, r0, #6
 8005512:	1a12      	subs	r2, r2, r0
 8005514:	eb63 0301 	sbc.w	r3, r3, r1
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	00d9      	lsls	r1, r3, #3
 8005522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005526:	00d0      	lsls	r0, r2, #3
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	eb12 0208 	adds.w	r2, r2, r8
 8005530:	eb43 0309 	adc.w	r3, r3, r9
 8005534:	f04f 0000 	mov.w	r0, #0
 8005538:	f04f 0100 	mov.w	r1, #0
 800553c:	0259      	lsls	r1, r3, #9
 800553e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005542:	0250      	lsls	r0, r2, #9
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	461a      	mov	r2, r3
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	f7fb fb80 	bl	8000c58 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4613      	mov	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e04a      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005562:	4b31      	ldr	r3, [pc, #196]	; (8005628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	461a      	mov	r2, r3
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005572:	f04f 0100 	mov.w	r1, #0
 8005576:	ea02 0400 	and.w	r4, r2, r0
 800557a:	ea03 0501 	and.w	r5, r3, r1
 800557e:	4620      	mov	r0, r4
 8005580:	4629      	mov	r1, r5
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	014b      	lsls	r3, r1, #5
 800558c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005590:	0142      	lsls	r2, r0, #5
 8005592:	4610      	mov	r0, r2
 8005594:	4619      	mov	r1, r3
 8005596:	1b00      	subs	r0, r0, r4
 8005598:	eb61 0105 	sbc.w	r1, r1, r5
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	018b      	lsls	r3, r1, #6
 80055a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055aa:	0182      	lsls	r2, r0, #6
 80055ac:	1a12      	subs	r2, r2, r0
 80055ae:	eb63 0301 	sbc.w	r3, r3, r1
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f04f 0100 	mov.w	r1, #0
 80055ba:	00d9      	lsls	r1, r3, #3
 80055bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c0:	00d0      	lsls	r0, r2, #3
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	1912      	adds	r2, r2, r4
 80055c8:	eb45 0303 	adc.w	r3, r5, r3
 80055cc:	f04f 0000 	mov.w	r0, #0
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	0299      	lsls	r1, r3, #10
 80055d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055da:	0290      	lsls	r0, r2, #10
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4610      	mov	r0, r2
 80055e2:	4619      	mov	r1, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	f7fb fb34 	bl	8000c58 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4613      	mov	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	3301      	adds	r3, #1
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	60bb      	str	r3, [r7, #8]
      break;
 8005612:	e002      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005616:	60bb      	str	r3, [r7, #8]
      break;
 8005618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800561a:	68bb      	ldr	r3, [r7, #8]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005626:	bf00      	nop
 8005628:	40023800 	.word	0x40023800
 800562c:	00f42400 	.word	0x00f42400
 8005630:	007a1200 	.word	0x007a1200

08005634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <HAL_RCC_GetHCLKFreq+0x14>)
 800563a:	681b      	ldr	r3, [r3, #0]
}
 800563c:	4618      	mov	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20000004 	.word	0x20000004

0800564c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005650:	f7ff fff0 	bl	8005634 <HAL_RCC_GetHCLKFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	0a9b      	lsrs	r3, r3, #10
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	4903      	ldr	r1, [pc, #12]	; (8005670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40023800 	.word	0x40023800
 8005670:	0800d108 	.word	0x0800d108

08005674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005678:	f7ff ffdc 	bl	8005634 <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	0b5b      	lsrs	r3, r3, #13
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4903      	ldr	r1, [pc, #12]	; (8005698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005690:	4618      	mov	r0, r3
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40023800 	.word	0x40023800
 8005698:	0800d108 	.word	0x0800d108

0800569c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	220f      	movs	r2, #15
 80056aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056ac:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <HAL_RCC_GetClockConfig+0x5c>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0203 	and.w	r2, r3, #3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <HAL_RCC_GetClockConfig+0x5c>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <HAL_RCC_GetClockConfig+0x5c>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_RCC_GetClockConfig+0x5c>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	08db      	lsrs	r3, r3, #3
 80056d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80056de:	4b07      	ldr	r3, [pc, #28]	; (80056fc <HAL_RCC_GetClockConfig+0x60>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0207 	and.w	r2, r3, #7
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800
 80056fc:	40023c00 	.word	0x40023c00

08005700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e07b      	b.n	800580a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d108      	bne.n	800572c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005722:	d009      	beq.n	8005738 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	61da      	str	r2, [r3, #28]
 800572a:	e005      	b.n	8005738 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc fe06 	bl	8002364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057bc:	ea42 0103 	orr.w	r1, r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	f003 0104 	and.w	r1, r3, #4
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f003 0210 	and.w	r2, r3, #16
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b088      	sub	sp, #32
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	4613      	mov	r3, r2
 8005820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_SPI_Transmit+0x22>
 8005830:	2302      	movs	r3, #2
 8005832:	e126      	b.n	8005a82 <HAL_SPI_Transmit+0x270>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800583c:	f7fd f860 	bl	8002900 <HAL_GetTick>
 8005840:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d002      	beq.n	8005858 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005852:	2302      	movs	r3, #2
 8005854:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005856:	e10b      	b.n	8005a70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_SPI_Transmit+0x52>
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d102      	bne.n	800586a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005868:	e102      	b.n	8005a70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2203      	movs	r2, #3
 800586e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	88fa      	ldrh	r2, [r7, #6]
 8005882:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b0:	d10f      	bne.n	80058d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d007      	beq.n	80058f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f8:	d14b      	bne.n	8005992 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_SPI_Transmit+0xf6>
 8005902:	8afb      	ldrh	r3, [r7, #22]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d13e      	bne.n	8005986 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	881a      	ldrh	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	1c9a      	adds	r2, r3, #2
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800592c:	e02b      	b.n	8005986 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d112      	bne.n	8005962 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	881a      	ldrh	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	1c9a      	adds	r2, r3, #2
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005960:	e011      	b.n	8005986 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005962:	f7fc ffcd 	bl	8002900 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d803      	bhi.n	800597a <HAL_SPI_Transmit+0x168>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d102      	bne.n	8005980 <HAL_SPI_Transmit+0x16e>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005984:	e074      	b.n	8005a70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ce      	bne.n	800592e <HAL_SPI_Transmit+0x11c>
 8005990:	e04c      	b.n	8005a2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_Transmit+0x18e>
 800599a:	8afb      	ldrh	r3, [r7, #22]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d140      	bne.n	8005a22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	7812      	ldrb	r2, [r2, #0]
 80059ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059c6:	e02c      	b.n	8005a22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d113      	bne.n	80059fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80059fc:	e011      	b.n	8005a22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059fe:	f7fc ff7f 	bl	8002900 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d803      	bhi.n	8005a16 <HAL_SPI_Transmit+0x204>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d102      	bne.n	8005a1c <HAL_SPI_Transmit+0x20a>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a20:	e026      	b.n	8005a70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1cd      	bne.n	80059c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fbcb 	bl	80061cc <SPI_EndRxTxTransaction>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e000      	b.n	8005a70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a80:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b088      	sub	sp, #32
 8005a8e:	af02      	add	r7, sp, #8
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa6:	d112      	bne.n	8005ace <HAL_SPI_Receive+0x44>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10e      	bne.n	8005ace <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f8f1 	bl	8005cac <HAL_SPI_TransmitReceive>
 8005aca:	4603      	mov	r3, r0
 8005acc:	e0ea      	b.n	8005ca4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_SPI_Receive+0x52>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e0e3      	b.n	8005ca4 <HAL_SPI_Receive+0x21a>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae4:	f7fc ff0c 	bl	8002900 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d002      	beq.n	8005afc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
 8005af8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005afa:	e0ca      	b.n	8005c92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_SPI_Receive+0x7e>
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b0c:	e0c1      	b.n	8005c92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2204      	movs	r2, #4
 8005b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	88fa      	ldrh	r2, [r7, #6]
 8005b26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b54:	d10f      	bne.n	8005b76 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d007      	beq.n	8005b94 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d162      	bne.n	8005c62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b9c:	e02e      	b.n	8005bfc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d115      	bne.n	8005bd8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f103 020c 	add.w	r2, r3, #12
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bd6:	e011      	b.n	8005bfc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd8:	f7fc fe92 	bl	8002900 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d803      	bhi.n	8005bf0 <HAL_SPI_Receive+0x166>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	d102      	bne.n	8005bf6 <HAL_SPI_Receive+0x16c>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bfa:	e04a      	b.n	8005c92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1cb      	bne.n	8005b9e <HAL_SPI_Receive+0x114>
 8005c06:	e031      	b.n	8005c6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d113      	bne.n	8005c3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	b292      	uxth	r2, r2
 8005c22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	1c9a      	adds	r2, r3, #2
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c3c:	e011      	b.n	8005c62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3e:	f7fc fe5f 	bl	8002900 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d803      	bhi.n	8005c56 <HAL_SPI_Receive+0x1cc>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d102      	bne.n	8005c5c <HAL_SPI_Receive+0x1d2>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c60:	e017      	b.n	8005c92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1cd      	bne.n	8005c08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fa45 	bl	8006100 <SPI_EndRxTransaction>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
 8005c8e:	e000      	b.n	8005c92 <HAL_SPI_Receive+0x208>
  }

error :
 8005c90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	; 0x30
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x26>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e18a      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x33c>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cda:	f7fc fe11 	bl	8002900 <HAL_GetTick>
 8005cde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005cf0:	887b      	ldrh	r3, [r7, #2]
 8005cf2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d00f      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x70>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d02:	d107      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x68>
 8005d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d003      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d1a:	e15b      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x82>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x82>
 8005d28:	887b      	ldrh	r3, [r7, #2]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d34:	e14e      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d003      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2205      	movs	r2, #5
 8005d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	887a      	ldrh	r2, [r7, #2]
 8005d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	887a      	ldrh	r2, [r7, #2]
 8005d60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	887a      	ldrh	r2, [r7, #2]
 8005d72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d007      	beq.n	8005d9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da6:	d178      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x10a>
 8005db0:	8b7b      	ldrh	r3, [r7, #26]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d166      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	881a      	ldrh	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	1c9a      	adds	r2, r3, #2
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dda:	e053      	b.n	8005e84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d11b      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x176>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d016      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x176>
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d113      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	881a      	ldrh	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d119      	bne.n	8005e64 <HAL_SPI_TransmitReceive+0x1b8>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d014      	beq.n	8005e64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	b292      	uxth	r2, r2
 8005e46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e60:	2301      	movs	r3, #1
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e64:	f7fc fd4c 	bl	8002900 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d807      	bhi.n	8005e84 <HAL_SPI_TransmitReceive+0x1d8>
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d003      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e82:	e0a7      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1a6      	bne.n	8005ddc <HAL_SPI_TransmitReceive+0x130>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1a1      	bne.n	8005ddc <HAL_SPI_TransmitReceive+0x130>
 8005e98:	e07c      	b.n	8005f94 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_TransmitReceive+0x1fc>
 8005ea2:	8b7b      	ldrh	r3, [r7, #26]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d16b      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ece:	e057      	b.n	8005f80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d11c      	bne.n	8005f18 <HAL_SPI_TransmitReceive+0x26c>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d017      	beq.n	8005f18 <HAL_SPI_TransmitReceive+0x26c>
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d114      	bne.n	8005f18 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	7812      	ldrb	r2, [r2, #0]
 8005efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d119      	bne.n	8005f5a <HAL_SPI_TransmitReceive+0x2ae>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d014      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f56:	2301      	movs	r3, #1
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f5a:	f7fc fcd1 	bl	8002900 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d803      	bhi.n	8005f72 <HAL_SPI_TransmitReceive+0x2c6>
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d102      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x2cc>
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d103      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f7e:	e029      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1a2      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x224>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d19d      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f917 	bl	80061cc <SPI_EndRxTxTransaction>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d006      	beq.n	8005fb2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005fb0:	e010      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	e000      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005fd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3730      	adds	r7, #48	; 0x30
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006000:	f7fc fc7e 	bl	8002900 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	4413      	add	r3, r2
 800600e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006010:	f7fc fc76 	bl	8002900 <HAL_GetTick>
 8006014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006016:	4b39      	ldr	r3, [pc, #228]	; (80060fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	015b      	lsls	r3, r3, #5
 800601c:	0d1b      	lsrs	r3, r3, #20
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006026:	e054      	b.n	80060d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d050      	beq.n	80060d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006030:	f7fc fc66 	bl	8002900 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	429a      	cmp	r2, r3
 800603e:	d902      	bls.n	8006046 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d13d      	bne.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800605e:	d111      	bne.n	8006084 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006068:	d004      	beq.n	8006074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006072:	d107      	bne.n	8006084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608c:	d10f      	bne.n	80060ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e017      	b.n	80060f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	bf0c      	ite	eq
 80060e2:	2301      	moveq	r3, #1
 80060e4:	2300      	movne	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d19b      	bne.n	8006028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000004 	.word	0x20000004

08006100 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006114:	d111      	bne.n	800613a <SPI_EndRxTransaction+0x3a>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611e:	d004      	beq.n	800612a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006128:	d107      	bne.n	800613a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006138:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006142:	d12a      	bne.n	800619a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800614c:	d012      	beq.n	8006174 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2200      	movs	r2, #0
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7ff ff49 	bl	8005ff0 <SPI_WaitFlagStateUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02d      	beq.n	80061c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	f043 0220 	orr.w	r2, r3, #32
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e026      	b.n	80061c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2200      	movs	r2, #0
 800617c:	2101      	movs	r1, #1
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff ff36 	bl	8005ff0 <SPI_WaitFlagStateUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01a      	beq.n	80061c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e013      	b.n	80061c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2200      	movs	r2, #0
 80061a2:	2101      	movs	r1, #1
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff ff23 	bl	8005ff0 <SPI_WaitFlagStateUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	f043 0220 	orr.w	r2, r3, #32
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e000      	b.n	80061c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061d8:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <SPI_EndRxTxTransaction+0x7c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1b      	ldr	r2, [pc, #108]	; (800624c <SPI_EndRxTxTransaction+0x80>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	0d5b      	lsrs	r3, r3, #21
 80061e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061e8:	fb02 f303 	mul.w	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f6:	d112      	bne.n	800621e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	2180      	movs	r1, #128	; 0x80
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f7ff fef4 	bl	8005ff0 <SPI_WaitFlagStateUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d016      	beq.n	800623c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e00f      	b.n	800623e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3b01      	subs	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006234:	2b80      	cmp	r3, #128	; 0x80
 8006236:	d0f2      	beq.n	800621e <SPI_EndRxTxTransaction+0x52>
 8006238:	e000      	b.n	800623c <SPI_EndRxTxTransaction+0x70>
        break;
 800623a:	bf00      	nop
  }

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000004 	.word	0x20000004
 800624c:	165e9f81 	.word	0x165e9f81

08006250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e041      	b.n	80062e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f839 	bl	80062ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3304      	adds	r3, #4
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f000 f9ca 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d001      	beq.n	800631c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e044      	b.n	80063a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x6c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d013      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x6c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1a      	ldr	r2, [pc, #104]	; (80063b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x6c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a19      	ldr	r2, [pc, #100]	; (80063bc <HAL_TIM_Base_Start_IT+0xb8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x6c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x6c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d111      	bne.n	8006394 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b06      	cmp	r3, #6
 8006380:	d010      	beq.n	80063a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0201 	orr.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006392:	e007      	b.n	80063a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40014000 	.word	0x40014000

080063c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d122      	bne.n	8006424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d11b      	bne.n	8006424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0202 	mvn.w	r2, #2
 80063f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f8ee 	bl	80065ec <HAL_TIM_IC_CaptureCallback>
 8006410:	e005      	b.n	800641e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f8e0 	bl	80065d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f8f1 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b04      	cmp	r3, #4
 8006430:	d122      	bne.n	8006478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b04      	cmp	r3, #4
 800643e:	d11b      	bne.n	8006478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0204 	mvn.w	r2, #4
 8006448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8c4 	bl	80065ec <HAL_TIM_IC_CaptureCallback>
 8006464:	e005      	b.n	8006472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f8b6 	bl	80065d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8c7 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b08      	cmp	r3, #8
 8006484:	d122      	bne.n	80064cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b08      	cmp	r3, #8
 8006492:	d11b      	bne.n	80064cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0208 	mvn.w	r2, #8
 800649c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2204      	movs	r2, #4
 80064a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f89a 	bl	80065ec <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f88c 	bl	80065d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f89d 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0210 	mvn.w	r2, #16
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2208      	movs	r2, #8
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f870 	bl	80065ec <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f862 	bl	80065d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f873 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d10e      	bne.n	800654c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d107      	bne.n	800654c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0201 	mvn.w	r2, #1
 8006544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fb fcee 	bl	8001f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d10e      	bne.n	8006578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d107      	bne.n	8006578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f8e2 	bl	800673c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d10e      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	d107      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f838 	bl	8006614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d10e      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d107      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0220 	mvn.w	r2, #32
 80065c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8ac 	bl	8006728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a34      	ldr	r2, [pc, #208]	; (800670c <TIM_Base_SetConfig+0xe4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00f      	beq.n	8006660 <TIM_Base_SetConfig+0x38>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006646:	d00b      	beq.n	8006660 <TIM_Base_SetConfig+0x38>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a31      	ldr	r2, [pc, #196]	; (8006710 <TIM_Base_SetConfig+0xe8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d007      	beq.n	8006660 <TIM_Base_SetConfig+0x38>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a30      	ldr	r2, [pc, #192]	; (8006714 <TIM_Base_SetConfig+0xec>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_Base_SetConfig+0x38>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a2f      	ldr	r2, [pc, #188]	; (8006718 <TIM_Base_SetConfig+0xf0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d108      	bne.n	8006672 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a25      	ldr	r2, [pc, #148]	; (800670c <TIM_Base_SetConfig+0xe4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d01b      	beq.n	80066b2 <TIM_Base_SetConfig+0x8a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006680:	d017      	beq.n	80066b2 <TIM_Base_SetConfig+0x8a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a22      	ldr	r2, [pc, #136]	; (8006710 <TIM_Base_SetConfig+0xe8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <TIM_Base_SetConfig+0x8a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a21      	ldr	r2, [pc, #132]	; (8006714 <TIM_Base_SetConfig+0xec>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00f      	beq.n	80066b2 <TIM_Base_SetConfig+0x8a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <TIM_Base_SetConfig+0xf0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00b      	beq.n	80066b2 <TIM_Base_SetConfig+0x8a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1f      	ldr	r2, [pc, #124]	; (800671c <TIM_Base_SetConfig+0xf4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d007      	beq.n	80066b2 <TIM_Base_SetConfig+0x8a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <TIM_Base_SetConfig+0xf8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d003      	beq.n	80066b2 <TIM_Base_SetConfig+0x8a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <TIM_Base_SetConfig+0xfc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d108      	bne.n	80066c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a08      	ldr	r2, [pc, #32]	; (800670c <TIM_Base_SetConfig+0xe4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d103      	bne.n	80066f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	615a      	str	r2, [r3, #20]
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40010000 	.word	0x40010000
 8006710:	40000400 	.word	0x40000400
 8006714:	40000800 	.word	0x40000800
 8006718:	40000c00 	.word	0x40000c00
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800

08006728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e03f      	b.n	80067e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fb fe3c 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	; 0x24
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fc1b 	bl	8006fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b08a      	sub	sp, #40	; 0x28
 80067ee:	af02      	add	r7, sp, #8
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b20      	cmp	r3, #32
 8006808:	d17c      	bne.n	8006904 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_UART_Transmit+0x2c>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e075      	b.n	8006906 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_UART_Transmit+0x3e>
 8006824:	2302      	movs	r3, #2
 8006826:	e06e      	b.n	8006906 <HAL_UART_Transmit+0x11c>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2221      	movs	r2, #33	; 0x21
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800683e:	f7fc f85f 	bl	8002900 <HAL_GetTick>
 8006842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	88fa      	ldrh	r2, [r7, #6]
 8006848:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	88fa      	ldrh	r2, [r7, #6]
 800684e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006858:	d108      	bne.n	800686c <HAL_UART_Transmit+0x82>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	e003      	b.n	8006874 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800687c:	e02a      	b.n	80068d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2200      	movs	r2, #0
 8006886:	2180      	movs	r1, #128	; 0x80
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 fa17 	bl	8006cbc <UART_WaitOnFlagUntilTimeout>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e036      	b.n	8006906 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	3302      	adds	r3, #2
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	e007      	b.n	80068c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3301      	adds	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1cf      	bne.n	800687e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2200      	movs	r2, #0
 80068e6:	2140      	movs	r1, #64	; 0x40
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f9e7 	bl	8006cbc <UART_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e006      	b.n	8006906 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	e000      	b.n	8006906 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
  }
}
 8006906:	4618      	mov	r0, r3
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006930:	2300      	movs	r3, #0
 8006932:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10d      	bne.n	8006962 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_UART_IRQHandler+0x52>
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 faa1 	bl	8006ea2 <UART_Receive_IT>
      return;
 8006960:	e17c      	b.n	8006c5c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80b1 	beq.w	8006acc <HAL_UART_IRQHandler+0x1bc>
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d105      	bne.n	8006980 <HAL_UART_IRQHandler+0x70>
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80a6 	beq.w	8006acc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_UART_IRQHandler+0x90>
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	f043 0201 	orr.w	r2, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <HAL_UART_IRQHandler+0xb0>
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	f043 0202 	orr.w	r2, r3, #2
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <HAL_UART_IRQHandler+0xd0>
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	f043 0204 	orr.w	r2, r3, #4
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00f      	beq.n	8006a0a <HAL_UART_IRQHandler+0xfa>
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <HAL_UART_IRQHandler+0xee>
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f043 0208 	orr.w	r2, r3, #8
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 811f 	beq.w	8006c52 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_UART_IRQHandler+0x11e>
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fa3a 	bl	8006ea2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2301      	moveq	r3, #1
 8006a3e:	2300      	movne	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_UART_IRQHandler+0x146>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d031      	beq.n	8006aba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f97a 	bl	8006d50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d123      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d013      	beq.n	8006aaa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	4a77      	ldr	r2, [pc, #476]	; (8006c64 <HAL_UART_IRQHandler+0x354>)
 8006a88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fc fda6 	bl	80035e0 <HAL_DMA_Abort_IT>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa8:	e00e      	b.n	8006ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f8f0 	bl	8006c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	e00a      	b.n	8006ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8ec 	bl	8006c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	e006      	b.n	8006ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8e8 	bl	8006c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ac6:	e0c4      	b.n	8006c52 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	bf00      	nop
    return;
 8006aca:	e0c2      	b.n	8006c52 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	f040 80a2 	bne.w	8006c1a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 809c 	beq.w	8006c1a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8096 	beq.w	8006c1a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d14f      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006b1c:	8a3b      	ldrh	r3, [r7, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8099 	beq.w	8006c56 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b28:	8a3a      	ldrh	r2, [r7, #16]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	f080 8093 	bcs.w	8006c56 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8a3a      	ldrh	r2, [r7, #16]
 8006b34:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b40:	d02b      	beq.n	8006b9a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b50:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695a      	ldr	r2, [r3, #20]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b70:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0210 	bic.w	r2, r2, #16
 8006b8e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fc fcb3 	bl	8003500 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f87a 	bl	8006ca4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006bb0:	e051      	b.n	8006c56 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d047      	beq.n	8006c5a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006bca:	8a7b      	ldrh	r3, [r7, #18]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d044      	beq.n	8006c5a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bde:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0210 	bic.w	r2, r2, #16
 8006c0c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c0e:	8a7b      	ldrh	r3, [r7, #18]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f846 	bl	8006ca4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c18:	e01f      	b.n	8006c5a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_UART_IRQHandler+0x326>
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f8cf 	bl	8006dd2 <UART_Transmit_IT>
    return;
 8006c34:	e012      	b.n	8006c5c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00d      	beq.n	8006c5c <HAL_UART_IRQHandler+0x34c>
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f911 	bl	8006e72 <UART_EndTransmit_IT>
    return;
 8006c50:	e004      	b.n	8006c5c <HAL_UART_IRQHandler+0x34c>
    return;
 8006c52:	bf00      	nop
 8006c54:	e002      	b.n	8006c5c <HAL_UART_IRQHandler+0x34c>
      return;
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <HAL_UART_IRQHandler+0x34c>
      return;
 8006c5a:	bf00      	nop
  }
}
 8006c5c:	3728      	adds	r7, #40	; 0x28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	08006dab 	.word	0x08006dab

08006c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ccc:	e02c      	b.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd4:	d028      	beq.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d007      	beq.n	8006cec <UART_WaitOnFlagUntilTimeout+0x30>
 8006cdc:	f7fb fe10 	bl	8002900 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d21d      	bcs.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cfa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695a      	ldr	r2, [r3, #20]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e00f      	b.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4013      	ands	r3, r2
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d0c3      	beq.n	8006cce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0201 	bic.w	r2, r2, #1
 8006d76:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d107      	bne.n	8006d90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0210 	bic.w	r2, r2, #16
 8006d8e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff ff63 	bl	8006c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b21      	cmp	r3, #33	; 0x21
 8006de4:	d13e      	bne.n	8006e64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dee:	d114      	bne.n	8006e1a <UART_Transmit_IT+0x48>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d110      	bne.n	8006e1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	1c9a      	adds	r2, r3, #2
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	621a      	str	r2, [r3, #32]
 8006e18:	e008      	b.n	8006e2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6211      	str	r1, [r2, #32]
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10f      	bne.n	8006e60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	e000      	b.n	8006e66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff fee8 	bl	8006c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b22      	cmp	r3, #34	; 0x22
 8006eb4:	f040 8087 	bne.w	8006fc6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec0:	d117      	bne.n	8006ef2 <UART_Receive_IT+0x50>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d113      	bne.n	8006ef2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	1c9a      	adds	r2, r3, #2
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	629a      	str	r2, [r3, #40]	; 0x28
 8006ef0:	e026      	b.n	8006f40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f04:	d007      	beq.n	8006f16 <UART_Receive_IT+0x74>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <UART_Receive_IT+0x82>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	e008      	b.n	8006f36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d136      	bne.n	8006fc2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0220 	bic.w	r2, r2, #32
 8006f62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695a      	ldr	r2, [r3, #20]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0201 	bic.w	r2, r2, #1
 8006f82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d10e      	bne.n	8006fb2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0210 	bic.w	r2, r2, #16
 8006fa2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff fe7a 	bl	8006ca4 <HAL_UARTEx_RxEventCallback>
 8006fb0:	e002      	b.n	8006fb8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff fe62 	bl	8006c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e002      	b.n	8006fc8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006fc6:	2302      	movs	r3, #2
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	b09f      	sub	sp, #124	; 0x7c
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe6:	68d9      	ldr	r1, [r3, #12]
 8006fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	ea40 0301 	orr.w	r3, r0, r1
 8006ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	431a      	orrs	r2, r3
 8007002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	4313      	orrs	r3, r2
 8007008:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800700a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007014:	f021 010c 	bic.w	r1, r1, #12
 8007018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800701e:	430b      	orrs	r3, r1
 8007020:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800702c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702e:	6999      	ldr	r1, [r3, #24]
 8007030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	ea40 0301 	orr.w	r3, r0, r1
 8007038:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800703a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4bc5      	ldr	r3, [pc, #788]	; (8007354 <UART_SetConfig+0x384>)
 8007040:	429a      	cmp	r2, r3
 8007042:	d004      	beq.n	800704e <UART_SetConfig+0x7e>
 8007044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	4bc3      	ldr	r3, [pc, #780]	; (8007358 <UART_SetConfig+0x388>)
 800704a:	429a      	cmp	r2, r3
 800704c:	d103      	bne.n	8007056 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800704e:	f7fe fb11 	bl	8005674 <HAL_RCC_GetPCLK2Freq>
 8007052:	6778      	str	r0, [r7, #116]	; 0x74
 8007054:	e002      	b.n	800705c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007056:	f7fe faf9 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 800705a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800705c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007064:	f040 80b6 	bne.w	80071d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800706a:	461c      	mov	r4, r3
 800706c:	f04f 0500 	mov.w	r5, #0
 8007070:	4622      	mov	r2, r4
 8007072:	462b      	mov	r3, r5
 8007074:	1891      	adds	r1, r2, r2
 8007076:	6439      	str	r1, [r7, #64]	; 0x40
 8007078:	415b      	adcs	r3, r3
 800707a:	647b      	str	r3, [r7, #68]	; 0x44
 800707c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007080:	1912      	adds	r2, r2, r4
 8007082:	eb45 0303 	adc.w	r3, r5, r3
 8007086:	f04f 0000 	mov.w	r0, #0
 800708a:	f04f 0100 	mov.w	r1, #0
 800708e:	00d9      	lsls	r1, r3, #3
 8007090:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007094:	00d0      	lsls	r0, r2, #3
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	1911      	adds	r1, r2, r4
 800709c:	6639      	str	r1, [r7, #96]	; 0x60
 800709e:	416b      	adcs	r3, r5
 80070a0:	667b      	str	r3, [r7, #100]	; 0x64
 80070a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	1891      	adds	r1, r2, r2
 80070ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80070b0:	415b      	adcs	r3, r3
 80070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80070bc:	f7f9 fdcc 	bl	8000c58 <__aeabi_uldivmod>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4ba5      	ldr	r3, [pc, #660]	; (800735c <UART_SetConfig+0x38c>)
 80070c6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	011e      	lsls	r6, r3, #4
 80070ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d0:	461c      	mov	r4, r3
 80070d2:	f04f 0500 	mov.w	r5, #0
 80070d6:	4622      	mov	r2, r4
 80070d8:	462b      	mov	r3, r5
 80070da:	1891      	adds	r1, r2, r2
 80070dc:	6339      	str	r1, [r7, #48]	; 0x30
 80070de:	415b      	adcs	r3, r3
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
 80070e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80070e6:	1912      	adds	r2, r2, r4
 80070e8:	eb45 0303 	adc.w	r3, r5, r3
 80070ec:	f04f 0000 	mov.w	r0, #0
 80070f0:	f04f 0100 	mov.w	r1, #0
 80070f4:	00d9      	lsls	r1, r3, #3
 80070f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070fa:	00d0      	lsls	r0, r2, #3
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	1911      	adds	r1, r2, r4
 8007102:	65b9      	str	r1, [r7, #88]	; 0x58
 8007104:	416b      	adcs	r3, r5
 8007106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	461a      	mov	r2, r3
 800710e:	f04f 0300 	mov.w	r3, #0
 8007112:	1891      	adds	r1, r2, r2
 8007114:	62b9      	str	r1, [r7, #40]	; 0x28
 8007116:	415b      	adcs	r3, r3
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800711a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800711e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007122:	f7f9 fd99 	bl	8000c58 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4b8c      	ldr	r3, [pc, #560]	; (800735c <UART_SetConfig+0x38c>)
 800712c:	fba3 1302 	umull	r1, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	2164      	movs	r1, #100	; 0x64
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	3332      	adds	r3, #50	; 0x32
 800713e:	4a87      	ldr	r2, [pc, #540]	; (800735c <UART_SetConfig+0x38c>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800714c:	441e      	add	r6, r3
 800714e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007150:	4618      	mov	r0, r3
 8007152:	f04f 0100 	mov.w	r1, #0
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	1894      	adds	r4, r2, r2
 800715c:	623c      	str	r4, [r7, #32]
 800715e:	415b      	adcs	r3, r3
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
 8007162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007166:	1812      	adds	r2, r2, r0
 8007168:	eb41 0303 	adc.w	r3, r1, r3
 800716c:	f04f 0400 	mov.w	r4, #0
 8007170:	f04f 0500 	mov.w	r5, #0
 8007174:	00dd      	lsls	r5, r3, #3
 8007176:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800717a:	00d4      	lsls	r4, r2, #3
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	1814      	adds	r4, r2, r0
 8007182:	653c      	str	r4, [r7, #80]	; 0x50
 8007184:	414b      	adcs	r3, r1
 8007186:	657b      	str	r3, [r7, #84]	; 0x54
 8007188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	461a      	mov	r2, r3
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	1891      	adds	r1, r2, r2
 8007194:	61b9      	str	r1, [r7, #24]
 8007196:	415b      	adcs	r3, r3
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800719e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071a2:	f7f9 fd59 	bl	8000c58 <__aeabi_uldivmod>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4b6c      	ldr	r3, [pc, #432]	; (800735c <UART_SetConfig+0x38c>)
 80071ac:	fba3 1302 	umull	r1, r3, r3, r2
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	2164      	movs	r1, #100	; 0x64
 80071b4:	fb01 f303 	mul.w	r3, r1, r3
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	3332      	adds	r3, #50	; 0x32
 80071be:	4a67      	ldr	r2, [pc, #412]	; (800735c <UART_SetConfig+0x38c>)
 80071c0:	fba2 2303 	umull	r2, r3, r2, r3
 80071c4:	095b      	lsrs	r3, r3, #5
 80071c6:	f003 0207 	and.w	r2, r3, #7
 80071ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4432      	add	r2, r6
 80071d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071d2:	e0b9      	b.n	8007348 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071d6:	461c      	mov	r4, r3
 80071d8:	f04f 0500 	mov.w	r5, #0
 80071dc:	4622      	mov	r2, r4
 80071de:	462b      	mov	r3, r5
 80071e0:	1891      	adds	r1, r2, r2
 80071e2:	6139      	str	r1, [r7, #16]
 80071e4:	415b      	adcs	r3, r3
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071ec:	1912      	adds	r2, r2, r4
 80071ee:	eb45 0303 	adc.w	r3, r5, r3
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f04f 0100 	mov.w	r1, #0
 80071fa:	00d9      	lsls	r1, r3, #3
 80071fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007200:	00d0      	lsls	r0, r2, #3
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	eb12 0804 	adds.w	r8, r2, r4
 800720a:	eb43 0905 	adc.w	r9, r3, r5
 800720e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4618      	mov	r0, r3
 8007214:	f04f 0100 	mov.w	r1, #0
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	008b      	lsls	r3, r1, #2
 8007222:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007226:	0082      	lsls	r2, r0, #2
 8007228:	4640      	mov	r0, r8
 800722a:	4649      	mov	r1, r9
 800722c:	f7f9 fd14 	bl	8000c58 <__aeabi_uldivmod>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4b49      	ldr	r3, [pc, #292]	; (800735c <UART_SetConfig+0x38c>)
 8007236:	fba3 2302 	umull	r2, r3, r3, r2
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	011e      	lsls	r6, r3, #4
 800723e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007240:	4618      	mov	r0, r3
 8007242:	f04f 0100 	mov.w	r1, #0
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	1894      	adds	r4, r2, r2
 800724c:	60bc      	str	r4, [r7, #8]
 800724e:	415b      	adcs	r3, r3
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007256:	1812      	adds	r2, r2, r0
 8007258:	eb41 0303 	adc.w	r3, r1, r3
 800725c:	f04f 0400 	mov.w	r4, #0
 8007260:	f04f 0500 	mov.w	r5, #0
 8007264:	00dd      	lsls	r5, r3, #3
 8007266:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800726a:	00d4      	lsls	r4, r2, #3
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	1814      	adds	r4, r2, r0
 8007272:	64bc      	str	r4, [r7, #72]	; 0x48
 8007274:	414b      	adcs	r3, r1
 8007276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4618      	mov	r0, r3
 800727e:	f04f 0100 	mov.w	r1, #0
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	008b      	lsls	r3, r1, #2
 800728c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007290:	0082      	lsls	r2, r0, #2
 8007292:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007296:	f7f9 fcdf 	bl	8000c58 <__aeabi_uldivmod>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4b2f      	ldr	r3, [pc, #188]	; (800735c <UART_SetConfig+0x38c>)
 80072a0:	fba3 1302 	umull	r1, r3, r3, r2
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	2164      	movs	r1, #100	; 0x64
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	3332      	adds	r3, #50	; 0x32
 80072b2:	4a2a      	ldr	r2, [pc, #168]	; (800735c <UART_SetConfig+0x38c>)
 80072b4:	fba2 2303 	umull	r2, r3, r2, r3
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072be:	441e      	add	r6, r3
 80072c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c2:	4618      	mov	r0, r3
 80072c4:	f04f 0100 	mov.w	r1, #0
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	1894      	adds	r4, r2, r2
 80072ce:	603c      	str	r4, [r7, #0]
 80072d0:	415b      	adcs	r3, r3
 80072d2:	607b      	str	r3, [r7, #4]
 80072d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d8:	1812      	adds	r2, r2, r0
 80072da:	eb41 0303 	adc.w	r3, r1, r3
 80072de:	f04f 0400 	mov.w	r4, #0
 80072e2:	f04f 0500 	mov.w	r5, #0
 80072e6:	00dd      	lsls	r5, r3, #3
 80072e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072ec:	00d4      	lsls	r4, r2, #3
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	eb12 0a00 	adds.w	sl, r2, r0
 80072f6:	eb43 0b01 	adc.w	fp, r3, r1
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	4618      	mov	r0, r3
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	008b      	lsls	r3, r1, #2
 800730e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007312:	0082      	lsls	r2, r0, #2
 8007314:	4650      	mov	r0, sl
 8007316:	4659      	mov	r1, fp
 8007318:	f7f9 fc9e 	bl	8000c58 <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <UART_SetConfig+0x38c>)
 8007322:	fba3 1302 	umull	r1, r3, r3, r2
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	2164      	movs	r1, #100	; 0x64
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	3332      	adds	r3, #50	; 0x32
 8007334:	4a09      	ldr	r2, [pc, #36]	; (800735c <UART_SetConfig+0x38c>)
 8007336:	fba2 2303 	umull	r2, r3, r2, r3
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4432      	add	r2, r6
 8007346:	609a      	str	r2, [r3, #8]
}
 8007348:	bf00      	nop
 800734a:	377c      	adds	r7, #124	; 0x7c
 800734c:	46bd      	mov	sp, r7
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	bf00      	nop
 8007354:	40011000 	.word	0x40011000
 8007358:	40011400 	.word	0x40011400
 800735c:	51eb851f 	.word	0x51eb851f

08007360 <__NVIC_SetPriority>:
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	6039      	str	r1, [r7, #0]
 800736a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800736c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007370:	2b00      	cmp	r3, #0
 8007372:	db0a      	blt.n	800738a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	b2da      	uxtb	r2, r3
 8007378:	490c      	ldr	r1, [pc, #48]	; (80073ac <__NVIC_SetPriority+0x4c>)
 800737a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800737e:	0112      	lsls	r2, r2, #4
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	440b      	add	r3, r1
 8007384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007388:	e00a      	b.n	80073a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	b2da      	uxtb	r2, r3
 800738e:	4908      	ldr	r1, [pc, #32]	; (80073b0 <__NVIC_SetPriority+0x50>)
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	3b04      	subs	r3, #4
 8007398:	0112      	lsls	r2, r2, #4
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	440b      	add	r3, r1
 800739e:	761a      	strb	r2, [r3, #24]
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	e000e100 	.word	0xe000e100
 80073b0:	e000ed00 	.word	0xe000ed00

080073b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <SysTick_Handler+0x1c>)
 80073ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80073bc:	f001 fcfe 	bl	8008dbc <xTaskGetSchedulerState>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d001      	beq.n	80073ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80073c6:	f002 fbe7 	bl	8009b98 <xPortSysTickHandler>
  }
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	e000e010 	.word	0xe000e010

080073d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073d8:	2100      	movs	r1, #0
 80073da:	f06f 0004 	mvn.w	r0, #4
 80073de:	f7ff ffbf 	bl	8007360 <__NVIC_SetPriority>
#endif
}
 80073e2:	bf00      	nop
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ee:	f3ef 8305 	mrs	r3, IPSR
 80073f2:	603b      	str	r3, [r7, #0]
  return(result);
 80073f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073fa:	f06f 0305 	mvn.w	r3, #5
 80073fe:	607b      	str	r3, [r7, #4]
 8007400:	e00c      	b.n	800741c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <osKernelInitialize+0x44>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d105      	bne.n	8007416 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800740a:	4b08      	ldr	r3, [pc, #32]	; (800742c <osKernelInitialize+0x44>)
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007410:	2300      	movs	r3, #0
 8007412:	607b      	str	r3, [r7, #4]
 8007414:	e002      	b.n	800741c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007416:	f04f 33ff 	mov.w	r3, #4294967295
 800741a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800741c:	687b      	ldr	r3, [r7, #4]
}
 800741e:	4618      	mov	r0, r3
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	2000020c 	.word	0x2000020c

08007430 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007436:	f3ef 8305 	mrs	r3, IPSR
 800743a:	603b      	str	r3, [r7, #0]
  return(result);
 800743c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007442:	f06f 0305 	mvn.w	r3, #5
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	e010      	b.n	800746c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <osKernelStart+0x48>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d109      	bne.n	8007466 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007452:	f7ff ffbf 	bl	80073d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007456:	4b08      	ldr	r3, [pc, #32]	; (8007478 <osKernelStart+0x48>)
 8007458:	2202      	movs	r2, #2
 800745a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800745c:	f001 f866 	bl	800852c <vTaskStartScheduler>
      stat = osOK;
 8007460:	2300      	movs	r3, #0
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	e002      	b.n	800746c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007466:	f04f 33ff 	mov.w	r3, #4294967295
 800746a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800746c:	687b      	ldr	r3, [r7, #4]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	2000020c 	.word	0x2000020c

0800747c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800747c:	b580      	push	{r7, lr}
 800747e:	b08e      	sub	sp, #56	; 0x38
 8007480:	af04      	add	r7, sp, #16
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800748c:	f3ef 8305 	mrs	r3, IPSR
 8007490:	617b      	str	r3, [r7, #20]
  return(result);
 8007492:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007494:	2b00      	cmp	r3, #0
 8007496:	d17e      	bne.n	8007596 <osThreadNew+0x11a>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d07b      	beq.n	8007596 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074a2:	2318      	movs	r3, #24
 80074a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
 80074ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d045      	beq.n	8007542 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <osThreadNew+0x48>
        name = attr->name;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <osThreadNew+0x6e>
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	2b38      	cmp	r3, #56	; 0x38
 80074dc:	d805      	bhi.n	80074ea <osThreadNew+0x6e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <osThreadNew+0x72>
        return (NULL);
 80074ea:	2300      	movs	r3, #0
 80074ec:	e054      	b.n	8007598 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	089b      	lsrs	r3, r3, #2
 80074fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00e      	beq.n	8007524 <osThreadNew+0xa8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b5b      	cmp	r3, #91	; 0x5b
 800750c:	d90a      	bls.n	8007524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007512:	2b00      	cmp	r3, #0
 8007514:	d006      	beq.n	8007524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <osThreadNew+0xa8>
        mem = 1;
 800751e:	2301      	movs	r3, #1
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	e010      	b.n	8007546 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10c      	bne.n	8007546 <osThreadNew+0xca>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d108      	bne.n	8007546 <osThreadNew+0xca>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <osThreadNew+0xca>
          mem = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	e001      	b.n	8007546 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d110      	bne.n	800756e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007554:	9202      	str	r2, [sp, #8]
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	6a3a      	ldr	r2, [r7, #32]
 8007560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fe0c 	bl	8008180 <xTaskCreateStatic>
 8007568:	4603      	mov	r3, r0
 800756a:	613b      	str	r3, [r7, #16]
 800756c:	e013      	b.n	8007596 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d110      	bne.n	8007596 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	b29a      	uxth	r2, r3
 8007578:	f107 0310 	add.w	r3, r7, #16
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fe57 	bl	800823a <xTaskCreate>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d001      	beq.n	8007596 <osThreadNew+0x11a>
            hTask = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007596:	693b      	ldr	r3, [r7, #16]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3728      	adds	r7, #40	; 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075a8:	f3ef 8305 	mrs	r3, IPSR
 80075ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80075ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <osDelay+0x1c>
    stat = osErrorISR;
 80075b4:	f06f 0305 	mvn.w	r3, #5
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	e007      	b.n	80075cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 ff7c 	bl	80084c4 <vTaskDelay>
    }
  }

  return (stat);
 80075cc:	68fb      	ldr	r3, [r7, #12]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4a07      	ldr	r2, [pc, #28]	; (8007604 <vApplicationGetIdleTaskMemory+0x2c>)
 80075e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4a06      	ldr	r2, [pc, #24]	; (8007608 <vApplicationGetIdleTaskMemory+0x30>)
 80075ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2280      	movs	r2, #128	; 0x80
 80075f4:	601a      	str	r2, [r3, #0]
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	20000210 	.word	0x20000210
 8007608:	2000026c 	.word	0x2000026c

0800760c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a07      	ldr	r2, [pc, #28]	; (8007638 <vApplicationGetTimerTaskMemory+0x2c>)
 800761c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4a06      	ldr	r2, [pc, #24]	; (800763c <vApplicationGetTimerTaskMemory+0x30>)
 8007622:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800762a:	601a      	str	r2, [r3, #0]
}
 800762c:	bf00      	nop
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	2000046c 	.word	0x2000046c
 800763c:	200004c8 	.word	0x200004c8

08007640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f103 0208 	add.w	r2, r3, #8
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f103 0208 	add.w	r2, r3, #8
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f103 0208 	add.w	r2, r3, #8
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d103      	bne.n	8007702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	e00c      	b.n	800771c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3308      	adds	r3, #8
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e002      	b.n	8007710 <vListInsert+0x2e>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	429a      	cmp	r2, r3
 800771a:	d2f6      	bcs.n	800770a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	601a      	str	r2, [r3, #0]
}
 8007748:	bf00      	nop
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6892      	ldr	r2, [r2, #8]
 800776a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6852      	ldr	r2, [r2, #4]
 8007774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	429a      	cmp	r2, r3
 800777e:	d103      	bne.n	8007788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	1e5a      	subs	r2, r3, #1
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80077d2:	f002 f94f 	bl	8009a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077e2:	fb01 f303 	mul.w	r3, r1, r3
 80077e6:	441a      	add	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007802:	3b01      	subs	r3, #1
 8007804:	68f9      	ldr	r1, [r7, #12]
 8007806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	441a      	add	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	22ff      	movs	r2, #255	; 0xff
 800781e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d114      	bne.n	8007852 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01a      	beq.n	8007866 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3310      	adds	r3, #16
 8007834:	4618      	mov	r0, r3
 8007836:	f001 f903 	bl	8008a40 <xTaskRemoveFromEventList>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d012      	beq.n	8007866 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <xQueueGenericReset+0xcc>)
 8007842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	e009      	b.n	8007866 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3310      	adds	r3, #16
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fef2 	bl	8007640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff feed 	bl	8007640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007866:	f002 f935 	bl	8009ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800786a:	2301      	movs	r3, #1
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08e      	sub	sp, #56	; 0x38
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <xQueueGenericCreateStatic+0x52>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <xQueueGenericCreateStatic+0x56>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <xQueueGenericCreateStatic+0x58>
 80078ce:	2300      	movs	r3, #0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	623b      	str	r3, [r7, #32]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xQueueGenericCreateStatic+0x7e>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <xQueueGenericCreateStatic+0x82>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xQueueGenericCreateStatic+0x84>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	61fb      	str	r3, [r7, #28]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007916:	2350      	movs	r3, #80	; 0x50
 8007918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b50      	cmp	r3, #80	; 0x50
 800791e:	d00a      	beq.n	8007936 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	61bb      	str	r3, [r7, #24]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007936:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00d      	beq.n	800795e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800794a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	4613      	mov	r3, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f805 	bl	8007968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007960:	4618      	mov	r0, r3
 8007962:	3730      	adds	r7, #48	; 0x30
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	e002      	b.n	800798a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007996:	2101      	movs	r1, #1
 8007998:	69b8      	ldr	r0, [r7, #24]
 800799a:	f7ff ff05 	bl	80077a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08e      	sub	sp, #56	; 0x38
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079be:	2300      	movs	r3, #0
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <xQueueGenericSend+0x32>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <xQueueGenericSend+0x40>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <xQueueGenericSend+0x44>
 80079f0:	2301      	movs	r3, #1
 80079f2:	e000      	b.n	80079f6 <xQueueGenericSend+0x46>
 80079f4:	2300      	movs	r3, #0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <xQueueGenericSend+0x60>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d103      	bne.n	8007a1e <xQueueGenericSend+0x6e>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <xQueueGenericSend+0x72>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <xQueueGenericSend+0x74>
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xQueueGenericSend+0x8e>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	623b      	str	r3, [r7, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a3e:	f001 f9bd 	bl	8008dbc <xTaskGetSchedulerState>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d102      	bne.n	8007a4e <xQueueGenericSend+0x9e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <xQueueGenericSend+0xa2>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <xQueueGenericSend+0xa4>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <xQueueGenericSend+0xbe>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	61fb      	str	r3, [r7, #28]
}
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a6e:	f002 f801 	bl	8009a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <xQueueGenericSend+0xd4>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d129      	bne.n	8007ad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a8a:	f000 fa0b 	bl	8007ea4 <prvCopyDataToQueue>
 8007a8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	3324      	adds	r3, #36	; 0x24
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 ffcf 	bl	8008a40 <xTaskRemoveFromEventList>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d013      	beq.n	8007ad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007aa8:	4b3f      	ldr	r3, [pc, #252]	; (8007ba8 <xQueueGenericSend+0x1f8>)
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	e00a      	b.n	8007ad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d007      	beq.n	8007ad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ac0:	4b39      	ldr	r3, [pc, #228]	; (8007ba8 <xQueueGenericSend+0x1f8>)
 8007ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ad0:	f002 f800 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e063      	b.n	8007ba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ade:	f001 fff9 	bl	8009ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e05c      	b.n	8007ba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f809 	bl	8008b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007afa:	f001 ffeb 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007afe:	f000 fd7b 	bl	80085f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b02:	f001 ffb7 	bl	8009a74 <vPortEnterCritical>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d103      	bne.n	8007b1c <xQueueGenericSend+0x16c>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b22:	b25b      	sxtb	r3, r3
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d103      	bne.n	8007b32 <xQueueGenericSend+0x182>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b32:	f001 ffcf 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b36:	1d3a      	adds	r2, r7, #4
 8007b38:	f107 0314 	add.w	r3, r7, #20
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fff8 	bl	8008b34 <xTaskCheckForTimeOut>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d124      	bne.n	8007b94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b4c:	f000 faa2 	bl	8008094 <prvIsQueueFull>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d018      	beq.n	8007b88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	3310      	adds	r3, #16
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 ff1e 	bl	80089a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b66:	f000 fa2d 	bl	8007fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b6a:	f000 fd53 	bl	8008614 <xTaskResumeAll>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f47f af7c 	bne.w	8007a6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <xQueueGenericSend+0x1f8>)
 8007b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	e772      	b.n	8007a6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b8a:	f000 fa1b 	bl	8007fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b8e:	f000 fd41 	bl	8008614 <xTaskResumeAll>
 8007b92:	e76c      	b.n	8007a6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b96:	f000 fa15 	bl	8007fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b9a:	f000 fd3b 	bl	8008614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3738      	adds	r7, #56	; 0x38
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b090      	sub	sp, #64	; 0x40
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <xQueueGenericSendFromISR+0x3c>
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <xQueueGenericSendFromISR+0x40>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <xQueueGenericSendFromISR+0x42>
 8007bec:	2300      	movs	r3, #0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d103      	bne.n	8007c16 <xQueueGenericSendFromISR+0x6a>
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <xQueueGenericSendFromISR+0x6e>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <xQueueGenericSendFromISR+0x70>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	623b      	str	r3, [r7, #32]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c36:	f001 ffff 	bl	8009c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	61fa      	str	r2, [r7, #28]
 8007c50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d302      	bcc.n	8007c68 <xQueueGenericSendFromISR+0xbc>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d12f      	bne.n	8007cc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c7e:	f000 f911 	bl	8007ea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	d112      	bne.n	8007cb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d016      	beq.n	8007cc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	3324      	adds	r3, #36	; 0x24
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fed1 	bl	8008a40 <xTaskRemoveFromEventList>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00e      	beq.n	8007cc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e007      	b.n	8007cc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	b25a      	sxtb	r2, r3
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007cc6:	e001      	b.n	8007ccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007cd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3740      	adds	r7, #64	; 0x40
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08c      	sub	sp, #48	; 0x30
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <xQueueReceive+0x30>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	623b      	str	r3, [r7, #32]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <xQueueReceive+0x3e>
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <xQueueReceive+0x42>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <xQueueReceive+0x44>
 8007d26:	2300      	movs	r3, #0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <xQueueReceive+0x5e>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	61fb      	str	r3, [r7, #28]
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d42:	f001 f83b 	bl	8008dbc <xTaskGetSchedulerState>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <xQueueReceive+0x6e>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <xQueueReceive+0x72>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <xQueueReceive+0x74>
 8007d56:	2300      	movs	r3, #0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <xQueueReceive+0x8e>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	61bb      	str	r3, [r7, #24]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d72:	f001 fe7f 	bl	8009a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01f      	beq.n	8007dc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d86:	f000 f8f7 	bl	8007f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	1e5a      	subs	r2, r3, #1
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00f      	beq.n	8007dba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9c:	3310      	adds	r3, #16
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 fe4e 	bl	8008a40 <xTaskRemoveFromEventList>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007daa:	4b3d      	ldr	r3, [pc, #244]	; (8007ea0 <xQueueReceive+0x1bc>)
 8007dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dba:	f001 fe8b 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e069      	b.n	8007e96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dc8:	f001 fe84 	bl	8009ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e062      	b.n	8007e96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd6:	f107 0310 	add.w	r3, r7, #16
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fe94 	bl	8008b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007de4:	f001 fe76 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de8:	f000 fc06 	bl	80085f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dec:	f001 fe42 	bl	8009a74 <vPortEnterCritical>
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007df6:	b25b      	sxtb	r3, r3
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d103      	bne.n	8007e06 <xQueueReceive+0x122>
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e0c:	b25b      	sxtb	r3, r3
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d103      	bne.n	8007e1c <xQueueReceive+0x138>
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e1c:	f001 fe5a 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e20:	1d3a      	adds	r2, r7, #4
 8007e22:	f107 0310 	add.w	r3, r7, #16
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fe83 	bl	8008b34 <xTaskCheckForTimeOut>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d123      	bne.n	8007e7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e36:	f000 f917 	bl	8008068 <prvIsQueueEmpty>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d017      	beq.n	8007e70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	3324      	adds	r3, #36	; 0x24
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	4611      	mov	r1, r2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fda9 	bl	80089a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e50:	f000 f8b8 	bl	8007fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e54:	f000 fbde 	bl	8008614 <xTaskResumeAll>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d189      	bne.n	8007d72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007e5e:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <xQueueReceive+0x1bc>)
 8007e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	e780      	b.n	8007d72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e72:	f000 f8a7 	bl	8007fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e76:	f000 fbcd 	bl	8008614 <xTaskResumeAll>
 8007e7a:	e77a      	b.n	8007d72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7e:	f000 f8a1 	bl	8007fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e82:	f000 fbc7 	bl	8008614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e88:	f000 f8ee 	bl	8008068 <prvIsQueueEmpty>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f43f af6f 	beq.w	8007d72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3730      	adds	r7, #48	; 0x30
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d14d      	bne.n	8007f66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 ff92 	bl	8008df8 <xTaskPriorityDisinherit>
 8007ed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	609a      	str	r2, [r3, #8]
 8007edc:	e043      	b.n	8007f66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d119      	bne.n	8007f18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6858      	ldr	r0, [r3, #4]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	461a      	mov	r2, r3
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	f002 f8f6 	bl	800a0e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	441a      	add	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d32b      	bcc.n	8007f66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	605a      	str	r2, [r3, #4]
 8007f16:	e026      	b.n	8007f66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68d8      	ldr	r0, [r3, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f20:	461a      	mov	r2, r3
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	f002 f8dc 	bl	800a0e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	425b      	negs	r3, r3
 8007f32:	441a      	add	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d207      	bcs.n	8007f54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	441a      	add	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d105      	bne.n	8007f66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f6e:	697b      	ldr	r3, [r7, #20]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	441a      	add	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d303      	bcc.n	8007fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68d9      	ldr	r1, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6838      	ldr	r0, [r7, #0]
 8007fb8:	f002 f892 	bl	800a0e0 <memcpy>
	}
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fcc:	f001 fd52 	bl	8009a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fd8:	e011      	b.n	8007ffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d012      	beq.n	8008008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3324      	adds	r3, #36	; 0x24
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fd2a 	bl	8008a40 <xTaskRemoveFromEventList>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ff2:	f000 fe01 	bl	8008bf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008002:	2b00      	cmp	r3, #0
 8008004:	dce9      	bgt.n	8007fda <prvUnlockQueue+0x16>
 8008006:	e000      	b.n	800800a <prvUnlockQueue+0x46>
					break;
 8008008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	22ff      	movs	r2, #255	; 0xff
 800800e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008012:	f001 fd5f 	bl	8009ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008016:	f001 fd2d 	bl	8009a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008022:	e011      	b.n	8008048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d012      	beq.n	8008052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3310      	adds	r3, #16
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fd05 	bl	8008a40 <xTaskRemoveFromEventList>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800803c:	f000 fddc 	bl	8008bf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	3b01      	subs	r3, #1
 8008044:	b2db      	uxtb	r3, r3
 8008046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	dce9      	bgt.n	8008024 <prvUnlockQueue+0x60>
 8008050:	e000      	b.n	8008054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	22ff      	movs	r2, #255	; 0xff
 8008058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800805c:	f001 fd3a 	bl	8009ad4 <vPortExitCritical>
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008070:	f001 fd00 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	e001      	b.n	8008086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008086:	f001 fd25 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 800808a:	68fb      	ldr	r3, [r7, #12]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800809c:	f001 fcea 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d102      	bne.n	80080b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080ac:	2301      	movs	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	e001      	b.n	80080b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080b6:	f001 fd0d 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 80080ba:	68fb      	ldr	r3, [r7, #12]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e014      	b.n	80080fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080d4:	4a0f      	ldr	r2, [pc, #60]	; (8008114 <vQueueAddToRegistry+0x50>)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080e0:	490c      	ldr	r1, [pc, #48]	; (8008114 <vQueueAddToRegistry+0x50>)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080ea:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <vQueueAddToRegistry+0x50>)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	4413      	add	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080f6:	e006      	b.n	8008106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b07      	cmp	r3, #7
 8008102:	d9e7      	bls.n	80080d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20004f38 	.word	0x20004f38

08008118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008128:	f001 fca4 	bl	8009a74 <vPortEnterCritical>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008132:	b25b      	sxtb	r3, r3
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008138:	d103      	bne.n	8008142 <vQueueWaitForMessageRestricted+0x2a>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008148:	b25b      	sxtb	r3, r3
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d103      	bne.n	8008158 <vQueueWaitForMessageRestricted+0x40>
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008158:	f001 fcbc 	bl	8009ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	3324      	adds	r3, #36	; 0x24
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fc3b 	bl	80089e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008172:	6978      	ldr	r0, [r7, #20]
 8008174:	f7ff ff26 	bl	8007fc4 <prvUnlockQueue>
	}
 8008178:	bf00      	nop
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08e      	sub	sp, #56	; 0x38
 8008184:	af04      	add	r7, sp, #16
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	61fb      	str	r3, [r7, #28]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081c6:	235c      	movs	r3, #92	; 0x5c
 80081c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b5c      	cmp	r3, #92	; 0x5c
 80081ce:	d00a      	beq.n	80081e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	61bb      	str	r3, [r7, #24]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01e      	beq.n	800822c <xTaskCreateStatic+0xac>
 80081ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d01b      	beq.n	800822c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	2202      	movs	r2, #2
 8008202:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008206:	2300      	movs	r3, #0
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	f107 0314 	add.w	r3, r7, #20
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 f850 	bl	80082c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008226:	f000 f8dd 	bl	80083e4 <prvAddNewTaskToReadyList>
 800822a:	e001      	b.n	8008230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008230:	697b      	ldr	r3, [r7, #20]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	3728      	adds	r7, #40	; 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800823a:	b580      	push	{r7, lr}
 800823c:	b08c      	sub	sp, #48	; 0x30
 800823e:	af04      	add	r7, sp, #16
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	603b      	str	r3, [r7, #0]
 8008246:	4613      	mov	r3, r2
 8008248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4618      	mov	r0, r3
 8008250:	f001 fd32 	bl	8009cb8 <pvPortMalloc>
 8008254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800825c:	205c      	movs	r0, #92	; 0x5c
 800825e:	f001 fd2b 	bl	8009cb8 <pvPortMalloc>
 8008262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
 8008270:	e005      	b.n	800827e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008272:	6978      	ldr	r0, [r7, #20]
 8008274:	f001 fdec 	bl	8009e50 <vPortFree>
 8008278:	e001      	b.n	800827e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d017      	beq.n	80082b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800828c:	88fa      	ldrh	r2, [r7, #6]
 800828e:	2300      	movs	r3, #0
 8008290:	9303      	str	r3, [sp, #12]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	9302      	str	r3, [sp, #8]
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f80e 	bl	80082c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082a8:	69f8      	ldr	r0, [r7, #28]
 80082aa:	f000 f89b 	bl	80083e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082ae:	2301      	movs	r3, #1
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	e002      	b.n	80082ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082ba:	69bb      	ldr	r3, [r7, #24]
	}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	461a      	mov	r2, r3
 80082dc:	21a5      	movs	r1, #165	; 0xa5
 80082de:	f001 ff0d 	bl	800a0fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082ec:	3b01      	subs	r3, #1
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	617b      	str	r3, [r7, #20]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d01f      	beq.n	8008362 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	e012      	b.n	800834e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	7819      	ldrb	r1, [r3, #0]
 8008330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	4413      	add	r3, r2
 8008336:	3334      	adds	r3, #52	; 0x34
 8008338:	460a      	mov	r2, r1
 800833a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	4413      	add	r3, r2
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d006      	beq.n	8008356 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	3301      	adds	r3, #1
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d9e9      	bls.n	8008328 <prvInitialiseNewTask+0x64>
 8008354:	e000      	b.n	8008358 <prvInitialiseNewTask+0x94>
			{
				break;
 8008356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008360:	e003      	b.n	800836a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	2b37      	cmp	r3, #55	; 0x37
 800836e:	d901      	bls.n	8008374 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008370:	2337      	movs	r3, #55	; 0x37
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800837e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	2200      	movs	r2, #0
 8008384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	3304      	adds	r3, #4
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff f978 	bl	8007680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	3318      	adds	r3, #24
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff f973 	bl	8007680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2200      	movs	r2, #0
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	68f9      	ldr	r1, [r7, #12]
 80083c2:	69b8      	ldr	r0, [r7, #24]
 80083c4:	f001 fa28 	bl	8009818 <pxPortInitialiseStack>
 80083c8:	4602      	mov	r2, r0
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083da:	bf00      	nop
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083ec:	f001 fb42 	bl	8009a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083f0:	4b2d      	ldr	r3, [pc, #180]	; (80084a8 <prvAddNewTaskToReadyList+0xc4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	4a2c      	ldr	r2, [pc, #176]	; (80084a8 <prvAddNewTaskToReadyList+0xc4>)
 80083f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80083fa:	4b2c      	ldr	r3, [pc, #176]	; (80084ac <prvAddNewTaskToReadyList+0xc8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008402:	4a2a      	ldr	r2, [pc, #168]	; (80084ac <prvAddNewTaskToReadyList+0xc8>)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008408:	4b27      	ldr	r3, [pc, #156]	; (80084a8 <prvAddNewTaskToReadyList+0xc4>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d110      	bne.n	8008432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008410:	f000 fc16 	bl	8008c40 <prvInitialiseTaskLists>
 8008414:	e00d      	b.n	8008432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008416:	4b26      	ldr	r3, [pc, #152]	; (80084b0 <prvAddNewTaskToReadyList+0xcc>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800841e:	4b23      	ldr	r3, [pc, #140]	; (80084ac <prvAddNewTaskToReadyList+0xc8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	429a      	cmp	r2, r3
 800842a:	d802      	bhi.n	8008432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800842c:	4a1f      	ldr	r2, [pc, #124]	; (80084ac <prvAddNewTaskToReadyList+0xc8>)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008432:	4b20      	ldr	r3, [pc, #128]	; (80084b4 <prvAddNewTaskToReadyList+0xd0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3301      	adds	r3, #1
 8008438:	4a1e      	ldr	r2, [pc, #120]	; (80084b4 <prvAddNewTaskToReadyList+0xd0>)
 800843a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800843c:	4b1d      	ldr	r3, [pc, #116]	; (80084b4 <prvAddNewTaskToReadyList+0xd0>)
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008448:	4b1b      	ldr	r3, [pc, #108]	; (80084b8 <prvAddNewTaskToReadyList+0xd4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d903      	bls.n	8008458 <prvAddNewTaskToReadyList+0x74>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	4a18      	ldr	r2, [pc, #96]	; (80084b8 <prvAddNewTaskToReadyList+0xd4>)
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4a15      	ldr	r2, [pc, #84]	; (80084bc <prvAddNewTaskToReadyList+0xd8>)
 8008466:	441a      	add	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7ff f913 	bl	800769a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008474:	f001 fb2e 	bl	8009ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008478:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <prvAddNewTaskToReadyList+0xcc>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00e      	beq.n	800849e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <prvAddNewTaskToReadyList+0xc8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	429a      	cmp	r2, r3
 800848c:	d207      	bcs.n	800849e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <prvAddNewTaskToReadyList+0xdc>)
 8008490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000d9c 	.word	0x20000d9c
 80084ac:	200008c8 	.word	0x200008c8
 80084b0:	20000da8 	.word	0x20000da8
 80084b4:	20000db8 	.word	0x20000db8
 80084b8:	20000da4 	.word	0x20000da4
 80084bc:	200008cc 	.word	0x200008cc
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d017      	beq.n	8008506 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084d6:	4b13      	ldr	r3, [pc, #76]	; (8008524 <vTaskDelay+0x60>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <vTaskDelay+0x30>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60bb      	str	r3, [r7, #8]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80084f4:	f000 f880 	bl	80085f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80084f8:	2100      	movs	r1, #0
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fdea 	bl	80090d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008500:	f000 f888 	bl	8008614 <xTaskResumeAll>
 8008504:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d107      	bne.n	800851c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800850c:	4b06      	ldr	r3, [pc, #24]	; (8008528 <vTaskDelay+0x64>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000dc4 	.word	0x20000dc4
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08a      	sub	sp, #40	; 0x28
 8008530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800853a:	463a      	mov	r2, r7
 800853c:	1d39      	adds	r1, r7, #4
 800853e:	f107 0308 	add.w	r3, r7, #8
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff f848 	bl	80075d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	9202      	str	r2, [sp, #8]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	2300      	movs	r3, #0
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	2300      	movs	r3, #0
 8008558:	460a      	mov	r2, r1
 800855a:	4921      	ldr	r1, [pc, #132]	; (80085e0 <vTaskStartScheduler+0xb4>)
 800855c:	4821      	ldr	r0, [pc, #132]	; (80085e4 <vTaskStartScheduler+0xb8>)
 800855e:	f7ff fe0f 	bl	8008180 <xTaskCreateStatic>
 8008562:	4603      	mov	r3, r0
 8008564:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <vTaskStartScheduler+0xbc>)
 8008566:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008568:	4b1f      	ldr	r3, [pc, #124]	; (80085e8 <vTaskStartScheduler+0xbc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008570:	2301      	movs	r3, #1
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e001      	b.n	800857a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008576:	2300      	movs	r3, #0
 8008578:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d102      	bne.n	8008586 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008580:	f000 fdfc 	bl	800917c <xTimerCreateTimerTask>
 8008584:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d116      	bne.n	80085ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	613b      	str	r3, [r7, #16]
}
 800859e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085a0:	4b12      	ldr	r3, [pc, #72]	; (80085ec <vTaskStartScheduler+0xc0>)
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085a8:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <vTaskStartScheduler+0xc4>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085ae:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <vTaskStartScheduler+0xc8>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085b4:	f001 f9bc 	bl	8009930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085b8:	e00e      	b.n	80085d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c0:	d10a      	bne.n	80085d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	60fb      	str	r3, [r7, #12]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <vTaskStartScheduler+0xaa>
}
 80085d8:	bf00      	nop
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	0800d050 	.word	0x0800d050
 80085e4:	08008c11 	.word	0x08008c11
 80085e8:	20000dc0 	.word	0x20000dc0
 80085ec:	20000dbc 	.word	0x20000dbc
 80085f0:	20000da8 	.word	0x20000da8
 80085f4:	20000da0 	.word	0x20000da0

080085f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085fc:	4b04      	ldr	r3, [pc, #16]	; (8008610 <vTaskSuspendAll+0x18>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	4a03      	ldr	r2, [pc, #12]	; (8008610 <vTaskSuspendAll+0x18>)
 8008604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008606:	bf00      	nop
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	20000dc4 	.word	0x20000dc4

08008614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800861e:	2300      	movs	r3, #0
 8008620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008622:	4b42      	ldr	r3, [pc, #264]	; (800872c <xTaskResumeAll+0x118>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10a      	bne.n	8008640 <xTaskResumeAll+0x2c>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	603b      	str	r3, [r7, #0]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008640:	f001 fa18 	bl	8009a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008644:	4b39      	ldr	r3, [pc, #228]	; (800872c <xTaskResumeAll+0x118>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3b01      	subs	r3, #1
 800864a:	4a38      	ldr	r2, [pc, #224]	; (800872c <xTaskResumeAll+0x118>)
 800864c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800864e:	4b37      	ldr	r3, [pc, #220]	; (800872c <xTaskResumeAll+0x118>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d162      	bne.n	800871c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008656:	4b36      	ldr	r3, [pc, #216]	; (8008730 <xTaskResumeAll+0x11c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d05e      	beq.n	800871c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800865e:	e02f      	b.n	80086c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008660:	4b34      	ldr	r3, [pc, #208]	; (8008734 <xTaskResumeAll+0x120>)
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3318      	adds	r3, #24
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff f871 	bl	8007754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3304      	adds	r3, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff f86c 	bl	8007754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008680:	4b2d      	ldr	r3, [pc, #180]	; (8008738 <xTaskResumeAll+0x124>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	429a      	cmp	r2, r3
 8008686:	d903      	bls.n	8008690 <xTaskResumeAll+0x7c>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <xTaskResumeAll+0x124>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4a27      	ldr	r2, [pc, #156]	; (800873c <xTaskResumeAll+0x128>)
 800869e:	441a      	add	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7fe fff7 	bl	800769a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b0:	4b23      	ldr	r3, [pc, #140]	; (8008740 <xTaskResumeAll+0x12c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d302      	bcc.n	80086c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086ba:	4b22      	ldr	r3, [pc, #136]	; (8008744 <xTaskResumeAll+0x130>)
 80086bc:	2201      	movs	r2, #1
 80086be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086c0:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <xTaskResumeAll+0x120>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1cb      	bne.n	8008660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086ce:	f000 fb55 	bl	8008d7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086d2:	4b1d      	ldr	r3, [pc, #116]	; (8008748 <xTaskResumeAll+0x134>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d010      	beq.n	8008700 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086de:	f000 f847 	bl	8008770 <xTaskIncrementTick>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80086e8:	4b16      	ldr	r3, [pc, #88]	; (8008744 <xTaskResumeAll+0x130>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1f1      	bne.n	80086de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80086fa:	4b13      	ldr	r3, [pc, #76]	; (8008748 <xTaskResumeAll+0x134>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008700:	4b10      	ldr	r3, [pc, #64]	; (8008744 <xTaskResumeAll+0x130>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008708:	2301      	movs	r3, #1
 800870a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800870c:	4b0f      	ldr	r3, [pc, #60]	; (800874c <xTaskResumeAll+0x138>)
 800870e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800871c:	f001 f9da 	bl	8009ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8008720:	68bb      	ldr	r3, [r7, #8]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000dc4 	.word	0x20000dc4
 8008730:	20000d9c 	.word	0x20000d9c
 8008734:	20000d5c 	.word	0x20000d5c
 8008738:	20000da4 	.word	0x20000da4
 800873c:	200008cc 	.word	0x200008cc
 8008740:	200008c8 	.word	0x200008c8
 8008744:	20000db0 	.word	0x20000db0
 8008748:	20000dac 	.word	0x20000dac
 800874c:	e000ed04 	.word	0xe000ed04

08008750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008756:	4b05      	ldr	r3, [pc, #20]	; (800876c <xTaskGetTickCount+0x1c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800875c:	687b      	ldr	r3, [r7, #4]
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000da0 	.word	0x20000da0

08008770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800877a:	4b4f      	ldr	r3, [pc, #316]	; (80088b8 <xTaskIncrementTick+0x148>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 808f 	bne.w	80088a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008784:	4b4d      	ldr	r3, [pc, #308]	; (80088bc <xTaskIncrementTick+0x14c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3301      	adds	r3, #1
 800878a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800878c:	4a4b      	ldr	r2, [pc, #300]	; (80088bc <xTaskIncrementTick+0x14c>)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d120      	bne.n	80087da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008798:	4b49      	ldr	r3, [pc, #292]	; (80088c0 <xTaskIncrementTick+0x150>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	603b      	str	r3, [r7, #0]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <xTaskIncrementTick+0x46>
 80087b8:	4b41      	ldr	r3, [pc, #260]	; (80088c0 <xTaskIncrementTick+0x150>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	4b41      	ldr	r3, [pc, #260]	; (80088c4 <xTaskIncrementTick+0x154>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a3f      	ldr	r2, [pc, #252]	; (80088c0 <xTaskIncrementTick+0x150>)
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4a3f      	ldr	r2, [pc, #252]	; (80088c4 <xTaskIncrementTick+0x154>)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	4b3e      	ldr	r3, [pc, #248]	; (80088c8 <xTaskIncrementTick+0x158>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	4a3d      	ldr	r2, [pc, #244]	; (80088c8 <xTaskIncrementTick+0x158>)
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	f000 fad1 	bl	8008d7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087da:	4b3c      	ldr	r3, [pc, #240]	; (80088cc <xTaskIncrementTick+0x15c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d349      	bcc.n	8008878 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087e4:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <xTaskIncrementTick+0x150>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ee:	4b37      	ldr	r3, [pc, #220]	; (80088cc <xTaskIncrementTick+0x15c>)
 80087f0:	f04f 32ff 	mov.w	r2, #4294967295
 80087f4:	601a      	str	r2, [r3, #0]
					break;
 80087f6:	e03f      	b.n	8008878 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f8:	4b31      	ldr	r3, [pc, #196]	; (80088c0 <xTaskIncrementTick+0x150>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	429a      	cmp	r2, r3
 800880e:	d203      	bcs.n	8008818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008810:	4a2e      	ldr	r2, [pc, #184]	; (80088cc <xTaskIncrementTick+0x15c>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008816:	e02f      	b.n	8008878 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3304      	adds	r3, #4
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe ff99 	bl	8007754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	3318      	adds	r3, #24
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe ff90 	bl	8007754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008838:	4b25      	ldr	r3, [pc, #148]	; (80088d0 <xTaskIncrementTick+0x160>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d903      	bls.n	8008848 <xTaskIncrementTick+0xd8>
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	4a22      	ldr	r2, [pc, #136]	; (80088d0 <xTaskIncrementTick+0x160>)
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4a1f      	ldr	r2, [pc, #124]	; (80088d4 <xTaskIncrementTick+0x164>)
 8008856:	441a      	add	r2, r3
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	3304      	adds	r3, #4
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7fe ff1b 	bl	800769a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008868:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <xTaskIncrementTick+0x168>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	429a      	cmp	r2, r3
 8008870:	d3b8      	bcc.n	80087e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008872:	2301      	movs	r3, #1
 8008874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008876:	e7b5      	b.n	80087e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008878:	4b17      	ldr	r3, [pc, #92]	; (80088d8 <xTaskIncrementTick+0x168>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887e:	4915      	ldr	r1, [pc, #84]	; (80088d4 <xTaskIncrementTick+0x164>)
 8008880:	4613      	mov	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	440b      	add	r3, r1
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d901      	bls.n	8008894 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008890:	2301      	movs	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008894:	4b11      	ldr	r3, [pc, #68]	; (80088dc <xTaskIncrementTick+0x16c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800889c:	2301      	movs	r3, #1
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e004      	b.n	80088ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088a2:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <xTaskIncrementTick+0x170>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3301      	adds	r3, #1
 80088a8:	4a0d      	ldr	r2, [pc, #52]	; (80088e0 <xTaskIncrementTick+0x170>)
 80088aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088ac:	697b      	ldr	r3, [r7, #20]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000dc4 	.word	0x20000dc4
 80088bc:	20000da0 	.word	0x20000da0
 80088c0:	20000d54 	.word	0x20000d54
 80088c4:	20000d58 	.word	0x20000d58
 80088c8:	20000db4 	.word	0x20000db4
 80088cc:	20000dbc 	.word	0x20000dbc
 80088d0:	20000da4 	.word	0x20000da4
 80088d4:	200008cc 	.word	0x200008cc
 80088d8:	200008c8 	.word	0x200008c8
 80088dc:	20000db0 	.word	0x20000db0
 80088e0:	20000dac 	.word	0x20000dac

080088e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088ea:	4b28      	ldr	r3, [pc, #160]	; (800898c <vTaskSwitchContext+0xa8>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088f2:	4b27      	ldr	r3, [pc, #156]	; (8008990 <vTaskSwitchContext+0xac>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088f8:	e041      	b.n	800897e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80088fa:	4b25      	ldr	r3, [pc, #148]	; (8008990 <vTaskSwitchContext+0xac>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008900:	4b24      	ldr	r3, [pc, #144]	; (8008994 <vTaskSwitchContext+0xb0>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e010      	b.n	800892a <vTaskSwitchContext+0x46>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <vTaskSwitchContext+0x40>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	607b      	str	r3, [r7, #4]
}
 8008920:	bf00      	nop
 8008922:	e7fe      	b.n	8008922 <vTaskSwitchContext+0x3e>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3b01      	subs	r3, #1
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	491b      	ldr	r1, [pc, #108]	; (8008998 <vTaskSwitchContext+0xb4>)
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0e4      	beq.n	8008908 <vTaskSwitchContext+0x24>
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4a13      	ldr	r2, [pc, #76]	; (8008998 <vTaskSwitchContext+0xb4>)
 800894a:	4413      	add	r3, r2
 800894c:	60bb      	str	r3, [r7, #8]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	605a      	str	r2, [r3, #4]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	3308      	adds	r3, #8
 8008960:	429a      	cmp	r2, r3
 8008962:	d104      	bne.n	800896e <vTaskSwitchContext+0x8a>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	605a      	str	r2, [r3, #4]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	4a09      	ldr	r2, [pc, #36]	; (800899c <vTaskSwitchContext+0xb8>)
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	4a06      	ldr	r2, [pc, #24]	; (8008994 <vTaskSwitchContext+0xb0>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6013      	str	r3, [r2, #0]
}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000dc4 	.word	0x20000dc4
 8008990:	20000db0 	.word	0x20000db0
 8008994:	20000da4 	.word	0x20000da4
 8008998:	200008cc 	.word	0x200008cc
 800899c:	200008c8 	.word	0x200008c8

080089a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10a      	bne.n	80089c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089c6:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <vTaskPlaceOnEventList+0x44>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3318      	adds	r3, #24
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7fe fe87 	bl	80076e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089d4:	2101      	movs	r1, #1
 80089d6:	6838      	ldr	r0, [r7, #0]
 80089d8:	f000 fb7c 	bl	80090d4 <prvAddCurrentTaskToDelayedList>
}
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200008c8 	.word	0x200008c8

080089e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	617b      	str	r3, [r7, #20]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a10:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <vTaskPlaceOnEventListRestricted+0x54>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3318      	adds	r3, #24
 8008a16:	4619      	mov	r1, r3
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7fe fe3e 	bl	800769a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a24:	f04f 33ff 	mov.w	r3, #4294967295
 8008a28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	68b8      	ldr	r0, [r7, #8]
 8008a2e:	f000 fb51 	bl	80090d4 <prvAddCurrentTaskToDelayedList>
	}
 8008a32:	bf00      	nop
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	200008c8 	.word	0x200008c8

08008a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	60fb      	str	r3, [r7, #12]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	3318      	adds	r3, #24
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe fe6f 	bl	8007754 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a76:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <xTaskRemoveFromEventList+0xb0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d11d      	bne.n	8008aba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fe66 	bl	8007754 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	4b19      	ldr	r3, [pc, #100]	; (8008af4 <xTaskRemoveFromEventList+0xb4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d903      	bls.n	8008a9c <xTaskRemoveFromEventList+0x5c>
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	4a16      	ldr	r2, [pc, #88]	; (8008af4 <xTaskRemoveFromEventList+0xb4>)
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <xTaskRemoveFromEventList+0xb8>)
 8008aaa:	441a      	add	r2, r3
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	f7fe fdf1 	bl	800769a <vListInsertEnd>
 8008ab8:	e005      	b.n	8008ac6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	3318      	adds	r3, #24
 8008abe:	4619      	mov	r1, r3
 8008ac0:	480e      	ldr	r0, [pc, #56]	; (8008afc <xTaskRemoveFromEventList+0xbc>)
 8008ac2:	f7fe fdea 	bl	800769a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aca:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <xTaskRemoveFromEventList+0xc0>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d905      	bls.n	8008ae0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <xTaskRemoveFromEventList+0xc4>)
 8008ada:	2201      	movs	r2, #1
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	e001      	b.n	8008ae4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ae4:	697b      	ldr	r3, [r7, #20]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20000dc4 	.word	0x20000dc4
 8008af4:	20000da4 	.word	0x20000da4
 8008af8:	200008cc 	.word	0x200008cc
 8008afc:	20000d5c 	.word	0x20000d5c
 8008b00:	200008c8 	.word	0x200008c8
 8008b04:	20000db0 	.word	0x20000db0

08008b08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b10:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <vTaskInternalSetTimeOutState+0x24>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <vTaskInternalSetTimeOutState+0x28>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	605a      	str	r2, [r3, #4]
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000db4 	.word	0x20000db4
 8008b30:	20000da0 	.word	0x20000da0

08008b34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	613b      	str	r3, [r7, #16]
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60fb      	str	r3, [r7, #12]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b76:	f000 ff7d 	bl	8009a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b7a:	4b1d      	ldr	r3, [pc, #116]	; (8008bf0 <xTaskCheckForTimeOut+0xbc>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d102      	bne.n	8008b9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	e023      	b.n	8008be2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b15      	ldr	r3, [pc, #84]	; (8008bf4 <xTaskCheckForTimeOut+0xc0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d007      	beq.n	8008bb6 <xTaskCheckForTimeOut+0x82>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d302      	bcc.n	8008bb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	61fb      	str	r3, [r7, #28]
 8008bb4:	e015      	b.n	8008be2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d20b      	bcs.n	8008bd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	1ad2      	subs	r2, r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff ff9b 	bl	8008b08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	e004      	b.n	8008be2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bde:	2301      	movs	r3, #1
 8008be0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008be2:	f000 ff77 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 8008be6:	69fb      	ldr	r3, [r7, #28]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3720      	adds	r7, #32
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000da0 	.word	0x20000da0
 8008bf4:	20000db4 	.word	0x20000db4

08008bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bfc:	4b03      	ldr	r3, [pc, #12]	; (8008c0c <vTaskMissedYield+0x14>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	601a      	str	r2, [r3, #0]
}
 8008c02:	bf00      	nop
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20000db0 	.word	0x20000db0

08008c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c18:	f000 f852 	bl	8008cc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <prvIdleTask+0x28>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d9f9      	bls.n	8008c18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <prvIdleTask+0x2c>)
 8008c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c34:	e7f0      	b.n	8008c18 <prvIdleTask+0x8>
 8008c36:	bf00      	nop
 8008c38:	200008cc 	.word	0x200008cc
 8008c3c:	e000ed04 	.word	0xe000ed04

08008c40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c46:	2300      	movs	r3, #0
 8008c48:	607b      	str	r3, [r7, #4]
 8008c4a:	e00c      	b.n	8008c66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4a12      	ldr	r2, [pc, #72]	; (8008ca0 <prvInitialiseTaskLists+0x60>)
 8008c58:	4413      	add	r3, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe fcf0 	bl	8007640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3301      	adds	r3, #1
 8008c64:	607b      	str	r3, [r7, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b37      	cmp	r3, #55	; 0x37
 8008c6a:	d9ef      	bls.n	8008c4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c6c:	480d      	ldr	r0, [pc, #52]	; (8008ca4 <prvInitialiseTaskLists+0x64>)
 8008c6e:	f7fe fce7 	bl	8007640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c72:	480d      	ldr	r0, [pc, #52]	; (8008ca8 <prvInitialiseTaskLists+0x68>)
 8008c74:	f7fe fce4 	bl	8007640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c78:	480c      	ldr	r0, [pc, #48]	; (8008cac <prvInitialiseTaskLists+0x6c>)
 8008c7a:	f7fe fce1 	bl	8007640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c7e:	480c      	ldr	r0, [pc, #48]	; (8008cb0 <prvInitialiseTaskLists+0x70>)
 8008c80:	f7fe fcde 	bl	8007640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c84:	480b      	ldr	r0, [pc, #44]	; (8008cb4 <prvInitialiseTaskLists+0x74>)
 8008c86:	f7fe fcdb 	bl	8007640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c8a:	4b0b      	ldr	r3, [pc, #44]	; (8008cb8 <prvInitialiseTaskLists+0x78>)
 8008c8c:	4a05      	ldr	r2, [pc, #20]	; (8008ca4 <prvInitialiseTaskLists+0x64>)
 8008c8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c90:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <prvInitialiseTaskLists+0x7c>)
 8008c92:	4a05      	ldr	r2, [pc, #20]	; (8008ca8 <prvInitialiseTaskLists+0x68>)
 8008c94:	601a      	str	r2, [r3, #0]
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200008cc 	.word	0x200008cc
 8008ca4:	20000d2c 	.word	0x20000d2c
 8008ca8:	20000d40 	.word	0x20000d40
 8008cac:	20000d5c 	.word	0x20000d5c
 8008cb0:	20000d70 	.word	0x20000d70
 8008cb4:	20000d88 	.word	0x20000d88
 8008cb8:	20000d54 	.word	0x20000d54
 8008cbc:	20000d58 	.word	0x20000d58

08008cc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cc6:	e019      	b.n	8008cfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cc8:	f000 fed4 	bl	8009a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ccc:	4b10      	ldr	r3, [pc, #64]	; (8008d10 <prvCheckTasksWaitingTermination+0x50>)
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fe fd3b 	bl	8007754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cde:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <prvCheckTasksWaitingTermination+0x54>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	4a0b      	ldr	r2, [pc, #44]	; (8008d14 <prvCheckTasksWaitingTermination+0x54>)
 8008ce6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <prvCheckTasksWaitingTermination+0x58>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	4a0a      	ldr	r2, [pc, #40]	; (8008d18 <prvCheckTasksWaitingTermination+0x58>)
 8008cf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cf2:	f000 feef 	bl	8009ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f810 	bl	8008d1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <prvCheckTasksWaitingTermination+0x58>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e1      	bne.n	8008cc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000d70 	.word	0x20000d70
 8008d14:	20000d9c 	.word	0x20000d9c
 8008d18:	20000d84 	.word	0x20000d84

08008d1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d108      	bne.n	8008d40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 f88c 	bl	8009e50 <vPortFree>
				vPortFree( pxTCB );
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f001 f889 	bl	8009e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d3e:	e018      	b.n	8008d72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d103      	bne.n	8008d52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 f880 	bl	8009e50 <vPortFree>
	}
 8008d50:	e00f      	b.n	8008d72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d00a      	beq.n	8008d72 <prvDeleteTCB+0x56>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	60fb      	str	r3, [r7, #12]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <prvDeleteTCB+0x54>
	}
 8008d72:	bf00      	nop
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <prvResetNextTaskUnblockTime+0x38>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d104      	bne.n	8008d96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <prvResetNextTaskUnblockTime+0x3c>)
 8008d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d94:	e008      	b.n	8008da8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d96:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <prvResetNextTaskUnblockTime+0x38>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	4a04      	ldr	r2, [pc, #16]	; (8008db8 <prvResetNextTaskUnblockTime+0x3c>)
 8008da6:	6013      	str	r3, [r2, #0]
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	20000d54 	.word	0x20000d54
 8008db8:	20000dbc 	.word	0x20000dbc

08008dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <xTaskGetSchedulerState+0x34>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d102      	bne.n	8008dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	607b      	str	r3, [r7, #4]
 8008dce:	e008      	b.n	8008de2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd0:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <xTaskGetSchedulerState+0x38>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008dd8:	2302      	movs	r3, #2
 8008dda:	607b      	str	r3, [r7, #4]
 8008ddc:	e001      	b.n	8008de2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dde:	2300      	movs	r3, #0
 8008de0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008de2:	687b      	ldr	r3, [r7, #4]
	}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	20000da8 	.word	0x20000da8
 8008df4:	20000dc4 	.word	0x20000dc4

08008df8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d056      	beq.n	8008ebc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <xTaskPriorityDisinherit+0xd0>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d00a      	beq.n	8008e2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	60fb      	str	r3, [r7, #12]
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10a      	bne.n	8008e4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	60bb      	str	r3, [r7, #8]
}
 8008e48:	bf00      	nop
 8008e4a:	e7fe      	b.n	8008e4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e50:	1e5a      	subs	r2, r3, #1
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d02c      	beq.n	8008ebc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d128      	bne.n	8008ebc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fc70 	bl	8007754 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <xTaskPriorityDisinherit+0xd4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d903      	bls.n	8008e9c <xTaskPriorityDisinherit+0xa4>
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	4a0c      	ldr	r2, [pc, #48]	; (8008ecc <xTaskPriorityDisinherit+0xd4>)
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4a09      	ldr	r2, [pc, #36]	; (8008ed0 <xTaskPriorityDisinherit+0xd8>)
 8008eaa:	441a      	add	r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f7fe fbf1 	bl	800769a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ebc:	697b      	ldr	r3, [r7, #20]
	}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200008c8 	.word	0x200008c8
 8008ecc:	20000da4 	.word	0x20000da4
 8008ed0:	200008cc 	.word	0x200008cc

08008ed4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008ede:	f000 fdc9 	bl	8009a74 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008ee2:	4b1e      	ldr	r3, [pc, #120]	; (8008f5c <ulTaskNotifyTake+0x88>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d113      	bne.n	8008f14 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008eec:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <ulTaskNotifyTake+0x88>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008efc:	2101      	movs	r1, #1
 8008efe:	6838      	ldr	r0, [r7, #0]
 8008f00:	f000 f8e8 	bl	80090d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008f04:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <ulTaskNotifyTake+0x8c>)
 8008f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008f14:	f000 fdde 	bl	8009ad4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008f18:	f000 fdac 	bl	8009a74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <ulTaskNotifyTake+0x88>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f22:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00c      	beq.n	8008f44 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d004      	beq.n	8008f3a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <ulTaskNotifyTake+0x88>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2200      	movs	r2, #0
 8008f36:	655a      	str	r2, [r3, #84]	; 0x54
 8008f38:	e004      	b.n	8008f44 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008f3a:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <ulTaskNotifyTake+0x88>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	3a01      	subs	r2, #1
 8008f42:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <ulTaskNotifyTake+0x88>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8008f4e:	f000 fdc1 	bl	8009ad4 <vPortExitCritical>

		return ulReturn;
 8008f52:	68fb      	ldr	r3, [r7, #12]
	}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	200008c8 	.word	0x200008c8
 8008f60:	e000ed04 	.word	0xe000ed04

08008f64 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08a      	sub	sp, #40	; 0x28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	4613      	mov	r3, r2
 8008f72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008f74:	2301      	movs	r3, #1
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <xTaskGenericNotify+0x30>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	61bb      	str	r3, [r7, #24]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008f98:	f000 fd6c 	bl	8009a74 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008fb0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008fba:	79fb      	ldrb	r3, [r7, #7]
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d828      	bhi.n	8009012 <xTaskGenericNotify+0xae>
 8008fc0:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <xTaskGenericNotify+0x64>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08009033 	.word	0x08009033
 8008fcc:	08008fdd 	.word	0x08008fdd
 8008fd0:	08008feb 	.word	0x08008feb
 8008fd4:	08008ff7 	.word	0x08008ff7
 8008fd8:	08008fff 	.word	0x08008fff
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008fe8:	e026      	b.n	8009038 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008ff4:	e020      	b.n	8009038 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008ffc:	e01c      	b.n	8009038 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008ffe:	7ffb      	ldrb	r3, [r7, #31]
 8009000:	2b02      	cmp	r3, #2
 8009002:	d003      	beq.n	800900c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800900a:	e015      	b.n	8009038 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800900c:	2300      	movs	r3, #0
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009010:	e012      	b.n	8009038 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901a:	d00c      	beq.n	8009036 <xTaskGenericNotify+0xd2>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	617b      	str	r3, [r7, #20]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xTaskGenericNotify+0xcc>
					break;
 8009032:	bf00      	nop
 8009034:	e000      	b.n	8009038 <xTaskGenericNotify+0xd4>

					break;
 8009036:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009038:	7ffb      	ldrb	r3, [r7, #31]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d13a      	bne.n	80090b4 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	3304      	adds	r3, #4
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fb86 	bl	8007754 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904c:	4b1d      	ldr	r3, [pc, #116]	; (80090c4 <xTaskGenericNotify+0x160>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	429a      	cmp	r2, r3
 8009052:	d903      	bls.n	800905c <xTaskGenericNotify+0xf8>
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	4a1a      	ldr	r2, [pc, #104]	; (80090c4 <xTaskGenericNotify+0x160>)
 800905a:	6013      	str	r3, [r2, #0]
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009060:	4613      	mov	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4a17      	ldr	r2, [pc, #92]	; (80090c8 <xTaskGenericNotify+0x164>)
 800906a:	441a      	add	r2, r3
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	3304      	adds	r3, #4
 8009070:	4619      	mov	r1, r3
 8009072:	4610      	mov	r0, r2
 8009074:	f7fe fb11 	bl	800769a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <xTaskGenericNotify+0x132>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	613b      	str	r3, [r7, #16]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909a:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <xTaskGenericNotify+0x168>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d907      	bls.n	80090b4 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <xTaskGenericNotify+0x16c>)
 80090a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80090b4:	f000 fd0e 	bl	8009ad4 <vPortExitCritical>

		return xReturn;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3728      	adds	r7, #40	; 0x28
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000da4 	.word	0x20000da4
 80090c8:	200008cc 	.word	0x200008cc
 80090cc:	200008c8 	.word	0x200008c8
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090de:	4b21      	ldr	r3, [pc, #132]	; (8009164 <prvAddCurrentTaskToDelayedList+0x90>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090e4:	4b20      	ldr	r3, [pc, #128]	; (8009168 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3304      	adds	r3, #4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe fb32 	bl	8007754 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d10a      	bne.n	800910e <prvAddCurrentTaskToDelayedList+0x3a>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090fe:	4b1a      	ldr	r3, [pc, #104]	; (8009168 <prvAddCurrentTaskToDelayedList+0x94>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3304      	adds	r3, #4
 8009104:	4619      	mov	r1, r3
 8009106:	4819      	ldr	r0, [pc, #100]	; (800916c <prvAddCurrentTaskToDelayedList+0x98>)
 8009108:	f7fe fac7 	bl	800769a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800910c:	e026      	b.n	800915c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4413      	add	r3, r2
 8009114:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <prvAddCurrentTaskToDelayedList+0x94>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	429a      	cmp	r2, r3
 8009124:	d209      	bcs.n	800913a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009126:	4b12      	ldr	r3, [pc, #72]	; (8009170 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	4b0f      	ldr	r3, [pc, #60]	; (8009168 <prvAddCurrentTaskToDelayedList+0x94>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3304      	adds	r3, #4
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f7fe fad5 	bl	80076e2 <vListInsert>
}
 8009138:	e010      	b.n	800915c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800913a:	4b0e      	ldr	r3, [pc, #56]	; (8009174 <prvAddCurrentTaskToDelayedList+0xa0>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <prvAddCurrentTaskToDelayedList+0x94>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f7fe facb 	bl	80076e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <prvAddCurrentTaskToDelayedList+0xa4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	429a      	cmp	r2, r3
 8009154:	d202      	bcs.n	800915c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009156:	4a08      	ldr	r2, [pc, #32]	; (8009178 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	6013      	str	r3, [r2, #0]
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000da0 	.word	0x20000da0
 8009168:	200008c8 	.word	0x200008c8
 800916c:	20000d88 	.word	0x20000d88
 8009170:	20000d58 	.word	0x20000d58
 8009174:	20000d54 	.word	0x20000d54
 8009178:	20000dbc 	.word	0x20000dbc

0800917c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	; 0x28
 8009180:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009186:	f000 fb07 	bl	8009798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800918a:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <xTimerCreateTimerTask+0x80>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d021      	beq.n	80091d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009196:	2300      	movs	r3, #0
 8009198:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800919a:	1d3a      	adds	r2, r7, #4
 800919c:	f107 0108 	add.w	r1, r7, #8
 80091a0:	f107 030c 	add.w	r3, r7, #12
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fa31 	bl	800760c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	9202      	str	r2, [sp, #8]
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	2302      	movs	r3, #2
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	2300      	movs	r3, #0
 80091ba:	460a      	mov	r2, r1
 80091bc:	4910      	ldr	r1, [pc, #64]	; (8009200 <xTimerCreateTimerTask+0x84>)
 80091be:	4811      	ldr	r0, [pc, #68]	; (8009204 <xTimerCreateTimerTask+0x88>)
 80091c0:	f7fe ffde 	bl	8008180 <xTaskCreateStatic>
 80091c4:	4603      	mov	r3, r0
 80091c6:	4a10      	ldr	r2, [pc, #64]	; (8009208 <xTimerCreateTimerTask+0x8c>)
 80091c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091ca:	4b0f      	ldr	r3, [pc, #60]	; (8009208 <xTimerCreateTimerTask+0x8c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091d2:	2301      	movs	r3, #1
 80091d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10a      	bne.n	80091f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	613b      	str	r3, [r7, #16]
}
 80091ee:	bf00      	nop
 80091f0:	e7fe      	b.n	80091f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091f2:	697b      	ldr	r3, [r7, #20]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	20000df8 	.word	0x20000df8
 8009200:	0800d058 	.word	0x0800d058
 8009204:	08009341 	.word	0x08009341
 8009208:	20000dfc 	.word	0x20000dfc

0800920c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08a      	sub	sp, #40	; 0x28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800921a:	2300      	movs	r3, #0
 800921c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	623b      	str	r3, [r7, #32]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800923a:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <xTimerGenericCommand+0x98>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d02a      	beq.n	8009298 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2b05      	cmp	r3, #5
 8009252:	dc18      	bgt.n	8009286 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009254:	f7ff fdb2 	bl	8008dbc <xTaskGetSchedulerState>
 8009258:	4603      	mov	r3, r0
 800925a:	2b02      	cmp	r3, #2
 800925c:	d109      	bne.n	8009272 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800925e:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <xTimerGenericCommand+0x98>)
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	f107 0110 	add.w	r1, r7, #16
 8009266:	2300      	movs	r3, #0
 8009268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926a:	f7fe fba1 	bl	80079b0 <xQueueGenericSend>
 800926e:	6278      	str	r0, [r7, #36]	; 0x24
 8009270:	e012      	b.n	8009298 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009272:	4b0c      	ldr	r3, [pc, #48]	; (80092a4 <xTimerGenericCommand+0x98>)
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f107 0110 	add.w	r1, r7, #16
 800927a:	2300      	movs	r3, #0
 800927c:	2200      	movs	r2, #0
 800927e:	f7fe fb97 	bl	80079b0 <xQueueGenericSend>
 8009282:	6278      	str	r0, [r7, #36]	; 0x24
 8009284:	e008      	b.n	8009298 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009286:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <xTimerGenericCommand+0x98>)
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	f107 0110 	add.w	r1, r7, #16
 800928e:	2300      	movs	r3, #0
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	f7fe fc8b 	bl	8007bac <xQueueGenericSendFromISR>
 8009296:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800929a:	4618      	mov	r0, r3
 800929c:	3728      	adds	r7, #40	; 0x28
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000df8 	.word	0x20000df8

080092a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b2:	4b22      	ldr	r3, [pc, #136]	; (800933c <prvProcessExpiredTimer+0x94>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	3304      	adds	r3, #4
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fa47 	bl	8007754 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d022      	beq.n	800931a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	699a      	ldr	r2, [r3, #24]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	18d1      	adds	r1, r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	6978      	ldr	r0, [r7, #20]
 80092e2:	f000 f8d1 	bl	8009488 <prvInsertTimerInActiveList>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01f      	beq.n	800932c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092ec:	2300      	movs	r3, #0
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	2300      	movs	r3, #0
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	2100      	movs	r1, #0
 80092f6:	6978      	ldr	r0, [r7, #20]
 80092f8:	f7ff ff88 	bl	800920c <xTimerGenericCommand>
 80092fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d113      	bne.n	800932c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	60fb      	str	r3, [r7, #12]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009320:	f023 0301 	bic.w	r3, r3, #1
 8009324:	b2da      	uxtb	r2, r3
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	6978      	ldr	r0, [r7, #20]
 8009332:	4798      	blx	r3
}
 8009334:	bf00      	nop
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000df0 	.word	0x20000df0

08009340 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009348:	f107 0308 	add.w	r3, r7, #8
 800934c:	4618      	mov	r0, r3
 800934e:	f000 f857 	bl	8009400 <prvGetNextExpireTime>
 8009352:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4619      	mov	r1, r3
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 f803 	bl	8009364 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800935e:	f000 f8d5 	bl	800950c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009362:	e7f1      	b.n	8009348 <prvTimerTask+0x8>

08009364 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800936e:	f7ff f943 	bl	80085f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009372:	f107 0308 	add.w	r3, r7, #8
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f866 	bl	8009448 <prvSampleTimeNow>
 800937c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d130      	bne.n	80093e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10a      	bne.n	80093a0 <prvProcessTimerOrBlockTask+0x3c>
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	429a      	cmp	r2, r3
 8009390:	d806      	bhi.n	80093a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009392:	f7ff f93f 	bl	8008614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009396:	68f9      	ldr	r1, [r7, #12]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff ff85 	bl	80092a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800939e:	e024      	b.n	80093ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d008      	beq.n	80093b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093a6:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <prvProcessTimerOrBlockTask+0x90>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <prvProcessTimerOrBlockTask+0x50>
 80093b0:	2301      	movs	r3, #1
 80093b2:	e000      	b.n	80093b6 <prvProcessTimerOrBlockTask+0x52>
 80093b4:	2300      	movs	r3, #0
 80093b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093b8:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <prvProcessTimerOrBlockTask+0x94>)
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f7fe fea7 	bl	8008118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093ca:	f7ff f923 	bl	8008614 <xTaskResumeAll>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093d4:	4b09      	ldr	r3, [pc, #36]	; (80093fc <prvProcessTimerOrBlockTask+0x98>)
 80093d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	f3bf 8f6f 	isb	sy
}
 80093e4:	e001      	b.n	80093ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093e6:	f7ff f915 	bl	8008614 <xTaskResumeAll>
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20000df4 	.word	0x20000df4
 80093f8:	20000df8 	.word	0x20000df8
 80093fc:	e000ed04 	.word	0xe000ed04

08009400 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009408:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <prvGetNextExpireTime+0x44>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <prvGetNextExpireTime+0x16>
 8009412:	2201      	movs	r2, #1
 8009414:	e000      	b.n	8009418 <prvGetNextExpireTime+0x18>
 8009416:	2200      	movs	r2, #0
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009424:	4b07      	ldr	r3, [pc, #28]	; (8009444 <prvGetNextExpireTime+0x44>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	e001      	b.n	8009434 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009434:	68fb      	ldr	r3, [r7, #12]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20000df0 	.word	0x20000df0

08009448 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009450:	f7ff f97e 	bl	8008750 <xTaskGetTickCount>
 8009454:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <prvSampleTimeNow+0x3c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	429a      	cmp	r2, r3
 800945e:	d205      	bcs.n	800946c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009460:	f000 f936 	bl	80096d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	e002      	b.n	8009472 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009472:	4a04      	ldr	r2, [pc, #16]	; (8009484 <prvSampleTimeNow+0x3c>)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009478:	68fb      	ldr	r3, [r7, #12]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000e00 	.word	0x20000e00

08009488 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d812      	bhi.n	80094d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d302      	bcc.n	80094c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094bc:	2301      	movs	r3, #1
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	e01b      	b.n	80094fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094c2:	4b10      	ldr	r3, [pc, #64]	; (8009504 <prvInsertTimerInActiveList+0x7c>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3304      	adds	r3, #4
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7fe f908 	bl	80076e2 <vListInsert>
 80094d2:	e012      	b.n	80094fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d206      	bcs.n	80094ea <prvInsertTimerInActiveList+0x62>
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d302      	bcc.n	80094ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094e4:	2301      	movs	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	e007      	b.n	80094fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094ea:	4b07      	ldr	r3, [pc, #28]	; (8009508 <prvInsertTimerInActiveList+0x80>)
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4619      	mov	r1, r3
 80094f4:	4610      	mov	r0, r2
 80094f6:	f7fe f8f4 	bl	80076e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094fa:	697b      	ldr	r3, [r7, #20]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20000df4 	.word	0x20000df4
 8009508:	20000df0 	.word	0x20000df0

0800950c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08e      	sub	sp, #56	; 0x38
 8009510:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009512:	e0ca      	b.n	80096aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	da18      	bge.n	800954c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800951a:	1d3b      	adds	r3, r7, #4
 800951c:	3304      	adds	r3, #4
 800951e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	61fb      	str	r3, [r7, #28]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009542:	6850      	ldr	r0, [r2, #4]
 8009544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009546:	6892      	ldr	r2, [r2, #8]
 8009548:	4611      	mov	r1, r2
 800954a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	f2c0 80aa 	blt.w	80096a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	3304      	adds	r3, #4
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe f8f5 	bl	8007754 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800956a:	463b      	mov	r3, r7
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff ff6b 	bl	8009448 <prvSampleTimeNow>
 8009572:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b09      	cmp	r3, #9
 8009578:	f200 8097 	bhi.w	80096aa <prvProcessReceivedCommands+0x19e>
 800957c:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <prvProcessReceivedCommands+0x78>)
 800957e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009582:	bf00      	nop
 8009584:	080095ad 	.word	0x080095ad
 8009588:	080095ad 	.word	0x080095ad
 800958c:	080095ad 	.word	0x080095ad
 8009590:	08009621 	.word	0x08009621
 8009594:	08009635 	.word	0x08009635
 8009598:	0800967f 	.word	0x0800967f
 800959c:	080095ad 	.word	0x080095ad
 80095a0:	080095ad 	.word	0x080095ad
 80095a4:	08009621 	.word	0x08009621
 80095a8:	08009635 	.word	0x08009635
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	18d1      	adds	r1, r2, r3
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095cc:	f7ff ff5c 	bl	8009488 <prvInsertTimerInActiveList>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d069      	beq.n	80096aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d05e      	beq.n	80096aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	441a      	add	r2, r3
 80095f4:	2300      	movs	r3, #0
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	2300      	movs	r3, #0
 80095fa:	2100      	movs	r1, #0
 80095fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095fe:	f7ff fe05 	bl	800920c <xTimerGenericCommand>
 8009602:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d14f      	bne.n	80096aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	61bb      	str	r3, [r7, #24]
}
 800961c:	bf00      	nop
 800961e:	e7fe      	b.n	800961e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009626:	f023 0301 	bic.w	r3, r3, #1
 800962a:	b2da      	uxtb	r2, r3
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009632:	e03a      	b.n	80096aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800963a:	f043 0301 	orr.w	r3, r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	617b      	str	r3, [r7, #20]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	18d1      	adds	r1, r2, r3
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009678:	f7ff ff06 	bl	8009488 <prvInsertTimerInActiveList>
					break;
 800967c:	e015      	b.n	80096aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d103      	bne.n	8009694 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800968c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968e:	f000 fbdf 	bl	8009e50 <vPortFree>
 8009692:	e00a      	b.n	80096aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800969a:	f023 0301 	bic.w	r3, r3, #1
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096a6:	e000      	b.n	80096aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80096a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096aa:	4b08      	ldr	r3, [pc, #32]	; (80096cc <prvProcessReceivedCommands+0x1c0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	1d39      	adds	r1, r7, #4
 80096b0:	2200      	movs	r2, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe fb16 	bl	8007ce4 <xQueueReceive>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f47f af2a 	bne.w	8009514 <prvProcessReceivedCommands+0x8>
	}
}
 80096c0:	bf00      	nop
 80096c2:	bf00      	nop
 80096c4:	3730      	adds	r7, #48	; 0x30
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000df8 	.word	0x20000df8

080096d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096d6:	e048      	b.n	800976a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d8:	4b2d      	ldr	r3, [pc, #180]	; (8009790 <prvSwitchTimerLists+0xc0>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e2:	4b2b      	ldr	r3, [pc, #172]	; (8009790 <prvSwitchTimerLists+0xc0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe f82f 	bl	8007754 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d02e      	beq.n	800976a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4413      	add	r3, r2
 8009714:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	429a      	cmp	r2, r3
 800971c:	d90e      	bls.n	800973c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800972a:	4b19      	ldr	r3, [pc, #100]	; (8009790 <prvSwitchTimerLists+0xc0>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3304      	adds	r3, #4
 8009732:	4619      	mov	r1, r3
 8009734:	4610      	mov	r0, r2
 8009736:	f7fd ffd4 	bl	80076e2 <vListInsert>
 800973a:	e016      	b.n	800976a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800973c:	2300      	movs	r3, #0
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	2300      	movs	r3, #0
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	2100      	movs	r1, #0
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff fd60 	bl	800920c <xTimerGenericCommand>
 800974c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10a      	bne.n	800976a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	603b      	str	r3, [r7, #0]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <prvSwitchTimerLists+0xc0>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1b1      	bne.n	80096d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009774:	4b06      	ldr	r3, [pc, #24]	; (8009790 <prvSwitchTimerLists+0xc0>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800977a:	4b06      	ldr	r3, [pc, #24]	; (8009794 <prvSwitchTimerLists+0xc4>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a04      	ldr	r2, [pc, #16]	; (8009790 <prvSwitchTimerLists+0xc0>)
 8009780:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009782:	4a04      	ldr	r2, [pc, #16]	; (8009794 <prvSwitchTimerLists+0xc4>)
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6013      	str	r3, [r2, #0]
}
 8009788:	bf00      	nop
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20000df0 	.word	0x20000df0
 8009794:	20000df4 	.word	0x20000df4

08009798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800979e:	f000 f969 	bl	8009a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097a2:	4b15      	ldr	r3, [pc, #84]	; (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d120      	bne.n	80097ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097aa:	4814      	ldr	r0, [pc, #80]	; (80097fc <prvCheckForValidListAndQueue+0x64>)
 80097ac:	f7fd ff48 	bl	8007640 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097b0:	4813      	ldr	r0, [pc, #76]	; (8009800 <prvCheckForValidListAndQueue+0x68>)
 80097b2:	f7fd ff45 	bl	8007640 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097b6:	4b13      	ldr	r3, [pc, #76]	; (8009804 <prvCheckForValidListAndQueue+0x6c>)
 80097b8:	4a10      	ldr	r2, [pc, #64]	; (80097fc <prvCheckForValidListAndQueue+0x64>)
 80097ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097bc:	4b12      	ldr	r3, [pc, #72]	; (8009808 <prvCheckForValidListAndQueue+0x70>)
 80097be:	4a10      	ldr	r2, [pc, #64]	; (8009800 <prvCheckForValidListAndQueue+0x68>)
 80097c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097c2:	2300      	movs	r3, #0
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	4b11      	ldr	r3, [pc, #68]	; (800980c <prvCheckForValidListAndQueue+0x74>)
 80097c8:	4a11      	ldr	r2, [pc, #68]	; (8009810 <prvCheckForValidListAndQueue+0x78>)
 80097ca:	2110      	movs	r1, #16
 80097cc:	200a      	movs	r0, #10
 80097ce:	f7fe f853 	bl	8007878 <xQueueGenericCreateStatic>
 80097d2:	4603      	mov	r3, r0
 80097d4:	4a08      	ldr	r2, [pc, #32]	; (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <prvCheckForValidListAndQueue+0x60>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	490b      	ldr	r1, [pc, #44]	; (8009814 <prvCheckForValidListAndQueue+0x7c>)
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fc6c 	bl	80080c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097ec:	f000 f972 	bl	8009ad4 <vPortExitCritical>
}
 80097f0:	bf00      	nop
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000df8 	.word	0x20000df8
 80097fc:	20000dc8 	.word	0x20000dc8
 8009800:	20000ddc 	.word	0x20000ddc
 8009804:	20000df0 	.word	0x20000df0
 8009808:	20000df4 	.word	0x20000df4
 800980c:	20000ea4 	.word	0x20000ea4
 8009810:	20000e04 	.word	0x20000e04
 8009814:	0800d060 	.word	0x0800d060

08009818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3b04      	subs	r3, #4
 8009828:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3b04      	subs	r3, #4
 8009836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f023 0201 	bic.w	r2, r3, #1
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3b04      	subs	r3, #4
 8009846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009848:	4a0c      	ldr	r2, [pc, #48]	; (800987c <pxPortInitialiseStack+0x64>)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3b14      	subs	r3, #20
 8009852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3b04      	subs	r3, #4
 800985e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f06f 0202 	mvn.w	r2, #2
 8009866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3b20      	subs	r3, #32
 800986c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800986e:	68fb      	ldr	r3, [r7, #12]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	08009881 	.word	0x08009881

08009880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800988a:	4b12      	ldr	r3, [pc, #72]	; (80098d4 <prvTaskExitError+0x54>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009892:	d00a      	beq.n	80098aa <prvTaskExitError+0x2a>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	60fb      	str	r3, [r7, #12]
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <prvTaskExitError+0x28>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	60bb      	str	r3, [r7, #8]
}
 80098bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098be:	bf00      	nop
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0fc      	beq.n	80098c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098c6:	bf00      	nop
 80098c8:	bf00      	nop
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	20000010 	.word	0x20000010
	...

080098e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098e0:	4b07      	ldr	r3, [pc, #28]	; (8009900 <pxCurrentTCBConst2>)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f380 8809 	msr	PSP, r0
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	4770      	bx	lr
 80098fc:	f3af 8000 	nop.w

08009900 <pxCurrentTCBConst2>:
 8009900:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009908:	4808      	ldr	r0, [pc, #32]	; (800992c <prvPortStartFirstTask+0x24>)
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	6800      	ldr	r0, [r0, #0]
 800990e:	f380 8808 	msr	MSP, r0
 8009912:	f04f 0000 	mov.w	r0, #0
 8009916:	f380 8814 	msr	CONTROL, r0
 800991a:	b662      	cpsie	i
 800991c:	b661      	cpsie	f
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	df00      	svc	0
 8009928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800992a:	bf00      	nop
 800992c:	e000ed08 	.word	0xe000ed08

08009930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009936:	4b46      	ldr	r3, [pc, #280]	; (8009a50 <xPortStartScheduler+0x120>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a46      	ldr	r2, [pc, #280]	; (8009a54 <xPortStartScheduler+0x124>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10a      	bne.n	8009956 <xPortStartScheduler+0x26>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	613b      	str	r3, [r7, #16]
}
 8009952:	bf00      	nop
 8009954:	e7fe      	b.n	8009954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009956:	4b3e      	ldr	r3, [pc, #248]	; (8009a50 <xPortStartScheduler+0x120>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a3f      	ldr	r2, [pc, #252]	; (8009a58 <xPortStartScheduler+0x128>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d10a      	bne.n	8009976 <xPortStartScheduler+0x46>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	60fb      	str	r3, [r7, #12]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009976:	4b39      	ldr	r3, [pc, #228]	; (8009a5c <xPortStartScheduler+0x12c>)
 8009978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	22ff      	movs	r2, #255	; 0xff
 8009986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009998:	b2da      	uxtb	r2, r3
 800999a:	4b31      	ldr	r3, [pc, #196]	; (8009a60 <xPortStartScheduler+0x130>)
 800999c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800999e:	4b31      	ldr	r3, [pc, #196]	; (8009a64 <xPortStartScheduler+0x134>)
 80099a0:	2207      	movs	r2, #7
 80099a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099a4:	e009      	b.n	80099ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80099a6:	4b2f      	ldr	r3, [pc, #188]	; (8009a64 <xPortStartScheduler+0x134>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	4a2d      	ldr	r2, [pc, #180]	; (8009a64 <xPortStartScheduler+0x134>)
 80099ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	2b80      	cmp	r3, #128	; 0x80
 80099c4:	d0ef      	beq.n	80099a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099c6:	4b27      	ldr	r3, [pc, #156]	; (8009a64 <xPortStartScheduler+0x134>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f1c3 0307 	rsb	r3, r3, #7
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d00a      	beq.n	80099e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	60bb      	str	r3, [r7, #8]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099e8:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <xPortStartScheduler+0x134>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	4a1d      	ldr	r2, [pc, #116]	; (8009a64 <xPortStartScheduler+0x134>)
 80099f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099f2:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <xPortStartScheduler+0x134>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <xPortStartScheduler+0x134>)
 80099fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a06:	4b18      	ldr	r3, [pc, #96]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a14      	ldr	r2, [pc, #80]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a1e:	f000 f8dd 	bl	8009bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a22:	4b12      	ldr	r3, [pc, #72]	; (8009a6c <xPortStartScheduler+0x13c>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a28:	f000 f8fc 	bl	8009c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a2c:	4b10      	ldr	r3, [pc, #64]	; (8009a70 <xPortStartScheduler+0x140>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0f      	ldr	r2, [pc, #60]	; (8009a70 <xPortStartScheduler+0x140>)
 8009a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a38:	f7ff ff66 	bl	8009908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a3c:	f7fe ff52 	bl	80088e4 <vTaskSwitchContext>
	prvTaskExitError();
 8009a40:	f7ff ff1e 	bl	8009880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	e000ed00 	.word	0xe000ed00
 8009a54:	410fc271 	.word	0x410fc271
 8009a58:	410fc270 	.word	0x410fc270
 8009a5c:	e000e400 	.word	0xe000e400
 8009a60:	20000ef4 	.word	0x20000ef4
 8009a64:	20000ef8 	.word	0x20000ef8
 8009a68:	e000ed20 	.word	0xe000ed20
 8009a6c:	20000010 	.word	0x20000010
 8009a70:	e000ef34 	.word	0xe000ef34

08009a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	607b      	str	r3, [r7, #4]
}
 8009a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <vPortEnterCritical+0x58>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3301      	adds	r3, #1
 8009a94:	4a0d      	ldr	r2, [pc, #52]	; (8009acc <vPortEnterCritical+0x58>)
 8009a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a98:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <vPortEnterCritical+0x58>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10f      	bne.n	8009ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <vPortEnterCritical+0x5c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	603b      	str	r3, [r7, #0]
}
 8009abc:	bf00      	nop
 8009abe:	e7fe      	b.n	8009abe <vPortEnterCritical+0x4a>
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	20000010 	.word	0x20000010
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ada:	4b12      	ldr	r3, [pc, #72]	; (8009b24 <vPortExitCritical+0x50>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <vPortExitCritical+0x24>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	607b      	str	r3, [r7, #4]
}
 8009af4:	bf00      	nop
 8009af6:	e7fe      	b.n	8009af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009af8:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <vPortExitCritical+0x50>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <vPortExitCritical+0x50>)
 8009b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <vPortExitCritical+0x50>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <vPortExitCritical+0x42>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	f383 8811 	msr	BASEPRI, r3
}
 8009b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b16:	bf00      	nop
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	20000010 	.word	0x20000010
	...

08009b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b30:	f3ef 8009 	mrs	r0, PSP
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <pxCurrentTCBConst>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f01e 0f10 	tst.w	lr, #16
 8009b40:	bf08      	it	eq
 8009b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	6010      	str	r0, [r2, #0]
 8009b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b54:	f380 8811 	msr	BASEPRI, r0
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f7fe fec0 	bl	80088e4 <vTaskSwitchContext>
 8009b64:	f04f 0000 	mov.w	r0, #0
 8009b68:	f380 8811 	msr	BASEPRI, r0
 8009b6c:	bc09      	pop	{r0, r3}
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b76:	f01e 0f10 	tst.w	lr, #16
 8009b7a:	bf08      	it	eq
 8009b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b80:	f380 8809 	msr	PSP, r0
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w

08009b90 <pxCurrentTCBConst>:
 8009b90:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop

08009b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	607b      	str	r3, [r7, #4]
}
 8009bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bb2:	f7fe fddd 	bl	8008770 <xTaskIncrementTick>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bbc:	4b06      	ldr	r3, [pc, #24]	; (8009bd8 <xPortSysTickHandler+0x40>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	f383 8811 	msr	BASEPRI, r3
}
 8009bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009be6:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <vPortSetupTimerInterrupt+0x38>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bec:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <vPortSetupTimerInterrupt+0x3c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0a      	ldr	r2, [pc, #40]	; (8009c1c <vPortSetupTimerInterrupt+0x40>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	099b      	lsrs	r3, r3, #6
 8009bf8:	4a09      	ldr	r2, [pc, #36]	; (8009c20 <vPortSetupTimerInterrupt+0x44>)
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009c00:	2207      	movs	r2, #7
 8009c02:	601a      	str	r2, [r3, #0]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	e000e010 	.word	0xe000e010
 8009c14:	e000e018 	.word	0xe000e018
 8009c18:	20000004 	.word	0x20000004
 8009c1c:	10624dd3 	.word	0x10624dd3
 8009c20:	e000e014 	.word	0xe000e014

08009c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c34 <vPortEnableVFP+0x10>
 8009c28:	6801      	ldr	r1, [r0, #0]
 8009c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c2e:	6001      	str	r1, [r0, #0]
 8009c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c32:	bf00      	nop
 8009c34:	e000ed88 	.word	0xe000ed88

08009c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d914      	bls.n	8009c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c4a:	4a17      	ldr	r2, [pc, #92]	; (8009ca8 <vPortValidateInterruptPriority+0x70>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c54:	4b15      	ldr	r3, [pc, #84]	; (8009cac <vPortValidateInterruptPriority+0x74>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	7afa      	ldrb	r2, [r7, #11]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d20a      	bcs.n	8009c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <vPortValidateInterruptPriority+0x78>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c7c:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <vPortValidateInterruptPriority+0x7c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d90a      	bls.n	8009c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	603b      	str	r3, [r7, #0]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <vPortValidateInterruptPriority+0x60>
	}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	e000e3f0 	.word	0xe000e3f0
 8009cac:	20000ef4 	.word	0x20000ef4
 8009cb0:	e000ed0c 	.word	0xe000ed0c
 8009cb4:	20000ef8 	.word	0x20000ef8

08009cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08a      	sub	sp, #40	; 0x28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cc4:	f7fe fc98 	bl	80085f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009cc8:	4b5b      	ldr	r3, [pc, #364]	; (8009e38 <pvPortMalloc+0x180>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cd0:	f000 f920 	bl	8009f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cd4:	4b59      	ldr	r3, [pc, #356]	; (8009e3c <pvPortMalloc+0x184>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4013      	ands	r3, r2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f040 8093 	bne.w	8009e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01d      	beq.n	8009d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ce8:	2208      	movs	r2, #8
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d014      	beq.n	8009d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f023 0307 	bic.w	r3, r3, #7
 8009d00:	3308      	adds	r3, #8
 8009d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <pvPortMalloc+0x6c>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	617b      	str	r3, [r7, #20]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d06e      	beq.n	8009e08 <pvPortMalloc+0x150>
 8009d2a:	4b45      	ldr	r3, [pc, #276]	; (8009e40 <pvPortMalloc+0x188>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d869      	bhi.n	8009e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d34:	4b43      	ldr	r3, [pc, #268]	; (8009e44 <pvPortMalloc+0x18c>)
 8009d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d38:	4b42      	ldr	r3, [pc, #264]	; (8009e44 <pvPortMalloc+0x18c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d3e:	e004      	b.n	8009d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d903      	bls.n	8009d5c <pvPortMalloc+0xa4>
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f1      	bne.n	8009d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d5c:	4b36      	ldr	r3, [pc, #216]	; (8009e38 <pvPortMalloc+0x180>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d050      	beq.n	8009e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2208      	movs	r2, #8
 8009d6c:	4413      	add	r3, r2
 8009d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	2308      	movs	r3, #8
 8009d82:	005b      	lsls	r3, r3, #1
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d91f      	bls.n	8009dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <pvPortMalloc+0xf8>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	613b      	str	r3, [r7, #16]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	1ad2      	subs	r2, r2, r3
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009dc2:	69b8      	ldr	r0, [r7, #24]
 8009dc4:	f000 f908 	bl	8009fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dc8:	4b1d      	ldr	r3, [pc, #116]	; (8009e40 <pvPortMalloc+0x188>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	4a1b      	ldr	r2, [pc, #108]	; (8009e40 <pvPortMalloc+0x188>)
 8009dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dd6:	4b1a      	ldr	r3, [pc, #104]	; (8009e40 <pvPortMalloc+0x188>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	4b1b      	ldr	r3, [pc, #108]	; (8009e48 <pvPortMalloc+0x190>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d203      	bcs.n	8009dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009de2:	4b17      	ldr	r3, [pc, #92]	; (8009e40 <pvPortMalloc+0x188>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a18      	ldr	r2, [pc, #96]	; (8009e48 <pvPortMalloc+0x190>)
 8009de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <pvPortMalloc+0x184>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	431a      	orrs	r2, r3
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009dfe:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <pvPortMalloc+0x194>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3301      	adds	r3, #1
 8009e04:	4a11      	ldr	r2, [pc, #68]	; (8009e4c <pvPortMalloc+0x194>)
 8009e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e08:	f7fe fc04 	bl	8008614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <pvPortMalloc+0x174>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	60fb      	str	r3, [r7, #12]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <pvPortMalloc+0x172>
	return pvReturn;
 8009e2c:	69fb      	ldr	r3, [r7, #28]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3728      	adds	r7, #40	; 0x28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20004b04 	.word	0x20004b04
 8009e3c:	20004b18 	.word	0x20004b18
 8009e40:	20004b08 	.word	0x20004b08
 8009e44:	20004afc 	.word	0x20004afc
 8009e48:	20004b0c 	.word	0x20004b0c
 8009e4c:	20004b10 	.word	0x20004b10

08009e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d04d      	beq.n	8009efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e62:	2308      	movs	r3, #8
 8009e64:	425b      	negs	r3, r3
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	4413      	add	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	4b24      	ldr	r3, [pc, #144]	; (8009f08 <vPortFree+0xb8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4013      	ands	r3, r2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <vPortFree+0x44>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	60fb      	str	r3, [r7, #12]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00a      	beq.n	8009eb2 <vPortFree+0x62>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	60bb      	str	r3, [r7, #8]
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	4b14      	ldr	r3, [pc, #80]	; (8009f08 <vPortFree+0xb8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01e      	beq.n	8009efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d11a      	bne.n	8009efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	4b0e      	ldr	r3, [pc, #56]	; (8009f08 <vPortFree+0xb8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	43db      	mvns	r3, r3
 8009ed2:	401a      	ands	r2, r3
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ed8:	f7fe fb8e 	bl	80085f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <vPortFree+0xbc>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	4a09      	ldr	r2, [pc, #36]	; (8009f0c <vPortFree+0xbc>)
 8009ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eea:	6938      	ldr	r0, [r7, #16]
 8009eec:	f000 f874 	bl	8009fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <vPortFree+0xc0>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	4a06      	ldr	r2, [pc, #24]	; (8009f10 <vPortFree+0xc0>)
 8009ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009efa:	f7fe fb8b 	bl	8008614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009efe:	bf00      	nop
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20004b18 	.word	0x20004b18
 8009f0c:	20004b08 	.word	0x20004b08
 8009f10:	20004b14 	.word	0x20004b14

08009f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f20:	4b27      	ldr	r3, [pc, #156]	; (8009fc0 <prvHeapInit+0xac>)
 8009f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00c      	beq.n	8009f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3307      	adds	r3, #7
 8009f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 0307 	bic.w	r3, r3, #7
 8009f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	4a1f      	ldr	r2, [pc, #124]	; (8009fc0 <prvHeapInit+0xac>)
 8009f44:	4413      	add	r3, r2
 8009f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f4c:	4a1d      	ldr	r2, [pc, #116]	; (8009fc4 <prvHeapInit+0xb0>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f52:	4b1c      	ldr	r3, [pc, #112]	; (8009fc4 <prvHeapInit+0xb0>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f60:	2208      	movs	r2, #8
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 0307 	bic.w	r3, r3, #7
 8009f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4a15      	ldr	r2, [pc, #84]	; (8009fc8 <prvHeapInit+0xb4>)
 8009f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f76:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <prvHeapInit+0xb4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f7e:	4b12      	ldr	r3, [pc, #72]	; (8009fc8 <prvHeapInit+0xb4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f94:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <prvHeapInit+0xb4>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	4a0a      	ldr	r2, [pc, #40]	; (8009fcc <prvHeapInit+0xb8>)
 8009fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	4a09      	ldr	r2, [pc, #36]	; (8009fd0 <prvHeapInit+0xbc>)
 8009faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fac:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <prvHeapInit+0xc0>)
 8009fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fb2:	601a      	str	r2, [r3, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	20000efc 	.word	0x20000efc
 8009fc4:	20004afc 	.word	0x20004afc
 8009fc8:	20004b04 	.word	0x20004b04
 8009fcc:	20004b0c 	.word	0x20004b0c
 8009fd0:	20004b08 	.word	0x20004b08
 8009fd4:	20004b18 	.word	0x20004b18

08009fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fe0:	4b28      	ldr	r3, [pc, #160]	; (800a084 <prvInsertBlockIntoFreeList+0xac>)
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	e002      	b.n	8009fec <prvInsertBlockIntoFreeList+0x14>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d8f7      	bhi.n	8009fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	4413      	add	r3, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	429a      	cmp	r2, r3
 800a006:	d108      	bne.n	800a01a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	441a      	add	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	441a      	add	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d118      	bne.n	800a060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	4b15      	ldr	r3, [pc, #84]	; (800a088 <prvInsertBlockIntoFreeList+0xb0>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d00d      	beq.n	800a056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	441a      	add	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	e008      	b.n	800a068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <prvInsertBlockIntoFreeList+0xb0>)
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	e003      	b.n	800a068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d002      	beq.n	800a076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a076:	bf00      	nop
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20004afc 	.word	0x20004afc
 800a088:	20004b04 	.word	0x20004b04

0800a08c <__errno>:
 800a08c:	4b01      	ldr	r3, [pc, #4]	; (800a094 <__errno+0x8>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20000014 	.word	0x20000014

0800a098 <__libc_init_array>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	4d0d      	ldr	r5, [pc, #52]	; (800a0d0 <__libc_init_array+0x38>)
 800a09c:	4c0d      	ldr	r4, [pc, #52]	; (800a0d4 <__libc_init_array+0x3c>)
 800a09e:	1b64      	subs	r4, r4, r5
 800a0a0:	10a4      	asrs	r4, r4, #2
 800a0a2:	2600      	movs	r6, #0
 800a0a4:	42a6      	cmp	r6, r4
 800a0a6:	d109      	bne.n	800a0bc <__libc_init_array+0x24>
 800a0a8:	4d0b      	ldr	r5, [pc, #44]	; (800a0d8 <__libc_init_array+0x40>)
 800a0aa:	4c0c      	ldr	r4, [pc, #48]	; (800a0dc <__libc_init_array+0x44>)
 800a0ac:	f002 feb6 	bl	800ce1c <_init>
 800a0b0:	1b64      	subs	r4, r4, r5
 800a0b2:	10a4      	asrs	r4, r4, #2
 800a0b4:	2600      	movs	r6, #0
 800a0b6:	42a6      	cmp	r6, r4
 800a0b8:	d105      	bne.n	800a0c6 <__libc_init_array+0x2e>
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c0:	4798      	blx	r3
 800a0c2:	3601      	adds	r6, #1
 800a0c4:	e7ee      	b.n	800a0a4 <__libc_init_array+0xc>
 800a0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ca:	4798      	blx	r3
 800a0cc:	3601      	adds	r6, #1
 800a0ce:	e7f2      	b.n	800a0b6 <__libc_init_array+0x1e>
 800a0d0:	0800d508 	.word	0x0800d508
 800a0d4:	0800d508 	.word	0x0800d508
 800a0d8:	0800d508 	.word	0x0800d508
 800a0dc:	0800d50c 	.word	0x0800d50c

0800a0e0 <memcpy>:
 800a0e0:	440a      	add	r2, r1
 800a0e2:	4291      	cmp	r1, r2
 800a0e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0e8:	d100      	bne.n	800a0ec <memcpy+0xc>
 800a0ea:	4770      	bx	lr
 800a0ec:	b510      	push	{r4, lr}
 800a0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0f6:	4291      	cmp	r1, r2
 800a0f8:	d1f9      	bne.n	800a0ee <memcpy+0xe>
 800a0fa:	bd10      	pop	{r4, pc}

0800a0fc <memset>:
 800a0fc:	4402      	add	r2, r0
 800a0fe:	4603      	mov	r3, r0
 800a100:	4293      	cmp	r3, r2
 800a102:	d100      	bne.n	800a106 <memset+0xa>
 800a104:	4770      	bx	lr
 800a106:	f803 1b01 	strb.w	r1, [r3], #1
 800a10a:	e7f9      	b.n	800a100 <memset+0x4>

0800a10c <__cvt>:
 800a10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	ec55 4b10 	vmov	r4, r5, d0
 800a114:	2d00      	cmp	r5, #0
 800a116:	460e      	mov	r6, r1
 800a118:	4619      	mov	r1, r3
 800a11a:	462b      	mov	r3, r5
 800a11c:	bfbb      	ittet	lt
 800a11e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a122:	461d      	movlt	r5, r3
 800a124:	2300      	movge	r3, #0
 800a126:	232d      	movlt	r3, #45	; 0x2d
 800a128:	700b      	strb	r3, [r1, #0]
 800a12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a12c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a130:	4691      	mov	r9, r2
 800a132:	f023 0820 	bic.w	r8, r3, #32
 800a136:	bfbc      	itt	lt
 800a138:	4622      	movlt	r2, r4
 800a13a:	4614      	movlt	r4, r2
 800a13c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a140:	d005      	beq.n	800a14e <__cvt+0x42>
 800a142:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a146:	d100      	bne.n	800a14a <__cvt+0x3e>
 800a148:	3601      	adds	r6, #1
 800a14a:	2102      	movs	r1, #2
 800a14c:	e000      	b.n	800a150 <__cvt+0x44>
 800a14e:	2103      	movs	r1, #3
 800a150:	ab03      	add	r3, sp, #12
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	ab02      	add	r3, sp, #8
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	ec45 4b10 	vmov	d0, r4, r5
 800a15c:	4653      	mov	r3, sl
 800a15e:	4632      	mov	r2, r6
 800a160:	f000 fd0a 	bl	800ab78 <_dtoa_r>
 800a164:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a168:	4607      	mov	r7, r0
 800a16a:	d102      	bne.n	800a172 <__cvt+0x66>
 800a16c:	f019 0f01 	tst.w	r9, #1
 800a170:	d022      	beq.n	800a1b8 <__cvt+0xac>
 800a172:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a176:	eb07 0906 	add.w	r9, r7, r6
 800a17a:	d110      	bne.n	800a19e <__cvt+0x92>
 800a17c:	783b      	ldrb	r3, [r7, #0]
 800a17e:	2b30      	cmp	r3, #48	; 0x30
 800a180:	d10a      	bne.n	800a198 <__cvt+0x8c>
 800a182:	2200      	movs	r2, #0
 800a184:	2300      	movs	r3, #0
 800a186:	4620      	mov	r0, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 fca5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a18e:	b918      	cbnz	r0, 800a198 <__cvt+0x8c>
 800a190:	f1c6 0601 	rsb	r6, r6, #1
 800a194:	f8ca 6000 	str.w	r6, [sl]
 800a198:	f8da 3000 	ldr.w	r3, [sl]
 800a19c:	4499      	add	r9, r3
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f7f6 fc97 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1aa:	b108      	cbz	r0, 800a1b0 <__cvt+0xa4>
 800a1ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1b0:	2230      	movs	r2, #48	; 0x30
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	454b      	cmp	r3, r9
 800a1b6:	d307      	bcc.n	800a1c8 <__cvt+0xbc>
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1bc:	1bdb      	subs	r3, r3, r7
 800a1be:	4638      	mov	r0, r7
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	b004      	add	sp, #16
 800a1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c8:	1c59      	adds	r1, r3, #1
 800a1ca:	9103      	str	r1, [sp, #12]
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	e7f0      	b.n	800a1b2 <__cvt+0xa6>

0800a1d0 <__exponent>:
 800a1d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	bfb8      	it	lt
 800a1d8:	4249      	neglt	r1, r1
 800a1da:	f803 2b02 	strb.w	r2, [r3], #2
 800a1de:	bfb4      	ite	lt
 800a1e0:	222d      	movlt	r2, #45	; 0x2d
 800a1e2:	222b      	movge	r2, #43	; 0x2b
 800a1e4:	2909      	cmp	r1, #9
 800a1e6:	7042      	strb	r2, [r0, #1]
 800a1e8:	dd2a      	ble.n	800a240 <__exponent+0x70>
 800a1ea:	f10d 0407 	add.w	r4, sp, #7
 800a1ee:	46a4      	mov	ip, r4
 800a1f0:	270a      	movs	r7, #10
 800a1f2:	46a6      	mov	lr, r4
 800a1f4:	460a      	mov	r2, r1
 800a1f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a1fa:	fb07 1516 	mls	r5, r7, r6, r1
 800a1fe:	3530      	adds	r5, #48	; 0x30
 800a200:	2a63      	cmp	r2, #99	; 0x63
 800a202:	f104 34ff 	add.w	r4, r4, #4294967295
 800a206:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a20a:	4631      	mov	r1, r6
 800a20c:	dcf1      	bgt.n	800a1f2 <__exponent+0x22>
 800a20e:	3130      	adds	r1, #48	; 0x30
 800a210:	f1ae 0502 	sub.w	r5, lr, #2
 800a214:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a218:	1c44      	adds	r4, r0, #1
 800a21a:	4629      	mov	r1, r5
 800a21c:	4561      	cmp	r1, ip
 800a21e:	d30a      	bcc.n	800a236 <__exponent+0x66>
 800a220:	f10d 0209 	add.w	r2, sp, #9
 800a224:	eba2 020e 	sub.w	r2, r2, lr
 800a228:	4565      	cmp	r5, ip
 800a22a:	bf88      	it	hi
 800a22c:	2200      	movhi	r2, #0
 800a22e:	4413      	add	r3, r2
 800a230:	1a18      	subs	r0, r3, r0
 800a232:	b003      	add	sp, #12
 800a234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a23a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a23e:	e7ed      	b.n	800a21c <__exponent+0x4c>
 800a240:	2330      	movs	r3, #48	; 0x30
 800a242:	3130      	adds	r1, #48	; 0x30
 800a244:	7083      	strb	r3, [r0, #2]
 800a246:	70c1      	strb	r1, [r0, #3]
 800a248:	1d03      	adds	r3, r0, #4
 800a24a:	e7f1      	b.n	800a230 <__exponent+0x60>

0800a24c <_printf_float>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	ed2d 8b02 	vpush	{d8}
 800a254:	b08d      	sub	sp, #52	; 0x34
 800a256:	460c      	mov	r4, r1
 800a258:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a25c:	4616      	mov	r6, r2
 800a25e:	461f      	mov	r7, r3
 800a260:	4605      	mov	r5, r0
 800a262:	f001 fa87 	bl	800b774 <_localeconv_r>
 800a266:	f8d0 a000 	ldr.w	sl, [r0]
 800a26a:	4650      	mov	r0, sl
 800a26c:	f7f5 ffb8 	bl	80001e0 <strlen>
 800a270:	2300      	movs	r3, #0
 800a272:	930a      	str	r3, [sp, #40]	; 0x28
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	f8d8 3000 	ldr.w	r3, [r8]
 800a27c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a280:	3307      	adds	r3, #7
 800a282:	f023 0307 	bic.w	r3, r3, #7
 800a286:	f103 0208 	add.w	r2, r3, #8
 800a28a:	f8c8 2000 	str.w	r2, [r8]
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a296:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a29a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a29e:	9307      	str	r3, [sp, #28]
 800a2a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2a4:	ee08 0a10 	vmov	s16, r0
 800a2a8:	4b9f      	ldr	r3, [pc, #636]	; (800a528 <_printf_float+0x2dc>)
 800a2aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b2:	f7f6 fc43 	bl	8000b3c <__aeabi_dcmpun>
 800a2b6:	bb88      	cbnz	r0, 800a31c <_printf_float+0xd0>
 800a2b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2bc:	4b9a      	ldr	r3, [pc, #616]	; (800a528 <_printf_float+0x2dc>)
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c2:	f7f6 fc1d 	bl	8000b00 <__aeabi_dcmple>
 800a2c6:	bb48      	cbnz	r0, 800a31c <_printf_float+0xd0>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f6 fc0c 	bl	8000aec <__aeabi_dcmplt>
 800a2d4:	b110      	cbz	r0, 800a2dc <_printf_float+0x90>
 800a2d6:	232d      	movs	r3, #45	; 0x2d
 800a2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2dc:	4b93      	ldr	r3, [pc, #588]	; (800a52c <_printf_float+0x2e0>)
 800a2de:	4894      	ldr	r0, [pc, #592]	; (800a530 <_printf_float+0x2e4>)
 800a2e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2e4:	bf94      	ite	ls
 800a2e6:	4698      	movls	r8, r3
 800a2e8:	4680      	movhi	r8, r0
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	6123      	str	r3, [r4, #16]
 800a2ee:	9b05      	ldr	r3, [sp, #20]
 800a2f0:	f023 0204 	bic.w	r2, r3, #4
 800a2f4:	6022      	str	r2, [r4, #0]
 800a2f6:	f04f 0900 	mov.w	r9, #0
 800a2fa:	9700      	str	r7, [sp, #0]
 800a2fc:	4633      	mov	r3, r6
 800a2fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f9d8 	bl	800a6b8 <_printf_common>
 800a308:	3001      	adds	r0, #1
 800a30a:	f040 8090 	bne.w	800a42e <_printf_float+0x1e2>
 800a30e:	f04f 30ff 	mov.w	r0, #4294967295
 800a312:	b00d      	add	sp, #52	; 0x34
 800a314:	ecbd 8b02 	vpop	{d8}
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	4642      	mov	r2, r8
 800a31e:	464b      	mov	r3, r9
 800a320:	4640      	mov	r0, r8
 800a322:	4649      	mov	r1, r9
 800a324:	f7f6 fc0a 	bl	8000b3c <__aeabi_dcmpun>
 800a328:	b140      	cbz	r0, 800a33c <_printf_float+0xf0>
 800a32a:	464b      	mov	r3, r9
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bfbc      	itt	lt
 800a330:	232d      	movlt	r3, #45	; 0x2d
 800a332:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a336:	487f      	ldr	r0, [pc, #508]	; (800a534 <_printf_float+0x2e8>)
 800a338:	4b7f      	ldr	r3, [pc, #508]	; (800a538 <_printf_float+0x2ec>)
 800a33a:	e7d1      	b.n	800a2e0 <_printf_float+0x94>
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a342:	9206      	str	r2, [sp, #24]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	d13f      	bne.n	800a3c8 <_printf_float+0x17c>
 800a348:	2306      	movs	r3, #6
 800a34a:	6063      	str	r3, [r4, #4]
 800a34c:	9b05      	ldr	r3, [sp, #20]
 800a34e:	6861      	ldr	r1, [r4, #4]
 800a350:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a354:	2300      	movs	r3, #0
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	ab0a      	add	r3, sp, #40	; 0x28
 800a35a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a35e:	ab09      	add	r3, sp, #36	; 0x24
 800a360:	ec49 8b10 	vmov	d0, r8, r9
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a36c:	4628      	mov	r0, r5
 800a36e:	f7ff fecd 	bl	800a10c <__cvt>
 800a372:	9b06      	ldr	r3, [sp, #24]
 800a374:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a376:	2b47      	cmp	r3, #71	; 0x47
 800a378:	4680      	mov	r8, r0
 800a37a:	d108      	bne.n	800a38e <_printf_float+0x142>
 800a37c:	1cc8      	adds	r0, r1, #3
 800a37e:	db02      	blt.n	800a386 <_printf_float+0x13a>
 800a380:	6863      	ldr	r3, [r4, #4]
 800a382:	4299      	cmp	r1, r3
 800a384:	dd41      	ble.n	800a40a <_printf_float+0x1be>
 800a386:	f1ab 0b02 	sub.w	fp, fp, #2
 800a38a:	fa5f fb8b 	uxtb.w	fp, fp
 800a38e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a392:	d820      	bhi.n	800a3d6 <_printf_float+0x18a>
 800a394:	3901      	subs	r1, #1
 800a396:	465a      	mov	r2, fp
 800a398:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a39c:	9109      	str	r1, [sp, #36]	; 0x24
 800a39e:	f7ff ff17 	bl	800a1d0 <__exponent>
 800a3a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3a4:	1813      	adds	r3, r2, r0
 800a3a6:	2a01      	cmp	r2, #1
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	6123      	str	r3, [r4, #16]
 800a3ac:	dc02      	bgt.n	800a3b4 <_printf_float+0x168>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	07d2      	lsls	r2, r2, #31
 800a3b2:	d501      	bpl.n	800a3b8 <_printf_float+0x16c>
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d09c      	beq.n	800a2fa <_printf_float+0xae>
 800a3c0:	232d      	movs	r3, #45	; 0x2d
 800a3c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c6:	e798      	b.n	800a2fa <_printf_float+0xae>
 800a3c8:	9a06      	ldr	r2, [sp, #24]
 800a3ca:	2a47      	cmp	r2, #71	; 0x47
 800a3cc:	d1be      	bne.n	800a34c <_printf_float+0x100>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1bc      	bne.n	800a34c <_printf_float+0x100>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e7b9      	b.n	800a34a <_printf_float+0xfe>
 800a3d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3da:	d118      	bne.n	800a40e <_printf_float+0x1c2>
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	dd0b      	ble.n	800a3fa <_printf_float+0x1ae>
 800a3e2:	6121      	str	r1, [r4, #16]
 800a3e4:	b913      	cbnz	r3, 800a3ec <_printf_float+0x1a0>
 800a3e6:	6822      	ldr	r2, [r4, #0]
 800a3e8:	07d0      	lsls	r0, r2, #31
 800a3ea:	d502      	bpl.n	800a3f2 <_printf_float+0x1a6>
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	440b      	add	r3, r1
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3f4:	f04f 0900 	mov.w	r9, #0
 800a3f8:	e7de      	b.n	800a3b8 <_printf_float+0x16c>
 800a3fa:	b913      	cbnz	r3, 800a402 <_printf_float+0x1b6>
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	07d2      	lsls	r2, r2, #31
 800a400:	d501      	bpl.n	800a406 <_printf_float+0x1ba>
 800a402:	3302      	adds	r3, #2
 800a404:	e7f4      	b.n	800a3f0 <_printf_float+0x1a4>
 800a406:	2301      	movs	r3, #1
 800a408:	e7f2      	b.n	800a3f0 <_printf_float+0x1a4>
 800a40a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a410:	4299      	cmp	r1, r3
 800a412:	db05      	blt.n	800a420 <_printf_float+0x1d4>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	6121      	str	r1, [r4, #16]
 800a418:	07d8      	lsls	r0, r3, #31
 800a41a:	d5ea      	bpl.n	800a3f2 <_printf_float+0x1a6>
 800a41c:	1c4b      	adds	r3, r1, #1
 800a41e:	e7e7      	b.n	800a3f0 <_printf_float+0x1a4>
 800a420:	2900      	cmp	r1, #0
 800a422:	bfd4      	ite	le
 800a424:	f1c1 0202 	rsble	r2, r1, #2
 800a428:	2201      	movgt	r2, #1
 800a42a:	4413      	add	r3, r2
 800a42c:	e7e0      	b.n	800a3f0 <_printf_float+0x1a4>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	055a      	lsls	r2, r3, #21
 800a432:	d407      	bmi.n	800a444 <_printf_float+0x1f8>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	4642      	mov	r2, r8
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	d12c      	bne.n	800a49c <_printf_float+0x250>
 800a442:	e764      	b.n	800a30e <_printf_float+0xc2>
 800a444:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a448:	f240 80e0 	bls.w	800a60c <_printf_float+0x3c0>
 800a44c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a450:	2200      	movs	r2, #0
 800a452:	2300      	movs	r3, #0
 800a454:	f7f6 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d034      	beq.n	800a4c6 <_printf_float+0x27a>
 800a45c:	4a37      	ldr	r2, [pc, #220]	; (800a53c <_printf_float+0x2f0>)
 800a45e:	2301      	movs	r3, #1
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af51 	beq.w	800a30e <_printf_float+0xc2>
 800a46c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a470:	429a      	cmp	r2, r3
 800a472:	db02      	blt.n	800a47a <_printf_float+0x22e>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	07d8      	lsls	r0, r3, #31
 800a478:	d510      	bpl.n	800a49c <_printf_float+0x250>
 800a47a:	ee18 3a10 	vmov	r3, s16
 800a47e:	4652      	mov	r2, sl
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af41 	beq.w	800a30e <_printf_float+0xc2>
 800a48c:	f04f 0800 	mov.w	r8, #0
 800a490:	f104 091a 	add.w	r9, r4, #26
 800a494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a496:	3b01      	subs	r3, #1
 800a498:	4543      	cmp	r3, r8
 800a49a:	dc09      	bgt.n	800a4b0 <_printf_float+0x264>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	079b      	lsls	r3, r3, #30
 800a4a0:	f100 8105 	bmi.w	800a6ae <_printf_float+0x462>
 800a4a4:	68e0      	ldr	r0, [r4, #12]
 800a4a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a8:	4298      	cmp	r0, r3
 800a4aa:	bfb8      	it	lt
 800a4ac:	4618      	movlt	r0, r3
 800a4ae:	e730      	b.n	800a312 <_printf_float+0xc6>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	464a      	mov	r2, r9
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b8      	blx	r7
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f43f af27 	beq.w	800a30e <_printf_float+0xc2>
 800a4c0:	f108 0801 	add.w	r8, r8, #1
 800a4c4:	e7e6      	b.n	800a494 <_printf_float+0x248>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc39      	bgt.n	800a540 <_printf_float+0x2f4>
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	; (800a53c <_printf_float+0x2f0>)
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f43f af19 	beq.w	800a30e <_printf_float+0xc2>
 800a4dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	d102      	bne.n	800a4ea <_printf_float+0x29e>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	07d9      	lsls	r1, r3, #31
 800a4e8:	d5d8      	bpl.n	800a49c <_printf_float+0x250>
 800a4ea:	ee18 3a10 	vmov	r3, s16
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f43f af09 	beq.w	800a30e <_printf_float+0xc2>
 800a4fc:	f04f 0900 	mov.w	r9, #0
 800a500:	f104 0a1a 	add.w	sl, r4, #26
 800a504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a506:	425b      	negs	r3, r3
 800a508:	454b      	cmp	r3, r9
 800a50a:	dc01      	bgt.n	800a510 <_printf_float+0x2c4>
 800a50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50e:	e792      	b.n	800a436 <_printf_float+0x1ea>
 800a510:	2301      	movs	r3, #1
 800a512:	4652      	mov	r2, sl
 800a514:	4631      	mov	r1, r6
 800a516:	4628      	mov	r0, r5
 800a518:	47b8      	blx	r7
 800a51a:	3001      	adds	r0, #1
 800a51c:	f43f aef7 	beq.w	800a30e <_printf_float+0xc2>
 800a520:	f109 0901 	add.w	r9, r9, #1
 800a524:	e7ee      	b.n	800a504 <_printf_float+0x2b8>
 800a526:	bf00      	nop
 800a528:	7fefffff 	.word	0x7fefffff
 800a52c:	0800d11c 	.word	0x0800d11c
 800a530:	0800d120 	.word	0x0800d120
 800a534:	0800d128 	.word	0x0800d128
 800a538:	0800d124 	.word	0x0800d124
 800a53c:	0800d12c 	.word	0x0800d12c
 800a540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a542:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a544:	429a      	cmp	r2, r3
 800a546:	bfa8      	it	ge
 800a548:	461a      	movge	r2, r3
 800a54a:	2a00      	cmp	r2, #0
 800a54c:	4691      	mov	r9, r2
 800a54e:	dc37      	bgt.n	800a5c0 <_printf_float+0x374>
 800a550:	f04f 0b00 	mov.w	fp, #0
 800a554:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a558:	f104 021a 	add.w	r2, r4, #26
 800a55c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a55e:	9305      	str	r3, [sp, #20]
 800a560:	eba3 0309 	sub.w	r3, r3, r9
 800a564:	455b      	cmp	r3, fp
 800a566:	dc33      	bgt.n	800a5d0 <_printf_float+0x384>
 800a568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a56c:	429a      	cmp	r2, r3
 800a56e:	db3b      	blt.n	800a5e8 <_printf_float+0x39c>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	07da      	lsls	r2, r3, #31
 800a574:	d438      	bmi.n	800a5e8 <_printf_float+0x39c>
 800a576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a578:	9b05      	ldr	r3, [sp, #20]
 800a57a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	eba2 0901 	sub.w	r9, r2, r1
 800a582:	4599      	cmp	r9, r3
 800a584:	bfa8      	it	ge
 800a586:	4699      	movge	r9, r3
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	dc35      	bgt.n	800a5fa <_printf_float+0x3ae>
 800a58e:	f04f 0800 	mov.w	r8, #0
 800a592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a596:	f104 0a1a 	add.w	sl, r4, #26
 800a59a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a59e:	1a9b      	subs	r3, r3, r2
 800a5a0:	eba3 0309 	sub.w	r3, r3, r9
 800a5a4:	4543      	cmp	r3, r8
 800a5a6:	f77f af79 	ble.w	800a49c <_printf_float+0x250>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4652      	mov	r2, sl
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f aeaa 	beq.w	800a30e <_printf_float+0xc2>
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	e7ec      	b.n	800a59a <_printf_float+0x34e>
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	47b8      	blx	r7
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d1c0      	bne.n	800a550 <_printf_float+0x304>
 800a5ce:	e69e      	b.n	800a30e <_printf_float+0xc2>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	9205      	str	r2, [sp, #20]
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f ae97 	beq.w	800a30e <_printf_float+0xc2>
 800a5e0:	9a05      	ldr	r2, [sp, #20]
 800a5e2:	f10b 0b01 	add.w	fp, fp, #1
 800a5e6:	e7b9      	b.n	800a55c <_printf_float+0x310>
 800a5e8:	ee18 3a10 	vmov	r3, s16
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d1be      	bne.n	800a576 <_printf_float+0x32a>
 800a5f8:	e689      	b.n	800a30e <_printf_float+0xc2>
 800a5fa:	9a05      	ldr	r2, [sp, #20]
 800a5fc:	464b      	mov	r3, r9
 800a5fe:	4442      	add	r2, r8
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	d1c1      	bne.n	800a58e <_printf_float+0x342>
 800a60a:	e680      	b.n	800a30e <_printf_float+0xc2>
 800a60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60e:	2a01      	cmp	r2, #1
 800a610:	dc01      	bgt.n	800a616 <_printf_float+0x3ca>
 800a612:	07db      	lsls	r3, r3, #31
 800a614:	d538      	bpl.n	800a688 <_printf_float+0x43c>
 800a616:	2301      	movs	r3, #1
 800a618:	4642      	mov	r2, r8
 800a61a:	4631      	mov	r1, r6
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b8      	blx	r7
 800a620:	3001      	adds	r0, #1
 800a622:	f43f ae74 	beq.w	800a30e <_printf_float+0xc2>
 800a626:	ee18 3a10 	vmov	r3, s16
 800a62a:	4652      	mov	r2, sl
 800a62c:	4631      	mov	r1, r6
 800a62e:	4628      	mov	r0, r5
 800a630:	47b8      	blx	r7
 800a632:	3001      	adds	r0, #1
 800a634:	f43f ae6b 	beq.w	800a30e <_printf_float+0xc2>
 800a638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	f7f6 fa4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a644:	b9d8      	cbnz	r0, 800a67e <_printf_float+0x432>
 800a646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a648:	f108 0201 	add.w	r2, r8, #1
 800a64c:	3b01      	subs	r3, #1
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	47b8      	blx	r7
 800a654:	3001      	adds	r0, #1
 800a656:	d10e      	bne.n	800a676 <_printf_float+0x42a>
 800a658:	e659      	b.n	800a30e <_printf_float+0xc2>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4652      	mov	r2, sl
 800a65e:	4631      	mov	r1, r6
 800a660:	4628      	mov	r0, r5
 800a662:	47b8      	blx	r7
 800a664:	3001      	adds	r0, #1
 800a666:	f43f ae52 	beq.w	800a30e <_printf_float+0xc2>
 800a66a:	f108 0801 	add.w	r8, r8, #1
 800a66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a670:	3b01      	subs	r3, #1
 800a672:	4543      	cmp	r3, r8
 800a674:	dcf1      	bgt.n	800a65a <_printf_float+0x40e>
 800a676:	464b      	mov	r3, r9
 800a678:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a67c:	e6dc      	b.n	800a438 <_printf_float+0x1ec>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	f104 0a1a 	add.w	sl, r4, #26
 800a686:	e7f2      	b.n	800a66e <_printf_float+0x422>
 800a688:	2301      	movs	r3, #1
 800a68a:	4642      	mov	r2, r8
 800a68c:	e7df      	b.n	800a64e <_printf_float+0x402>
 800a68e:	2301      	movs	r3, #1
 800a690:	464a      	mov	r2, r9
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	f43f ae38 	beq.w	800a30e <_printf_float+0xc2>
 800a69e:	f108 0801 	add.w	r8, r8, #1
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6a6:	1a5b      	subs	r3, r3, r1
 800a6a8:	4543      	cmp	r3, r8
 800a6aa:	dcf0      	bgt.n	800a68e <_printf_float+0x442>
 800a6ac:	e6fa      	b.n	800a4a4 <_printf_float+0x258>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	f104 0919 	add.w	r9, r4, #25
 800a6b6:	e7f4      	b.n	800a6a2 <_printf_float+0x456>

0800a6b8 <_printf_common>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	4616      	mov	r6, r2
 800a6be:	4699      	mov	r9, r3
 800a6c0:	688a      	ldr	r2, [r1, #8]
 800a6c2:	690b      	ldr	r3, [r1, #16]
 800a6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bfb8      	it	lt
 800a6cc:	4613      	movlt	r3, r2
 800a6ce:	6033      	str	r3, [r6, #0]
 800a6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	b10a      	cbz	r2, 800a6de <_printf_common+0x26>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	0699      	lsls	r1, r3, #26
 800a6e2:	bf42      	ittt	mi
 800a6e4:	6833      	ldrmi	r3, [r6, #0]
 800a6e6:	3302      	addmi	r3, #2
 800a6e8:	6033      	strmi	r3, [r6, #0]
 800a6ea:	6825      	ldr	r5, [r4, #0]
 800a6ec:	f015 0506 	ands.w	r5, r5, #6
 800a6f0:	d106      	bne.n	800a700 <_printf_common+0x48>
 800a6f2:	f104 0a19 	add.w	sl, r4, #25
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	6832      	ldr	r2, [r6, #0]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	dc26      	bgt.n	800a74e <_printf_common+0x96>
 800a700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a704:	1e13      	subs	r3, r2, #0
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	bf18      	it	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	0692      	lsls	r2, r2, #26
 800a70e:	d42b      	bmi.n	800a768 <_printf_common+0xb0>
 800a710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d01e      	beq.n	800a75c <_printf_common+0xa4>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	68e5      	ldr	r5, [r4, #12]
 800a722:	6832      	ldr	r2, [r6, #0]
 800a724:	f003 0306 	and.w	r3, r3, #6
 800a728:	2b04      	cmp	r3, #4
 800a72a:	bf08      	it	eq
 800a72c:	1aad      	subeq	r5, r5, r2
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	6922      	ldr	r2, [r4, #16]
 800a732:	bf0c      	ite	eq
 800a734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a738:	2500      	movne	r5, #0
 800a73a:	4293      	cmp	r3, r2
 800a73c:	bfc4      	itt	gt
 800a73e:	1a9b      	subgt	r3, r3, r2
 800a740:	18ed      	addgt	r5, r5, r3
 800a742:	2600      	movs	r6, #0
 800a744:	341a      	adds	r4, #26
 800a746:	42b5      	cmp	r5, r6
 800a748:	d11a      	bne.n	800a780 <_printf_common+0xc8>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e008      	b.n	800a760 <_printf_common+0xa8>
 800a74e:	2301      	movs	r3, #1
 800a750:	4652      	mov	r2, sl
 800a752:	4649      	mov	r1, r9
 800a754:	4638      	mov	r0, r7
 800a756:	47c0      	blx	r8
 800a758:	3001      	adds	r0, #1
 800a75a:	d103      	bne.n	800a764 <_printf_common+0xac>
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	3501      	adds	r5, #1
 800a766:	e7c6      	b.n	800a6f6 <_printf_common+0x3e>
 800a768:	18e1      	adds	r1, r4, r3
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	2030      	movs	r0, #48	; 0x30
 800a76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a772:	4422      	add	r2, r4
 800a774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a77c:	3302      	adds	r3, #2
 800a77e:	e7c7      	b.n	800a710 <_printf_common+0x58>
 800a780:	2301      	movs	r3, #1
 800a782:	4622      	mov	r2, r4
 800a784:	4649      	mov	r1, r9
 800a786:	4638      	mov	r0, r7
 800a788:	47c0      	blx	r8
 800a78a:	3001      	adds	r0, #1
 800a78c:	d0e6      	beq.n	800a75c <_printf_common+0xa4>
 800a78e:	3601      	adds	r6, #1
 800a790:	e7d9      	b.n	800a746 <_printf_common+0x8e>
	...

0800a794 <_printf_i>:
 800a794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	460c      	mov	r4, r1
 800a79a:	4691      	mov	r9, r2
 800a79c:	7e27      	ldrb	r7, [r4, #24]
 800a79e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7a0:	2f78      	cmp	r7, #120	; 0x78
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	469a      	mov	sl, r3
 800a7a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7aa:	d807      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ac:	2f62      	cmp	r7, #98	; 0x62
 800a7ae:	d80a      	bhi.n	800a7c6 <_printf_i+0x32>
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	f000 80d8 	beq.w	800a966 <_printf_i+0x1d2>
 800a7b6:	2f58      	cmp	r7, #88	; 0x58
 800a7b8:	f000 80a3 	beq.w	800a902 <_printf_i+0x16e>
 800a7bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7c4:	e03a      	b.n	800a83c <_printf_i+0xa8>
 800a7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7ca:	2b15      	cmp	r3, #21
 800a7cc:	d8f6      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ce:	a001      	add	r0, pc, #4	; (adr r0, 800a7d4 <_printf_i+0x40>)
 800a7d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a7d4:	0800a82d 	.word	0x0800a82d
 800a7d8:	0800a841 	.word	0x0800a841
 800a7dc:	0800a7bd 	.word	0x0800a7bd
 800a7e0:	0800a7bd 	.word	0x0800a7bd
 800a7e4:	0800a7bd 	.word	0x0800a7bd
 800a7e8:	0800a7bd 	.word	0x0800a7bd
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a7bd 	.word	0x0800a7bd
 800a7f4:	0800a7bd 	.word	0x0800a7bd
 800a7f8:	0800a7bd 	.word	0x0800a7bd
 800a7fc:	0800a7bd 	.word	0x0800a7bd
 800a800:	0800a94d 	.word	0x0800a94d
 800a804:	0800a871 	.word	0x0800a871
 800a808:	0800a92f 	.word	0x0800a92f
 800a80c:	0800a7bd 	.word	0x0800a7bd
 800a810:	0800a7bd 	.word	0x0800a7bd
 800a814:	0800a96f 	.word	0x0800a96f
 800a818:	0800a7bd 	.word	0x0800a7bd
 800a81c:	0800a871 	.word	0x0800a871
 800a820:	0800a7bd 	.word	0x0800a7bd
 800a824:	0800a7bd 	.word	0x0800a7bd
 800a828:	0800a937 	.word	0x0800a937
 800a82c:	680b      	ldr	r3, [r1, #0]
 800a82e:	1d1a      	adds	r2, r3, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	600a      	str	r2, [r1, #0]
 800a834:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0a3      	b.n	800a988 <_printf_i+0x1f4>
 800a840:	6825      	ldr	r5, [r4, #0]
 800a842:	6808      	ldr	r0, [r1, #0]
 800a844:	062e      	lsls	r6, r5, #24
 800a846:	f100 0304 	add.w	r3, r0, #4
 800a84a:	d50a      	bpl.n	800a862 <_printf_i+0xce>
 800a84c:	6805      	ldr	r5, [r0, #0]
 800a84e:	600b      	str	r3, [r1, #0]
 800a850:	2d00      	cmp	r5, #0
 800a852:	da03      	bge.n	800a85c <_printf_i+0xc8>
 800a854:	232d      	movs	r3, #45	; 0x2d
 800a856:	426d      	negs	r5, r5
 800a858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a85c:	485e      	ldr	r0, [pc, #376]	; (800a9d8 <_printf_i+0x244>)
 800a85e:	230a      	movs	r3, #10
 800a860:	e019      	b.n	800a896 <_printf_i+0x102>
 800a862:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a866:	6805      	ldr	r5, [r0, #0]
 800a868:	600b      	str	r3, [r1, #0]
 800a86a:	bf18      	it	ne
 800a86c:	b22d      	sxthne	r5, r5
 800a86e:	e7ef      	b.n	800a850 <_printf_i+0xbc>
 800a870:	680b      	ldr	r3, [r1, #0]
 800a872:	6825      	ldr	r5, [r4, #0]
 800a874:	1d18      	adds	r0, r3, #4
 800a876:	6008      	str	r0, [r1, #0]
 800a878:	0628      	lsls	r0, r5, #24
 800a87a:	d501      	bpl.n	800a880 <_printf_i+0xec>
 800a87c:	681d      	ldr	r5, [r3, #0]
 800a87e:	e002      	b.n	800a886 <_printf_i+0xf2>
 800a880:	0669      	lsls	r1, r5, #25
 800a882:	d5fb      	bpl.n	800a87c <_printf_i+0xe8>
 800a884:	881d      	ldrh	r5, [r3, #0]
 800a886:	4854      	ldr	r0, [pc, #336]	; (800a9d8 <_printf_i+0x244>)
 800a888:	2f6f      	cmp	r7, #111	; 0x6f
 800a88a:	bf0c      	ite	eq
 800a88c:	2308      	moveq	r3, #8
 800a88e:	230a      	movne	r3, #10
 800a890:	2100      	movs	r1, #0
 800a892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a896:	6866      	ldr	r6, [r4, #4]
 800a898:	60a6      	str	r6, [r4, #8]
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	bfa2      	ittt	ge
 800a89e:	6821      	ldrge	r1, [r4, #0]
 800a8a0:	f021 0104 	bicge.w	r1, r1, #4
 800a8a4:	6021      	strge	r1, [r4, #0]
 800a8a6:	b90d      	cbnz	r5, 800a8ac <_printf_i+0x118>
 800a8a8:	2e00      	cmp	r6, #0
 800a8aa:	d04d      	beq.n	800a948 <_printf_i+0x1b4>
 800a8ac:	4616      	mov	r6, r2
 800a8ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8b2:	fb03 5711 	mls	r7, r3, r1, r5
 800a8b6:	5dc7      	ldrb	r7, [r0, r7]
 800a8b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8bc:	462f      	mov	r7, r5
 800a8be:	42bb      	cmp	r3, r7
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	d9f4      	bls.n	800a8ae <_printf_i+0x11a>
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d10b      	bne.n	800a8e0 <_printf_i+0x14c>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	07df      	lsls	r7, r3, #31
 800a8cc:	d508      	bpl.n	800a8e0 <_printf_i+0x14c>
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	6861      	ldr	r1, [r4, #4]
 800a8d2:	4299      	cmp	r1, r3
 800a8d4:	bfde      	ittt	le
 800a8d6:	2330      	movle	r3, #48	; 0x30
 800a8d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8e0:	1b92      	subs	r2, r2, r6
 800a8e2:	6122      	str	r2, [r4, #16]
 800a8e4:	f8cd a000 	str.w	sl, [sp]
 800a8e8:	464b      	mov	r3, r9
 800a8ea:	aa03      	add	r2, sp, #12
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7ff fee2 	bl	800a6b8 <_printf_common>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	d14c      	bne.n	800a992 <_printf_i+0x1fe>
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	b004      	add	sp, #16
 800a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a902:	4835      	ldr	r0, [pc, #212]	; (800a9d8 <_printf_i+0x244>)
 800a904:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	680e      	ldr	r6, [r1, #0]
 800a90c:	061f      	lsls	r7, r3, #24
 800a90e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a912:	600e      	str	r6, [r1, #0]
 800a914:	d514      	bpl.n	800a940 <_printf_i+0x1ac>
 800a916:	07d9      	lsls	r1, r3, #31
 800a918:	bf44      	itt	mi
 800a91a:	f043 0320 	orrmi.w	r3, r3, #32
 800a91e:	6023      	strmi	r3, [r4, #0]
 800a920:	b91d      	cbnz	r5, 800a92a <_printf_i+0x196>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	f023 0320 	bic.w	r3, r3, #32
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	2310      	movs	r3, #16
 800a92c:	e7b0      	b.n	800a890 <_printf_i+0xfc>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	f043 0320 	orr.w	r3, r3, #32
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	2378      	movs	r3, #120	; 0x78
 800a938:	4828      	ldr	r0, [pc, #160]	; (800a9dc <_printf_i+0x248>)
 800a93a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a93e:	e7e3      	b.n	800a908 <_printf_i+0x174>
 800a940:	065e      	lsls	r6, r3, #25
 800a942:	bf48      	it	mi
 800a944:	b2ad      	uxthmi	r5, r5
 800a946:	e7e6      	b.n	800a916 <_printf_i+0x182>
 800a948:	4616      	mov	r6, r2
 800a94a:	e7bb      	b.n	800a8c4 <_printf_i+0x130>
 800a94c:	680b      	ldr	r3, [r1, #0]
 800a94e:	6826      	ldr	r6, [r4, #0]
 800a950:	6960      	ldr	r0, [r4, #20]
 800a952:	1d1d      	adds	r5, r3, #4
 800a954:	600d      	str	r5, [r1, #0]
 800a956:	0635      	lsls	r5, r6, #24
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	d501      	bpl.n	800a960 <_printf_i+0x1cc>
 800a95c:	6018      	str	r0, [r3, #0]
 800a95e:	e002      	b.n	800a966 <_printf_i+0x1d2>
 800a960:	0671      	lsls	r1, r6, #25
 800a962:	d5fb      	bpl.n	800a95c <_printf_i+0x1c8>
 800a964:	8018      	strh	r0, [r3, #0]
 800a966:	2300      	movs	r3, #0
 800a968:	6123      	str	r3, [r4, #16]
 800a96a:	4616      	mov	r6, r2
 800a96c:	e7ba      	b.n	800a8e4 <_printf_i+0x150>
 800a96e:	680b      	ldr	r3, [r1, #0]
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	600a      	str	r2, [r1, #0]
 800a974:	681e      	ldr	r6, [r3, #0]
 800a976:	6862      	ldr	r2, [r4, #4]
 800a978:	2100      	movs	r1, #0
 800a97a:	4630      	mov	r0, r6
 800a97c:	f7f5 fc38 	bl	80001f0 <memchr>
 800a980:	b108      	cbz	r0, 800a986 <_printf_i+0x1f2>
 800a982:	1b80      	subs	r0, r0, r6
 800a984:	6060      	str	r0, [r4, #4]
 800a986:	6863      	ldr	r3, [r4, #4]
 800a988:	6123      	str	r3, [r4, #16]
 800a98a:	2300      	movs	r3, #0
 800a98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a990:	e7a8      	b.n	800a8e4 <_printf_i+0x150>
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	4632      	mov	r2, r6
 800a996:	4649      	mov	r1, r9
 800a998:	4640      	mov	r0, r8
 800a99a:	47d0      	blx	sl
 800a99c:	3001      	adds	r0, #1
 800a99e:	d0ab      	beq.n	800a8f8 <_printf_i+0x164>
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	079b      	lsls	r3, r3, #30
 800a9a4:	d413      	bmi.n	800a9ce <_printf_i+0x23a>
 800a9a6:	68e0      	ldr	r0, [r4, #12]
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	4298      	cmp	r0, r3
 800a9ac:	bfb8      	it	lt
 800a9ae:	4618      	movlt	r0, r3
 800a9b0:	e7a4      	b.n	800a8fc <_printf_i+0x168>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	47d0      	blx	sl
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d09b      	beq.n	800a8f8 <_printf_i+0x164>
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	68e3      	ldr	r3, [r4, #12]
 800a9c4:	9903      	ldr	r1, [sp, #12]
 800a9c6:	1a5b      	subs	r3, r3, r1
 800a9c8:	42ab      	cmp	r3, r5
 800a9ca:	dcf2      	bgt.n	800a9b2 <_printf_i+0x21e>
 800a9cc:	e7eb      	b.n	800a9a6 <_printf_i+0x212>
 800a9ce:	2500      	movs	r5, #0
 800a9d0:	f104 0619 	add.w	r6, r4, #25
 800a9d4:	e7f5      	b.n	800a9c2 <_printf_i+0x22e>
 800a9d6:	bf00      	nop
 800a9d8:	0800d12e 	.word	0x0800d12e
 800a9dc:	0800d13f 	.word	0x0800d13f

0800a9e0 <siprintf>:
 800a9e0:	b40e      	push	{r1, r2, r3}
 800a9e2:	b500      	push	{lr}
 800a9e4:	b09c      	sub	sp, #112	; 0x70
 800a9e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a9e8:	9002      	str	r0, [sp, #8]
 800a9ea:	9006      	str	r0, [sp, #24]
 800a9ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9f0:	4809      	ldr	r0, [pc, #36]	; (800aa18 <siprintf+0x38>)
 800a9f2:	9107      	str	r1, [sp, #28]
 800a9f4:	9104      	str	r1, [sp, #16]
 800a9f6:	4909      	ldr	r1, [pc, #36]	; (800aa1c <siprintf+0x3c>)
 800a9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fc:	9105      	str	r1, [sp, #20]
 800a9fe:	6800      	ldr	r0, [r0, #0]
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	a902      	add	r1, sp, #8
 800aa04:	f001 fb68 	bl	800c0d8 <_svfiprintf_r>
 800aa08:	9b02      	ldr	r3, [sp, #8]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]
 800aa0e:	b01c      	add	sp, #112	; 0x70
 800aa10:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa14:	b003      	add	sp, #12
 800aa16:	4770      	bx	lr
 800aa18:	20000014 	.word	0x20000014
 800aa1c:	ffff0208 	.word	0xffff0208

0800aa20 <__assert_func>:
 800aa20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa22:	4614      	mov	r4, r2
 800aa24:	461a      	mov	r2, r3
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <__assert_func+0x2c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	68d8      	ldr	r0, [r3, #12]
 800aa2e:	b14c      	cbz	r4, 800aa44 <__assert_func+0x24>
 800aa30:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <__assert_func+0x30>)
 800aa32:	9100      	str	r1, [sp, #0]
 800aa34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa38:	4906      	ldr	r1, [pc, #24]	; (800aa54 <__assert_func+0x34>)
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	f000 fe88 	bl	800b750 <fiprintf>
 800aa40:	f001 fe82 	bl	800c748 <abort>
 800aa44:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <__assert_func+0x38>)
 800aa46:	461c      	mov	r4, r3
 800aa48:	e7f3      	b.n	800aa32 <__assert_func+0x12>
 800aa4a:	bf00      	nop
 800aa4c:	20000014 	.word	0x20000014
 800aa50:	0800d150 	.word	0x0800d150
 800aa54:	0800d15d 	.word	0x0800d15d
 800aa58:	0800d18b 	.word	0x0800d18b

0800aa5c <quorem>:
 800aa5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	6903      	ldr	r3, [r0, #16]
 800aa62:	690c      	ldr	r4, [r1, #16]
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	4607      	mov	r7, r0
 800aa68:	f2c0 8081 	blt.w	800ab6e <quorem+0x112>
 800aa6c:	3c01      	subs	r4, #1
 800aa6e:	f101 0814 	add.w	r8, r1, #20
 800aa72:	f100 0514 	add.w	r5, r0, #20
 800aa76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa7a:	9301      	str	r3, [sp, #4]
 800aa7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa84:	3301      	adds	r3, #1
 800aa86:	429a      	cmp	r2, r3
 800aa88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa90:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa94:	d331      	bcc.n	800aafa <quorem+0x9e>
 800aa96:	f04f 0e00 	mov.w	lr, #0
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	46ac      	mov	ip, r5
 800aa9e:	46f2      	mov	sl, lr
 800aaa0:	f850 2b04 	ldr.w	r2, [r0], #4
 800aaa4:	b293      	uxth	r3, r2
 800aaa6:	fb06 e303 	mla	r3, r6, r3, lr
 800aaaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	ebaa 0303 	sub.w	r3, sl, r3
 800aab4:	0c12      	lsrs	r2, r2, #16
 800aab6:	f8dc a000 	ldr.w	sl, [ip]
 800aaba:	fb06 e202 	mla	r2, r6, r2, lr
 800aabe:	fa13 f38a 	uxtah	r3, r3, sl
 800aac2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aac6:	fa1f fa82 	uxth.w	sl, r2
 800aaca:	f8dc 2000 	ldr.w	r2, [ip]
 800aace:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800aad2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aadc:	4581      	cmp	r9, r0
 800aade:	f84c 3b04 	str.w	r3, [ip], #4
 800aae2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aae6:	d2db      	bcs.n	800aaa0 <quorem+0x44>
 800aae8:	f855 300b 	ldr.w	r3, [r5, fp]
 800aaec:	b92b      	cbnz	r3, 800aafa <quorem+0x9e>
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	3b04      	subs	r3, #4
 800aaf2:	429d      	cmp	r5, r3
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	d32e      	bcc.n	800ab56 <quorem+0xfa>
 800aaf8:	613c      	str	r4, [r7, #16]
 800aafa:	4638      	mov	r0, r7
 800aafc:	f001 f8d6 	bl	800bcac <__mcmp>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	db24      	blt.n	800ab4e <quorem+0xf2>
 800ab04:	3601      	adds	r6, #1
 800ab06:	4628      	mov	r0, r5
 800ab08:	f04f 0c00 	mov.w	ip, #0
 800ab0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab10:	f8d0 e000 	ldr.w	lr, [r0]
 800ab14:	b293      	uxth	r3, r2
 800ab16:	ebac 0303 	sub.w	r3, ip, r3
 800ab1a:	0c12      	lsrs	r2, r2, #16
 800ab1c:	fa13 f38e 	uxtah	r3, r3, lr
 800ab20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab2e:	45c1      	cmp	r9, r8
 800ab30:	f840 3b04 	str.w	r3, [r0], #4
 800ab34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab38:	d2e8      	bcs.n	800ab0c <quorem+0xb0>
 800ab3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab42:	b922      	cbnz	r2, 800ab4e <quorem+0xf2>
 800ab44:	3b04      	subs	r3, #4
 800ab46:	429d      	cmp	r5, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	d30a      	bcc.n	800ab62 <quorem+0x106>
 800ab4c:	613c      	str	r4, [r7, #16]
 800ab4e:	4630      	mov	r0, r6
 800ab50:	b003      	add	sp, #12
 800ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab56:	6812      	ldr	r2, [r2, #0]
 800ab58:	3b04      	subs	r3, #4
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	d1cc      	bne.n	800aaf8 <quorem+0x9c>
 800ab5e:	3c01      	subs	r4, #1
 800ab60:	e7c7      	b.n	800aaf2 <quorem+0x96>
 800ab62:	6812      	ldr	r2, [r2, #0]
 800ab64:	3b04      	subs	r3, #4
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	d1f0      	bne.n	800ab4c <quorem+0xf0>
 800ab6a:	3c01      	subs	r4, #1
 800ab6c:	e7eb      	b.n	800ab46 <quorem+0xea>
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e7ee      	b.n	800ab50 <quorem+0xf4>
 800ab72:	0000      	movs	r0, r0
 800ab74:	0000      	movs	r0, r0
	...

0800ab78 <_dtoa_r>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	ed2d 8b02 	vpush	{d8}
 800ab80:	ec57 6b10 	vmov	r6, r7, d0
 800ab84:	b095      	sub	sp, #84	; 0x54
 800ab86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab8c:	9105      	str	r1, [sp, #20]
 800ab8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ab92:	4604      	mov	r4, r0
 800ab94:	9209      	str	r2, [sp, #36]	; 0x24
 800ab96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab98:	b975      	cbnz	r5, 800abb8 <_dtoa_r+0x40>
 800ab9a:	2010      	movs	r0, #16
 800ab9c:	f000 fdee 	bl	800b77c <malloc>
 800aba0:	4602      	mov	r2, r0
 800aba2:	6260      	str	r0, [r4, #36]	; 0x24
 800aba4:	b920      	cbnz	r0, 800abb0 <_dtoa_r+0x38>
 800aba6:	4bb2      	ldr	r3, [pc, #712]	; (800ae70 <_dtoa_r+0x2f8>)
 800aba8:	21ea      	movs	r1, #234	; 0xea
 800abaa:	48b2      	ldr	r0, [pc, #712]	; (800ae74 <_dtoa_r+0x2fc>)
 800abac:	f7ff ff38 	bl	800aa20 <__assert_func>
 800abb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800abb4:	6005      	str	r5, [r0, #0]
 800abb6:	60c5      	str	r5, [r0, #12]
 800abb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abba:	6819      	ldr	r1, [r3, #0]
 800abbc:	b151      	cbz	r1, 800abd4 <_dtoa_r+0x5c>
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	604a      	str	r2, [r1, #4]
 800abc2:	2301      	movs	r3, #1
 800abc4:	4093      	lsls	r3, r2
 800abc6:	608b      	str	r3, [r1, #8]
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fe31 	bl	800b830 <_Bfree>
 800abce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	1e3b      	subs	r3, r7, #0
 800abd6:	bfb9      	ittee	lt
 800abd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abdc:	9303      	strlt	r3, [sp, #12]
 800abde:	2300      	movge	r3, #0
 800abe0:	f8c8 3000 	strge.w	r3, [r8]
 800abe4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800abe8:	4ba3      	ldr	r3, [pc, #652]	; (800ae78 <_dtoa_r+0x300>)
 800abea:	bfbc      	itt	lt
 800abec:	2201      	movlt	r2, #1
 800abee:	f8c8 2000 	strlt.w	r2, [r8]
 800abf2:	ea33 0309 	bics.w	r3, r3, r9
 800abf6:	d11b      	bne.n	800ac30 <_dtoa_r+0xb8>
 800abf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abfa:	f242 730f 	movw	r3, #9999	; 0x270f
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac04:	4333      	orrs	r3, r6
 800ac06:	f000 857a 	beq.w	800b6fe <_dtoa_r+0xb86>
 800ac0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac0c:	b963      	cbnz	r3, 800ac28 <_dtoa_r+0xb0>
 800ac0e:	4b9b      	ldr	r3, [pc, #620]	; (800ae7c <_dtoa_r+0x304>)
 800ac10:	e024      	b.n	800ac5c <_dtoa_r+0xe4>
 800ac12:	4b9b      	ldr	r3, [pc, #620]	; (800ae80 <_dtoa_r+0x308>)
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	3308      	adds	r3, #8
 800ac18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	9800      	ldr	r0, [sp, #0]
 800ac1e:	b015      	add	sp, #84	; 0x54
 800ac20:	ecbd 8b02 	vpop	{d8}
 800ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac28:	4b94      	ldr	r3, [pc, #592]	; (800ae7c <_dtoa_r+0x304>)
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	3303      	adds	r3, #3
 800ac2e:	e7f3      	b.n	800ac18 <_dtoa_r+0xa0>
 800ac30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac34:	2200      	movs	r2, #0
 800ac36:	ec51 0b17 	vmov	r0, r1, d7
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ac40:	f7f5 ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac44:	4680      	mov	r8, r0
 800ac46:	b158      	cbz	r0, 800ac60 <_dtoa_r+0xe8>
 800ac48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 8551 	beq.w	800b6f8 <_dtoa_r+0xb80>
 800ac56:	488b      	ldr	r0, [pc, #556]	; (800ae84 <_dtoa_r+0x30c>)
 800ac58:	6018      	str	r0, [r3, #0]
 800ac5a:	1e43      	subs	r3, r0, #1
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	e7dd      	b.n	800ac1c <_dtoa_r+0xa4>
 800ac60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ac64:	aa12      	add	r2, sp, #72	; 0x48
 800ac66:	a913      	add	r1, sp, #76	; 0x4c
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f001 f8c3 	bl	800bdf4 <__d2b>
 800ac6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac72:	4683      	mov	fp, r0
 800ac74:	2d00      	cmp	r5, #0
 800ac76:	d07c      	beq.n	800ad72 <_dtoa_r+0x1fa>
 800ac78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ac7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ac86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ac8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ac8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac92:	4b7d      	ldr	r3, [pc, #500]	; (800ae88 <_dtoa_r+0x310>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	4630      	mov	r0, r6
 800ac98:	4639      	mov	r1, r7
 800ac9a:	f7f5 fafd 	bl	8000298 <__aeabi_dsub>
 800ac9e:	a36e      	add	r3, pc, #440	; (adr r3, 800ae58 <_dtoa_r+0x2e0>)
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	f7f5 fcb0 	bl	8000608 <__aeabi_dmul>
 800aca8:	a36d      	add	r3, pc, #436	; (adr r3, 800ae60 <_dtoa_r+0x2e8>)
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	f7f5 faf5 	bl	800029c <__adddf3>
 800acb2:	4606      	mov	r6, r0
 800acb4:	4628      	mov	r0, r5
 800acb6:	460f      	mov	r7, r1
 800acb8:	f7f5 fc3c 	bl	8000534 <__aeabi_i2d>
 800acbc:	a36a      	add	r3, pc, #424	; (adr r3, 800ae68 <_dtoa_r+0x2f0>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fca1 	bl	8000608 <__aeabi_dmul>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4630      	mov	r0, r6
 800accc:	4639      	mov	r1, r7
 800acce:	f7f5 fae5 	bl	800029c <__adddf3>
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	f7f5 ff47 	bl	8000b68 <__aeabi_d2iz>
 800acda:	2200      	movs	r2, #0
 800acdc:	4682      	mov	sl, r0
 800acde:	2300      	movs	r3, #0
 800ace0:	4630      	mov	r0, r6
 800ace2:	4639      	mov	r1, r7
 800ace4:	f7f5 ff02 	bl	8000aec <__aeabi_dcmplt>
 800ace8:	b148      	cbz	r0, 800acfe <_dtoa_r+0x186>
 800acea:	4650      	mov	r0, sl
 800acec:	f7f5 fc22 	bl	8000534 <__aeabi_i2d>
 800acf0:	4632      	mov	r2, r6
 800acf2:	463b      	mov	r3, r7
 800acf4:	f7f5 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 800acf8:	b908      	cbnz	r0, 800acfe <_dtoa_r+0x186>
 800acfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acfe:	f1ba 0f16 	cmp.w	sl, #22
 800ad02:	d854      	bhi.n	800adae <_dtoa_r+0x236>
 800ad04:	4b61      	ldr	r3, [pc, #388]	; (800ae8c <_dtoa_r+0x314>)
 800ad06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad12:	f7f5 feeb 	bl	8000aec <__aeabi_dcmplt>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d04b      	beq.n	800adb2 <_dtoa_r+0x23a>
 800ad1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad1e:	2300      	movs	r3, #0
 800ad20:	930e      	str	r3, [sp, #56]	; 0x38
 800ad22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad24:	1b5d      	subs	r5, r3, r5
 800ad26:	1e6b      	subs	r3, r5, #1
 800ad28:	9304      	str	r3, [sp, #16]
 800ad2a:	bf43      	ittte	mi
 800ad2c:	2300      	movmi	r3, #0
 800ad2e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ad32:	9304      	strmi	r3, [sp, #16]
 800ad34:	f04f 0800 	movpl.w	r8, #0
 800ad38:	f1ba 0f00 	cmp.w	sl, #0
 800ad3c:	db3b      	blt.n	800adb6 <_dtoa_r+0x23e>
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ad44:	4453      	add	r3, sl
 800ad46:	9304      	str	r3, [sp, #16]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9306      	str	r3, [sp, #24]
 800ad4c:	9b05      	ldr	r3, [sp, #20]
 800ad4e:	2b09      	cmp	r3, #9
 800ad50:	d869      	bhi.n	800ae26 <_dtoa_r+0x2ae>
 800ad52:	2b05      	cmp	r3, #5
 800ad54:	bfc4      	itt	gt
 800ad56:	3b04      	subgt	r3, #4
 800ad58:	9305      	strgt	r3, [sp, #20]
 800ad5a:	9b05      	ldr	r3, [sp, #20]
 800ad5c:	f1a3 0302 	sub.w	r3, r3, #2
 800ad60:	bfcc      	ite	gt
 800ad62:	2500      	movgt	r5, #0
 800ad64:	2501      	movle	r5, #1
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d869      	bhi.n	800ae3e <_dtoa_r+0x2c6>
 800ad6a:	e8df f003 	tbb	[pc, r3]
 800ad6e:	4e2c      	.short	0x4e2c
 800ad70:	5a4c      	.short	0x5a4c
 800ad72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ad76:	441d      	add	r5, r3
 800ad78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad7c:	2b20      	cmp	r3, #32
 800ad7e:	bfc1      	itttt	gt
 800ad80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ad88:	fa09 f303 	lslgt.w	r3, r9, r3
 800ad8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad90:	bfda      	itte	le
 800ad92:	f1c3 0320 	rsble	r3, r3, #32
 800ad96:	fa06 f003 	lslle.w	r0, r6, r3
 800ad9a:	4318      	orrgt	r0, r3
 800ad9c:	f7f5 fbba 	bl	8000514 <__aeabi_ui2d>
 800ada0:	2301      	movs	r3, #1
 800ada2:	4606      	mov	r6, r0
 800ada4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ada8:	3d01      	subs	r5, #1
 800adaa:	9310      	str	r3, [sp, #64]	; 0x40
 800adac:	e771      	b.n	800ac92 <_dtoa_r+0x11a>
 800adae:	2301      	movs	r3, #1
 800adb0:	e7b6      	b.n	800ad20 <_dtoa_r+0x1a8>
 800adb2:	900e      	str	r0, [sp, #56]	; 0x38
 800adb4:	e7b5      	b.n	800ad22 <_dtoa_r+0x1aa>
 800adb6:	f1ca 0300 	rsb	r3, sl, #0
 800adba:	9306      	str	r3, [sp, #24]
 800adbc:	2300      	movs	r3, #0
 800adbe:	eba8 080a 	sub.w	r8, r8, sl
 800adc2:	930d      	str	r3, [sp, #52]	; 0x34
 800adc4:	e7c2      	b.n	800ad4c <_dtoa_r+0x1d4>
 800adc6:	2300      	movs	r3, #0
 800adc8:	9308      	str	r3, [sp, #32]
 800adca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dc39      	bgt.n	800ae44 <_dtoa_r+0x2cc>
 800add0:	f04f 0901 	mov.w	r9, #1
 800add4:	f8cd 9004 	str.w	r9, [sp, #4]
 800add8:	464b      	mov	r3, r9
 800adda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800adde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ade0:	2200      	movs	r2, #0
 800ade2:	6042      	str	r2, [r0, #4]
 800ade4:	2204      	movs	r2, #4
 800ade6:	f102 0614 	add.w	r6, r2, #20
 800adea:	429e      	cmp	r6, r3
 800adec:	6841      	ldr	r1, [r0, #4]
 800adee:	d92f      	bls.n	800ae50 <_dtoa_r+0x2d8>
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fcdd 	bl	800b7b0 <_Balloc>
 800adf6:	9000      	str	r0, [sp, #0]
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d14b      	bne.n	800ae94 <_dtoa_r+0x31c>
 800adfc:	4b24      	ldr	r3, [pc, #144]	; (800ae90 <_dtoa_r+0x318>)
 800adfe:	4602      	mov	r2, r0
 800ae00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae04:	e6d1      	b.n	800abaa <_dtoa_r+0x32>
 800ae06:	2301      	movs	r3, #1
 800ae08:	e7de      	b.n	800adc8 <_dtoa_r+0x250>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9308      	str	r3, [sp, #32]
 800ae0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae10:	eb0a 0903 	add.w	r9, sl, r3
 800ae14:	f109 0301 	add.w	r3, r9, #1
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	9301      	str	r3, [sp, #4]
 800ae1c:	bfb8      	it	lt
 800ae1e:	2301      	movlt	r3, #1
 800ae20:	e7dd      	b.n	800adde <_dtoa_r+0x266>
 800ae22:	2301      	movs	r3, #1
 800ae24:	e7f2      	b.n	800ae0c <_dtoa_r+0x294>
 800ae26:	2501      	movs	r5, #1
 800ae28:	2300      	movs	r3, #0
 800ae2a:	9305      	str	r3, [sp, #20]
 800ae2c:	9508      	str	r5, [sp, #32]
 800ae2e:	f04f 39ff 	mov.w	r9, #4294967295
 800ae32:	2200      	movs	r2, #0
 800ae34:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae38:	2312      	movs	r3, #18
 800ae3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae3c:	e7cf      	b.n	800adde <_dtoa_r+0x266>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	9308      	str	r3, [sp, #32]
 800ae42:	e7f4      	b.n	800ae2e <_dtoa_r+0x2b6>
 800ae44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ae48:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae4c:	464b      	mov	r3, r9
 800ae4e:	e7c6      	b.n	800adde <_dtoa_r+0x266>
 800ae50:	3101      	adds	r1, #1
 800ae52:	6041      	str	r1, [r0, #4]
 800ae54:	0052      	lsls	r2, r2, #1
 800ae56:	e7c6      	b.n	800ade6 <_dtoa_r+0x26e>
 800ae58:	636f4361 	.word	0x636f4361
 800ae5c:	3fd287a7 	.word	0x3fd287a7
 800ae60:	8b60c8b3 	.word	0x8b60c8b3
 800ae64:	3fc68a28 	.word	0x3fc68a28
 800ae68:	509f79fb 	.word	0x509f79fb
 800ae6c:	3fd34413 	.word	0x3fd34413
 800ae70:	0800d199 	.word	0x0800d199
 800ae74:	0800d1b0 	.word	0x0800d1b0
 800ae78:	7ff00000 	.word	0x7ff00000
 800ae7c:	0800d195 	.word	0x0800d195
 800ae80:	0800d18c 	.word	0x0800d18c
 800ae84:	0800d12d 	.word	0x0800d12d
 800ae88:	3ff80000 	.word	0x3ff80000
 800ae8c:	0800d2b8 	.word	0x0800d2b8
 800ae90:	0800d20f 	.word	0x0800d20f
 800ae94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae96:	9a00      	ldr	r2, [sp, #0]
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	9b01      	ldr	r3, [sp, #4]
 800ae9c:	2b0e      	cmp	r3, #14
 800ae9e:	f200 80ad 	bhi.w	800affc <_dtoa_r+0x484>
 800aea2:	2d00      	cmp	r5, #0
 800aea4:	f000 80aa 	beq.w	800affc <_dtoa_r+0x484>
 800aea8:	f1ba 0f00 	cmp.w	sl, #0
 800aeac:	dd36      	ble.n	800af1c <_dtoa_r+0x3a4>
 800aeae:	4ac3      	ldr	r2, [pc, #780]	; (800b1bc <_dtoa_r+0x644>)
 800aeb0:	f00a 030f 	and.w	r3, sl, #15
 800aeb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aeb8:	ed93 7b00 	vldr	d7, [r3]
 800aebc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aec0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aec4:	eeb0 8a47 	vmov.f32	s16, s14
 800aec8:	eef0 8a67 	vmov.f32	s17, s15
 800aecc:	d016      	beq.n	800aefc <_dtoa_r+0x384>
 800aece:	4bbc      	ldr	r3, [pc, #752]	; (800b1c0 <_dtoa_r+0x648>)
 800aed0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aed8:	f7f5 fcc0 	bl	800085c <__aeabi_ddiv>
 800aedc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aee0:	f007 070f 	and.w	r7, r7, #15
 800aee4:	2503      	movs	r5, #3
 800aee6:	4eb6      	ldr	r6, [pc, #728]	; (800b1c0 <_dtoa_r+0x648>)
 800aee8:	b957      	cbnz	r7, 800af00 <_dtoa_r+0x388>
 800aeea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeee:	ec53 2b18 	vmov	r2, r3, d8
 800aef2:	f7f5 fcb3 	bl	800085c <__aeabi_ddiv>
 800aef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aefa:	e029      	b.n	800af50 <_dtoa_r+0x3d8>
 800aefc:	2502      	movs	r5, #2
 800aefe:	e7f2      	b.n	800aee6 <_dtoa_r+0x36e>
 800af00:	07f9      	lsls	r1, r7, #31
 800af02:	d508      	bpl.n	800af16 <_dtoa_r+0x39e>
 800af04:	ec51 0b18 	vmov	r0, r1, d8
 800af08:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af0c:	f7f5 fb7c 	bl	8000608 <__aeabi_dmul>
 800af10:	ec41 0b18 	vmov	d8, r0, r1
 800af14:	3501      	adds	r5, #1
 800af16:	107f      	asrs	r7, r7, #1
 800af18:	3608      	adds	r6, #8
 800af1a:	e7e5      	b.n	800aee8 <_dtoa_r+0x370>
 800af1c:	f000 80a6 	beq.w	800b06c <_dtoa_r+0x4f4>
 800af20:	f1ca 0600 	rsb	r6, sl, #0
 800af24:	4ba5      	ldr	r3, [pc, #660]	; (800b1bc <_dtoa_r+0x644>)
 800af26:	4fa6      	ldr	r7, [pc, #664]	; (800b1c0 <_dtoa_r+0x648>)
 800af28:	f006 020f 	and.w	r2, r6, #15
 800af2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af38:	f7f5 fb66 	bl	8000608 <__aeabi_dmul>
 800af3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af40:	1136      	asrs	r6, r6, #4
 800af42:	2300      	movs	r3, #0
 800af44:	2502      	movs	r5, #2
 800af46:	2e00      	cmp	r6, #0
 800af48:	f040 8085 	bne.w	800b056 <_dtoa_r+0x4de>
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1d2      	bne.n	800aef6 <_dtoa_r+0x37e>
 800af50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 808c 	beq.w	800b070 <_dtoa_r+0x4f8>
 800af58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af5c:	4b99      	ldr	r3, [pc, #612]	; (800b1c4 <_dtoa_r+0x64c>)
 800af5e:	2200      	movs	r2, #0
 800af60:	4630      	mov	r0, r6
 800af62:	4639      	mov	r1, r7
 800af64:	f7f5 fdc2 	bl	8000aec <__aeabi_dcmplt>
 800af68:	2800      	cmp	r0, #0
 800af6a:	f000 8081 	beq.w	800b070 <_dtoa_r+0x4f8>
 800af6e:	9b01      	ldr	r3, [sp, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d07d      	beq.n	800b070 <_dtoa_r+0x4f8>
 800af74:	f1b9 0f00 	cmp.w	r9, #0
 800af78:	dd3c      	ble.n	800aff4 <_dtoa_r+0x47c>
 800af7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	2200      	movs	r2, #0
 800af82:	4b91      	ldr	r3, [pc, #580]	; (800b1c8 <_dtoa_r+0x650>)
 800af84:	4630      	mov	r0, r6
 800af86:	4639      	mov	r1, r7
 800af88:	f7f5 fb3e 	bl	8000608 <__aeabi_dmul>
 800af8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af90:	3501      	adds	r5, #1
 800af92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800af96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af9a:	4628      	mov	r0, r5
 800af9c:	f7f5 faca 	bl	8000534 <__aeabi_i2d>
 800afa0:	4632      	mov	r2, r6
 800afa2:	463b      	mov	r3, r7
 800afa4:	f7f5 fb30 	bl	8000608 <__aeabi_dmul>
 800afa8:	4b88      	ldr	r3, [pc, #544]	; (800b1cc <_dtoa_r+0x654>)
 800afaa:	2200      	movs	r2, #0
 800afac:	f7f5 f976 	bl	800029c <__adddf3>
 800afb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800afb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afb8:	9303      	str	r3, [sp, #12]
 800afba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d15c      	bne.n	800b07a <_dtoa_r+0x502>
 800afc0:	4b83      	ldr	r3, [pc, #524]	; (800b1d0 <_dtoa_r+0x658>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	4630      	mov	r0, r6
 800afc6:	4639      	mov	r1, r7
 800afc8:	f7f5 f966 	bl	8000298 <__aeabi_dsub>
 800afcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afd0:	4606      	mov	r6, r0
 800afd2:	460f      	mov	r7, r1
 800afd4:	f7f5 fda8 	bl	8000b28 <__aeabi_dcmpgt>
 800afd8:	2800      	cmp	r0, #0
 800afda:	f040 8296 	bne.w	800b50a <_dtoa_r+0x992>
 800afde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800afe2:	4630      	mov	r0, r6
 800afe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afe8:	4639      	mov	r1, r7
 800afea:	f7f5 fd7f 	bl	8000aec <__aeabi_dcmplt>
 800afee:	2800      	cmp	r0, #0
 800aff0:	f040 8288 	bne.w	800b504 <_dtoa_r+0x98c>
 800aff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800affc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800affe:	2b00      	cmp	r3, #0
 800b000:	f2c0 8158 	blt.w	800b2b4 <_dtoa_r+0x73c>
 800b004:	f1ba 0f0e 	cmp.w	sl, #14
 800b008:	f300 8154 	bgt.w	800b2b4 <_dtoa_r+0x73c>
 800b00c:	4b6b      	ldr	r3, [pc, #428]	; (800b1bc <_dtoa_r+0x644>)
 800b00e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b012:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f280 80e3 	bge.w	800b1e4 <_dtoa_r+0x66c>
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	f300 80df 	bgt.w	800b1e4 <_dtoa_r+0x66c>
 800b026:	f040 826d 	bne.w	800b504 <_dtoa_r+0x98c>
 800b02a:	4b69      	ldr	r3, [pc, #420]	; (800b1d0 <_dtoa_r+0x658>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	4640      	mov	r0, r8
 800b030:	4649      	mov	r1, r9
 800b032:	f7f5 fae9 	bl	8000608 <__aeabi_dmul>
 800b036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b03a:	f7f5 fd6b 	bl	8000b14 <__aeabi_dcmpge>
 800b03e:	9e01      	ldr	r6, [sp, #4]
 800b040:	4637      	mov	r7, r6
 800b042:	2800      	cmp	r0, #0
 800b044:	f040 8243 	bne.w	800b4ce <_dtoa_r+0x956>
 800b048:	9d00      	ldr	r5, [sp, #0]
 800b04a:	2331      	movs	r3, #49	; 0x31
 800b04c:	f805 3b01 	strb.w	r3, [r5], #1
 800b050:	f10a 0a01 	add.w	sl, sl, #1
 800b054:	e23f      	b.n	800b4d6 <_dtoa_r+0x95e>
 800b056:	07f2      	lsls	r2, r6, #31
 800b058:	d505      	bpl.n	800b066 <_dtoa_r+0x4ee>
 800b05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05e:	f7f5 fad3 	bl	8000608 <__aeabi_dmul>
 800b062:	3501      	adds	r5, #1
 800b064:	2301      	movs	r3, #1
 800b066:	1076      	asrs	r6, r6, #1
 800b068:	3708      	adds	r7, #8
 800b06a:	e76c      	b.n	800af46 <_dtoa_r+0x3ce>
 800b06c:	2502      	movs	r5, #2
 800b06e:	e76f      	b.n	800af50 <_dtoa_r+0x3d8>
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	f8cd a01c 	str.w	sl, [sp, #28]
 800b076:	930c      	str	r3, [sp, #48]	; 0x30
 800b078:	e78d      	b.n	800af96 <_dtoa_r+0x41e>
 800b07a:	9900      	ldr	r1, [sp, #0]
 800b07c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b080:	4b4e      	ldr	r3, [pc, #312]	; (800b1bc <_dtoa_r+0x644>)
 800b082:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b086:	4401      	add	r1, r0
 800b088:	9102      	str	r1, [sp, #8]
 800b08a:	9908      	ldr	r1, [sp, #32]
 800b08c:	eeb0 8a47 	vmov.f32	s16, s14
 800b090:	eef0 8a67 	vmov.f32	s17, s15
 800b094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b098:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b09c:	2900      	cmp	r1, #0
 800b09e:	d045      	beq.n	800b12c <_dtoa_r+0x5b4>
 800b0a0:	494c      	ldr	r1, [pc, #304]	; (800b1d4 <_dtoa_r+0x65c>)
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	f7f5 fbda 	bl	800085c <__aeabi_ddiv>
 800b0a8:	ec53 2b18 	vmov	r2, r3, d8
 800b0ac:	f7f5 f8f4 	bl	8000298 <__aeabi_dsub>
 800b0b0:	9d00      	ldr	r5, [sp, #0]
 800b0b2:	ec41 0b18 	vmov	d8, r0, r1
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7f5 fd55 	bl	8000b68 <__aeabi_d2iz>
 800b0be:	900c      	str	r0, [sp, #48]	; 0x30
 800b0c0:	f7f5 fa38 	bl	8000534 <__aeabi_i2d>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f7f5 f8e4 	bl	8000298 <__aeabi_dsub>
 800b0d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0d2:	3330      	adds	r3, #48	; 0x30
 800b0d4:	f805 3b01 	strb.w	r3, [r5], #1
 800b0d8:	ec53 2b18 	vmov	r2, r3, d8
 800b0dc:	4606      	mov	r6, r0
 800b0de:	460f      	mov	r7, r1
 800b0e0:	f7f5 fd04 	bl	8000aec <__aeabi_dcmplt>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d165      	bne.n	800b1b4 <_dtoa_r+0x63c>
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	4935      	ldr	r1, [pc, #212]	; (800b1c4 <_dtoa_r+0x64c>)
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	f7f5 f8d2 	bl	8000298 <__aeabi_dsub>
 800b0f4:	ec53 2b18 	vmov	r2, r3, d8
 800b0f8:	f7f5 fcf8 	bl	8000aec <__aeabi_dcmplt>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	f040 80b9 	bne.w	800b274 <_dtoa_r+0x6fc>
 800b102:	9b02      	ldr	r3, [sp, #8]
 800b104:	429d      	cmp	r5, r3
 800b106:	f43f af75 	beq.w	800aff4 <_dtoa_r+0x47c>
 800b10a:	4b2f      	ldr	r3, [pc, #188]	; (800b1c8 <_dtoa_r+0x650>)
 800b10c:	ec51 0b18 	vmov	r0, r1, d8
 800b110:	2200      	movs	r2, #0
 800b112:	f7f5 fa79 	bl	8000608 <__aeabi_dmul>
 800b116:	4b2c      	ldr	r3, [pc, #176]	; (800b1c8 <_dtoa_r+0x650>)
 800b118:	ec41 0b18 	vmov	d8, r0, r1
 800b11c:	2200      	movs	r2, #0
 800b11e:	4630      	mov	r0, r6
 800b120:	4639      	mov	r1, r7
 800b122:	f7f5 fa71 	bl	8000608 <__aeabi_dmul>
 800b126:	4606      	mov	r6, r0
 800b128:	460f      	mov	r7, r1
 800b12a:	e7c4      	b.n	800b0b6 <_dtoa_r+0x53e>
 800b12c:	ec51 0b17 	vmov	r0, r1, d7
 800b130:	f7f5 fa6a 	bl	8000608 <__aeabi_dmul>
 800b134:	9b02      	ldr	r3, [sp, #8]
 800b136:	9d00      	ldr	r5, [sp, #0]
 800b138:	930c      	str	r3, [sp, #48]	; 0x30
 800b13a:	ec41 0b18 	vmov	d8, r0, r1
 800b13e:	4639      	mov	r1, r7
 800b140:	4630      	mov	r0, r6
 800b142:	f7f5 fd11 	bl	8000b68 <__aeabi_d2iz>
 800b146:	9011      	str	r0, [sp, #68]	; 0x44
 800b148:	f7f5 f9f4 	bl	8000534 <__aeabi_i2d>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4630      	mov	r0, r6
 800b152:	4639      	mov	r1, r7
 800b154:	f7f5 f8a0 	bl	8000298 <__aeabi_dsub>
 800b158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b15a:	3330      	adds	r3, #48	; 0x30
 800b15c:	f805 3b01 	strb.w	r3, [r5], #1
 800b160:	9b02      	ldr	r3, [sp, #8]
 800b162:	429d      	cmp	r5, r3
 800b164:	4606      	mov	r6, r0
 800b166:	460f      	mov	r7, r1
 800b168:	f04f 0200 	mov.w	r2, #0
 800b16c:	d134      	bne.n	800b1d8 <_dtoa_r+0x660>
 800b16e:	4b19      	ldr	r3, [pc, #100]	; (800b1d4 <_dtoa_r+0x65c>)
 800b170:	ec51 0b18 	vmov	r0, r1, d8
 800b174:	f7f5 f892 	bl	800029c <__adddf3>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4630      	mov	r0, r6
 800b17e:	4639      	mov	r1, r7
 800b180:	f7f5 fcd2 	bl	8000b28 <__aeabi_dcmpgt>
 800b184:	2800      	cmp	r0, #0
 800b186:	d175      	bne.n	800b274 <_dtoa_r+0x6fc>
 800b188:	ec53 2b18 	vmov	r2, r3, d8
 800b18c:	4911      	ldr	r1, [pc, #68]	; (800b1d4 <_dtoa_r+0x65c>)
 800b18e:	2000      	movs	r0, #0
 800b190:	f7f5 f882 	bl	8000298 <__aeabi_dsub>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4630      	mov	r0, r6
 800b19a:	4639      	mov	r1, r7
 800b19c:	f7f5 fca6 	bl	8000aec <__aeabi_dcmplt>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	f43f af27 	beq.w	800aff4 <_dtoa_r+0x47c>
 800b1a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1a8:	1e6b      	subs	r3, r5, #1
 800b1aa:	930c      	str	r3, [sp, #48]	; 0x30
 800b1ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1b0:	2b30      	cmp	r3, #48	; 0x30
 800b1b2:	d0f8      	beq.n	800b1a6 <_dtoa_r+0x62e>
 800b1b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b1b8:	e04a      	b.n	800b250 <_dtoa_r+0x6d8>
 800b1ba:	bf00      	nop
 800b1bc:	0800d2b8 	.word	0x0800d2b8
 800b1c0:	0800d290 	.word	0x0800d290
 800b1c4:	3ff00000 	.word	0x3ff00000
 800b1c8:	40240000 	.word	0x40240000
 800b1cc:	401c0000 	.word	0x401c0000
 800b1d0:	40140000 	.word	0x40140000
 800b1d4:	3fe00000 	.word	0x3fe00000
 800b1d8:	4baf      	ldr	r3, [pc, #700]	; (800b498 <_dtoa_r+0x920>)
 800b1da:	f7f5 fa15 	bl	8000608 <__aeabi_dmul>
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	e7ac      	b.n	800b13e <_dtoa_r+0x5c6>
 800b1e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b1e8:	9d00      	ldr	r5, [sp, #0]
 800b1ea:	4642      	mov	r2, r8
 800b1ec:	464b      	mov	r3, r9
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	f7f5 fb33 	bl	800085c <__aeabi_ddiv>
 800b1f6:	f7f5 fcb7 	bl	8000b68 <__aeabi_d2iz>
 800b1fa:	9002      	str	r0, [sp, #8]
 800b1fc:	f7f5 f99a 	bl	8000534 <__aeabi_i2d>
 800b200:	4642      	mov	r2, r8
 800b202:	464b      	mov	r3, r9
 800b204:	f7f5 fa00 	bl	8000608 <__aeabi_dmul>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	4630      	mov	r0, r6
 800b20e:	4639      	mov	r1, r7
 800b210:	f7f5 f842 	bl	8000298 <__aeabi_dsub>
 800b214:	9e02      	ldr	r6, [sp, #8]
 800b216:	9f01      	ldr	r7, [sp, #4]
 800b218:	3630      	adds	r6, #48	; 0x30
 800b21a:	f805 6b01 	strb.w	r6, [r5], #1
 800b21e:	9e00      	ldr	r6, [sp, #0]
 800b220:	1bae      	subs	r6, r5, r6
 800b222:	42b7      	cmp	r7, r6
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	d137      	bne.n	800b29a <_dtoa_r+0x722>
 800b22a:	f7f5 f837 	bl	800029c <__adddf3>
 800b22e:	4642      	mov	r2, r8
 800b230:	464b      	mov	r3, r9
 800b232:	4606      	mov	r6, r0
 800b234:	460f      	mov	r7, r1
 800b236:	f7f5 fc77 	bl	8000b28 <__aeabi_dcmpgt>
 800b23a:	b9c8      	cbnz	r0, 800b270 <_dtoa_r+0x6f8>
 800b23c:	4642      	mov	r2, r8
 800b23e:	464b      	mov	r3, r9
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	f7f5 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 800b248:	b110      	cbz	r0, 800b250 <_dtoa_r+0x6d8>
 800b24a:	9b02      	ldr	r3, [sp, #8]
 800b24c:	07d9      	lsls	r1, r3, #31
 800b24e:	d40f      	bmi.n	800b270 <_dtoa_r+0x6f8>
 800b250:	4620      	mov	r0, r4
 800b252:	4659      	mov	r1, fp
 800b254:	f000 faec 	bl	800b830 <_Bfree>
 800b258:	2300      	movs	r3, #0
 800b25a:	702b      	strb	r3, [r5, #0]
 800b25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b25e:	f10a 0001 	add.w	r0, sl, #1
 800b262:	6018      	str	r0, [r3, #0]
 800b264:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b266:	2b00      	cmp	r3, #0
 800b268:	f43f acd8 	beq.w	800ac1c <_dtoa_r+0xa4>
 800b26c:	601d      	str	r5, [r3, #0]
 800b26e:	e4d5      	b.n	800ac1c <_dtoa_r+0xa4>
 800b270:	f8cd a01c 	str.w	sl, [sp, #28]
 800b274:	462b      	mov	r3, r5
 800b276:	461d      	mov	r5, r3
 800b278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b27c:	2a39      	cmp	r2, #57	; 0x39
 800b27e:	d108      	bne.n	800b292 <_dtoa_r+0x71a>
 800b280:	9a00      	ldr	r2, [sp, #0]
 800b282:	429a      	cmp	r2, r3
 800b284:	d1f7      	bne.n	800b276 <_dtoa_r+0x6fe>
 800b286:	9a07      	ldr	r2, [sp, #28]
 800b288:	9900      	ldr	r1, [sp, #0]
 800b28a:	3201      	adds	r2, #1
 800b28c:	9207      	str	r2, [sp, #28]
 800b28e:	2230      	movs	r2, #48	; 0x30
 800b290:	700a      	strb	r2, [r1, #0]
 800b292:	781a      	ldrb	r2, [r3, #0]
 800b294:	3201      	adds	r2, #1
 800b296:	701a      	strb	r2, [r3, #0]
 800b298:	e78c      	b.n	800b1b4 <_dtoa_r+0x63c>
 800b29a:	4b7f      	ldr	r3, [pc, #508]	; (800b498 <_dtoa_r+0x920>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	f7f5 f9b3 	bl	8000608 <__aeabi_dmul>
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460f      	mov	r7, r1
 800b2aa:	f7f5 fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d09b      	beq.n	800b1ea <_dtoa_r+0x672>
 800b2b2:	e7cd      	b.n	800b250 <_dtoa_r+0x6d8>
 800b2b4:	9a08      	ldr	r2, [sp, #32]
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	f000 80c4 	beq.w	800b444 <_dtoa_r+0x8cc>
 800b2bc:	9a05      	ldr	r2, [sp, #20]
 800b2be:	2a01      	cmp	r2, #1
 800b2c0:	f300 80a8 	bgt.w	800b414 <_dtoa_r+0x89c>
 800b2c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	f000 80a0 	beq.w	800b40c <_dtoa_r+0x894>
 800b2cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2d0:	9e06      	ldr	r6, [sp, #24]
 800b2d2:	4645      	mov	r5, r8
 800b2d4:	9a04      	ldr	r2, [sp, #16]
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	441a      	add	r2, r3
 800b2da:	4620      	mov	r0, r4
 800b2dc:	4498      	add	r8, r3
 800b2de:	9204      	str	r2, [sp, #16]
 800b2e0:	f000 fb62 	bl	800b9a8 <__i2b>
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	2d00      	cmp	r5, #0
 800b2e8:	dd0b      	ble.n	800b302 <_dtoa_r+0x78a>
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dd08      	ble.n	800b302 <_dtoa_r+0x78a>
 800b2f0:	42ab      	cmp	r3, r5
 800b2f2:	9a04      	ldr	r2, [sp, #16]
 800b2f4:	bfa8      	it	ge
 800b2f6:	462b      	movge	r3, r5
 800b2f8:	eba8 0803 	sub.w	r8, r8, r3
 800b2fc:	1aed      	subs	r5, r5, r3
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	b1fb      	cbz	r3, 800b346 <_dtoa_r+0x7ce>
 800b306:	9b08      	ldr	r3, [sp, #32]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 809f 	beq.w	800b44c <_dtoa_r+0x8d4>
 800b30e:	2e00      	cmp	r6, #0
 800b310:	dd11      	ble.n	800b336 <_dtoa_r+0x7be>
 800b312:	4639      	mov	r1, r7
 800b314:	4632      	mov	r2, r6
 800b316:	4620      	mov	r0, r4
 800b318:	f000 fc02 	bl	800bb20 <__pow5mult>
 800b31c:	465a      	mov	r2, fp
 800b31e:	4601      	mov	r1, r0
 800b320:	4607      	mov	r7, r0
 800b322:	4620      	mov	r0, r4
 800b324:	f000 fb56 	bl	800b9d4 <__multiply>
 800b328:	4659      	mov	r1, fp
 800b32a:	9007      	str	r0, [sp, #28]
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 fa7f 	bl	800b830 <_Bfree>
 800b332:	9b07      	ldr	r3, [sp, #28]
 800b334:	469b      	mov	fp, r3
 800b336:	9b06      	ldr	r3, [sp, #24]
 800b338:	1b9a      	subs	r2, r3, r6
 800b33a:	d004      	beq.n	800b346 <_dtoa_r+0x7ce>
 800b33c:	4659      	mov	r1, fp
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 fbee 	bl	800bb20 <__pow5mult>
 800b344:	4683      	mov	fp, r0
 800b346:	2101      	movs	r1, #1
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fb2d 	bl	800b9a8 <__i2b>
 800b34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b350:	2b00      	cmp	r3, #0
 800b352:	4606      	mov	r6, r0
 800b354:	dd7c      	ble.n	800b450 <_dtoa_r+0x8d8>
 800b356:	461a      	mov	r2, r3
 800b358:	4601      	mov	r1, r0
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fbe0 	bl	800bb20 <__pow5mult>
 800b360:	9b05      	ldr	r3, [sp, #20]
 800b362:	2b01      	cmp	r3, #1
 800b364:	4606      	mov	r6, r0
 800b366:	dd76      	ble.n	800b456 <_dtoa_r+0x8de>
 800b368:	2300      	movs	r3, #0
 800b36a:	9306      	str	r3, [sp, #24]
 800b36c:	6933      	ldr	r3, [r6, #16]
 800b36e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b372:	6918      	ldr	r0, [r3, #16]
 800b374:	f000 fac8 	bl	800b908 <__hi0bits>
 800b378:	f1c0 0020 	rsb	r0, r0, #32
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	4418      	add	r0, r3
 800b380:	f010 001f 	ands.w	r0, r0, #31
 800b384:	f000 8086 	beq.w	800b494 <_dtoa_r+0x91c>
 800b388:	f1c0 0320 	rsb	r3, r0, #32
 800b38c:	2b04      	cmp	r3, #4
 800b38e:	dd7f      	ble.n	800b490 <_dtoa_r+0x918>
 800b390:	f1c0 001c 	rsb	r0, r0, #28
 800b394:	9b04      	ldr	r3, [sp, #16]
 800b396:	4403      	add	r3, r0
 800b398:	4480      	add	r8, r0
 800b39a:	4405      	add	r5, r0
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	f1b8 0f00 	cmp.w	r8, #0
 800b3a2:	dd05      	ble.n	800b3b0 <_dtoa_r+0x838>
 800b3a4:	4659      	mov	r1, fp
 800b3a6:	4642      	mov	r2, r8
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 fc13 	bl	800bbd4 <__lshift>
 800b3ae:	4683      	mov	fp, r0
 800b3b0:	9b04      	ldr	r3, [sp, #16]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dd05      	ble.n	800b3c2 <_dtoa_r+0x84a>
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 fc0a 	bl	800bbd4 <__lshift>
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d069      	beq.n	800b49c <_dtoa_r+0x924>
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	4658      	mov	r0, fp
 800b3cc:	f000 fc6e 	bl	800bcac <__mcmp>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	da63      	bge.n	800b49c <_dtoa_r+0x924>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4659      	mov	r1, fp
 800b3d8:	220a      	movs	r2, #10
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 fa4a 	bl	800b874 <__multadd>
 800b3e0:	9b08      	ldr	r3, [sp, #32]
 800b3e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3e6:	4683      	mov	fp, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 818f 	beq.w	800b70c <_dtoa_r+0xb94>
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	220a      	movs	r2, #10
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 fa3d 	bl	800b874 <__multadd>
 800b3fa:	f1b9 0f00 	cmp.w	r9, #0
 800b3fe:	4607      	mov	r7, r0
 800b400:	f300 808e 	bgt.w	800b520 <_dtoa_r+0x9a8>
 800b404:	9b05      	ldr	r3, [sp, #20]
 800b406:	2b02      	cmp	r3, #2
 800b408:	dc50      	bgt.n	800b4ac <_dtoa_r+0x934>
 800b40a:	e089      	b.n	800b520 <_dtoa_r+0x9a8>
 800b40c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b40e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b412:	e75d      	b.n	800b2d0 <_dtoa_r+0x758>
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	1e5e      	subs	r6, r3, #1
 800b418:	9b06      	ldr	r3, [sp, #24]
 800b41a:	42b3      	cmp	r3, r6
 800b41c:	bfbf      	itttt	lt
 800b41e:	9b06      	ldrlt	r3, [sp, #24]
 800b420:	9606      	strlt	r6, [sp, #24]
 800b422:	1af2      	sublt	r2, r6, r3
 800b424:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b426:	bfb6      	itet	lt
 800b428:	189b      	addlt	r3, r3, r2
 800b42a:	1b9e      	subge	r6, r3, r6
 800b42c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b42e:	9b01      	ldr	r3, [sp, #4]
 800b430:	bfb8      	it	lt
 800b432:	2600      	movlt	r6, #0
 800b434:	2b00      	cmp	r3, #0
 800b436:	bfb5      	itete	lt
 800b438:	eba8 0503 	sublt.w	r5, r8, r3
 800b43c:	9b01      	ldrge	r3, [sp, #4]
 800b43e:	2300      	movlt	r3, #0
 800b440:	4645      	movge	r5, r8
 800b442:	e747      	b.n	800b2d4 <_dtoa_r+0x75c>
 800b444:	9e06      	ldr	r6, [sp, #24]
 800b446:	9f08      	ldr	r7, [sp, #32]
 800b448:	4645      	mov	r5, r8
 800b44a:	e74c      	b.n	800b2e6 <_dtoa_r+0x76e>
 800b44c:	9a06      	ldr	r2, [sp, #24]
 800b44e:	e775      	b.n	800b33c <_dtoa_r+0x7c4>
 800b450:	9b05      	ldr	r3, [sp, #20]
 800b452:	2b01      	cmp	r3, #1
 800b454:	dc18      	bgt.n	800b488 <_dtoa_r+0x910>
 800b456:	9b02      	ldr	r3, [sp, #8]
 800b458:	b9b3      	cbnz	r3, 800b488 <_dtoa_r+0x910>
 800b45a:	9b03      	ldr	r3, [sp, #12]
 800b45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b460:	b9a3      	cbnz	r3, 800b48c <_dtoa_r+0x914>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b468:	0d1b      	lsrs	r3, r3, #20
 800b46a:	051b      	lsls	r3, r3, #20
 800b46c:	b12b      	cbz	r3, 800b47a <_dtoa_r+0x902>
 800b46e:	9b04      	ldr	r3, [sp, #16]
 800b470:	3301      	adds	r3, #1
 800b472:	9304      	str	r3, [sp, #16]
 800b474:	f108 0801 	add.w	r8, r8, #1
 800b478:	2301      	movs	r3, #1
 800b47a:	9306      	str	r3, [sp, #24]
 800b47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f47f af74 	bne.w	800b36c <_dtoa_r+0x7f4>
 800b484:	2001      	movs	r0, #1
 800b486:	e779      	b.n	800b37c <_dtoa_r+0x804>
 800b488:	2300      	movs	r3, #0
 800b48a:	e7f6      	b.n	800b47a <_dtoa_r+0x902>
 800b48c:	9b02      	ldr	r3, [sp, #8]
 800b48e:	e7f4      	b.n	800b47a <_dtoa_r+0x902>
 800b490:	d085      	beq.n	800b39e <_dtoa_r+0x826>
 800b492:	4618      	mov	r0, r3
 800b494:	301c      	adds	r0, #28
 800b496:	e77d      	b.n	800b394 <_dtoa_r+0x81c>
 800b498:	40240000 	.word	0x40240000
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dc38      	bgt.n	800b514 <_dtoa_r+0x99c>
 800b4a2:	9b05      	ldr	r3, [sp, #20]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	dd35      	ble.n	800b514 <_dtoa_r+0x99c>
 800b4a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b4ac:	f1b9 0f00 	cmp.w	r9, #0
 800b4b0:	d10d      	bne.n	800b4ce <_dtoa_r+0x956>
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	464b      	mov	r3, r9
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 f9db 	bl	800b874 <__multadd>
 800b4be:	4601      	mov	r1, r0
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	4658      	mov	r0, fp
 800b4c4:	f000 fbf2 	bl	800bcac <__mcmp>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f73f adbd 	bgt.w	800b048 <_dtoa_r+0x4d0>
 800b4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d0:	9d00      	ldr	r5, [sp, #0]
 800b4d2:	ea6f 0a03 	mvn.w	sl, r3
 800b4d6:	f04f 0800 	mov.w	r8, #0
 800b4da:	4631      	mov	r1, r6
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f000 f9a7 	bl	800b830 <_Bfree>
 800b4e2:	2f00      	cmp	r7, #0
 800b4e4:	f43f aeb4 	beq.w	800b250 <_dtoa_r+0x6d8>
 800b4e8:	f1b8 0f00 	cmp.w	r8, #0
 800b4ec:	d005      	beq.n	800b4fa <_dtoa_r+0x982>
 800b4ee:	45b8      	cmp	r8, r7
 800b4f0:	d003      	beq.n	800b4fa <_dtoa_r+0x982>
 800b4f2:	4641      	mov	r1, r8
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 f99b 	bl	800b830 <_Bfree>
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 f997 	bl	800b830 <_Bfree>
 800b502:	e6a5      	b.n	800b250 <_dtoa_r+0x6d8>
 800b504:	2600      	movs	r6, #0
 800b506:	4637      	mov	r7, r6
 800b508:	e7e1      	b.n	800b4ce <_dtoa_r+0x956>
 800b50a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b50c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b510:	4637      	mov	r7, r6
 800b512:	e599      	b.n	800b048 <_dtoa_r+0x4d0>
 800b514:	9b08      	ldr	r3, [sp, #32]
 800b516:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 80fd 	beq.w	800b71a <_dtoa_r+0xba2>
 800b520:	2d00      	cmp	r5, #0
 800b522:	dd05      	ble.n	800b530 <_dtoa_r+0x9b8>
 800b524:	4639      	mov	r1, r7
 800b526:	462a      	mov	r2, r5
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 fb53 	bl	800bbd4 <__lshift>
 800b52e:	4607      	mov	r7, r0
 800b530:	9b06      	ldr	r3, [sp, #24]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d05c      	beq.n	800b5f0 <_dtoa_r+0xa78>
 800b536:	6879      	ldr	r1, [r7, #4]
 800b538:	4620      	mov	r0, r4
 800b53a:	f000 f939 	bl	800b7b0 <_Balloc>
 800b53e:	4605      	mov	r5, r0
 800b540:	b928      	cbnz	r0, 800b54e <_dtoa_r+0x9d6>
 800b542:	4b80      	ldr	r3, [pc, #512]	; (800b744 <_dtoa_r+0xbcc>)
 800b544:	4602      	mov	r2, r0
 800b546:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b54a:	f7ff bb2e 	b.w	800abaa <_dtoa_r+0x32>
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	3202      	adds	r2, #2
 800b552:	0092      	lsls	r2, r2, #2
 800b554:	f107 010c 	add.w	r1, r7, #12
 800b558:	300c      	adds	r0, #12
 800b55a:	f7fe fdc1 	bl	800a0e0 <memcpy>
 800b55e:	2201      	movs	r2, #1
 800b560:	4629      	mov	r1, r5
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fb36 	bl	800bbd4 <__lshift>
 800b568:	9b00      	ldr	r3, [sp, #0]
 800b56a:	3301      	adds	r3, #1
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	9b00      	ldr	r3, [sp, #0]
 800b570:	444b      	add	r3, r9
 800b572:	9307      	str	r3, [sp, #28]
 800b574:	9b02      	ldr	r3, [sp, #8]
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	46b8      	mov	r8, r7
 800b57c:	9306      	str	r3, [sp, #24]
 800b57e:	4607      	mov	r7, r0
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	4631      	mov	r1, r6
 800b584:	3b01      	subs	r3, #1
 800b586:	4658      	mov	r0, fp
 800b588:	9302      	str	r3, [sp, #8]
 800b58a:	f7ff fa67 	bl	800aa5c <quorem>
 800b58e:	4603      	mov	r3, r0
 800b590:	3330      	adds	r3, #48	; 0x30
 800b592:	9004      	str	r0, [sp, #16]
 800b594:	4641      	mov	r1, r8
 800b596:	4658      	mov	r0, fp
 800b598:	9308      	str	r3, [sp, #32]
 800b59a:	f000 fb87 	bl	800bcac <__mcmp>
 800b59e:	463a      	mov	r2, r7
 800b5a0:	4681      	mov	r9, r0
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 fb9d 	bl	800bce4 <__mdiff>
 800b5aa:	68c2      	ldr	r2, [r0, #12]
 800b5ac:	9b08      	ldr	r3, [sp, #32]
 800b5ae:	4605      	mov	r5, r0
 800b5b0:	bb02      	cbnz	r2, 800b5f4 <_dtoa_r+0xa7c>
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	4658      	mov	r0, fp
 800b5b6:	f000 fb79 	bl	800bcac <__mcmp>
 800b5ba:	9b08      	ldr	r3, [sp, #32]
 800b5bc:	4602      	mov	r2, r0
 800b5be:	4629      	mov	r1, r5
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b5c6:	f000 f933 	bl	800b830 <_Bfree>
 800b5ca:	9b05      	ldr	r3, [sp, #20]
 800b5cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ce:	9d01      	ldr	r5, [sp, #4]
 800b5d0:	ea43 0102 	orr.w	r1, r3, r2
 800b5d4:	9b06      	ldr	r3, [sp, #24]
 800b5d6:	430b      	orrs	r3, r1
 800b5d8:	9b08      	ldr	r3, [sp, #32]
 800b5da:	d10d      	bne.n	800b5f8 <_dtoa_r+0xa80>
 800b5dc:	2b39      	cmp	r3, #57	; 0x39
 800b5de:	d029      	beq.n	800b634 <_dtoa_r+0xabc>
 800b5e0:	f1b9 0f00 	cmp.w	r9, #0
 800b5e4:	dd01      	ble.n	800b5ea <_dtoa_r+0xa72>
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	3331      	adds	r3, #49	; 0x31
 800b5ea:	9a02      	ldr	r2, [sp, #8]
 800b5ec:	7013      	strb	r3, [r2, #0]
 800b5ee:	e774      	b.n	800b4da <_dtoa_r+0x962>
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	e7b9      	b.n	800b568 <_dtoa_r+0x9f0>
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	e7e2      	b.n	800b5be <_dtoa_r+0xa46>
 800b5f8:	f1b9 0f00 	cmp.w	r9, #0
 800b5fc:	db06      	blt.n	800b60c <_dtoa_r+0xa94>
 800b5fe:	9905      	ldr	r1, [sp, #20]
 800b600:	ea41 0909 	orr.w	r9, r1, r9
 800b604:	9906      	ldr	r1, [sp, #24]
 800b606:	ea59 0101 	orrs.w	r1, r9, r1
 800b60a:	d120      	bne.n	800b64e <_dtoa_r+0xad6>
 800b60c:	2a00      	cmp	r2, #0
 800b60e:	ddec      	ble.n	800b5ea <_dtoa_r+0xa72>
 800b610:	4659      	mov	r1, fp
 800b612:	2201      	movs	r2, #1
 800b614:	4620      	mov	r0, r4
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	f000 fadc 	bl	800bbd4 <__lshift>
 800b61c:	4631      	mov	r1, r6
 800b61e:	4683      	mov	fp, r0
 800b620:	f000 fb44 	bl	800bcac <__mcmp>
 800b624:	2800      	cmp	r0, #0
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	dc02      	bgt.n	800b630 <_dtoa_r+0xab8>
 800b62a:	d1de      	bne.n	800b5ea <_dtoa_r+0xa72>
 800b62c:	07da      	lsls	r2, r3, #31
 800b62e:	d5dc      	bpl.n	800b5ea <_dtoa_r+0xa72>
 800b630:	2b39      	cmp	r3, #57	; 0x39
 800b632:	d1d8      	bne.n	800b5e6 <_dtoa_r+0xa6e>
 800b634:	9a02      	ldr	r2, [sp, #8]
 800b636:	2339      	movs	r3, #57	; 0x39
 800b638:	7013      	strb	r3, [r2, #0]
 800b63a:	462b      	mov	r3, r5
 800b63c:	461d      	mov	r5, r3
 800b63e:	3b01      	subs	r3, #1
 800b640:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b644:	2a39      	cmp	r2, #57	; 0x39
 800b646:	d050      	beq.n	800b6ea <_dtoa_r+0xb72>
 800b648:	3201      	adds	r2, #1
 800b64a:	701a      	strb	r2, [r3, #0]
 800b64c:	e745      	b.n	800b4da <_dtoa_r+0x962>
 800b64e:	2a00      	cmp	r2, #0
 800b650:	dd03      	ble.n	800b65a <_dtoa_r+0xae2>
 800b652:	2b39      	cmp	r3, #57	; 0x39
 800b654:	d0ee      	beq.n	800b634 <_dtoa_r+0xabc>
 800b656:	3301      	adds	r3, #1
 800b658:	e7c7      	b.n	800b5ea <_dtoa_r+0xa72>
 800b65a:	9a01      	ldr	r2, [sp, #4]
 800b65c:	9907      	ldr	r1, [sp, #28]
 800b65e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b662:	428a      	cmp	r2, r1
 800b664:	d02a      	beq.n	800b6bc <_dtoa_r+0xb44>
 800b666:	4659      	mov	r1, fp
 800b668:	2300      	movs	r3, #0
 800b66a:	220a      	movs	r2, #10
 800b66c:	4620      	mov	r0, r4
 800b66e:	f000 f901 	bl	800b874 <__multadd>
 800b672:	45b8      	cmp	r8, r7
 800b674:	4683      	mov	fp, r0
 800b676:	f04f 0300 	mov.w	r3, #0
 800b67a:	f04f 020a 	mov.w	r2, #10
 800b67e:	4641      	mov	r1, r8
 800b680:	4620      	mov	r0, r4
 800b682:	d107      	bne.n	800b694 <_dtoa_r+0xb1c>
 800b684:	f000 f8f6 	bl	800b874 <__multadd>
 800b688:	4680      	mov	r8, r0
 800b68a:	4607      	mov	r7, r0
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	3301      	adds	r3, #1
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	e775      	b.n	800b580 <_dtoa_r+0xa08>
 800b694:	f000 f8ee 	bl	800b874 <__multadd>
 800b698:	4639      	mov	r1, r7
 800b69a:	4680      	mov	r8, r0
 800b69c:	2300      	movs	r3, #0
 800b69e:	220a      	movs	r2, #10
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 f8e7 	bl	800b874 <__multadd>
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	e7f0      	b.n	800b68c <_dtoa_r+0xb14>
 800b6aa:	f1b9 0f00 	cmp.w	r9, #0
 800b6ae:	9a00      	ldr	r2, [sp, #0]
 800b6b0:	bfcc      	ite	gt
 800b6b2:	464d      	movgt	r5, r9
 800b6b4:	2501      	movle	r5, #1
 800b6b6:	4415      	add	r5, r2
 800b6b8:	f04f 0800 	mov.w	r8, #0
 800b6bc:	4659      	mov	r1, fp
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	9301      	str	r3, [sp, #4]
 800b6c4:	f000 fa86 	bl	800bbd4 <__lshift>
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	4683      	mov	fp, r0
 800b6cc:	f000 faee 	bl	800bcac <__mcmp>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	dcb2      	bgt.n	800b63a <_dtoa_r+0xac2>
 800b6d4:	d102      	bne.n	800b6dc <_dtoa_r+0xb64>
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	07db      	lsls	r3, r3, #31
 800b6da:	d4ae      	bmi.n	800b63a <_dtoa_r+0xac2>
 800b6dc:	462b      	mov	r3, r5
 800b6de:	461d      	mov	r5, r3
 800b6e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6e4:	2a30      	cmp	r2, #48	; 0x30
 800b6e6:	d0fa      	beq.n	800b6de <_dtoa_r+0xb66>
 800b6e8:	e6f7      	b.n	800b4da <_dtoa_r+0x962>
 800b6ea:	9a00      	ldr	r2, [sp, #0]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d1a5      	bne.n	800b63c <_dtoa_r+0xac4>
 800b6f0:	f10a 0a01 	add.w	sl, sl, #1
 800b6f4:	2331      	movs	r3, #49	; 0x31
 800b6f6:	e779      	b.n	800b5ec <_dtoa_r+0xa74>
 800b6f8:	4b13      	ldr	r3, [pc, #76]	; (800b748 <_dtoa_r+0xbd0>)
 800b6fa:	f7ff baaf 	b.w	800ac5c <_dtoa_r+0xe4>
 800b6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b700:	2b00      	cmp	r3, #0
 800b702:	f47f aa86 	bne.w	800ac12 <_dtoa_r+0x9a>
 800b706:	4b11      	ldr	r3, [pc, #68]	; (800b74c <_dtoa_r+0xbd4>)
 800b708:	f7ff baa8 	b.w	800ac5c <_dtoa_r+0xe4>
 800b70c:	f1b9 0f00 	cmp.w	r9, #0
 800b710:	dc03      	bgt.n	800b71a <_dtoa_r+0xba2>
 800b712:	9b05      	ldr	r3, [sp, #20]
 800b714:	2b02      	cmp	r3, #2
 800b716:	f73f aec9 	bgt.w	800b4ac <_dtoa_r+0x934>
 800b71a:	9d00      	ldr	r5, [sp, #0]
 800b71c:	4631      	mov	r1, r6
 800b71e:	4658      	mov	r0, fp
 800b720:	f7ff f99c 	bl	800aa5c <quorem>
 800b724:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b728:	f805 3b01 	strb.w	r3, [r5], #1
 800b72c:	9a00      	ldr	r2, [sp, #0]
 800b72e:	1aaa      	subs	r2, r5, r2
 800b730:	4591      	cmp	r9, r2
 800b732:	ddba      	ble.n	800b6aa <_dtoa_r+0xb32>
 800b734:	4659      	mov	r1, fp
 800b736:	2300      	movs	r3, #0
 800b738:	220a      	movs	r2, #10
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 f89a 	bl	800b874 <__multadd>
 800b740:	4683      	mov	fp, r0
 800b742:	e7eb      	b.n	800b71c <_dtoa_r+0xba4>
 800b744:	0800d20f 	.word	0x0800d20f
 800b748:	0800d12c 	.word	0x0800d12c
 800b74c:	0800d18c 	.word	0x0800d18c

0800b750 <fiprintf>:
 800b750:	b40e      	push	{r1, r2, r3}
 800b752:	b503      	push	{r0, r1, lr}
 800b754:	4601      	mov	r1, r0
 800b756:	ab03      	add	r3, sp, #12
 800b758:	4805      	ldr	r0, [pc, #20]	; (800b770 <fiprintf+0x20>)
 800b75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75e:	6800      	ldr	r0, [r0, #0]
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	f000 fde3 	bl	800c32c <_vfiprintf_r>
 800b766:	b002      	add	sp, #8
 800b768:	f85d eb04 	ldr.w	lr, [sp], #4
 800b76c:	b003      	add	sp, #12
 800b76e:	4770      	bx	lr
 800b770:	20000014 	.word	0x20000014

0800b774 <_localeconv_r>:
 800b774:	4800      	ldr	r0, [pc, #0]	; (800b778 <_localeconv_r+0x4>)
 800b776:	4770      	bx	lr
 800b778:	20000168 	.word	0x20000168

0800b77c <malloc>:
 800b77c:	4b02      	ldr	r3, [pc, #8]	; (800b788 <malloc+0xc>)
 800b77e:	4601      	mov	r1, r0
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f000 bbf3 	b.w	800bf6c <_malloc_r>
 800b786:	bf00      	nop
 800b788:	20000014 	.word	0x20000014

0800b78c <__ascii_mbtowc>:
 800b78c:	b082      	sub	sp, #8
 800b78e:	b901      	cbnz	r1, 800b792 <__ascii_mbtowc+0x6>
 800b790:	a901      	add	r1, sp, #4
 800b792:	b142      	cbz	r2, 800b7a6 <__ascii_mbtowc+0x1a>
 800b794:	b14b      	cbz	r3, 800b7aa <__ascii_mbtowc+0x1e>
 800b796:	7813      	ldrb	r3, [r2, #0]
 800b798:	600b      	str	r3, [r1, #0]
 800b79a:	7812      	ldrb	r2, [r2, #0]
 800b79c:	1e10      	subs	r0, r2, #0
 800b79e:	bf18      	it	ne
 800b7a0:	2001      	movne	r0, #1
 800b7a2:	b002      	add	sp, #8
 800b7a4:	4770      	bx	lr
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	e7fb      	b.n	800b7a2 <__ascii_mbtowc+0x16>
 800b7aa:	f06f 0001 	mvn.w	r0, #1
 800b7ae:	e7f8      	b.n	800b7a2 <__ascii_mbtowc+0x16>

0800b7b0 <_Balloc>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	b976      	cbnz	r6, 800b7d8 <_Balloc+0x28>
 800b7ba:	2010      	movs	r0, #16
 800b7bc:	f7ff ffde 	bl	800b77c <malloc>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	6260      	str	r0, [r4, #36]	; 0x24
 800b7c4:	b920      	cbnz	r0, 800b7d0 <_Balloc+0x20>
 800b7c6:	4b18      	ldr	r3, [pc, #96]	; (800b828 <_Balloc+0x78>)
 800b7c8:	4818      	ldr	r0, [pc, #96]	; (800b82c <_Balloc+0x7c>)
 800b7ca:	2166      	movs	r1, #102	; 0x66
 800b7cc:	f7ff f928 	bl	800aa20 <__assert_func>
 800b7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7d4:	6006      	str	r6, [r0, #0]
 800b7d6:	60c6      	str	r6, [r0, #12]
 800b7d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b7da:	68f3      	ldr	r3, [r6, #12]
 800b7dc:	b183      	cbz	r3, 800b800 <_Balloc+0x50>
 800b7de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7e6:	b9b8      	cbnz	r0, 800b818 <_Balloc+0x68>
 800b7e8:	2101      	movs	r1, #1
 800b7ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b7ee:	1d72      	adds	r2, r6, #5
 800b7f0:	0092      	lsls	r2, r2, #2
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 fb5a 	bl	800beac <_calloc_r>
 800b7f8:	b160      	cbz	r0, 800b814 <_Balloc+0x64>
 800b7fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7fe:	e00e      	b.n	800b81e <_Balloc+0x6e>
 800b800:	2221      	movs	r2, #33	; 0x21
 800b802:	2104      	movs	r1, #4
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fb51 	bl	800beac <_calloc_r>
 800b80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b80c:	60f0      	str	r0, [r6, #12]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1e4      	bne.n	800b7de <_Balloc+0x2e>
 800b814:	2000      	movs	r0, #0
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	6802      	ldr	r2, [r0, #0]
 800b81a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b81e:	2300      	movs	r3, #0
 800b820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b824:	e7f7      	b.n	800b816 <_Balloc+0x66>
 800b826:	bf00      	nop
 800b828:	0800d199 	.word	0x0800d199
 800b82c:	0800d22a 	.word	0x0800d22a

0800b830 <_Bfree>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b834:	4605      	mov	r5, r0
 800b836:	460c      	mov	r4, r1
 800b838:	b976      	cbnz	r6, 800b858 <_Bfree+0x28>
 800b83a:	2010      	movs	r0, #16
 800b83c:	f7ff ff9e 	bl	800b77c <malloc>
 800b840:	4602      	mov	r2, r0
 800b842:	6268      	str	r0, [r5, #36]	; 0x24
 800b844:	b920      	cbnz	r0, 800b850 <_Bfree+0x20>
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <_Bfree+0x3c>)
 800b848:	4809      	ldr	r0, [pc, #36]	; (800b870 <_Bfree+0x40>)
 800b84a:	218a      	movs	r1, #138	; 0x8a
 800b84c:	f7ff f8e8 	bl	800aa20 <__assert_func>
 800b850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b854:	6006      	str	r6, [r0, #0]
 800b856:	60c6      	str	r6, [r0, #12]
 800b858:	b13c      	cbz	r4, 800b86a <_Bfree+0x3a>
 800b85a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b85c:	6862      	ldr	r2, [r4, #4]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b864:	6021      	str	r1, [r4, #0]
 800b866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
 800b86c:	0800d199 	.word	0x0800d199
 800b870:	0800d22a 	.word	0x0800d22a

0800b874 <__multadd>:
 800b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b878:	690e      	ldr	r6, [r1, #16]
 800b87a:	4607      	mov	r7, r0
 800b87c:	4698      	mov	r8, r3
 800b87e:	460c      	mov	r4, r1
 800b880:	f101 0014 	add.w	r0, r1, #20
 800b884:	2300      	movs	r3, #0
 800b886:	6805      	ldr	r5, [r0, #0]
 800b888:	b2a9      	uxth	r1, r5
 800b88a:	fb02 8101 	mla	r1, r2, r1, r8
 800b88e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b892:	0c2d      	lsrs	r5, r5, #16
 800b894:	fb02 c505 	mla	r5, r2, r5, ip
 800b898:	b289      	uxth	r1, r1
 800b89a:	3301      	adds	r3, #1
 800b89c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b8a0:	429e      	cmp	r6, r3
 800b8a2:	f840 1b04 	str.w	r1, [r0], #4
 800b8a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b8aa:	dcec      	bgt.n	800b886 <__multadd+0x12>
 800b8ac:	f1b8 0f00 	cmp.w	r8, #0
 800b8b0:	d022      	beq.n	800b8f8 <__multadd+0x84>
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	42b3      	cmp	r3, r6
 800b8b6:	dc19      	bgt.n	800b8ec <__multadd+0x78>
 800b8b8:	6861      	ldr	r1, [r4, #4]
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	3101      	adds	r1, #1
 800b8be:	f7ff ff77 	bl	800b7b0 <_Balloc>
 800b8c2:	4605      	mov	r5, r0
 800b8c4:	b928      	cbnz	r0, 800b8d2 <__multadd+0x5e>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <__multadd+0x8c>)
 800b8ca:	480e      	ldr	r0, [pc, #56]	; (800b904 <__multadd+0x90>)
 800b8cc:	21b5      	movs	r1, #181	; 0xb5
 800b8ce:	f7ff f8a7 	bl	800aa20 <__assert_func>
 800b8d2:	6922      	ldr	r2, [r4, #16]
 800b8d4:	3202      	adds	r2, #2
 800b8d6:	f104 010c 	add.w	r1, r4, #12
 800b8da:	0092      	lsls	r2, r2, #2
 800b8dc:	300c      	adds	r0, #12
 800b8de:	f7fe fbff 	bl	800a0e0 <memcpy>
 800b8e2:	4621      	mov	r1, r4
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	f7ff ffa3 	bl	800b830 <_Bfree>
 800b8ea:	462c      	mov	r4, r5
 800b8ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b8f0:	3601      	adds	r6, #1
 800b8f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b8f6:	6126      	str	r6, [r4, #16]
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8fe:	bf00      	nop
 800b900:	0800d20f 	.word	0x0800d20f
 800b904:	0800d22a 	.word	0x0800d22a

0800b908 <__hi0bits>:
 800b908:	0c03      	lsrs	r3, r0, #16
 800b90a:	041b      	lsls	r3, r3, #16
 800b90c:	b9d3      	cbnz	r3, 800b944 <__hi0bits+0x3c>
 800b90e:	0400      	lsls	r0, r0, #16
 800b910:	2310      	movs	r3, #16
 800b912:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b916:	bf04      	itt	eq
 800b918:	0200      	lsleq	r0, r0, #8
 800b91a:	3308      	addeq	r3, #8
 800b91c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b920:	bf04      	itt	eq
 800b922:	0100      	lsleq	r0, r0, #4
 800b924:	3304      	addeq	r3, #4
 800b926:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b92a:	bf04      	itt	eq
 800b92c:	0080      	lsleq	r0, r0, #2
 800b92e:	3302      	addeq	r3, #2
 800b930:	2800      	cmp	r0, #0
 800b932:	db05      	blt.n	800b940 <__hi0bits+0x38>
 800b934:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b938:	f103 0301 	add.w	r3, r3, #1
 800b93c:	bf08      	it	eq
 800b93e:	2320      	moveq	r3, #32
 800b940:	4618      	mov	r0, r3
 800b942:	4770      	bx	lr
 800b944:	2300      	movs	r3, #0
 800b946:	e7e4      	b.n	800b912 <__hi0bits+0xa>

0800b948 <__lo0bits>:
 800b948:	6803      	ldr	r3, [r0, #0]
 800b94a:	f013 0207 	ands.w	r2, r3, #7
 800b94e:	4601      	mov	r1, r0
 800b950:	d00b      	beq.n	800b96a <__lo0bits+0x22>
 800b952:	07da      	lsls	r2, r3, #31
 800b954:	d424      	bmi.n	800b9a0 <__lo0bits+0x58>
 800b956:	0798      	lsls	r0, r3, #30
 800b958:	bf49      	itett	mi
 800b95a:	085b      	lsrmi	r3, r3, #1
 800b95c:	089b      	lsrpl	r3, r3, #2
 800b95e:	2001      	movmi	r0, #1
 800b960:	600b      	strmi	r3, [r1, #0]
 800b962:	bf5c      	itt	pl
 800b964:	600b      	strpl	r3, [r1, #0]
 800b966:	2002      	movpl	r0, #2
 800b968:	4770      	bx	lr
 800b96a:	b298      	uxth	r0, r3
 800b96c:	b9b0      	cbnz	r0, 800b99c <__lo0bits+0x54>
 800b96e:	0c1b      	lsrs	r3, r3, #16
 800b970:	2010      	movs	r0, #16
 800b972:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b976:	bf04      	itt	eq
 800b978:	0a1b      	lsreq	r3, r3, #8
 800b97a:	3008      	addeq	r0, #8
 800b97c:	071a      	lsls	r2, r3, #28
 800b97e:	bf04      	itt	eq
 800b980:	091b      	lsreq	r3, r3, #4
 800b982:	3004      	addeq	r0, #4
 800b984:	079a      	lsls	r2, r3, #30
 800b986:	bf04      	itt	eq
 800b988:	089b      	lsreq	r3, r3, #2
 800b98a:	3002      	addeq	r0, #2
 800b98c:	07da      	lsls	r2, r3, #31
 800b98e:	d403      	bmi.n	800b998 <__lo0bits+0x50>
 800b990:	085b      	lsrs	r3, r3, #1
 800b992:	f100 0001 	add.w	r0, r0, #1
 800b996:	d005      	beq.n	800b9a4 <__lo0bits+0x5c>
 800b998:	600b      	str	r3, [r1, #0]
 800b99a:	4770      	bx	lr
 800b99c:	4610      	mov	r0, r2
 800b99e:	e7e8      	b.n	800b972 <__lo0bits+0x2a>
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	4770      	bx	lr
 800b9a4:	2020      	movs	r0, #32
 800b9a6:	4770      	bx	lr

0800b9a8 <__i2b>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	f7ff feff 	bl	800b7b0 <_Balloc>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	b928      	cbnz	r0, 800b9c2 <__i2b+0x1a>
 800b9b6:	4b05      	ldr	r3, [pc, #20]	; (800b9cc <__i2b+0x24>)
 800b9b8:	4805      	ldr	r0, [pc, #20]	; (800b9d0 <__i2b+0x28>)
 800b9ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9be:	f7ff f82f 	bl	800aa20 <__assert_func>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	6144      	str	r4, [r0, #20]
 800b9c6:	6103      	str	r3, [r0, #16]
 800b9c8:	bd10      	pop	{r4, pc}
 800b9ca:	bf00      	nop
 800b9cc:	0800d20f 	.word	0x0800d20f
 800b9d0:	0800d22a 	.word	0x0800d22a

0800b9d4 <__multiply>:
 800b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	4614      	mov	r4, r2
 800b9da:	690a      	ldr	r2, [r1, #16]
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	bfb8      	it	lt
 800b9e2:	460b      	movlt	r3, r1
 800b9e4:	460d      	mov	r5, r1
 800b9e6:	bfbc      	itt	lt
 800b9e8:	4625      	movlt	r5, r4
 800b9ea:	461c      	movlt	r4, r3
 800b9ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b9f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b9f4:	68ab      	ldr	r3, [r5, #8]
 800b9f6:	6869      	ldr	r1, [r5, #4]
 800b9f8:	eb0a 0709 	add.w	r7, sl, r9
 800b9fc:	42bb      	cmp	r3, r7
 800b9fe:	b085      	sub	sp, #20
 800ba00:	bfb8      	it	lt
 800ba02:	3101      	addlt	r1, #1
 800ba04:	f7ff fed4 	bl	800b7b0 <_Balloc>
 800ba08:	b930      	cbnz	r0, 800ba18 <__multiply+0x44>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	4b42      	ldr	r3, [pc, #264]	; (800bb18 <__multiply+0x144>)
 800ba0e:	4843      	ldr	r0, [pc, #268]	; (800bb1c <__multiply+0x148>)
 800ba10:	f240 115d 	movw	r1, #349	; 0x15d
 800ba14:	f7ff f804 	bl	800aa20 <__assert_func>
 800ba18:	f100 0614 	add.w	r6, r0, #20
 800ba1c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ba20:	4633      	mov	r3, r6
 800ba22:	2200      	movs	r2, #0
 800ba24:	4543      	cmp	r3, r8
 800ba26:	d31e      	bcc.n	800ba66 <__multiply+0x92>
 800ba28:	f105 0c14 	add.w	ip, r5, #20
 800ba2c:	f104 0314 	add.w	r3, r4, #20
 800ba30:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ba34:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ba38:	9202      	str	r2, [sp, #8]
 800ba3a:	ebac 0205 	sub.w	r2, ip, r5
 800ba3e:	3a15      	subs	r2, #21
 800ba40:	f022 0203 	bic.w	r2, r2, #3
 800ba44:	3204      	adds	r2, #4
 800ba46:	f105 0115 	add.w	r1, r5, #21
 800ba4a:	458c      	cmp	ip, r1
 800ba4c:	bf38      	it	cc
 800ba4e:	2204      	movcc	r2, #4
 800ba50:	9201      	str	r2, [sp, #4]
 800ba52:	9a02      	ldr	r2, [sp, #8]
 800ba54:	9303      	str	r3, [sp, #12]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d808      	bhi.n	800ba6c <__multiply+0x98>
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	dc55      	bgt.n	800bb0a <__multiply+0x136>
 800ba5e:	6107      	str	r7, [r0, #16]
 800ba60:	b005      	add	sp, #20
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	f843 2b04 	str.w	r2, [r3], #4
 800ba6a:	e7db      	b.n	800ba24 <__multiply+0x50>
 800ba6c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba70:	f1ba 0f00 	cmp.w	sl, #0
 800ba74:	d020      	beq.n	800bab8 <__multiply+0xe4>
 800ba76:	f105 0e14 	add.w	lr, r5, #20
 800ba7a:	46b1      	mov	r9, r6
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ba82:	f8d9 b000 	ldr.w	fp, [r9]
 800ba86:	b2a1      	uxth	r1, r4
 800ba88:	fa1f fb8b 	uxth.w	fp, fp
 800ba8c:	fb0a b101 	mla	r1, sl, r1, fp
 800ba90:	4411      	add	r1, r2
 800ba92:	f8d9 2000 	ldr.w	r2, [r9]
 800ba96:	0c24      	lsrs	r4, r4, #16
 800ba98:	0c12      	lsrs	r2, r2, #16
 800ba9a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ba9e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800baa2:	b289      	uxth	r1, r1
 800baa4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800baa8:	45f4      	cmp	ip, lr
 800baaa:	f849 1b04 	str.w	r1, [r9], #4
 800baae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bab2:	d8e4      	bhi.n	800ba7e <__multiply+0xaa>
 800bab4:	9901      	ldr	r1, [sp, #4]
 800bab6:	5072      	str	r2, [r6, r1]
 800bab8:	9a03      	ldr	r2, [sp, #12]
 800baba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800babe:	3304      	adds	r3, #4
 800bac0:	f1b9 0f00 	cmp.w	r9, #0
 800bac4:	d01f      	beq.n	800bb06 <__multiply+0x132>
 800bac6:	6834      	ldr	r4, [r6, #0]
 800bac8:	f105 0114 	add.w	r1, r5, #20
 800bacc:	46b6      	mov	lr, r6
 800bace:	f04f 0a00 	mov.w	sl, #0
 800bad2:	880a      	ldrh	r2, [r1, #0]
 800bad4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bad8:	fb09 b202 	mla	r2, r9, r2, fp
 800badc:	4492      	add	sl, r2
 800bade:	b2a4      	uxth	r4, r4
 800bae0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bae4:	f84e 4b04 	str.w	r4, [lr], #4
 800bae8:	f851 4b04 	ldr.w	r4, [r1], #4
 800baec:	f8be 2000 	ldrh.w	r2, [lr]
 800baf0:	0c24      	lsrs	r4, r4, #16
 800baf2:	fb09 2404 	mla	r4, r9, r4, r2
 800baf6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bafa:	458c      	cmp	ip, r1
 800bafc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb00:	d8e7      	bhi.n	800bad2 <__multiply+0xfe>
 800bb02:	9a01      	ldr	r2, [sp, #4]
 800bb04:	50b4      	str	r4, [r6, r2]
 800bb06:	3604      	adds	r6, #4
 800bb08:	e7a3      	b.n	800ba52 <__multiply+0x7e>
 800bb0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1a5      	bne.n	800ba5e <__multiply+0x8a>
 800bb12:	3f01      	subs	r7, #1
 800bb14:	e7a1      	b.n	800ba5a <__multiply+0x86>
 800bb16:	bf00      	nop
 800bb18:	0800d20f 	.word	0x0800d20f
 800bb1c:	0800d22a 	.word	0x0800d22a

0800bb20 <__pow5mult>:
 800bb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb24:	4615      	mov	r5, r2
 800bb26:	f012 0203 	ands.w	r2, r2, #3
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	460f      	mov	r7, r1
 800bb2e:	d007      	beq.n	800bb40 <__pow5mult+0x20>
 800bb30:	4c25      	ldr	r4, [pc, #148]	; (800bbc8 <__pow5mult+0xa8>)
 800bb32:	3a01      	subs	r2, #1
 800bb34:	2300      	movs	r3, #0
 800bb36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb3a:	f7ff fe9b 	bl	800b874 <__multadd>
 800bb3e:	4607      	mov	r7, r0
 800bb40:	10ad      	asrs	r5, r5, #2
 800bb42:	d03d      	beq.n	800bbc0 <__pow5mult+0xa0>
 800bb44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb46:	b97c      	cbnz	r4, 800bb68 <__pow5mult+0x48>
 800bb48:	2010      	movs	r0, #16
 800bb4a:	f7ff fe17 	bl	800b77c <malloc>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	6270      	str	r0, [r6, #36]	; 0x24
 800bb52:	b928      	cbnz	r0, 800bb60 <__pow5mult+0x40>
 800bb54:	4b1d      	ldr	r3, [pc, #116]	; (800bbcc <__pow5mult+0xac>)
 800bb56:	481e      	ldr	r0, [pc, #120]	; (800bbd0 <__pow5mult+0xb0>)
 800bb58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb5c:	f7fe ff60 	bl	800aa20 <__assert_func>
 800bb60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb64:	6004      	str	r4, [r0, #0]
 800bb66:	60c4      	str	r4, [r0, #12]
 800bb68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb70:	b94c      	cbnz	r4, 800bb86 <__pow5mult+0x66>
 800bb72:	f240 2171 	movw	r1, #625	; 0x271
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7ff ff16 	bl	800b9a8 <__i2b>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb82:	4604      	mov	r4, r0
 800bb84:	6003      	str	r3, [r0, #0]
 800bb86:	f04f 0900 	mov.w	r9, #0
 800bb8a:	07eb      	lsls	r3, r5, #31
 800bb8c:	d50a      	bpl.n	800bba4 <__pow5mult+0x84>
 800bb8e:	4639      	mov	r1, r7
 800bb90:	4622      	mov	r2, r4
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff ff1e 	bl	800b9d4 <__multiply>
 800bb98:	4639      	mov	r1, r7
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7ff fe47 	bl	800b830 <_Bfree>
 800bba2:	4647      	mov	r7, r8
 800bba4:	106d      	asrs	r5, r5, #1
 800bba6:	d00b      	beq.n	800bbc0 <__pow5mult+0xa0>
 800bba8:	6820      	ldr	r0, [r4, #0]
 800bbaa:	b938      	cbnz	r0, 800bbbc <__pow5mult+0x9c>
 800bbac:	4622      	mov	r2, r4
 800bbae:	4621      	mov	r1, r4
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff ff0f 	bl	800b9d4 <__multiply>
 800bbb6:	6020      	str	r0, [r4, #0]
 800bbb8:	f8c0 9000 	str.w	r9, [r0]
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	e7e4      	b.n	800bb8a <__pow5mult+0x6a>
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc6:	bf00      	nop
 800bbc8:	0800d380 	.word	0x0800d380
 800bbcc:	0800d199 	.word	0x0800d199
 800bbd0:	0800d22a 	.word	0x0800d22a

0800bbd4 <__lshift>:
 800bbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd8:	460c      	mov	r4, r1
 800bbda:	6849      	ldr	r1, [r1, #4]
 800bbdc:	6923      	ldr	r3, [r4, #16]
 800bbde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbe2:	68a3      	ldr	r3, [r4, #8]
 800bbe4:	4607      	mov	r7, r0
 800bbe6:	4691      	mov	r9, r2
 800bbe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbec:	f108 0601 	add.w	r6, r8, #1
 800bbf0:	42b3      	cmp	r3, r6
 800bbf2:	db0b      	blt.n	800bc0c <__lshift+0x38>
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f7ff fddb 	bl	800b7b0 <_Balloc>
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	b948      	cbnz	r0, 800bc12 <__lshift+0x3e>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	4b28      	ldr	r3, [pc, #160]	; (800bca4 <__lshift+0xd0>)
 800bc02:	4829      	ldr	r0, [pc, #164]	; (800bca8 <__lshift+0xd4>)
 800bc04:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc08:	f7fe ff0a 	bl	800aa20 <__assert_func>
 800bc0c:	3101      	adds	r1, #1
 800bc0e:	005b      	lsls	r3, r3, #1
 800bc10:	e7ee      	b.n	800bbf0 <__lshift+0x1c>
 800bc12:	2300      	movs	r3, #0
 800bc14:	f100 0114 	add.w	r1, r0, #20
 800bc18:	f100 0210 	add.w	r2, r0, #16
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	4553      	cmp	r3, sl
 800bc20:	db33      	blt.n	800bc8a <__lshift+0xb6>
 800bc22:	6920      	ldr	r0, [r4, #16]
 800bc24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc28:	f104 0314 	add.w	r3, r4, #20
 800bc2c:	f019 091f 	ands.w	r9, r9, #31
 800bc30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc38:	d02b      	beq.n	800bc92 <__lshift+0xbe>
 800bc3a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc3e:	468a      	mov	sl, r1
 800bc40:	2200      	movs	r2, #0
 800bc42:	6818      	ldr	r0, [r3, #0]
 800bc44:	fa00 f009 	lsl.w	r0, r0, r9
 800bc48:	4302      	orrs	r2, r0
 800bc4a:	f84a 2b04 	str.w	r2, [sl], #4
 800bc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc52:	459c      	cmp	ip, r3
 800bc54:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc58:	d8f3      	bhi.n	800bc42 <__lshift+0x6e>
 800bc5a:	ebac 0304 	sub.w	r3, ip, r4
 800bc5e:	3b15      	subs	r3, #21
 800bc60:	f023 0303 	bic.w	r3, r3, #3
 800bc64:	3304      	adds	r3, #4
 800bc66:	f104 0015 	add.w	r0, r4, #21
 800bc6a:	4584      	cmp	ip, r0
 800bc6c:	bf38      	it	cc
 800bc6e:	2304      	movcc	r3, #4
 800bc70:	50ca      	str	r2, [r1, r3]
 800bc72:	b10a      	cbz	r2, 800bc78 <__lshift+0xa4>
 800bc74:	f108 0602 	add.w	r6, r8, #2
 800bc78:	3e01      	subs	r6, #1
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	612e      	str	r6, [r5, #16]
 800bc7e:	4621      	mov	r1, r4
 800bc80:	f7ff fdd6 	bl	800b830 <_Bfree>
 800bc84:	4628      	mov	r0, r5
 800bc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc8e:	3301      	adds	r3, #1
 800bc90:	e7c5      	b.n	800bc1e <__lshift+0x4a>
 800bc92:	3904      	subs	r1, #4
 800bc94:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc98:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc9c:	459c      	cmp	ip, r3
 800bc9e:	d8f9      	bhi.n	800bc94 <__lshift+0xc0>
 800bca0:	e7ea      	b.n	800bc78 <__lshift+0xa4>
 800bca2:	bf00      	nop
 800bca4:	0800d20f 	.word	0x0800d20f
 800bca8:	0800d22a 	.word	0x0800d22a

0800bcac <__mcmp>:
 800bcac:	b530      	push	{r4, r5, lr}
 800bcae:	6902      	ldr	r2, [r0, #16]
 800bcb0:	690c      	ldr	r4, [r1, #16]
 800bcb2:	1b12      	subs	r2, r2, r4
 800bcb4:	d10e      	bne.n	800bcd4 <__mcmp+0x28>
 800bcb6:	f100 0314 	add.w	r3, r0, #20
 800bcba:	3114      	adds	r1, #20
 800bcbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bcc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bcc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bcc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bccc:	42a5      	cmp	r5, r4
 800bcce:	d003      	beq.n	800bcd8 <__mcmp+0x2c>
 800bcd0:	d305      	bcc.n	800bcde <__mcmp+0x32>
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	bd30      	pop	{r4, r5, pc}
 800bcd8:	4283      	cmp	r3, r0
 800bcda:	d3f3      	bcc.n	800bcc4 <__mcmp+0x18>
 800bcdc:	e7fa      	b.n	800bcd4 <__mcmp+0x28>
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295
 800bce2:	e7f7      	b.n	800bcd4 <__mcmp+0x28>

0800bce4 <__mdiff>:
 800bce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce8:	460c      	mov	r4, r1
 800bcea:	4606      	mov	r6, r0
 800bcec:	4611      	mov	r1, r2
 800bcee:	4620      	mov	r0, r4
 800bcf0:	4617      	mov	r7, r2
 800bcf2:	f7ff ffdb 	bl	800bcac <__mcmp>
 800bcf6:	1e05      	subs	r5, r0, #0
 800bcf8:	d110      	bne.n	800bd1c <__mdiff+0x38>
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f7ff fd57 	bl	800b7b0 <_Balloc>
 800bd02:	b930      	cbnz	r0, 800bd12 <__mdiff+0x2e>
 800bd04:	4b39      	ldr	r3, [pc, #228]	; (800bdec <__mdiff+0x108>)
 800bd06:	4602      	mov	r2, r0
 800bd08:	f240 2132 	movw	r1, #562	; 0x232
 800bd0c:	4838      	ldr	r0, [pc, #224]	; (800bdf0 <__mdiff+0x10c>)
 800bd0e:	f7fe fe87 	bl	800aa20 <__assert_func>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1c:	bfa4      	itt	ge
 800bd1e:	463b      	movge	r3, r7
 800bd20:	4627      	movge	r7, r4
 800bd22:	4630      	mov	r0, r6
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	bfa6      	itte	ge
 800bd28:	461c      	movge	r4, r3
 800bd2a:	2500      	movge	r5, #0
 800bd2c:	2501      	movlt	r5, #1
 800bd2e:	f7ff fd3f 	bl	800b7b0 <_Balloc>
 800bd32:	b920      	cbnz	r0, 800bd3e <__mdiff+0x5a>
 800bd34:	4b2d      	ldr	r3, [pc, #180]	; (800bdec <__mdiff+0x108>)
 800bd36:	4602      	mov	r2, r0
 800bd38:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd3c:	e7e6      	b.n	800bd0c <__mdiff+0x28>
 800bd3e:	693e      	ldr	r6, [r7, #16]
 800bd40:	60c5      	str	r5, [r0, #12]
 800bd42:	6925      	ldr	r5, [r4, #16]
 800bd44:	f107 0114 	add.w	r1, r7, #20
 800bd48:	f104 0914 	add.w	r9, r4, #20
 800bd4c:	f100 0e14 	add.w	lr, r0, #20
 800bd50:	f107 0210 	add.w	r2, r7, #16
 800bd54:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bd58:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bd5c:	46f2      	mov	sl, lr
 800bd5e:	2700      	movs	r7, #0
 800bd60:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd68:	fa1f f883 	uxth.w	r8, r3
 800bd6c:	fa17 f78b 	uxtah	r7, r7, fp
 800bd70:	0c1b      	lsrs	r3, r3, #16
 800bd72:	eba7 0808 	sub.w	r8, r7, r8
 800bd76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd7e:	fa1f f888 	uxth.w	r8, r8
 800bd82:	141f      	asrs	r7, r3, #16
 800bd84:	454d      	cmp	r5, r9
 800bd86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd8a:	f84a 3b04 	str.w	r3, [sl], #4
 800bd8e:	d8e7      	bhi.n	800bd60 <__mdiff+0x7c>
 800bd90:	1b2b      	subs	r3, r5, r4
 800bd92:	3b15      	subs	r3, #21
 800bd94:	f023 0303 	bic.w	r3, r3, #3
 800bd98:	3304      	adds	r3, #4
 800bd9a:	3415      	adds	r4, #21
 800bd9c:	42a5      	cmp	r5, r4
 800bd9e:	bf38      	it	cc
 800bda0:	2304      	movcc	r3, #4
 800bda2:	4419      	add	r1, r3
 800bda4:	4473      	add	r3, lr
 800bda6:	469e      	mov	lr, r3
 800bda8:	460d      	mov	r5, r1
 800bdaa:	4565      	cmp	r5, ip
 800bdac:	d30e      	bcc.n	800bdcc <__mdiff+0xe8>
 800bdae:	f10c 0203 	add.w	r2, ip, #3
 800bdb2:	1a52      	subs	r2, r2, r1
 800bdb4:	f022 0203 	bic.w	r2, r2, #3
 800bdb8:	3903      	subs	r1, #3
 800bdba:	458c      	cmp	ip, r1
 800bdbc:	bf38      	it	cc
 800bdbe:	2200      	movcc	r2, #0
 800bdc0:	441a      	add	r2, r3
 800bdc2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bdc6:	b17b      	cbz	r3, 800bde8 <__mdiff+0x104>
 800bdc8:	6106      	str	r6, [r0, #16]
 800bdca:	e7a5      	b.n	800bd18 <__mdiff+0x34>
 800bdcc:	f855 8b04 	ldr.w	r8, [r5], #4
 800bdd0:	fa17 f488 	uxtah	r4, r7, r8
 800bdd4:	1422      	asrs	r2, r4, #16
 800bdd6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bdda:	b2a4      	uxth	r4, r4
 800bddc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bde0:	f84e 4b04 	str.w	r4, [lr], #4
 800bde4:	1417      	asrs	r7, r2, #16
 800bde6:	e7e0      	b.n	800bdaa <__mdiff+0xc6>
 800bde8:	3e01      	subs	r6, #1
 800bdea:	e7ea      	b.n	800bdc2 <__mdiff+0xde>
 800bdec:	0800d20f 	.word	0x0800d20f
 800bdf0:	0800d22a 	.word	0x0800d22a

0800bdf4 <__d2b>:
 800bdf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdf8:	4689      	mov	r9, r1
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	ec57 6b10 	vmov	r6, r7, d0
 800be00:	4690      	mov	r8, r2
 800be02:	f7ff fcd5 	bl	800b7b0 <_Balloc>
 800be06:	4604      	mov	r4, r0
 800be08:	b930      	cbnz	r0, 800be18 <__d2b+0x24>
 800be0a:	4602      	mov	r2, r0
 800be0c:	4b25      	ldr	r3, [pc, #148]	; (800bea4 <__d2b+0xb0>)
 800be0e:	4826      	ldr	r0, [pc, #152]	; (800bea8 <__d2b+0xb4>)
 800be10:	f240 310a 	movw	r1, #778	; 0x30a
 800be14:	f7fe fe04 	bl	800aa20 <__assert_func>
 800be18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be20:	bb35      	cbnz	r5, 800be70 <__d2b+0x7c>
 800be22:	2e00      	cmp	r6, #0
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	d028      	beq.n	800be7a <__d2b+0x86>
 800be28:	4668      	mov	r0, sp
 800be2a:	9600      	str	r6, [sp, #0]
 800be2c:	f7ff fd8c 	bl	800b948 <__lo0bits>
 800be30:	9900      	ldr	r1, [sp, #0]
 800be32:	b300      	cbz	r0, 800be76 <__d2b+0x82>
 800be34:	9a01      	ldr	r2, [sp, #4]
 800be36:	f1c0 0320 	rsb	r3, r0, #32
 800be3a:	fa02 f303 	lsl.w	r3, r2, r3
 800be3e:	430b      	orrs	r3, r1
 800be40:	40c2      	lsrs	r2, r0
 800be42:	6163      	str	r3, [r4, #20]
 800be44:	9201      	str	r2, [sp, #4]
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	61a3      	str	r3, [r4, #24]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	bf14      	ite	ne
 800be4e:	2202      	movne	r2, #2
 800be50:	2201      	moveq	r2, #1
 800be52:	6122      	str	r2, [r4, #16]
 800be54:	b1d5      	cbz	r5, 800be8c <__d2b+0x98>
 800be56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be5a:	4405      	add	r5, r0
 800be5c:	f8c9 5000 	str.w	r5, [r9]
 800be60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be64:	f8c8 0000 	str.w	r0, [r8]
 800be68:	4620      	mov	r0, r4
 800be6a:	b003      	add	sp, #12
 800be6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be74:	e7d5      	b.n	800be22 <__d2b+0x2e>
 800be76:	6161      	str	r1, [r4, #20]
 800be78:	e7e5      	b.n	800be46 <__d2b+0x52>
 800be7a:	a801      	add	r0, sp, #4
 800be7c:	f7ff fd64 	bl	800b948 <__lo0bits>
 800be80:	9b01      	ldr	r3, [sp, #4]
 800be82:	6163      	str	r3, [r4, #20]
 800be84:	2201      	movs	r2, #1
 800be86:	6122      	str	r2, [r4, #16]
 800be88:	3020      	adds	r0, #32
 800be8a:	e7e3      	b.n	800be54 <__d2b+0x60>
 800be8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be94:	f8c9 0000 	str.w	r0, [r9]
 800be98:	6918      	ldr	r0, [r3, #16]
 800be9a:	f7ff fd35 	bl	800b908 <__hi0bits>
 800be9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bea2:	e7df      	b.n	800be64 <__d2b+0x70>
 800bea4:	0800d20f 	.word	0x0800d20f
 800bea8:	0800d22a 	.word	0x0800d22a

0800beac <_calloc_r>:
 800beac:	b513      	push	{r0, r1, r4, lr}
 800beae:	434a      	muls	r2, r1
 800beb0:	4611      	mov	r1, r2
 800beb2:	9201      	str	r2, [sp, #4]
 800beb4:	f000 f85a 	bl	800bf6c <_malloc_r>
 800beb8:	4604      	mov	r4, r0
 800beba:	b118      	cbz	r0, 800bec4 <_calloc_r+0x18>
 800bebc:	9a01      	ldr	r2, [sp, #4]
 800bebe:	2100      	movs	r1, #0
 800bec0:	f7fe f91c 	bl	800a0fc <memset>
 800bec4:	4620      	mov	r0, r4
 800bec6:	b002      	add	sp, #8
 800bec8:	bd10      	pop	{r4, pc}
	...

0800becc <_free_r>:
 800becc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bece:	2900      	cmp	r1, #0
 800bed0:	d048      	beq.n	800bf64 <_free_r+0x98>
 800bed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bed6:	9001      	str	r0, [sp, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f1a1 0404 	sub.w	r4, r1, #4
 800bede:	bfb8      	it	lt
 800bee0:	18e4      	addlt	r4, r4, r3
 800bee2:	f000 fe71 	bl	800cbc8 <__malloc_lock>
 800bee6:	4a20      	ldr	r2, [pc, #128]	; (800bf68 <_free_r+0x9c>)
 800bee8:	9801      	ldr	r0, [sp, #4]
 800beea:	6813      	ldr	r3, [r2, #0]
 800beec:	4615      	mov	r5, r2
 800beee:	b933      	cbnz	r3, 800befe <_free_r+0x32>
 800bef0:	6063      	str	r3, [r4, #4]
 800bef2:	6014      	str	r4, [r2, #0]
 800bef4:	b003      	add	sp, #12
 800bef6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800befa:	f000 be6b 	b.w	800cbd4 <__malloc_unlock>
 800befe:	42a3      	cmp	r3, r4
 800bf00:	d90b      	bls.n	800bf1a <_free_r+0x4e>
 800bf02:	6821      	ldr	r1, [r4, #0]
 800bf04:	1862      	adds	r2, r4, r1
 800bf06:	4293      	cmp	r3, r2
 800bf08:	bf04      	itt	eq
 800bf0a:	681a      	ldreq	r2, [r3, #0]
 800bf0c:	685b      	ldreq	r3, [r3, #4]
 800bf0e:	6063      	str	r3, [r4, #4]
 800bf10:	bf04      	itt	eq
 800bf12:	1852      	addeq	r2, r2, r1
 800bf14:	6022      	streq	r2, [r4, #0]
 800bf16:	602c      	str	r4, [r5, #0]
 800bf18:	e7ec      	b.n	800bef4 <_free_r+0x28>
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	b10b      	cbz	r3, 800bf24 <_free_r+0x58>
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	d9fa      	bls.n	800bf1a <_free_r+0x4e>
 800bf24:	6811      	ldr	r1, [r2, #0]
 800bf26:	1855      	adds	r5, r2, r1
 800bf28:	42a5      	cmp	r5, r4
 800bf2a:	d10b      	bne.n	800bf44 <_free_r+0x78>
 800bf2c:	6824      	ldr	r4, [r4, #0]
 800bf2e:	4421      	add	r1, r4
 800bf30:	1854      	adds	r4, r2, r1
 800bf32:	42a3      	cmp	r3, r4
 800bf34:	6011      	str	r1, [r2, #0]
 800bf36:	d1dd      	bne.n	800bef4 <_free_r+0x28>
 800bf38:	681c      	ldr	r4, [r3, #0]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	6053      	str	r3, [r2, #4]
 800bf3e:	4421      	add	r1, r4
 800bf40:	6011      	str	r1, [r2, #0]
 800bf42:	e7d7      	b.n	800bef4 <_free_r+0x28>
 800bf44:	d902      	bls.n	800bf4c <_free_r+0x80>
 800bf46:	230c      	movs	r3, #12
 800bf48:	6003      	str	r3, [r0, #0]
 800bf4a:	e7d3      	b.n	800bef4 <_free_r+0x28>
 800bf4c:	6825      	ldr	r5, [r4, #0]
 800bf4e:	1961      	adds	r1, r4, r5
 800bf50:	428b      	cmp	r3, r1
 800bf52:	bf04      	itt	eq
 800bf54:	6819      	ldreq	r1, [r3, #0]
 800bf56:	685b      	ldreq	r3, [r3, #4]
 800bf58:	6063      	str	r3, [r4, #4]
 800bf5a:	bf04      	itt	eq
 800bf5c:	1949      	addeq	r1, r1, r5
 800bf5e:	6021      	streq	r1, [r4, #0]
 800bf60:	6054      	str	r4, [r2, #4]
 800bf62:	e7c7      	b.n	800bef4 <_free_r+0x28>
 800bf64:	b003      	add	sp, #12
 800bf66:	bd30      	pop	{r4, r5, pc}
 800bf68:	20004b1c 	.word	0x20004b1c

0800bf6c <_malloc_r>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	1ccd      	adds	r5, r1, #3
 800bf70:	f025 0503 	bic.w	r5, r5, #3
 800bf74:	3508      	adds	r5, #8
 800bf76:	2d0c      	cmp	r5, #12
 800bf78:	bf38      	it	cc
 800bf7a:	250c      	movcc	r5, #12
 800bf7c:	2d00      	cmp	r5, #0
 800bf7e:	4606      	mov	r6, r0
 800bf80:	db01      	blt.n	800bf86 <_malloc_r+0x1a>
 800bf82:	42a9      	cmp	r1, r5
 800bf84:	d903      	bls.n	800bf8e <_malloc_r+0x22>
 800bf86:	230c      	movs	r3, #12
 800bf88:	6033      	str	r3, [r6, #0]
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf8e:	f000 fe1b 	bl	800cbc8 <__malloc_lock>
 800bf92:	4921      	ldr	r1, [pc, #132]	; (800c018 <_malloc_r+0xac>)
 800bf94:	680a      	ldr	r2, [r1, #0]
 800bf96:	4614      	mov	r4, r2
 800bf98:	b99c      	cbnz	r4, 800bfc2 <_malloc_r+0x56>
 800bf9a:	4f20      	ldr	r7, [pc, #128]	; (800c01c <_malloc_r+0xb0>)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	b923      	cbnz	r3, 800bfaa <_malloc_r+0x3e>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f000 faf2 	bl	800c58c <_sbrk_r>
 800bfa8:	6038      	str	r0, [r7, #0]
 800bfaa:	4629      	mov	r1, r5
 800bfac:	4630      	mov	r0, r6
 800bfae:	f000 faed 	bl	800c58c <_sbrk_r>
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	d123      	bne.n	800bffe <_malloc_r+0x92>
 800bfb6:	230c      	movs	r3, #12
 800bfb8:	6033      	str	r3, [r6, #0]
 800bfba:	4630      	mov	r0, r6
 800bfbc:	f000 fe0a 	bl	800cbd4 <__malloc_unlock>
 800bfc0:	e7e3      	b.n	800bf8a <_malloc_r+0x1e>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	1b5b      	subs	r3, r3, r5
 800bfc6:	d417      	bmi.n	800bff8 <_malloc_r+0x8c>
 800bfc8:	2b0b      	cmp	r3, #11
 800bfca:	d903      	bls.n	800bfd4 <_malloc_r+0x68>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	441c      	add	r4, r3
 800bfd0:	6025      	str	r5, [r4, #0]
 800bfd2:	e004      	b.n	800bfde <_malloc_r+0x72>
 800bfd4:	6863      	ldr	r3, [r4, #4]
 800bfd6:	42a2      	cmp	r2, r4
 800bfd8:	bf0c      	ite	eq
 800bfda:	600b      	streq	r3, [r1, #0]
 800bfdc:	6053      	strne	r3, [r2, #4]
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f000 fdf8 	bl	800cbd4 <__malloc_unlock>
 800bfe4:	f104 000b 	add.w	r0, r4, #11
 800bfe8:	1d23      	adds	r3, r4, #4
 800bfea:	f020 0007 	bic.w	r0, r0, #7
 800bfee:	1ac2      	subs	r2, r0, r3
 800bff0:	d0cc      	beq.n	800bf8c <_malloc_r+0x20>
 800bff2:	1a1b      	subs	r3, r3, r0
 800bff4:	50a3      	str	r3, [r4, r2]
 800bff6:	e7c9      	b.n	800bf8c <_malloc_r+0x20>
 800bff8:	4622      	mov	r2, r4
 800bffa:	6864      	ldr	r4, [r4, #4]
 800bffc:	e7cc      	b.n	800bf98 <_malloc_r+0x2c>
 800bffe:	1cc4      	adds	r4, r0, #3
 800c000:	f024 0403 	bic.w	r4, r4, #3
 800c004:	42a0      	cmp	r0, r4
 800c006:	d0e3      	beq.n	800bfd0 <_malloc_r+0x64>
 800c008:	1a21      	subs	r1, r4, r0
 800c00a:	4630      	mov	r0, r6
 800c00c:	f000 fabe 	bl	800c58c <_sbrk_r>
 800c010:	3001      	adds	r0, #1
 800c012:	d1dd      	bne.n	800bfd0 <_malloc_r+0x64>
 800c014:	e7cf      	b.n	800bfb6 <_malloc_r+0x4a>
 800c016:	bf00      	nop
 800c018:	20004b1c 	.word	0x20004b1c
 800c01c:	20004b20 	.word	0x20004b20

0800c020 <__ssputs_r>:
 800c020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c024:	688e      	ldr	r6, [r1, #8]
 800c026:	429e      	cmp	r6, r3
 800c028:	4682      	mov	sl, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	4690      	mov	r8, r2
 800c02e:	461f      	mov	r7, r3
 800c030:	d838      	bhi.n	800c0a4 <__ssputs_r+0x84>
 800c032:	898a      	ldrh	r2, [r1, #12]
 800c034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c038:	d032      	beq.n	800c0a0 <__ssputs_r+0x80>
 800c03a:	6825      	ldr	r5, [r4, #0]
 800c03c:	6909      	ldr	r1, [r1, #16]
 800c03e:	eba5 0901 	sub.w	r9, r5, r1
 800c042:	6965      	ldr	r5, [r4, #20]
 800c044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c04c:	3301      	adds	r3, #1
 800c04e:	444b      	add	r3, r9
 800c050:	106d      	asrs	r5, r5, #1
 800c052:	429d      	cmp	r5, r3
 800c054:	bf38      	it	cc
 800c056:	461d      	movcc	r5, r3
 800c058:	0553      	lsls	r3, r2, #21
 800c05a:	d531      	bpl.n	800c0c0 <__ssputs_r+0xa0>
 800c05c:	4629      	mov	r1, r5
 800c05e:	f7ff ff85 	bl	800bf6c <_malloc_r>
 800c062:	4606      	mov	r6, r0
 800c064:	b950      	cbnz	r0, 800c07c <__ssputs_r+0x5c>
 800c066:	230c      	movs	r3, #12
 800c068:	f8ca 3000 	str.w	r3, [sl]
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07c:	6921      	ldr	r1, [r4, #16]
 800c07e:	464a      	mov	r2, r9
 800c080:	f7fe f82e 	bl	800a0e0 <memcpy>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c08a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	6126      	str	r6, [r4, #16]
 800c092:	6165      	str	r5, [r4, #20]
 800c094:	444e      	add	r6, r9
 800c096:	eba5 0509 	sub.w	r5, r5, r9
 800c09a:	6026      	str	r6, [r4, #0]
 800c09c:	60a5      	str	r5, [r4, #8]
 800c09e:	463e      	mov	r6, r7
 800c0a0:	42be      	cmp	r6, r7
 800c0a2:	d900      	bls.n	800c0a6 <__ssputs_r+0x86>
 800c0a4:	463e      	mov	r6, r7
 800c0a6:	4632      	mov	r2, r6
 800c0a8:	6820      	ldr	r0, [r4, #0]
 800c0aa:	4641      	mov	r1, r8
 800c0ac:	f000 fd72 	bl	800cb94 <memmove>
 800c0b0:	68a3      	ldr	r3, [r4, #8]
 800c0b2:	6822      	ldr	r2, [r4, #0]
 800c0b4:	1b9b      	subs	r3, r3, r6
 800c0b6:	4432      	add	r2, r6
 800c0b8:	60a3      	str	r3, [r4, #8]
 800c0ba:	6022      	str	r2, [r4, #0]
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7db      	b.n	800c078 <__ssputs_r+0x58>
 800c0c0:	462a      	mov	r2, r5
 800c0c2:	f000 fd8d 	bl	800cbe0 <_realloc_r>
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d1e1      	bne.n	800c090 <__ssputs_r+0x70>
 800c0cc:	6921      	ldr	r1, [r4, #16]
 800c0ce:	4650      	mov	r0, sl
 800c0d0:	f7ff fefc 	bl	800becc <_free_r>
 800c0d4:	e7c7      	b.n	800c066 <__ssputs_r+0x46>
	...

0800c0d8 <_svfiprintf_r>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	4698      	mov	r8, r3
 800c0de:	898b      	ldrh	r3, [r1, #12]
 800c0e0:	061b      	lsls	r3, r3, #24
 800c0e2:	b09d      	sub	sp, #116	; 0x74
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	4614      	mov	r4, r2
 800c0ea:	d50e      	bpl.n	800c10a <_svfiprintf_r+0x32>
 800c0ec:	690b      	ldr	r3, [r1, #16]
 800c0ee:	b963      	cbnz	r3, 800c10a <_svfiprintf_r+0x32>
 800c0f0:	2140      	movs	r1, #64	; 0x40
 800c0f2:	f7ff ff3b 	bl	800bf6c <_malloc_r>
 800c0f6:	6028      	str	r0, [r5, #0]
 800c0f8:	6128      	str	r0, [r5, #16]
 800c0fa:	b920      	cbnz	r0, 800c106 <_svfiprintf_r+0x2e>
 800c0fc:	230c      	movs	r3, #12
 800c0fe:	603b      	str	r3, [r7, #0]
 800c100:	f04f 30ff 	mov.w	r0, #4294967295
 800c104:	e0d1      	b.n	800c2aa <_svfiprintf_r+0x1d2>
 800c106:	2340      	movs	r3, #64	; 0x40
 800c108:	616b      	str	r3, [r5, #20]
 800c10a:	2300      	movs	r3, #0
 800c10c:	9309      	str	r3, [sp, #36]	; 0x24
 800c10e:	2320      	movs	r3, #32
 800c110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c114:	f8cd 800c 	str.w	r8, [sp, #12]
 800c118:	2330      	movs	r3, #48	; 0x30
 800c11a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2c4 <_svfiprintf_r+0x1ec>
 800c11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c122:	f04f 0901 	mov.w	r9, #1
 800c126:	4623      	mov	r3, r4
 800c128:	469a      	mov	sl, r3
 800c12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c12e:	b10a      	cbz	r2, 800c134 <_svfiprintf_r+0x5c>
 800c130:	2a25      	cmp	r2, #37	; 0x25
 800c132:	d1f9      	bne.n	800c128 <_svfiprintf_r+0x50>
 800c134:	ebba 0b04 	subs.w	fp, sl, r4
 800c138:	d00b      	beq.n	800c152 <_svfiprintf_r+0x7a>
 800c13a:	465b      	mov	r3, fp
 800c13c:	4622      	mov	r2, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	4638      	mov	r0, r7
 800c142:	f7ff ff6d 	bl	800c020 <__ssputs_r>
 800c146:	3001      	adds	r0, #1
 800c148:	f000 80aa 	beq.w	800c2a0 <_svfiprintf_r+0x1c8>
 800c14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c14e:	445a      	add	r2, fp
 800c150:	9209      	str	r2, [sp, #36]	; 0x24
 800c152:	f89a 3000 	ldrb.w	r3, [sl]
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 80a2 	beq.w	800c2a0 <_svfiprintf_r+0x1c8>
 800c15c:	2300      	movs	r3, #0
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295
 800c162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c166:	f10a 0a01 	add.w	sl, sl, #1
 800c16a:	9304      	str	r3, [sp, #16]
 800c16c:	9307      	str	r3, [sp, #28]
 800c16e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c172:	931a      	str	r3, [sp, #104]	; 0x68
 800c174:	4654      	mov	r4, sl
 800c176:	2205      	movs	r2, #5
 800c178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c17c:	4851      	ldr	r0, [pc, #324]	; (800c2c4 <_svfiprintf_r+0x1ec>)
 800c17e:	f7f4 f837 	bl	80001f0 <memchr>
 800c182:	9a04      	ldr	r2, [sp, #16]
 800c184:	b9d8      	cbnz	r0, 800c1be <_svfiprintf_r+0xe6>
 800c186:	06d0      	lsls	r0, r2, #27
 800c188:	bf44      	itt	mi
 800c18a:	2320      	movmi	r3, #32
 800c18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c190:	0711      	lsls	r1, r2, #28
 800c192:	bf44      	itt	mi
 800c194:	232b      	movmi	r3, #43	; 0x2b
 800c196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c19a:	f89a 3000 	ldrb.w	r3, [sl]
 800c19e:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a0:	d015      	beq.n	800c1ce <_svfiprintf_r+0xf6>
 800c1a2:	9a07      	ldr	r2, [sp, #28]
 800c1a4:	4654      	mov	r4, sl
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	f04f 0c0a 	mov.w	ip, #10
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1b2:	3b30      	subs	r3, #48	; 0x30
 800c1b4:	2b09      	cmp	r3, #9
 800c1b6:	d94e      	bls.n	800c256 <_svfiprintf_r+0x17e>
 800c1b8:	b1b0      	cbz	r0, 800c1e8 <_svfiprintf_r+0x110>
 800c1ba:	9207      	str	r2, [sp, #28]
 800c1bc:	e014      	b.n	800c1e8 <_svfiprintf_r+0x110>
 800c1be:	eba0 0308 	sub.w	r3, r0, r8
 800c1c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	9304      	str	r3, [sp, #16]
 800c1ca:	46a2      	mov	sl, r4
 800c1cc:	e7d2      	b.n	800c174 <_svfiprintf_r+0x9c>
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	1d19      	adds	r1, r3, #4
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	9103      	str	r1, [sp, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	bfbb      	ittet	lt
 800c1da:	425b      	neglt	r3, r3
 800c1dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c1e0:	9307      	strge	r3, [sp, #28]
 800c1e2:	9307      	strlt	r3, [sp, #28]
 800c1e4:	bfb8      	it	lt
 800c1e6:	9204      	strlt	r2, [sp, #16]
 800c1e8:	7823      	ldrb	r3, [r4, #0]
 800c1ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ec:	d10c      	bne.n	800c208 <_svfiprintf_r+0x130>
 800c1ee:	7863      	ldrb	r3, [r4, #1]
 800c1f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1f2:	d135      	bne.n	800c260 <_svfiprintf_r+0x188>
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	1d1a      	adds	r2, r3, #4
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	9203      	str	r2, [sp, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	bfb8      	it	lt
 800c200:	f04f 33ff 	movlt.w	r3, #4294967295
 800c204:	3402      	adds	r4, #2
 800c206:	9305      	str	r3, [sp, #20]
 800c208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2d4 <_svfiprintf_r+0x1fc>
 800c20c:	7821      	ldrb	r1, [r4, #0]
 800c20e:	2203      	movs	r2, #3
 800c210:	4650      	mov	r0, sl
 800c212:	f7f3 ffed 	bl	80001f0 <memchr>
 800c216:	b140      	cbz	r0, 800c22a <_svfiprintf_r+0x152>
 800c218:	2340      	movs	r3, #64	; 0x40
 800c21a:	eba0 000a 	sub.w	r0, r0, sl
 800c21e:	fa03 f000 	lsl.w	r0, r3, r0
 800c222:	9b04      	ldr	r3, [sp, #16]
 800c224:	4303      	orrs	r3, r0
 800c226:	3401      	adds	r4, #1
 800c228:	9304      	str	r3, [sp, #16]
 800c22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22e:	4826      	ldr	r0, [pc, #152]	; (800c2c8 <_svfiprintf_r+0x1f0>)
 800c230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c234:	2206      	movs	r2, #6
 800c236:	f7f3 ffdb 	bl	80001f0 <memchr>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d038      	beq.n	800c2b0 <_svfiprintf_r+0x1d8>
 800c23e:	4b23      	ldr	r3, [pc, #140]	; (800c2cc <_svfiprintf_r+0x1f4>)
 800c240:	bb1b      	cbnz	r3, 800c28a <_svfiprintf_r+0x1b2>
 800c242:	9b03      	ldr	r3, [sp, #12]
 800c244:	3307      	adds	r3, #7
 800c246:	f023 0307 	bic.w	r3, r3, #7
 800c24a:	3308      	adds	r3, #8
 800c24c:	9303      	str	r3, [sp, #12]
 800c24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c250:	4433      	add	r3, r6
 800c252:	9309      	str	r3, [sp, #36]	; 0x24
 800c254:	e767      	b.n	800c126 <_svfiprintf_r+0x4e>
 800c256:	fb0c 3202 	mla	r2, ip, r2, r3
 800c25a:	460c      	mov	r4, r1
 800c25c:	2001      	movs	r0, #1
 800c25e:	e7a5      	b.n	800c1ac <_svfiprintf_r+0xd4>
 800c260:	2300      	movs	r3, #0
 800c262:	3401      	adds	r4, #1
 800c264:	9305      	str	r3, [sp, #20]
 800c266:	4619      	mov	r1, r3
 800c268:	f04f 0c0a 	mov.w	ip, #10
 800c26c:	4620      	mov	r0, r4
 800c26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c272:	3a30      	subs	r2, #48	; 0x30
 800c274:	2a09      	cmp	r2, #9
 800c276:	d903      	bls.n	800c280 <_svfiprintf_r+0x1a8>
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0c5      	beq.n	800c208 <_svfiprintf_r+0x130>
 800c27c:	9105      	str	r1, [sp, #20]
 800c27e:	e7c3      	b.n	800c208 <_svfiprintf_r+0x130>
 800c280:	fb0c 2101 	mla	r1, ip, r1, r2
 800c284:	4604      	mov	r4, r0
 800c286:	2301      	movs	r3, #1
 800c288:	e7f0      	b.n	800c26c <_svfiprintf_r+0x194>
 800c28a:	ab03      	add	r3, sp, #12
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	462a      	mov	r2, r5
 800c290:	4b0f      	ldr	r3, [pc, #60]	; (800c2d0 <_svfiprintf_r+0x1f8>)
 800c292:	a904      	add	r1, sp, #16
 800c294:	4638      	mov	r0, r7
 800c296:	f7fd ffd9 	bl	800a24c <_printf_float>
 800c29a:	1c42      	adds	r2, r0, #1
 800c29c:	4606      	mov	r6, r0
 800c29e:	d1d6      	bne.n	800c24e <_svfiprintf_r+0x176>
 800c2a0:	89ab      	ldrh	r3, [r5, #12]
 800c2a2:	065b      	lsls	r3, r3, #25
 800c2a4:	f53f af2c 	bmi.w	800c100 <_svfiprintf_r+0x28>
 800c2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2aa:	b01d      	add	sp, #116	; 0x74
 800c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b0:	ab03      	add	r3, sp, #12
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	462a      	mov	r2, r5
 800c2b6:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <_svfiprintf_r+0x1f8>)
 800c2b8:	a904      	add	r1, sp, #16
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7fe fa6a 	bl	800a794 <_printf_i>
 800c2c0:	e7eb      	b.n	800c29a <_svfiprintf_r+0x1c2>
 800c2c2:	bf00      	nop
 800c2c4:	0800d38c 	.word	0x0800d38c
 800c2c8:	0800d396 	.word	0x0800d396
 800c2cc:	0800a24d 	.word	0x0800a24d
 800c2d0:	0800c021 	.word	0x0800c021
 800c2d4:	0800d392 	.word	0x0800d392

0800c2d8 <__sfputc_r>:
 800c2d8:	6893      	ldr	r3, [r2, #8]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	b410      	push	{r4}
 800c2e0:	6093      	str	r3, [r2, #8]
 800c2e2:	da08      	bge.n	800c2f6 <__sfputc_r+0x1e>
 800c2e4:	6994      	ldr	r4, [r2, #24]
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	db01      	blt.n	800c2ee <__sfputc_r+0x16>
 800c2ea:	290a      	cmp	r1, #10
 800c2ec:	d103      	bne.n	800c2f6 <__sfputc_r+0x1e>
 800c2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f2:	f000 b95b 	b.w	800c5ac <__swbuf_r>
 800c2f6:	6813      	ldr	r3, [r2, #0]
 800c2f8:	1c58      	adds	r0, r3, #1
 800c2fa:	6010      	str	r0, [r2, #0]
 800c2fc:	7019      	strb	r1, [r3, #0]
 800c2fe:	4608      	mov	r0, r1
 800c300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <__sfputs_r>:
 800c306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c308:	4606      	mov	r6, r0
 800c30a:	460f      	mov	r7, r1
 800c30c:	4614      	mov	r4, r2
 800c30e:	18d5      	adds	r5, r2, r3
 800c310:	42ac      	cmp	r4, r5
 800c312:	d101      	bne.n	800c318 <__sfputs_r+0x12>
 800c314:	2000      	movs	r0, #0
 800c316:	e007      	b.n	800c328 <__sfputs_r+0x22>
 800c318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31c:	463a      	mov	r2, r7
 800c31e:	4630      	mov	r0, r6
 800c320:	f7ff ffda 	bl	800c2d8 <__sfputc_r>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d1f3      	bne.n	800c310 <__sfputs_r+0xa>
 800c328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c32c <_vfiprintf_r>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	460d      	mov	r5, r1
 800c332:	b09d      	sub	sp, #116	; 0x74
 800c334:	4614      	mov	r4, r2
 800c336:	4698      	mov	r8, r3
 800c338:	4606      	mov	r6, r0
 800c33a:	b118      	cbz	r0, 800c344 <_vfiprintf_r+0x18>
 800c33c:	6983      	ldr	r3, [r0, #24]
 800c33e:	b90b      	cbnz	r3, 800c344 <_vfiprintf_r+0x18>
 800c340:	f000 fb24 	bl	800c98c <__sinit>
 800c344:	4b89      	ldr	r3, [pc, #548]	; (800c56c <_vfiprintf_r+0x240>)
 800c346:	429d      	cmp	r5, r3
 800c348:	d11b      	bne.n	800c382 <_vfiprintf_r+0x56>
 800c34a:	6875      	ldr	r5, [r6, #4]
 800c34c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c34e:	07d9      	lsls	r1, r3, #31
 800c350:	d405      	bmi.n	800c35e <_vfiprintf_r+0x32>
 800c352:	89ab      	ldrh	r3, [r5, #12]
 800c354:	059a      	lsls	r2, r3, #22
 800c356:	d402      	bmi.n	800c35e <_vfiprintf_r+0x32>
 800c358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c35a:	f000 fbb5 	bl	800cac8 <__retarget_lock_acquire_recursive>
 800c35e:	89ab      	ldrh	r3, [r5, #12]
 800c360:	071b      	lsls	r3, r3, #28
 800c362:	d501      	bpl.n	800c368 <_vfiprintf_r+0x3c>
 800c364:	692b      	ldr	r3, [r5, #16]
 800c366:	b9eb      	cbnz	r3, 800c3a4 <_vfiprintf_r+0x78>
 800c368:	4629      	mov	r1, r5
 800c36a:	4630      	mov	r0, r6
 800c36c:	f000 f97e 	bl	800c66c <__swsetup_r>
 800c370:	b1c0      	cbz	r0, 800c3a4 <_vfiprintf_r+0x78>
 800c372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c374:	07dc      	lsls	r4, r3, #31
 800c376:	d50e      	bpl.n	800c396 <_vfiprintf_r+0x6a>
 800c378:	f04f 30ff 	mov.w	r0, #4294967295
 800c37c:	b01d      	add	sp, #116	; 0x74
 800c37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c382:	4b7b      	ldr	r3, [pc, #492]	; (800c570 <_vfiprintf_r+0x244>)
 800c384:	429d      	cmp	r5, r3
 800c386:	d101      	bne.n	800c38c <_vfiprintf_r+0x60>
 800c388:	68b5      	ldr	r5, [r6, #8]
 800c38a:	e7df      	b.n	800c34c <_vfiprintf_r+0x20>
 800c38c:	4b79      	ldr	r3, [pc, #484]	; (800c574 <_vfiprintf_r+0x248>)
 800c38e:	429d      	cmp	r5, r3
 800c390:	bf08      	it	eq
 800c392:	68f5      	ldreq	r5, [r6, #12]
 800c394:	e7da      	b.n	800c34c <_vfiprintf_r+0x20>
 800c396:	89ab      	ldrh	r3, [r5, #12]
 800c398:	0598      	lsls	r0, r3, #22
 800c39a:	d4ed      	bmi.n	800c378 <_vfiprintf_r+0x4c>
 800c39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c39e:	f000 fb94 	bl	800caca <__retarget_lock_release_recursive>
 800c3a2:	e7e9      	b.n	800c378 <_vfiprintf_r+0x4c>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a8:	2320      	movs	r3, #32
 800c3aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3b2:	2330      	movs	r3, #48	; 0x30
 800c3b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c578 <_vfiprintf_r+0x24c>
 800c3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3bc:	f04f 0901 	mov.w	r9, #1
 800c3c0:	4623      	mov	r3, r4
 800c3c2:	469a      	mov	sl, r3
 800c3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3c8:	b10a      	cbz	r2, 800c3ce <_vfiprintf_r+0xa2>
 800c3ca:	2a25      	cmp	r2, #37	; 0x25
 800c3cc:	d1f9      	bne.n	800c3c2 <_vfiprintf_r+0x96>
 800c3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c3d2:	d00b      	beq.n	800c3ec <_vfiprintf_r+0xc0>
 800c3d4:	465b      	mov	r3, fp
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f7ff ff93 	bl	800c306 <__sfputs_r>
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f000 80aa 	beq.w	800c53a <_vfiprintf_r+0x20e>
 800c3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3e8:	445a      	add	r2, fp
 800c3ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 80a2 	beq.w	800c53a <_vfiprintf_r+0x20e>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c400:	f10a 0a01 	add.w	sl, sl, #1
 800c404:	9304      	str	r3, [sp, #16]
 800c406:	9307      	str	r3, [sp, #28]
 800c408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c40c:	931a      	str	r3, [sp, #104]	; 0x68
 800c40e:	4654      	mov	r4, sl
 800c410:	2205      	movs	r2, #5
 800c412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c416:	4858      	ldr	r0, [pc, #352]	; (800c578 <_vfiprintf_r+0x24c>)
 800c418:	f7f3 feea 	bl	80001f0 <memchr>
 800c41c:	9a04      	ldr	r2, [sp, #16]
 800c41e:	b9d8      	cbnz	r0, 800c458 <_vfiprintf_r+0x12c>
 800c420:	06d1      	lsls	r1, r2, #27
 800c422:	bf44      	itt	mi
 800c424:	2320      	movmi	r3, #32
 800c426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c42a:	0713      	lsls	r3, r2, #28
 800c42c:	bf44      	itt	mi
 800c42e:	232b      	movmi	r3, #43	; 0x2b
 800c430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c434:	f89a 3000 	ldrb.w	r3, [sl]
 800c438:	2b2a      	cmp	r3, #42	; 0x2a
 800c43a:	d015      	beq.n	800c468 <_vfiprintf_r+0x13c>
 800c43c:	9a07      	ldr	r2, [sp, #28]
 800c43e:	4654      	mov	r4, sl
 800c440:	2000      	movs	r0, #0
 800c442:	f04f 0c0a 	mov.w	ip, #10
 800c446:	4621      	mov	r1, r4
 800c448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c44c:	3b30      	subs	r3, #48	; 0x30
 800c44e:	2b09      	cmp	r3, #9
 800c450:	d94e      	bls.n	800c4f0 <_vfiprintf_r+0x1c4>
 800c452:	b1b0      	cbz	r0, 800c482 <_vfiprintf_r+0x156>
 800c454:	9207      	str	r2, [sp, #28]
 800c456:	e014      	b.n	800c482 <_vfiprintf_r+0x156>
 800c458:	eba0 0308 	sub.w	r3, r0, r8
 800c45c:	fa09 f303 	lsl.w	r3, r9, r3
 800c460:	4313      	orrs	r3, r2
 800c462:	9304      	str	r3, [sp, #16]
 800c464:	46a2      	mov	sl, r4
 800c466:	e7d2      	b.n	800c40e <_vfiprintf_r+0xe2>
 800c468:	9b03      	ldr	r3, [sp, #12]
 800c46a:	1d19      	adds	r1, r3, #4
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	9103      	str	r1, [sp, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	bfbb      	ittet	lt
 800c474:	425b      	neglt	r3, r3
 800c476:	f042 0202 	orrlt.w	r2, r2, #2
 800c47a:	9307      	strge	r3, [sp, #28]
 800c47c:	9307      	strlt	r3, [sp, #28]
 800c47e:	bfb8      	it	lt
 800c480:	9204      	strlt	r2, [sp, #16]
 800c482:	7823      	ldrb	r3, [r4, #0]
 800c484:	2b2e      	cmp	r3, #46	; 0x2e
 800c486:	d10c      	bne.n	800c4a2 <_vfiprintf_r+0x176>
 800c488:	7863      	ldrb	r3, [r4, #1]
 800c48a:	2b2a      	cmp	r3, #42	; 0x2a
 800c48c:	d135      	bne.n	800c4fa <_vfiprintf_r+0x1ce>
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	1d1a      	adds	r2, r3, #4
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	9203      	str	r2, [sp, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	bfb8      	it	lt
 800c49a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c49e:	3402      	adds	r4, #2
 800c4a0:	9305      	str	r3, [sp, #20]
 800c4a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c588 <_vfiprintf_r+0x25c>
 800c4a6:	7821      	ldrb	r1, [r4, #0]
 800c4a8:	2203      	movs	r2, #3
 800c4aa:	4650      	mov	r0, sl
 800c4ac:	f7f3 fea0 	bl	80001f0 <memchr>
 800c4b0:	b140      	cbz	r0, 800c4c4 <_vfiprintf_r+0x198>
 800c4b2:	2340      	movs	r3, #64	; 0x40
 800c4b4:	eba0 000a 	sub.w	r0, r0, sl
 800c4b8:	fa03 f000 	lsl.w	r0, r3, r0
 800c4bc:	9b04      	ldr	r3, [sp, #16]
 800c4be:	4303      	orrs	r3, r0
 800c4c0:	3401      	adds	r4, #1
 800c4c2:	9304      	str	r3, [sp, #16]
 800c4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c8:	482c      	ldr	r0, [pc, #176]	; (800c57c <_vfiprintf_r+0x250>)
 800c4ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4ce:	2206      	movs	r2, #6
 800c4d0:	f7f3 fe8e 	bl	80001f0 <memchr>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d03f      	beq.n	800c558 <_vfiprintf_r+0x22c>
 800c4d8:	4b29      	ldr	r3, [pc, #164]	; (800c580 <_vfiprintf_r+0x254>)
 800c4da:	bb1b      	cbnz	r3, 800c524 <_vfiprintf_r+0x1f8>
 800c4dc:	9b03      	ldr	r3, [sp, #12]
 800c4de:	3307      	adds	r3, #7
 800c4e0:	f023 0307 	bic.w	r3, r3, #7
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	9303      	str	r3, [sp, #12]
 800c4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ea:	443b      	add	r3, r7
 800c4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ee:	e767      	b.n	800c3c0 <_vfiprintf_r+0x94>
 800c4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	e7a5      	b.n	800c446 <_vfiprintf_r+0x11a>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	3401      	adds	r4, #1
 800c4fe:	9305      	str	r3, [sp, #20]
 800c500:	4619      	mov	r1, r3
 800c502:	f04f 0c0a 	mov.w	ip, #10
 800c506:	4620      	mov	r0, r4
 800c508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c50c:	3a30      	subs	r2, #48	; 0x30
 800c50e:	2a09      	cmp	r2, #9
 800c510:	d903      	bls.n	800c51a <_vfiprintf_r+0x1ee>
 800c512:	2b00      	cmp	r3, #0
 800c514:	d0c5      	beq.n	800c4a2 <_vfiprintf_r+0x176>
 800c516:	9105      	str	r1, [sp, #20]
 800c518:	e7c3      	b.n	800c4a2 <_vfiprintf_r+0x176>
 800c51a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c51e:	4604      	mov	r4, r0
 800c520:	2301      	movs	r3, #1
 800c522:	e7f0      	b.n	800c506 <_vfiprintf_r+0x1da>
 800c524:	ab03      	add	r3, sp, #12
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	462a      	mov	r2, r5
 800c52a:	4b16      	ldr	r3, [pc, #88]	; (800c584 <_vfiprintf_r+0x258>)
 800c52c:	a904      	add	r1, sp, #16
 800c52e:	4630      	mov	r0, r6
 800c530:	f7fd fe8c 	bl	800a24c <_printf_float>
 800c534:	4607      	mov	r7, r0
 800c536:	1c78      	adds	r0, r7, #1
 800c538:	d1d6      	bne.n	800c4e8 <_vfiprintf_r+0x1bc>
 800c53a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c53c:	07d9      	lsls	r1, r3, #31
 800c53e:	d405      	bmi.n	800c54c <_vfiprintf_r+0x220>
 800c540:	89ab      	ldrh	r3, [r5, #12]
 800c542:	059a      	lsls	r2, r3, #22
 800c544:	d402      	bmi.n	800c54c <_vfiprintf_r+0x220>
 800c546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c548:	f000 fabf 	bl	800caca <__retarget_lock_release_recursive>
 800c54c:	89ab      	ldrh	r3, [r5, #12]
 800c54e:	065b      	lsls	r3, r3, #25
 800c550:	f53f af12 	bmi.w	800c378 <_vfiprintf_r+0x4c>
 800c554:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c556:	e711      	b.n	800c37c <_vfiprintf_r+0x50>
 800c558:	ab03      	add	r3, sp, #12
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	462a      	mov	r2, r5
 800c55e:	4b09      	ldr	r3, [pc, #36]	; (800c584 <_vfiprintf_r+0x258>)
 800c560:	a904      	add	r1, sp, #16
 800c562:	4630      	mov	r0, r6
 800c564:	f7fe f916 	bl	800a794 <_printf_i>
 800c568:	e7e4      	b.n	800c534 <_vfiprintf_r+0x208>
 800c56a:	bf00      	nop
 800c56c:	0800d4c0 	.word	0x0800d4c0
 800c570:	0800d4e0 	.word	0x0800d4e0
 800c574:	0800d4a0 	.word	0x0800d4a0
 800c578:	0800d38c 	.word	0x0800d38c
 800c57c:	0800d396 	.word	0x0800d396
 800c580:	0800a24d 	.word	0x0800a24d
 800c584:	0800c307 	.word	0x0800c307
 800c588:	0800d392 	.word	0x0800d392

0800c58c <_sbrk_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4d06      	ldr	r5, [pc, #24]	; (800c5a8 <_sbrk_r+0x1c>)
 800c590:	2300      	movs	r3, #0
 800c592:	4604      	mov	r4, r0
 800c594:	4608      	mov	r0, r1
 800c596:	602b      	str	r3, [r5, #0]
 800c598:	f7f6 f90a 	bl	80027b0 <_sbrk>
 800c59c:	1c43      	adds	r3, r0, #1
 800c59e:	d102      	bne.n	800c5a6 <_sbrk_r+0x1a>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	b103      	cbz	r3, 800c5a6 <_sbrk_r+0x1a>
 800c5a4:	6023      	str	r3, [r4, #0]
 800c5a6:	bd38      	pop	{r3, r4, r5, pc}
 800c5a8:	20004f84 	.word	0x20004f84

0800c5ac <__swbuf_r>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	460e      	mov	r6, r1
 800c5b0:	4614      	mov	r4, r2
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	b118      	cbz	r0, 800c5be <__swbuf_r+0x12>
 800c5b6:	6983      	ldr	r3, [r0, #24]
 800c5b8:	b90b      	cbnz	r3, 800c5be <__swbuf_r+0x12>
 800c5ba:	f000 f9e7 	bl	800c98c <__sinit>
 800c5be:	4b21      	ldr	r3, [pc, #132]	; (800c644 <__swbuf_r+0x98>)
 800c5c0:	429c      	cmp	r4, r3
 800c5c2:	d12b      	bne.n	800c61c <__swbuf_r+0x70>
 800c5c4:	686c      	ldr	r4, [r5, #4]
 800c5c6:	69a3      	ldr	r3, [r4, #24]
 800c5c8:	60a3      	str	r3, [r4, #8]
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	071a      	lsls	r2, r3, #28
 800c5ce:	d52f      	bpl.n	800c630 <__swbuf_r+0x84>
 800c5d0:	6923      	ldr	r3, [r4, #16]
 800c5d2:	b36b      	cbz	r3, 800c630 <__swbuf_r+0x84>
 800c5d4:	6923      	ldr	r3, [r4, #16]
 800c5d6:	6820      	ldr	r0, [r4, #0]
 800c5d8:	1ac0      	subs	r0, r0, r3
 800c5da:	6963      	ldr	r3, [r4, #20]
 800c5dc:	b2f6      	uxtb	r6, r6
 800c5de:	4283      	cmp	r3, r0
 800c5e0:	4637      	mov	r7, r6
 800c5e2:	dc04      	bgt.n	800c5ee <__swbuf_r+0x42>
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f000 f93c 	bl	800c864 <_fflush_r>
 800c5ec:	bb30      	cbnz	r0, 800c63c <__swbuf_r+0x90>
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	60a3      	str	r3, [r4, #8]
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	1c5a      	adds	r2, r3, #1
 800c5f8:	6022      	str	r2, [r4, #0]
 800c5fa:	701e      	strb	r6, [r3, #0]
 800c5fc:	6963      	ldr	r3, [r4, #20]
 800c5fe:	3001      	adds	r0, #1
 800c600:	4283      	cmp	r3, r0
 800c602:	d004      	beq.n	800c60e <__swbuf_r+0x62>
 800c604:	89a3      	ldrh	r3, [r4, #12]
 800c606:	07db      	lsls	r3, r3, #31
 800c608:	d506      	bpl.n	800c618 <__swbuf_r+0x6c>
 800c60a:	2e0a      	cmp	r6, #10
 800c60c:	d104      	bne.n	800c618 <__swbuf_r+0x6c>
 800c60e:	4621      	mov	r1, r4
 800c610:	4628      	mov	r0, r5
 800c612:	f000 f927 	bl	800c864 <_fflush_r>
 800c616:	b988      	cbnz	r0, 800c63c <__swbuf_r+0x90>
 800c618:	4638      	mov	r0, r7
 800c61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c61c:	4b0a      	ldr	r3, [pc, #40]	; (800c648 <__swbuf_r+0x9c>)
 800c61e:	429c      	cmp	r4, r3
 800c620:	d101      	bne.n	800c626 <__swbuf_r+0x7a>
 800c622:	68ac      	ldr	r4, [r5, #8]
 800c624:	e7cf      	b.n	800c5c6 <__swbuf_r+0x1a>
 800c626:	4b09      	ldr	r3, [pc, #36]	; (800c64c <__swbuf_r+0xa0>)
 800c628:	429c      	cmp	r4, r3
 800c62a:	bf08      	it	eq
 800c62c:	68ec      	ldreq	r4, [r5, #12]
 800c62e:	e7ca      	b.n	800c5c6 <__swbuf_r+0x1a>
 800c630:	4621      	mov	r1, r4
 800c632:	4628      	mov	r0, r5
 800c634:	f000 f81a 	bl	800c66c <__swsetup_r>
 800c638:	2800      	cmp	r0, #0
 800c63a:	d0cb      	beq.n	800c5d4 <__swbuf_r+0x28>
 800c63c:	f04f 37ff 	mov.w	r7, #4294967295
 800c640:	e7ea      	b.n	800c618 <__swbuf_r+0x6c>
 800c642:	bf00      	nop
 800c644:	0800d4c0 	.word	0x0800d4c0
 800c648:	0800d4e0 	.word	0x0800d4e0
 800c64c:	0800d4a0 	.word	0x0800d4a0

0800c650 <__ascii_wctomb>:
 800c650:	b149      	cbz	r1, 800c666 <__ascii_wctomb+0x16>
 800c652:	2aff      	cmp	r2, #255	; 0xff
 800c654:	bf85      	ittet	hi
 800c656:	238a      	movhi	r3, #138	; 0x8a
 800c658:	6003      	strhi	r3, [r0, #0]
 800c65a:	700a      	strbls	r2, [r1, #0]
 800c65c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c660:	bf98      	it	ls
 800c662:	2001      	movls	r0, #1
 800c664:	4770      	bx	lr
 800c666:	4608      	mov	r0, r1
 800c668:	4770      	bx	lr
	...

0800c66c <__swsetup_r>:
 800c66c:	4b32      	ldr	r3, [pc, #200]	; (800c738 <__swsetup_r+0xcc>)
 800c66e:	b570      	push	{r4, r5, r6, lr}
 800c670:	681d      	ldr	r5, [r3, #0]
 800c672:	4606      	mov	r6, r0
 800c674:	460c      	mov	r4, r1
 800c676:	b125      	cbz	r5, 800c682 <__swsetup_r+0x16>
 800c678:	69ab      	ldr	r3, [r5, #24]
 800c67a:	b913      	cbnz	r3, 800c682 <__swsetup_r+0x16>
 800c67c:	4628      	mov	r0, r5
 800c67e:	f000 f985 	bl	800c98c <__sinit>
 800c682:	4b2e      	ldr	r3, [pc, #184]	; (800c73c <__swsetup_r+0xd0>)
 800c684:	429c      	cmp	r4, r3
 800c686:	d10f      	bne.n	800c6a8 <__swsetup_r+0x3c>
 800c688:	686c      	ldr	r4, [r5, #4]
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c690:	0719      	lsls	r1, r3, #28
 800c692:	d42c      	bmi.n	800c6ee <__swsetup_r+0x82>
 800c694:	06dd      	lsls	r5, r3, #27
 800c696:	d411      	bmi.n	800c6bc <__swsetup_r+0x50>
 800c698:	2309      	movs	r3, #9
 800c69a:	6033      	str	r3, [r6, #0]
 800c69c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a6:	e03e      	b.n	800c726 <__swsetup_r+0xba>
 800c6a8:	4b25      	ldr	r3, [pc, #148]	; (800c740 <__swsetup_r+0xd4>)
 800c6aa:	429c      	cmp	r4, r3
 800c6ac:	d101      	bne.n	800c6b2 <__swsetup_r+0x46>
 800c6ae:	68ac      	ldr	r4, [r5, #8]
 800c6b0:	e7eb      	b.n	800c68a <__swsetup_r+0x1e>
 800c6b2:	4b24      	ldr	r3, [pc, #144]	; (800c744 <__swsetup_r+0xd8>)
 800c6b4:	429c      	cmp	r4, r3
 800c6b6:	bf08      	it	eq
 800c6b8:	68ec      	ldreq	r4, [r5, #12]
 800c6ba:	e7e6      	b.n	800c68a <__swsetup_r+0x1e>
 800c6bc:	0758      	lsls	r0, r3, #29
 800c6be:	d512      	bpl.n	800c6e6 <__swsetup_r+0x7a>
 800c6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6c2:	b141      	cbz	r1, 800c6d6 <__swsetup_r+0x6a>
 800c6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6c8:	4299      	cmp	r1, r3
 800c6ca:	d002      	beq.n	800c6d2 <__swsetup_r+0x66>
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7ff fbfd 	bl	800becc <_free_r>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	6363      	str	r3, [r4, #52]	; 0x34
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6dc:	81a3      	strh	r3, [r4, #12]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	6063      	str	r3, [r4, #4]
 800c6e2:	6923      	ldr	r3, [r4, #16]
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	89a3      	ldrh	r3, [r4, #12]
 800c6e8:	f043 0308 	orr.w	r3, r3, #8
 800c6ec:	81a3      	strh	r3, [r4, #12]
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	b94b      	cbnz	r3, 800c706 <__swsetup_r+0x9a>
 800c6f2:	89a3      	ldrh	r3, [r4, #12]
 800c6f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6fc:	d003      	beq.n	800c706 <__swsetup_r+0x9a>
 800c6fe:	4621      	mov	r1, r4
 800c700:	4630      	mov	r0, r6
 800c702:	f000 fa07 	bl	800cb14 <__smakebuf_r>
 800c706:	89a0      	ldrh	r0, [r4, #12]
 800c708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c70c:	f010 0301 	ands.w	r3, r0, #1
 800c710:	d00a      	beq.n	800c728 <__swsetup_r+0xbc>
 800c712:	2300      	movs	r3, #0
 800c714:	60a3      	str	r3, [r4, #8]
 800c716:	6963      	ldr	r3, [r4, #20]
 800c718:	425b      	negs	r3, r3
 800c71a:	61a3      	str	r3, [r4, #24]
 800c71c:	6923      	ldr	r3, [r4, #16]
 800c71e:	b943      	cbnz	r3, 800c732 <__swsetup_r+0xc6>
 800c720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c724:	d1ba      	bne.n	800c69c <__swsetup_r+0x30>
 800c726:	bd70      	pop	{r4, r5, r6, pc}
 800c728:	0781      	lsls	r1, r0, #30
 800c72a:	bf58      	it	pl
 800c72c:	6963      	ldrpl	r3, [r4, #20]
 800c72e:	60a3      	str	r3, [r4, #8]
 800c730:	e7f4      	b.n	800c71c <__swsetup_r+0xb0>
 800c732:	2000      	movs	r0, #0
 800c734:	e7f7      	b.n	800c726 <__swsetup_r+0xba>
 800c736:	bf00      	nop
 800c738:	20000014 	.word	0x20000014
 800c73c:	0800d4c0 	.word	0x0800d4c0
 800c740:	0800d4e0 	.word	0x0800d4e0
 800c744:	0800d4a0 	.word	0x0800d4a0

0800c748 <abort>:
 800c748:	b508      	push	{r3, lr}
 800c74a:	2006      	movs	r0, #6
 800c74c:	f000 fa96 	bl	800cc7c <raise>
 800c750:	2001      	movs	r0, #1
 800c752:	f7f5 ffb5 	bl	80026c0 <_exit>
	...

0800c758 <__sflush_r>:
 800c758:	898a      	ldrh	r2, [r1, #12]
 800c75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75e:	4605      	mov	r5, r0
 800c760:	0710      	lsls	r0, r2, #28
 800c762:	460c      	mov	r4, r1
 800c764:	d458      	bmi.n	800c818 <__sflush_r+0xc0>
 800c766:	684b      	ldr	r3, [r1, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	dc05      	bgt.n	800c778 <__sflush_r+0x20>
 800c76c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c76e:	2b00      	cmp	r3, #0
 800c770:	dc02      	bgt.n	800c778 <__sflush_r+0x20>
 800c772:	2000      	movs	r0, #0
 800c774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c77a:	2e00      	cmp	r6, #0
 800c77c:	d0f9      	beq.n	800c772 <__sflush_r+0x1a>
 800c77e:	2300      	movs	r3, #0
 800c780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c784:	682f      	ldr	r7, [r5, #0]
 800c786:	602b      	str	r3, [r5, #0]
 800c788:	d032      	beq.n	800c7f0 <__sflush_r+0x98>
 800c78a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	075a      	lsls	r2, r3, #29
 800c790:	d505      	bpl.n	800c79e <__sflush_r+0x46>
 800c792:	6863      	ldr	r3, [r4, #4]
 800c794:	1ac0      	subs	r0, r0, r3
 800c796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c798:	b10b      	cbz	r3, 800c79e <__sflush_r+0x46>
 800c79a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c79c:	1ac0      	subs	r0, r0, r3
 800c79e:	2300      	movs	r3, #0
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7a4:	6a21      	ldr	r1, [r4, #32]
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	47b0      	blx	r6
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	89a3      	ldrh	r3, [r4, #12]
 800c7ae:	d106      	bne.n	800c7be <__sflush_r+0x66>
 800c7b0:	6829      	ldr	r1, [r5, #0]
 800c7b2:	291d      	cmp	r1, #29
 800c7b4:	d82c      	bhi.n	800c810 <__sflush_r+0xb8>
 800c7b6:	4a2a      	ldr	r2, [pc, #168]	; (800c860 <__sflush_r+0x108>)
 800c7b8:	40ca      	lsrs	r2, r1
 800c7ba:	07d6      	lsls	r6, r2, #31
 800c7bc:	d528      	bpl.n	800c810 <__sflush_r+0xb8>
 800c7be:	2200      	movs	r2, #0
 800c7c0:	6062      	str	r2, [r4, #4]
 800c7c2:	04d9      	lsls	r1, r3, #19
 800c7c4:	6922      	ldr	r2, [r4, #16]
 800c7c6:	6022      	str	r2, [r4, #0]
 800c7c8:	d504      	bpl.n	800c7d4 <__sflush_r+0x7c>
 800c7ca:	1c42      	adds	r2, r0, #1
 800c7cc:	d101      	bne.n	800c7d2 <__sflush_r+0x7a>
 800c7ce:	682b      	ldr	r3, [r5, #0]
 800c7d0:	b903      	cbnz	r3, 800c7d4 <__sflush_r+0x7c>
 800c7d2:	6560      	str	r0, [r4, #84]	; 0x54
 800c7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7d6:	602f      	str	r7, [r5, #0]
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	d0ca      	beq.n	800c772 <__sflush_r+0x1a>
 800c7dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7e0:	4299      	cmp	r1, r3
 800c7e2:	d002      	beq.n	800c7ea <__sflush_r+0x92>
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	f7ff fb71 	bl	800becc <_free_r>
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	6360      	str	r0, [r4, #52]	; 0x34
 800c7ee:	e7c1      	b.n	800c774 <__sflush_r+0x1c>
 800c7f0:	6a21      	ldr	r1, [r4, #32]
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	47b0      	blx	r6
 800c7f8:	1c41      	adds	r1, r0, #1
 800c7fa:	d1c7      	bne.n	800c78c <__sflush_r+0x34>
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d0c4      	beq.n	800c78c <__sflush_r+0x34>
 800c802:	2b1d      	cmp	r3, #29
 800c804:	d001      	beq.n	800c80a <__sflush_r+0xb2>
 800c806:	2b16      	cmp	r3, #22
 800c808:	d101      	bne.n	800c80e <__sflush_r+0xb6>
 800c80a:	602f      	str	r7, [r5, #0]
 800c80c:	e7b1      	b.n	800c772 <__sflush_r+0x1a>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c814:	81a3      	strh	r3, [r4, #12]
 800c816:	e7ad      	b.n	800c774 <__sflush_r+0x1c>
 800c818:	690f      	ldr	r7, [r1, #16]
 800c81a:	2f00      	cmp	r7, #0
 800c81c:	d0a9      	beq.n	800c772 <__sflush_r+0x1a>
 800c81e:	0793      	lsls	r3, r2, #30
 800c820:	680e      	ldr	r6, [r1, #0]
 800c822:	bf08      	it	eq
 800c824:	694b      	ldreq	r3, [r1, #20]
 800c826:	600f      	str	r7, [r1, #0]
 800c828:	bf18      	it	ne
 800c82a:	2300      	movne	r3, #0
 800c82c:	eba6 0807 	sub.w	r8, r6, r7
 800c830:	608b      	str	r3, [r1, #8]
 800c832:	f1b8 0f00 	cmp.w	r8, #0
 800c836:	dd9c      	ble.n	800c772 <__sflush_r+0x1a>
 800c838:	6a21      	ldr	r1, [r4, #32]
 800c83a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c83c:	4643      	mov	r3, r8
 800c83e:	463a      	mov	r2, r7
 800c840:	4628      	mov	r0, r5
 800c842:	47b0      	blx	r6
 800c844:	2800      	cmp	r0, #0
 800c846:	dc06      	bgt.n	800c856 <__sflush_r+0xfe>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c84e:	81a3      	strh	r3, [r4, #12]
 800c850:	f04f 30ff 	mov.w	r0, #4294967295
 800c854:	e78e      	b.n	800c774 <__sflush_r+0x1c>
 800c856:	4407      	add	r7, r0
 800c858:	eba8 0800 	sub.w	r8, r8, r0
 800c85c:	e7e9      	b.n	800c832 <__sflush_r+0xda>
 800c85e:	bf00      	nop
 800c860:	20400001 	.word	0x20400001

0800c864 <_fflush_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	690b      	ldr	r3, [r1, #16]
 800c868:	4605      	mov	r5, r0
 800c86a:	460c      	mov	r4, r1
 800c86c:	b913      	cbnz	r3, 800c874 <_fflush_r+0x10>
 800c86e:	2500      	movs	r5, #0
 800c870:	4628      	mov	r0, r5
 800c872:	bd38      	pop	{r3, r4, r5, pc}
 800c874:	b118      	cbz	r0, 800c87e <_fflush_r+0x1a>
 800c876:	6983      	ldr	r3, [r0, #24]
 800c878:	b90b      	cbnz	r3, 800c87e <_fflush_r+0x1a>
 800c87a:	f000 f887 	bl	800c98c <__sinit>
 800c87e:	4b14      	ldr	r3, [pc, #80]	; (800c8d0 <_fflush_r+0x6c>)
 800c880:	429c      	cmp	r4, r3
 800c882:	d11b      	bne.n	800c8bc <_fflush_r+0x58>
 800c884:	686c      	ldr	r4, [r5, #4]
 800c886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0ef      	beq.n	800c86e <_fflush_r+0xa>
 800c88e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c890:	07d0      	lsls	r0, r2, #31
 800c892:	d404      	bmi.n	800c89e <_fflush_r+0x3a>
 800c894:	0599      	lsls	r1, r3, #22
 800c896:	d402      	bmi.n	800c89e <_fflush_r+0x3a>
 800c898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c89a:	f000 f915 	bl	800cac8 <__retarget_lock_acquire_recursive>
 800c89e:	4628      	mov	r0, r5
 800c8a0:	4621      	mov	r1, r4
 800c8a2:	f7ff ff59 	bl	800c758 <__sflush_r>
 800c8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8a8:	07da      	lsls	r2, r3, #31
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	d4e0      	bmi.n	800c870 <_fflush_r+0xc>
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	059b      	lsls	r3, r3, #22
 800c8b2:	d4dd      	bmi.n	800c870 <_fflush_r+0xc>
 800c8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8b6:	f000 f908 	bl	800caca <__retarget_lock_release_recursive>
 800c8ba:	e7d9      	b.n	800c870 <_fflush_r+0xc>
 800c8bc:	4b05      	ldr	r3, [pc, #20]	; (800c8d4 <_fflush_r+0x70>)
 800c8be:	429c      	cmp	r4, r3
 800c8c0:	d101      	bne.n	800c8c6 <_fflush_r+0x62>
 800c8c2:	68ac      	ldr	r4, [r5, #8]
 800c8c4:	e7df      	b.n	800c886 <_fflush_r+0x22>
 800c8c6:	4b04      	ldr	r3, [pc, #16]	; (800c8d8 <_fflush_r+0x74>)
 800c8c8:	429c      	cmp	r4, r3
 800c8ca:	bf08      	it	eq
 800c8cc:	68ec      	ldreq	r4, [r5, #12]
 800c8ce:	e7da      	b.n	800c886 <_fflush_r+0x22>
 800c8d0:	0800d4c0 	.word	0x0800d4c0
 800c8d4:	0800d4e0 	.word	0x0800d4e0
 800c8d8:	0800d4a0 	.word	0x0800d4a0

0800c8dc <std>:
 800c8dc:	2300      	movs	r3, #0
 800c8de:	b510      	push	{r4, lr}
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	e9c0 3300 	strd	r3, r3, [r0]
 800c8e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8ea:	6083      	str	r3, [r0, #8]
 800c8ec:	8181      	strh	r1, [r0, #12]
 800c8ee:	6643      	str	r3, [r0, #100]	; 0x64
 800c8f0:	81c2      	strh	r2, [r0, #14]
 800c8f2:	6183      	str	r3, [r0, #24]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	2208      	movs	r2, #8
 800c8f8:	305c      	adds	r0, #92	; 0x5c
 800c8fa:	f7fd fbff 	bl	800a0fc <memset>
 800c8fe:	4b05      	ldr	r3, [pc, #20]	; (800c914 <std+0x38>)
 800c900:	6263      	str	r3, [r4, #36]	; 0x24
 800c902:	4b05      	ldr	r3, [pc, #20]	; (800c918 <std+0x3c>)
 800c904:	62a3      	str	r3, [r4, #40]	; 0x28
 800c906:	4b05      	ldr	r3, [pc, #20]	; (800c91c <std+0x40>)
 800c908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c90a:	4b05      	ldr	r3, [pc, #20]	; (800c920 <std+0x44>)
 800c90c:	6224      	str	r4, [r4, #32]
 800c90e:	6323      	str	r3, [r4, #48]	; 0x30
 800c910:	bd10      	pop	{r4, pc}
 800c912:	bf00      	nop
 800c914:	0800ccb5 	.word	0x0800ccb5
 800c918:	0800ccd7 	.word	0x0800ccd7
 800c91c:	0800cd0f 	.word	0x0800cd0f
 800c920:	0800cd33 	.word	0x0800cd33

0800c924 <_cleanup_r>:
 800c924:	4901      	ldr	r1, [pc, #4]	; (800c92c <_cleanup_r+0x8>)
 800c926:	f000 b8af 	b.w	800ca88 <_fwalk_reent>
 800c92a:	bf00      	nop
 800c92c:	0800c865 	.word	0x0800c865

0800c930 <__sfmoreglue>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	1e4a      	subs	r2, r1, #1
 800c934:	2568      	movs	r5, #104	; 0x68
 800c936:	4355      	muls	r5, r2
 800c938:	460e      	mov	r6, r1
 800c93a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c93e:	f7ff fb15 	bl	800bf6c <_malloc_r>
 800c942:	4604      	mov	r4, r0
 800c944:	b140      	cbz	r0, 800c958 <__sfmoreglue+0x28>
 800c946:	2100      	movs	r1, #0
 800c948:	e9c0 1600 	strd	r1, r6, [r0]
 800c94c:	300c      	adds	r0, #12
 800c94e:	60a0      	str	r0, [r4, #8]
 800c950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c954:	f7fd fbd2 	bl	800a0fc <memset>
 800c958:	4620      	mov	r0, r4
 800c95a:	bd70      	pop	{r4, r5, r6, pc}

0800c95c <__sfp_lock_acquire>:
 800c95c:	4801      	ldr	r0, [pc, #4]	; (800c964 <__sfp_lock_acquire+0x8>)
 800c95e:	f000 b8b3 	b.w	800cac8 <__retarget_lock_acquire_recursive>
 800c962:	bf00      	nop
 800c964:	20004f80 	.word	0x20004f80

0800c968 <__sfp_lock_release>:
 800c968:	4801      	ldr	r0, [pc, #4]	; (800c970 <__sfp_lock_release+0x8>)
 800c96a:	f000 b8ae 	b.w	800caca <__retarget_lock_release_recursive>
 800c96e:	bf00      	nop
 800c970:	20004f80 	.word	0x20004f80

0800c974 <__sinit_lock_acquire>:
 800c974:	4801      	ldr	r0, [pc, #4]	; (800c97c <__sinit_lock_acquire+0x8>)
 800c976:	f000 b8a7 	b.w	800cac8 <__retarget_lock_acquire_recursive>
 800c97a:	bf00      	nop
 800c97c:	20004f7b 	.word	0x20004f7b

0800c980 <__sinit_lock_release>:
 800c980:	4801      	ldr	r0, [pc, #4]	; (800c988 <__sinit_lock_release+0x8>)
 800c982:	f000 b8a2 	b.w	800caca <__retarget_lock_release_recursive>
 800c986:	bf00      	nop
 800c988:	20004f7b 	.word	0x20004f7b

0800c98c <__sinit>:
 800c98c:	b510      	push	{r4, lr}
 800c98e:	4604      	mov	r4, r0
 800c990:	f7ff fff0 	bl	800c974 <__sinit_lock_acquire>
 800c994:	69a3      	ldr	r3, [r4, #24]
 800c996:	b11b      	cbz	r3, 800c9a0 <__sinit+0x14>
 800c998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c99c:	f7ff bff0 	b.w	800c980 <__sinit_lock_release>
 800c9a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c9a4:	6523      	str	r3, [r4, #80]	; 0x50
 800c9a6:	4b13      	ldr	r3, [pc, #76]	; (800c9f4 <__sinit+0x68>)
 800c9a8:	4a13      	ldr	r2, [pc, #76]	; (800c9f8 <__sinit+0x6c>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800c9ae:	42a3      	cmp	r3, r4
 800c9b0:	bf04      	itt	eq
 800c9b2:	2301      	moveq	r3, #1
 800c9b4:	61a3      	streq	r3, [r4, #24]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f000 f820 	bl	800c9fc <__sfp>
 800c9bc:	6060      	str	r0, [r4, #4]
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f000 f81c 	bl	800c9fc <__sfp>
 800c9c4:	60a0      	str	r0, [r4, #8]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 f818 	bl	800c9fc <__sfp>
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	60e0      	str	r0, [r4, #12]
 800c9d0:	2104      	movs	r1, #4
 800c9d2:	6860      	ldr	r0, [r4, #4]
 800c9d4:	f7ff ff82 	bl	800c8dc <std>
 800c9d8:	68a0      	ldr	r0, [r4, #8]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	2109      	movs	r1, #9
 800c9de:	f7ff ff7d 	bl	800c8dc <std>
 800c9e2:	68e0      	ldr	r0, [r4, #12]
 800c9e4:	2202      	movs	r2, #2
 800c9e6:	2112      	movs	r1, #18
 800c9e8:	f7ff ff78 	bl	800c8dc <std>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	61a3      	str	r3, [r4, #24]
 800c9f0:	e7d2      	b.n	800c998 <__sinit+0xc>
 800c9f2:	bf00      	nop
 800c9f4:	0800d118 	.word	0x0800d118
 800c9f8:	0800c925 	.word	0x0800c925

0800c9fc <__sfp>:
 800c9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fe:	4607      	mov	r7, r0
 800ca00:	f7ff ffac 	bl	800c95c <__sfp_lock_acquire>
 800ca04:	4b1e      	ldr	r3, [pc, #120]	; (800ca80 <__sfp+0x84>)
 800ca06:	681e      	ldr	r6, [r3, #0]
 800ca08:	69b3      	ldr	r3, [r6, #24]
 800ca0a:	b913      	cbnz	r3, 800ca12 <__sfp+0x16>
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7ff ffbd 	bl	800c98c <__sinit>
 800ca12:	3648      	adds	r6, #72	; 0x48
 800ca14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	d503      	bpl.n	800ca24 <__sfp+0x28>
 800ca1c:	6833      	ldr	r3, [r6, #0]
 800ca1e:	b30b      	cbz	r3, 800ca64 <__sfp+0x68>
 800ca20:	6836      	ldr	r6, [r6, #0]
 800ca22:	e7f7      	b.n	800ca14 <__sfp+0x18>
 800ca24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca28:	b9d5      	cbnz	r5, 800ca60 <__sfp+0x64>
 800ca2a:	4b16      	ldr	r3, [pc, #88]	; (800ca84 <__sfp+0x88>)
 800ca2c:	60e3      	str	r3, [r4, #12]
 800ca2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca32:	6665      	str	r5, [r4, #100]	; 0x64
 800ca34:	f000 f847 	bl	800cac6 <__retarget_lock_init_recursive>
 800ca38:	f7ff ff96 	bl	800c968 <__sfp_lock_release>
 800ca3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca44:	6025      	str	r5, [r4, #0]
 800ca46:	61a5      	str	r5, [r4, #24]
 800ca48:	2208      	movs	r2, #8
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca50:	f7fd fb54 	bl	800a0fc <memset>
 800ca54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca60:	3468      	adds	r4, #104	; 0x68
 800ca62:	e7d9      	b.n	800ca18 <__sfp+0x1c>
 800ca64:	2104      	movs	r1, #4
 800ca66:	4638      	mov	r0, r7
 800ca68:	f7ff ff62 	bl	800c930 <__sfmoreglue>
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	6030      	str	r0, [r6, #0]
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d1d5      	bne.n	800ca20 <__sfp+0x24>
 800ca74:	f7ff ff78 	bl	800c968 <__sfp_lock_release>
 800ca78:	230c      	movs	r3, #12
 800ca7a:	603b      	str	r3, [r7, #0]
 800ca7c:	e7ee      	b.n	800ca5c <__sfp+0x60>
 800ca7e:	bf00      	nop
 800ca80:	0800d118 	.word	0x0800d118
 800ca84:	ffff0001 	.word	0xffff0001

0800ca88 <_fwalk_reent>:
 800ca88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca8c:	4606      	mov	r6, r0
 800ca8e:	4688      	mov	r8, r1
 800ca90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca94:	2700      	movs	r7, #0
 800ca96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ca9e:	d505      	bpl.n	800caac <_fwalk_reent+0x24>
 800caa0:	6824      	ldr	r4, [r4, #0]
 800caa2:	2c00      	cmp	r4, #0
 800caa4:	d1f7      	bne.n	800ca96 <_fwalk_reent+0xe>
 800caa6:	4638      	mov	r0, r7
 800caa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caac:	89ab      	ldrh	r3, [r5, #12]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d907      	bls.n	800cac2 <_fwalk_reent+0x3a>
 800cab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cab6:	3301      	adds	r3, #1
 800cab8:	d003      	beq.n	800cac2 <_fwalk_reent+0x3a>
 800caba:	4629      	mov	r1, r5
 800cabc:	4630      	mov	r0, r6
 800cabe:	47c0      	blx	r8
 800cac0:	4307      	orrs	r7, r0
 800cac2:	3568      	adds	r5, #104	; 0x68
 800cac4:	e7e9      	b.n	800ca9a <_fwalk_reent+0x12>

0800cac6 <__retarget_lock_init_recursive>:
 800cac6:	4770      	bx	lr

0800cac8 <__retarget_lock_acquire_recursive>:
 800cac8:	4770      	bx	lr

0800caca <__retarget_lock_release_recursive>:
 800caca:	4770      	bx	lr

0800cacc <__swhatbuf_r>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	460e      	mov	r6, r1
 800cad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad4:	2900      	cmp	r1, #0
 800cad6:	b096      	sub	sp, #88	; 0x58
 800cad8:	4614      	mov	r4, r2
 800cada:	461d      	mov	r5, r3
 800cadc:	da07      	bge.n	800caee <__swhatbuf_r+0x22>
 800cade:	2300      	movs	r3, #0
 800cae0:	602b      	str	r3, [r5, #0]
 800cae2:	89b3      	ldrh	r3, [r6, #12]
 800cae4:	061a      	lsls	r2, r3, #24
 800cae6:	d410      	bmi.n	800cb0a <__swhatbuf_r+0x3e>
 800cae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caec:	e00e      	b.n	800cb0c <__swhatbuf_r+0x40>
 800caee:	466a      	mov	r2, sp
 800caf0:	f000 f946 	bl	800cd80 <_fstat_r>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	dbf2      	blt.n	800cade <__swhatbuf_r+0x12>
 800caf8:	9a01      	ldr	r2, [sp, #4]
 800cafa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cafe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb02:	425a      	negs	r2, r3
 800cb04:	415a      	adcs	r2, r3
 800cb06:	602a      	str	r2, [r5, #0]
 800cb08:	e7ee      	b.n	800cae8 <__swhatbuf_r+0x1c>
 800cb0a:	2340      	movs	r3, #64	; 0x40
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	b016      	add	sp, #88	; 0x58
 800cb12:	bd70      	pop	{r4, r5, r6, pc}

0800cb14 <__smakebuf_r>:
 800cb14:	898b      	ldrh	r3, [r1, #12]
 800cb16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb18:	079d      	lsls	r5, r3, #30
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	460c      	mov	r4, r1
 800cb1e:	d507      	bpl.n	800cb30 <__smakebuf_r+0x1c>
 800cb20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	6123      	str	r3, [r4, #16]
 800cb28:	2301      	movs	r3, #1
 800cb2a:	6163      	str	r3, [r4, #20]
 800cb2c:	b002      	add	sp, #8
 800cb2e:	bd70      	pop	{r4, r5, r6, pc}
 800cb30:	ab01      	add	r3, sp, #4
 800cb32:	466a      	mov	r2, sp
 800cb34:	f7ff ffca 	bl	800cacc <__swhatbuf_r>
 800cb38:	9900      	ldr	r1, [sp, #0]
 800cb3a:	4605      	mov	r5, r0
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f7ff fa15 	bl	800bf6c <_malloc_r>
 800cb42:	b948      	cbnz	r0, 800cb58 <__smakebuf_r+0x44>
 800cb44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb48:	059a      	lsls	r2, r3, #22
 800cb4a:	d4ef      	bmi.n	800cb2c <__smakebuf_r+0x18>
 800cb4c:	f023 0303 	bic.w	r3, r3, #3
 800cb50:	f043 0302 	orr.w	r3, r3, #2
 800cb54:	81a3      	strh	r3, [r4, #12]
 800cb56:	e7e3      	b.n	800cb20 <__smakebuf_r+0xc>
 800cb58:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <__smakebuf_r+0x7c>)
 800cb5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb5c:	89a3      	ldrh	r3, [r4, #12]
 800cb5e:	6020      	str	r0, [r4, #0]
 800cb60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb64:	81a3      	strh	r3, [r4, #12]
 800cb66:	9b00      	ldr	r3, [sp, #0]
 800cb68:	6163      	str	r3, [r4, #20]
 800cb6a:	9b01      	ldr	r3, [sp, #4]
 800cb6c:	6120      	str	r0, [r4, #16]
 800cb6e:	b15b      	cbz	r3, 800cb88 <__smakebuf_r+0x74>
 800cb70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb74:	4630      	mov	r0, r6
 800cb76:	f000 f915 	bl	800cda4 <_isatty_r>
 800cb7a:	b128      	cbz	r0, 800cb88 <__smakebuf_r+0x74>
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	f023 0303 	bic.w	r3, r3, #3
 800cb82:	f043 0301 	orr.w	r3, r3, #1
 800cb86:	81a3      	strh	r3, [r4, #12]
 800cb88:	89a0      	ldrh	r0, [r4, #12]
 800cb8a:	4305      	orrs	r5, r0
 800cb8c:	81a5      	strh	r5, [r4, #12]
 800cb8e:	e7cd      	b.n	800cb2c <__smakebuf_r+0x18>
 800cb90:	0800c925 	.word	0x0800c925

0800cb94 <memmove>:
 800cb94:	4288      	cmp	r0, r1
 800cb96:	b510      	push	{r4, lr}
 800cb98:	eb01 0402 	add.w	r4, r1, r2
 800cb9c:	d902      	bls.n	800cba4 <memmove+0x10>
 800cb9e:	4284      	cmp	r4, r0
 800cba0:	4623      	mov	r3, r4
 800cba2:	d807      	bhi.n	800cbb4 <memmove+0x20>
 800cba4:	1e43      	subs	r3, r0, #1
 800cba6:	42a1      	cmp	r1, r4
 800cba8:	d008      	beq.n	800cbbc <memmove+0x28>
 800cbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbb2:	e7f8      	b.n	800cba6 <memmove+0x12>
 800cbb4:	4402      	add	r2, r0
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	428a      	cmp	r2, r1
 800cbba:	d100      	bne.n	800cbbe <memmove+0x2a>
 800cbbc:	bd10      	pop	{r4, pc}
 800cbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbc6:	e7f7      	b.n	800cbb8 <memmove+0x24>

0800cbc8 <__malloc_lock>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__malloc_lock+0x8>)
 800cbca:	f7ff bf7d 	b.w	800cac8 <__retarget_lock_acquire_recursive>
 800cbce:	bf00      	nop
 800cbd0:	20004f7c 	.word	0x20004f7c

0800cbd4 <__malloc_unlock>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__malloc_unlock+0x8>)
 800cbd6:	f7ff bf78 	b.w	800caca <__retarget_lock_release_recursive>
 800cbda:	bf00      	nop
 800cbdc:	20004f7c 	.word	0x20004f7c

0800cbe0 <_realloc_r>:
 800cbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe2:	4607      	mov	r7, r0
 800cbe4:	4614      	mov	r4, r2
 800cbe6:	460e      	mov	r6, r1
 800cbe8:	b921      	cbnz	r1, 800cbf4 <_realloc_r+0x14>
 800cbea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cbee:	4611      	mov	r1, r2
 800cbf0:	f7ff b9bc 	b.w	800bf6c <_malloc_r>
 800cbf4:	b922      	cbnz	r2, 800cc00 <_realloc_r+0x20>
 800cbf6:	f7ff f969 	bl	800becc <_free_r>
 800cbfa:	4625      	mov	r5, r4
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc00:	f000 f8f2 	bl	800cde8 <_malloc_usable_size_r>
 800cc04:	42a0      	cmp	r0, r4
 800cc06:	d20f      	bcs.n	800cc28 <_realloc_r+0x48>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	f7ff f9ae 	bl	800bf6c <_malloc_r>
 800cc10:	4605      	mov	r5, r0
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d0f2      	beq.n	800cbfc <_realloc_r+0x1c>
 800cc16:	4631      	mov	r1, r6
 800cc18:	4622      	mov	r2, r4
 800cc1a:	f7fd fa61 	bl	800a0e0 <memcpy>
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4638      	mov	r0, r7
 800cc22:	f7ff f953 	bl	800becc <_free_r>
 800cc26:	e7e9      	b.n	800cbfc <_realloc_r+0x1c>
 800cc28:	4635      	mov	r5, r6
 800cc2a:	e7e7      	b.n	800cbfc <_realloc_r+0x1c>

0800cc2c <_raise_r>:
 800cc2c:	291f      	cmp	r1, #31
 800cc2e:	b538      	push	{r3, r4, r5, lr}
 800cc30:	4604      	mov	r4, r0
 800cc32:	460d      	mov	r5, r1
 800cc34:	d904      	bls.n	800cc40 <_raise_r+0x14>
 800cc36:	2316      	movs	r3, #22
 800cc38:	6003      	str	r3, [r0, #0]
 800cc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3e:	bd38      	pop	{r3, r4, r5, pc}
 800cc40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc42:	b112      	cbz	r2, 800cc4a <_raise_r+0x1e>
 800cc44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc48:	b94b      	cbnz	r3, 800cc5e <_raise_r+0x32>
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f000 f830 	bl	800ccb0 <_getpid_r>
 800cc50:	462a      	mov	r2, r5
 800cc52:	4601      	mov	r1, r0
 800cc54:	4620      	mov	r0, r4
 800cc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc5a:	f000 b817 	b.w	800cc8c <_kill_r>
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d00a      	beq.n	800cc78 <_raise_r+0x4c>
 800cc62:	1c59      	adds	r1, r3, #1
 800cc64:	d103      	bne.n	800cc6e <_raise_r+0x42>
 800cc66:	2316      	movs	r3, #22
 800cc68:	6003      	str	r3, [r0, #0]
 800cc6a:	2001      	movs	r0, #1
 800cc6c:	e7e7      	b.n	800cc3e <_raise_r+0x12>
 800cc6e:	2400      	movs	r4, #0
 800cc70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc74:	4628      	mov	r0, r5
 800cc76:	4798      	blx	r3
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e7e0      	b.n	800cc3e <_raise_r+0x12>

0800cc7c <raise>:
 800cc7c:	4b02      	ldr	r3, [pc, #8]	; (800cc88 <raise+0xc>)
 800cc7e:	4601      	mov	r1, r0
 800cc80:	6818      	ldr	r0, [r3, #0]
 800cc82:	f7ff bfd3 	b.w	800cc2c <_raise_r>
 800cc86:	bf00      	nop
 800cc88:	20000014 	.word	0x20000014

0800cc8c <_kill_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4d07      	ldr	r5, [pc, #28]	; (800ccac <_kill_r+0x20>)
 800cc90:	2300      	movs	r3, #0
 800cc92:	4604      	mov	r4, r0
 800cc94:	4608      	mov	r0, r1
 800cc96:	4611      	mov	r1, r2
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	f7f5 fd01 	bl	80026a0 <_kill>
 800cc9e:	1c43      	adds	r3, r0, #1
 800cca0:	d102      	bne.n	800cca8 <_kill_r+0x1c>
 800cca2:	682b      	ldr	r3, [r5, #0]
 800cca4:	b103      	cbz	r3, 800cca8 <_kill_r+0x1c>
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	bd38      	pop	{r3, r4, r5, pc}
 800ccaa:	bf00      	nop
 800ccac:	20004f84 	.word	0x20004f84

0800ccb0 <_getpid_r>:
 800ccb0:	f7f5 bcee 	b.w	8002690 <_getpid>

0800ccb4 <__sread>:
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccbc:	f000 f89c 	bl	800cdf8 <_read_r>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	bfab      	itete	ge
 800ccc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccc6:	89a3      	ldrhlt	r3, [r4, #12]
 800ccc8:	181b      	addge	r3, r3, r0
 800ccca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccce:	bfac      	ite	ge
 800ccd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccd2:	81a3      	strhlt	r3, [r4, #12]
 800ccd4:	bd10      	pop	{r4, pc}

0800ccd6 <__swrite>:
 800ccd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccda:	461f      	mov	r7, r3
 800ccdc:	898b      	ldrh	r3, [r1, #12]
 800ccde:	05db      	lsls	r3, r3, #23
 800cce0:	4605      	mov	r5, r0
 800cce2:	460c      	mov	r4, r1
 800cce4:	4616      	mov	r6, r2
 800cce6:	d505      	bpl.n	800ccf4 <__swrite+0x1e>
 800cce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccec:	2302      	movs	r3, #2
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f000 f868 	bl	800cdc4 <_lseek_r>
 800ccf4:	89a3      	ldrh	r3, [r4, #12]
 800ccf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccfe:	81a3      	strh	r3, [r4, #12]
 800cd00:	4632      	mov	r2, r6
 800cd02:	463b      	mov	r3, r7
 800cd04:	4628      	mov	r0, r5
 800cd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0a:	f000 b817 	b.w	800cd3c <_write_r>

0800cd0e <__sseek>:
 800cd0e:	b510      	push	{r4, lr}
 800cd10:	460c      	mov	r4, r1
 800cd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd16:	f000 f855 	bl	800cdc4 <_lseek_r>
 800cd1a:	1c43      	adds	r3, r0, #1
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	bf15      	itete	ne
 800cd20:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd2a:	81a3      	strheq	r3, [r4, #12]
 800cd2c:	bf18      	it	ne
 800cd2e:	81a3      	strhne	r3, [r4, #12]
 800cd30:	bd10      	pop	{r4, pc}

0800cd32 <__sclose>:
 800cd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd36:	f000 b813 	b.w	800cd60 <_close_r>
	...

0800cd3c <_write_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4d07      	ldr	r5, [pc, #28]	; (800cd5c <_write_r+0x20>)
 800cd40:	4604      	mov	r4, r0
 800cd42:	4608      	mov	r0, r1
 800cd44:	4611      	mov	r1, r2
 800cd46:	2200      	movs	r2, #0
 800cd48:	602a      	str	r2, [r5, #0]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	f7f5 fcdf 	bl	800270e <_write>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	d102      	bne.n	800cd5a <_write_r+0x1e>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	b103      	cbz	r3, 800cd5a <_write_r+0x1e>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	20004f84 	.word	0x20004f84

0800cd60 <_close_r>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4d06      	ldr	r5, [pc, #24]	; (800cd7c <_close_r+0x1c>)
 800cd64:	2300      	movs	r3, #0
 800cd66:	4604      	mov	r4, r0
 800cd68:	4608      	mov	r0, r1
 800cd6a:	602b      	str	r3, [r5, #0]
 800cd6c:	f7f5 fceb 	bl	8002746 <_close>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d102      	bne.n	800cd7a <_close_r+0x1a>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	b103      	cbz	r3, 800cd7a <_close_r+0x1a>
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	20004f84 	.word	0x20004f84

0800cd80 <_fstat_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4d07      	ldr	r5, [pc, #28]	; (800cda0 <_fstat_r+0x20>)
 800cd84:	2300      	movs	r3, #0
 800cd86:	4604      	mov	r4, r0
 800cd88:	4608      	mov	r0, r1
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	602b      	str	r3, [r5, #0]
 800cd8e:	f7f5 fce6 	bl	800275e <_fstat>
 800cd92:	1c43      	adds	r3, r0, #1
 800cd94:	d102      	bne.n	800cd9c <_fstat_r+0x1c>
 800cd96:	682b      	ldr	r3, [r5, #0]
 800cd98:	b103      	cbz	r3, 800cd9c <_fstat_r+0x1c>
 800cd9a:	6023      	str	r3, [r4, #0]
 800cd9c:	bd38      	pop	{r3, r4, r5, pc}
 800cd9e:	bf00      	nop
 800cda0:	20004f84 	.word	0x20004f84

0800cda4 <_isatty_r>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	4d06      	ldr	r5, [pc, #24]	; (800cdc0 <_isatty_r+0x1c>)
 800cda8:	2300      	movs	r3, #0
 800cdaa:	4604      	mov	r4, r0
 800cdac:	4608      	mov	r0, r1
 800cdae:	602b      	str	r3, [r5, #0]
 800cdb0:	f7f5 fce5 	bl	800277e <_isatty>
 800cdb4:	1c43      	adds	r3, r0, #1
 800cdb6:	d102      	bne.n	800cdbe <_isatty_r+0x1a>
 800cdb8:	682b      	ldr	r3, [r5, #0]
 800cdba:	b103      	cbz	r3, 800cdbe <_isatty_r+0x1a>
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	bd38      	pop	{r3, r4, r5, pc}
 800cdc0:	20004f84 	.word	0x20004f84

0800cdc4 <_lseek_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4d07      	ldr	r5, [pc, #28]	; (800cde4 <_lseek_r+0x20>)
 800cdc8:	4604      	mov	r4, r0
 800cdca:	4608      	mov	r0, r1
 800cdcc:	4611      	mov	r1, r2
 800cdce:	2200      	movs	r2, #0
 800cdd0:	602a      	str	r2, [r5, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f7f5 fcde 	bl	8002794 <_lseek>
 800cdd8:	1c43      	adds	r3, r0, #1
 800cdda:	d102      	bne.n	800cde2 <_lseek_r+0x1e>
 800cddc:	682b      	ldr	r3, [r5, #0]
 800cdde:	b103      	cbz	r3, 800cde2 <_lseek_r+0x1e>
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	bd38      	pop	{r3, r4, r5, pc}
 800cde4:	20004f84 	.word	0x20004f84

0800cde8 <_malloc_usable_size_r>:
 800cde8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdec:	1f18      	subs	r0, r3, #4
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bfbc      	itt	lt
 800cdf2:	580b      	ldrlt	r3, [r1, r0]
 800cdf4:	18c0      	addlt	r0, r0, r3
 800cdf6:	4770      	bx	lr

0800cdf8 <_read_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	; (800ce18 <_read_r+0x20>)
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	4608      	mov	r0, r1
 800ce00:	4611      	mov	r1, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	602a      	str	r2, [r5, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f7f5 fc64 	bl	80026d4 <_read>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_read_r+0x1e>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_read_r+0x1e>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20004f84 	.word	0x20004f84

0800ce1c <_init>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	bf00      	nop
 800ce20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce22:	bc08      	pop	{r3}
 800ce24:	469e      	mov	lr, r3
 800ce26:	4770      	bx	lr

0800ce28 <_fini>:
 800ce28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2a:	bf00      	nop
 800ce2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce2e:	bc08      	pop	{r3}
 800ce30:	469e      	mov	lr, r3
 800ce32:	4770      	bx	lr
