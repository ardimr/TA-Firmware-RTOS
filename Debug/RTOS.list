
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ce0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b60  08012e80  08012e80  00022e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139e0  080139e0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080139e0  080139e0  000239e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080139e8  080139e8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080139e8  080139e8  000239e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080139ec  080139ec  000239ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080139f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000595c  20000200  08013bec  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005b5c  08013bec  00035b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029378  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d1  00000000  00000000  000595a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  0005e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d78  00000000  00000000  000605c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da7c  00000000  00000000  00062338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025540  00000000  00000000  0007fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad491  00000000  00000000  000a52f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b40  00000000  00000000  001527d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012e68 	.word	0x08012e68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	08012e68 	.word	0x08012e68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <Write_MFRC522+0x58>)
 8001020:	f003 fcba 	bl	8004998 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001024:	f107 010f 	add.w	r1, r7, #15
 8001028:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800102c:	2201      	movs	r2, #1
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <Write_MFRC522+0x5c>)
 8001030:	f005 f9bb 	bl	80063aa <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8001034:	1db9      	adds	r1, r7, #6
 8001036:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103a:	2201      	movs	r2, #1
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <Write_MFRC522+0x5c>)
 800103e:	f005 f9b4 	bl	80063aa <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <Write_MFRC522+0x58>)
 8001048:	f003 fca6 	bl	8004998 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020000 	.word	0x40020000
 8001058:	2000535c 	.word	0x2000535c

0800105c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	b25b      	sxtb	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <Read_MFRC522+0x60>)
 8001082:	f003 fc89 	bl	8004998 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001086:	f107 010e 	add.w	r1, r7, #14
 800108a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <Read_MFRC522+0x64>)
 8001092:	f005 f98a 	bl	80063aa <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800109e:	2201      	movs	r2, #1
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <Read_MFRC522+0x64>)
 80010a2:	f005 fabe 	bl	8006622 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <Read_MFRC522+0x60>)
 80010ac:	f003 fc74 	bl	8004998 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000
 80010c0:	2000535c 	.word	0x2000535c

080010c4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffc0 	bl	800105c <Read_MFRC522>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff85 	bl	8000ffc <Write_MFRC522>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	460a      	mov	r2, r1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4613      	mov	r3, r2
 8001108:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffa5 	bl	800105c <Read_MFRC522>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001116:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800111a:	43db      	mvns	r3, r3
 800111c:	b25a      	sxtb	r2, r3
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4013      	ands	r3, r2
 8001124:	b25b      	sxtb	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff65 	bl	8000ffc <Write_MFRC522>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2014      	movs	r0, #20
 8001142:	f7ff ffbf 	bl	80010c4 <SetBitMask>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800114e:	210f      	movs	r1, #15
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff53 	bl	8000ffc <Write_MFRC522>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <MFRC522_Init+0x54>)
 8001166:	f003 fc17 	bl	8004998 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 800116a:	f7ff ffee 	bl	800114a <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	202a      	movs	r0, #42	; 0x2a
 8001172:	f7ff ff43 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 8001176:	21a9      	movs	r1, #169	; 0xa9
 8001178:	202b      	movs	r0, #43	; 0x2b
 800117a:	f7ff ff3f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800117e:	2103      	movs	r1, #3
 8001180:	202d      	movs	r0, #45	; 0x2d
 8001182:	f7ff ff3b 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001186:	21e8      	movs	r1, #232	; 0xe8
 8001188:	202c      	movs	r0, #44	; 0x2c
 800118a:	f7ff ff37 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	2015      	movs	r0, #21
 8001192:	f7ff ff33 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 8001196:	213d      	movs	r1, #61	; 0x3d
 8001198:	2011      	movs	r0, #17
 800119a:	f7ff ff2f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 800119e:	2170      	movs	r1, #112	; 0x70
 80011a0:	2026      	movs	r0, #38	; 0x26
 80011a2:	f7ff ff2b 	bl	8000ffc <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80011a6:	f7ff ffc8 	bl	800113a <AntennaOn>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000

080011b4 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80011c0:	2107      	movs	r1, #7
 80011c2:	200d      	movs	r0, #13
 80011c4:	f7ff ff1a 	bl	8000ffc <Write_MFRC522>

  TagType[0] = reqMode;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	200c      	movs	r0, #12
 80011dc:	f000 f80f 	bl	80011fe <MFRC522_ToCard>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <MFRC522_Request+0x3c>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d001      	beq.n	80011f4 <MFRC522_Request+0x40>
    status = MI_ERR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	4613      	mov	r3, r2
 800120e:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8001210:	2302      	movs	r3, #2
 8001212:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b0c      	cmp	r3, #12
 8001220:	d006      	beq.n	8001230 <MFRC522_ToCard+0x32>
 8001222:	2b0e      	cmp	r3, #14
 8001224:	d109      	bne.n	800123a <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001226:	2312      	movs	r3, #18
 8001228:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 800122a:	2310      	movs	r3, #16
 800122c:	777b      	strb	r3, [r7, #29]
        break;
 800122e:	e005      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001230:	2377      	movs	r3, #119	; 0x77
 8001232:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001234:	2330      	movs	r3, #48	; 0x30
 8001236:	777b      	strb	r3, [r7, #29]
        break;
 8001238:	e000      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800123a:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800123c:	7fbb      	ldrb	r3, [r7, #30]
 800123e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff fed8 	bl	8000ffc <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff ff53 	bl	80010fa <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	200a      	movs	r0, #10
 8001258:	f7ff ff34 	bl	80010c4 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 800125c:	2100      	movs	r1, #0
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fecc 	bl	8000ffc <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e00a      	b.n	8001280 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	2009      	movs	r0, #9
 8001276:	f7ff fec1 	bl	8000ffc <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3301      	adds	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3f0      	bcc.n	800126a <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4619      	mov	r1, r3
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff feb5 	bl	8000ffc <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d103      	bne.n	80012a0 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	200d      	movs	r0, #13
 800129c:	f7ff ff12 	bl	80010c4 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80012a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a4:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80012a6:	2004      	movs	r0, #4
 80012a8:	f7ff fed8 	bl	800105c <Read_MFRC522>
 80012ac:	4603      	mov	r3, r0
 80012ae:	773b      	strb	r3, [r7, #28]
    i--;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <MFRC522_ToCard+0xd4>
 80012bc:	7f3b      	ldrb	r3, [r7, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <MFRC522_ToCard+0xd4>
 80012c6:	7f3a      	ldrb	r2, [r7, #28]
 80012c8:	7f7b      	ldrb	r3, [r7, #29]
 80012ca:	4013      	ands	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0e9      	beq.n	80012a6 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	200d      	movs	r0, #13
 80012d6:	f7ff ff10 	bl	80010fa <ClearBitMask>

  if (i != 0)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d052      	beq.n	8001386 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80012e0:	2006      	movs	r0, #6
 80012e2:	f7ff febb 	bl	800105c <Read_MFRC522>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 031b 	and.w	r3, r3, #27
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d148      	bne.n	8001382 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80012f4:	7f3a      	ldrb	r2, [r7, #28]
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8001304:	2301      	movs	r3, #1
 8001306:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d13b      	bne.n	8001386 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fea4 	bl	800105c <Read_MFRC522>
 8001314:	4603      	mov	r3, r0
 8001316:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001318:	200c      	movs	r0, #12
 800131a:	f7ff fe9f 	bl	800105c <Read_MFRC522>
 800131e:	4603      	mov	r3, r0
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 800132c:	7f3b      	ldrb	r3, [r7, #28]
 800132e:	3b01      	subs	r3, #1
 8001330:	00da      	lsls	r2, r3, #3
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4413      	add	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e004      	b.n	8001348 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 800133e:	7f3b      	ldrb	r3, [r7, #28]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	461a      	mov	r2, r3
 8001344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001346:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001348:	7f3b      	ldrb	r3, [r7, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <MFRC522_ToCard+0x154>
        {
          n = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	2b10      	cmp	r3, #16
 8001356:	d901      	bls.n	800135c <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8001358:	2310      	movs	r3, #16
 800135a:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e00a      	b.n	8001378 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	18d4      	adds	r4, r2, r3
 8001368:	2009      	movs	r0, #9
 800136a:	f7ff fe77 	bl	800105c <Read_MFRC522>
 800136e:	4603      	mov	r3, r0
 8001370:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3301      	adds	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	7f3b      	ldrb	r3, [r7, #28]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f0      	bcc.n	8001362 <MFRC522_ToCard+0x164>
 8001380:	e001      	b.n	8001386 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001382:	2302      	movs	r3, #2
 8001384:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001386:	7ffb      	ldrb	r3, [r7, #31]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8001398:	2300      	movs	r3, #0
 800139a:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800139c:	2100      	movs	r1, #0
 800139e:	200d      	movs	r0, #13
 80013a0:	f7ff fe2c 	bl	8000ffc <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2293      	movs	r2, #147	; 0x93
 80013a8:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	2220      	movs	r2, #32
 80013b0:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200c      	movs	r0, #12
 80013c0:	f7ff ff1d 	bl	80011fe <MFRC522_ToCard>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]
 80013d2:	e009      	b.n	80013e8 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	4053      	eors	r3, r2
 80013e0:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73bb      	strb	r3, [r7, #14]
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d9f2      	bls.n	80013d4 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	7b7a      	ldrb	r2, [r7, #13]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 80013fc:	2302      	movs	r3, #2
 80013fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	0000      	movs	r0, r0
 800140c:	0000      	movs	r0, r0
	...

08001410 <RCFilter_Init>:
#include "RCFilter.h"
#include <math.h>

void RCFilter_Init(RCFilter * filter, float cutoffFreqHz, float sampleFreq_Hz){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	ed87 0a02 	vstr	s0, [r7, #8]
 800141c:	edc7 0a01 	vstr	s1, [r7, #4]
	/*Clear output buffer*/
	filter->out[0] = 0.0f;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
	filter->out[1] = 0.0f;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
	float sampleTime_s = 1.0f/ sampleFreq_Hz;
 8001430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001434:	ed97 7a01 	vldr	s14, [r7, #4]
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	edc7 7a05 	vstr	s15, [r7, #20]
	/*Compute equivalent RC Constant from cutoff Frequency*/
	float RC = 1.0f/(2* M_PI * cutoffFreqHz);
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f889 	bl	8000558 <__aeabi_f2d>
 8001446:	a31b      	add	r3, pc, #108	; (adr r3, 80014b4 <RCFilter_Init+0xa4>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8dc 	bl	8000608 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	f04f 0000 	mov.w	r0, #0
 8001458:	4915      	ldr	r1, [pc, #84]	; (80014b0 <RCFilter_Init+0xa0>)
 800145a:	f7ff f9ff 	bl	800085c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbc7 	bl	8000bf8 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	613b      	str	r3, [r7, #16]
	/*Pre-compute filter coefficient for first order low-pass filter*/
	filter->coeff[0] = sampleTime_s/(sampleTime_s+ RC);
 800146e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001472:	edd7 7a04 	vldr	s15, [r7, #16]
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	edd7 6a05 	vldr	s13, [r7, #20]
 800147e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edc3 7a00 	vstr	s15, [r3]
	filter->coeff[1] = RC/(sampleTime_s+RC);
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 6a04 	vldr	s13, [r7, #16]
 8001498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	3ff00000 	.word	0x3ff00000
 80014b4:	54442d18 	.word	0x54442d18
 80014b8:	401921fb 	.word	0x401921fb

080014bc <RCFilter_Update>:

float RCFilter_Update(RCFilter *filter, float input){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	ed87 0a00 	vstr	s0, [r7]
	/* Shift output samples */
	filter->out[1] = filter->out[0];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

	/* Compute new ouput sample */
	filter->out[0] = filter->coeff[0] * input+filter->coeff[1] * filter->out[1];
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	edd7 7a00 	vldr	s15, [r7]
 80014da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return Filtered sample */
	return filter->out[0];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	ee07 3a90 	vmov	s15, r3
}
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <MovAvgFilter_init>:

void MovAvgFilter_init(MovAvgFilter * filter){
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	/*Clear output buffer*/
	filter->out = 0.0f;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/*clear value*/
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e009      	b.n	800153a <MovAvgFilter_init+0x2c>
		filter -> val[i]= 0;
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b31      	cmp	r3, #49	; 0x31
 800153e:	ddf2      	ble.n	8001526 <MovAvgFilter_init+0x18>
	}
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <MovAvgFilter_Update>:

float MovAvgFilter_Update(MovAvgFilter *filter, float input){
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	ed87 0a00 	vstr	s0, [r7]
	/*Shifting Value and calculate the cumulative sum*/
	float sum = 0;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e019      	b.n	800159c <MovAvgFilter_Update+0x4c>
		filter->val[i] = filter-> val[i+1];
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	601a      	str	r2, [r3, #0]
		sum += filter -> val[i];
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ed97 7a05 	vldr	s14, [r7, #20]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3301      	adds	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b31      	cmp	r3, #49	; 0x31
 80015a0:	dde2      	ble.n	8001568 <MovAvgFilter_Update+0x18>
	}
	(filter -> val[BUFF_LENGTH-1]) = input;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sum += input;
 80015aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80015ae:	edd7 7a00 	vldr	s15, [r7]
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	edc7 7a05 	vstr	s15, [r7, #20]

	/*Calculating the average*/
	float avg = sum/BUFF_LENGTH;
 80015ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80015be:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80015ec <MovAvgFilter_Update+0x9c>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	edc7 7a03 	vstr	s15, [r7, #12]
	filter -> out = avg;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	return filter -> out;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015d8:	ee07 3a90 	vmov	s15, r3
}
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	42480000 	.word	0x42480000

080015f0 <nmea0183_checksum>:
void Ignition(void *argument);

/* USER CODE BEGIN PFP */
// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001600:	2301      	movs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e00a      	b.n	800161c <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4053      	eors	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3301      	adds	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe fddf 	bl	80001e0 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	1f1a      	subs	r2, r3, #4
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8ec      	bhi.n	8001606 <nmea0183_checksum+0x16>
	}
	return checksum;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i<3; i++){
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e010      	b.n	8001668 <HAL_ADC_ConvCpltCallback+0x30>
	  value[i] = buffer[i];
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_ADC_ConvCpltCallback+0x44>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_ADC_ConvCpltCallback+0x48>)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i<3; i++){
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b02      	cmp	r3, #2
 800166c:	ddeb      	ble.n	8001646 <HAL_ADC_ConvCpltCallback+0xe>
  }
  //Filtering Analog reading
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	2000520c 	.word	0x2000520c
 8001680:	20005648 	.word	0x20005648

08001684 <myprintf>:

void myprintf(const char *fmt, ...) {
 8001684:	b40f      	push	{r0, r1, r2, r3}
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <myprintf+0x44>)
 800169c:	f00e fcde 	bl	801005c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <myprintf+0x44>)
 80016a2:	f7fe fd9d 	bl	80001e0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	4905      	ldr	r1, [pc, #20]	; (80016c8 <myprintf+0x44>)
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <myprintf+0x48>)
 80016b6:	f005 fe64 	bl	8007382 <HAL_UART_Transmit>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016c4:	b004      	add	sp, #16
 80016c6:	4770      	bx	lr
 80016c8:	20000238 	.word	0x20000238
 80016cc:	200053b4 	.word	0x200053b4

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b09a      	sub	sp, #104	; 0x68
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d6:	f001 fe91 	bl	80033fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016da:	f000 f8a9 	bl	8001830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016de:	f000 fa61 	bl	8001ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e2:	f000 fa37 	bl	8001b54 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 fa0b 	bl	8001b00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016ea:	f000 f97b 	bl	80019e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80016ee:	f000 f9a7 	bl	8001a40 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016f2:	f000 f9db 	bl	8001aac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80016f6:	f000 f907 	bl	8001908 <MX_ADC1_Init>
  MX_FATFS_Init();
 80016fa:	f006 fd61 	bl	80081c0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	2260      	movs	r2, #96	; 0x60
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00d f8ea 	bl	800e8e4 <memset>
  sprintf(txBuffer, "Bismillah..\n");
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	492b      	ldr	r1, [pc, #172]	; (80017c0 <main+0xf0>)
 8001714:	4618      	mov	r0, r3
 8001716:	f00d fd57 	bl	800f1c8 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 800171a:	1d39      	adds	r1, r7, #4
 800171c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001720:	2264      	movs	r2, #100	; 0x64
 8001722:	4828      	ldr	r0, [pc, #160]	; (80017c4 <main+0xf4>)
 8001724:	f005 fe2d 	bl	8007382 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001728:	f009 fb18 	bl	800ad5c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSPI1 */
  MutexSPI1Handle = osMutexNew(&MutexSPI1_attributes);
 800172c:	4826      	ldr	r0, [pc, #152]	; (80017c8 <main+0xf8>)
 800172e:	f009 fc0c 	bl	800af4a <osMutexNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a25      	ldr	r2, [pc, #148]	; (80017cc <main+0xfc>)
 8001736:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainProcessTask */
  MainProcessTaskHandle = osThreadNew(MainProcess, NULL, &MainProcessTask_attributes);
 8001738:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <main+0x100>)
 800173a:	2100      	movs	r1, #0
 800173c:	4825      	ldr	r0, [pc, #148]	; (80017d4 <main+0x104>)
 800173e:	f009 fb57 	bl	800adf0 <osThreadNew>
 8001742:	4603      	mov	r3, r0
 8001744:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <main+0x108>)
 8001746:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 8001748:	4a24      	ldr	r2, [pc, #144]	; (80017dc <main+0x10c>)
 800174a:	2100      	movs	r1, #0
 800174c:	4824      	ldr	r0, [pc, #144]	; (80017e0 <main+0x110>)
 800174e:	f009 fb4f 	bl	800adf0 <osThreadNew>
 8001752:	4603      	mov	r3, r0
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <main+0x114>)
 8001756:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <main+0x118>)
 800175a:	2100      	movs	r1, #0
 800175c:	4823      	ldr	r0, [pc, #140]	; (80017ec <main+0x11c>)
 800175e:	f009 fb47 	bl	800adf0 <osThreadNew>
 8001762:	4603      	mov	r3, r0
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <main+0x120>)
 8001766:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <main+0x124>)
 800176a:	2100      	movs	r1, #0
 800176c:	4822      	ldr	r0, [pc, #136]	; (80017f8 <main+0x128>)
 800176e:	f009 fb3f 	bl	800adf0 <osThreadNew>
 8001772:	4603      	mov	r3, r0
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <main+0x12c>)
 8001776:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
  SDCardTaskHandle = osThreadNew(SDCard, NULL, &SDCardTask_attributes);
 8001778:	4a21      	ldr	r2, [pc, #132]	; (8001800 <main+0x130>)
 800177a:	2100      	movs	r1, #0
 800177c:	4821      	ldr	r0, [pc, #132]	; (8001804 <main+0x134>)
 800177e:	f009 fb37 	bl	800adf0 <osThreadNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <main+0x138>)
 8001786:	6013      	str	r3, [r2, #0]

  /* creation of ADCProcessingTa */
  ADCProcessingTaHandle = osThreadNew(ADCProcesing, NULL, &ADCProcessingTa_attributes);
 8001788:	4a20      	ldr	r2, [pc, #128]	; (800180c <main+0x13c>)
 800178a:	2100      	movs	r1, #0
 800178c:	4820      	ldr	r0, [pc, #128]	; (8001810 <main+0x140>)
 800178e:	f009 fb2f 	bl	800adf0 <osThreadNew>
 8001792:	4603      	mov	r3, r0
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <main+0x144>)
 8001796:	6013      	str	r3, [r2, #0]

  /* creation of PowerManagement */
  PowerManagementHandle = osThreadNew(PowManagement, NULL, &PowerManagement_attributes);
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <main+0x148>)
 800179a:	2100      	movs	r1, #0
 800179c:	481f      	ldr	r0, [pc, #124]	; (800181c <main+0x14c>)
 800179e:	f009 fb27 	bl	800adf0 <osThreadNew>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <main+0x150>)
 80017a6:	6013      	str	r3, [r2, #0]

  /* creation of IgnitionTask */
  IgnitionTaskHandle = osThreadNew(Ignition, NULL, &IgnitionTask_attributes);
 80017a8:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <main+0x154>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	481e      	ldr	r0, [pc, #120]	; (8001828 <main+0x158>)
 80017ae:	f009 fb1f 	bl	800adf0 <osThreadNew>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a1d      	ldr	r2, [pc, #116]	; (800182c <main+0x15c>)
 80017b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017b8:	f009 faf4 	bl	800ada4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 80017bc:	e7fe      	b.n	80017bc <main+0xec>
 80017be:	bf00      	nop
 80017c0:	08012ef4 	.word	0x08012ef4
 80017c4:	200053b4 	.word	0x200053b4
 80017c8:	08013428 	.word	0x08013428
 80017cc:	20004f80 	.word	0x20004f80
 80017d0:	08013308 	.word	0x08013308
 80017d4:	08001ce5 	.word	0x08001ce5
 80017d8:	20005358 	.word	0x20005358
 80017dc:	0801332c 	.word	0x0801332c
 80017e0:	08001e35 	.word	0x08001e35
 80017e4:	20004f24 	.word	0x20004f24
 80017e8:	08013350 	.word	0x08013350
 80017ec:	08001ec9 	.word	0x08001ec9
 80017f0:	200053fc 	.word	0x200053fc
 80017f4:	08013374 	.word	0x08013374
 80017f8:	080024b9 	.word	0x080024b9
 80017fc:	20005278 	.word	0x20005278
 8001800:	08013398 	.word	0x08013398
 8001804:	08002619 	.word	0x08002619
 8001808:	20004c88 	.word	0x20004c88
 800180c:	080133bc 	.word	0x080133bc
 8001810:	080027f1 	.word	0x080027f1
 8001814:	20005208 	.word	0x20005208
 8001818:	080133e0 	.word	0x080133e0
 800181c:	08002969 	.word	0x08002969
 8001820:	200053f8 	.word	0x200053f8
 8001824:	08013404 	.word	0x08013404
 8001828:	08002a3d 	.word	0x08002a3d
 800182c:	20005644 	.word	0x20005644

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	; 0x50
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2230      	movs	r2, #48	; 0x30
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f00d f850 	bl	800e8e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <SystemClock_Config+0xd0>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <SystemClock_Config+0xd0>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <SystemClock_Config+0xd0>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <SystemClock_Config+0xd4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800187c:	4a21      	ldr	r2, [pc, #132]	; (8001904 <SystemClock_Config+0xd4>)
 800187e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <SystemClock_Config+0xd4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001890:	2302      	movs	r3, #2
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001894:	2301      	movs	r3, #1
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001898:	2310      	movs	r3, #16
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189c:	2302      	movs	r3, #2
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018a4:	2310      	movs	r3, #16
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018ae:	2304      	movs	r3, #4
 80018b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018b2:	2307      	movs	r3, #7
 80018b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 f846 	bl	800594c <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018c6:	f001 f8f5 	bl	8002ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ca:	230f      	movs	r3, #15
 80018cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ce:	2302      	movs	r3, #2
 80018d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2102      	movs	r1, #2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 faa8 	bl	8005e3c <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018f2:	f001 f8df 	bl	8002ab4 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	; 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000

08001908 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <MX_ADC1_Init+0xd0>)
 800191c:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <MX_ADC1_Init+0xd4>)
 800191e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <MX_ADC1_Init+0xd0>)
 8001922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001926:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <MX_ADC1_Init+0xd0>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <MX_ADC1_Init+0xd0>)
 8001930:	2201      	movs	r2, #1
 8001932:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <MX_ADC1_Init+0xd0>)
 8001936:	2201      	movs	r2, #1
 8001938:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <MX_ADC1_Init+0xd0>)
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <MX_ADC1_Init+0xd0>)
 8001944:	2200      	movs	r2, #0
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <MX_ADC1_Init+0xd0>)
 800194a:	4a25      	ldr	r2, [pc, #148]	; (80019e0 <MX_ADC1_Init+0xd8>)
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <MX_ADC1_Init+0xd0>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <MX_ADC1_Init+0xd0>)
 8001956:	2203      	movs	r2, #3
 8001958:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <MX_ADC1_Init+0xd0>)
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <MX_ADC1_Init+0xd0>)
 8001964:	2201      	movs	r2, #1
 8001966:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001968:	481b      	ldr	r0, [pc, #108]	; (80019d8 <MX_ADC1_Init+0xd0>)
 800196a:	f001 fdad 	bl	80034c8 <HAL_ADC_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001974:	f001 f89e 	bl	8002ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001978:	230f      	movs	r3, #15
 800197a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800197c:	2301      	movs	r3, #1
 800197e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001980:	2307      	movs	r3, #7
 8001982:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <MX_ADC1_Init+0xd0>)
 800198a:	f001 fee5 	bl	8003758 <HAL_ADC_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001994:	f001 f88e 	bl	8002ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001998:	2308      	movs	r3, #8
 800199a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800199c:	2302      	movs	r3, #2
 800199e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_ADC1_Init+0xd0>)
 80019a6:	f001 fed7 	bl	8003758 <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019b0:	f001 f880 	bl	8002ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80019b4:	2309      	movs	r3, #9
 80019b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80019b8:	2303      	movs	r3, #3
 80019ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_ADC1_Init+0xd0>)
 80019c2:	f001 fec9 	bl	8003758 <HAL_ADC_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80019cc:	f001 f872 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000511c 	.word	0x2000511c
 80019dc:	40012000 	.word	0x40012000
 80019e0:	0f000001 	.word	0x0f000001

080019e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <MX_I2C1_Init+0x54>)
 80019ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_I2C1_Init+0x58>)
 80019f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a22:	f002 ffd3 	bl	80049cc <HAL_I2C_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a2c:	f001 f842 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20004ed0 	.word	0x20004ed0
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	000186a0 	.word	0x000186a0

08001a40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a46:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a74:	2230      	movs	r2, #48	; 0x30
 8001a76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_SPI1_Init+0x64>)
 8001a92:	f004 fc01 	bl	8006298 <HAL_SPI_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a9c:	f001 f80a 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000535c 	.word	0x2000535c
 8001aa8:	40013000 	.word	0x40013000

08001aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <MX_USART1_UART_Init+0x50>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ae4:	f005 fc00 	bl	80072e8 <HAL_UART_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aee:	f000 ffe1 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200051c4 	.word	0x200051c4
 8001afc:	40011000 	.word	0x40011000

08001b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <MX_USART2_UART_Init+0x50>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b38:	f005 fbd6 	bl	80072e8 <HAL_UART_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b42:	f000 ffb7 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200053b4 	.word	0x200053b4
 8001b50:	40004400 	.word	0x40004400

08001b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_DMA_Init+0x4c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <MX_DMA_Init+0x4c>)
 8001b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <MX_DMA_Init+0x4c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	2038      	movs	r0, #56	; 0x38
 8001b7c:	f002 f944 	bl	8003e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b80:	2038      	movs	r0, #56	; 0x38
 8001b82:	f002 f95d 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2105      	movs	r1, #5
 8001b8a:	203a      	movs	r0, #58	; 0x3a
 8001b8c:	f002 f93c 	bl	8003e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b90:	203a      	movs	r0, #58	; 0x3a
 8001b92:	f002 f955 	bl	8003e40 <HAL_NVIC_EnableIRQ>

}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a43      	ldr	r2, [pc, #268]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a3c      	ldr	r2, [pc, #240]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a35      	ldr	r2, [pc, #212]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a2e      	ldr	r2, [pc, #184]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <MX_GPIO_Init+0x12c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2112      	movs	r1, #18
 8001c2e:	4829      	ldr	r0, [pc, #164]	; (8001cd4 <MX_GPIO_Init+0x130>)
 8001c30:	f002 feb2 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001c3a:	4827      	ldr	r0, [pc, #156]	; (8001cd8 <MX_GPIO_Init+0x134>)
 8001c3c:	f002 feac 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c46:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MX_GPIO_Init+0x138>)
 8001c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4820      	ldr	r0, [pc, #128]	; (8001cd8 <MX_GPIO_Init+0x134>)
 8001c56:	f002 fd03 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 8001c5a:	2312      	movs	r3, #18
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <MX_GPIO_Init+0x130>)
 8001c72:	f002 fcf5 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin POWER_SEL_Pin IGNITION_LOGIC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin;
 8001c76:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4812      	ldr	r0, [pc, #72]	; (8001cd8 <MX_GPIO_Init+0x134>)
 8001c90:	f002 fce6 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGING_SIGNAL_Pin */
  GPIO_InitStruct.Pin = CHARGING_SIGNAL_Pin;
 8001c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGING_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_GPIO_Init+0x13c>)
 8001caa:	f002 fcd9 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IGNITION_SIGNAL_Pin;
 8001cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IGNITION_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_GPIO_Init+0x130>)
 8001cc4:	f002 fccc 	bl	8004660 <HAL_GPIO_Init>

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	10210000 	.word	0x10210000
 8001ce0:	40020400 	.word	0x40020400

08001ce4 <MainProcess>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainProcess */
void MainProcess(void *argument)
{
 8001ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce8:	ed2d 8b04 	vpush	{d8-d9}
 8001cec:	b0cd      	sub	sp, #308	; 0x134
 8001cee:	af12      	add	r7, sp, #72	; 0x48
 8001cf0:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	22c4      	movs	r2, #196	; 0xc4
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f00c fdf0 	bl	800e8e4 <memset>
	sprintf(txBuffer, "Running Display Task..\n");
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	493d      	ldr	r1, [pc, #244]	; (8001e00 <MainProcess+0x11c>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00d fa5c 	bl	800f1c8 <siprintf>
  /* Infinite loop */
  for(;;)
  {
	  //Identification Check
	  if ((identification == 1)&&(ignition_status == 1)){
 8001d10:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <MainProcess+0x120>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10a      	bne.n	8001d2e <MainProcess+0x4a>
 8001d18:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <MainProcess+0x124>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <MainProcess+0x4a>
		  xTaskNotifyGive(IMUTaskHandle);
 8001d20:	4b3a      	ldr	r3, [pc, #232]	; (8001e0c <MainProcess+0x128>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	2300      	movs	r3, #0
 8001d26:	2202      	movs	r2, #2
 8001d28:	2100      	movs	r1, #0
 8001d2a:	f00b fd0b 	bl	800d744 <xTaskGenericNotify>
	  }
	  if(UID[0]== 0x29){ // Need to add driver database
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <MainProcess+0x12c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b29      	cmp	r3, #41	; 0x29
 8001d34:	d103      	bne.n	8001d3e <MainProcess+0x5a>
		  identification = 1;
 8001d36:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <MainProcess+0x120>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	e002      	b.n	8001d44 <MainProcess+0x60>
	  } else {
		  identification = 0;
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <MainProcess+0x120>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
	  }
	  //End of Identification Check
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Ax = %.2f Ay = %.2f Az = %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <MainProcess+0x12c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Ax = %.2f Ay = %.2f Az = %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8001d48:	61bb      	str	r3, [r7, #24]
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <MainProcess+0x12c>)
 8001d4c:	785b      	ldrb	r3, [r3, #1]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Ax = %.2f Ay = %.2f Az = %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8001d4e:	617b      	str	r3, [r7, #20]
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <MainProcess+0x12c>)
 8001d52:	789b      	ldrb	r3, [r3, #2]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Ax = %.2f Ay = %.2f Az = %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8001d54:	461e      	mov	r6, r3
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8001d56:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <MainProcess+0x12c>)
 8001d58:	78db      	ldrb	r3, [r3, #3]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Ax = %.2f Ay = %.2f Az = %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <MainProcess+0x124>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <MainProcess+0x130>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <MainProcess+0x134>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <MainProcess+0x138>)
 8001d70:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8001d74:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <MainProcess+0x138>)
 8001d76:	ed93 8b04 	vldr	d8, [r3, #16]
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <MainProcess+0x138>)
 8001d7c:	ed93 9b06 	vldr	d9, [r3, #24]
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <MainProcess+0x13c>)
 8001d82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Ax = %.2f Ay = %.2f Az = %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbe6 	bl	8000558 <__aeabi_f2d>
 8001d8c:	4680      	mov	r8, r0
 8001d8e:	4689      	mov	r9, r1
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <MainProcess+0x140>)
 8001d92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Ax = %.2f Ay = %.2f Az = %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbde 	bl	8000558 <__aeabi_f2d>
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	460d      	mov	r5, r1
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <MainProcess+0x144>)
 8001da2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Ax = %.2f Ay = %.2f Az = %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbd6 	bl	8000558 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	f107 0020 	add.w	r0, r7, #32
 8001db4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001db8:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001dbc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001dc0:	ed8d 9b0a 	vstr	d9, [sp, #40]	; 0x28
 8001dc4:	ed8d 8b08 	vstr	d8, [sp, #32]
 8001dc8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	9104      	str	r1, [sp, #16]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	9103      	str	r1, [sp, #12]
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	9102      	str	r1, [sp, #8]
 8001dd8:	6939      	ldr	r1, [r7, #16]
 8001dda:	9101      	str	r1, [sp, #4]
 8001ddc:	9600      	str	r6, [sp, #0]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4912      	ldr	r1, [pc, #72]	; (8001e2c <MainProcess+0x148>)
 8001de4:	f00d f9f0 	bl	800f1c8 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
 8001de8:	f107 0120 	add.w	r1, r7, #32
 8001dec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001df0:	22c8      	movs	r2, #200	; 0xc8
 8001df2:	480f      	ldr	r0, [pc, #60]	; (8001e30 <MainProcess+0x14c>)
 8001df4:	f005 fac5 	bl	8007382 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(10);
 8001df8:	200a      	movs	r0, #10
 8001dfa:	f009 f88b 	bl	800af14 <osDelay>
	  if ((identification == 1)&&(ignition_status == 1)){
 8001dfe:	e787      	b.n	8001d10 <MainProcess+0x2c>
 8001e00:	08012f04 	.word	0x08012f04
 8001e04:	20000220 	.word	0x20000220
 8001e08:	20000235 	.word	0x20000235
 8001e0c:	20004f24 	.word	0x20004f24
 8001e10:	2000021c 	.word	0x2000021c
 8001e14:	20000236 	.word	0x20000236
 8001e18:	20000237 	.word	0x20000237
 8001e1c:	20004f28 	.word	0x20004f28
 8001e20:	20005050 	.word	0x20005050
 8001e24:	2000528c 	.word	0x2000528c
 8001e28:	20004f84 	.word	0x20004f84
 8001e2c:	08012f1c 	.word	0x08012f1c
 8001e30:	200053b4 	.word	0x200053b4

08001e34 <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09c      	sub	sp, #112	; 0x70
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2260      	movs	r2, #96	; 0x60
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f00c fd4b 	bl	800e8e4 <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	4918      	ldr	r1, [pc, #96]	; (8001eb4 <IMU+0x80>)
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00d f9b7 	bl	800f1c8 <siprintf>

	uint8_t ID = MPU6050_Init(&hi2c1);
 8001e5a:	4817      	ldr	r0, [pc, #92]	; (8001eb8 <IMU+0x84>)
 8001e5c:	f000 fe2f 	bl	8002abe <MPU6050_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 8001e66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001e6a:	f107 0308 	add.w	r3, r7, #8
 8001e6e:	4913      	ldr	r1, [pc, #76]	; (8001ebc <IMU+0x88>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00d f9a9 	bl	800f1c8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 8001e76:	f107 0108 	add.w	r1, r7, #8
 8001e7a:	2364      	movs	r3, #100	; 0x64
 8001e7c:	2264      	movs	r2, #100	; 0x64
 8001e7e:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <IMU+0x8c>)
 8001e80:	f005 fa7f 	bl	8007382 <HAL_UART_Transmit>
	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	2264      	movs	r2, #100	; 0x64
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00c fd29 	bl	800e8e4 <memset>
	osDelay(200);
 8001e92:	20c8      	movs	r0, #200	; 0xc8
 8001e94:	f009 f83e 	bl	800af14 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f00b fc09 	bl	800d6b4 <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <IMU+0x90>)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <IMU+0x84>)
 8001ea6:	f000 fe83 	bl	8002bb0 <MPU6050_Read_Accel>
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay,MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(50);
 8001eaa:	2032      	movs	r0, #50	; 0x32
 8001eac:	f009 f832 	bl	800af14 <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001eb0:	e7f2      	b.n	8001e98 <IMU+0x64>
 8001eb2:	bf00      	nop
 8001eb4:	08012f94 	.word	0x08012f94
 8001eb8:	20004ed0 	.word	0x20004ed0
 8001ebc:	08012fa8 	.word	0x08012fa8
 8001ec0:	200053b4 	.word	0x200053b4
 8001ec4:	20004f28 	.word	0x20004f28

08001ec8 <GPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS */
void GPS(void *argument)
{
 8001ec8:	b5b0      	push	{r4, r5, r7, lr}
 8001eca:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8001ece:	af04      	add	r7, sp, #16
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	6018      	str	r0, [r3, #0]

	  char hH[2]; // hours
	  char mM[2]; // minutes
	  char sS[2]; // seconds

	  uint8_t cnt = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393

	  HAL_UART_Receive_DMA(&huart1, buff, 255);
 8001eda:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001ede:	22ff      	movs	r2, #255	; 0xff
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4876      	ldr	r0, [pc, #472]	; (80020bc <GPS+0x1f4>)
 8001ee4:	f005 fadf 	bl	80074a6 <HAL_UART_Receive_DMA>

	  HAL_UART_Transmit(&huart2, (unsigned char *) "Start\n", 6, 500);
 8001ee8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eec:	2206      	movs	r2, #6
 8001eee:	4974      	ldr	r1, [pc, #464]	; (80020c0 <GPS+0x1f8>)
 8001ef0:	4874      	ldr	r0, [pc, #464]	; (80020c4 <GPS+0x1fc>)
 8001ef2:	f005 fa46 	bl	8007382 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  char txBuffer[200] = {};
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	3304      	adds	r3, #4
 8001f00:	22c4      	movs	r2, #196	; 0xc4
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00c fced 	bl	800e8e4 <memset>
	  sprintf(txBuffer,"\nFlag : %d", flag);
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <GPS+0x200>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	496d      	ldr	r1, [pc, #436]	; (80020cc <GPS+0x204>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f00d f956 	bl	800f1c8 <siprintf>
	  //	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  if (flag) {
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <GPS+0x200>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 82b3 	beq.w	800248c <GPS+0x5c4>
	  	memset(buffStr, 0, 255);
 8001f26:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001f2a:	22ff      	movs	r2, #255	; 0xff
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f00c fcd8 	bl	800e8e4 <memset>
	  	sprintf(buffStr, "%s", buff);
 8001f34:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8001f38:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001f3c:	4964      	ldr	r1, [pc, #400]	; (80020d0 <GPS+0x208>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f00d f942 	bl	800f1c8 <siprintf>
	  //HAL_UART_Transmit(&huart2, (uint8_t *)buffStr, sizeof(buffStr), 70);
	  // splitting the buffStr by the "\n" delimiter with the strsep() C function
	  // see http://www.manpagez.com/man/3/strsep/
	  	char *token, *string;
	  	// actually splitting the string by "\n" delimiter
	  	string = strdup(buffStr);
 8001f44:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00d f981 	bl	800f250 <strdup>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f56:	601a      	str	r2, [r3, #0]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8001f58:	e26e      	b.n	8002438 <GPS+0x570>
	  		memset(nmeaSnt, 0, 80);
 8001f5a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f5e:	2250      	movs	r2, #80	; 0x50
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00c fcbe 	bl	800e8e4 <memset>
	  		sprintf(nmeaSnt, "%s", token);
 8001f68:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f6c:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8001f70:	4957      	ldr	r1, [pc, #348]	; (80020d0 <GPS+0x208>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00d f928 	bl	800f1c8 <siprintf>

	  		memset(txBuffer,0,sizeof(txBuffer));
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	22c8      	movs	r2, #200	; 0xc8
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00c fcaf 	bl	800e8e4 <memset>
	  //HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 100);
	  // selecting only $GNGLL sentences, combined GPS and GLONAS
	  // on my GPS sensor this good NMEA sentence is always 50 characters
	  		if ((strstr(nmeaSnt, "$GPGGA") != 0) && (strlen(nmeaSnt) > 49) &&(strlen(nmeaSnt) <90) && strstr(nmeaSnt, "*") != 0) {
 8001f86:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f8a:	4952      	ldr	r1, [pc, #328]	; (80020d4 <GPS+0x20c>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f00d f994 	bl	800f2ba <strstr>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 824f 	beq.w	8002438 <GPS+0x570>
 8001f9a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f91e 	bl	80001e0 <strlen>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b31      	cmp	r3, #49	; 0x31
 8001fa8:	f240 8246 	bls.w	8002438 <GPS+0x570>
 8001fac:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe f915 	bl	80001e0 <strlen>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b59      	cmp	r3, #89	; 0x59
 8001fba:	f200 823d 	bhi.w	8002438 <GPS+0x570>
 8001fbe:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001fc2:	212a      	movs	r1, #42	; 0x2a
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00d f92e 	bl	800f226 <strchr>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8233 	beq.w	8002438 <GPS+0x570>
	  			rawSum = strstr(nmeaSnt, "*");
 8001fd2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001fd6:	212a      	movs	r1, #42	; 0x2a
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00d f924 	bl	800f226 <strchr>
 8001fde:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  			memcpy(smNmbr, &rawSum[1], 2);
 8001fe2:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ff0:	801a      	strh	r2, [r3, #0]
	  			smNmbr[2] = '\0';
 8001ff2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	709a      	strb	r2, [r3, #2]

	  			uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8001ffa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff faf6 	bl	80015f0 <nmea0183_checksum>
 8002004:	4603      	mov	r3, r0
 8002006:	f887 3383 	strb.w	r3, [r7, #899]	; 0x383
	  			char hex[2];
	  			// "%X" unsigned hexadecimal integer (capital letters)
	  			sprintf(hex, "%X", intSum);
 800200a:	f897 2383 	ldrb.w	r2, [r7, #899]	; 0x383
 800200e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002012:	4931      	ldr	r1, [pc, #196]	; (80020d8 <GPS+0x210>)
 8002014:	4618      	mov	r0, r3
 8002016:	f00d f8d7 	bl	800f1c8 <siprintf>

	  			// checksum data verification, if OK, then we can really trust
	  			// the data in the the NMEA sentence
	  			if (strstr(smNmbr, hex) != NULL) {
 800201a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800201e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f00d f948 	bl	800f2ba <strstr>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8203 	beq.w	8002438 <GPS+0x570>
	  				cnt = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  //			sprintf(txBuffer,"pV : %s\n", pV);
	  			// splitting the good NMEA sentence into the tokens by the comma delimiter
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8002038:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800203c:	4927      	ldr	r1, [pc, #156]	; (80020dc <GPS+0x214>)
 800203e:	4618      	mov	r0, r3
 8002040:	f00d ff84 	bl	800ff4c <strtok>
 8002044:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8002048:	e05d      	b.n	8002106 <GPS+0x23e>
	  					memset(txBuffer,0,sizeof(txBuffer));
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	22c8      	movs	r2, #200	; 0xc8
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f00c fc46 	bl	800e8e4 <memset>
//	  					sprintf(txBuffer,"pV[%d] : %s\n",cnt, pV);
	  //				HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 100);
	  					switch (cnt) {
 8002058:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 800205c:	3b01      	subs	r3, #1
 800205e:	2b04      	cmp	r3, #4
 8002060:	d846      	bhi.n	80020f0 <GPS+0x228>
 8002062:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <GPS+0x1a0>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	0800207d 	.word	0x0800207d
 800206c:	0800208d 	.word	0x0800208d
 8002070:	0800209d 	.word	0x0800209d
 8002074:	080020ad 	.word	0x080020ad
 8002078:	080020e1 	.word	0x080020e1
	  						case 1:
	  							  utcRaw = strdup(pV);
 800207c:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002080:	f00d f8e6 	bl	800f250 <strdup>
 8002084:	4603      	mov	r3, r0
 8002086:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	  							  break;
 800208a:	e031      	b.n	80020f0 <GPS+0x228>
	  						case 2:
	  							  latRaw = strdup(pV);
 800208c:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002090:	f00d f8de 	bl	800f250 <strdup>
 8002094:	4603      	mov	r3, r0
 8002096:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
	  							  break;
 800209a:	e029      	b.n	80020f0 <GPS+0x228>
	  						case 3:
	  							  hemNS = strdup(pV);
 800209c:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 80020a0:	f00d f8d6 	bl	800f250 <strdup>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	  							  break;
 80020aa:	e021      	b.n	80020f0 <GPS+0x228>
	  						case 4:
	  							  lonRaw = strdup(pV);
 80020ac:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 80020b0:	f00d f8ce 	bl	800f250 <strdup>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	  							  break;
 80020ba:	e019      	b.n	80020f0 <GPS+0x228>
 80020bc:	200051c4 	.word	0x200051c4
 80020c0:	08012fcc 	.word	0x08012fcc
 80020c4:	200053b4 	.word	0x200053b4
 80020c8:	20000234 	.word	0x20000234
 80020cc:	08012fd4 	.word	0x08012fd4
 80020d0:	08012fe0 	.word	0x08012fe0
 80020d4:	08012fe4 	.word	0x08012fe4
 80020d8:	08012fec 	.word	0x08012fec
 80020dc:	08012ff0 	.word	0x08012ff0
	  						case 5:
	  							  hemEW = strdup(pV);
 80020e0:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 80020e4:	f00d f8b4 	bl	800f250 <strdup>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	  							  break;
 80020ee:	bf00      	nop
	  					}
	  					cnt++;
 80020f0:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 80020f4:	3301      	adds	r3, #1
 80020f6:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 80020fa:	49d8      	ldr	r1, [pc, #864]	; (800245c <GPS+0x594>)
 80020fc:	2000      	movs	r0, #0
 80020fe:	f00d ff25 	bl	800ff4c <strtok>
 8002102:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8002106:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d19d      	bne.n	800204a <GPS+0x182>
	  				} //end for

	  				//Converting Longitude and Latitude into Float
	  				latitude = atof(latRaw);
 800210e:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 8002112:	f00c fbab 	bl	800e86c <atof>
 8002116:	ec53 2b10 	vmov	r2, r3, d0
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f7fe fd6b 	bl	8000bf8 <__aeabi_d2f>
 8002122:	4603      	mov	r3, r0
 8002124:	4ace      	ldr	r2, [pc, #824]	; (8002460 <GPS+0x598>)
 8002126:	6013      	str	r3, [r2, #0]
	  				longitude = atof(lonRaw);
 8002128:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 800212c:	f00c fb9e 	bl	800e86c <atof>
 8002130:	ec53 2b10 	vmov	r2, r3, d0
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fd5e 	bl	8000bf8 <__aeabi_d2f>
 800213c:	4603      	mov	r3, r0
 800213e:	4ac9      	ldr	r2, [pc, #804]	; (8002464 <GPS+0x59c>)
 8002140:	6013      	str	r3, [r2, #0]

	  				if (*hemNS == 'S') {
 8002142:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b53      	cmp	r3, #83	; 0x53
 800214a:	d112      	bne.n	8002172 <GPS+0x2aa>
	  					latitude  *= -1.0;
 800214c:	4bc4      	ldr	r3, [pc, #784]	; (8002460 <GPS+0x598>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fa01 	bl	8000558 <__aeabi_f2d>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fd4b 	bl	8000bf8 <__aeabi_d2f>
 8002162:	4603      	mov	r3, r0
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eef1 7a67 	vneg.f32	s15, s15
 800216c:	4bbc      	ldr	r3, [pc, #752]	; (8002460 <GPS+0x598>)
 800216e:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				if (*hemEW == 'W') {
 8002172:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b57      	cmp	r3, #87	; 0x57
 800217a:	d112      	bne.n	80021a2 <GPS+0x2da>
	  					longitude *= -1.0;
 800217c:	4bb9      	ldr	r3, [pc, #740]	; (8002464 <GPS+0x59c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f9e9 	bl	8000558 <__aeabi_f2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fd33 	bl	8000bf8 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eef1 7a67 	vneg.f32	s15, s15
 800219c:	4bb1      	ldr	r3, [pc, #708]	; (8002464 <GPS+0x59c>)
 800219e:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				char * token;
	  				//Get LatitudeDegree
	  				token = strtok(latRaw, ".");
 80021a2:	49b1      	ldr	r1, [pc, #708]	; (8002468 <GPS+0x5a0>)
 80021a4:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 80021a8:	f00d fed0 	bl	800ff4c <strtok>
 80021ac:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latDg, 0, sizeof(latDg));
 80021b0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80021b4:	220a      	movs	r2, #10
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f00c fb93 	bl	800e8e4 <memset>
	  //			memcpy(latDg, token, strlen(token));
	  				sprintf(latDg, token);
 80021be:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80021c2:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00c fffe 	bl	800f1c8 <siprintf>
	  				//Get Minutes
	  				token = strtok(NULL,".");
 80021cc:	49a6      	ldr	r1, [pc, #664]	; (8002468 <GPS+0x5a0>)
 80021ce:	2000      	movs	r0, #0
 80021d0:	f00d febc 	bl	800ff4c <strtok>
 80021d4:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latMS, 0, sizeof(latMS));
 80021d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021dc:	2214      	movs	r2, #20
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00c fb7f 	bl	800e8e4 <memset>
	  //			memcpy(latMS, token, strlen(token));
	  				sprintf(latMS, token);
 80021e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021ea:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00c ffea 	bl	800f1c8 <siprintf>
	  //			latMS[7] = '.';

	  				//Get longitude Degree
	  				float degrees = trunc(latitude / 100.0f);
 80021f4:	4b9a      	ldr	r3, [pc, #616]	; (8002460 <GPS+0x598>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800246c <GPS+0x5a4>
 80021fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002202:	ee16 0a90 	vmov	r0, s13
 8002206:	f7fe f9a7 	bl	8000558 <__aeabi_f2d>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	ec43 2b10 	vmov	d0, r2, r3
 8002212:	f010 fdf7 	bl	8012e04 <trunc>
 8002216:	ec53 2b10 	vmov	r2, r3, d0
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fceb 	bl	8000bf8 <__aeabi_d2f>
 8002222:	4603      	mov	r3, r0
 8002224:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				float minutes = latitude - (degrees * 100.0f);
 8002228:	4b8d      	ldr	r3, [pc, #564]	; (8002460 <GPS+0x598>)
 800222a:	ed93 7a00 	vldr	s14, [r3]
 800222e:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8002232:	eddf 6a8e 	vldr	s13, [pc, #568]	; 800246c <GPS+0x5a4>
 8002236:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800223a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223e:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				latitude = degrees + (minutes / 60.0f);
 8002242:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 8002246:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8002470 <GPS+0x5a8>
 800224a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800224e:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8002252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <GPS+0x598>)
 8002258:	edc3 7a00 	vstr	s15, [r3]

	  				degrees = trunc(longitude / 100.0f);
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <GPS+0x59c>)
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800246c <GPS+0x5a4>
 8002266:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800226a:	ee16 0a90 	vmov	r0, s13
 800226e:	f7fe f973 	bl	8000558 <__aeabi_f2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	ec43 2b10 	vmov	d0, r2, r3
 800227a:	f010 fdc3 	bl	8012e04 <trunc>
 800227e:	ec53 2b10 	vmov	r2, r3, d0
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fcb7 	bl	8000bf8 <__aeabi_d2f>
 800228a:	4603      	mov	r3, r0
 800228c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				minutes = longitude - (degrees * 100.0f);
 8002290:	4b74      	ldr	r3, [pc, #464]	; (8002464 <GPS+0x59c>)
 8002292:	ed93 7a00 	vldr	s14, [r3]
 8002296:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800229a:	eddf 6a74 	vldr	s13, [pc, #464]	; 800246c <GPS+0x5a4>
 800229e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a6:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				longitude = degrees + (minutes / 60.0f);
 80022aa:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 80022ae:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002470 <GPS+0x5a8>
 80022b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022b6:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	4b69      	ldr	r3, [pc, #420]	; (8002464 <GPS+0x59c>)
 80022c0:	edc3 7a00 	vstr	s15, [r3]


	  				token = strtok(lonRaw, ".");
 80022c4:	4968      	ldr	r1, [pc, #416]	; (8002468 <GPS+0x5a0>)
 80022c6:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 80022ca:	f00d fe3f 	bl	800ff4c <strtok>
 80022ce:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonDg, 0, sizeof(lonDg));
 80022d2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80022d6:	220a      	movs	r2, #10
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f00c fb02 	bl	800e8e4 <memset>
	  				memcpy(lonDg, token, strlen(token));
 80022e0:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 80022e4:	f7fd ff7c 	bl	80001e0 <strlen>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80022ee:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00c fae8 	bl	800e8c8 <memcpy>

	  				token = strtok(NULL, ".");
 80022f8:	495b      	ldr	r1, [pc, #364]	; (8002468 <GPS+0x5a0>)
 80022fa:	2000      	movs	r0, #0
 80022fc:	f00d fe26 	bl	800ff4c <strtok>
 8002300:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonMS, 0, sizeof(lonMS));
 8002304:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002308:	220a      	movs	r2, #10
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f00c fae9 	bl	800e8e4 <memset>
	  				memcpy(lonMS, token, strlen(token));
 8002312:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8002316:	f7fd ff63 	bl	80001e0 <strlen>
 800231a:	4602      	mov	r2, r0
 800231c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002320:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002324:	4618      	mov	r0, r3
 8002326:	f00c facf 	bl	800e8c8 <memcpy>

	  				memset(txBuffer,0,sizeof(txBuffer));
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	22c8      	movs	r2, #200	; 0xc8
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f00c fad6 	bl	800e8e4 <memset>
	  				sprintf(txBuffer, "latDg : %s latMs : %s lonDg : %s lonMs : %s\n",latDg,latMS,lonDg,lonMS );
 8002338:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800233c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002340:	f107 000c 	add.w	r0, r7, #12
 8002344:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	460b      	mov	r3, r1
 8002352:	4948      	ldr	r1, [pc, #288]	; (8002474 <GPS+0x5ac>)
 8002354:	f00c ff38 	bl	800f1c8 <siprintf>
 8002358:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29a      	uxth	r2, r3
	  //		  HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);

	  					  //converting the UTC time in the hh:mm:ss format
	  				memcpy(hH, &utcRaw[0], 2);
 8002360:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002364:	801a      	strh	r2, [r3, #0]
	  				hH[2] = '\0';
 8002366:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800236a:	2200      	movs	r2, #0
 800236c:	709a      	strb	r2, [r3, #2]

	  				memcpy(mM, &utcRaw[2], 2);
 800236e:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8002372:	3302      	adds	r3, #2
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29a      	uxth	r2, r3
 8002378:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800237c:	801a      	strh	r2, [r3, #0]
	  				mM[2] = '\0';
 800237e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002382:	2200      	movs	r2, #0
 8002384:	709a      	strb	r2, [r3, #2]

	  				memcpy(sS, &utcRaw[4], 2);
 8002386:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800238a:	3304      	adds	r3, #4
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002394:	801a      	strh	r2, [r3, #0]
	  				sS[2] = '\0';
 8002396:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800239a:	2200      	movs	r2, #0
 800239c:	709a      	strb	r2, [r3, #2]
//	  				float latDg_f = atof(latDg)/100.0;
//	  				float latMS_f = atof(latMS)/60.0;
//	  				float lonDg_f = atof(lonDg)/100.0;
//	  				float lonMS_f = atof(lonMS)/60.0;

	  				strcpy(strUTC, hH);
 800239e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023a2:	4619      	mov	r1, r3
 80023a4:	4834      	ldr	r0, [pc, #208]	; (8002478 <GPS+0x5b0>)
 80023a6:	f00c ff4b 	bl	800f240 <strcpy>
	  				strcat(strUTC, ":");
 80023aa:	4833      	ldr	r0, [pc, #204]	; (8002478 <GPS+0x5b0>)
 80023ac:	f7fd ff18 	bl	80001e0 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <GPS+0x5b0>)
 80023b6:	4413      	add	r3, r2
 80023b8:	4930      	ldr	r1, [pc, #192]	; (800247c <GPS+0x5b4>)
 80023ba:	461a      	mov	r2, r3
 80023bc:	460b      	mov	r3, r1
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, mM);
 80023c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023c6:	4619      	mov	r1, r3
 80023c8:	482b      	ldr	r0, [pc, #172]	; (8002478 <GPS+0x5b0>)
 80023ca:	f00c ff1d 	bl	800f208 <strcat>
	  				strcat(strUTC, ":");
 80023ce:	482a      	ldr	r0, [pc, #168]	; (8002478 <GPS+0x5b0>)
 80023d0:	f7fd ff06 	bl	80001e0 <strlen>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <GPS+0x5b0>)
 80023da:	4413      	add	r3, r2
 80023dc:	4927      	ldr	r1, [pc, #156]	; (800247c <GPS+0x5b4>)
 80023de:	461a      	mov	r2, r3
 80023e0:	460b      	mov	r3, r1
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, sS);
 80023e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023ea:	4619      	mov	r1, r3
 80023ec:	4822      	ldr	r0, [pc, #136]	; (8002478 <GPS+0x5b0>)
 80023ee:	f00c ff0b 	bl	800f208 <strcat>
	  				strUTC[8] = '\0';
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <GPS+0x5b0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	721a      	strb	r2, [r3, #8]

	  				memset(txBuffer,0,sizeof(txBuffer));
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	22c8      	movs	r2, #200	; 0xc8
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f00c fa6f 	bl	800e8e4 <memset>
	  				sprintf(txBuffer, "Latitude : %f Longitude : %f UTC : %s\n",latitude,longitude, strUTC);
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <GPS+0x598>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f8a4 	bl	8000558 <__aeabi_f2d>
 8002410:	4604      	mov	r4, r0
 8002412:	460d      	mov	r5, r1
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <GPS+0x59c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f89d 	bl	8000558 <__aeabi_f2d>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	f107 000c 	add.w	r0, r7, #12
 8002426:	4914      	ldr	r1, [pc, #80]	; (8002478 <GPS+0x5b0>)
 8002428:	9102      	str	r1, [sp, #8]
 800242a:	e9cd 2300 	strd	r2, r3, [sp]
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	4913      	ldr	r1, [pc, #76]	; (8002480 <GPS+0x5b8>)
 8002434:	f00c fec8 	bl	800f1c8 <siprintf>
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8002438:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800243c:	4911      	ldr	r1, [pc, #68]	; (8002484 <GPS+0x5bc>)
 800243e:	4618      	mov	r0, r3
 8002440:	f00c ff36 	bl	800f2b0 <strsep>
 8002444:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 8002448:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800244c:	2b00      	cmp	r3, #0
 800244e:	f47f ad84 	bne.w	8001f5a <GPS+0x92>
//	  				HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);

	  			} //end of the chekcsum data verification
	  		} //end of %GPPGA Sentences selection
	  	}// end of splotting the buffstr by the "\n" delimiter with strsep() c function
	  	flag = 0;
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <GPS+0x5c0>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e025      	b.n	80024a6 <GPS+0x5de>
 800245a:	bf00      	nop
 800245c:	08012ff0 	.word	0x08012ff0
 8002460:	20000224 	.word	0x20000224
 8002464:	20000228 	.word	0x20000228
 8002468:	08012ff4 	.word	0x08012ff4
 800246c:	42c80000 	.word	0x42c80000
 8002470:	42700000 	.word	0x42700000
 8002474:	08012ff8 	.word	0x08012ff8
 8002478:	2000022c 	.word	0x2000022c
 800247c:	08013028 	.word	0x08013028
 8002480:	0801302c 	.word	0x0801302c
 8002484:	08013054 	.word	0x08013054
 8002488:	20000234 	.word	0x20000234
	  }
	  else {
		  sprintf(txBuffer," GPS no signal..");
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4907      	ldr	r1, [pc, #28]	; (80024b0 <GPS+0x5e8>)
 8002492:	4618      	mov	r0, r3
 8002494:	f00c fe98 	bl	800f1c8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer, sizeof(txBuffer), 100);
 8002498:	f107 010c 	add.w	r1, r7, #12
 800249c:	2364      	movs	r3, #100	; 0x64
 800249e:	22c8      	movs	r2, #200	; 0xc8
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <GPS+0x5ec>)
 80024a2:	f004 ff6e 	bl	8007382 <HAL_UART_Transmit>
	  }
	  osDelay(500);
 80024a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024aa:	f008 fd33 	bl	800af14 <osDelay>
  {
 80024ae:	e522      	b.n	8001ef6 <GPS+0x2e>
 80024b0:	08013058 	.word	0x08013058
 80024b4:	200053b4 	.word	0x200053b4

080024b8 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0a2      	sub	sp, #136	; 0x88
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */
	char txBuffer [100] ={};
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	2260      	movs	r2, #96	; 0x60
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f00c fa09 	bl	800e8e4 <memset>
	u_char status, cardstr[MAX_LEN];
//	u_char checksum
	MFRC522_Init();
 80024d2:	f7fe fe43 	bl	800115c <MFRC522_Init>
	status = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	while (status == 0){
 80024dc:	e018      	b.n	8002510 <RFID+0x58>
		status = Read_MFRC522(VersionReg);
 80024de:	2037      	movs	r0, #55	; 0x37
 80024e0:	f7fe fdbc 	bl	800105c <Read_MFRC522>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 80024ea:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4943      	ldr	r1, [pc, #268]	; (8002600 <RFID+0x148>)
 80024f4:	4618      	mov	r0, r3
 80024f6:	f00c fe67 	bl	800f1c8 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 80024fa:	f107 011c 	add.w	r1, r7, #28
 80024fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002502:	2264      	movs	r2, #100	; 0x64
 8002504:	483f      	ldr	r0, [pc, #252]	; (8002604 <RFID+0x14c>)
 8002506:	f004 ff3c 	bl	8007382 <HAL_UART_Transmit>
		osDelay(100);
 800250a:	2064      	movs	r0, #100	; 0x64
 800250c:	f008 fd02 	bl	800af14 <osDelay>
	while (status == 0){
 8002510:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0e2      	beq.n	80024de <RFID+0x26>
	}
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	2264      	movs	r2, #100	; 0x64
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f00c f9df 	bl	800e8e4 <memset>
	status = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(200);
 800252c:	20c8      	movs	r0, #200	; 0xc8
 800252e:	f008 fcf1 	bl	800af14 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002532:	4b35      	ldr	r3, [pc, #212]	; (8002608 <RFID+0x150>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f04f 31ff 	mov.w	r1, #4294967295
 800253a:	4618      	mov	r0, r3
 800253c:	f008 fd8b 	bl	800b056 <osMutexAcquire>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	4619      	mov	r1, r3
 8002546:	2026      	movs	r0, #38	; 0x26
 8002548:	f7fe fe34 	bl	80011b4 <MFRC522_Request>
 800254c:	4603      	mov	r3, r0
 800254e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 8002552:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002556:	2b00      	cmp	r3, #0
 8002558:	d13a      	bne.n	80025d0 <RFID+0x118>
		  sprintf(txBuffer,"Card detected ..\n");
 800255a:	f107 031c 	add.w	r3, r7, #28
 800255e:	492b      	ldr	r1, [pc, #172]	; (800260c <RFID+0x154>)
 8002560:	4618      	mov	r0, r3
 8002562:	f00c fe31 	bl	800f1c8 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8002566:	f107 011c 	add.w	r1, r7, #28
 800256a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800256e:	2264      	movs	r2, #100	; 0x64
 8002570:	4824      	ldr	r0, [pc, #144]	; (8002604 <RFID+0x14c>)
 8002572:	f004 ff06 	bl	8007382 <HAL_UART_Transmit>
//		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	2264      	movs	r2, #100	; 0x64
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f00c f9b0 	bl	800e8e4 <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe ff01 	bl	8001390 <MFRC522_Anticoll>
 800258e:	4603      	mov	r3, r0
 8002590:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 8002594:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002598:	2b00      	cmp	r3, #0
 800259a:	d128      	bne.n	80025ee <RFID+0x136>
//			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
			  for(int i = 0; i <4 ;i++){
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a2:	e010      	b.n	80025c6 <RFID+0x10e>
				  UID[i]=cardstr[i];
 80025a4:	f107 020c 	add.w	r2, r7, #12
 80025a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ac:	4413      	add	r3, r2
 80025ae:	7819      	ldrb	r1, [r3, #0]
 80025b0:	4a17      	ldr	r2, [pc, #92]	; (8002610 <RFID+0x158>)
 80025b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b6:	4413      	add	r3, r2
 80025b8:	460a      	mov	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 80025bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	ddea      	ble.n	80025a4 <RFID+0xec>
 80025ce:	e00e      	b.n	80025ee <RFID+0x136>
//			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
//			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	2264      	movs	r2, #100	; 0x64
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f00c f983 	bl	800e8e4 <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 80025de:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	490b      	ldr	r1, [pc, #44]	; (8002614 <RFID+0x15c>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	f00c fded 	bl	800f1c8 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
	  osMutexRelease(MutexSPI1Handle);
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <RFID+0x150>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f008 fd7a 	bl	800b0ec <osMutexRelease>
    osDelay(100);
 80025f8:	2064      	movs	r0, #100	; 0x64
 80025fa:	f008 fc8b 	bl	800af14 <osDelay>
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 80025fe:	e798      	b.n	8002532 <RFID+0x7a>
 8002600:	0801306c 	.word	0x0801306c
 8002604:	200053b4 	.word	0x200053b4
 8002608:	20004f80 	.word	0x20004f80
 800260c:	08013084 	.word	0x08013084
 8002610:	2000021c 	.word	0x2000021c
 8002614:	08013098 	.word	0x08013098

08002618 <SDCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDCard */
void SDCard(void *argument)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0a4      	sub	sp, #144	; 0x90
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDCard */
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002620:	2201      	movs	r2, #1
 8002622:	4961      	ldr	r1, [pc, #388]	; (80027a8 <SDCard+0x190>)
 8002624:	4861      	ldr	r0, [pc, #388]	; (80027ac <SDCard+0x194>)
 8002626:	f007 fbc7 	bl	8009db8 <f_mount>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <SDCard+0x198>)
 8002630:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002632:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <SDCard+0x198>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <SDCard+0x30>
		myprintf("f_mount error (%i)\r\n", fres);
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <SDCard+0x198>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	485c      	ldr	r0, [pc, #368]	; (80027b4 <SDCard+0x19c>)
 8002642:	f7ff f81f 	bl	8001684 <myprintf>
		while(1);
 8002646:	e7fe      	b.n	8002646 <SDCard+0x2e>
	}
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;
    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8002648:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800264c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002650:	4619      	mov	r1, r3
 8002652:	4855      	ldr	r0, [pc, #340]	; (80027a8 <SDCard+0x190>)
 8002654:	f008 f9a3 	bl	800a99e <f_getfree>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	4b54      	ldr	r3, [pc, #336]	; (80027b0 <SDCard+0x198>)
 800265e:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <SDCard+0x198>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <SDCard+0x5e>
  	myprintf("f_getfree error (%i)\r\n", fres);
 8002668:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <SDCard+0x198>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	4852      	ldr	r0, [pc, #328]	; (80027b8 <SDCard+0x1a0>)
 8002670:	f7ff f808 	bl	8001684 <myprintf>
  	while(1);
 8002674:	e7fe      	b.n	8002674 <SDCard+0x5c>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8002676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	3b02      	subs	r3, #2
 800267c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800267e:	8952      	ldrh	r2, [r2, #10]
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    free_sectors = free_clusters * getFreeFs->csize;
 8002688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268a:	895b      	ldrh	r3, [r3, #10]
 800268c:	461a      	mov	r2, r3
 800268e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002690:	fb03 f302 	mul.w	r3, r3, r2
 8002694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8002698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800269c:	0859      	lsrs	r1, r3, #1
 800269e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	461a      	mov	r2, r3
 80026a6:	4845      	ldr	r0, [pc, #276]	; (80027bc <SDCard+0x1a4>)
 80026a8:	f7fe ffec 	bl	8001684 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "tesjson.txt", FA_READ);
 80026ac:	2201      	movs	r2, #1
 80026ae:	4944      	ldr	r1, [pc, #272]	; (80027c0 <SDCard+0x1a8>)
 80026b0:	4844      	ldr	r0, [pc, #272]	; (80027c4 <SDCard+0x1ac>)
 80026b2:	f007 fbe5 	bl	8009e80 <f_open>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <SDCard+0x198>)
 80026bc:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80026be:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <SDCard+0x198>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <SDCard+0xb6>
  	myprintf("f_open error (%i)\r\n");
 80026c6:	4840      	ldr	r0, [pc, #256]	; (80027c8 <SDCard+0x1b0>)
 80026c8:	f7fe ffdc 	bl	8001684 <myprintf>
  	while(1);
 80026cc:	e7fe      	b.n	80026cc <SDCard+0xb4>
    }
    myprintf("I was able to open 'tesjson.txt' for reading!\r\n");
 80026ce:	483f      	ldr	r0, [pc, #252]	; (80027cc <SDCard+0x1b4>)
 80026d0:	f7fe ffd8 	bl	8001684 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[100];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <SDCard+0x1ac>)
 80026da:	2164      	movs	r1, #100	; 0x64
 80026dc:	4618      	mov	r0, r3
 80026de:	f008 fa1a 	bl	800ab16 <f_gets>
 80026e2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    if(rres != 0) {
 80026e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <SDCard+0xe4>
  	myprintf("Read string from 'tesjson.txt'' contents: %s\r\n", readBuf);
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4619      	mov	r1, r3
 80026f4:	4836      	ldr	r0, [pc, #216]	; (80027d0 <SDCard+0x1b8>)
 80026f6:	f7fe ffc5 	bl	8001684 <myprintf>
 80026fa:	e005      	b.n	8002708 <SDCard+0xf0>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 80026fc:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <SDCard+0x198>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4619      	mov	r1, r3
 8002702:	4834      	ldr	r0, [pc, #208]	; (80027d4 <SDCard+0x1bc>)
 8002704:	f7fe ffbe 	bl	8001684 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8002708:	482e      	ldr	r0, [pc, #184]	; (80027c4 <SDCard+0x1ac>)
 800270a:	f008 f919 	bl	800a940 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800270e:	221a      	movs	r2, #26
 8002710:	4931      	ldr	r1, [pc, #196]	; (80027d8 <SDCard+0x1c0>)
 8002712:	482c      	ldr	r0, [pc, #176]	; (80027c4 <SDCard+0x1ac>)
 8002714:	f007 fbb4 	bl	8009e80 <f_open>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <SDCard+0x198>)
 800271e:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <SDCard+0x198>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <SDCard+0x118>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 8002728:	482c      	ldr	r0, [pc, #176]	; (80027dc <SDCard+0x1c4>)
 800272a:	f7fe ffab 	bl	8001684 <myprintf>
 800272e:	e005      	b.n	800273c <SDCard+0x124>
    } else {
    	myprintf("f_open error (%i)\r\n", fres);
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <SDCard+0x198>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4824      	ldr	r0, [pc, #144]	; (80027c8 <SDCard+0x1b0>)
 8002738:	f7fe ffa4 	bl	8001684 <myprintf>
    }

    //Copy in a string
//    strncpy((char*)readBuf, "a new file is made!", 19);
    char* kirimjson = "{'Lokasi':'-6.914744,107.609810','Time_Stamp':'27 April 2021, 20:22'}" ;
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <SDCard+0x1c8>)
 800273e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    uint32_t length_var = strlen(kirimjson);
 8002742:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002746:	f7fd fd4b 	bl	80001e0 <strlen>
 800274a:	67f8      	str	r0, [r7, #124]	; 0x7c
    strncpy((char*)readBuf, kirimjson, length_var);
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002752:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002756:	4618      	mov	r0, r3
 8002758:	f00c fd97 	bl	800f28a <strncpy>
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, length_var, &bytesWrote);
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	f107 0110 	add.w	r1, r7, #16
 8002764:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002766:	4817      	ldr	r0, [pc, #92]	; (80027c4 <SDCard+0x1ac>)
 8002768:	f007 febd 	bl	800a4e6 <f_write>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <SDCard+0x198>)
 8002772:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <SDCard+0x198>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <SDCard+0x170>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4619      	mov	r1, r3
 8002780:	4818      	ldr	r0, [pc, #96]	; (80027e4 <SDCard+0x1cc>)
 8002782:	f7fe ff7f 	bl	8001684 <myprintf>
 8002786:	e002      	b.n	800278e <SDCard+0x176>
    } else {
    	myprintf("f_write error (%i)\r\n");
 8002788:	4817      	ldr	r0, [pc, #92]	; (80027e8 <SDCard+0x1d0>)
 800278a:	f7fe ff7b 	bl	8001684 <myprintf>
    }
    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800278e:	480d      	ldr	r0, [pc, #52]	; (80027c4 <SDCard+0x1ac>)
 8002790:	f008 f8d6 	bl	800a940 <f_close>
//    f_unlink("/write.txt"); Buat ngedelete file
    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8002794:	2200      	movs	r2, #0
 8002796:	4904      	ldr	r1, [pc, #16]	; (80027a8 <SDCard+0x190>)
 8002798:	2000      	movs	r0, #0
 800279a:	f007 fb0d 	bl	8009db8 <f_mount>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f008 fbb8 	bl	800af14 <osDelay>
 80027a4:	e7fb      	b.n	800279e <SDCard+0x186>
 80027a6:	bf00      	nop
 80027a8:	080130a4 	.word	0x080130a4
 80027ac:	20004c8c 	.word	0x20004c8c
 80027b0:	20005400 	.word	0x20005400
 80027b4:	080130a8 	.word	0x080130a8
 80027b8:	080130c0 	.word	0x080130c0
 80027bc:	080130d8 	.word	0x080130d8
 80027c0:	08013120 	.word	0x08013120
 80027c4:	20005404 	.word	0x20005404
 80027c8:	0801312c 	.word	0x0801312c
 80027cc:	08013140 	.word	0x08013140
 80027d0:	08013170 	.word	0x08013170
 80027d4:	080131a0 	.word	0x080131a0
 80027d8:	080131b4 	.word	0x080131b4
 80027dc:	080131c0 	.word	0x080131c0
 80027e0:	080131f0 	.word	0x080131f0
 80027e4:	08013238 	.word	0x08013238
 80027e8:	0801325c 	.word	0x0801325c
 80027ec:	00000000 	.word	0x00000000

080027f0 <ADCProcesing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCProcesing */
void ADCProcesing(void *argument)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b09e      	sub	sp, #120	; 0x78
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADCProcesing */
	char txBuffer[100] = {};
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	2260      	movs	r2, #96	; 0x60
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f00c f86d 	bl	800e8e4 <memset>
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 800280a:	2203      	movs	r2, #3
 800280c:	494a      	ldr	r1, [pc, #296]	; (8002938 <ADCProcesing+0x148>)
 800280e:	484b      	ldr	r0, [pc, #300]	; (800293c <ADCProcesing+0x14c>)
 8002810:	f000 fe9e 	bl	8003550 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization..\n");
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	4949      	ldr	r1, [pc, #292]	; (8002940 <ADCProcesing+0x150>)
 800281a:	4618      	mov	r0, r3
 800281c:	f00c fcd4 	bl	800f1c8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8002820:	f107 0108 	add.w	r1, r7, #8
 8002824:	f04f 33ff 	mov.w	r3, #4294967295
 8002828:	2264      	movs	r2, #100	; 0x64
 800282a:	4846      	ldr	r0, [pc, #280]	; (8002944 <ADCProcesing+0x154>)
 800282c:	f004 fda9 	bl	8007382 <HAL_UART_Transmit>

	/* Initialize Input Value */
	float input_fuel, input_accu, input_batt = 0;
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	677b      	str	r3, [r7, #116]	; 0x74

	/* Initialize RC Filter */
	RCFilter_Init(&rcFiltFuel, 5.0f, 100.0f);
 8002836:	eddf 0a44 	vldr	s1, [pc, #272]	; 8002948 <ADCProcesing+0x158>
 800283a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800283e:	4843      	ldr	r0, [pc, #268]	; (800294c <ADCProcesing+0x15c>)
 8002840:	f7fe fde6 	bl	8001410 <RCFilter_Init>

	/*Initialize Moving Average Filter*/
	MovAvgFilter_init(&MAFiltFuel);
 8002844:	4842      	ldr	r0, [pc, #264]	; (8002950 <ADCProcesing+0x160>)
 8002846:	f7fe fe62 	bl	800150e <MovAvgFilter_init>
	MovAvgFilter_init(&MAFiltAccu);
 800284a:	4842      	ldr	r0, [pc, #264]	; (8002954 <ADCProcesing+0x164>)
 800284c:	f7fe fe5f 	bl	800150e <MovAvgFilter_init>
	MovAvgFilter_init(&MAFiltBatt);
 8002850:	4841      	ldr	r0, [pc, #260]	; (8002958 <ADCProcesing+0x168>)
 8002852:	f7fe fe5c 	bl	800150e <MovAvgFilter_init>
	/* Start ADC */
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 8002856:	2203      	movs	r2, #3
 8002858:	4937      	ldr	r1, [pc, #220]	; (8002938 <ADCProcesing+0x148>)
 800285a:	4838      	ldr	r0, [pc, #224]	; (800293c <ADCProcesing+0x14c>)
 800285c:	f000 fe78 	bl	8003550 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization Success..\n");
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	493d      	ldr	r1, [pc, #244]	; (800295c <ADCProcesing+0x16c>)
 8002866:	4618      	mov	r0, r3
 8002868:	f00c fcae 	bl	800f1c8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 800286c:	f107 0108 	add.w	r1, r7, #8
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	2264      	movs	r2, #100	; 0x64
 8002876:	4833      	ldr	r0, [pc, #204]	; (8002944 <ADCProcesing+0x154>)
 8002878:	f004 fd83 	bl	8007382 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  input_accu = (value[0]/ADC_RESOLUTION) * 13;
 800287c:	4b38      	ldr	r3, [pc, #224]	; (8002960 <ADCProcesing+0x170>)
 800287e:	ed93 7a00 	vldr	s14, [r3]
 8002882:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002964 <ADCProcesing+0x174>
 8002886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800288a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800288e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002892:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	  input_batt = (value[1]/ADC_RESOLUTION) * 4.2;
 8002896:	4b32      	ldr	r3, [pc, #200]	; (8002960 <ADCProcesing+0x170>)
 8002898:	edd3 7a01 	vldr	s15, [r3, #4]
 800289c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002964 <ADCProcesing+0x174>
 80028a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028a4:	ee16 0a90 	vmov	r0, s13
 80028a8:	f7fd fe56 	bl	8000558 <__aeabi_f2d>
 80028ac:	a31e      	add	r3, pc, #120	; (adr r3, 8002928 <ADCProcesing+0x138>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fea9 	bl	8000608 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f99b 	bl	8000bf8 <__aeabi_d2f>
 80028c2:	4603      	mov	r3, r0
 80028c4:	677b      	str	r3, [r7, #116]	; 0x74
	  input_fuel = (value[2]/ADC_RESOLUTION) * VOLTAGE_REFERENCE;
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <ADCProcesing+0x170>)
 80028c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80028cc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002964 <ADCProcesing+0x174>
 80028d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028d4:	ee16 0a90 	vmov	r0, s13
 80028d8:	f7fd fe3e 	bl	8000558 <__aeabi_f2d>
 80028dc:	a314      	add	r3, pc, #80	; (adr r3, 8002930 <ADCProcesing+0x140>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd fe91 	bl	8000608 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe f983 	bl	8000bf8 <__aeabi_d2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	66fb      	str	r3, [r7, #108]	; 0x6c

	  RCFilter_Update(&rcFiltFuel, input_fuel);
 80028f6:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80028fa:	4814      	ldr	r0, [pc, #80]	; (800294c <ADCProcesing+0x15c>)
 80028fc:	f7fe fdde 	bl	80014bc <RCFilter_Update>
	  MovAvgFilter_Update(&MAFiltFuel, input_fuel);
 8002900:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8002904:	4812      	ldr	r0, [pc, #72]	; (8002950 <ADCProcesing+0x160>)
 8002906:	f7fe fe23 	bl	8001550 <MovAvgFilter_Update>
	  MovAvgFilter_Update(&MAFiltAccu, input_accu);
 800290a:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 800290e:	4811      	ldr	r0, [pc, #68]	; (8002954 <ADCProcesing+0x164>)
 8002910:	f7fe fe1e 	bl	8001550 <MovAvgFilter_Update>
	  MovAvgFilter_Update(&MAFiltBatt, input_batt);
 8002914:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8002918:	480f      	ldr	r0, [pc, #60]	; (8002958 <ADCProcesing+0x168>)
 800291a:	f7fe fe19 	bl	8001550 <MovAvgFilter_Update>
//	  sprintf(txBuffer,"Raw : %.3f Filtered : %.3f\n", input, rcFiltFuel.out[0]);
//	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
	  osDelay(100); //100 Hz Sampling Rate
 800291e:	2064      	movs	r0, #100	; 0x64
 8002920:	f008 faf8 	bl	800af14 <osDelay>
	  input_accu = (value[0]/ADC_RESOLUTION) * 13;
 8002924:	e7aa      	b.n	800287c <ADCProcesing+0x8c>
 8002926:	bf00      	nop
 8002928:	cccccccd 	.word	0xcccccccd
 800292c:	4010cccc 	.word	0x4010cccc
 8002930:	66666666 	.word	0x66666666
 8002934:	400a6666 	.word	0x400a6666
 8002938:	2000520c 	.word	0x2000520c
 800293c:	2000511c 	.word	0x2000511c
 8002940:	08013274 	.word	0x08013274
 8002944:	200053b4 	.word	0x200053b4
 8002948:	42c80000 	.word	0x42c80000
 800294c:	2000527c 	.word	0x2000527c
 8002950:	20005050 	.word	0x20005050
 8002954:	2000528c 	.word	0x2000528c
 8002958:	20004f84 	.word	0x20004f84
 800295c:	0801328c 	.word	0x0801328c
 8002960:	20005648 	.word	0x20005648
 8002964:	45800000 	.word	0x45800000

08002968 <PowManagement>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PowManagement */
void PowManagement(void *argument)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PowManagement */
	HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_RESET);
 8002970:	2200      	movs	r2, #0
 8002972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002976:	482a      	ldr	r0, [pc, #168]	; (8002a20 <PowManagement+0xb8>)
 8002978:	f002 f80e 	bl	8004998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 800297c:	2200      	movs	r2, #0
 800297e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002982:	4828      	ldr	r0, [pc, #160]	; (8002a24 <PowManagement+0xbc>)
 8002984:	f002 f808 	bl	8004998 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  /**/
	  if(ignition_status == 0){
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <PowManagement+0xc0>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <PowManagement+0x3c>
		  //Use Battery
		  power_sel = 1;
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <PowManagement+0xc4>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800299c:	4820      	ldr	r0, [pc, #128]	; (8002a20 <PowManagement+0xb8>)
 800299e:	f001 fffb 	bl	8004998 <HAL_GPIO_WritePin>
 80029a2:	e033      	b.n	8002a0c <PowManagement+0xa4>
	  }
	  else{ //Ignition On
		  //Always use Accu
		  power_sel = 0;
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <PowManagement+0xc4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b0:	481b      	ldr	r0, [pc, #108]	; (8002a20 <PowManagement+0xb8>)
 80029b2:	f001 fff1 	bl	8004998 <HAL_GPIO_WritePin>
		  /* Check Accu Level */
		  	  if((MAFiltAccu.out > ACCU_THRESHOLD)&&(MAFiltBatt.out < BATT_THRESHOLD)) {
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <PowManagement+0xc8>)
 80029b8:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80029bc:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80029c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c8:	dd17      	ble.n	80029fa <PowManagement+0x92>
 80029ca:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <PowManagement+0xcc>)
 80029cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fdc1 	bl	8000558 <__aeabi_f2d>
 80029d6:	a310      	add	r3, pc, #64	; (adr r3, 8002a18 <PowManagement+0xb0>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f7fe f886 	bl	8000aec <__aeabi_dcmplt>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <PowManagement+0x92>
		  		  //Start Charging
		  		  //Set Charging Signal High
		  		  charging = 1;
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <PowManagement+0xd0>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
		  		  HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f2:	480c      	ldr	r0, [pc, #48]	; (8002a24 <PowManagement+0xbc>)
 80029f4:	f001 ffd0 	bl	8004998 <HAL_GPIO_WritePin>
 80029f8:	e008      	b.n	8002a0c <PowManagement+0xa4>
		  	  }
		  	  else { // No charging
		  		  charging = 0;
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <PowManagement+0xd0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
		  		  HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <PowManagement+0xbc>)
 8002a08:	f001 ffc6 	bl	8004998 <HAL_GPIO_WritePin>
		  	  }
	  }
    osDelay(100);
 8002a0c:	2064      	movs	r0, #100	; 0x64
 8002a0e:	f008 fa81 	bl	800af14 <osDelay>
	  if(ignition_status == 0){
 8002a12:	e7b9      	b.n	8002988 <PowManagement+0x20>
 8002a14:	f3af 8000 	nop.w
 8002a18:	9999999a 	.word	0x9999999a
 8002a1c:	400d9999 	.word	0x400d9999
 8002a20:	40020800 	.word	0x40020800
 8002a24:	40020400 	.word	0x40020400
 8002a28:	20000235 	.word	0x20000235
 8002a2c:	20000236 	.word	0x20000236
 8002a30:	2000528c 	.word	0x2000528c
 8002a34:	20004f84 	.word	0x20004f84
 8002a38:	20000237 	.word	0x20000237

08002a3c <Ignition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ignition */
void Ignition(void *argument)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ignition */
  /* Infinite loop */
  for(;;)
  {
	/* Setting Ignition Switch Logic*/
	if(identification == 1){
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <Ignition+0x44>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <Ignition+0x1e>
		//Set Ignition Logic
		HAL_GPIO_WritePin(IGNITION_LOGIC_GPIO_Port, IGNITION_LOGIC_Pin, GPIO_PIN_SET);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a52:	480c      	ldr	r0, [pc, #48]	; (8002a84 <Ignition+0x48>)
 8002a54:	f001 ffa0 	bl	8004998 <HAL_GPIO_WritePin>
 8002a58:	e005      	b.n	8002a66 <Ignition+0x2a>
	}
	else {
		HAL_GPIO_WritePin(IGNITION_LOGIC_GPIO_Port, IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a60:	4808      	ldr	r0, [pc, #32]	; (8002a84 <Ignition+0x48>)
 8002a62:	f001 ff99 	bl	8004998 <HAL_GPIO_WritePin>
	}

	/* Reading Ignition Switch Signal */
	ignition_status = HAL_GPIO_ReadPin(IGNITION_SIGNAL_GPIO_Port, IGNITION_SIGNAL_Pin);
 8002a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a6a:	4807      	ldr	r0, [pc, #28]	; (8002a88 <Ignition+0x4c>)
 8002a6c:	f001 ff7c 	bl	8004968 <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <Ignition+0x50>)
 8002a76:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8002a78:	20c8      	movs	r0, #200	; 0xc8
 8002a7a:	f008 fa4b 	bl	800af14 <osDelay>
	if(identification == 1){
 8002a7e:	e7e1      	b.n	8002a44 <Ignition+0x8>
 8002a80:	20000220 	.word	0x20000220
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	20000235 	.word	0x20000235

08002a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002aa2:	f000 fccd 	bl	8003440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000

08002ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab8:	b672      	cpsid	i
}
 8002aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002abc:	e7fe      	b.n	8002abc <Error_Handler+0x8>

08002abe <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b088      	sub	sp, #32
 8002ac2:	af04      	add	r7, sp, #16
 8002ac4:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 8002ac6:	2364      	movs	r3, #100	; 0x64
 8002ac8:	9302      	str	r3, [sp, #8]
 8002aca:	2301      	movs	r3, #1
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	f107 030f 	add.w	r3, r7, #15
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	21a6      	movs	r1, #166	; 0xa6
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f002 f9b4 	bl	8004e48 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2be5      	cmp	r3, #229	; 0xe5
 8002ae4:	d15e      	bne.n	8002ba4 <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	9302      	str	r3, [sp, #8]
 8002aee:	2301      	movs	r3, #1
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	f107 030e 	add.w	r3, r7, #14
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2301      	movs	r3, #1
 8002afa:	222d      	movs	r2, #45	; 0x2d
 8002afc:	21a6      	movs	r1, #166	; 0xa6
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f002 f8a8 	bl	8004c54 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	f000 fcbb 	bl	8003480 <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 8002b0a:	230b      	movs	r3, #11
 8002b0c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	2301      	movs	r3, #1
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	f107 030e 	add.w	r3, r7, #14
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	2231      	movs	r2, #49	; 0x31
 8002b20:	21a6      	movs	r1, #166	; 0xa6
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f002 f896 	bl	8004c54 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002b28:	2064      	movs	r0, #100	; 0x64
 8002b2a:	f000 fca9 	bl	8003480 <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8002b2e:	2364      	movs	r3, #100	; 0x64
 8002b30:	9302      	str	r3, [sp, #8]
 8002b32:	2301      	movs	r3, #1
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	f107 030d 	add.w	r3, r7, #13
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	222c      	movs	r2, #44	; 0x2c
 8002b40:	21a6      	movs	r1, #166	; 0xa6
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f002 f980 	bl	8004e48 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 8002b48:	7b7b      	ldrb	r3, [r7, #13]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 8002b52:	7b7b      	ldrb	r3, [r7, #13]
 8002b54:	f043 030f 	orr.w	r3, r3, #15
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8002b5c:	2364      	movs	r3, #100	; 0x64
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	2301      	movs	r3, #1
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	f107 030d 	add.w	r3, r7, #13
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	222c      	movs	r2, #44	; 0x2c
 8002b6e:	21a6      	movs	r1, #166	; 0xa6
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f002 f86f 	bl	8004c54 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002b76:	2064      	movs	r0, #100	; 0x64
 8002b78:	f000 fc82 	bl	8003480 <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002b80:	2364      	movs	r3, #100	; 0x64
 8002b82:	9302      	str	r3, [sp, #8]
 8002b84:	2301      	movs	r3, #1
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	f107 030e 	add.w	r3, r7, #14
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	222d      	movs	r2, #45	; 0x2d
 8002b92:	21a6      	movs	r1, #166	; 0xa6
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f002 f85d 	bl	8004c54 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002b9a:	2064      	movs	r0, #100	; 0x64
 8002b9c:	f000 fc70 	bl	8003480 <HAL_Delay>

        return check;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	e000      	b.n	8002ba6 <MPU6050_Init+0xe8>
    }
    return 1;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af04      	add	r7, sp, #16
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002bba:	2364      	movs	r3, #100	; 0x64
 8002bbc:	9302      	str	r3, [sp, #8]
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	f107 0308 	add.w	r3, r7, #8
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	2232      	movs	r2, #50	; 0x32
 8002bcc:	21a6      	movs	r1, #166	; 0xa6
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f002 f93a 	bl	8004e48 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 8002bd4:	7a7b      	ldrb	r3, [r7, #9]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	b21a      	sxth	r2, r3
 8002bda:	7a3b      	ldrb	r3, [r7, #8]
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 8002be6:	7afb      	ldrb	r3, [r7, #11]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	7abb      	ldrb	r3, [r7, #10]
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 8002bf8:	7b7b      	ldrb	r3, [r7, #13]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	7b3b      	ldrb	r3, [r7, #12]
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b21a      	sxth	r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <MPU6050_Read_Accel+0x108>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c22:	ee17 0a90 	vmov	r0, s15
 8002c26:	f7fd fc97 	bl	8000558 <__aeabi_f2d>
 8002c2a:	a321      	add	r3, pc, #132	; (adr r3, 8002cb0 <MPU6050_Read_Accel+0x100>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fe14 	bl	800085c <__aeabi_ddiv>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	6839      	ldr	r1, [r7, #0]
 8002c3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MPU6050_Read_Accel+0x108>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	ee17 0a90 	vmov	r0, s15
 8002c5a:	f7fd fc7d 	bl	8000558 <__aeabi_f2d>
 8002c5e:	a314      	add	r3, pc, #80	; (adr r3, 8002cb0 <MPU6050_Read_Accel+0x100>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f7fd fdfa 	bl	800085c <__aeabi_ddiv>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	6839      	ldr	r1, [r7, #0]
 8002c6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <MPU6050_Read_Accel+0x108>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	ee17 0a90 	vmov	r0, s15
 8002c8e:	f7fd fc63 	bl	8000558 <__aeabi_f2d>
 8002c92:	a307      	add	r3, pc, #28	; (adr r3, 8002cb0 <MPU6050_Read_Accel+0x100>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd fde0 	bl	800085c <__aeabi_ddiv>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	3a92a305 	.word	0x3a92a305
 8002cb4:	40239d01 	.word	0x40239d01
 8002cb8:	20000000 	.word	0x20000000

08002cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_MspInit+0x54>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	4a11      	ldr	r2, [pc, #68]	; (8002d10 <HAL_MspInit+0x54>)
 8002ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_MspInit+0x54>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_MspInit+0x54>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_MspInit+0x54>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_MspInit+0x54>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	210f      	movs	r1, #15
 8002cfe:	f06f 0001 	mvn.w	r0, #1
 8002d02:	f001 f881 	bl	8003e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3c      	ldr	r2, [pc, #240]	; (8002e24 <HAL_ADC_MspInit+0x110>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d171      	bne.n	8002e1a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a2c      	ldr	r2, [pc, #176]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_ADC_MspInit+0x114>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4823      	ldr	r0, [pc, #140]	; (8002e2c <HAL_ADC_MspInit+0x118>)
 8002d9e:	f001 fc5f 	bl	8004660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACCU_LEVEL_Pin|FUEL_LEVEL_Pin;
 8002da2:	2303      	movs	r3, #3
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da6:	2303      	movs	r3, #3
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	481e      	ldr	r0, [pc, #120]	; (8002e30 <HAL_ADC_MspInit+0x11c>)
 8002db6:	f001 fc53 	bl	8004660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_ADC_MspInit+0x124>)
 8002dbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002ddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002de4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002de8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dfe:	480d      	ldr	r0, [pc, #52]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002e00:	f001 f82c 	bl	8003e5c <HAL_DMA_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002e0a:	f7ff fe53 	bl	8002ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
 8002e14:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <HAL_ADC_MspInit+0x120>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40012000 	.word	0x40012000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	40020400 	.word	0x40020400
 8002e34:	20005218 	.word	0x20005218
 8002e38:	40026410 	.word	0x40026410

08002e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <HAL_I2C_MspInit+0x84>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d12b      	bne.n	8002eb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_I2C_MspInit+0x88>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_I2C_MspInit+0x88>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_I2C_MspInit+0x88>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e7a:	23c0      	movs	r3, #192	; 0xc0
 8002e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e7e:	2312      	movs	r3, #18
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 0314 	add.w	r3, r7, #20
 8002e92:	4619      	mov	r1, r3
 8002e94:	480c      	ldr	r0, [pc, #48]	; (8002ec8 <HAL_I2C_MspInit+0x8c>)
 8002e96:	f001 fbe3 	bl	8004660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_I2C_MspInit+0x88>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <HAL_I2C_MspInit+0x88>)
 8002ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_I2C_MspInit+0x88>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40005400 	.word	0x40005400
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40020400 	.word	0x40020400

08002ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_SPI_MspInit+0x84>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d12b      	bne.n	8002f46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <HAL_SPI_MspInit+0x88>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_SPI_MspInit+0x88>)
 8002ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <HAL_SPI_MspInit+0x88>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_SPI_MspInit+0x88>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <HAL_SPI_MspInit+0x88>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <HAL_SPI_MspInit+0x88>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f26:	23e0      	movs	r3, #224	; 0xe0
 8002f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f32:	2303      	movs	r3, #3
 8002f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f36:	2305      	movs	r3, #5
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <HAL_SPI_MspInit+0x8c>)
 8002f42:	f001 fb8d 	bl	8004660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f46:	bf00      	nop
 8002f48:	3728      	adds	r7, #40	; 0x28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40013000 	.word	0x40013000
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40020000 	.word	0x40020000

08002f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	; 0x30
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a4e      	ldr	r2, [pc, #312]	; (80030b4 <HAL_UART_MspInit+0x158>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d164      	bne.n	8003048 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	4a4c      	ldr	r2, [pc, #304]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8002f88:	f043 0310 	orr.w	r3, r3, #16
 8002f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	4b46      	ldr	r3, [pc, #280]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a45      	ldr	r2, [pc, #276]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fc8:	2307      	movs	r3, #7
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	483a      	ldr	r0, [pc, #232]	; (80030bc <HAL_UART_MspInit+0x160>)
 8002fd4:	f001 fb44 	bl	8004660 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002fd8:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fda:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_UART_MspInit+0x168>)
 8002fdc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fe0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fe4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fec:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003006:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8003008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8003016:	2200      	movs	r2, #0
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800301a:	4829      	ldr	r0, [pc, #164]	; (80030c0 <HAL_UART_MspInit+0x164>)
 800301c:	f000 ff1e 	bl	8003e5c <HAL_DMA_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003026:	f7ff fd45 	bl	8002ab4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <HAL_UART_MspInit+0x164>)
 800302e:	639a      	str	r2, [r3, #56]	; 0x38
 8003030:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <HAL_UART_MspInit+0x164>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2105      	movs	r1, #5
 800303a:	2025      	movs	r0, #37	; 0x25
 800303c:	f000 fee4 	bl	8003e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003040:	2025      	movs	r0, #37	; 0x25
 8003042:	f000 fefd 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003046:	e030      	b.n	80030aa <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <HAL_UART_MspInit+0x16c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d12b      	bne.n	80030aa <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6313      	str	r3, [r2, #48]	; 0x30
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HAL_UART_MspInit+0x15c>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800308a:	230c      	movs	r3, #12
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800309a:	2307      	movs	r3, #7
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	4805      	ldr	r0, [pc, #20]	; (80030bc <HAL_UART_MspInit+0x160>)
 80030a6:	f001 fadb 	bl	8004660 <HAL_GPIO_Init>
}
 80030aa:	bf00      	nop
 80030ac:	3730      	adds	r7, #48	; 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40011000 	.word	0x40011000
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	20005164 	.word	0x20005164
 80030c4:	40026440 	.word	0x40026440
 80030c8:	40004400 	.word	0x40004400

080030cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08c      	sub	sp, #48	; 0x30
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80030dc:	2200      	movs	r2, #0
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	2019      	movs	r0, #25
 80030e2:	f000 fe91 	bl	8003e08 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030e6:	2019      	movs	r0, #25
 80030e8:	f000 feaa 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	4b1e      	ldr	r3, [pc, #120]	; (800316c <HAL_InitTick+0xa0>)
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_InitTick+0xa0>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6453      	str	r3, [r2, #68]	; 0x44
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_InitTick+0xa0>)
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003108:	f107 0210 	add.w	r2, r7, #16
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f003 f88e 	bl	8006234 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003118:	f003 f878 	bl	800620c <HAL_RCC_GetPCLK2Freq>
 800311c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_InitTick+0xa4>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0c9b      	lsrs	r3, r3, #18
 8003128:	3b01      	subs	r3, #1
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_InitTick+0xa8>)
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <HAL_InitTick+0xac>)
 8003130:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_InitTick+0xa8>)
 8003134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003138:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_InitTick+0xa8>)
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_InitTick+0xa8>)
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_InitTick+0xa8>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800314c:	4809      	ldr	r0, [pc, #36]	; (8003174 <HAL_InitTick+0xa8>)
 800314e:	f003 fe4b 	bl	8006de8 <HAL_TIM_Base_Init>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003158:	4806      	ldr	r0, [pc, #24]	; (8003174 <HAL_InitTick+0xa8>)
 800315a:	f003 fe9f 	bl	8006e9c <HAL_TIM_Base_Start_IT>
 800315e:	4603      	mov	r3, r0
 8003160:	e000      	b.n	8003164 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
}
 8003164:	4618      	mov	r0, r3
 8003166:	3730      	adds	r7, #48	; 0x30
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40023800 	.word	0x40023800
 8003170:	431bde83 	.word	0x431bde83
 8003174:	20005654 	.word	0x20005654
 8003178:	40010000 	.word	0x40010000

0800317c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <NMI_Handler+0x4>

08003182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <HardFault_Handler+0x4>

08003188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <MemManage_Handler+0x4>

0800318e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003192:	e7fe      	b.n	8003192 <BusFault_Handler+0x4>

08003194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <UsageFault_Handler+0x4>

0800319a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031ae:	f003 fed7 	bl	8006f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20005654 	.word	0x20005654

080031bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <USART1_IRQHandler+0x10>)
 80031c2:	f004 f9a1 	bl	8007508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200051c4 	.word	0x200051c4

080031d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <DMA2_Stream0_IRQHandler+0x10>)
 80031d6:	f000 ffd9 	bl	800418c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20005218 	.word	0x20005218

080031e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <DMA2_Stream2_IRQHandler+0x10>)
 80031ea:	f000 ffcf 	bl	800418c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20005164 	.word	0x20005164

080031f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	return 1;
 80031fc:	2301      	movs	r3, #1
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_kill>:

int _kill(int pid, int sig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003212:	f00b fb2f 	bl	800e874 <__errno>
 8003216:	4603      	mov	r3, r0
 8003218:	2216      	movs	r2, #22
 800321a:	601a      	str	r2, [r3, #0]
	return -1;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <_exit>:

void _exit (int status)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffe7 	bl	8003208 <_kill>
	while (1) {}		/* Make sure we hang here */
 800323a:	e7fe      	b.n	800323a <_exit+0x12>

0800323c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e00a      	b.n	8003264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800324e:	f3af 8000 	nop.w
 8003252:	4601      	mov	r1, r0
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	60ba      	str	r2, [r7, #8]
 800325a:	b2ca      	uxtb	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	dbf0      	blt.n	800324e <_read+0x12>
	}

return len;
 800326c:	687b      	ldr	r3, [r7, #4]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e009      	b.n	800329c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	60ba      	str	r2, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	dbf1      	blt.n	8003288 <_write+0x12>
	}
	return len;
 80032a4:	687b      	ldr	r3, [r7, #4]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_close>:

int _close(int file)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
	return -1;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032d6:	605a      	str	r2, [r3, #4]
	return 0;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <_isatty>:

int _isatty(int file)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
	return 1;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	return 0;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <_sbrk+0x5c>)
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <_sbrk+0x60>)
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <_sbrk+0x64>)
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <_sbrk+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	429a      	cmp	r2, r3
 8003346:	d207      	bcs.n	8003358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003348:	f00b fa94 	bl	800e874 <__errno>
 800334c:	4603      	mov	r3, r0
 800334e:	220c      	movs	r2, #12
 8003350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	e009      	b.n	800336c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <_sbrk+0x64>)
 8003368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20018000 	.word	0x20018000
 8003378:	00000400 	.word	0x00000400
 800337c:	20000338 	.word	0x20000338
 8003380:	20005b60 	.word	0x20005b60

08003384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <SystemInit+0x20>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <SystemInit+0x20>)
 8003390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ac:	480d      	ldr	r0, [pc, #52]	; (80033e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033ae:	490e      	ldr	r1, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033c4:	4c0b      	ldr	r4, [pc, #44]	; (80033f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033d2:	f7ff ffd7 	bl	8003384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033d6:	f00b fa53 	bl	800e880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033da:	f7fe f979 	bl	80016d0 <main>
  bx  lr    
 80033de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80033ec:	080139f0 	.word	0x080139f0
  ldr r2, =_sbss
 80033f0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80033f4:	20005b5c 	.word	0x20005b5c

080033f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC_IRQHandler>
	...

080033fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_Init+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_Init+0x40>)
 8003406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_Init+0x40>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_Init+0x40>)
 8003412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_Init+0x40>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <HAL_Init+0x40>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003424:	2003      	movs	r0, #3
 8003426:	f000 fce4 	bl	8003df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800342a:	2000      	movs	r0, #0
 800342c:	f7ff fe4e 	bl	80030cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003430:	f7ff fc44 	bl	8002cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00

08003440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_IncTick+0x20>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_IncTick+0x24>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4413      	add	r3, r2
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_IncTick+0x24>)
 8003452:	6013      	str	r3, [r2, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	2000000c 	.word	0x2000000c
 8003464:	2000569c 	.word	0x2000569c

08003468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return uwTick;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_GetTick+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000569c 	.word	0x2000569c

08003480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff ffee 	bl	8003468 <HAL_GetTick>
 800348c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d005      	beq.n	80034a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_Delay+0x44>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034a6:	bf00      	nop
 80034a8:	f7ff ffde 	bl	8003468 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d8f7      	bhi.n	80034a8 <HAL_Delay+0x28>
  {
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	2000000c 	.word	0x2000000c

080034c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e033      	b.n	8003546 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fc14 	bl	8002d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d118      	bne.n	8003538 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800350e:	f023 0302 	bic.w	r3, r3, #2
 8003512:	f043 0202 	orr.w	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa3e 	bl	800399c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
 8003536:	e001      	b.n	800353c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_ADC_Start_DMA+0x1e>
 800356a:	2302      	movs	r3, #2
 800356c:	e0ce      	b.n	800370c <HAL_ADC_Start_DMA+0x1bc>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d018      	beq.n	80035b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003594:	4b5f      	ldr	r3, [pc, #380]	; (8003714 <HAL_ADC_Start_DMA+0x1c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a5f      	ldr	r2, [pc, #380]	; (8003718 <HAL_ADC_Start_DMA+0x1c8>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0c9a      	lsrs	r2, r3, #18
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d107      	bne.n	80035d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 8086 	bne.w	80036f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003610:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003624:	d106      	bne.n	8003634 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f023 0206 	bic.w	r2, r3, #6
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
 8003632:	e002      	b.n	800363a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_ADC_Start_DMA+0x1cc>)
 8003644:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	4a35      	ldr	r2, [pc, #212]	; (8003720 <HAL_ADC_Start_DMA+0x1d0>)
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	4a34      	ldr	r2, [pc, #208]	; (8003724 <HAL_ADC_Start_DMA+0x1d4>)
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	4a33      	ldr	r2, [pc, #204]	; (8003728 <HAL_ADC_Start_DMA+0x1d8>)
 800365c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003666:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003676:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003686:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	334c      	adds	r3, #76	; 0x4c
 8003692:	4619      	mov	r1, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f000 fc8e 	bl	8003fb8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10f      	bne.n	80036c8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d129      	bne.n	800370a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	e020      	b.n	800370a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_ADC_Start_DMA+0x1dc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d11b      	bne.n	800370a <HAL_ADC_Start_DMA+0x1ba>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d114      	bne.n	800370a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	e00b      	b.n	800370a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000004 	.word	0x20000004
 8003718:	431bde83 	.word	0x431bde83
 800371c:	40012300 	.word	0x40012300
 8003720:	08003b95 	.word	0x08003b95
 8003724:	08003c4f 	.word	0x08003c4f
 8003728:	08003c6b 	.word	0x08003c6b
 800372c:	40012000 	.word	0x40012000

08003730 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x1c>
 8003770:	2302      	movs	r3, #2
 8003772:	e105      	b.n	8003980 <HAL_ADC_ConfigChannel+0x228>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b09      	cmp	r3, #9
 8003782:	d925      	bls.n	80037d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68d9      	ldr	r1, [r3, #12]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	3b1e      	subs	r3, #30
 800379a:	2207      	movs	r2, #7
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43da      	mvns	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	400a      	ands	r2, r1
 80037a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68d9      	ldr	r1, [r3, #12]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	4618      	mov	r0, r3
 80037bc:	4603      	mov	r3, r0
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4403      	add	r3, r0
 80037c2:	3b1e      	subs	r3, #30
 80037c4:	409a      	lsls	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e022      	b.n	8003816 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6919      	ldr	r1, [r3, #16]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	2207      	movs	r2, #7
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	400a      	ands	r2, r1
 80037f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6919      	ldr	r1, [r3, #16]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	4618      	mov	r0, r3
 8003806:	4603      	mov	r3, r0
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4403      	add	r3, r0
 800380c:	409a      	lsls	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b06      	cmp	r3, #6
 800381c:	d824      	bhi.n	8003868 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	3b05      	subs	r3, #5
 8003830:	221f      	movs	r2, #31
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43da      	mvns	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	400a      	ands	r2, r1
 800383e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	4618      	mov	r0, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	3b05      	subs	r3, #5
 800385a:	fa00 f203 	lsl.w	r2, r0, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	635a      	str	r2, [r3, #52]	; 0x34
 8003866:	e04c      	b.n	8003902 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d824      	bhi.n	80038ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	3b23      	subs	r3, #35	; 0x23
 8003882:	221f      	movs	r2, #31
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43da      	mvns	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	400a      	ands	r2, r1
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	4618      	mov	r0, r3
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	3b23      	subs	r3, #35	; 0x23
 80038ac:	fa00 f203 	lsl.w	r2, r0, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
 80038b8:	e023      	b.n	8003902 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	3b41      	subs	r3, #65	; 0x41
 80038cc:	221f      	movs	r2, #31
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	400a      	ands	r2, r1
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4618      	mov	r0, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	3b41      	subs	r3, #65	; 0x41
 80038f6:	fa00 f203 	lsl.w	r2, r0, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_ADC_ConfigChannel+0x234>)
 8003904:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a21      	ldr	r2, [pc, #132]	; (8003990 <HAL_ADC_ConfigChannel+0x238>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d109      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x1cc>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b12      	cmp	r3, #18
 8003916:	d105      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a19      	ldr	r2, [pc, #100]	; (8003990 <HAL_ADC_ConfigChannel+0x238>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d123      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x21e>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b10      	cmp	r3, #16
 8003934:	d003      	beq.n	800393e <HAL_ADC_ConfigChannel+0x1e6>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b11      	cmp	r3, #17
 800393c:	d11b      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b10      	cmp	r3, #16
 8003950:	d111      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <HAL_ADC_ConfigChannel+0x23c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <HAL_ADC_ConfigChannel+0x240>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	0c9a      	lsrs	r2, r3, #18
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003968:	e002      	b.n	8003970 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3b01      	subs	r3, #1
 800396e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f9      	bne.n	800396a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40012300 	.word	0x40012300
 8003990:	40012000 	.word	0x40012000
 8003994:	20000004 	.word	0x20000004
 8003998:	431bde83 	.word	0x431bde83

0800399c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039a4:	4b79      	ldr	r3, [pc, #484]	; (8003b8c <ADC_Init+0x1f0>)
 80039a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	021a      	lsls	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6899      	ldr	r1, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <ADC_Init+0x1f4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6899      	ldr	r1, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	e00f      	b.n	8003a9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0202 	bic.w	r2, r2, #2
 8003aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6899      	ldr	r1, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7e1b      	ldrb	r3, [r3, #24]
 8003ab4:	005a      	lsls	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01b      	beq.n	8003b00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ae6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	3b01      	subs	r3, #1
 8003af4:	035a      	lsls	r2, r3, #13
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	e007      	b.n	8003b10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	051a      	lsls	r2, r3, #20
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b52:	025a      	lsls	r2, r3, #9
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6899      	ldr	r1, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	029a      	lsls	r2, r3, #10
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40012300 	.word	0x40012300
 8003b90:	0f000001 	.word	0x0f000001

08003b94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d13c      	bne.n	8003c28 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d12b      	bne.n	8003c20 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d127      	bne.n	8003c20 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d119      	bne.n	8003c20 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0220 	bic.w	r2, r2, #32
 8003bfa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7fd fd09 	bl	8001638 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c26:	e00e      	b.n	8003c46 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff fd85 	bl	8003744 <HAL_ADC_ErrorCallback>
}
 8003c3a:	e004      	b.n	8003c46 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff fd67 	bl	8003730 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2240      	movs	r2, #64	; 0x40
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	f043 0204 	orr.w	r2, r3, #4
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff fd5a 	bl	8003744 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	60d3      	str	r3, [r2, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4907      	ldr	r1, [pc, #28]	; (8003d34 <__NVIC_EnableIRQ+0x38>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000e100 	.word	0xe000e100

08003d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db0a      	blt.n	8003d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	490c      	ldr	r1, [pc, #48]	; (8003d84 <__NVIC_SetPriority+0x4c>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d60:	e00a      	b.n	8003d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4908      	ldr	r1, [pc, #32]	; (8003d88 <__NVIC_SetPriority+0x50>)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	440b      	add	r3, r1
 8003d76:	761a      	strb	r2, [r3, #24]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000e100 	.word	0xe000e100
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f1c3 0307 	rsb	r3, r3, #7
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf28      	it	cs
 8003daa:	2304      	movcs	r3, #4
 8003dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d902      	bls.n	8003dbc <NVIC_EncodePriority+0x30>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3b03      	subs	r3, #3
 8003dba:	e000      	b.n	8003dbe <NVIC_EncodePriority+0x32>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	401a      	ands	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	4313      	orrs	r3, r2
         );
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff4c 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e1a:	f7ff ff61 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	6978      	ldr	r0, [r7, #20]
 8003e26:	f7ff ffb1 	bl	8003d8c <NVIC_EncodePriority>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ff80 	bl	8003d38 <__NVIC_SetPriority>
}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ff54 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff fafe 	bl	8003468 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e099      	b.n	8003fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e98:	e00f      	b.n	8003eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e9a:	f7ff fae5 	bl	8003468 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d908      	bls.n	8003eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e078      	b.n	8003fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e8      	bne.n	8003e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <HAL_DMA_Init+0x158>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d107      	bne.n	8003f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f023 0307 	bic.w	r3, r3, #7
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d117      	bne.n	8003f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fb01 	bl	8004568 <DMA_CheckFifoParam>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e016      	b.n	8003fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fab8 	bl	80044fc <DMA_CalcBaseAndBitshift>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	223f      	movs	r2, #63	; 0x3f
 8003f96:	409a      	lsls	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	f010803f 	.word	0xf010803f

08003fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Start_IT+0x26>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e040      	b.n	8004060 <HAL_DMA_Start_IT+0xa8>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d12f      	bne.n	8004052 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fa4a 	bl	80044a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	223f      	movs	r2, #63	; 0x3f
 8004012:	409a      	lsls	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0216 	orr.w	r2, r2, #22
 8004026:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e005      	b.n	800405e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800405e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004076:	f7ff f9f7 	bl	8003468 <HAL_GetTick>
 800407a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d008      	beq.n	800409a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e052      	b.n	8004140 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0216 	bic.w	r2, r2, #22
 80040a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <HAL_DMA_Abort+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0208 	bic.w	r2, r2, #8
 80040d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ea:	e013      	b.n	8004114 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ec:	f7ff f9bc 	bl	8003468 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d90c      	bls.n	8004114 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2203      	movs	r2, #3
 800410c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e015      	b.n	8004140 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e4      	bne.n	80040ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	223f      	movs	r2, #63	; 0x3f
 8004128:	409a      	lsls	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d004      	beq.n	8004166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e00c      	b.n	8004180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2205      	movs	r2, #5
 800416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004198:	4b92      	ldr	r3, [pc, #584]	; (80043e4 <HAL_DMA_IRQHandler+0x258>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a92      	ldr	r2, [pc, #584]	; (80043e8 <HAL_DMA_IRQHandler+0x25c>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	0a9b      	lsrs	r3, r3, #10
 80041a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b6:	2208      	movs	r2, #8
 80041b8:	409a      	lsls	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01a      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	2208      	movs	r2, #8
 80041e6:	409a      	lsls	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d012      	beq.n	800422e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	2201      	movs	r2, #1
 800421c:	409a      	lsls	r2, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f043 0202 	orr.w	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	2204      	movs	r2, #4
 8004234:	409a      	lsls	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d012      	beq.n	8004264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	2204      	movs	r2, #4
 8004252:	409a      	lsls	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	2210      	movs	r2, #16
 800426a:	409a      	lsls	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d043      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d03c      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	2210      	movs	r2, #16
 8004288:	409a      	lsls	r2, r3
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d018      	beq.n	80042ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d024      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
 80042ba:	e01f      	b.n	80042fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01b      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
 80042cc:	e016      	b.n	80042fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d107      	bne.n	80042ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0208 	bic.w	r2, r2, #8
 80042ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	2220      	movs	r2, #32
 8004302:	409a      	lsls	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 808e 	beq.w	800442a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8086 	beq.w	800442a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	2220      	movs	r2, #32
 8004324:	409a      	lsls	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b05      	cmp	r3, #5
 8004334:	d136      	bne.n	80043a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0216 	bic.w	r2, r2, #22
 8004344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <HAL_DMA_IRQHandler+0x1da>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0208 	bic.w	r2, r2, #8
 8004374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437a:	223f      	movs	r2, #63	; 0x3f
 800437c:	409a      	lsls	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	2b00      	cmp	r3, #0
 8004398:	d07d      	beq.n	8004496 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
        }
        return;
 80043a2:	e078      	b.n	8004496 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01c      	beq.n	80043ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d108      	bne.n	80043d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d030      	beq.n	800442a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
 80043d0:	e02b      	b.n	800442a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d027      	beq.n	800442a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
 80043e2:	e022      	b.n	800442a <HAL_DMA_IRQHandler+0x29e>
 80043e4:	20000004 	.word	0x20000004
 80043e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0210 	bic.w	r2, r2, #16
 8004408:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d032      	beq.n	8004498 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d022      	beq.n	8004484 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2205      	movs	r2, #5
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	3301      	adds	r3, #1
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	429a      	cmp	r2, r3
 8004460:	d307      	bcc.n	8004472 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f2      	bne.n	8004456 <HAL_DMA_IRQHandler+0x2ca>
 8004470:	e000      	b.n	8004474 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004472:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
 8004494:	e000      	b.n	8004498 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004496:	bf00      	nop
    }
  }
}
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop

080044a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d108      	bne.n	80044e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044de:	e007      	b.n	80044f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	3b10      	subs	r3, #16
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <DMA_CalcBaseAndBitshift+0x64>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004516:	4a13      	ldr	r2, [pc, #76]	; (8004564 <DMA_CalcBaseAndBitshift+0x68>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d909      	bls.n	800453e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	; 0x58
 800453c:	e007      	b.n	800454e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	aaaaaaab 	.word	0xaaaaaaab
 8004564:	08013450 	.word	0x08013450

08004568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11f      	bne.n	80045c2 <DMA_CheckFifoParam+0x5a>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d856      	bhi.n	8004636 <DMA_CheckFifoParam+0xce>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <DMA_CheckFifoParam+0x28>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045b3 	.word	0x080045b3
 8004598:	080045a1 	.word	0x080045a1
 800459c:	08004637 	.word	0x08004637
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d046      	beq.n	800463a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b0:	e043      	b.n	800463a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ba:	d140      	bne.n	800463e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e03d      	b.n	800463e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ca:	d121      	bne.n	8004610 <DMA_CheckFifoParam+0xa8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d837      	bhi.n	8004642 <DMA_CheckFifoParam+0xda>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x70>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045ef 	.word	0x080045ef
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	08004601 	.word	0x08004601
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
      break;
 80045ec:	e030      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d025      	beq.n	8004646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045fe:	e022      	b.n	8004646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004608:	d11f      	bne.n	800464a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800460e:	e01c      	b.n	800464a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d903      	bls.n	800461e <DMA_CheckFifoParam+0xb6>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d003      	beq.n	8004624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800461c:	e018      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
      break;
 8004622:	e015      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e00b      	b.n	800464e <DMA_CheckFifoParam+0xe6>
      break;
 8004636:	bf00      	nop
 8004638:	e00a      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800463a:	bf00      	nop
 800463c:	e008      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800463e:	bf00      	nop
 8004640:	e006      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 8004642:	bf00      	nop
 8004644:	e004      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;   
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
    }
  } 
  
  return status; 
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop

08004660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e159      	b.n	8004930 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800467c:	2201      	movs	r2, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	429a      	cmp	r2, r3
 8004696:	f040 8148 	bne.w	800492a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d005      	beq.n	80046b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d130      	bne.n	8004714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e8:	2201      	movs	r2, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 0201 	and.w	r2, r3, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b03      	cmp	r3, #3
 800471e:	d017      	beq.n	8004750 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d123      	bne.n	80047a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	08da      	lsrs	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3208      	adds	r2, #8
 8004764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	220f      	movs	r2, #15
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0203 	and.w	r2, r3, #3
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80a2 	beq.w	800492a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	4b57      	ldr	r3, [pc, #348]	; (8004948 <HAL_GPIO_Init+0x2e8>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	4a56      	ldr	r2, [pc, #344]	; (8004948 <HAL_GPIO_Init+0x2e8>)
 80047f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f4:	6453      	str	r3, [r2, #68]	; 0x44
 80047f6:	4b54      	ldr	r3, [pc, #336]	; (8004948 <HAL_GPIO_Init+0x2e8>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004802:	4a52      	ldr	r2, [pc, #328]	; (800494c <HAL_GPIO_Init+0x2ec>)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	3302      	adds	r3, #2
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	220f      	movs	r2, #15
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a49      	ldr	r2, [pc, #292]	; (8004950 <HAL_GPIO_Init+0x2f0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d019      	beq.n	8004862 <HAL_GPIO_Init+0x202>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a48      	ldr	r2, [pc, #288]	; (8004954 <HAL_GPIO_Init+0x2f4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_GPIO_Init+0x1fe>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a47      	ldr	r2, [pc, #284]	; (8004958 <HAL_GPIO_Init+0x2f8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00d      	beq.n	800485a <HAL_GPIO_Init+0x1fa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a46      	ldr	r2, [pc, #280]	; (800495c <HAL_GPIO_Init+0x2fc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <HAL_GPIO_Init+0x1f6>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a45      	ldr	r2, [pc, #276]	; (8004960 <HAL_GPIO_Init+0x300>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_GPIO_Init+0x1f2>
 800484e:	2304      	movs	r3, #4
 8004850:	e008      	b.n	8004864 <HAL_GPIO_Init+0x204>
 8004852:	2307      	movs	r3, #7
 8004854:	e006      	b.n	8004864 <HAL_GPIO_Init+0x204>
 8004856:	2303      	movs	r3, #3
 8004858:	e004      	b.n	8004864 <HAL_GPIO_Init+0x204>
 800485a:	2302      	movs	r3, #2
 800485c:	e002      	b.n	8004864 <HAL_GPIO_Init+0x204>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_GPIO_Init+0x204>
 8004862:	2300      	movs	r3, #0
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	f002 0203 	and.w	r2, r2, #3
 800486a:	0092      	lsls	r2, r2, #2
 800486c:	4093      	lsls	r3, r2
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004874:	4935      	ldr	r1, [pc, #212]	; (800494c <HAL_GPIO_Init+0x2ec>)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	3302      	adds	r3, #2
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004882:	4b38      	ldr	r3, [pc, #224]	; (8004964 <HAL_GPIO_Init+0x304>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048a6:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <HAL_GPIO_Init+0x304>)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048ac:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_GPIO_Init+0x304>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048d0:	4a24      	ldr	r2, [pc, #144]	; (8004964 <HAL_GPIO_Init+0x304>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048d6:	4b23      	ldr	r3, [pc, #140]	; (8004964 <HAL_GPIO_Init+0x304>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048fa:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <HAL_GPIO_Init+0x304>)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004900:	4b18      	ldr	r3, [pc, #96]	; (8004964 <HAL_GPIO_Init+0x304>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004924:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <HAL_GPIO_Init+0x304>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	f67f aea2 	bls.w	800467c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40013800 	.word	0x40013800
 8004950:	40020000 	.word	0x40020000
 8004954:	40020400 	.word	0x40020400
 8004958:	40020800 	.word	0x40020800
 800495c:	40020c00 	.word	0x40020c00
 8004960:	40021000 	.word	0x40021000
 8004964:	40013c00 	.word	0x40013c00

08004968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	887b      	ldrh	r3, [r7, #2]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
 8004984:	e001      	b.n	800498a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004986:	2300      	movs	r3, #0
 8004988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800498a:	7bfb      	ldrb	r3, [r7, #15]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a8:	787b      	ldrb	r3, [r7, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049b4:	e003      	b.n	80049be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	041a      	lsls	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e12b      	b.n	8004c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fe fa22 	bl	8002e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2224      	movs	r2, #36	; 0x24
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a30:	f001 fbd8 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 8004a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4a81      	ldr	r2, [pc, #516]	; (8004c40 <HAL_I2C_Init+0x274>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d807      	bhi.n	8004a50 <HAL_I2C_Init+0x84>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a80      	ldr	r2, [pc, #512]	; (8004c44 <HAL_I2C_Init+0x278>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	bf94      	ite	ls
 8004a48:	2301      	movls	r3, #1
 8004a4a:	2300      	movhi	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e006      	b.n	8004a5e <HAL_I2C_Init+0x92>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a7d      	ldr	r2, [pc, #500]	; (8004c48 <HAL_I2C_Init+0x27c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	bf94      	ite	ls
 8004a58:	2301      	movls	r3, #1
 8004a5a:	2300      	movhi	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0e7      	b.n	8004c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a78      	ldr	r2, [pc, #480]	; (8004c4c <HAL_I2C_Init+0x280>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	0c9b      	lsrs	r3, r3, #18
 8004a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a6a      	ldr	r2, [pc, #424]	; (8004c40 <HAL_I2C_Init+0x274>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d802      	bhi.n	8004aa0 <HAL_I2C_Init+0xd4>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	e009      	b.n	8004ab4 <HAL_I2C_Init+0xe8>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	4a69      	ldr	r2, [pc, #420]	; (8004c50 <HAL_I2C_Init+0x284>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ac6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	495c      	ldr	r1, [pc, #368]	; (8004c40 <HAL_I2C_Init+0x274>)
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	d819      	bhi.n	8004b08 <HAL_I2C_Init+0x13c>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1e59      	subs	r1, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ae2:	1c59      	adds	r1, r3, #1
 8004ae4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ae8:	400b      	ands	r3, r1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_I2C_Init+0x138>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1e59      	subs	r1, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004afc:	3301      	adds	r3, #1
 8004afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b02:	e051      	b.n	8004ba8 <HAL_I2C_Init+0x1dc>
 8004b04:	2304      	movs	r3, #4
 8004b06:	e04f      	b.n	8004ba8 <HAL_I2C_Init+0x1dc>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d111      	bne.n	8004b34 <HAL_I2C_Init+0x168>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1e58      	subs	r0, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	440b      	add	r3, r1
 8004b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b22:	3301      	adds	r3, #1
 8004b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e012      	b.n	8004b5a <HAL_I2C_Init+0x18e>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	0099      	lsls	r1, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Init+0x196>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e022      	b.n	8004ba8 <HAL_I2C_Init+0x1dc>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10e      	bne.n	8004b88 <HAL_I2C_Init+0x1bc>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1e58      	subs	r0, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6859      	ldr	r1, [r3, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	440b      	add	r3, r1
 8004b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	e00f      	b.n	8004ba8 <HAL_I2C_Init+0x1dc>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1e58      	subs	r0, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	0099      	lsls	r1, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	6809      	ldr	r1, [r1, #0]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6911      	ldr	r1, [r2, #16]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68d2      	ldr	r2, [r2, #12]
 8004be2:	4311      	orrs	r1, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	000186a0 	.word	0x000186a0
 8004c44:	001e847f 	.word	0x001e847f
 8004c48:	003d08ff 	.word	0x003d08ff
 8004c4c:	431bde83 	.word	0x431bde83
 8004c50:	10624dd3 	.word	0x10624dd3

08004c54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	817b      	strh	r3, [r7, #10]
 8004c66:	460b      	mov	r3, r1
 8004c68:	813b      	strh	r3, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c6e:	f7fe fbfb 	bl	8003468 <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	f040 80d9 	bne.w	8004e34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	2319      	movs	r3, #25
 8004c88:	2201      	movs	r2, #1
 8004c8a:	496d      	ldr	r1, [pc, #436]	; (8004e40 <HAL_I2C_Mem_Write+0x1ec>)
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fc7f 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e0cc      	b.n	8004e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Mem_Write+0x56>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e0c5      	b.n	8004e36 <HAL_I2C_Mem_Write+0x1e2>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d007      	beq.n	8004cd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2221      	movs	r2, #33	; 0x21
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a3a      	ldr	r2, [r7, #32]
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a4d      	ldr	r2, [pc, #308]	; (8004e44 <HAL_I2C_Mem_Write+0x1f0>)
 8004d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d12:	88f8      	ldrh	r0, [r7, #6]
 8004d14:	893a      	ldrh	r2, [r7, #8]
 8004d16:	8979      	ldrh	r1, [r7, #10]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4603      	mov	r3, r0
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fab6 	bl	8005294 <I2C_RequestMemoryWrite>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d052      	beq.n	8004dd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e081      	b.n	8004e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fd00 	bl	800573c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d107      	bne.n	8004d5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e06b      	b.n	8004e36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d11b      	bne.n	8004dd4 <HAL_I2C_Mem_Write+0x180>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d017      	beq.n	8004dd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1aa      	bne.n	8004d32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fcec 	bl	80057be <I2C_WaitOnBTFFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00d      	beq.n	8004e08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d107      	bne.n	8004e04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e016      	b.n	8004e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	00100002 	.word	0x00100002
 8004e44:	ffff0000 	.word	0xffff0000

08004e48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	; 0x30
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	4608      	mov	r0, r1
 8004e52:	4611      	mov	r1, r2
 8004e54:	461a      	mov	r2, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	817b      	strh	r3, [r7, #10]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	813b      	strh	r3, [r7, #8]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e62:	f7fe fb01 	bl	8003468 <HAL_GetTick>
 8004e66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	f040 8208 	bne.w	8005286 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2319      	movs	r3, #25
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	497b      	ldr	r1, [pc, #492]	; (800506c <HAL_I2C_Mem_Read+0x224>)
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fb85 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e1fb      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_I2C_Mem_Read+0x56>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e1f4      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d007      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2222      	movs	r2, #34	; 0x22
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2240      	movs	r2, #64	; 0x40
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a5b      	ldr	r2, [pc, #364]	; (8005070 <HAL_I2C_Mem_Read+0x228>)
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f06:	88f8      	ldrh	r0, [r7, #6]
 8004f08:	893a      	ldrh	r2, [r7, #8]
 8004f0a:	8979      	ldrh	r1, [r7, #10]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4603      	mov	r3, r0
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fa52 	bl	80053c0 <I2C_RequestMemoryRead>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e1b0      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d113      	bne.n	8004f56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	623b      	str	r3, [r7, #32]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	623b      	str	r3, [r7, #32]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e184      	b.n	8005260 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d11b      	bne.n	8004f96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e164      	b.n	8005260 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d11b      	bne.n	8004fd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	e144      	b.n	8005260 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fec:	e138      	b.n	8005260 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	f200 80f1 	bhi.w	80051da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d123      	bne.n	8005048 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fc1b 	bl	8005840 <I2C_WaitOnRXNEFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e139      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005046:	e10b      	b.n	8005260 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	2b02      	cmp	r3, #2
 800504e:	d14e      	bne.n	80050ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	2200      	movs	r2, #0
 8005058:	4906      	ldr	r1, [pc, #24]	; (8005074 <HAL_I2C_Mem_Read+0x22c>)
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa98 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e10e      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
 800506a:	bf00      	nop
 800506c:	00100002 	.word	0x00100002
 8005070:	ffff0000 	.word	0xffff0000
 8005074:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050ec:	e0b8      	b.n	8005260 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	2200      	movs	r2, #0
 80050f6:	4966      	ldr	r1, [pc, #408]	; (8005290 <HAL_I2C_Mem_Read+0x448>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fa49 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0bf      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2200      	movs	r2, #0
 8005152:	494f      	ldr	r1, [pc, #316]	; (8005290 <HAL_I2C_Mem_Read+0x448>)
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fa1b 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e091      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051d8:	e042      	b.n	8005260 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fb2e 	bl	8005840 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e04c      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d118      	bne.n	8005260 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f aec2 	bne.w	8004fee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	00010004 	.word	0x00010004

08005294 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	4608      	mov	r0, r1
 800529e:	4611      	mov	r1, r2
 80052a0:	461a      	mov	r2, r3
 80052a2:	4603      	mov	r3, r0
 80052a4:	817b      	strh	r3, [r7, #10]
 80052a6:	460b      	mov	r3, r1
 80052a8:	813b      	strh	r3, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f960 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00d      	beq.n	80052f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e4:	d103      	bne.n	80052ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e05f      	b.n	80053b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005300:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	6a3a      	ldr	r2, [r7, #32]
 8005306:	492d      	ldr	r1, [pc, #180]	; (80053bc <I2C_RequestMemoryWrite+0x128>)
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f998 	bl	800563e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e04c      	b.n	80053b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	6a39      	ldr	r1, [r7, #32]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fa02 	bl	800573c <I2C_WaitOnTXEFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b04      	cmp	r3, #4
 8005344:	d107      	bne.n	8005356 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005354:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e02b      	b.n	80053b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d105      	bne.n	800536c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005360:	893b      	ldrh	r3, [r7, #8]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	611a      	str	r2, [r3, #16]
 800536a:	e021      	b.n	80053b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800536c:	893b      	ldrh	r3, [r7, #8]
 800536e:	0a1b      	lsrs	r3, r3, #8
 8005370:	b29b      	uxth	r3, r3
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	6a39      	ldr	r1, [r7, #32]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f9dc 	bl	800573c <I2C_WaitOnTXEFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00d      	beq.n	80053a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b04      	cmp	r3, #4
 8005390:	d107      	bne.n	80053a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e005      	b.n	80053b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a6:	893b      	ldrh	r3, [r7, #8]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	00010002 	.word	0x00010002

080053c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	817b      	strh	r3, [r7, #10]
 80053d2:	460b      	mov	r3, r1
 80053d4:	813b      	strh	r3, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	2200      	movs	r2, #0
 8005402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f8c2 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005420:	d103      	bne.n	800542a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e0aa      	b.n	8005584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800543c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	6a3a      	ldr	r2, [r7, #32]
 8005442:	4952      	ldr	r1, [pc, #328]	; (800558c <I2C_RequestMemoryRead+0x1cc>)
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f8fa 	bl	800563e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e097      	b.n	8005584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546c:	6a39      	ldr	r1, [r7, #32]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f964 	bl	800573c <I2C_WaitOnTXEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b04      	cmp	r3, #4
 8005480:	d107      	bne.n	8005492 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005490:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e076      	b.n	8005584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d105      	bne.n	80054a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800549c:	893b      	ldrh	r3, [r7, #8]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	611a      	str	r2, [r3, #16]
 80054a6:	e021      	b.n	80054ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054a8:	893b      	ldrh	r3, [r7, #8]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b8:	6a39      	ldr	r1, [r7, #32]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f93e 	bl	800573c <I2C_WaitOnTXEFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00d      	beq.n	80054e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d107      	bne.n	80054de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e050      	b.n	8005584 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e2:	893b      	ldrh	r3, [r7, #8]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	6a39      	ldr	r1, [r7, #32]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f923 	bl	800573c <I2C_WaitOnTXEFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	2b04      	cmp	r3, #4
 8005502:	d107      	bne.n	8005514 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005512:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e035      	b.n	8005584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005526:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	2200      	movs	r2, #0
 8005530:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f82b 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	d103      	bne.n	8005558 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005556:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e013      	b.n	8005584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800555c:	897b      	ldrh	r3, [r7, #10]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	6a3a      	ldr	r2, [r7, #32]
 8005570:	4906      	ldr	r1, [pc, #24]	; (800558c <I2C_RequestMemoryRead+0x1cc>)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f863 	bl	800563e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	00010002 	.word	0x00010002

08005590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055a0:	e025      	b.n	80055ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d021      	beq.n	80055ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fd ff5d 	bl	8003468 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d116      	bne.n	80055ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e023      	b.n	8005636 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10d      	bne.n	8005614 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	e00c      	b.n	800562e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	43da      	mvns	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf0c      	ite	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	2300      	movne	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	429a      	cmp	r2, r3
 8005632:	d0b6      	beq.n	80055a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800564c:	e051      	b.n	80056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565c:	d123      	bne.n	80056a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005676:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f043 0204 	orr.w	r2, r3, #4
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e046      	b.n	8005734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d021      	beq.n	80056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fd fedb 	bl	8003468 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d116      	bne.n	80056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f043 0220 	orr.w	r2, r3, #32
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e020      	b.n	8005734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	0c1b      	lsrs	r3, r3, #16
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10c      	bne.n	8005716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	43da      	mvns	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4013      	ands	r3, r2
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e00b      	b.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	43da      	mvns	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d18d      	bne.n	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005748:	e02d      	b.n	80057a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f8ce 	bl	80058ec <I2C_IsAcknowledgeFailed>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e02d      	b.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d021      	beq.n	80057a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005762:	f7fd fe81 	bl	8003468 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	429a      	cmp	r2, r3
 8005770:	d302      	bcc.n	8005778 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d116      	bne.n	80057a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e007      	b.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b0:	2b80      	cmp	r3, #128	; 0x80
 80057b2:	d1ca      	bne.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057ca:	e02d      	b.n	8005828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f88d 	bl	80058ec <I2C_IsAcknowledgeFailed>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e02d      	b.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d021      	beq.n	8005828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e4:	f7fd fe40 	bl	8003468 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d302      	bcc.n	80057fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d116      	bne.n	8005828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	f043 0220 	orr.w	r2, r3, #32
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e007      	b.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b04      	cmp	r3, #4
 8005834:	d1ca      	bne.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800584c:	e042      	b.n	80058d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b10      	cmp	r3, #16
 800585a:	d119      	bne.n	8005890 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0210 	mvn.w	r2, #16
 8005864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e029      	b.n	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fd fdea 	bl	8003468 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d116      	bne.n	80058d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f043 0220 	orr.w	r2, r3, #32
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e007      	b.n	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b40      	cmp	r3, #64	; 0x40
 80058e0:	d1b5      	bne.n	800584e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005902:	d11b      	bne.n	800593c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800590c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f043 0204 	orr.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e264      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d075      	beq.n	8005a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800596a:	4ba3      	ldr	r3, [pc, #652]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 030c 	and.w	r3, r3, #12
 8005972:	2b04      	cmp	r3, #4
 8005974:	d00c      	beq.n	8005990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005976:	4ba0      	ldr	r3, [pc, #640]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800597e:	2b08      	cmp	r3, #8
 8005980:	d112      	bne.n	80059a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005982:	4b9d      	ldr	r3, [pc, #628]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800598e:	d10b      	bne.n	80059a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005990:	4b99      	ldr	r3, [pc, #612]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05b      	beq.n	8005a54 <HAL_RCC_OscConfig+0x108>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d157      	bne.n	8005a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e23f      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b0:	d106      	bne.n	80059c0 <HAL_RCC_OscConfig+0x74>
 80059b2:	4b91      	ldr	r3, [pc, #580]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a90      	ldr	r2, [pc, #576]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	e01d      	b.n	80059fc <HAL_RCC_OscConfig+0xb0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059c8:	d10c      	bne.n	80059e4 <HAL_RCC_OscConfig+0x98>
 80059ca:	4b8b      	ldr	r3, [pc, #556]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a8a      	ldr	r2, [pc, #552]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	4b88      	ldr	r3, [pc, #544]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a87      	ldr	r2, [pc, #540]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e00b      	b.n	80059fc <HAL_RCC_OscConfig+0xb0>
 80059e4:	4b84      	ldr	r3, [pc, #528]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a83      	ldr	r2, [pc, #524]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	4b81      	ldr	r3, [pc, #516]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a80      	ldr	r2, [pc, #512]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 80059f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a04:	f7fd fd30 	bl	8003468 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a0c:	f7fd fd2c 	bl	8003468 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b64      	cmp	r3, #100	; 0x64
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e204      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1e:	4b76      	ldr	r3, [pc, #472]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0xc0>
 8005a2a:	e014      	b.n	8005a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fd fd1c 	bl	8003468 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a34:	f7fd fd18 	bl	8003468 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b64      	cmp	r3, #100	; 0x64
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e1f0      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a46:	4b6c      	ldr	r3, [pc, #432]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0xe8>
 8005a52:	e000      	b.n	8005a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d063      	beq.n	8005b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a62:	4b65      	ldr	r3, [pc, #404]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 030c 	and.w	r3, r3, #12
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a6e:	4b62      	ldr	r3, [pc, #392]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d11c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a7a:	4b5f      	ldr	r3, [pc, #380]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d116      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a86:	4b5c      	ldr	r3, [pc, #368]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_RCC_OscConfig+0x152>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d001      	beq.n	8005a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e1c4      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9e:	4b56      	ldr	r3, [pc, #344]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4952      	ldr	r1, [pc, #328]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	e03a      	b.n	8005b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d020      	beq.n	8005afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005abc:	4b4f      	ldr	r3, [pc, #316]	; (8005bfc <HAL_RCC_OscConfig+0x2b0>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac2:	f7fd fcd1 	bl	8003468 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aca:	f7fd fccd 	bl	8003468 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e1a5      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005adc:	4b46      	ldr	r3, [pc, #280]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae8:	4b43      	ldr	r3, [pc, #268]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4940      	ldr	r1, [pc, #256]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	600b      	str	r3, [r1, #0]
 8005afc:	e015      	b.n	8005b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005afe:	4b3f      	ldr	r3, [pc, #252]	; (8005bfc <HAL_RCC_OscConfig+0x2b0>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fd fcb0 	bl	8003468 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b0c:	f7fd fcac 	bl	8003468 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e184      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1e:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d030      	beq.n	8005b98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d016      	beq.n	8005b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b3e:	4b30      	ldr	r3, [pc, #192]	; (8005c00 <HAL_RCC_OscConfig+0x2b4>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fd fc90 	bl	8003468 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b4c:	f7fd fc8c 	bl	8003468 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e164      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b5e:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x200>
 8005b6a:	e015      	b.n	8005b98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <HAL_RCC_OscConfig+0x2b4>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b72:	f7fd fc79 	bl	8003468 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b7a:	f7fd fc75 	bl	8003468 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e14d      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f0      	bne.n	8005b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80a0 	beq.w	8005ce6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10f      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	4a0e      	ldr	r2, [pc, #56]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_OscConfig+0x2b8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d121      	bne.n	8005c26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005be2:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <HAL_RCC_OscConfig+0x2b8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a07      	ldr	r2, [pc, #28]	; (8005c04 <HAL_RCC_OscConfig+0x2b8>)
 8005be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bee:	f7fd fc3b 	bl	8003468 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf4:	e011      	b.n	8005c1a <HAL_RCC_OscConfig+0x2ce>
 8005bf6:	bf00      	nop
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	42470000 	.word	0x42470000
 8005c00:	42470e80 	.word	0x42470e80
 8005c04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c08:	f7fd fc2e 	bl	8003468 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e106      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1a:	4b85      	ldr	r3, [pc, #532]	; (8005e30 <HAL_RCC_OscConfig+0x4e4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f0      	beq.n	8005c08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCC_OscConfig+0x2f0>
 8005c2e:	4b81      	ldr	r3, [pc, #516]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a80      	ldr	r2, [pc, #512]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3a:	e01c      	b.n	8005c76 <HAL_RCC_OscConfig+0x32a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d10c      	bne.n	8005c5e <HAL_RCC_OscConfig+0x312>
 8005c44:	4b7b      	ldr	r3, [pc, #492]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c48:	4a7a      	ldr	r2, [pc, #488]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c4a:	f043 0304 	orr.w	r3, r3, #4
 8005c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c50:	4b78      	ldr	r3, [pc, #480]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c54:	4a77      	ldr	r2, [pc, #476]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5c:	e00b      	b.n	8005c76 <HAL_RCC_OscConfig+0x32a>
 8005c5e:	4b75      	ldr	r3, [pc, #468]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	4a74      	ldr	r2, [pc, #464]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6a:	4b72      	ldr	r3, [pc, #456]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	4a71      	ldr	r2, [pc, #452]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d015      	beq.n	8005caa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fd fbf3 	bl	8003468 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c86:	f7fd fbef 	bl	8003468 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e0c5      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9c:	4b65      	ldr	r3, [pc, #404]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ee      	beq.n	8005c86 <HAL_RCC_OscConfig+0x33a>
 8005ca8:	e014      	b.n	8005cd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005caa:	f7fd fbdd 	bl	8003468 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fd fbd9 	bl	8003468 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0af      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc8:	4b5a      	ldr	r3, [pc, #360]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ee      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cda:	4b56      	ldr	r3, [pc, #344]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	4a55      	ldr	r2, [pc, #340]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 809b 	beq.w	8005e26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cf0:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d05c      	beq.n	8005db6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d141      	bne.n	8005d88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d04:	4b4c      	ldr	r3, [pc, #304]	; (8005e38 <HAL_RCC_OscConfig+0x4ec>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0a:	f7fd fbad 	bl	8003468 <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d12:	f7fd fba9 	bl	8003468 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e081      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d24:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	019b      	lsls	r3, r3, #6
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	061b      	lsls	r3, r3, #24
 8005d54:	4937      	ldr	r1, [pc, #220]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d5a:	4b37      	ldr	r3, [pc, #220]	; (8005e38 <HAL_RCC_OscConfig+0x4ec>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d60:	f7fd fb82 	bl	8003468 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d68:	f7fd fb7e 	bl	8003468 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e056      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	4b2e      	ldr	r3, [pc, #184]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0x41c>
 8005d86:	e04e      	b.n	8005e26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d88:	4b2b      	ldr	r3, [pc, #172]	; (8005e38 <HAL_RCC_OscConfig+0x4ec>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fd fb6b 	bl	8003468 <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d96:	f7fd fb67 	bl	8003468 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e03f      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da8:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f0      	bne.n	8005d96 <HAL_RCC_OscConfig+0x44a>
 8005db4:	e037      	b.n	8005e26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e032      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <HAL_RCC_OscConfig+0x4e8>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d028      	beq.n	8005e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d121      	bne.n	8005e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d11a      	bne.n	8005e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005df2:	4013      	ands	r3, r2
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005df8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d111      	bne.n	8005e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d107      	bne.n	8005e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d001      	beq.n	8005e26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40007000 	.word	0x40007000
 8005e34:	40023800 	.word	0x40023800
 8005e38:	42470060 	.word	0x42470060

08005e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e0cc      	b.n	8005fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e50:	4b68      	ldr	r3, [pc, #416]	; (8005ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d90c      	bls.n	8005e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5e:	4b65      	ldr	r3, [pc, #404]	; (8005ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e66:	4b63      	ldr	r3, [pc, #396]	; (8005ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d001      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0b8      	b.n	8005fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d020      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e90:	4b59      	ldr	r3, [pc, #356]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	4a58      	ldr	r2, [pc, #352]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ea8:	4b53      	ldr	r3, [pc, #332]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	4a52      	ldr	r2, [pc, #328]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb4:	4b50      	ldr	r3, [pc, #320]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	494d      	ldr	r1, [pc, #308]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d044      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d107      	bne.n	8005eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eda:	4b47      	ldr	r3, [pc, #284]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d119      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e07f      	b.n	8005fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d003      	beq.n	8005efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efa:	4b3f      	ldr	r3, [pc, #252]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e06f      	b.n	8005fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e067      	b.n	8005fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f1a:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f023 0203 	bic.w	r2, r3, #3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	4934      	ldr	r1, [pc, #208]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f2c:	f7fd fa9c 	bl	8003468 <HAL_GetTick>
 8005f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f32:	e00a      	b.n	8005f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f34:	f7fd fa98 	bl	8003468 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e04f      	b.n	8005fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 020c 	and.w	r2, r3, #12
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d1eb      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f5c:	4b25      	ldr	r3, [pc, #148]	; (8005ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d20c      	bcs.n	8005f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6a:	4b22      	ldr	r3, [pc, #136]	; (8005ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e032      	b.n	8005fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f90:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4916      	ldr	r1, [pc, #88]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d009      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	490e      	ldr	r1, [pc, #56]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fc2:	f000 f821 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	490a      	ldr	r1, [pc, #40]	; (8005ffc <HAL_RCC_ClockConfig+0x1c0>)
 8005fd4:	5ccb      	ldrb	r3, [r1, r3]
 8005fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fda:	4a09      	ldr	r2, [pc, #36]	; (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fde:	4b09      	ldr	r3, [pc, #36]	; (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fd f872 	bl	80030cc <HAL_InitTick>

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40023c00 	.word	0x40023c00
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	08013438 	.word	0x08013438
 8006000:	20000004 	.word	0x20000004
 8006004:	20000008 	.word	0x20000008

08006008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	607b      	str	r3, [r7, #4]
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	2300      	movs	r3, #0
 800601a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006020:	4b67      	ldr	r3, [pc, #412]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 030c 	and.w	r3, r3, #12
 8006028:	2b08      	cmp	r3, #8
 800602a:	d00d      	beq.n	8006048 <HAL_RCC_GetSysClockFreq+0x40>
 800602c:	2b08      	cmp	r3, #8
 800602e:	f200 80bd 	bhi.w	80061ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_RCC_GetSysClockFreq+0x34>
 8006036:	2b04      	cmp	r3, #4
 8006038:	d003      	beq.n	8006042 <HAL_RCC_GetSysClockFreq+0x3a>
 800603a:	e0b7      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800603c:	4b61      	ldr	r3, [pc, #388]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800603e:	60bb      	str	r3, [r7, #8]
       break;
 8006040:	e0b7      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006042:	4b61      	ldr	r3, [pc, #388]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006044:	60bb      	str	r3, [r7, #8]
      break;
 8006046:	e0b4      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006048:	4b5d      	ldr	r3, [pc, #372]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006050:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006052:	4b5b      	ldr	r3, [pc, #364]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d04d      	beq.n	80060fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800605e:	4b58      	ldr	r3, [pc, #352]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	099b      	lsrs	r3, r3, #6
 8006064:	461a      	mov	r2, r3
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800606e:	f04f 0100 	mov.w	r1, #0
 8006072:	ea02 0800 	and.w	r8, r2, r0
 8006076:	ea03 0901 	and.w	r9, r3, r1
 800607a:	4640      	mov	r0, r8
 800607c:	4649      	mov	r1, r9
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	014b      	lsls	r3, r1, #5
 8006088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800608c:	0142      	lsls	r2, r0, #5
 800608e:	4610      	mov	r0, r2
 8006090:	4619      	mov	r1, r3
 8006092:	ebb0 0008 	subs.w	r0, r0, r8
 8006096:	eb61 0109 	sbc.w	r1, r1, r9
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	018b      	lsls	r3, r1, #6
 80060a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060a8:	0182      	lsls	r2, r0, #6
 80060aa:	1a12      	subs	r2, r2, r0
 80060ac:	eb63 0301 	sbc.w	r3, r3, r1
 80060b0:	f04f 0000 	mov.w	r0, #0
 80060b4:	f04f 0100 	mov.w	r1, #0
 80060b8:	00d9      	lsls	r1, r3, #3
 80060ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060be:	00d0      	lsls	r0, r2, #3
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	eb12 0208 	adds.w	r2, r2, r8
 80060c8:	eb43 0309 	adc.w	r3, r3, r9
 80060cc:	f04f 0000 	mov.w	r0, #0
 80060d0:	f04f 0100 	mov.w	r1, #0
 80060d4:	0259      	lsls	r1, r3, #9
 80060d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80060da:	0250      	lsls	r0, r2, #9
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4610      	mov	r0, r2
 80060e2:	4619      	mov	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	f7fa fdd4 	bl	8000c98 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4613      	mov	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e04a      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fa:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	099b      	lsrs	r3, r3, #6
 8006100:	461a      	mov	r2, r3
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800610a:	f04f 0100 	mov.w	r1, #0
 800610e:	ea02 0400 	and.w	r4, r2, r0
 8006112:	ea03 0501 	and.w	r5, r3, r1
 8006116:	4620      	mov	r0, r4
 8006118:	4629      	mov	r1, r5
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	014b      	lsls	r3, r1, #5
 8006124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006128:	0142      	lsls	r2, r0, #5
 800612a:	4610      	mov	r0, r2
 800612c:	4619      	mov	r1, r3
 800612e:	1b00      	subs	r0, r0, r4
 8006130:	eb61 0105 	sbc.w	r1, r1, r5
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	018b      	lsls	r3, r1, #6
 800613e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006142:	0182      	lsls	r2, r0, #6
 8006144:	1a12      	subs	r2, r2, r0
 8006146:	eb63 0301 	sbc.w	r3, r3, r1
 800614a:	f04f 0000 	mov.w	r0, #0
 800614e:	f04f 0100 	mov.w	r1, #0
 8006152:	00d9      	lsls	r1, r3, #3
 8006154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006158:	00d0      	lsls	r0, r2, #3
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	1912      	adds	r2, r2, r4
 8006160:	eb45 0303 	adc.w	r3, r5, r3
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f04f 0100 	mov.w	r1, #0
 800616c:	0299      	lsls	r1, r3, #10
 800616e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006172:	0290      	lsls	r0, r2, #10
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4610      	mov	r0, r2
 800617a:	4619      	mov	r1, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	461a      	mov	r2, r3
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	f7fa fd88 	bl	8000c98 <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4613      	mov	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	3301      	adds	r3, #1
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	60bb      	str	r3, [r7, #8]
      break;
 80061aa:	e002      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061ae:	60bb      	str	r3, [r7, #8]
      break;
 80061b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b2:	68bb      	ldr	r3, [r7, #8]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80061be:	bf00      	nop
 80061c0:	40023800 	.word	0x40023800
 80061c4:	00f42400 	.word	0x00f42400
 80061c8:	007a1200 	.word	0x007a1200

080061cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d0:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061d2:	681b      	ldr	r3, [r3, #0]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000004 	.word	0x20000004

080061e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061e8:	f7ff fff0 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	0a9b      	lsrs	r3, r3, #10
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4903      	ldr	r1, [pc, #12]	; (8006208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40023800 	.word	0x40023800
 8006208:	08013448 	.word	0x08013448

0800620c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006210:	f7ff ffdc 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8006214:	4602      	mov	r2, r0
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	0b5b      	lsrs	r3, r3, #13
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	4903      	ldr	r1, [pc, #12]	; (8006230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40023800 	.word	0x40023800
 8006230:	08013448 	.word	0x08013448

08006234 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	220f      	movs	r2, #15
 8006242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006244:	4b12      	ldr	r3, [pc, #72]	; (8006290 <HAL_RCC_GetClockConfig+0x5c>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 0203 	and.w	r2, r3, #3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <HAL_RCC_GetClockConfig+0x5c>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <HAL_RCC_GetClockConfig+0x5c>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006268:	4b09      	ldr	r3, [pc, #36]	; (8006290 <HAL_RCC_GetClockConfig+0x5c>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	08db      	lsrs	r3, r3, #3
 800626e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006276:	4b07      	ldr	r3, [pc, #28]	; (8006294 <HAL_RCC_GetClockConfig+0x60>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0207 	and.w	r2, r3, #7
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	601a      	str	r2, [r3, #0]
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40023800 	.word	0x40023800
 8006294:	40023c00 	.word	0x40023c00

08006298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e07b      	b.n	80063a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ba:	d009      	beq.n	80062d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	61da      	str	r2, [r3, #28]
 80062c2:	e005      	b.n	80062d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fc fdee 	bl	8002ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006306:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006354:	ea42 0103 	orr.w	r1, r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	f003 0104 	and.w	r1, r3, #4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	f003 0210 	and.w	r2, r3, #16
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006390:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b088      	sub	sp, #32
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_SPI_Transmit+0x22>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e126      	b.n	800661a <HAL_SPI_Transmit+0x270>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d4:	f7fd f848 	bl	8003468 <HAL_GetTick>
 80063d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d002      	beq.n	80063f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
 80063ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ee:	e10b      	b.n	8006608 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_SPI_Transmit+0x52>
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006400:	e102      	b.n	8006608 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2203      	movs	r2, #3
 8006406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006448:	d10f      	bne.n	800646a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006458:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006468:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d007      	beq.n	8006488 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006486:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006490:	d14b      	bne.n	800652a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_SPI_Transmit+0xf6>
 800649a:	8afb      	ldrh	r3, [r7, #22]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d13e      	bne.n	800651e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	881a      	ldrh	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	1c9a      	adds	r2, r3, #2
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064c4:	e02b      	b.n	800651e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d112      	bne.n	80064fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	1c9a      	adds	r2, r3, #2
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80064f8:	e011      	b.n	800651e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064fa:	f7fc ffb5 	bl	8003468 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d803      	bhi.n	8006512 <HAL_SPI_Transmit+0x168>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d102      	bne.n	8006518 <HAL_SPI_Transmit+0x16e>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800651c:	e074      	b.n	8006608 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1ce      	bne.n	80064c6 <HAL_SPI_Transmit+0x11c>
 8006528:	e04c      	b.n	80065c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_SPI_Transmit+0x18e>
 8006532:	8afb      	ldrh	r3, [r7, #22]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d140      	bne.n	80065ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	7812      	ldrb	r2, [r2, #0]
 8006544:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006554:	b29b      	uxth	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800655e:	e02c      	b.n	80065ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b02      	cmp	r3, #2
 800656c:	d113      	bne.n	8006596 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	7812      	ldrb	r2, [r2, #0]
 800657a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	86da      	strh	r2, [r3, #54]	; 0x36
 8006594:	e011      	b.n	80065ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006596:	f7fc ff67 	bl	8003468 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d803      	bhi.n	80065ae <HAL_SPI_Transmit+0x204>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d102      	bne.n	80065b4 <HAL_SPI_Transmit+0x20a>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065b8:	e026      	b.n	8006608 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1cd      	bne.n	8006560 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 fbcb 	bl	8006d64 <SPI_EndRxTxTransaction>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065e2:	2300      	movs	r3, #0
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e000      	b.n	8006608 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006606:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006618:	7ffb      	ldrb	r3, [r7, #31]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b088      	sub	sp, #32
 8006626:	af02      	add	r7, sp, #8
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663e:	d112      	bne.n	8006666 <HAL_SPI_Receive+0x44>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10e      	bne.n	8006666 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2204      	movs	r2, #4
 800664c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006650:	88fa      	ldrh	r2, [r7, #6]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	4613      	mov	r3, r2
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	68b9      	ldr	r1, [r7, #8]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f8f1 	bl	8006844 <HAL_SPI_TransmitReceive>
 8006662:	4603      	mov	r3, r0
 8006664:	e0ea      	b.n	800683c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_SPI_Receive+0x52>
 8006670:	2302      	movs	r3, #2
 8006672:	e0e3      	b.n	800683c <HAL_SPI_Receive+0x21a>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800667c:	f7fc fef4 	bl	8003468 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b01      	cmp	r3, #1
 800668c:	d002      	beq.n	8006694 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800668e:	2302      	movs	r3, #2
 8006690:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006692:	e0ca      	b.n	800682a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_SPI_Receive+0x7e>
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066a4:	e0c1      	b.n	800682a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2204      	movs	r2, #4
 80066aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	88fa      	ldrh	r2, [r7, #6]
 80066be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ec:	d10f      	bne.n	800670e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800670c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d007      	beq.n	800672c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800672a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d162      	bne.n	80067fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006734:	e02e      	b.n	8006794 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	d115      	bne.n	8006770 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f103 020c 	add.w	r2, r3, #12
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800676e:	e011      	b.n	8006794 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006770:	f7fc fe7a 	bl	8003468 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d803      	bhi.n	8006788 <HAL_SPI_Receive+0x166>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d102      	bne.n	800678e <HAL_SPI_Receive+0x16c>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d102      	bne.n	8006794 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006792:	e04a      	b.n	800682a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1cb      	bne.n	8006736 <HAL_SPI_Receive+0x114>
 800679e:	e031      	b.n	8006804 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d113      	bne.n	80067d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	b292      	uxth	r2, r2
 80067ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	1c9a      	adds	r2, r3, #2
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067d4:	e011      	b.n	80067fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d6:	f7fc fe47 	bl	8003468 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d803      	bhi.n	80067ee <HAL_SPI_Receive+0x1cc>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d102      	bne.n	80067f4 <HAL_SPI_Receive+0x1d2>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d102      	bne.n	80067fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067f8:	e017      	b.n	800682a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1cd      	bne.n	80067a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 fa45 	bl	8006c98 <SPI_EndRxTransaction>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
 8006826:	e000      	b.n	800682a <HAL_SPI_Receive+0x208>
  }

error :
 8006828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08c      	sub	sp, #48	; 0x30
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006852:	2301      	movs	r3, #1
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_SPI_TransmitReceive+0x26>
 8006866:	2302      	movs	r3, #2
 8006868:	e18a      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x33c>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006872:	f7fc fdf9 	bl	8003468 <HAL_GetTick>
 8006876:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800688c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006890:	2b01      	cmp	r3, #1
 8006892:	d00f      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0x70>
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800689a:	d107      	bne.n	80068ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <HAL_SPI_TransmitReceive+0x68>
 80068a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d003      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068b2:	e15b      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_SPI_TransmitReceive+0x82>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <HAL_SPI_TransmitReceive+0x82>
 80068c0:	887b      	ldrh	r3, [r7, #2]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068cc:	e14e      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d003      	beq.n	80068e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2205      	movs	r2, #5
 80068de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	887a      	ldrh	r2, [r7, #2]
 80068f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	887a      	ldrh	r2, [r7, #2]
 80068f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	887a      	ldrh	r2, [r7, #2]
 8006904:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	887a      	ldrh	r2, [r7, #2]
 800690a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006922:	2b40      	cmp	r3, #64	; 0x40
 8006924:	d007      	beq.n	8006936 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006934:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800693e:	d178      	bne.n	8006a32 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_SPI_TransmitReceive+0x10a>
 8006948:	8b7b      	ldrh	r3, [r7, #26]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d166      	bne.n	8006a1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	881a      	ldrh	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	1c9a      	adds	r2, r3, #2
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006972:	e053      	b.n	8006a1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b02      	cmp	r3, #2
 8006980:	d11b      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x176>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d016      	beq.n	80069ba <HAL_SPI_TransmitReceive+0x176>
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	2b01      	cmp	r3, #1
 8006990:	d113      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	881a      	ldrh	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	1c9a      	adds	r2, r3, #2
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d119      	bne.n	80069fc <HAL_SPI_TransmitReceive+0x1b8>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d014      	beq.n	80069fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	b292      	uxth	r2, r2
 80069de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069f8:	2301      	movs	r3, #1
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069fc:	f7fc fd34 	bl	8003468 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d807      	bhi.n	8006a1c <HAL_SPI_TransmitReceive+0x1d8>
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d003      	beq.n	8006a1c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a1a:	e0a7      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1a6      	bne.n	8006974 <HAL_SPI_TransmitReceive+0x130>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1a1      	bne.n	8006974 <HAL_SPI_TransmitReceive+0x130>
 8006a30:	e07c      	b.n	8006b2c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <HAL_SPI_TransmitReceive+0x1fc>
 8006a3a:	8b7b      	ldrh	r3, [r7, #26]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d16b      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a66:	e057      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d11c      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x26c>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d017      	beq.n	8006ab0 <HAL_SPI_TransmitReceive+0x26c>
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d114      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d119      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x2ae>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d014      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aee:	2301      	movs	r3, #1
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006af2:	f7fc fcb9 	bl	8003468 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d803      	bhi.n	8006b0a <HAL_SPI_TransmitReceive+0x2c6>
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b08:	d102      	bne.n	8006b10 <HAL_SPI_TransmitReceive+0x2cc>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b16:	e029      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1a2      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x224>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d19d      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f917 	bl	8006d64 <SPI_EndRxTxTransaction>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b48:	e010      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	e000      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3730      	adds	r7, #48	; 0x30
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b98:	f7fc fc66 	bl	8003468 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ba8:	f7fc fc5e 	bl	8003468 <HAL_GetTick>
 8006bac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bae:	4b39      	ldr	r3, [pc, #228]	; (8006c94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	015b      	lsls	r3, r3, #5
 8006bb4:	0d1b      	lsrs	r3, r3, #20
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	fb02 f303 	mul.w	r3, r2, r3
 8006bbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bbe:	e054      	b.n	8006c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc6:	d050      	beq.n	8006c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bc8:	f7fc fc4e 	bl	8003468 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d902      	bls.n	8006bde <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d13d      	bne.n	8006c5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf6:	d111      	bne.n	8006c1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c00:	d004      	beq.n	8006c0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c0a:	d107      	bne.n	8006c1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c24:	d10f      	bne.n	8006c46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e017      	b.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4013      	ands	r3, r2
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	bf0c      	ite	eq
 8006c7a:	2301      	moveq	r3, #1
 8006c7c:	2300      	movne	r3, #0
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d19b      	bne.n	8006bc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000004 	.word	0x20000004

08006c98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cac:	d111      	bne.n	8006cd2 <SPI_EndRxTransaction+0x3a>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb6:	d004      	beq.n	8006cc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc0:	d107      	bne.n	8006cd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cda:	d12a      	bne.n	8006d32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce4:	d012      	beq.n	8006d0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff ff49 	bl	8006b88 <SPI_WaitFlagStateUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d02d      	beq.n	8006d58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e026      	b.n	8006d5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2200      	movs	r2, #0
 8006d14:	2101      	movs	r1, #1
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff ff36 	bl	8006b88 <SPI_WaitFlagStateUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01a      	beq.n	8006d58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	f043 0220 	orr.w	r2, r3, #32
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e013      	b.n	8006d5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7ff ff23 	bl	8006b88 <SPI_WaitFlagStateUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e000      	b.n	8006d5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d70:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <SPI_EndRxTxTransaction+0x7c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <SPI_EndRxTxTransaction+0x80>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	0d5b      	lsrs	r3, r3, #21
 8006d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8e:	d112      	bne.n	8006db6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2180      	movs	r1, #128	; 0x80
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f7ff fef4 	bl	8006b88 <SPI_WaitFlagStateUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d016      	beq.n	8006dd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006daa:	f043 0220 	orr.w	r2, r3, #32
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e00f      	b.n	8006dd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dcc:	2b80      	cmp	r3, #128	; 0x80
 8006dce:	d0f2      	beq.n	8006db6 <SPI_EndRxTxTransaction+0x52>
 8006dd0:	e000      	b.n	8006dd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006dd2:	bf00      	nop
  }

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000004 	.word	0x20000004
 8006de4:	165e9f81 	.word	0x165e9f81

08006de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e041      	b.n	8006e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f839 	bl	8006e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	f000 f9ca 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
	...

08006e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d001      	beq.n	8006eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e044      	b.n	8006f3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <HAL_TIM_Base_Start_IT+0xb0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d018      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d013      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1a      	ldr	r2, [pc, #104]	; (8006f50 <HAL_TIM_Base_Start_IT+0xb4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <HAL_TIM_Base_Start_IT+0xb8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <HAL_TIM_Base_Start_IT+0xbc>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a16      	ldr	r2, [pc, #88]	; (8006f5c <HAL_TIM_Base_Start_IT+0xc0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d111      	bne.n	8006f2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d010      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0201 	orr.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2a:	e007      	b.n	8006f3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40000400 	.word	0x40000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	40000c00 	.word	0x40000c00
 8006f5c:	40014000 	.word	0x40014000

08006f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d122      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d11b      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0202 	mvn.w	r2, #2
 8006f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f8ee 	bl	8007184 <HAL_TIM_IC_CaptureCallback>
 8006fa8:	e005      	b.n	8006fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f8e0 	bl	8007170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f8f1 	bl	8007198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d122      	bne.n	8007010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d11b      	bne.n	8007010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0204 	mvn.w	r2, #4
 8006fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f8c4 	bl	8007184 <HAL_TIM_IC_CaptureCallback>
 8006ffc:	e005      	b.n	800700a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8b6 	bl	8007170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8c7 	bl	8007198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b08      	cmp	r3, #8
 800701c:	d122      	bne.n	8007064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d11b      	bne.n	8007064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0208 	mvn.w	r2, #8
 8007034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2204      	movs	r2, #4
 800703a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f89a 	bl	8007184 <HAL_TIM_IC_CaptureCallback>
 8007050:	e005      	b.n	800705e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f88c 	bl	8007170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f89d 	bl	8007198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0310 	and.w	r3, r3, #16
 800706e:	2b10      	cmp	r3, #16
 8007070:	d122      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b10      	cmp	r3, #16
 800707e:	d11b      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0210 	mvn.w	r2, #16
 8007088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2208      	movs	r2, #8
 800708e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f870 	bl	8007184 <HAL_TIM_IC_CaptureCallback>
 80070a4:	e005      	b.n	80070b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f862 	bl	8007170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f873 	bl	8007198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d10e      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d107      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0201 	mvn.w	r2, #1
 80070dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fb fcd6 	bl	8002a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ee:	2b80      	cmp	r3, #128	; 0x80
 80070f0:	d10e      	bne.n	8007110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b80      	cmp	r3, #128	; 0x80
 80070fe:	d107      	bne.n	8007110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8e2 	bl	80072d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d10e      	bne.n	800713c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d107      	bne.n	800713c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f838 	bl	80071ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b20      	cmp	r3, #32
 8007148:	d10e      	bne.n	8007168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b20      	cmp	r3, #32
 8007156:	d107      	bne.n	8007168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0220 	mvn.w	r2, #32
 8007160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f8ac 	bl	80072c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a34      	ldr	r2, [pc, #208]	; (80072a4 <TIM_Base_SetConfig+0xe4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00f      	beq.n	80071f8 <TIM_Base_SetConfig+0x38>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d00b      	beq.n	80071f8 <TIM_Base_SetConfig+0x38>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a31      	ldr	r2, [pc, #196]	; (80072a8 <TIM_Base_SetConfig+0xe8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_Base_SetConfig+0x38>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a30      	ldr	r2, [pc, #192]	; (80072ac <TIM_Base_SetConfig+0xec>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_Base_SetConfig+0x38>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a2f      	ldr	r2, [pc, #188]	; (80072b0 <TIM_Base_SetConfig+0xf0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d108      	bne.n	800720a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <TIM_Base_SetConfig+0xe4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01b      	beq.n	800724a <TIM_Base_SetConfig+0x8a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007218:	d017      	beq.n	800724a <TIM_Base_SetConfig+0x8a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a22      	ldr	r2, [pc, #136]	; (80072a8 <TIM_Base_SetConfig+0xe8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <TIM_Base_SetConfig+0x8a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a21      	ldr	r2, [pc, #132]	; (80072ac <TIM_Base_SetConfig+0xec>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00f      	beq.n	800724a <TIM_Base_SetConfig+0x8a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a20      	ldr	r2, [pc, #128]	; (80072b0 <TIM_Base_SetConfig+0xf0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00b      	beq.n	800724a <TIM_Base_SetConfig+0x8a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <TIM_Base_SetConfig+0xf4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d007      	beq.n	800724a <TIM_Base_SetConfig+0x8a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1e      	ldr	r2, [pc, #120]	; (80072b8 <TIM_Base_SetConfig+0xf8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <TIM_Base_SetConfig+0x8a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <TIM_Base_SetConfig+0xfc>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d108      	bne.n	800725c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <TIM_Base_SetConfig+0xe4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d103      	bne.n	8007290 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	691a      	ldr	r2, [r3, #16]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	615a      	str	r2, [r3, #20]
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400
 80072bc:	40014800 	.word	0x40014800

080072c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e03f      	b.n	800737a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fb fe24 	bl	8002f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2224      	movs	r2, #36	; 0x24
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800732a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fd7f 	bl	8007e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695a      	ldr	r2, [r3, #20]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b08a      	sub	sp, #40	; 0x28
 8007386:	af02      	add	r7, sp, #8
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d17c      	bne.n	800749c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_UART_Transmit+0x2c>
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e075      	b.n	800749e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_UART_Transmit+0x3e>
 80073bc:	2302      	movs	r3, #2
 80073be:	e06e      	b.n	800749e <HAL_UART_Transmit+0x11c>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2221      	movs	r2, #33	; 0x21
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073d6:	f7fc f847 	bl	8003468 <HAL_GetTick>
 80073da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f0:	d108      	bne.n	8007404 <HAL_UART_Transmit+0x82>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d104      	bne.n	8007404 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	e003      	b.n	800740c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007408:	2300      	movs	r3, #0
 800740a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007414:	e02a      	b.n	800746c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2200      	movs	r2, #0
 800741e:	2180      	movs	r1, #128	; 0x80
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 fb01 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e036      	b.n	800749e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10b      	bne.n	800744e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	3302      	adds	r3, #2
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e007      	b.n	800745e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3301      	adds	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1cf      	bne.n	8007416 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2200      	movs	r2, #0
 800747e:	2140      	movs	r1, #64	; 0x40
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fad1 	bl	8007a28 <UART_WaitOnFlagUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e006      	b.n	800749e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	e000      	b.n	800749e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800749c:	2302      	movs	r3, #2
  }
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	4613      	mov	r3, r2
 80074b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d11d      	bne.n	80074fc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <HAL_UART_Receive_DMA+0x26>
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e016      	b.n	80074fe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_UART_Receive_DMA+0x38>
 80074da:	2302      	movs	r3, #2
 80074dc:	e00f      	b.n	80074fe <HAL_UART_Receive_DMA+0x58>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	461a      	mov	r2, r3
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fae2 	bl	8007abc <UART_Start_Receive_DMA>
 80074f8:	4603      	mov	r3, r0
 80074fa:	e000      	b.n	80074fe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80074fc:	2302      	movs	r3, #2
  }
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007528:	2300      	movs	r3, #0
 800752a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10d      	bne.n	800755a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <HAL_UART_IRQHandler+0x52>
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fbd5 	bl	8007d02 <UART_Receive_IT>
      return;
 8007558:	e17c      	b.n	8007854 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80b1 	beq.w	80076c4 <HAL_UART_IRQHandler+0x1bc>
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d105      	bne.n	8007578 <HAL_UART_IRQHandler+0x70>
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 80a6 	beq.w	80076c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_UART_IRQHandler+0x90>
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	f043 0201 	orr.w	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_UART_IRQHandler+0xb0>
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	f043 0202 	orr.w	r2, r3, #2
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <HAL_UART_IRQHandler+0xd0>
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	f043 0204 	orr.w	r2, r3, #4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00f      	beq.n	8007602 <HAL_UART_IRQHandler+0xfa>
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <HAL_UART_IRQHandler+0xee>
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f043 0208 	orr.w	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 811f 	beq.w	800784a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <HAL_UART_IRQHandler+0x11e>
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fb6e 	bl	8007d02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <HAL_UART_IRQHandler+0x146>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d031      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 faae 	bl	8007bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d123      	bne.n	80076aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007670:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	2b00      	cmp	r3, #0
 8007678:	d013      	beq.n	80076a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	4a77      	ldr	r2, [pc, #476]	; (800785c <HAL_UART_IRQHandler+0x354>)
 8007680:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	4618      	mov	r0, r3
 8007688:	f7fc fd5e 	bl	8004148 <HAL_DMA_Abort_IT>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d016      	beq.n	80076c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a0:	e00e      	b.n	80076c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f8fa 	bl	800789c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a8:	e00a      	b.n	80076c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f8f6 	bl	800789c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b0:	e006      	b.n	80076c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f8f2 	bl	800789c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076be:	e0c4      	b.n	800784a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c0:	bf00      	nop
    return;
 80076c2:	e0c2      	b.n	800784a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	f040 80a2 	bne.w	8007812 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 809c 	beq.w	8007812 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8096 	beq.w	8007812 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007706:	2b40      	cmp	r3, #64	; 0x40
 8007708:	d14f      	bne.n	80077aa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007714:	8a3b      	ldrh	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8099 	beq.w	800784e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007720:	8a3a      	ldrh	r2, [r7, #16]
 8007722:	429a      	cmp	r2, r3
 8007724:	f080 8093 	bcs.w	800784e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8a3a      	ldrh	r2, [r7, #16]
 800772c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007738:	d02b      	beq.n	8007792 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007748:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695a      	ldr	r2, [r3, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007768:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0210 	bic.w	r2, r2, #16
 8007786:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	4618      	mov	r0, r3
 800778e:	f7fc fc6b 	bl	8004068 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800779a:	b29b      	uxth	r3, r3
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	b29b      	uxth	r3, r3
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f884 	bl	80078b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80077a8:	e051      	b.n	800784e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d047      	beq.n	8007852 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80077c2:	8a7b      	ldrh	r3, [r7, #18]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d044      	beq.n	8007852 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077d6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	695a      	ldr	r2, [r3, #20]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0201 	bic.w	r2, r2, #1
 80077e6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0210 	bic.w	r2, r2, #16
 8007804:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007806:	8a7b      	ldrh	r3, [r7, #18]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f850 	bl	80078b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007810:	e01f      	b.n	8007852 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007818:	2b00      	cmp	r3, #0
 800781a:	d008      	beq.n	800782e <HAL_UART_IRQHandler+0x326>
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa03 	bl	8007c32 <UART_Transmit_IT>
    return;
 800782c:	e012      	b.n	8007854 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00d      	beq.n	8007854 <HAL_UART_IRQHandler+0x34c>
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa45 	bl	8007cd2 <UART_EndTransmit_IT>
    return;
 8007848:	e004      	b.n	8007854 <HAL_UART_IRQHandler+0x34c>
    return;
 800784a:	bf00      	nop
 800784c:	e002      	b.n	8007854 <HAL_UART_IRQHandler+0x34c>
      return;
 800784e:	bf00      	nop
 8007850:	e000      	b.n	8007854 <HAL_UART_IRQHandler+0x34c>
      return;
 8007852:	bf00      	nop
  }
}
 8007854:	3728      	adds	r7, #40	; 0x28
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	08007c0b 	.word	0x08007c0b

08007860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d12a      	bne.n	800793a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	695a      	ldr	r2, [r3, #20]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007918:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	2b01      	cmp	r3, #1
 8007928:	d107      	bne.n	800793a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0210 	bic.w	r2, r2, #16
 8007938:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	2b01      	cmp	r3, #1
 8007940:	d106      	bne.n	8007950 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007946:	4619      	mov	r1, r3
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff ffb1 	bl	80078b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800794e:	e002      	b.n	8007956 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff ff8f 	bl	8007874 <HAL_UART_RxCpltCallback>
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	2b01      	cmp	r3, #1
 8007972:	d108      	bne.n	8007986 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	b29b      	uxth	r3, r3
 800797c:	4619      	mov	r1, r3
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff ff96 	bl	80078b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007984:	e002      	b.n	800798c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff ff7e 	bl	8007888 <HAL_UART_RxHalfCpltCallback>
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b0:	2b80      	cmp	r3, #128	; 0x80
 80079b2:	bf0c      	ite	eq
 80079b4:	2301      	moveq	r3, #1
 80079b6:	2300      	movne	r3, #0
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b21      	cmp	r3, #33	; 0x21
 80079c6:	d108      	bne.n	80079da <UART_DMAError+0x46>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2200      	movs	r2, #0
 80079d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80079d4:	68b8      	ldr	r0, [r7, #8]
 80079d6:	f000 f8d5 	bl	8007b84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	bf0c      	ite	eq
 80079e8:	2301      	moveq	r3, #1
 80079ea:	2300      	movne	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b22      	cmp	r3, #34	; 0x22
 80079fa:	d108      	bne.n	8007a0e <UART_DMAError+0x7a>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2200      	movs	r2, #0
 8007a06:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a08:	68b8      	ldr	r0, [r7, #8]
 8007a0a:	f000 f8d1 	bl	8007bb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	f043 0210 	orr.w	r2, r3, #16
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a1a:	68b8      	ldr	r0, [r7, #8]
 8007a1c:	f7ff ff3e 	bl	800789c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a38:	e02c      	b.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a40:	d028      	beq.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a48:	f7fb fd0e 	bl	8003468 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d21d      	bcs.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	695a      	ldr	r2, [r3, #20]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0201 	bic.w	r2, r2, #1
 8007a76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e00f      	b.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	bf0c      	ite	eq
 8007aa4:	2301      	moveq	r3, #1
 8007aa6:	2300      	movne	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d0c3      	beq.n	8007a3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2222      	movs	r2, #34	; 0x22
 8007ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae8:	4a23      	ldr	r2, [pc, #140]	; (8007b78 <UART_Start_Receive_DMA+0xbc>)
 8007aea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	4a22      	ldr	r2, [pc, #136]	; (8007b7c <UART_Start_Receive_DMA+0xc0>)
 8007af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <UART_Start_Receive_DMA+0xc4>)
 8007afa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	2200      	movs	r2, #0
 8007b02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007b04:	f107 0308 	add.w	r3, r7, #8
 8007b08:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4619      	mov	r1, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	f7fc fa4c 	bl	8003fb8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b20:	2300      	movs	r3, #0
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b4c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695a      	ldr	r2, [r3, #20]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695a      	ldr	r2, [r3, #20]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b6c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	080078c9 	.word	0x080078c9
 8007b7c:	0800795f 	.word	0x0800795f
 8007b80:	08007995 	.word	0x08007995

08007b84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b9a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695a      	ldr	r2, [r3, #20]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d107      	bne.n	8007bf0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0210 	bic.w	r2, r2, #16
 8007bee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fe39 	bl	800789c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b085      	sub	sp, #20
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b21      	cmp	r3, #33	; 0x21
 8007c44:	d13e      	bne.n	8007cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4e:	d114      	bne.n	8007c7a <UART_Transmit_IT+0x48>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d110      	bne.n	8007c7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	1c9a      	adds	r2, r3, #2
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	621a      	str	r2, [r3, #32]
 8007c78:	e008      	b.n	8007c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	1c59      	adds	r1, r3, #1
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6211      	str	r1, [r2, #32]
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10f      	bne.n	8007cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e000      	b.n	8007cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cc4:	2302      	movs	r3, #2
  }
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ce8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff fdb4 	bl	8007860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b22      	cmp	r3, #34	; 0x22
 8007d14:	f040 8087 	bne.w	8007e26 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d20:	d117      	bne.n	8007d52 <UART_Receive_IT+0x50>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d113      	bne.n	8007d52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4a:	1c9a      	adds	r2, r3, #2
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8007d50:	e026      	b.n	8007da0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d64:	d007      	beq.n	8007d76 <UART_Receive_IT+0x74>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <UART_Receive_IT+0x82>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	e008      	b.n	8007d96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	4619      	mov	r1, r3
 8007dae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d136      	bne.n	8007e22 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0220 	bic.w	r2, r2, #32
 8007dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	695a      	ldr	r2, [r3, #20]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0201 	bic.w	r2, r2, #1
 8007de2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d10e      	bne.n	8007e12 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0210 	bic.w	r2, r2, #16
 8007e02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff fd50 	bl	80078b0 <HAL_UARTEx_RxEventCallback>
 8007e10:	e002      	b.n	8007e18 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff fd2e 	bl	8007874 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e002      	b.n	8007e28 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e000      	b.n	8007e28 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007e26:	2302      	movs	r3, #2
  }
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	b09f      	sub	sp, #124	; 0x7c
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	68d9      	ldr	r1, [r3, #12]
 8007e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	ea40 0301 	orr.w	r3, r0, r1
 8007e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	431a      	orrs	r2, r3
 8007e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e74:	f021 010c 	bic.w	r1, r1, #12
 8007e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8e:	6999      	ldr	r1, [r3, #24]
 8007e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	ea40 0301 	orr.w	r3, r0, r1
 8007e98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4bc5      	ldr	r3, [pc, #788]	; (80081b4 <UART_SetConfig+0x384>)
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d004      	beq.n	8007eae <UART_SetConfig+0x7e>
 8007ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	4bc3      	ldr	r3, [pc, #780]	; (80081b8 <UART_SetConfig+0x388>)
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d103      	bne.n	8007eb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eae:	f7fe f9ad 	bl	800620c <HAL_RCC_GetPCLK2Freq>
 8007eb2:	6778      	str	r0, [r7, #116]	; 0x74
 8007eb4:	e002      	b.n	8007ebc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eb6:	f7fe f995 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 8007eba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec4:	f040 80b6 	bne.w	8008034 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eca:	461c      	mov	r4, r3
 8007ecc:	f04f 0500 	mov.w	r5, #0
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	1891      	adds	r1, r2, r2
 8007ed6:	6439      	str	r1, [r7, #64]	; 0x40
 8007ed8:	415b      	adcs	r3, r3
 8007eda:	647b      	str	r3, [r7, #68]	; 0x44
 8007edc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ee0:	1912      	adds	r2, r2, r4
 8007ee2:	eb45 0303 	adc.w	r3, r5, r3
 8007ee6:	f04f 0000 	mov.w	r0, #0
 8007eea:	f04f 0100 	mov.w	r1, #0
 8007eee:	00d9      	lsls	r1, r3, #3
 8007ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ef4:	00d0      	lsls	r0, r2, #3
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	1911      	adds	r1, r2, r4
 8007efc:	6639      	str	r1, [r7, #96]	; 0x60
 8007efe:	416b      	adcs	r3, r5
 8007f00:	667b      	str	r3, [r7, #100]	; 0x64
 8007f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	1891      	adds	r1, r2, r2
 8007f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f10:	415b      	adcs	r3, r3
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007f1c:	f7f8 febc 	bl	8000c98 <__aeabi_uldivmod>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4ba5      	ldr	r3, [pc, #660]	; (80081bc <UART_SetConfig+0x38c>)
 8007f26:	fba3 2302 	umull	r2, r3, r3, r2
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	011e      	lsls	r6, r3, #4
 8007f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f30:	461c      	mov	r4, r3
 8007f32:	f04f 0500 	mov.w	r5, #0
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	1891      	adds	r1, r2, r2
 8007f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8007f3e:	415b      	adcs	r3, r3
 8007f40:	637b      	str	r3, [r7, #52]	; 0x34
 8007f42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f46:	1912      	adds	r2, r2, r4
 8007f48:	eb45 0303 	adc.w	r3, r5, r3
 8007f4c:	f04f 0000 	mov.w	r0, #0
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	00d9      	lsls	r1, r3, #3
 8007f56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f5a:	00d0      	lsls	r0, r2, #3
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	1911      	adds	r1, r2, r4
 8007f62:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f64:	416b      	adcs	r3, r5
 8007f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	1891      	adds	r1, r2, r2
 8007f74:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f76:	415b      	adcs	r3, r3
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f82:	f7f8 fe89 	bl	8000c98 <__aeabi_uldivmod>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4b8c      	ldr	r3, [pc, #560]	; (80081bc <UART_SetConfig+0x38c>)
 8007f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	2164      	movs	r1, #100	; 0x64
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	3332      	adds	r3, #50	; 0x32
 8007f9e:	4a87      	ldr	r2, [pc, #540]	; (80081bc <UART_SetConfig+0x38c>)
 8007fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa4:	095b      	lsrs	r3, r3, #5
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fac:	441e      	add	r6, r3
 8007fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f04f 0100 	mov.w	r1, #0
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	1894      	adds	r4, r2, r2
 8007fbc:	623c      	str	r4, [r7, #32]
 8007fbe:	415b      	adcs	r3, r3
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fc6:	1812      	adds	r2, r2, r0
 8007fc8:	eb41 0303 	adc.w	r3, r1, r3
 8007fcc:	f04f 0400 	mov.w	r4, #0
 8007fd0:	f04f 0500 	mov.w	r5, #0
 8007fd4:	00dd      	lsls	r5, r3, #3
 8007fd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fda:	00d4      	lsls	r4, r2, #3
 8007fdc:	4622      	mov	r2, r4
 8007fde:	462b      	mov	r3, r5
 8007fe0:	1814      	adds	r4, r2, r0
 8007fe2:	653c      	str	r4, [r7, #80]	; 0x50
 8007fe4:	414b      	adcs	r3, r1
 8007fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8007fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	461a      	mov	r2, r3
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	1891      	adds	r1, r2, r2
 8007ff4:	61b9      	str	r1, [r7, #24]
 8007ff6:	415b      	adcs	r3, r3
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ffe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008002:	f7f8 fe49 	bl	8000c98 <__aeabi_uldivmod>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4b6c      	ldr	r3, [pc, #432]	; (80081bc <UART_SetConfig+0x38c>)
 800800c:	fba3 1302 	umull	r1, r3, r3, r2
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	2164      	movs	r1, #100	; 0x64
 8008014:	fb01 f303 	mul.w	r3, r1, r3
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	3332      	adds	r3, #50	; 0x32
 800801e:	4a67      	ldr	r2, [pc, #412]	; (80081bc <UART_SetConfig+0x38c>)
 8008020:	fba2 2303 	umull	r2, r3, r2, r3
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	f003 0207 	and.w	r2, r3, #7
 800802a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4432      	add	r2, r6
 8008030:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008032:	e0b9      	b.n	80081a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008036:	461c      	mov	r4, r3
 8008038:	f04f 0500 	mov.w	r5, #0
 800803c:	4622      	mov	r2, r4
 800803e:	462b      	mov	r3, r5
 8008040:	1891      	adds	r1, r2, r2
 8008042:	6139      	str	r1, [r7, #16]
 8008044:	415b      	adcs	r3, r3
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800804c:	1912      	adds	r2, r2, r4
 800804e:	eb45 0303 	adc.w	r3, r5, r3
 8008052:	f04f 0000 	mov.w	r0, #0
 8008056:	f04f 0100 	mov.w	r1, #0
 800805a:	00d9      	lsls	r1, r3, #3
 800805c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008060:	00d0      	lsls	r0, r2, #3
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	eb12 0804 	adds.w	r8, r2, r4
 800806a:	eb43 0905 	adc.w	r9, r3, r5
 800806e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	f04f 0100 	mov.w	r1, #0
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	008b      	lsls	r3, r1, #2
 8008082:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008086:	0082      	lsls	r2, r0, #2
 8008088:	4640      	mov	r0, r8
 800808a:	4649      	mov	r1, r9
 800808c:	f7f8 fe04 	bl	8000c98 <__aeabi_uldivmod>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4b49      	ldr	r3, [pc, #292]	; (80081bc <UART_SetConfig+0x38c>)
 8008096:	fba3 2302 	umull	r2, r3, r3, r2
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	011e      	lsls	r6, r3, #4
 800809e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a0:	4618      	mov	r0, r3
 80080a2:	f04f 0100 	mov.w	r1, #0
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	1894      	adds	r4, r2, r2
 80080ac:	60bc      	str	r4, [r7, #8]
 80080ae:	415b      	adcs	r3, r3
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080b6:	1812      	adds	r2, r2, r0
 80080b8:	eb41 0303 	adc.w	r3, r1, r3
 80080bc:	f04f 0400 	mov.w	r4, #0
 80080c0:	f04f 0500 	mov.w	r5, #0
 80080c4:	00dd      	lsls	r5, r3, #3
 80080c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080ca:	00d4      	lsls	r4, r2, #3
 80080cc:	4622      	mov	r2, r4
 80080ce:	462b      	mov	r3, r5
 80080d0:	1814      	adds	r4, r2, r0
 80080d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80080d4:	414b      	adcs	r3, r1
 80080d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	f04f 0100 	mov.w	r1, #0
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	008b      	lsls	r3, r1, #2
 80080ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080f0:	0082      	lsls	r2, r0, #2
 80080f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80080f6:	f7f8 fdcf 	bl	8000c98 <__aeabi_uldivmod>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4b2f      	ldr	r3, [pc, #188]	; (80081bc <UART_SetConfig+0x38c>)
 8008100:	fba3 1302 	umull	r1, r3, r3, r2
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	2164      	movs	r1, #100	; 0x64
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	3332      	adds	r3, #50	; 0x32
 8008112:	4a2a      	ldr	r2, [pc, #168]	; (80081bc <UART_SetConfig+0x38c>)
 8008114:	fba2 2303 	umull	r2, r3, r2, r3
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800811e:	441e      	add	r6, r3
 8008120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008122:	4618      	mov	r0, r3
 8008124:	f04f 0100 	mov.w	r1, #0
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	1894      	adds	r4, r2, r2
 800812e:	603c      	str	r4, [r7, #0]
 8008130:	415b      	adcs	r3, r3
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008138:	1812      	adds	r2, r2, r0
 800813a:	eb41 0303 	adc.w	r3, r1, r3
 800813e:	f04f 0400 	mov.w	r4, #0
 8008142:	f04f 0500 	mov.w	r5, #0
 8008146:	00dd      	lsls	r5, r3, #3
 8008148:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800814c:	00d4      	lsls	r4, r2, #3
 800814e:	4622      	mov	r2, r4
 8008150:	462b      	mov	r3, r5
 8008152:	eb12 0a00 	adds.w	sl, r2, r0
 8008156:	eb43 0b01 	adc.w	fp, r3, r1
 800815a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	4618      	mov	r0, r3
 8008160:	f04f 0100 	mov.w	r1, #0
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	008b      	lsls	r3, r1, #2
 800816e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008172:	0082      	lsls	r2, r0, #2
 8008174:	4650      	mov	r0, sl
 8008176:	4659      	mov	r1, fp
 8008178:	f7f8 fd8e 	bl	8000c98 <__aeabi_uldivmod>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4b0e      	ldr	r3, [pc, #56]	; (80081bc <UART_SetConfig+0x38c>)
 8008182:	fba3 1302 	umull	r1, r3, r3, r2
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	2164      	movs	r1, #100	; 0x64
 800818a:	fb01 f303 	mul.w	r3, r1, r3
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	3332      	adds	r3, #50	; 0x32
 8008194:	4a09      	ldr	r2, [pc, #36]	; (80081bc <UART_SetConfig+0x38c>)
 8008196:	fba2 2303 	umull	r2, r3, r2, r3
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	f003 020f 	and.w	r2, r3, #15
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4432      	add	r2, r6
 80081a6:	609a      	str	r2, [r3, #8]
}
 80081a8:	bf00      	nop
 80081aa:	377c      	adds	r7, #124	; 0x7c
 80081ac:	46bd      	mov	sp, r7
 80081ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b2:	bf00      	nop
 80081b4:	40011000 	.word	0x40011000
 80081b8:	40011400 	.word	0x40011400
 80081bc:	51eb851f 	.word	0x51eb851f

080081c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80081c4:	4904      	ldr	r1, [pc, #16]	; (80081d8 <MX_FATFS_Init+0x18>)
 80081c6:	4805      	ldr	r0, [pc, #20]	; (80081dc <MX_FATFS_Init+0x1c>)
 80081c8:	f002 fd2e 	bl	800ac28 <FATFS_LinkDriver>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <MX_FATFS_Init+0x20>)
 80081d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081d4:	bf00      	nop
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	200056a0 	.word	0x200056a0
 80081dc:	20000010 	.word	0x20000010
 80081e0:	200056a4 	.word	0x200056a4

080081e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80081e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80081fe:	4b06      	ldr	r3, [pc, #24]	; (8008218 <USER_initialize+0x24>)
 8008200:	2201      	movs	r2, #1
 8008202:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <USER_initialize+0x24>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800820a:	4618      	mov	r0, r3
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	2000000d 	.word	0x2000000d

0800821c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008226:	4b06      	ldr	r3, [pc, #24]	; (8008240 <USER_status+0x24>)
 8008228:	2201      	movs	r2, #1
 800822a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800822c:	4b04      	ldr	r3, [pc, #16]	; (8008240 <USER_status+0x24>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	2000000d 	.word	0x2000000d

08008244 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008254:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
 800826e:	4603      	mov	r3, r0
 8008270:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008272:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	603a      	str	r2, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
 800828c:	460b      	mov	r3, r1
 800828e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
    return res;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	4a08      	ldr	r2, [pc, #32]	; (80082d4 <disk_status+0x30>)
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	79fa      	ldrb	r2, [r7, #7]
 80082bc:	4905      	ldr	r1, [pc, #20]	; (80082d4 <disk_status+0x30>)
 80082be:	440a      	add	r2, r1
 80082c0:	7a12      	ldrb	r2, [r2, #8]
 80082c2:	4610      	mov	r0, r2
 80082c4:	4798      	blx	r3
 80082c6:	4603      	mov	r3, r0
 80082c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000364 	.word	0x20000364

080082d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	4a0d      	ldr	r2, [pc, #52]	; (8008320 <disk_initialize+0x48>)
 80082ea:	5cd3      	ldrb	r3, [r2, r3]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d111      	bne.n	8008314 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	4a0b      	ldr	r2, [pc, #44]	; (8008320 <disk_initialize+0x48>)
 80082f4:	2101      	movs	r1, #1
 80082f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	4a09      	ldr	r2, [pc, #36]	; (8008320 <disk_initialize+0x48>)
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	79fa      	ldrb	r2, [r7, #7]
 8008306:	4906      	ldr	r1, [pc, #24]	; (8008320 <disk_initialize+0x48>)
 8008308:	440a      	add	r2, r1
 800830a:	7a12      	ldrb	r2, [r2, #8]
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000364 	.word	0x20000364

08008324 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	607a      	str	r2, [r7, #4]
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	4a0a      	ldr	r2, [pc, #40]	; (8008360 <disk_read+0x3c>)
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	689c      	ldr	r4, [r3, #8]
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	4a07      	ldr	r2, [pc, #28]	; (8008360 <disk_read+0x3c>)
 8008344:	4413      	add	r3, r2
 8008346:	7a18      	ldrb	r0, [r3, #8]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	47a0      	blx	r4
 8008350:	4603      	mov	r3, r0
 8008352:	75fb      	strb	r3, [r7, #23]
  return res;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
}
 8008356:	4618      	mov	r0, r3
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	bd90      	pop	{r4, r7, pc}
 800835e:	bf00      	nop
 8008360:	20000364 	.word	0x20000364

08008364 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	607a      	str	r2, [r7, #4]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	4a0a      	ldr	r2, [pc, #40]	; (80083a0 <disk_write+0x3c>)
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	68dc      	ldr	r4, [r3, #12]
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	4a07      	ldr	r2, [pc, #28]	; (80083a0 <disk_write+0x3c>)
 8008384:	4413      	add	r3, r2
 8008386:	7a18      	ldrb	r0, [r3, #8]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	68b9      	ldr	r1, [r7, #8]
 800838e:	47a0      	blx	r4
 8008390:	4603      	mov	r3, r0
 8008392:	75fb      	strb	r3, [r7, #23]
  return res;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
}
 8008396:	4618      	mov	r0, r3
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd90      	pop	{r4, r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000364 	.word	0x20000364

080083a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	603a      	str	r2, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
 80083b0:	460b      	mov	r3, r1
 80083b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <disk_ioctl+0x38>)
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	79fa      	ldrb	r2, [r7, #7]
 80083c2:	4906      	ldr	r1, [pc, #24]	; (80083dc <disk_ioctl+0x38>)
 80083c4:	440a      	add	r2, r1
 80083c6:	7a10      	ldrb	r0, [r2, #8]
 80083c8:	79b9      	ldrb	r1, [r7, #6]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4798      	blx	r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000364 	.word	0x20000364

080083e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3301      	adds	r3, #1
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	021b      	lsls	r3, r3, #8
 80083f4:	b21a      	sxth	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	b21b      	sxth	r3, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	b21b      	sxth	r3, r3
 8008400:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008402:	89fb      	ldrh	r3, [r7, #14]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3303      	adds	r3, #3
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	3202      	adds	r2, #2
 8008428:	7812      	ldrb	r2, [r2, #0]
 800842a:	4313      	orrs	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	3201      	adds	r2, #1
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	4313      	orrs	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	021b      	lsls	r3, r3, #8
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
	return rv;
 8008448:	68fb      	ldr	r3, [r7, #12]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	460b      	mov	r3, r1
 8008460:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	887a      	ldrh	r2, [r7, #2]
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	887b      	ldrh	r3, [r7, #2]
 8008470:	0a1b      	lsrs	r3, r3, #8
 8008472:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	607a      	str	r2, [r7, #4]
 800847a:	887a      	ldrh	r2, [r7, #2]
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	701a      	strb	r2, [r3, #0]
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	0a1b      	lsrs	r3, r3, #8
 80084a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	0a1b      	lsrs	r3, r3, #8
 80084b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	0a1b      	lsrs	r3, r3, #8
 80084ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	b2d2      	uxtb	r2, r2
 80084d6:	701a      	strb	r2, [r3, #0]
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00d      	beq.n	800851a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	1c53      	adds	r3, r2, #1
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	1c59      	adds	r1, r3, #1
 8008508:	6179      	str	r1, [r7, #20]
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3b01      	subs	r3, #1
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f1      	bne.n	80084fe <mem_cpy+0x1a>
	}
}
 800851a:	bf00      	nop
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008526:	b480      	push	{r7}
 8008528:	b087      	sub	sp, #28
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	617a      	str	r2, [r7, #20]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	607b      	str	r3, [r7, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1f3      	bne.n	8008536 <mem_set+0x10>
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800855c:	b480      	push	{r7}
 800855e:	b089      	sub	sp, #36	; 0x24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	61fb      	str	r3, [r7, #28]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	61fa      	str	r2, [r7, #28]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	4619      	mov	r1, r3
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	61ba      	str	r2, [r7, #24]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	1acb      	subs	r3, r1, r3
 8008588:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3b01      	subs	r3, #1
 800858e:	607b      	str	r3, [r7, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <mem_cmp+0x40>
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0eb      	beq.n	8008574 <mem_cmp+0x18>

	return r;
 800859c:	697b      	ldr	r3, [r7, #20]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3724      	adds	r7, #36	; 0x24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80085b4:	e002      	b.n	80085bc <chk_chr+0x12>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3301      	adds	r3, #1
 80085ba:	607b      	str	r3, [r7, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <chk_chr+0x26>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d1f2      	bne.n	80085b6 <chk_chr+0xc>
	return *str;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	781b      	ldrb	r3, [r3, #0]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <lock_fs+0x22>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f002 fb4e 	bl	800ac94 <ff_req_grant>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <lock_fs+0x22>
 80085fe:	2301      	movs	r3, #1
 8008600:	e000      	b.n	8008604 <lock_fs+0x24>
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00d      	beq.n	800863a <unlock_fs+0x2e>
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	2b0c      	cmp	r3, #12
 8008622:	d00a      	beq.n	800863a <unlock_fs+0x2e>
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	2b0b      	cmp	r3, #11
 8008628:	d007      	beq.n	800863a <unlock_fs+0x2e>
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	2b0f      	cmp	r3, #15
 800862e:	d004      	beq.n	800863a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	4618      	mov	r0, r3
 8008636:	f002 fb42 	bl	800acbe <ff_rel_grant>
	}
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800864e:	2300      	movs	r3, #0
 8008650:	60bb      	str	r3, [r7, #8]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	e029      	b.n	80086ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008658:	4a27      	ldr	r2, [pc, #156]	; (80086f8 <chk_lock+0xb4>)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	4413      	add	r3, r2
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d01d      	beq.n	80086a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008666:	4a24      	ldr	r2, [pc, #144]	; (80086f8 <chk_lock+0xb4>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	4413      	add	r3, r2
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d116      	bne.n	80086a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008678:	4a1f      	ldr	r2, [pc, #124]	; (80086f8 <chk_lock+0xb4>)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	4413      	add	r3, r2
 8008680:	3304      	adds	r3, #4
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008688:	429a      	cmp	r2, r3
 800868a:	d10c      	bne.n	80086a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800868c:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <chk_lock+0xb4>)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	4413      	add	r3, r2
 8008694:	3308      	adds	r3, #8
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800869c:	429a      	cmp	r2, r3
 800869e:	d102      	bne.n	80086a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086a0:	e007      	b.n	80086b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80086a2:	2301      	movs	r3, #1
 80086a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3301      	adds	r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d9d2      	bls.n	8008658 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d109      	bne.n	80086cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <chk_lock+0x80>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d101      	bne.n	80086c8 <chk_lock+0x84>
 80086c4:	2300      	movs	r3, #0
 80086c6:	e010      	b.n	80086ea <chk_lock+0xa6>
 80086c8:	2312      	movs	r3, #18
 80086ca:	e00e      	b.n	80086ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d108      	bne.n	80086e4 <chk_lock+0xa0>
 80086d2:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <chk_lock+0xb4>)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	4413      	add	r3, r2
 80086da:	330c      	adds	r3, #12
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e2:	d101      	bne.n	80086e8 <chk_lock+0xa4>
 80086e4:	2310      	movs	r3, #16
 80086e6:	e000      	b.n	80086ea <chk_lock+0xa6>
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20000344 	.word	0x20000344

080086fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008702:	2300      	movs	r3, #0
 8008704:	607b      	str	r3, [r7, #4]
 8008706:	e002      	b.n	800870e <enq_lock+0x12>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3301      	adds	r3, #1
 800870c:	607b      	str	r3, [r7, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d806      	bhi.n	8008722 <enq_lock+0x26>
 8008714:	4a09      	ldr	r2, [pc, #36]	; (800873c <enq_lock+0x40>)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	4413      	add	r3, r2
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1f2      	bne.n	8008708 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b02      	cmp	r3, #2
 8008726:	bf14      	ite	ne
 8008728:	2301      	movne	r3, #1
 800872a:	2300      	moveq	r3, #0
 800872c:	b2db      	uxtb	r3, r3
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000344 	.word	0x20000344

08008740 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	e01f      	b.n	8008790 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008750:	4a41      	ldr	r2, [pc, #260]	; (8008858 <inc_lock+0x118>)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	4413      	add	r3, r2
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d113      	bne.n	800878a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008762:	4a3d      	ldr	r2, [pc, #244]	; (8008858 <inc_lock+0x118>)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	011b      	lsls	r3, r3, #4
 8008768:	4413      	add	r3, r2
 800876a:	3304      	adds	r3, #4
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008772:	429a      	cmp	r2, r3
 8008774:	d109      	bne.n	800878a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008776:	4a38      	ldr	r2, [pc, #224]	; (8008858 <inc_lock+0x118>)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	4413      	add	r3, r2
 800877e:	3308      	adds	r3, #8
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008786:	429a      	cmp	r2, r3
 8008788:	d006      	beq.n	8008798 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d9dc      	bls.n	8008750 <inc_lock+0x10>
 8008796:	e000      	b.n	800879a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008798:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d132      	bne.n	8008806 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	e002      	b.n	80087ac <inc_lock+0x6c>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3301      	adds	r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d806      	bhi.n	80087c0 <inc_lock+0x80>
 80087b2:	4a29      	ldr	r2, [pc, #164]	; (8008858 <inc_lock+0x118>)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	4413      	add	r3, r2
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f2      	bne.n	80087a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d101      	bne.n	80087ca <inc_lock+0x8a>
 80087c6:	2300      	movs	r3, #0
 80087c8:	e040      	b.n	800884c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	4922      	ldr	r1, [pc, #136]	; (8008858 <inc_lock+0x118>)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	440b      	add	r3, r1
 80087d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	491e      	ldr	r1, [pc, #120]	; (8008858 <inc_lock+0x118>)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	440b      	add	r3, r1
 80087e4:	3304      	adds	r3, #4
 80087e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695a      	ldr	r2, [r3, #20]
 80087ec:	491a      	ldr	r1, [pc, #104]	; (8008858 <inc_lock+0x118>)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	440b      	add	r3, r1
 80087f4:	3308      	adds	r3, #8
 80087f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80087f8:	4a17      	ldr	r2, [pc, #92]	; (8008858 <inc_lock+0x118>)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	4413      	add	r3, r2
 8008800:	330c      	adds	r3, #12
 8008802:	2200      	movs	r2, #0
 8008804:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d009      	beq.n	8008820 <inc_lock+0xe0>
 800880c:	4a12      	ldr	r2, [pc, #72]	; (8008858 <inc_lock+0x118>)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	4413      	add	r3, r2
 8008814:	330c      	adds	r3, #12
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <inc_lock+0xe0>
 800881c:	2300      	movs	r3, #0
 800881e:	e015      	b.n	800884c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d108      	bne.n	8008838 <inc_lock+0xf8>
 8008826:	4a0c      	ldr	r2, [pc, #48]	; (8008858 <inc_lock+0x118>)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	011b      	lsls	r3, r3, #4
 800882c:	4413      	add	r3, r2
 800882e:	330c      	adds	r3, #12
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	b29a      	uxth	r2, r3
 8008836:	e001      	b.n	800883c <inc_lock+0xfc>
 8008838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800883c:	4906      	ldr	r1, [pc, #24]	; (8008858 <inc_lock+0x118>)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	440b      	add	r3, r1
 8008844:	330c      	adds	r3, #12
 8008846:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3301      	adds	r3, #1
}
 800884c:	4618      	mov	r0, r3
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	20000344 	.word	0x20000344

0800885c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3b01      	subs	r3, #1
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d825      	bhi.n	80088bc <dec_lock+0x60>
		n = Files[i].ctr;
 8008870:	4a17      	ldr	r2, [pc, #92]	; (80088d0 <dec_lock+0x74>)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	011b      	lsls	r3, r3, #4
 8008876:	4413      	add	r3, r2
 8008878:	330c      	adds	r3, #12
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800887e:	89fb      	ldrh	r3, [r7, #14]
 8008880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008884:	d101      	bne.n	800888a <dec_lock+0x2e>
 8008886:	2300      	movs	r3, #0
 8008888:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800888a:	89fb      	ldrh	r3, [r7, #14]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <dec_lock+0x3a>
 8008890:	89fb      	ldrh	r3, [r7, #14]
 8008892:	3b01      	subs	r3, #1
 8008894:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008896:	4a0e      	ldr	r2, [pc, #56]	; (80088d0 <dec_lock+0x74>)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	4413      	add	r3, r2
 800889e:	330c      	adds	r3, #12
 80088a0:	89fa      	ldrh	r2, [r7, #14]
 80088a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80088a4:	89fb      	ldrh	r3, [r7, #14]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d105      	bne.n	80088b6 <dec_lock+0x5a>
 80088aa:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <dec_lock+0x74>)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	4413      	add	r3, r2
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	737b      	strb	r3, [r7, #13]
 80088ba:	e001      	b.n	80088c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80088bc:	2302      	movs	r3, #2
 80088be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80088c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20000344 	.word	0x20000344

080088d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	e010      	b.n	8008904 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80088e2:	4a0d      	ldr	r2, [pc, #52]	; (8008918 <clear_lock+0x44>)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	4413      	add	r3, r2
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d105      	bne.n	80088fe <clear_lock+0x2a>
 80088f2:	4a09      	ldr	r2, [pc, #36]	; (8008918 <clear_lock+0x44>)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	4413      	add	r3, r2
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d9eb      	bls.n	80088e2 <clear_lock+0xe>
	}
}
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20000344 	.word	0x20000344

0800891c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	78db      	ldrb	r3, [r3, #3]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d034      	beq.n	800899a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7858      	ldrb	r0, [r3, #1]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008940:	2301      	movs	r3, #1
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	f7ff fd0e 	bl	8008364 <disk_write>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <sync_window+0x38>
			res = FR_DISK_ERR;
 800894e:	2301      	movs	r3, #1
 8008950:	73fb      	strb	r3, [r7, #15]
 8008952:	e022      	b.n	800899a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	1ad2      	subs	r2, r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	429a      	cmp	r2, r3
 8008968:	d217      	bcs.n	800899a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	789b      	ldrb	r3, [r3, #2]
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	e010      	b.n	8008994 <sync_window+0x78>
					wsect += fs->fsize;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4413      	add	r3, r2
 800897a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	7858      	ldrb	r0, [r3, #1]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008986:	2301      	movs	r3, #1
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	f7ff fceb 	bl	8008364 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	3b01      	subs	r3, #1
 8008992:	613b      	str	r3, [r7, #16]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d8eb      	bhi.n	8008972 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d01b      	beq.n	80089f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff ffad 	bl	800891c <sync_window>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d113      	bne.n	80089f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	7858      	ldrb	r0, [r3, #1]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80089d6:	2301      	movs	r3, #1
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	f7ff fca3 	bl	8008324 <disk_read>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80089e4:	f04f 33ff 	mov.w	r3, #4294967295
 80089e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ff87 	bl	800891c <sync_window>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d158      	bne.n	8008aca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d148      	bne.n	8008ab2 <sync_fs+0xb2>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	791b      	ldrb	r3, [r3, #4]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d144      	bne.n	8008ab2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3334      	adds	r3, #52	; 0x34
 8008a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a30:	2100      	movs	r1, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fd77 	bl	8008526 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3334      	adds	r3, #52	; 0x34
 8008a3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a40:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fd06 	bl	8008456 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3334      	adds	r3, #52	; 0x34
 8008a4e:	4921      	ldr	r1, [pc, #132]	; (8008ad4 <sync_fs+0xd4>)
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff fd1b 	bl	800848c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3334      	adds	r3, #52	; 0x34
 8008a5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a5e:	491e      	ldr	r1, [pc, #120]	; (8008ad8 <sync_fs+0xd8>)
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff fd13 	bl	800848c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3334      	adds	r3, #52	; 0x34
 8008a6a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f7ff fd09 	bl	800848c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3334      	adds	r3, #52	; 0x34
 8008a7e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	4619      	mov	r1, r3
 8008a88:	4610      	mov	r0, r2
 8008a8a:	f7ff fcff 	bl	800848c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	7858      	ldrb	r0, [r3, #1]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f7ff fc5c 	bl	8008364 <disk_write>
			fs->fsi_flag = 0;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff fc72 	bl	80083a4 <disk_ioctl>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <sync_fs+0xca>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	41615252 	.word	0x41615252
 8008ad8:	61417272 	.word	0x61417272

08008adc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	3b02      	subs	r3, #2
 8008aea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	3b02      	subs	r3, #2
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d301      	bcc.n	8008afc <clust2sect+0x20>
 8008af8:	2300      	movs	r3, #0
 8008afa:	e008      	b.n	8008b0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	895b      	ldrh	r3, [r3, #10]
 8008b00:	461a      	mov	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	fb03 f202 	mul.w	r2, r3, r2
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	4413      	add	r3, r2
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d904      	bls.n	8008b3a <get_fat+0x20>
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e08f      	b.n	8008c60 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008b40:	f04f 33ff 	mov.w	r3, #4294967295
 8008b44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d062      	beq.n	8008c14 <get_fat+0xfa>
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	dc7c      	bgt.n	8008c4c <get_fat+0x132>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d002      	beq.n	8008b5c <get_fat+0x42>
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d042      	beq.n	8008be0 <get_fat+0xc6>
 8008b5a:	e077      	b.n	8008c4c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	60fb      	str	r3, [r7, #12]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	085b      	lsrs	r3, r3, #1
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	0a5b      	lsrs	r3, r3, #9
 8008b72:	4413      	add	r3, r2
 8008b74:	4619      	mov	r1, r3
 8008b76:	6938      	ldr	r0, [r7, #16]
 8008b78:	f7ff ff14 	bl	80089a4 <move_window>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d167      	bne.n	8008c52 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	60fa      	str	r2, [r7, #12]
 8008b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	0a5b      	lsrs	r3, r3, #9
 8008b9e:	4413      	add	r3, r2
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6938      	ldr	r0, [r7, #16]
 8008ba4:	f7ff fefe 	bl	80089a4 <move_window>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d153      	bne.n	8008c56 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <get_fat+0xbc>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	091b      	lsrs	r3, r3, #4
 8008bd4:	e002      	b.n	8008bdc <get_fat+0xc2>
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bdc:	617b      	str	r3, [r7, #20]
			break;
 8008bde:	e03f      	b.n	8008c60 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	0a1b      	lsrs	r3, r3, #8
 8008be8:	4413      	add	r3, r2
 8008bea:	4619      	mov	r1, r3
 8008bec:	6938      	ldr	r0, [r7, #16]
 8008bee:	f7ff fed9 	bl	80089a4 <move_window>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d130      	bne.n	8008c5a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008c06:	4413      	add	r3, r2
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fbe9 	bl	80083e0 <ld_word>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	617b      	str	r3, [r7, #20]
			break;
 8008c12:	e025      	b.n	8008c60 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	09db      	lsrs	r3, r3, #7
 8008c1c:	4413      	add	r3, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6938      	ldr	r0, [r7, #16]
 8008c22:	f7ff febf 	bl	80089a4 <move_window>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d118      	bne.n	8008c5e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c3a:	4413      	add	r3, r2
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff fbe7 	bl	8008410 <ld_dword>
 8008c42:	4603      	mov	r3, r0
 8008c44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c48:	617b      	str	r3, [r7, #20]
			break;
 8008c4a:	e009      	b.n	8008c60 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	e006      	b.n	8008c60 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c52:	bf00      	nop
 8008c54:	e004      	b.n	8008c60 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c56:	bf00      	nop
 8008c58:	e002      	b.n	8008c60 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c5e:	bf00      	nop
		}
	}

	return val;
 8008c60:	697b      	ldr	r3, [r7, #20]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008c6a:	b590      	push	{r4, r7, lr}
 8008c6c:	b089      	sub	sp, #36	; 0x24
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008c76:	2302      	movs	r3, #2
 8008c78:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	f240 80d2 	bls.w	8008e26 <put_fat+0x1bc>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	f080 80cc 	bcs.w	8008e26 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	f000 8096 	beq.w	8008dc4 <put_fat+0x15a>
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	f300 80cd 	bgt.w	8008e38 <put_fat+0x1ce>
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d002      	beq.n	8008ca8 <put_fat+0x3e>
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d06e      	beq.n	8008d84 <put_fat+0x11a>
 8008ca6:	e0c7      	b.n	8008e38 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	085b      	lsrs	r3, r3, #1
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	0a5b      	lsrs	r3, r3, #9
 8008cbe:	4413      	add	r3, r2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff fe6e 	bl	80089a4 <move_window>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ccc:	7ffb      	ldrb	r3, [r7, #31]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 80ab 	bne.w	8008e2a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	1c59      	adds	r1, r3, #1
 8008cde:	61b9      	str	r1, [r7, #24]
 8008ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce4:	4413      	add	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00d      	beq.n	8008d0e <put_fat+0xa4>
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	b25b      	sxtb	r3, r3
 8008cf8:	f003 030f 	and.w	r3, r3, #15
 8008cfc:	b25a      	sxtb	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	4313      	orrs	r3, r2
 8008d08:	b25b      	sxtb	r3, r3
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	e001      	b.n	8008d12 <put_fat+0xa8>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	0a5b      	lsrs	r3, r3, #9
 8008d24:	4413      	add	r3, r2
 8008d26:	4619      	mov	r1, r3
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff fe3b 	bl	80089a4 <move_window>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d32:	7ffb      	ldrb	r3, [r7, #31]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d17a      	bne.n	8008e2e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d44:	4413      	add	r3, r2
 8008d46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <put_fat+0xf0>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	091b      	lsrs	r3, r3, #4
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	e00e      	b.n	8008d78 <put_fat+0x10e>
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b25b      	sxtb	r3, r3
 8008d60:	f023 030f 	bic.w	r3, r3, #15
 8008d64:	b25a      	sxtb	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	0a1b      	lsrs	r3, r3, #8
 8008d6a:	b25b      	sxtb	r3, r3
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	b25b      	sxtb	r3, r3
 8008d72:	4313      	orrs	r3, r2
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	70da      	strb	r2, [r3, #3]
			break;
 8008d82:	e059      	b.n	8008e38 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	0a1b      	lsrs	r3, r3, #8
 8008d8c:	4413      	add	r3, r2
 8008d8e:	4619      	mov	r1, r3
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff fe07 	bl	80089a4 <move_window>
 8008d96:	4603      	mov	r3, r0
 8008d98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d9a:	7ffb      	ldrb	r3, [r7, #31]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d148      	bne.n	8008e32 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008dae:	4413      	add	r3, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	b292      	uxth	r2, r2
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff fb4d 	bl	8008456 <st_word>
			fs->wflag = 1;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	70da      	strb	r2, [r3, #3]
			break;
 8008dc2:	e039      	b.n	8008e38 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	09db      	lsrs	r3, r3, #7
 8008dcc:	4413      	add	r3, r2
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fde7 	bl	80089a4 <move_window>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dda:	7ffb      	ldrb	r3, [r7, #31]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d12a      	bne.n	8008e36 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008df4:	4413      	add	r3, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fb0a 	bl	8008410 <ld_dword>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e02:	4323      	orrs	r3, r4
 8008e04:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008e14:	4413      	add	r3, r2
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff fb37 	bl	800848c <st_dword>
			fs->wflag = 1;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	70da      	strb	r2, [r3, #3]
			break;
 8008e24:	e008      	b.n	8008e38 <put_fat+0x1ce>
		}
	}
 8008e26:	bf00      	nop
 8008e28:	e006      	b.n	8008e38 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e2a:	bf00      	nop
 8008e2c:	e004      	b.n	8008e38 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e2e:	bf00      	nop
 8008e30:	e002      	b.n	8008e38 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e36:	bf00      	nop
	return res;
 8008e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3724      	adds	r7, #36	; 0x24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd90      	pop	{r4, r7, pc}

08008e42 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b088      	sub	sp, #32
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d904      	bls.n	8008e68 <remove_chain+0x26>
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d301      	bcc.n	8008e6c <remove_chain+0x2a>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e04b      	b.n	8008f04 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00c      	beq.n	8008e8c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	69b8      	ldr	r0, [r7, #24]
 8008e7a:	f7ff fef6 	bl	8008c6a <put_fat>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008e82:	7ffb      	ldrb	r3, [r7, #31]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <remove_chain+0x4a>
 8008e88:	7ffb      	ldrb	r3, [r7, #31]
 8008e8a:	e03b      	b.n	8008f04 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fe43 	bl	8008b1a <get_fat>
 8008e94:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d031      	beq.n	8008f00 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <remove_chain+0x64>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e02e      	b.n	8008f04 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eac:	d101      	bne.n	8008eb2 <remove_chain+0x70>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e028      	b.n	8008f04 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	69b8      	ldr	r0, [r7, #24]
 8008eb8:	f7ff fed7 	bl	8008c6a <put_fat>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ec0:	7ffb      	ldrb	r3, [r7, #31]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <remove_chain+0x88>
 8008ec6:	7ffb      	ldrb	r3, [r7, #31]
 8008ec8:	e01c      	b.n	8008f04 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	695a      	ldr	r2, [r3, #20]
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	3b02      	subs	r3, #2
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d20b      	bcs.n	8008ef0 <remove_chain+0xae>
			fs->free_clst++;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	791b      	ldrb	r3, [r3, #4]
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d3c6      	bcc.n	8008e8c <remove_chain+0x4a>
 8008efe:	e000      	b.n	8008f02 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008f00:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10d      	bne.n	8008f3e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <create_chain+0x2c>
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d31b      	bcc.n	8008f70 <create_chain+0x64>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	e018      	b.n	8008f70 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff fdea 	bl	8008b1a <get_fat>
 8008f46:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d801      	bhi.n	8008f52 <create_chain+0x46>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e070      	b.n	8009034 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f58:	d101      	bne.n	8008f5e <create_chain+0x52>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	e06a      	b.n	8009034 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d201      	bcs.n	8008f6c <create_chain+0x60>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	e063      	b.n	8009034 <create_chain+0x128>
		scl = clst;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	3301      	adds	r3, #1
 8008f78:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d307      	bcc.n	8008f94 <create_chain+0x88>
				ncl = 2;
 8008f84:	2302      	movs	r3, #2
 8008f86:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d901      	bls.n	8008f94 <create_chain+0x88>
 8008f90:	2300      	movs	r3, #0
 8008f92:	e04f      	b.n	8009034 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008f94:	69f9      	ldr	r1, [r7, #28]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff fdbf 	bl	8008b1a <get_fat>
 8008f9c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00e      	beq.n	8008fc2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d003      	beq.n	8008fb2 <create_chain+0xa6>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb0:	d101      	bne.n	8008fb6 <create_chain+0xaa>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	e03e      	b.n	8009034 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d1da      	bne.n	8008f74 <create_chain+0x68>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e038      	b.n	8009034 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008fc2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc8:	69f9      	ldr	r1, [r7, #28]
 8008fca:	6938      	ldr	r0, [r7, #16]
 8008fcc:	f7ff fe4d 	bl	8008c6a <put_fat>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d109      	bne.n	8008fee <create_chain+0xe2>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d006      	beq.n	8008fee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008fe0:	69fa      	ldr	r2, [r7, #28]
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6938      	ldr	r0, [r7, #16]
 8008fe6:	f7ff fe40 	bl	8008c6a <put_fat>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d116      	bne.n	8009022 <create_chain+0x116>
		fs->last_clst = ncl;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	695a      	ldr	r2, [r3, #20]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	3b02      	subs	r3, #2
 8009004:	429a      	cmp	r2, r3
 8009006:	d804      	bhi.n	8009012 <create_chain+0x106>
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	1e5a      	subs	r2, r3, #1
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	791b      	ldrb	r3, [r3, #4]
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	b2da      	uxtb	r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	711a      	strb	r2, [r3, #4]
 8009020:	e007      	b.n	8009032 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d102      	bne.n	800902e <create_chain+0x122>
 8009028:	f04f 33ff 	mov.w	r3, #4294967295
 800902c:	e000      	b.n	8009030 <create_chain+0x124>
 800902e:	2301      	movs	r3, #1
 8009030:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009032:	69fb      	ldr	r3, [r7, #28]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3720      	adds	r7, #32
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	3304      	adds	r3, #4
 8009052:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	0a5b      	lsrs	r3, r3, #9
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	8952      	ldrh	r2, [r2, #10]
 800905c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009060:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	1d1a      	adds	r2, r3, #4
 8009066:	613a      	str	r2, [r7, #16]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <clmt_clust+0x3a>
 8009072:	2300      	movs	r3, #0
 8009074:	e010      	b.n	8009098 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	429a      	cmp	r2, r3
 800907c:	d307      	bcc.n	800908e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	617b      	str	r3, [r7, #20]
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	3304      	adds	r3, #4
 800908a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800908c:	e7e9      	b.n	8009062 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800908e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	4413      	add	r3, r2
}
 8009098:	4618      	mov	r0, r3
 800909a:	371c      	adds	r7, #28
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090ba:	d204      	bcs.n	80090c6 <dir_sdi+0x22>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	f003 031f 	and.w	r3, r3, #31
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <dir_sdi+0x26>
		return FR_INT_ERR;
 80090c6:	2302      	movs	r3, #2
 80090c8:	e063      	b.n	8009192 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <dir_sdi+0x46>
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d902      	bls.n	80090ea <dir_sdi+0x46>
		clst = fs->dirbase;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10c      	bne.n	800910a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	8912      	ldrh	r2, [r2, #8]
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d301      	bcc.n	8009100 <dir_sdi+0x5c>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e048      	b.n	8009192 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	61da      	str	r2, [r3, #28]
 8009108:	e029      	b.n	800915e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	895b      	ldrh	r3, [r3, #10]
 800910e:	025b      	lsls	r3, r3, #9
 8009110:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009112:	e019      	b.n	8009148 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6979      	ldr	r1, [r7, #20]
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fcfe 	bl	8008b1a <get_fat>
 800911e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d101      	bne.n	800912c <dir_sdi+0x88>
 8009128:	2301      	movs	r3, #1
 800912a:	e032      	b.n	8009192 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d904      	bls.n	800913c <dir_sdi+0x98>
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	429a      	cmp	r2, r3
 800913a:	d301      	bcc.n	8009140 <dir_sdi+0x9c>
 800913c:	2302      	movs	r3, #2
 800913e:	e028      	b.n	8009192 <dir_sdi+0xee>
			ofs -= csz;
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	429a      	cmp	r2, r3
 800914e:	d2e1      	bcs.n	8009114 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009150:	6979      	ldr	r1, [r7, #20]
 8009152:	6938      	ldr	r0, [r7, #16]
 8009154:	f7ff fcc2 	bl	8008adc <clust2sect>
 8009158:	4602      	mov	r2, r0
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <dir_sdi+0xcc>
 800916c:	2302      	movs	r3, #2
 800916e:	e010      	b.n	8009192 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	69da      	ldr	r2, [r3, #28]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	0a5b      	lsrs	r3, r3, #9
 8009178:	441a      	add	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	441a      	add	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b086      	sub	sp, #24
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	3320      	adds	r3, #32
 80091b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <dir_next+0x28>
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091c0:	d301      	bcc.n	80091c6 <dir_next+0x2c>
 80091c2:	2304      	movs	r3, #4
 80091c4:	e0aa      	b.n	800931c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f040 8098 	bne.w	8009302 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10b      	bne.n	80091fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	095b      	lsrs	r3, r3, #5
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	8912      	ldrh	r2, [r2, #8]
 80091ec:	4293      	cmp	r3, r2
 80091ee:	f0c0 8088 	bcc.w	8009302 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	61da      	str	r2, [r3, #28]
 80091f8:	2304      	movs	r3, #4
 80091fa:	e08f      	b.n	800931c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	0a5b      	lsrs	r3, r3, #9
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	8952      	ldrh	r2, [r2, #10]
 8009204:	3a01      	subs	r2, #1
 8009206:	4013      	ands	r3, r2
 8009208:	2b00      	cmp	r3, #0
 800920a:	d17a      	bne.n	8009302 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7ff fc80 	bl	8008b1a <get_fat>
 800921a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d801      	bhi.n	8009226 <dir_next+0x8c>
 8009222:	2302      	movs	r3, #2
 8009224:	e07a      	b.n	800931c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922c:	d101      	bne.n	8009232 <dir_next+0x98>
 800922e:	2301      	movs	r3, #1
 8009230:	e074      	b.n	800931c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	429a      	cmp	r2, r3
 800923a:	d358      	bcc.n	80092ee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d104      	bne.n	800924c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	61da      	str	r2, [r3, #28]
 8009248:	2304      	movs	r3, #4
 800924a:	e067      	b.n	800931c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7ff fe59 	bl	8008f0c <create_chain>
 800925a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <dir_next+0xcc>
 8009262:	2307      	movs	r3, #7
 8009264:	e05a      	b.n	800931c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d101      	bne.n	8009270 <dir_next+0xd6>
 800926c:	2302      	movs	r3, #2
 800926e:	e055      	b.n	800931c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009276:	d101      	bne.n	800927c <dir_next+0xe2>
 8009278:	2301      	movs	r3, #1
 800927a:	e04f      	b.n	800931c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff fb4d 	bl	800891c <sync_window>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <dir_next+0xf2>
 8009288:	2301      	movs	r3, #1
 800928a:	e047      	b.n	800931c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3334      	adds	r3, #52	; 0x34
 8009290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009294:	2100      	movs	r1, #0
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff f945 	bl	8008526 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800929c:	2300      	movs	r3, #0
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	6979      	ldr	r1, [r7, #20]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff fc1a 	bl	8008adc <clust2sect>
 80092a8:	4602      	mov	r2, r0
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	631a      	str	r2, [r3, #48]	; 0x30
 80092ae:	e012      	b.n	80092d6 <dir_next+0x13c>
						fs->wflag = 1;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2201      	movs	r2, #1
 80092b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7ff fb30 	bl	800891c <sync_window>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <dir_next+0x12c>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e02a      	b.n	800931c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	3301      	adds	r3, #1
 80092ca:	613b      	str	r3, [r7, #16]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	895b      	ldrh	r3, [r3, #10]
 80092da:	461a      	mov	r2, r3
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	4293      	cmp	r3, r2
 80092e0:	d3e6      	bcc.n	80092b0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad2      	subs	r2, r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80092f4:	6979      	ldr	r1, [r7, #20]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f7ff fbf0 	bl	8008adc <clust2sect>
 80092fc:	4602      	mov	r2, r0
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009314:	441a      	add	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009334:	2100      	movs	r1, #0
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff feb4 	bl	80090a4 <dir_sdi>
 800933c:	4603      	mov	r3, r0
 800933e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d12b      	bne.n	800939e <dir_alloc+0x7a>
		n = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	4619      	mov	r1, r3
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f7ff fb27 	bl	80089a4 <move_window>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d11d      	bne.n	800939c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2be5      	cmp	r3, #229	; 0xe5
 8009368:	d004      	beq.n	8009374 <dir_alloc+0x50>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d107      	bne.n	8009384 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	3301      	adds	r3, #1
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d102      	bne.n	8009388 <dir_alloc+0x64>
 8009382:	e00c      	b.n	800939e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009384:	2300      	movs	r3, #0
 8009386:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009388:	2101      	movs	r1, #1
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff ff05 	bl	800919a <dir_next>
 8009390:	4603      	mov	r3, r0
 8009392:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0d7      	beq.n	800934a <dir_alloc+0x26>
 800939a:	e000      	b.n	800939e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800939c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d101      	bne.n	80093a8 <dir_alloc+0x84>
 80093a4:	2307      	movs	r3, #7
 80093a6:	75fb      	strb	r3, [r7, #23]
	return res;
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	331a      	adds	r3, #26
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff f80d 	bl	80083e0 <ld_word>
 80093c6:	4603      	mov	r3, r0
 80093c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d109      	bne.n	80093e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	3314      	adds	r3, #20
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff f802 	bl	80083e0 <ld_word>
 80093dc:	4603      	mov	r3, r0
 80093de:	041b      	lsls	r3, r3, #16
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80093e6:	68fb      	ldr	r3, [r7, #12]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	331a      	adds	r3, #26
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	b292      	uxth	r2, r2
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff f825 	bl	8008456 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b03      	cmp	r3, #3
 8009412:	d109      	bne.n	8009428 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f103 0214 	add.w	r2, r3, #20
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	0c1b      	lsrs	r3, r3, #16
 800941e:	b29b      	uxth	r3, r3
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7ff f817 	bl	8008456 <st_word>
	}
}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800943e:	2100      	movs	r1, #0
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff fe2f 	bl	80090a4 <dir_sdi>
 8009446:	4603      	mov	r3, r0
 8009448:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <dir_find+0x24>
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	e03e      	b.n	80094d2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	4619      	mov	r1, r3
 800945a:	6938      	ldr	r0, [r7, #16]
 800945c:	f7ff faa2 	bl	80089a4 <move_window>
 8009460:	4603      	mov	r3, r0
 8009462:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d12f      	bne.n	80094ca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d102      	bne.n	800947e <dir_find+0x4e>
 8009478:	2304      	movs	r3, #4
 800947a:	75fb      	strb	r3, [r7, #23]
 800947c:	e028      	b.n	80094d0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	330b      	adds	r3, #11
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800948a:	b2da      	uxtb	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	330b      	adds	r3, #11
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	f003 0308 	and.w	r3, r3, #8
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <dir_find+0x86>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a18      	ldr	r0, [r3, #32]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3324      	adds	r3, #36	; 0x24
 80094a8:	220b      	movs	r2, #11
 80094aa:	4619      	mov	r1, r3
 80094ac:	f7ff f856 	bl	800855c <mem_cmp>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00b      	beq.n	80094ce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80094b6:	2100      	movs	r1, #0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff fe6e 	bl	800919a <dir_next>
 80094be:	4603      	mov	r3, r0
 80094c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0c5      	beq.n	8009454 <dir_find+0x24>
 80094c8:	e002      	b.n	80094d0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80094ca:	bf00      	nop
 80094cc:	e000      	b.n	80094d0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80094ce:	bf00      	nop

	return res;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80094e8:	2101      	movs	r1, #1
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff ff1a 	bl	8009324 <dir_alloc>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d11c      	bne.n	8009534 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	4619      	mov	r1, r3
 8009500:	68b8      	ldr	r0, [r7, #8]
 8009502:	f7ff fa4f 	bl	80089a4 <move_window>
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d111      	bne.n	8009534 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	2220      	movs	r2, #32
 8009516:	2100      	movs	r1, #0
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff f804 	bl	8008526 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a18      	ldr	r0, [r3, #32]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3324      	adds	r3, #36	; 0x24
 8009526:	220b      	movs	r2, #11
 8009528:	4619      	mov	r1, r3
 800952a:	f7fe ffdb 	bl	80084e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2201      	movs	r2, #1
 8009532:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3324      	adds	r3, #36	; 0x24
 8009554:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009556:	220b      	movs	r2, #11
 8009558:	2120      	movs	r1, #32
 800955a:	68b8      	ldr	r0, [r7, #8]
 800955c:	f7fe ffe3 	bl	8008526 <mem_set>
	si = i = 0; ni = 8;
 8009560:	2300      	movs	r3, #0
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	61fb      	str	r3, [r7, #28]
 8009568:	2308      	movs	r3, #8
 800956a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	61fa      	str	r2, [r7, #28]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4413      	add	r3, r2
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800957a:	7efb      	ldrb	r3, [r7, #27]
 800957c:	2b20      	cmp	r3, #32
 800957e:	d94e      	bls.n	800961e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009580:	7efb      	ldrb	r3, [r7, #27]
 8009582:	2b2f      	cmp	r3, #47	; 0x2f
 8009584:	d006      	beq.n	8009594 <create_name+0x54>
 8009586:	7efb      	ldrb	r3, [r7, #27]
 8009588:	2b5c      	cmp	r3, #92	; 0x5c
 800958a:	d110      	bne.n	80095ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800958c:	e002      	b.n	8009594 <create_name+0x54>
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3301      	adds	r3, #1
 8009592:	61fb      	str	r3, [r7, #28]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b2f      	cmp	r3, #47	; 0x2f
 800959e:	d0f6      	beq.n	800958e <create_name+0x4e>
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b5c      	cmp	r3, #92	; 0x5c
 80095aa:	d0f0      	beq.n	800958e <create_name+0x4e>
			break;
 80095ac:	e038      	b.n	8009620 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80095ae:	7efb      	ldrb	r3, [r7, #27]
 80095b0:	2b2e      	cmp	r3, #46	; 0x2e
 80095b2:	d003      	beq.n	80095bc <create_name+0x7c>
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d30c      	bcc.n	80095d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2b0b      	cmp	r3, #11
 80095c0:	d002      	beq.n	80095c8 <create_name+0x88>
 80095c2:	7efb      	ldrb	r3, [r7, #27]
 80095c4:	2b2e      	cmp	r3, #46	; 0x2e
 80095c6:	d001      	beq.n	80095cc <create_name+0x8c>
 80095c8:	2306      	movs	r3, #6
 80095ca:	e044      	b.n	8009656 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80095cc:	2308      	movs	r3, #8
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	230b      	movs	r3, #11
 80095d2:	617b      	str	r3, [r7, #20]
			continue;
 80095d4:	e022      	b.n	800961c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80095d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	da04      	bge.n	80095e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80095de:	7efb      	ldrb	r3, [r7, #27]
 80095e0:	3b80      	subs	r3, #128	; 0x80
 80095e2:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <create_name+0x120>)
 80095e4:	5cd3      	ldrb	r3, [r2, r3]
 80095e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80095e8:	7efb      	ldrb	r3, [r7, #27]
 80095ea:	4619      	mov	r1, r3
 80095ec:	481d      	ldr	r0, [pc, #116]	; (8009664 <create_name+0x124>)
 80095ee:	f7fe ffdc 	bl	80085aa <chk_chr>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <create_name+0xbc>
 80095f8:	2306      	movs	r3, #6
 80095fa:	e02c      	b.n	8009656 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80095fc:	7efb      	ldrb	r3, [r7, #27]
 80095fe:	2b60      	cmp	r3, #96	; 0x60
 8009600:	d905      	bls.n	800960e <create_name+0xce>
 8009602:	7efb      	ldrb	r3, [r7, #27]
 8009604:	2b7a      	cmp	r3, #122	; 0x7a
 8009606:	d802      	bhi.n	800960e <create_name+0xce>
 8009608:	7efb      	ldrb	r3, [r7, #27]
 800960a:	3b20      	subs	r3, #32
 800960c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	613a      	str	r2, [r7, #16]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	4413      	add	r3, r2
 8009618:	7efa      	ldrb	r2, [r7, #27]
 800961a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800961c:	e7a6      	b.n	800956c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800961e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	441a      	add	r2, r3
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <create_name+0xf4>
 8009630:	2306      	movs	r3, #6
 8009632:	e010      	b.n	8009656 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2be5      	cmp	r3, #229	; 0xe5
 800963a:	d102      	bne.n	8009642 <create_name+0x102>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2205      	movs	r2, #5
 8009640:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009642:	7efb      	ldrb	r3, [r7, #27]
 8009644:	2b20      	cmp	r3, #32
 8009646:	d801      	bhi.n	800964c <create_name+0x10c>
 8009648:	2204      	movs	r2, #4
 800964a:	e000      	b.n	800964e <create_name+0x10e>
 800964c:	2200      	movs	r2, #0
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	330b      	adds	r3, #11
 8009652:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009654:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009656:	4618      	mov	r0, r3
 8009658:	3720      	adds	r7, #32
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	08013458 	.word	0x08013458
 8009664:	080132ac 	.word	0x080132ac

08009668 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800967c:	e002      	b.n	8009684 <follow_path+0x1c>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	3301      	adds	r3, #1
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2b2f      	cmp	r3, #47	; 0x2f
 800968a:	d0f8      	beq.n	800967e <follow_path+0x16>
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b5c      	cmp	r3, #92	; 0x5c
 8009692:	d0f4      	beq.n	800967e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	2200      	movs	r2, #0
 8009698:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	2b1f      	cmp	r3, #31
 80096a0:	d80a      	bhi.n	80096b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2280      	movs	r2, #128	; 0x80
 80096a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80096aa:	2100      	movs	r1, #0
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff fcf9 	bl	80090a4 <dir_sdi>
 80096b2:	4603      	mov	r3, r0
 80096b4:	75fb      	strb	r3, [r7, #23]
 80096b6:	e043      	b.n	8009740 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096b8:	463b      	mov	r3, r7
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff ff3f 	bl	8009540 <create_name>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d134      	bne.n	8009736 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff feaf 	bl	8009430 <dir_find>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00a      	beq.n	80096fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d127      	bne.n	800973a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80096ea:	7afb      	ldrb	r3, [r7, #11]
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d122      	bne.n	800973a <follow_path+0xd2>
 80096f4:	2305      	movs	r3, #5
 80096f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80096f8:	e01f      	b.n	800973a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80096fa:	7afb      	ldrb	r3, [r7, #11]
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d11c      	bne.n	800973e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	799b      	ldrb	r3, [r3, #6]
 8009708:	f003 0310 	and.w	r3, r3, #16
 800970c:	2b00      	cmp	r3, #0
 800970e:	d102      	bne.n	8009716 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009710:	2305      	movs	r3, #5
 8009712:	75fb      	strb	r3, [r7, #23]
 8009714:	e014      	b.n	8009740 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009724:	4413      	add	r3, r2
 8009726:	4619      	mov	r1, r3
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7ff fe42 	bl	80093b2 <ld_clust>
 800972e:	4602      	mov	r2, r0
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009734:	e7c0      	b.n	80096b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <follow_path+0xd8>
				break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800973e:	bf00      	nop
			}
		}
	}

	return res;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800974a:	b480      	push	{r7}
 800974c:	b087      	sub	sp, #28
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009752:	f04f 33ff 	mov.w	r3, #4294967295
 8009756:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d031      	beq.n	80097c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	617b      	str	r3, [r7, #20]
 8009766:	e002      	b.n	800976e <get_ldnumber+0x24>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	3301      	adds	r3, #1
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b20      	cmp	r3, #32
 8009774:	d903      	bls.n	800977e <get_ldnumber+0x34>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	2b3a      	cmp	r3, #58	; 0x3a
 800977c:	d1f4      	bne.n	8009768 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b3a      	cmp	r3, #58	; 0x3a
 8009784:	d11c      	bne.n	80097c0 <get_ldnumber+0x76>
			tp = *path;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	60fa      	str	r2, [r7, #12]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	3b30      	subs	r3, #48	; 0x30
 8009796:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b09      	cmp	r3, #9
 800979c:	d80e      	bhi.n	80097bc <get_ldnumber+0x72>
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d10a      	bne.n	80097bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d107      	bne.n	80097bc <get_ldnumber+0x72>
					vol = (int)i;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	3301      	adds	r3, #1
 80097b4:	617b      	str	r3, [r7, #20]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	e002      	b.n	80097c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80097c0:	2300      	movs	r3, #0
 80097c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80097c4:	693b      	ldr	r3, [r7, #16]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
	...

080097d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	70da      	strb	r2, [r3, #3]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff f8d8 	bl	80089a4 <move_window>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <check_fs+0x2a>
 80097fa:	2304      	movs	r3, #4
 80097fc:	e038      	b.n	8009870 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3334      	adds	r3, #52	; 0x34
 8009802:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe fdea 	bl	80083e0 <ld_word>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009814:	429a      	cmp	r2, r3
 8009816:	d001      	beq.n	800981c <check_fs+0x48>
 8009818:	2303      	movs	r3, #3
 800981a:	e029      	b.n	8009870 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009822:	2be9      	cmp	r3, #233	; 0xe9
 8009824:	d009      	beq.n	800983a <check_fs+0x66>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800982c:	2beb      	cmp	r3, #235	; 0xeb
 800982e:	d11e      	bne.n	800986e <check_fs+0x9a>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009836:	2b90      	cmp	r3, #144	; 0x90
 8009838:	d119      	bne.n	800986e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3334      	adds	r3, #52	; 0x34
 800983e:	3336      	adds	r3, #54	; 0x36
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe fde5 	bl	8008410 <ld_dword>
 8009846:	4603      	mov	r3, r0
 8009848:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800984c:	4a0a      	ldr	r2, [pc, #40]	; (8009878 <check_fs+0xa4>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d101      	bne.n	8009856 <check_fs+0x82>
 8009852:	2300      	movs	r3, #0
 8009854:	e00c      	b.n	8009870 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3334      	adds	r3, #52	; 0x34
 800985a:	3352      	adds	r3, #82	; 0x52
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe fdd7 	bl	8008410 <ld_dword>
 8009862:	4603      	mov	r3, r0
 8009864:	4a05      	ldr	r2, [pc, #20]	; (800987c <check_fs+0xa8>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d101      	bne.n	800986e <check_fs+0x9a>
 800986a:	2300      	movs	r3, #0
 800986c:	e000      	b.n	8009870 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800986e:	2302      	movs	r3, #2
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	00544146 	.word	0x00544146
 800987c:	33544146 	.word	0x33544146

08009880 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b096      	sub	sp, #88	; 0x58
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	4613      	mov	r3, r2
 800988c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2200      	movs	r2, #0
 8009892:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f7ff ff58 	bl	800974a <get_ldnumber>
 800989a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800989c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	da01      	bge.n	80098a6 <find_volume+0x26>
 80098a2:	230b      	movs	r3, #11
 80098a4:	e236      	b.n	8009d14 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80098a6:	4aac      	ldr	r2, [pc, #688]	; (8009b58 <find_volume+0x2d8>)
 80098a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <find_volume+0x3a>
 80098b6:	230c      	movs	r3, #12
 80098b8:	e22c      	b.n	8009d14 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80098ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098bc:	f7fe fe90 	bl	80085e0 <lock_fs>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <find_volume+0x4a>
 80098c6:	230f      	movs	r3, #15
 80098c8:	e224      	b.n	8009d14 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	f023 0301 	bic.w	r3, r3, #1
 80098d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01a      	beq.n	8009916 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	785b      	ldrb	r3, [r3, #1]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fe fcdd 	bl	80082a4 <disk_status>
 80098ea:	4603      	mov	r3, r0
 80098ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80098f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10c      	bne.n	8009916 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d007      	beq.n	8009912 <find_volume+0x92>
 8009902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800990e:	230a      	movs	r3, #10
 8009910:	e200      	b.n	8009d14 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8009912:	2300      	movs	r3, #0
 8009914:	e1fe      	b.n	8009d14 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800991c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991e:	b2da      	uxtb	r2, r3
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fcd5 	bl	80082d8 <disk_initialize>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009934:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009940:	2303      	movs	r3, #3
 8009942:	e1e7      	b.n	8009d14 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d007      	beq.n	800995a <find_volume+0xda>
 800994a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800994e:	f003 0304 	and.w	r3, r3, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009956:	230a      	movs	r3, #10
 8009958:	e1dc      	b.n	8009d14 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800995e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009960:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009962:	f7ff ff37 	bl	80097d4 <check_fs>
 8009966:	4603      	mov	r3, r0
 8009968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800996c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009970:	2b02      	cmp	r3, #2
 8009972:	d14b      	bne.n	8009a0c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009974:	2300      	movs	r3, #0
 8009976:	643b      	str	r3, [r7, #64]	; 0x40
 8009978:	e01f      	b.n	80099ba <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009982:	011b      	lsls	r3, r3, #4
 8009984:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009988:	4413      	add	r3, r2
 800998a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	3304      	adds	r3, #4
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d006      	beq.n	80099a4 <find_volume+0x124>
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	3308      	adds	r3, #8
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fd38 	bl	8008410 <ld_dword>
 80099a0:	4602      	mov	r2, r0
 80099a2:	e000      	b.n	80099a6 <find_volume+0x126>
 80099a4:	2200      	movs	r2, #0
 80099a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80099ae:	440b      	add	r3, r1
 80099b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80099b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099b6:	3301      	adds	r3, #1
 80099b8:	643b      	str	r3, [r7, #64]	; 0x40
 80099ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d9dc      	bls.n	800997a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80099c0:	2300      	movs	r3, #0
 80099c2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80099c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <find_volume+0x150>
 80099ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099cc:	3b01      	subs	r3, #1
 80099ce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80099d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80099d8:	4413      	add	r3, r2
 80099da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80099de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80099e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <find_volume+0x172>
 80099e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099ea:	f7ff fef3 	bl	80097d4 <check_fs>
 80099ee:	4603      	mov	r3, r0
 80099f0:	e000      	b.n	80099f4 <find_volume+0x174>
 80099f2:	2303      	movs	r3, #3
 80099f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80099f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d905      	bls.n	8009a0c <find_volume+0x18c>
 8009a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a02:	3301      	adds	r3, #1
 8009a04:	643b      	str	r3, [r7, #64]	; 0x40
 8009a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d9e1      	bls.n	80099d0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d101      	bne.n	8009a18 <find_volume+0x198>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e17d      	b.n	8009d14 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009a18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d901      	bls.n	8009a24 <find_volume+0x1a4>
 8009a20:	230d      	movs	r3, #13
 8009a22:	e177      	b.n	8009d14 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	3334      	adds	r3, #52	; 0x34
 8009a28:	330b      	adds	r3, #11
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fcd8 	bl	80083e0 <ld_word>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a36:	d001      	beq.n	8009a3c <find_volume+0x1bc>
 8009a38:	230d      	movs	r3, #13
 8009a3a:	e16b      	b.n	8009d14 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	3334      	adds	r3, #52	; 0x34
 8009a40:	3316      	adds	r3, #22
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe fccc 	bl	80083e0 <ld_word>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <find_volume+0x1e0>
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	3334      	adds	r3, #52	; 0x34
 8009a56:	3324      	adds	r3, #36	; 0x24
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fcd9 	bl	8008410 <ld_dword>
 8009a5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a64:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	789b      	ldrb	r3, [r3, #2]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d005      	beq.n	8009a84 <find_volume+0x204>
 8009a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7a:	789b      	ldrb	r3, [r3, #2]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d001      	beq.n	8009a84 <find_volume+0x204>
 8009a80:	230d      	movs	r3, #13
 8009a82:	e147      	b.n	8009d14 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a86:	789b      	ldrb	r3, [r3, #2]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a8c:	fb02 f303 	mul.w	r3, r2, r3
 8009a90:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	895b      	ldrh	r3, [r3, #10]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d008      	beq.n	8009ab8 <find_volume+0x238>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	895b      	ldrh	r3, [r3, #10]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	895b      	ldrh	r3, [r3, #10]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <find_volume+0x23c>
 8009ab8:	230d      	movs	r3, #13
 8009aba:	e12b      	b.n	8009d14 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	3334      	adds	r3, #52	; 0x34
 8009ac0:	3311      	adds	r3, #17
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fc8c 	bl	80083e0 <ld_word>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461a      	mov	r2, r3
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	891b      	ldrh	r3, [r3, #8]
 8009ad4:	f003 030f 	and.w	r3, r3, #15
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <find_volume+0x262>
 8009ade:	230d      	movs	r3, #13
 8009ae0:	e118      	b.n	8009d14 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae4:	3334      	adds	r3, #52	; 0x34
 8009ae6:	3313      	adds	r3, #19
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fe fc79 	bl	80083e0 <ld_word>
 8009aee:	4603      	mov	r3, r0
 8009af0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <find_volume+0x286>
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	3334      	adds	r3, #52	; 0x34
 8009afc:	3320      	adds	r3, #32
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fc86 	bl	8008410 <ld_dword>
 8009b04:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	3334      	adds	r3, #52	; 0x34
 8009b0a:	330e      	adds	r3, #14
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe fc67 	bl	80083e0 <ld_word>
 8009b12:	4603      	mov	r3, r0
 8009b14:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009b16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <find_volume+0x2a0>
 8009b1c:	230d      	movs	r3, #13
 8009b1e:	e0f9      	b.n	8009d14 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009b20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b24:	4413      	add	r3, r2
 8009b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b28:	8912      	ldrh	r2, [r2, #8]
 8009b2a:	0912      	lsrs	r2, r2, #4
 8009b2c:	b292      	uxth	r2, r2
 8009b2e:	4413      	add	r3, r2
 8009b30:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d201      	bcs.n	8009b3e <find_volume+0x2be>
 8009b3a:	230d      	movs	r3, #13
 8009b3c:	e0ea      	b.n	8009d14 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b46:	8952      	ldrh	r2, [r2, #10]
 8009b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d103      	bne.n	8009b5c <find_volume+0x2dc>
 8009b54:	230d      	movs	r3, #13
 8009b56:	e0dd      	b.n	8009d14 <find_volume+0x494>
 8009b58:	2000033c 	.word	0x2000033c
		fmt = FS_FAT32;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d802      	bhi.n	8009b72 <find_volume+0x2f2>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d802      	bhi.n	8009b82 <find_volume+0x302>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	1c9a      	adds	r2, r3, #2
 8009b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b88:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b8e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009b90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b94:	441a      	add	r2, r3
 8009b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b98:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009b9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	441a      	add	r2, r3
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d11e      	bne.n	8009bea <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bae:	3334      	adds	r3, #52	; 0x34
 8009bb0:	332a      	adds	r3, #42	; 0x2a
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe fc14 	bl	80083e0 <ld_word>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <find_volume+0x342>
 8009bbe:	230d      	movs	r3, #13
 8009bc0:	e0a8      	b.n	8009d14 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	891b      	ldrh	r3, [r3, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <find_volume+0x34e>
 8009bca:	230d      	movs	r3, #13
 8009bcc:	e0a2      	b.n	8009d14 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	3334      	adds	r3, #52	; 0x34
 8009bd2:	332c      	adds	r3, #44	; 0x2c
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fe fc1b 	bl	8008410 <ld_dword>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	647b      	str	r3, [r7, #68]	; 0x44
 8009be8:	e01f      	b.n	8009c2a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bec:	891b      	ldrh	r3, [r3, #8]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <find_volume+0x376>
 8009bf2:	230d      	movs	r3, #13
 8009bf4:	e08e      	b.n	8009d14 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bfc:	441a      	add	r2, r3
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009c02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d103      	bne.n	8009c12 <find_volume+0x392>
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	e00a      	b.n	8009c28 <find_volume+0x3a8>
 8009c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	4613      	mov	r3, r2
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	4413      	add	r3, r2
 8009c1c:	085a      	lsrs	r2, r3, #1
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009c28:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2c:	69da      	ldr	r2, [r3, #28]
 8009c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009c34:	0a5b      	lsrs	r3, r3, #9
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d201      	bcs.n	8009c3e <find_volume+0x3be>
 8009c3a:	230d      	movs	r3, #13
 8009c3c:	e06a      	b.n	8009d14 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	f04f 32ff 	mov.w	r2, #4294967295
 8009c44:	615a      	str	r2, [r3, #20]
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	695a      	ldr	r2, [r3, #20]
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c50:	2280      	movs	r2, #128	; 0x80
 8009c52:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d149      	bne.n	8009cf0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	3334      	adds	r3, #52	; 0x34
 8009c60:	3330      	adds	r3, #48	; 0x30
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fbbc 	bl	80083e0 <ld_word>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d140      	bne.n	8009cf0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c70:	3301      	adds	r3, #1
 8009c72:	4619      	mov	r1, r3
 8009c74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c76:	f7fe fe95 	bl	80089a4 <move_window>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d137      	bne.n	8009cf0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8009c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c82:	2200      	movs	r2, #0
 8009c84:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	3334      	adds	r3, #52	; 0x34
 8009c8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fba6 	bl	80083e0 <ld_word>
 8009c94:	4603      	mov	r3, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d127      	bne.n	8009cf0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	3334      	adds	r3, #52	; 0x34
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fe fbb3 	bl	8008410 <ld_dword>
 8009caa:	4603      	mov	r3, r0
 8009cac:	4a1b      	ldr	r2, [pc, #108]	; (8009d1c <find_volume+0x49c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d11e      	bne.n	8009cf0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	3334      	adds	r3, #52	; 0x34
 8009cb6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fba8 	bl	8008410 <ld_dword>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	4a17      	ldr	r2, [pc, #92]	; (8009d20 <find_volume+0x4a0>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d113      	bne.n	8009cf0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cca:	3334      	adds	r3, #52	; 0x34
 8009ccc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fe fb9d 	bl	8008410 <ld_dword>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cda:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cde:	3334      	adds	r3, #52	; 0x34
 8009ce0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe fb93 	bl	8008410 <ld_dword>
 8009cea:	4602      	mov	r2, r0
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009cf6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <find_volume+0x4a4>)
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <find_volume+0x4a4>)
 8009d02:	801a      	strh	r2, [r3, #0]
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <find_volume+0x4a4>)
 8009d06:	881a      	ldrh	r2, [r3, #0]
 8009d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009d0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d0e:	f7fe fde1 	bl	80088d4 <clear_lock>
#endif
	return FR_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3758      	adds	r7, #88	; 0x58
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	41615252 	.word	0x41615252
 8009d20:	61417272 	.word	0x61417272
 8009d24:	20000340 	.word	0x20000340

08009d28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009d32:	2309      	movs	r3, #9
 8009d34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d02e      	beq.n	8009d9a <validate+0x72>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d02a      	beq.n	8009d9a <validate+0x72>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d025      	beq.n	8009d9a <validate+0x72>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	889a      	ldrh	r2, [r3, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	88db      	ldrh	r3, [r3, #6]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d11e      	bne.n	8009d9a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fc3d 	bl	80085e0 <lock_fs>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d014      	beq.n	8009d96 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fa96 	bl	80082a4 <disk_status>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d102      	bne.n	8009d88 <validate+0x60>
				res = FR_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
 8009d86:	e008      	b.n	8009d9a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fe fc3c 	bl	800860c <unlock_fs>
 8009d94:	e001      	b.n	8009d9a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009d96:	230f      	movs	r3, #15
 8009d98:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d102      	bne.n	8009da6 <validate+0x7e>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	e000      	b.n	8009da8 <validate+0x80>
 8009da6:	2300      	movs	r3, #0
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	6013      	str	r3, [r2, #0]
	return res;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009dca:	f107 0310 	add.w	r3, r7, #16
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fcbb 	bl	800974a <get_ldnumber>
 8009dd4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	da01      	bge.n	8009de0 <f_mount+0x28>
 8009ddc:	230b      	movs	r3, #11
 8009dde:	e048      	b.n	8009e72 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009de0:	4a26      	ldr	r2, [pc, #152]	; (8009e7c <f_mount+0xc4>)
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00f      	beq.n	8009e10 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009df0:	69b8      	ldr	r0, [r7, #24]
 8009df2:	f7fe fd6f 	bl	80088d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 ff3e 	bl	800ac7c <ff_del_syncobj>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <f_mount+0x52>
 8009e06:	2302      	movs	r3, #2
 8009e08:	e033      	b.n	8009e72 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00f      	beq.n	8009e36 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	330c      	adds	r3, #12
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f000 ff0d 	bl	800ac46 <ff_cre_syncobj>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <f_mount+0x7e>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e01d      	b.n	8009e72 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	4910      	ldr	r1, [pc, #64]	; (8009e7c <f_mount+0xc4>)
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <f_mount+0x94>
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d001      	beq.n	8009e50 <f_mount+0x98>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e010      	b.n	8009e72 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009e50:	f107 010c 	add.w	r1, r7, #12
 8009e54:	f107 0308 	add.w	r3, r7, #8
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff fd10 	bl	8009880 <find_volume>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	7dfa      	ldrb	r2, [r7, #23]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fbce 	bl	800860c <unlock_fs>
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3720      	adds	r7, #32
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	2000033c 	.word	0x2000033c

08009e80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b098      	sub	sp, #96	; 0x60
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <f_open+0x18>
 8009e94:	2309      	movs	r3, #9
 8009e96:	e1b4      	b.n	800a202 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009ea0:	79fa      	ldrb	r2, [r7, #7]
 8009ea2:	f107 0110 	add.w	r1, r7, #16
 8009ea6:	f107 0308 	add.w	r3, r7, #8
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff fce8 	bl	8009880 <find_volume>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f040 8191 	bne.w	800a1e2 <f_open+0x362>
		dj.obj.fs = fs;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	f107 0314 	add.w	r3, r7, #20
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7ff fbcb 	bl	8009668 <follow_path>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d11a      	bne.n	8009f16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ee4:	b25b      	sxtb	r3, r3
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	da03      	bge.n	8009ef2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009eea:	2306      	movs	r3, #6
 8009eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ef0:	e011      	b.n	8009f16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ef2:	79fb      	ldrb	r3, [r7, #7]
 8009ef4:	f023 0301 	bic.w	r3, r3, #1
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bf14      	ite	ne
 8009efc:	2301      	movne	r3, #1
 8009efe:	2300      	moveq	r3, #0
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	461a      	mov	r2, r3
 8009f04:	f107 0314 	add.w	r3, r7, #20
 8009f08:	4611      	mov	r1, r2
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fb9a 	bl	8008644 <chk_lock>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	f003 031c 	and.w	r3, r3, #28
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d07f      	beq.n	800a020 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d017      	beq.n	8009f58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	d10e      	bne.n	8009f4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009f30:	f7fe fbe4 	bl	80086fc <enq_lock>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d006      	beq.n	8009f48 <f_open+0xc8>
 8009f3a:	f107 0314 	add.w	r3, r7, #20
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff facb 	bl	80094da <dir_register>
 8009f44:	4603      	mov	r3, r0
 8009f46:	e000      	b.n	8009f4a <f_open+0xca>
 8009f48:	2312      	movs	r3, #18
 8009f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009f4e:	79fb      	ldrb	r3, [r7, #7]
 8009f50:	f043 0308 	orr.w	r3, r3, #8
 8009f54:	71fb      	strb	r3, [r7, #7]
 8009f56:	e010      	b.n	8009f7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009f58:	7ebb      	ldrb	r3, [r7, #26]
 8009f5a:	f003 0311 	and.w	r3, r3, #17
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d003      	beq.n	8009f6a <f_open+0xea>
					res = FR_DENIED;
 8009f62:	2307      	movs	r3, #7
 8009f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f68:	e007      	b.n	8009f7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <f_open+0xfa>
 8009f74:	2308      	movs	r3, #8
 8009f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d168      	bne.n	800a054 <f_open+0x1d4>
 8009f82:	79fb      	ldrb	r3, [r7, #7]
 8009f84:	f003 0308 	and.w	r3, r3, #8
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d063      	beq.n	800a054 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009f8c:	f7fe f92a 	bl	80081e4 <get_fattime>
 8009f90:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f94:	330e      	adds	r3, #14
 8009f96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe fa77 	bl	800848c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa0:	3316      	adds	r3, #22
 8009fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fe fa71 	bl	800848c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fac:	330b      	adds	r3, #11
 8009fae:	2220      	movs	r2, #32
 8009fb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7ff f9fa 	bl	80093b2 <ld_clust>
 8009fbe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fa12 	bl	80093f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fce:	331c      	adds	r3, #28
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe fa5a 	bl	800848c <st_dword>
					fs->wflag = 1;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d037      	beq.n	800a054 <f_open+0x1d4>
						dw = fs->winsect;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009fea:	f107 0314 	add.w	r3, r7, #20
 8009fee:	2200      	movs	r2, #0
 8009ff0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe ff25 	bl	8008e42 <remove_chain>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a002:	2b00      	cmp	r3, #0
 800a004:	d126      	bne.n	800a054 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fcca 	bl	80089a4 <move_window>
 800a010:	4603      	mov	r3, r0
 800a012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a01a:	3a01      	subs	r2, #1
 800a01c:	611a      	str	r2, [r3, #16]
 800a01e:	e019      	b.n	800a054 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a024:	2b00      	cmp	r3, #0
 800a026:	d115      	bne.n	800a054 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a028:	7ebb      	ldrb	r3, [r7, #26]
 800a02a:	f003 0310 	and.w	r3, r3, #16
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d003      	beq.n	800a03a <f_open+0x1ba>
					res = FR_NO_FILE;
 800a032:	2304      	movs	r3, #4
 800a034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a038:	e00c      	b.n	800a054 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <f_open+0x1d4>
 800a044:	7ebb      	ldrb	r3, [r7, #26]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <f_open+0x1d4>
						res = FR_DENIED;
 800a04e:	2307      	movs	r3, #7
 800a050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d128      	bne.n	800a0ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	f003 0308 	and.w	r3, r3, #8
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a06c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	f023 0301 	bic.w	r3, r3, #1
 800a082:	2b00      	cmp	r3, #0
 800a084:	bf14      	ite	ne
 800a086:	2301      	movne	r3, #1
 800a088:	2300      	moveq	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	f107 0314 	add.w	r3, r7, #20
 800a092:	4611      	mov	r1, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fb53 	bl	8008740 <inc_lock>
 800a09a:	4602      	mov	r2, r0
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d102      	bne.n	800a0ae <f_open+0x22e>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f040 8095 	bne.w	800a1e2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0bc:	4611      	mov	r1, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff f977 	bl	80093b2 <ld_clust>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0cc:	331c      	adds	r3, #28
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe f99e 	bl	8008410 <ld_dword>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	88da      	ldrh	r2, [r3, #6]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	79fa      	ldrb	r2, [r7, #7]
 800a0f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3330      	adds	r3, #48	; 0x30
 800a10a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a10e:	2100      	movs	r1, #0
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe fa08 	bl	8008526 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	f003 0320 	and.w	r3, r3, #32
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d060      	beq.n	800a1e2 <f_open+0x362>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d05c      	beq.n	800a1e2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	68da      	ldr	r2, [r3, #12]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	895b      	ldrh	r3, [r3, #10]
 800a134:	025b      	lsls	r3, r3, #9
 800a136:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	657b      	str	r3, [r7, #84]	; 0x54
 800a144:	e016      	b.n	800a174 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe fce5 	bl	8008b1a <get_fat>
 800a150:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a154:	2b01      	cmp	r3, #1
 800a156:	d802      	bhi.n	800a15e <f_open+0x2de>
 800a158:	2302      	movs	r3, #2
 800a15a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a15e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a164:	d102      	bne.n	800a16c <f_open+0x2ec>
 800a166:	2301      	movs	r3, #1
 800a168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a16c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	657b      	str	r3, [r7, #84]	; 0x54
 800a174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d103      	bne.n	800a184 <f_open+0x304>
 800a17c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a17e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a180:	429a      	cmp	r2, r3
 800a182:	d8e0      	bhi.n	800a146 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a188:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a18a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d127      	bne.n	800a1e2 <f_open+0x362>
 800a192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d022      	beq.n	800a1e2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7fe fc9b 	bl	8008adc <clust2sect>
 800a1a6:	6478      	str	r0, [r7, #68]	; 0x44
 800a1a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d103      	bne.n	800a1b6 <f_open+0x336>
						res = FR_INT_ERR;
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a1b4:	e015      	b.n	800a1e2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a1b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1b8:	0a5a      	lsrs	r2, r3, #9
 800a1ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1bc:	441a      	add	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	7858      	ldrb	r0, [r3, #1]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a1a      	ldr	r2, [r3, #32]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	f7fe f8a7 	bl	8008324 <disk_read>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <f_open+0x362>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a1e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <f_open+0x370>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe fa07 	bl	800860c <unlock_fs>
 800a1fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a202:	4618      	mov	r0, r3
 800a204:	3760      	adds	r7, #96	; 0x60
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b08e      	sub	sp, #56	; 0x38
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f107 0214 	add.w	r2, r7, #20
 800a228:	4611      	mov	r1, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff fd7c 	bl	8009d28 <validate>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a236:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d107      	bne.n	800a24e <f_read+0x44>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	7d5b      	ldrb	r3, [r3, #21]
 800a242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a246:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <f_read+0x58>
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a254:	4611      	mov	r1, r2
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe f9d8 	bl	800860c <unlock_fs>
 800a25c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a260:	e13d      	b.n	800a4de <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	7d1b      	ldrb	r3, [r3, #20]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <f_read+0x72>
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2107      	movs	r1, #7
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe f9ca 	bl	800860c <unlock_fs>
 800a278:	2307      	movs	r3, #7
 800a27a:	e130      	b.n	800a4de <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	68da      	ldr	r2, [r3, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	f240 811c 	bls.w	800a4ca <f_read+0x2c0>
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a296:	e118      	b.n	800a4ca <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f040 80e4 	bne.w	800a46e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	0a5b      	lsrs	r3, r3, #9
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	8952      	ldrh	r2, [r2, #10]
 800a2b0:	3a01      	subs	r2, #1
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d139      	bne.n	800a330 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	633b      	str	r3, [r7, #48]	; 0x30
 800a2ca:	e013      	b.n	800a2f4 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7fe feae 	bl	800903c <clmt_clust>
 800a2e0:	6338      	str	r0, [r7, #48]	; 0x30
 800a2e2:	e007      	b.n	800a2f4 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	f7fe fc14 	bl	8008b1a <get_fat>
 800a2f2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d809      	bhi.n	800a30e <f_read+0x104>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	755a      	strb	r2, [r3, #21]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2102      	movs	r1, #2
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe f981 	bl	800860c <unlock_fs>
 800a30a:	2302      	movs	r3, #2
 800a30c:	e0e7      	b.n	800a4de <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a314:	d109      	bne.n	800a32a <f_read+0x120>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	755a      	strb	r2, [r3, #21]
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2101      	movs	r1, #1
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe f973 	bl	800860c <unlock_fs>
 800a326:	2301      	movs	r3, #1
 800a328:	e0d9      	b.n	800a4de <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a32e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	4619      	mov	r1, r3
 800a338:	4610      	mov	r0, r2
 800a33a:	f7fe fbcf 	bl	8008adc <clust2sect>
 800a33e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <f_read+0x150>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2202      	movs	r2, #2
 800a34a:	755a      	strb	r2, [r3, #21]
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2102      	movs	r1, #2
 800a350:	4618      	mov	r0, r3
 800a352:	f7fe f95b 	bl	800860c <unlock_fs>
 800a356:	2302      	movs	r3, #2
 800a358:	e0c1      	b.n	800a4de <f_read+0x2d4>
			sect += csect;
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	4413      	add	r3, r2
 800a360:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	0a5b      	lsrs	r3, r3, #9
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d03e      	beq.n	800a3ec <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a36e:	69fa      	ldr	r2, [r7, #28]
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	4413      	add	r3, r2
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	8952      	ldrh	r2, [r2, #10]
 800a378:	4293      	cmp	r3, r2
 800a37a:	d905      	bls.n	800a388 <f_read+0x17e>
					cc = fs->csize - csect;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	895b      	ldrh	r3, [r3, #10]
 800a380:	461a      	mov	r2, r3
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	7858      	ldrb	r0, [r3, #1]
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	69ba      	ldr	r2, [r7, #24]
 800a390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a392:	f7fd ffc7 	bl	8008324 <disk_read>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d009      	beq.n	800a3b0 <f_read+0x1a6>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	755a      	strb	r2, [r3, #21]
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fe f930 	bl	800860c <unlock_fs>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e096      	b.n	800a4de <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	7d1b      	ldrb	r3, [r3, #20]
 800a3b4:	b25b      	sxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	da14      	bge.n	800a3e4 <f_read+0x1da>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d90d      	bls.n	800a3e4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6a1a      	ldr	r2, [r3, #32]
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	025b      	lsls	r3, r3, #9
 800a3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d4:	18d0      	adds	r0, r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3330      	adds	r3, #48	; 0x30
 800a3da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3de:	4619      	mov	r1, r3
 800a3e0:	f7fe f880 	bl	80084e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	025b      	lsls	r3, r3, #9
 800a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a3ea:	e05a      	b.n	800a4a2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d038      	beq.n	800a468 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	7d1b      	ldrb	r3, [r3, #20]
 800a3fa:	b25b      	sxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da1d      	bge.n	800a43c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	7858      	ldrb	r0, [r3, #1]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6a1a      	ldr	r2, [r3, #32]
 800a40e:	2301      	movs	r3, #1
 800a410:	f7fd ffa8 	bl	8008364 <disk_write>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <f_read+0x224>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2201      	movs	r2, #1
 800a41e:	755a      	strb	r2, [r3, #21]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	2101      	movs	r1, #1
 800a424:	4618      	mov	r0, r3
 800a426:	f7fe f8f1 	bl	800860c <unlock_fs>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e057      	b.n	800a4de <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	7d1b      	ldrb	r3, [r3, #20]
 800a432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a436:	b2da      	uxtb	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	7858      	ldrb	r0, [r3, #1]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a446:	2301      	movs	r3, #1
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	f7fd ff6b 	bl	8008324 <disk_read>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d009      	beq.n	800a468 <f_read+0x25e>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2201      	movs	r2, #1
 800a458:	755a      	strb	r2, [r3, #21]
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2101      	movs	r1, #1
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe f8d4 	bl	800860c <unlock_fs>
 800a464:	2301      	movs	r3, #1
 800a466:	e03a      	b.n	800a4de <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	69ba      	ldr	r2, [r7, #24]
 800a46c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a476:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a47a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	d901      	bls.n	800a488 <f_read+0x27e>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a496:	4413      	add	r3, r2
 800a498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a49a:	4619      	mov	r1, r3
 800a49c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a49e:	f7fe f821 	bl	80084e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	4413      	add	r3, r2
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b0:	441a      	add	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	619a      	str	r2, [r3, #24]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	441a      	add	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f47f aee3 	bne.w	800a298 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fe f898 	bl	800860c <unlock_fs>
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3738      	adds	r7, #56	; 0x38
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b08c      	sub	sp, #48	; 0x30
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
 800a4f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f107 0210 	add.w	r2, r7, #16
 800a504:	4611      	mov	r1, r2
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff fc0e 	bl	8009d28 <validate>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a516:	2b00      	cmp	r3, #0
 800a518:	d107      	bne.n	800a52a <f_write+0x44>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	7d5b      	ldrb	r3, [r3, #21]
 800a51e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a526:	2b00      	cmp	r3, #0
 800a528:	d009      	beq.n	800a53e <f_write+0x58>
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a530:	4611      	mov	r1, r2
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe f86a 	bl	800860c <unlock_fs>
 800a538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a53c:	e173      	b.n	800a826 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	7d1b      	ldrb	r3, [r3, #20]
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <f_write+0x72>
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	2107      	movs	r1, #7
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe f85c 	bl	800860c <unlock_fs>
 800a554:	2307      	movs	r3, #7
 800a556:	e166      	b.n	800a826 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	699a      	ldr	r2, [r3, #24]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	441a      	add	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	429a      	cmp	r2, r3
 800a566:	f080 814b 	bcs.w	800a800 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	43db      	mvns	r3, r3
 800a570:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a572:	e145      	b.n	800a800 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f040 8101 	bne.w	800a784 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	0a5b      	lsrs	r3, r3, #9
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	8952      	ldrh	r2, [r2, #10]
 800a58c:	3a01      	subs	r2, #1
 800a58e:	4013      	ands	r3, r2
 800a590:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d14d      	bne.n	800a634 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10c      	bne.n	800a5ba <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d11a      	bne.n	800a5e2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fcab 	bl	8008f0c <create_chain>
 800a5b6:	62b8      	str	r0, [r7, #40]	; 0x28
 800a5b8:	e013      	b.n	800a5e2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d007      	beq.n	800a5d2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7fe fd37 	bl	800903c <clmt_clust>
 800a5ce:	62b8      	str	r0, [r7, #40]	; 0x28
 800a5d0:	e007      	b.n	800a5e2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f7fe fc96 	bl	8008f0c <create_chain>
 800a5e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 8110 	beq.w	800a80a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d109      	bne.n	800a604 <f_write+0x11e>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	755a      	strb	r2, [r3, #21]
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	2102      	movs	r1, #2
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe f806 	bl	800860c <unlock_fs>
 800a600:	2302      	movs	r3, #2
 800a602:	e110      	b.n	800a826 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60a:	d109      	bne.n	800a620 <f_write+0x13a>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2201      	movs	r2, #1
 800a610:	755a      	strb	r2, [r3, #21]
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2101      	movs	r1, #1
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd fff8 	bl	800860c <unlock_fs>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e102      	b.n	800a826 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a624:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <f_write+0x14e>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a632:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	7d1b      	ldrb	r3, [r3, #20]
 800a638:	b25b      	sxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	da1d      	bge.n	800a67a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	7858      	ldrb	r0, [r3, #1]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6a1a      	ldr	r2, [r3, #32]
 800a64c:	2301      	movs	r3, #1
 800a64e:	f7fd fe89 	bl	8008364 <disk_write>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d009      	beq.n	800a66c <f_write+0x186>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2201      	movs	r2, #1
 800a65c:	755a      	strb	r2, [r3, #21]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2101      	movs	r1, #1
 800a662:	4618      	mov	r0, r3
 800a664:	f7fd ffd2 	bl	800860c <unlock_fs>
 800a668:	2301      	movs	r3, #1
 800a66a:	e0dc      	b.n	800a826 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	7d1b      	ldrb	r3, [r3, #20]
 800a670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a674:	b2da      	uxtb	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	4619      	mov	r1, r3
 800a682:	4610      	mov	r0, r2
 800a684:	f7fe fa2a 	bl	8008adc <clust2sect>
 800a688:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d109      	bne.n	800a6a4 <f_write+0x1be>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2202      	movs	r2, #2
 800a694:	755a      	strb	r2, [r3, #21]
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2102      	movs	r1, #2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fd ffb6 	bl	800860c <unlock_fs>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e0c0      	b.n	800a826 <f_write+0x340>
			sect += csect;
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	0a5b      	lsrs	r3, r3, #9
 800a6b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d041      	beq.n	800a73c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	4413      	add	r3, r2
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	8952      	ldrh	r2, [r2, #10]
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d905      	bls.n	800a6d2 <f_write+0x1ec>
					cc = fs->csize - csect;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	895b      	ldrh	r3, [r3, #10]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	7858      	ldrb	r0, [r3, #1]
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	69f9      	ldr	r1, [r7, #28]
 800a6dc:	f7fd fe42 	bl	8008364 <disk_write>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <f_write+0x214>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	755a      	strb	r2, [r3, #21]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fd ff8b 	bl	800860c <unlock_fs>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e095      	b.n	800a826 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6a1a      	ldr	r2, [r3, #32]
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	6a3a      	ldr	r2, [r7, #32]
 800a704:	429a      	cmp	r2, r3
 800a706:	d915      	bls.n	800a734 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1a      	ldr	r2, [r3, #32]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	025b      	lsls	r3, r3, #9
 800a718:	69fa      	ldr	r2, [r7, #28]
 800a71a:	4413      	add	r3, r2
 800a71c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a720:	4619      	mov	r1, r3
 800a722:	f7fd fedf 	bl	80084e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	7d1b      	ldrb	r3, [r3, #20]
 800a72a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	025b      	lsls	r3, r3, #9
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a73a:	e044      	b.n	800a7c6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6a1b      	ldr	r3, [r3, #32]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	429a      	cmp	r2, r3
 800a744:	d01b      	beq.n	800a77e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	699a      	ldr	r2, [r3, #24]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a74e:	429a      	cmp	r2, r3
 800a750:	d215      	bcs.n	800a77e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	7858      	ldrb	r0, [r3, #1]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a75c:	2301      	movs	r3, #1
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	f7fd fde0 	bl	8008324 <disk_read>
 800a764:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2201      	movs	r2, #1
 800a76e:	755a      	strb	r2, [r3, #21]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2101      	movs	r1, #1
 800a774:	4618      	mov	r0, r3
 800a776:	f7fd ff49 	bl	800860c <unlock_fs>
 800a77a:	2301      	movs	r3, #1
 800a77c:	e053      	b.n	800a826 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a790:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	429a      	cmp	r2, r3
 800a798:	d901      	bls.n	800a79e <f_write+0x2b8>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ac:	4413      	add	r3, r2
 800a7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b0:	69f9      	ldr	r1, [r7, #28]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fd fe96 	bl	80084e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	7d1b      	ldrb	r3, [r3, #20]
 800a7bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	4413      	add	r3, r2
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	699a      	ldr	r2, [r3, #24]
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d4:	441a      	add	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	619a      	str	r2, [r3, #24]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	bf38      	it	cc
 800a7e6:	461a      	movcc	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	60da      	str	r2, [r3, #12]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	441a      	add	r2, r3
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f47f aeb6 	bne.w	800a574 <f_write+0x8e>
 800a808:	e000      	b.n	800a80c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a80a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	7d1b      	ldrb	r3, [r3, #20]
 800a810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a814:	b2da      	uxtb	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	2100      	movs	r1, #0
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fd fef4 	bl	800860c <unlock_fs>
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3730      	adds	r7, #48	; 0x30
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b086      	sub	sp, #24
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f107 0208 	add.w	r2, r7, #8
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff fa72 	bl	8009d28 <validate>
 800a844:	4603      	mov	r3, r0
 800a846:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d16d      	bne.n	800a92a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	7d1b      	ldrb	r3, [r3, #20]
 800a852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a856:	2b00      	cmp	r3, #0
 800a858:	d067      	beq.n	800a92a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	7d1b      	ldrb	r3, [r3, #20]
 800a85e:	b25b      	sxtb	r3, r3
 800a860:	2b00      	cmp	r3, #0
 800a862:	da1a      	bge.n	800a89a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	7858      	ldrb	r0, [r3, #1]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1a      	ldr	r2, [r3, #32]
 800a872:	2301      	movs	r3, #1
 800a874:	f7fd fd76 	bl	8008364 <disk_write>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d006      	beq.n	800a88c <f_sync+0x5e>
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2101      	movs	r1, #1
 800a882:	4618      	mov	r0, r3
 800a884:	f7fd fec2 	bl	800860c <unlock_fs>
 800a888:	2301      	movs	r3, #1
 800a88a:	e055      	b.n	800a938 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	7d1b      	ldrb	r3, [r3, #20]
 800a890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a894:	b2da      	uxtb	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a89a:	f7fd fca3 	bl	80081e4 <get_fattime>
 800a89e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	f7fe f87b 	bl	80089a4 <move_window>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d138      	bne.n	800a92a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	330b      	adds	r3, #11
 800a8c2:	781a      	ldrb	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	330b      	adds	r3, #11
 800a8c8:	f042 0220 	orr.w	r2, r2, #32
 800a8cc:	b2d2      	uxtb	r2, r2
 800a8ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	f7fe fd88 	bl	80093f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f103 021c 	add.w	r2, r3, #28
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7fd fdcd 	bl	800848c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3316      	adds	r3, #22
 800a8f6:	6939      	ldr	r1, [r7, #16]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fd fdc7 	bl	800848c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3312      	adds	r3, #18
 800a902:	2100      	movs	r1, #0
 800a904:	4618      	mov	r0, r3
 800a906:	f7fd fda6 	bl	8008456 <st_word>
					fs->wflag = 1;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2201      	movs	r2, #1
 800a90e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe f874 	bl	8008a00 <sync_fs>
 800a918:	4603      	mov	r3, r0
 800a91a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	7d1b      	ldrb	r3, [r3, #20]
 800a920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a924:	b2da      	uxtb	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	7dfa      	ldrb	r2, [r7, #23]
 800a92e:	4611      	mov	r1, r2
 800a930:	4618      	mov	r0, r3
 800a932:	f7fd fe6b 	bl	800860c <unlock_fs>
 800a936:	7dfb      	ldrb	r3, [r7, #23]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff ff70 	bl	800a82e <f_sync>
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d11d      	bne.n	800a994 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f107 0208 	add.w	r2, r7, #8
 800a95e:	4611      	mov	r1, r2
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff f9e1 	bl	8009d28 <validate>
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a96a:	7bfb      	ldrb	r3, [r7, #15]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d111      	bne.n	800a994 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	4618      	mov	r0, r3
 800a976:	f7fd ff71 	bl	800885c <dec_lock>
 800a97a:	4603      	mov	r3, r0
 800a97c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d102      	bne.n	800a98a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2100      	movs	r1, #0
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fd fe3c 	bl	800860c <unlock_fs>
#endif
		}
	}
	return res;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b092      	sub	sp, #72	; 0x48
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	60f8      	str	r0, [r7, #12]
 800a9a6:	60b9      	str	r1, [r7, #8]
 800a9a8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a9aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a9ae:	f107 030c 	add.w	r3, r7, #12
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe ff63 	bl	8009880 <find_volume>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a9c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f040 8099 	bne.w	800aafc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	695a      	ldr	r2, [r3, #20]
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	699b      	ldr	r3, [r3, #24]
 800a9d8:	3b02      	subs	r3, #2
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d804      	bhi.n	800a9e8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	695a      	ldr	r2, [r3, #20]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	e089      	b.n	800aafc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d128      	bne.n	800aa46 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a9fc:	f107 0314 	add.w	r3, r7, #20
 800aa00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe f889 	bl	8008b1a <get_fat>
 800aa08:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa10:	d103      	bne.n	800aa1a <f_getfree+0x7c>
 800aa12:	2301      	movs	r3, #1
 800aa14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aa18:	e063      	b.n	800aae2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d103      	bne.n	800aa28 <f_getfree+0x8a>
 800aa20:	2302      	movs	r3, #2
 800aa22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aa26:	e05c      	b.n	800aae2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800aa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <f_getfree+0x96>
 800aa2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa30:	3301      	adds	r3, #1
 800aa32:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800aa34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa36:	3301      	adds	r3, #1
 800aa38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3db      	bcc.n	800a9fc <f_getfree+0x5e>
 800aa44:	e04d      	b.n	800aae2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	637b      	str	r3, [r7, #52]	; 0x34
 800aa56:	2300      	movs	r3, #0
 800aa58:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800aa5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d113      	bne.n	800aa88 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800aa60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	1c5a      	adds	r2, r3, #1
 800aa66:	63ba      	str	r2, [r7, #56]	; 0x38
 800aa68:	4619      	mov	r1, r3
 800aa6a:	f7fd ff9b 	bl	80089a4 <move_window>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800aa74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d131      	bne.n	800aae0 <f_getfree+0x142>
							p = fs->win;
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	3334      	adds	r3, #52	; 0x34
 800aa80:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800aa82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa86:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d10f      	bne.n	800aab0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800aa90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa92:	f7fd fca5 	bl	80083e0 <ld_word>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <f_getfree+0x104>
 800aa9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	3302      	adds	r3, #2
 800aaa6:	633b      	str	r3, [r7, #48]	; 0x30
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaaa:	3b02      	subs	r3, #2
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
 800aaae:	e010      	b.n	800aad2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800aab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aab2:	f7fd fcad 	bl	8008410 <ld_dword>
 800aab6:	4603      	mov	r3, r0
 800aab8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d102      	bne.n	800aac6 <f_getfree+0x128>
 800aac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac2:	3301      	adds	r3, #1
 800aac4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	3304      	adds	r3, #4
 800aaca:	633b      	str	r3, [r7, #48]	; 0x30
 800aacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aace:	3b04      	subs	r3, #4
 800aad0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800aad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad4:	3b01      	subs	r3, #1
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1bd      	bne.n	800aa5a <f_getfree+0xbc>
 800aade:	e000      	b.n	800aae2 <f_getfree+0x144>
							if (res != FR_OK) break;
 800aae0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aae6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	791a      	ldrb	r2, [r3, #4]
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	b2d2      	uxtb	r2, r2
 800aafa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800ab02:	4611      	mov	r1, r2
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fd fd81 	bl	800860c <unlock_fs>
 800ab0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3748      	adds	r7, #72	; 0x48
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b088      	sub	sp, #32
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ab2a:	e01b      	b.n	800ab64 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ab2c:	f107 0310 	add.w	r3, r7, #16
 800ab30:	f107 0114 	add.w	r1, r7, #20
 800ab34:	2201      	movs	r2, #1
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff fb67 	bl	800a20a <f_read>
		if (rc != 1) break;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d116      	bne.n	800ab70 <f_gets+0x5a>
		c = s[0];
 800ab42:	7d3b      	ldrb	r3, [r7, #20]
 800ab44:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	2b0d      	cmp	r3, #13
 800ab4a:	d100      	bne.n	800ab4e <f_gets+0x38>
 800ab4c:	e00a      	b.n	800ab64 <f_gets+0x4e>
		*p++ = c;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	61ba      	str	r2, [r7, #24]
 800ab54:	7dfa      	ldrb	r2, [r7, #23]
 800ab56:	701a      	strb	r2, [r3, #0]
		n++;
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	2b0a      	cmp	r3, #10
 800ab62:	d007      	beq.n	800ab74 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	dbde      	blt.n	800ab2c <f_gets+0x16>
 800ab6e:	e002      	b.n	800ab76 <f_gets+0x60>
		if (rc != 1) break;
 800ab70:	bf00      	nop
 800ab72:	e000      	b.n	800ab76 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800ab74:	bf00      	nop
	}
	*p = 0;
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <f_gets+0x70>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	e000      	b.n	800ab88 <f_gets+0x72>
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aba6:	4b1f      	ldr	r3, [pc, #124]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800aba8:	7a5b      	ldrb	r3, [r3, #9]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	d131      	bne.n	800ac14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800abb0:	4b1c      	ldr	r3, [pc, #112]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800abb2:	7a5b      	ldrb	r3, [r3, #9]
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	461a      	mov	r2, r3
 800abb8:	4b1a      	ldr	r3, [pc, #104]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800abba:	2100      	movs	r1, #0
 800abbc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800abbe:	4b19      	ldr	r3, [pc, #100]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800abc0:	7a5b      	ldrb	r3, [r3, #9]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	4a17      	ldr	r2, [pc, #92]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800abce:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800abd0:	7a5b      	ldrb	r3, [r3, #9]
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	461a      	mov	r2, r3
 800abd6:	4b13      	ldr	r3, [pc, #76]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800abd8:	4413      	add	r3, r2
 800abda:	79fa      	ldrb	r2, [r7, #7]
 800abdc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800abde:	4b11      	ldr	r3, [pc, #68]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800abe0:	7a5b      	ldrb	r3, [r3, #9]
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	b2d1      	uxtb	r1, r2
 800abe8:	4a0e      	ldr	r2, [pc, #56]	; (800ac24 <FATFS_LinkDriverEx+0x94>)
 800abea:	7251      	strb	r1, [r2, #9]
 800abec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800abee:	7dbb      	ldrb	r3, [r7, #22]
 800abf0:	3330      	adds	r3, #48	; 0x30
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	3301      	adds	r3, #1
 800abfc:	223a      	movs	r2, #58	; 0x3a
 800abfe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	3302      	adds	r3, #2
 800ac04:	222f      	movs	r2, #47	; 0x2f
 800ac06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	3303      	adds	r3, #3
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000364 	.word	0x20000364

0800ac28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac32:	2200      	movs	r2, #0
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff ffaa 	bl	800ab90 <FATFS_LinkDriverEx>
 800ac3c:	4603      	mov	r3, r0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	6039      	str	r1, [r7, #0]
 800ac50:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800ac52:	2200      	movs	r2, #0
 800ac54:	2101      	movs	r1, #1
 800ac56:	2001      	movs	r0, #1
 800ac58:	f000 fa85 	bl	800b166 <osSemaphoreNew>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	bf14      	ite	ne
 800ac6a:	2301      	movne	r3, #1
 800ac6c:	2300      	moveq	r3, #0
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	60fb      	str	r3, [r7, #12]

    return ret;
 800ac72:	68fb      	ldr	r3, [r7, #12]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fb8d 	bl	800b3a4 <osSemaphoreDelete>
#endif
    return 1;
 800ac8a:	2301      	movs	r3, #1
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800aca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fae7 	bl	800b278 <osSemaphoreAcquire>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800acb0:	2301      	movs	r3, #1
 800acb2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800acb4:	68fb      	ldr	r3, [r7, #12]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b082      	sub	sp, #8
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fb28 	bl	800b31c <osSemaphoreRelease>
#endif
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <__NVIC_SetPriority>:
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ace0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	db0a      	blt.n	800acfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	b2da      	uxtb	r2, r3
 800acec:	490c      	ldr	r1, [pc, #48]	; (800ad20 <__NVIC_SetPriority+0x4c>)
 800acee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acf2:	0112      	lsls	r2, r2, #4
 800acf4:	b2d2      	uxtb	r2, r2
 800acf6:	440b      	add	r3, r1
 800acf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800acfc:	e00a      	b.n	800ad14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	4908      	ldr	r1, [pc, #32]	; (800ad24 <__NVIC_SetPriority+0x50>)
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	f003 030f 	and.w	r3, r3, #15
 800ad0a:	3b04      	subs	r3, #4
 800ad0c:	0112      	lsls	r2, r2, #4
 800ad0e:	b2d2      	uxtb	r2, r2
 800ad10:	440b      	add	r3, r1
 800ad12:	761a      	strb	r2, [r3, #24]
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	e000e100 	.word	0xe000e100
 800ad24:	e000ed00 	.word	0xe000ed00

0800ad28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <SysTick_Handler+0x1c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad30:	f002 fb36 	bl	800d3a0 <xTaskGetSchedulerState>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d001      	beq.n	800ad3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad3a:	f003 fb1d 	bl	800e378 <xPortSysTickHandler>
  }
}
 800ad3e:	bf00      	nop
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	e000e010 	.word	0xe000e010

0800ad48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	f06f 0004 	mvn.w	r0, #4
 800ad52:	f7ff ffbf 	bl	800acd4 <__NVIC_SetPriority>
#endif
}
 800ad56:	bf00      	nop
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad62:	f3ef 8305 	mrs	r3, IPSR
 800ad66:	603b      	str	r3, [r7, #0]
  return(result);
 800ad68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad6e:	f06f 0305 	mvn.w	r3, #5
 800ad72:	607b      	str	r3, [r7, #4]
 800ad74:	e00c      	b.n	800ad90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad76:	4b0a      	ldr	r3, [pc, #40]	; (800ada0 <osKernelInitialize+0x44>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d105      	bne.n	800ad8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad7e:	4b08      	ldr	r3, [pc, #32]	; (800ada0 <osKernelInitialize+0x44>)
 800ad80:	2201      	movs	r2, #1
 800ad82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	e002      	b.n	800ad90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad90:	687b      	ldr	r3, [r7, #4]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	20000370 	.word	0x20000370

0800ada4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adaa:	f3ef 8305 	mrs	r3, IPSR
 800adae:	603b      	str	r3, [r7, #0]
  return(result);
 800adb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <osKernelStart+0x1a>
    stat = osErrorISR;
 800adb6:	f06f 0305 	mvn.w	r3, #5
 800adba:	607b      	str	r3, [r7, #4]
 800adbc:	e010      	b.n	800ade0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800adbe:	4b0b      	ldr	r3, [pc, #44]	; (800adec <osKernelStart+0x48>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d109      	bne.n	800adda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800adc6:	f7ff ffbf 	bl	800ad48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800adca:	4b08      	ldr	r3, [pc, #32]	; (800adec <osKernelStart+0x48>)
 800adcc:	2202      	movs	r2, #2
 800adce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800add0:	f001 fe8e 	bl	800caf0 <vTaskStartScheduler>
      stat = osOK;
 800add4:	2300      	movs	r3, #0
 800add6:	607b      	str	r3, [r7, #4]
 800add8:	e002      	b.n	800ade0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800adda:	f04f 33ff 	mov.w	r3, #4294967295
 800adde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ade0:	687b      	ldr	r3, [r7, #4]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000370 	.word	0x20000370

0800adf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08e      	sub	sp, #56	; 0x38
 800adf4:	af04      	add	r7, sp, #16
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800adfc:	2300      	movs	r3, #0
 800adfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae00:	f3ef 8305 	mrs	r3, IPSR
 800ae04:	617b      	str	r3, [r7, #20]
  return(result);
 800ae06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d17e      	bne.n	800af0a <osThreadNew+0x11a>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d07b      	beq.n	800af0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae12:	2380      	movs	r3, #128	; 0x80
 800ae14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae16:	2318      	movs	r3, #24
 800ae18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ae1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d045      	beq.n	800aeb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <osThreadNew+0x48>
        name = attr->name;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d008      	beq.n	800ae5e <osThreadNew+0x6e>
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	2b38      	cmp	r3, #56	; 0x38
 800ae50:	d805      	bhi.n	800ae5e <osThreadNew+0x6e>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <osThreadNew+0x72>
        return (NULL);
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e054      	b.n	800af0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d003      	beq.n	800ae72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	089b      	lsrs	r3, r3, #2
 800ae70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00e      	beq.n	800ae98 <osThreadNew+0xa8>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	2b5b      	cmp	r3, #91	; 0x5b
 800ae80:	d90a      	bls.n	800ae98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d006      	beq.n	800ae98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <osThreadNew+0xa8>
        mem = 1;
 800ae92:	2301      	movs	r3, #1
 800ae94:	61bb      	str	r3, [r7, #24]
 800ae96:	e010      	b.n	800aeba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10c      	bne.n	800aeba <osThreadNew+0xca>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d108      	bne.n	800aeba <osThreadNew+0xca>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d104      	bne.n	800aeba <osThreadNew+0xca>
          mem = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61bb      	str	r3, [r7, #24]
 800aeb4:	e001      	b.n	800aeba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d110      	bne.n	800aee2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aec8:	9202      	str	r2, [sp, #8]
 800aeca:	9301      	str	r3, [sp, #4]
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	6a3a      	ldr	r2, [r7, #32]
 800aed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f001 fc34 	bl	800c744 <xTaskCreateStatic>
 800aedc:	4603      	mov	r3, r0
 800aede:	613b      	str	r3, [r7, #16]
 800aee0:	e013      	b.n	800af0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d110      	bne.n	800af0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	f107 0310 	add.w	r3, r7, #16
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f001 fc7f 	bl	800c7fe <xTaskCreate>
 800af00:	4603      	mov	r3, r0
 800af02:	2b01      	cmp	r3, #1
 800af04:	d001      	beq.n	800af0a <osThreadNew+0x11a>
            hTask = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af0a:	693b      	ldr	r3, [r7, #16]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3728      	adds	r7, #40	; 0x28
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af1c:	f3ef 8305 	mrs	r3, IPSR
 800af20:	60bb      	str	r3, [r7, #8]
  return(result);
 800af22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af24:	2b00      	cmp	r3, #0
 800af26:	d003      	beq.n	800af30 <osDelay+0x1c>
    stat = osErrorISR;
 800af28:	f06f 0305 	mvn.w	r3, #5
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	e007      	b.n	800af40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d002      	beq.n	800af40 <osDelay+0x2c>
      vTaskDelay(ticks);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 fda4 	bl	800ca88 <vTaskDelay>
    }
  }

  return (stat);
 800af40:	68fb      	ldr	r3, [r7, #12]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b088      	sub	sp, #32
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af56:	f3ef 8305 	mrs	r3, IPSR
 800af5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800af5c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d174      	bne.n	800b04c <osMutexNew+0x102>
    if (attr != NULL) {
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d003      	beq.n	800af70 <osMutexNew+0x26>
      type = attr->attr_bits;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	61bb      	str	r3, [r7, #24]
 800af6e:	e001      	b.n	800af74 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <osMutexNew+0x3a>
      rmtx = 1U;
 800af7e:	2301      	movs	r3, #1
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	e001      	b.n	800af88 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f003 0308 	and.w	r3, r3, #8
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d15c      	bne.n	800b04c <osMutexNew+0x102>
      mem = -1;
 800af92:	f04f 33ff 	mov.w	r3, #4294967295
 800af96:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d015      	beq.n	800afca <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d006      	beq.n	800afb4 <osMutexNew+0x6a>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	2b4f      	cmp	r3, #79	; 0x4f
 800afac:	d902      	bls.n	800afb4 <osMutexNew+0x6a>
          mem = 1;
 800afae:	2301      	movs	r3, #1
 800afb0:	613b      	str	r3, [r7, #16]
 800afb2:	e00c      	b.n	800afce <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d108      	bne.n	800afce <osMutexNew+0x84>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d104      	bne.n	800afce <osMutexNew+0x84>
            mem = 0;
 800afc4:	2300      	movs	r3, #0
 800afc6:	613b      	str	r3, [r7, #16]
 800afc8:	e001      	b.n	800afce <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d112      	bne.n	800affa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d007      	beq.n	800afea <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	4619      	mov	r1, r3
 800afe0:	2004      	movs	r0, #4
 800afe2:	f000 fc5a 	bl	800b89a <xQueueCreateMutexStatic>
 800afe6:	61f8      	str	r0, [r7, #28]
 800afe8:	e016      	b.n	800b018 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	4619      	mov	r1, r3
 800aff0:	2001      	movs	r0, #1
 800aff2:	f000 fc52 	bl	800b89a <xQueueCreateMutexStatic>
 800aff6:	61f8      	str	r0, [r7, #28]
 800aff8:	e00e      	b.n	800b018 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10b      	bne.n	800b018 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d004      	beq.n	800b010 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b006:	2004      	movs	r0, #4
 800b008:	f000 fc2f 	bl	800b86a <xQueueCreateMutex>
 800b00c:	61f8      	str	r0, [r7, #28]
 800b00e:	e003      	b.n	800b018 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b010:	2001      	movs	r0, #1
 800b012:	f000 fc2a 	bl	800b86a <xQueueCreateMutex>
 800b016:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00c      	beq.n	800b038 <osMutexNew+0xee>
        if (attr != NULL) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <osMutexNew+0xe2>
          name = attr->name;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	e001      	b.n	800b030 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b030:	68f9      	ldr	r1, [r7, #12]
 800b032:	69f8      	ldr	r0, [r7, #28]
 800b034:	f001 fafe 	bl	800c634 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d006      	beq.n	800b04c <osMutexNew+0x102>
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d003      	beq.n	800b04c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	f043 0301 	orr.w	r3, r3, #1
 800b04a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b04c:	69fb      	ldr	r3, [r7, #28]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3720      	adds	r7, #32
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b056:	b580      	push	{r7, lr}
 800b058:	b086      	sub	sp, #24
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f023 0301 	bic.w	r3, r3, #1
 800b066:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b070:	2300      	movs	r3, #0
 800b072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b074:	f3ef 8305 	mrs	r3, IPSR
 800b078:	60bb      	str	r3, [r7, #8]
  return(result);
 800b07a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d003      	beq.n	800b088 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b080:	f06f 0305 	mvn.w	r3, #5
 800b084:	617b      	str	r3, [r7, #20]
 800b086:	e02c      	b.n	800b0e2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d103      	bne.n	800b096 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b08e:	f06f 0303 	mvn.w	r3, #3
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	e025      	b.n	800b0e2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d011      	beq.n	800b0c0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6938      	ldr	r0, [r7, #16]
 800b0a0:	f000 fc4a 	bl	800b938 <xQueueTakeMutexRecursive>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d01b      	beq.n	800b0e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b0b0:	f06f 0301 	mvn.w	r3, #1
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	e014      	b.n	800b0e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b0b8:	f06f 0302 	mvn.w	r3, #2
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	e010      	b.n	800b0e2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6938      	ldr	r0, [r7, #16]
 800b0c4:	f000 ffde 	bl	800c084 <xQueueSemaphoreTake>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d009      	beq.n	800b0e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b0d4:	f06f 0301 	mvn.w	r3, #1
 800b0d8:	617b      	str	r3, [r7, #20]
 800b0da:	e002      	b.n	800b0e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b0dc:	f06f 0302 	mvn.w	r3, #2
 800b0e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b0e2:	697b      	ldr	r3, [r7, #20]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f023 0301 	bic.w	r3, r3, #1
 800b0fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b104:	2300      	movs	r3, #0
 800b106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b108:	f3ef 8305 	mrs	r3, IPSR
 800b10c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b10e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b110:	2b00      	cmp	r3, #0
 800b112:	d003      	beq.n	800b11c <osMutexRelease+0x30>
    stat = osErrorISR;
 800b114:	f06f 0305 	mvn.w	r3, #5
 800b118:	617b      	str	r3, [r7, #20]
 800b11a:	e01f      	b.n	800b15c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d103      	bne.n	800b12a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b122:	f06f 0303 	mvn.w	r3, #3
 800b126:	617b      	str	r3, [r7, #20]
 800b128:	e018      	b.n	800b15c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d009      	beq.n	800b144 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b130:	6938      	ldr	r0, [r7, #16]
 800b132:	f000 fbcd 	bl	800b8d0 <xQueueGiveMutexRecursive>
 800b136:	4603      	mov	r3, r0
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d00f      	beq.n	800b15c <osMutexRelease+0x70>
        stat = osErrorResource;
 800b13c:	f06f 0302 	mvn.w	r3, #2
 800b140:	617b      	str	r3, [r7, #20]
 800b142:	e00b      	b.n	800b15c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b144:	2300      	movs	r3, #0
 800b146:	2200      	movs	r2, #0
 800b148:	2100      	movs	r1, #0
 800b14a:	6938      	ldr	r0, [r7, #16]
 800b14c:	f000 fc94 	bl	800ba78 <xQueueGenericSend>
 800b150:	4603      	mov	r3, r0
 800b152:	2b01      	cmp	r3, #1
 800b154:	d002      	beq.n	800b15c <osMutexRelease+0x70>
        stat = osErrorResource;
 800b156:	f06f 0302 	mvn.w	r3, #2
 800b15a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b15c:	697b      	ldr	r3, [r7, #20]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b166:	b580      	push	{r7, lr}
 800b168:	b08a      	sub	sp, #40	; 0x28
 800b16a:	af02      	add	r7, sp, #8
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b176:	f3ef 8305 	mrs	r3, IPSR
 800b17a:	613b      	str	r3, [r7, #16]
  return(result);
 800b17c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d175      	bne.n	800b26e <osSemaphoreNew+0x108>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d072      	beq.n	800b26e <osSemaphoreNew+0x108>
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d86e      	bhi.n	800b26e <osSemaphoreNew+0x108>
    mem = -1;
 800b190:	f04f 33ff 	mov.w	r3, #4294967295
 800b194:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d015      	beq.n	800b1c8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d006      	beq.n	800b1b2 <osSemaphoreNew+0x4c>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2b4f      	cmp	r3, #79	; 0x4f
 800b1aa:	d902      	bls.n	800b1b2 <osSemaphoreNew+0x4c>
        mem = 1;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	61bb      	str	r3, [r7, #24]
 800b1b0:	e00c      	b.n	800b1cc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d108      	bne.n	800b1cc <osSemaphoreNew+0x66>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d104      	bne.n	800b1cc <osSemaphoreNew+0x66>
          mem = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	e001      	b.n	800b1cc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d2:	d04c      	beq.n	800b26e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d128      	bne.n	800b22c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d10a      	bne.n	800b1f6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	2203      	movs	r2, #3
 800b1e6:	9200      	str	r2, [sp, #0]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	f000 fa4d 	bl	800b68c <xQueueGenericCreateStatic>
 800b1f2:	61f8      	str	r0, [r7, #28]
 800b1f4:	e005      	b.n	800b202 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	f000 fabe 	bl	800b77c <xQueueGenericCreate>
 800b200:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d022      	beq.n	800b24e <osSemaphoreNew+0xe8>
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01f      	beq.n	800b24e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b20e:	2300      	movs	r3, #0
 800b210:	2200      	movs	r2, #0
 800b212:	2100      	movs	r1, #0
 800b214:	69f8      	ldr	r0, [r7, #28]
 800b216:	f000 fc2f 	bl	800ba78 <xQueueGenericSend>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d016      	beq.n	800b24e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b220:	69f8      	ldr	r0, [r7, #28]
 800b222:	f001 f8bb 	bl	800c39c <vQueueDelete>
            hSemaphore = NULL;
 800b226:	2300      	movs	r3, #0
 800b228:	61fb      	str	r3, [r7, #28]
 800b22a:	e010      	b.n	800b24e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d108      	bne.n	800b244 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	461a      	mov	r2, r3
 800b238:	68b9      	ldr	r1, [r7, #8]
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f000 fbb2 	bl	800b9a4 <xQueueCreateCountingSemaphoreStatic>
 800b240:	61f8      	str	r0, [r7, #28]
 800b242:	e004      	b.n	800b24e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f000 fbe3 	bl	800ba12 <xQueueCreateCountingSemaphore>
 800b24c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00c      	beq.n	800b26e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	617b      	str	r3, [r7, #20]
 800b260:	e001      	b.n	800b266 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b262:	2300      	movs	r3, #0
 800b264:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b266:	6979      	ldr	r1, [r7, #20]
 800b268:	69f8      	ldr	r0, [r7, #28]
 800b26a:	f001 f9e3 	bl	800c634 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b26e:	69fb      	ldr	r3, [r7, #28]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3720      	adds	r7, #32
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b286:	2300      	movs	r3, #0
 800b288:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d103      	bne.n	800b298 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b290:	f06f 0303 	mvn.w	r3, #3
 800b294:	617b      	str	r3, [r7, #20]
 800b296:	e039      	b.n	800b30c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b298:	f3ef 8305 	mrs	r3, IPSR
 800b29c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b29e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d022      	beq.n	800b2ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b2aa:	f06f 0303 	mvn.w	r3, #3
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e02c      	b.n	800b30c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b2b6:	f107 0308 	add.w	r3, r7, #8
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	2100      	movs	r1, #0
 800b2be:	6938      	ldr	r0, [r7, #16]
 800b2c0:	f000 ffec 	bl	800c29c <xQueueReceiveFromISR>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d003      	beq.n	800b2d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b2ca:	f06f 0302 	mvn.w	r3, #2
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	e01c      	b.n	800b30c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d019      	beq.n	800b30c <osSemaphoreAcquire+0x94>
 800b2d8:	4b0f      	ldr	r3, [pc, #60]	; (800b318 <osSemaphoreAcquire+0xa0>)
 800b2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2de:	601a      	str	r2, [r3, #0]
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	e010      	b.n	800b30c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6938      	ldr	r0, [r7, #16]
 800b2ee:	f000 fec9 	bl	800c084 <xQueueSemaphoreTake>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d009      	beq.n	800b30c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b2fe:	f06f 0301 	mvn.w	r3, #1
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	e002      	b.n	800b30c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b306:	f06f 0302 	mvn.w	r3, #2
 800b30a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b30c:	697b      	ldr	r3, [r7, #20]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	e000ed04 	.word	0xe000ed04

0800b31c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b328:	2300      	movs	r3, #0
 800b32a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d103      	bne.n	800b33a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b332:	f06f 0303 	mvn.w	r3, #3
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e02c      	b.n	800b394 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b33a:	f3ef 8305 	mrs	r3, IPSR
 800b33e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b340:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b342:	2b00      	cmp	r3, #0
 800b344:	d01a      	beq.n	800b37c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b346:	2300      	movs	r3, #0
 800b348:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b34a:	f107 0308 	add.w	r3, r7, #8
 800b34e:	4619      	mov	r1, r3
 800b350:	6938      	ldr	r0, [r7, #16]
 800b352:	f000 fd2a 	bl	800bdaa <xQueueGiveFromISR>
 800b356:	4603      	mov	r3, r0
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d003      	beq.n	800b364 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b35c:	f06f 0302 	mvn.w	r3, #2
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	e017      	b.n	800b394 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d014      	beq.n	800b394 <osSemaphoreRelease+0x78>
 800b36a:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <osSemaphoreRelease+0x84>)
 800b36c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	e00b      	b.n	800b394 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b37c:	2300      	movs	r3, #0
 800b37e:	2200      	movs	r2, #0
 800b380:	2100      	movs	r1, #0
 800b382:	6938      	ldr	r0, [r7, #16]
 800b384:	f000 fb78 	bl	800ba78 <xQueueGenericSend>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d002      	beq.n	800b394 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b38e:	f06f 0302 	mvn.w	r3, #2
 800b392:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b394:	697b      	ldr	r3, [r7, #20]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	e000ed04 	.word	0xe000ed04

0800b3a4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b0:	f3ef 8305 	mrs	r3, IPSR
 800b3b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d003      	beq.n	800b3c4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b3bc:	f06f 0305 	mvn.w	r3, #5
 800b3c0:	617b      	str	r3, [r7, #20]
 800b3c2:	e00e      	b.n	800b3e2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d103      	bne.n	800b3d2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b3ca:	f06f 0303 	mvn.w	r3, #3
 800b3ce:	617b      	str	r3, [r7, #20]
 800b3d0:	e007      	b.n	800b3e2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b3d2:	6938      	ldr	r0, [r7, #16]
 800b3d4:	f001 f958 	bl	800c688 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b3dc:	6938      	ldr	r0, [r7, #16]
 800b3de:	f000 ffdd 	bl	800c39c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b3e2:	697b      	ldr	r3, [r7, #20]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	4a07      	ldr	r2, [pc, #28]	; (800b418 <vApplicationGetIdleTaskMemory+0x2c>)
 800b3fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	4a06      	ldr	r2, [pc, #24]	; (800b41c <vApplicationGetIdleTaskMemory+0x30>)
 800b402:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2280      	movs	r2, #128	; 0x80
 800b408:	601a      	str	r2, [r3, #0]
}
 800b40a:	bf00      	nop
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	20000374 	.word	0x20000374
 800b41c:	200003d0 	.word	0x200003d0

0800b420 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4a07      	ldr	r2, [pc, #28]	; (800b44c <vApplicationGetTimerTaskMemory+0x2c>)
 800b430:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	4a06      	ldr	r2, [pc, #24]	; (800b450 <vApplicationGetTimerTaskMemory+0x30>)
 800b436:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b43e:	601a      	str	r2, [r3, #0]
}
 800b440:	bf00      	nop
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	200005d0 	.word	0x200005d0
 800b450:	2000062c 	.word	0x2000062c

0800b454 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f103 0208 	add.w	r2, r3, #8
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f04f 32ff 	mov.w	r2, #4294967295
 800b46c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f103 0208 	add.w	r2, r3, #8
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f103 0208 	add.w	r2, r3, #8
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4a2:	bf00      	nop
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b085      	sub	sp, #20
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	689a      	ldr	r2, [r3, #8]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	601a      	str	r2, [r3, #0]
}
 800b4ea:	bf00      	nop
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b085      	sub	sp, #20
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50c:	d103      	bne.n	800b516 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	e00c      	b.n	800b530 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3308      	adds	r3, #8
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	e002      	b.n	800b524 <vListInsert+0x2e>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	60fb      	str	r3, [r7, #12]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d2f6      	bcs.n	800b51e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	1c5a      	adds	r2, r3, #1
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	601a      	str	r2, [r3, #0]
}
 800b55c:	bf00      	nop
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6892      	ldr	r2, [r2, #8]
 800b57e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	6852      	ldr	r2, [r2, #4]
 800b588:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	429a      	cmp	r2, r3
 800b592:	d103      	bne.n	800b59c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	689a      	ldr	r2, [r3, #8]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	1e5a      	subs	r2, r3, #1
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3714      	adds	r7, #20
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10a      	bne.n	800b5e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b5e6:	f002 fe35 	bl	800e254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	68f9      	ldr	r1, [r7, #12]
 800b5f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5f6:	fb01 f303 	mul.w	r3, r1, r3
 800b5fa:	441a      	add	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b616:	3b01      	subs	r3, #1
 800b618:	68f9      	ldr	r1, [r7, #12]
 800b61a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b61c:	fb01 f303 	mul.w	r3, r1, r3
 800b620:	441a      	add	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	22ff      	movs	r2, #255	; 0xff
 800b62a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	22ff      	movs	r2, #255	; 0xff
 800b632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d114      	bne.n	800b666 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d01a      	beq.n	800b67a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3310      	adds	r3, #16
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 fcdb 	bl	800d004 <xTaskRemoveFromEventList>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d012      	beq.n	800b67a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b654:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <xQueueGenericReset+0xcc>)
 800b656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	e009      	b.n	800b67a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3310      	adds	r3, #16
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff fef2 	bl	800b454 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3324      	adds	r3, #36	; 0x24
 800b674:	4618      	mov	r0, r3
 800b676:	f7ff feed 	bl	800b454 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b67a:	f002 fe1b 	bl	800e2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b67e:	2301      	movs	r3, #1
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08e      	sub	sp, #56	; 0x38
 800b690:	af02      	add	r7, sp, #8
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d002      	beq.n	800b6de <xQueueGenericCreateStatic+0x52>
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <xQueueGenericCreateStatic+0x56>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e000      	b.n	800b6e4 <xQueueGenericCreateStatic+0x58>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	623b      	str	r3, [r7, #32]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d102      	bne.n	800b70a <xQueueGenericCreateStatic+0x7e>
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <xQueueGenericCreateStatic+0x82>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e000      	b.n	800b710 <xQueueGenericCreateStatic+0x84>
 800b70e:	2300      	movs	r3, #0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	61fb      	str	r3, [r7, #28]
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b72a:	2350      	movs	r3, #80	; 0x50
 800b72c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2b50      	cmp	r3, #80	; 0x50
 800b732:	d00a      	beq.n	800b74a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	61bb      	str	r3, [r7, #24]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b74a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00d      	beq.n	800b772 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b75e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	4613      	mov	r3, r2
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 f83f 	bl	800b7f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b774:	4618      	mov	r0, r3
 800b776:	3730      	adds	r7, #48	; 0x30
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08a      	sub	sp, #40	; 0x28
 800b780:	af02      	add	r7, sp, #8
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10a      	bne.n	800b7a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	613b      	str	r3, [r7, #16]
}
 800b7a2:	bf00      	nop
 800b7a4:	e7fe      	b.n	800b7a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	fb02 f303 	mul.w	r3, r2, r3
 800b7ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	3350      	adds	r3, #80	; 0x50
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f002 fe6f 	bl	800e498 <pvPortMalloc>
 800b7ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d011      	beq.n	800b7e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	3350      	adds	r3, #80	; 0x50
 800b7ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7d4:	79fa      	ldrb	r2, [r7, #7]
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	68b9      	ldr	r1, [r7, #8]
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 f805 	bl	800b7f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7e6:	69bb      	ldr	r3, [r7, #24]
	}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3720      	adds	r7, #32
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d103      	bne.n	800b80c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	e002      	b.n	800b812 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b81e:	2101      	movs	r1, #1
 800b820:	69b8      	ldr	r0, [r7, #24]
 800b822:	f7ff fecb 	bl	800b5bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	78fa      	ldrb	r2, [r7, #3]
 800b82a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00e      	beq.n	800b862 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b856:	2300      	movs	r3, #0
 800b858:	2200      	movs	r2, #0
 800b85a:	2100      	movs	r1, #0
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f90b 	bl	800ba78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b086      	sub	sp, #24
 800b86e:	af00      	add	r7, sp, #0
 800b870:	4603      	mov	r3, r0
 800b872:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b874:	2301      	movs	r3, #1
 800b876:	617b      	str	r3, [r7, #20]
 800b878:	2300      	movs	r3, #0
 800b87a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b87c:	79fb      	ldrb	r3, [r7, #7]
 800b87e:	461a      	mov	r2, r3
 800b880:	6939      	ldr	r1, [r7, #16]
 800b882:	6978      	ldr	r0, [r7, #20]
 800b884:	f7ff ff7a 	bl	800b77c <xQueueGenericCreate>
 800b888:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7ff ffd3 	bl	800b836 <prvInitialiseMutex>

		return xNewQueue;
 800b890:	68fb      	ldr	r3, [r7, #12]
	}
 800b892:	4618      	mov	r0, r3
 800b894:	3718      	adds	r7, #24
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b088      	sub	sp, #32
 800b89e:	af02      	add	r7, sp, #8
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	6039      	str	r1, [r7, #0]
 800b8a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	617b      	str	r3, [r7, #20]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b8ae:	79fb      	ldrb	r3, [r7, #7]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	6939      	ldr	r1, [r7, #16]
 800b8b8:	6978      	ldr	r0, [r7, #20]
 800b8ba:	f7ff fee7 	bl	800b68c <xQueueGenericCreateStatic>
 800b8be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7ff ffb8 	bl	800b836 <prvInitialiseMutex>

		return xNewQueue;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
	}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b8d0:	b590      	push	{r4, r7, lr}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	60fb      	str	r3, [r7, #12]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	689c      	ldr	r4, [r3, #8]
 800b8fc:	f001 fd40 	bl	800d380 <xTaskGetCurrentTaskHandle>
 800b900:	4603      	mov	r3, r0
 800b902:	429c      	cmp	r4, r3
 800b904:	d111      	bne.n	800b92a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	1e5a      	subs	r2, r3, #1
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d105      	bne.n	800b924 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b918:	2300      	movs	r3, #0
 800b91a:	2200      	movs	r2, #0
 800b91c:	2100      	movs	r1, #0
 800b91e:	6938      	ldr	r0, [r7, #16]
 800b920:	f000 f8aa 	bl	800ba78 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b924:	2301      	movs	r3, #1
 800b926:	617b      	str	r3, [r7, #20]
 800b928:	e001      	b.n	800b92e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b92e:	697b      	ldr	r3, [r7, #20]
	}
 800b930:	4618      	mov	r0, r3
 800b932:	371c      	adds	r7, #28
 800b934:	46bd      	mov	sp, r7
 800b936:	bd90      	pop	{r4, r7, pc}

0800b938 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10a      	bne.n	800b962 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	60fb      	str	r3, [r7, #12]
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	689c      	ldr	r4, [r3, #8]
 800b966:	f001 fd0b 	bl	800d380 <xTaskGetCurrentTaskHandle>
 800b96a:	4603      	mov	r3, r0
 800b96c:	429c      	cmp	r4, r3
 800b96e:	d107      	bne.n	800b980 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b97a:	2301      	movs	r3, #1
 800b97c:	617b      	str	r3, [r7, #20]
 800b97e:	e00c      	b.n	800b99a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6938      	ldr	r0, [r7, #16]
 800b984:	f000 fb7e 	bl	800c084 <xQueueSemaphoreTake>
 800b988:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d004      	beq.n	800b99a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b99a:	697b      	ldr	r3, [r7, #20]
	}
 800b99c:	4618      	mov	r0, r3
 800b99e:	371c      	adds	r7, #28
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd90      	pop	{r4, r7, pc}

0800b9a4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08a      	sub	sp, #40	; 0x28
 800b9a8:	af02      	add	r7, sp, #8
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10a      	bne.n	800b9cc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	61bb      	str	r3, [r7, #24]
}
 800b9c8:	bf00      	nop
 800b9ca:	e7fe      	b.n	800b9ca <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d90a      	bls.n	800b9ea <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	617b      	str	r3, [r7, #20]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7ff fe49 	bl	800b68c <xQueueGenericCreateStatic>
 800b9fa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d002      	beq.n	800ba08 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ba08:	69fb      	ldr	r3, [r7, #28]
	}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3720      	adds	r7, #32
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b086      	sub	sp, #24
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10a      	bne.n	800ba38 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	613b      	str	r3, [r7, #16]
}
 800ba34:	bf00      	nop
 800ba36:	e7fe      	b.n	800ba36 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d90a      	bls.n	800ba56 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	60fb      	str	r3, [r7, #12]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ba56:	2202      	movs	r2, #2
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fe8e 	bl	800b77c <xQueueGenericCreate>
 800ba60:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ba6e:	697b      	ldr	r3, [r7, #20]
	}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b08e      	sub	sp, #56	; 0x38
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba86:	2300      	movs	r3, #0
 800ba88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10a      	bne.n	800baaa <xQueueGenericSend+0x32>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d103      	bne.n	800bab8 <xQueueGenericSend+0x40>
 800bab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <xQueueGenericSend+0x44>
 800bab8:	2301      	movs	r3, #1
 800baba:	e000      	b.n	800babe <xQueueGenericSend+0x46>
 800babc:	2300      	movs	r3, #0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10a      	bne.n	800bad8 <xQueueGenericSend+0x60>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bad4:	bf00      	nop
 800bad6:	e7fe      	b.n	800bad6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d103      	bne.n	800bae6 <xQueueGenericSend+0x6e>
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d101      	bne.n	800baea <xQueueGenericSend+0x72>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e000      	b.n	800baec <xQueueGenericSend+0x74>
 800baea:	2300      	movs	r3, #0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <xQueueGenericSend+0x8e>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	623b      	str	r3, [r7, #32]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb06:	f001 fc4b 	bl	800d3a0 <xTaskGetSchedulerState>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d102      	bne.n	800bb16 <xQueueGenericSend+0x9e>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <xQueueGenericSend+0xa2>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <xQueueGenericSend+0xa4>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10a      	bne.n	800bb36 <xQueueGenericSend+0xbe>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	61fb      	str	r3, [r7, #28]
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb36:	f002 fb8d 	bl	800e254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d302      	bcc.n	800bb4c <xQueueGenericSend+0xd4>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d129      	bne.n	800bba0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb52:	f000 fc5e 	bl	800c412 <prvCopyDataToQueue>
 800bb56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d010      	beq.n	800bb82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb62:	3324      	adds	r3, #36	; 0x24
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 fa4d 	bl	800d004 <xTaskRemoveFromEventList>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d013      	beq.n	800bb98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb70:	4b3f      	ldr	r3, [pc, #252]	; (800bc70 <xQueueGenericSend+0x1f8>)
 800bb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	e00a      	b.n	800bb98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb88:	4b39      	ldr	r3, [pc, #228]	; (800bc70 <xQueueGenericSend+0x1f8>)
 800bb8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb98:	f002 fb8c 	bl	800e2b4 <vPortExitCritical>
				return pdPASS;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e063      	b.n	800bc68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d103      	bne.n	800bbae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bba6:	f002 fb85 	bl	800e2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e05c      	b.n	800bc68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d106      	bne.n	800bbc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbb4:	f107 0314 	add.w	r3, r7, #20
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f001 fa87 	bl	800d0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbc2:	f002 fb77 	bl	800e2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbc6:	f000 fff9 	bl	800cbbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbca:	f002 fb43 	bl	800e254 <vPortEnterCritical>
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbd4:	b25b      	sxtb	r3, r3
 800bbd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbda:	d103      	bne.n	800bbe4 <xQueueGenericSend+0x16c>
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbea:	b25b      	sxtb	r3, r3
 800bbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf0:	d103      	bne.n	800bbfa <xQueueGenericSend+0x182>
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbfa:	f002 fb5b 	bl	800e2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbfe:	1d3a      	adds	r2, r7, #4
 800bc00:	f107 0314 	add.w	r3, r7, #20
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f001 fa76 	bl	800d0f8 <xTaskCheckForTimeOut>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d124      	bne.n	800bc5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc14:	f000 fcf5 	bl	800c602 <prvIsQueueFull>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d018      	beq.n	800bc50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	3310      	adds	r3, #16
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	4611      	mov	r1, r2
 800bc26:	4618      	mov	r0, r3
 800bc28:	f001 f99c 	bl	800cf64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc2e:	f000 fc80 	bl	800c532 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc32:	f000 ffd1 	bl	800cbd8 <xTaskResumeAll>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f47f af7c 	bne.w	800bb36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bc3e:	4b0c      	ldr	r3, [pc, #48]	; (800bc70 <xQueueGenericSend+0x1f8>)
 800bc40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	e772      	b.n	800bb36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc52:	f000 fc6e 	bl	800c532 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc56:	f000 ffbf 	bl	800cbd8 <xTaskResumeAll>
 800bc5a:	e76c      	b.n	800bb36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc5e:	f000 fc68 	bl	800c532 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc62:	f000 ffb9 	bl	800cbd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3738      	adds	r7, #56	; 0x38
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	e000ed04 	.word	0xe000ed04

0800bc74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b090      	sub	sp, #64	; 0x40
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
 800bc80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d103      	bne.n	800bcb0 <xQueueGenericSendFromISR+0x3c>
 800bca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d101      	bne.n	800bcb4 <xQueueGenericSendFromISR+0x40>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e000      	b.n	800bcb6 <xQueueGenericSendFromISR+0x42>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10a      	bne.n	800bcd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d103      	bne.n	800bcde <xQueueGenericSendFromISR+0x6a>
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d101      	bne.n	800bce2 <xQueueGenericSendFromISR+0x6e>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <xQueueGenericSendFromISR+0x70>
 800bce2:	2300      	movs	r3, #0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	623b      	str	r3, [r7, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcfe:	f002 fb8b 	bl	800e418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd02:	f3ef 8211 	mrs	r2, BASEPRI
 800bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	61fa      	str	r2, [r7, #28]
 800bd18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d302      	bcc.n	800bd30 <xQueueGenericSendFromISR+0xbc>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d12f      	bne.n	800bd90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd46:	f000 fb64 	bl	800c412 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd52:	d112      	bne.n	800bd7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d016      	beq.n	800bd8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5e:	3324      	adds	r3, #36	; 0x24
 800bd60:	4618      	mov	r0, r3
 800bd62:	f001 f94f 	bl	800d004 <xTaskRemoveFromEventList>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00e      	beq.n	800bd8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00b      	beq.n	800bd8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	e007      	b.n	800bd8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd7e:	3301      	adds	r3, #1
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	b25a      	sxtb	r2, r3
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bd8e:	e001      	b.n	800bd94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3740      	adds	r7, #64	; 0x40
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b08e      	sub	sp, #56	; 0x38
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	623b      	str	r3, [r7, #32]
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00a      	beq.n	800bdf2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	61fb      	str	r3, [r7, #28]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d103      	bne.n	800be02 <xQueueGiveFromISR+0x58>
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <xQueueGiveFromISR+0x5c>
 800be02:	2301      	movs	r3, #1
 800be04:	e000      	b.n	800be08 <xQueueGiveFromISR+0x5e>
 800be06:	2300      	movs	r3, #0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10a      	bne.n	800be22 <xQueueGiveFromISR+0x78>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	61bb      	str	r3, [r7, #24]
}
 800be1e:	bf00      	nop
 800be20:	e7fe      	b.n	800be20 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be22:	f002 faf9 	bl	800e418 <vPortValidateInterruptPriority>
	__asm volatile
 800be26:	f3ef 8211 	mrs	r2, BASEPRI
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	617a      	str	r2, [r7, #20]
 800be3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800be3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800be48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be4e:	429a      	cmp	r2, r3
 800be50:	d22b      	bcs.n	800beaa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6c:	d112      	bne.n	800be94 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be72:	2b00      	cmp	r3, #0
 800be74:	d016      	beq.n	800bea4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	3324      	adds	r3, #36	; 0x24
 800be7a:	4618      	mov	r0, r3
 800be7c:	f001 f8c2 	bl	800d004 <xTaskRemoveFromEventList>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00e      	beq.n	800bea4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	2201      	movs	r2, #1
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	e007      	b.n	800bea4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be98:	3301      	adds	r3, #1
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	b25a      	sxtb	r2, r3
 800be9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bea4:	2301      	movs	r3, #1
 800bea6:	637b      	str	r3, [r7, #52]	; 0x34
 800bea8:	e001      	b.n	800beae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800beaa:	2300      	movs	r3, #0
 800beac:	637b      	str	r3, [r7, #52]	; 0x34
 800beae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f383 8811 	msr	BASEPRI, r3
}
 800beb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800beba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3738      	adds	r7, #56	; 0x38
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08c      	sub	sp, #48	; 0x30
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bed0:	2300      	movs	r3, #0
 800bed2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10a      	bne.n	800bef4 <xQueueReceive+0x30>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	623b      	str	r3, [r7, #32]
}
 800bef0:	bf00      	nop
 800bef2:	e7fe      	b.n	800bef2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d103      	bne.n	800bf02 <xQueueReceive+0x3e>
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d101      	bne.n	800bf06 <xQueueReceive+0x42>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e000      	b.n	800bf08 <xQueueReceive+0x44>
 800bf06:	2300      	movs	r3, #0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10a      	bne.n	800bf22 <xQueueReceive+0x5e>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	61fb      	str	r3, [r7, #28]
}
 800bf1e:	bf00      	nop
 800bf20:	e7fe      	b.n	800bf20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf22:	f001 fa3d 	bl	800d3a0 <xTaskGetSchedulerState>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <xQueueReceive+0x6e>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d101      	bne.n	800bf36 <xQueueReceive+0x72>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e000      	b.n	800bf38 <xQueueReceive+0x74>
 800bf36:	2300      	movs	r3, #0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xQueueReceive+0x8e>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	61bb      	str	r3, [r7, #24]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf52:	f002 f97f 	bl	800e254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d01f      	beq.n	800bfa2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf66:	f000 fabe 	bl	800c4e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	1e5a      	subs	r2, r3, #1
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00f      	beq.n	800bf9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	3310      	adds	r3, #16
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f001 f840 	bl	800d004 <xTaskRemoveFromEventList>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d007      	beq.n	800bf9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf8a:	4b3d      	ldr	r3, [pc, #244]	; (800c080 <xQueueReceive+0x1bc>)
 800bf8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf9a:	f002 f98b 	bl	800e2b4 <vPortExitCritical>
				return pdPASS;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e069      	b.n	800c076 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d103      	bne.n	800bfb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfa8:	f002 f984 	bl	800e2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfac:	2300      	movs	r3, #0
 800bfae:	e062      	b.n	800c076 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d106      	bne.n	800bfc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfb6:	f107 0310 	add.w	r3, r7, #16
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f001 f886 	bl	800d0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfc4:	f002 f976 	bl	800e2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfc8:	f000 fdf8 	bl	800cbbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfcc:	f002 f942 	bl	800e254 <vPortEnterCritical>
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfd6:	b25b      	sxtb	r3, r3
 800bfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfdc:	d103      	bne.n	800bfe6 <xQueueReceive+0x122>
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfec:	b25b      	sxtb	r3, r3
 800bfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff2:	d103      	bne.n	800bffc <xQueueReceive+0x138>
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bffc:	f002 f95a 	bl	800e2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c000:	1d3a      	adds	r2, r7, #4
 800c002:	f107 0310 	add.w	r3, r7, #16
 800c006:	4611      	mov	r1, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	f001 f875 	bl	800d0f8 <xTaskCheckForTimeOut>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d123      	bne.n	800c05c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c016:	f000 fade 	bl	800c5d6 <prvIsQueueEmpty>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d017      	beq.n	800c050 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	3324      	adds	r3, #36	; 0x24
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 ff9b 	bl	800cf64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c030:	f000 fa7f 	bl	800c532 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c034:	f000 fdd0 	bl	800cbd8 <xTaskResumeAll>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d189      	bne.n	800bf52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c03e:	4b10      	ldr	r3, [pc, #64]	; (800c080 <xQueueReceive+0x1bc>)
 800c040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	e780      	b.n	800bf52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c052:	f000 fa6e 	bl	800c532 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c056:	f000 fdbf 	bl	800cbd8 <xTaskResumeAll>
 800c05a:	e77a      	b.n	800bf52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c05c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c05e:	f000 fa68 	bl	800c532 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c062:	f000 fdb9 	bl	800cbd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c068:	f000 fab5 	bl	800c5d6 <prvIsQueueEmpty>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f43f af6f 	beq.w	800bf52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c074:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c076:	4618      	mov	r0, r3
 800c078:	3730      	adds	r7, #48	; 0x30
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08e      	sub	sp, #56	; 0x38
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c08e:	2300      	movs	r3, #0
 800c090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c096:	2300      	movs	r3, #0
 800c098:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10a      	bne.n	800c0b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	623b      	str	r3, [r7, #32]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00a      	beq.n	800c0d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	61fb      	str	r3, [r7, #28]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0d4:	f001 f964 	bl	800d3a0 <xTaskGetSchedulerState>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d102      	bne.n	800c0e4 <xQueueSemaphoreTake+0x60>
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d101      	bne.n	800c0e8 <xQueueSemaphoreTake+0x64>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e000      	b.n	800c0ea <xQueueSemaphoreTake+0x66>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	61bb      	str	r3, [r7, #24]
}
 800c100:	bf00      	nop
 800c102:	e7fe      	b.n	800c102 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c104:	f002 f8a6 	bl	800e254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c110:	2b00      	cmp	r3, #0
 800c112:	d024      	beq.n	800c15e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	1e5a      	subs	r2, r3, #1
 800c118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d104      	bne.n	800c12e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c124:	f001 fab2 	bl	800d68c <pvTaskIncrementMutexHeldCount>
 800c128:	4602      	mov	r2, r0
 800c12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00f      	beq.n	800c156 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	3310      	adds	r3, #16
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 ff62 	bl	800d004 <xTaskRemoveFromEventList>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c146:	4b54      	ldr	r3, [pc, #336]	; (800c298 <xQueueSemaphoreTake+0x214>)
 800c148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c156:	f002 f8ad 	bl	800e2b4 <vPortExitCritical>
				return pdPASS;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e097      	b.n	800c28e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d111      	bne.n	800c188 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00a      	beq.n	800c180 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	617b      	str	r3, [r7, #20]
}
 800c17c:	bf00      	nop
 800c17e:	e7fe      	b.n	800c17e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c180:	f002 f898 	bl	800e2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c184:	2300      	movs	r3, #0
 800c186:	e082      	b.n	800c28e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c18e:	f107 030c 	add.w	r3, r7, #12
 800c192:	4618      	mov	r0, r3
 800c194:	f000 ff9a 	bl	800d0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c198:	2301      	movs	r3, #1
 800c19a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c19c:	f002 f88a 	bl	800e2b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1a0:	f000 fd0c 	bl	800cbbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1a4:	f002 f856 	bl	800e254 <vPortEnterCritical>
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ae:	b25b      	sxtb	r3, r3
 800c1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b4:	d103      	bne.n	800c1be <xQueueSemaphoreTake+0x13a>
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c4:	b25b      	sxtb	r3, r3
 800c1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ca:	d103      	bne.n	800c1d4 <xQueueSemaphoreTake+0x150>
 800c1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1d4:	f002 f86e 	bl	800e2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1d8:	463a      	mov	r2, r7
 800c1da:	f107 030c 	add.w	r3, r7, #12
 800c1de:	4611      	mov	r1, r2
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 ff89 	bl	800d0f8 <xTaskCheckForTimeOut>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d132      	bne.n	800c252 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1ee:	f000 f9f2 	bl	800c5d6 <prvIsQueueEmpty>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d026      	beq.n	800c246 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d109      	bne.n	800c214 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c200:	f002 f828 	bl	800e254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	4618      	mov	r0, r3
 800c20a:	f001 f8e7 	bl	800d3dc <xTaskPriorityInherit>
 800c20e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c210:	f002 f850 	bl	800e2b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	3324      	adds	r3, #36	; 0x24
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	4611      	mov	r1, r2
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fea1 	bl	800cf64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c224:	f000 f985 	bl	800c532 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c228:	f000 fcd6 	bl	800cbd8 <xTaskResumeAll>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f47f af68 	bne.w	800c104 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c234:	4b18      	ldr	r3, [pc, #96]	; (800c298 <xQueueSemaphoreTake+0x214>)
 800c236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	e75e      	b.n	800c104 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c248:	f000 f973 	bl	800c532 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c24c:	f000 fcc4 	bl	800cbd8 <xTaskResumeAll>
 800c250:	e758      	b.n	800c104 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c254:	f000 f96d 	bl	800c532 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c258:	f000 fcbe 	bl	800cbd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c25c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c25e:	f000 f9ba 	bl	800c5d6 <prvIsQueueEmpty>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	f43f af4d 	beq.w	800c104 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00d      	beq.n	800c28c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c270:	f001 fff0 	bl	800e254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c276:	f000 f8b4 	bl	800c3e2 <prvGetDisinheritPriorityAfterTimeout>
 800c27a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c282:	4618      	mov	r0, r3
 800c284:	f001 f980 	bl	800d588 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c288:	f002 f814 	bl	800e2b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c28c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3738      	adds	r7, #56	; 0x38
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	e000ed04 	.word	0xe000ed04

0800c29c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08e      	sub	sp, #56	; 0x38
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10a      	bne.n	800c2c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	623b      	str	r3, [r7, #32]
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d103      	bne.n	800c2d6 <xQueueReceiveFromISR+0x3a>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <xQueueReceiveFromISR+0x3e>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <xQueueReceiveFromISR+0x40>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	61fb      	str	r3, [r7, #28]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2f6:	f002 f88f 	bl	800e418 <vPortValidateInterruptPriority>
	__asm volatile
 800c2fa:	f3ef 8211 	mrs	r2, BASEPRI
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	61ba      	str	r2, [r7, #24]
 800c310:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c312:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c314:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d02f      	beq.n	800c382 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c330:	f000 f8d9 	bl	800c4e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	1e5a      	subs	r2, r3, #1
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c33c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c344:	d112      	bne.n	800c36c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d016      	beq.n	800c37c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	3310      	adds	r3, #16
 800c352:	4618      	mov	r0, r3
 800c354:	f000 fe56 	bl	800d004 <xTaskRemoveFromEventList>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00e      	beq.n	800c37c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00b      	beq.n	800c37c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	601a      	str	r2, [r3, #0]
 800c36a:	e007      	b.n	800c37c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c370:	3301      	adds	r3, #1
 800c372:	b2db      	uxtb	r3, r3
 800c374:	b25a      	sxtb	r2, r3
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c37c:	2301      	movs	r3, #1
 800c37e:	637b      	str	r3, [r7, #52]	; 0x34
 800c380:	e001      	b.n	800c386 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c382:	2300      	movs	r3, #0
 800c384:	637b      	str	r3, [r7, #52]	; 0x34
 800c386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c388:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f383 8811 	msr	BASEPRI, r3
}
 800c390:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c394:	4618      	mov	r0, r3
 800c396:	3738      	adds	r7, #56	; 0x38
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10a      	bne.n	800c3c4 <vQueueDelete+0x28>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	60bb      	str	r3, [r7, #8]
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f000 f95f 	bl	800c688 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f002 f92b 	bl	800e630 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b085      	sub	sp, #20
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d006      	beq.n	800c400 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e001      	b.n	800c404 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c400:	2300      	movs	r3, #0
 800c402:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c404:	68fb      	ldr	r3, [r7, #12]
	}
 800c406:	4618      	mov	r0, r3
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b086      	sub	sp, #24
 800c416:	af00      	add	r7, sp, #0
 800c418:	60f8      	str	r0, [r7, #12]
 800c41a:	60b9      	str	r1, [r7, #8]
 800c41c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c41e:	2300      	movs	r3, #0
 800c420:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c426:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10d      	bne.n	800c44c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d14d      	bne.n	800c4d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 f835 	bl	800d4ac <xTaskPriorityDisinherit>
 800c442:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	609a      	str	r2, [r3, #8]
 800c44a:	e043      	b.n	800c4d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d119      	bne.n	800c486 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6858      	ldr	r0, [r3, #4]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	461a      	mov	r2, r3
 800c45c:	68b9      	ldr	r1, [r7, #8]
 800c45e:	f002 fa33 	bl	800e8c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46a:	441a      	add	r2, r3
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d32b      	bcc.n	800c4d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	605a      	str	r2, [r3, #4]
 800c484:	e026      	b.n	800c4d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	68d8      	ldr	r0, [r3, #12]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48e:	461a      	mov	r2, r3
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	f002 fa19 	bl	800e8c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c49e:	425b      	negs	r3, r3
 800c4a0:	441a      	add	r2, r3
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	68da      	ldr	r2, [r3, #12]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d207      	bcs.n	800c4c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	689a      	ldr	r2, [r3, #8]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ba:	425b      	negs	r3, r3
 800c4bc:	441a      	add	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d105      	bne.n	800c4d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c4dc:	697b      	ldr	r3, [r7, #20]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3718      	adds	r7, #24
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d018      	beq.n	800c52a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c500:	441a      	add	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68da      	ldr	r2, [r3, #12]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d303      	bcc.n	800c51a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68d9      	ldr	r1, [r3, #12]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c522:	461a      	mov	r2, r3
 800c524:	6838      	ldr	r0, [r7, #0]
 800c526:	f002 f9cf 	bl	800e8c8 <memcpy>
	}
}
 800c52a:	bf00      	nop
 800c52c:	3708      	adds	r7, #8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b084      	sub	sp, #16
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c53a:	f001 fe8b 	bl	800e254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c544:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c546:	e011      	b.n	800c56c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d012      	beq.n	800c576 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	3324      	adds	r3, #36	; 0x24
 800c554:	4618      	mov	r0, r3
 800c556:	f000 fd55 	bl	800d004 <xTaskRemoveFromEventList>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d001      	beq.n	800c564 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c560:	f000 fe2c 	bl	800d1bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	3b01      	subs	r3, #1
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c570:	2b00      	cmp	r3, #0
 800c572:	dce9      	bgt.n	800c548 <prvUnlockQueue+0x16>
 800c574:	e000      	b.n	800c578 <prvUnlockQueue+0x46>
					break;
 800c576:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	22ff      	movs	r2, #255	; 0xff
 800c57c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c580:	f001 fe98 	bl	800e2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c584:	f001 fe66 	bl	800e254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c58e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c590:	e011      	b.n	800c5b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d012      	beq.n	800c5c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3310      	adds	r3, #16
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f000 fd30 	bl	800d004 <xTaskRemoveFromEventList>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c5aa:	f000 fe07 	bl	800d1bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	dce9      	bgt.n	800c592 <prvUnlockQueue+0x60>
 800c5be:	e000      	b.n	800c5c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c5c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	22ff      	movs	r2, #255	; 0xff
 800c5c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c5ca:	f001 fe73 	bl	800e2b4 <vPortExitCritical>
}
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b084      	sub	sp, #16
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c5de:	f001 fe39 	bl	800e254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d102      	bne.n	800c5f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	e001      	b.n	800c5f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c5f4:	f001 fe5e 	bl	800e2b4 <vPortExitCritical>

	return xReturn;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c60a:	f001 fe23 	bl	800e254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c616:	429a      	cmp	r2, r3
 800c618:	d102      	bne.n	800c620 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c61a:	2301      	movs	r3, #1
 800c61c:	60fb      	str	r3, [r7, #12]
 800c61e:	e001      	b.n	800c624 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c620:	2300      	movs	r3, #0
 800c622:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c624:	f001 fe46 	bl	800e2b4 <vPortExitCritical>

	return xReturn;
 800c628:	68fb      	ldr	r3, [r7, #12]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
	...

0800c634 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c63e:	2300      	movs	r3, #0
 800c640:	60fb      	str	r3, [r7, #12]
 800c642:	e014      	b.n	800c66e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c644:	4a0f      	ldr	r2, [pc, #60]	; (800c684 <vQueueAddToRegistry+0x50>)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10b      	bne.n	800c668 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c650:	490c      	ldr	r1, [pc, #48]	; (800c684 <vQueueAddToRegistry+0x50>)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c65a:	4a0a      	ldr	r2, [pc, #40]	; (800c684 <vQueueAddToRegistry+0x50>)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	4413      	add	r3, r2
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c666:	e006      	b.n	800c676 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3301      	adds	r3, #1
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b07      	cmp	r3, #7
 800c672:	d9e7      	bls.n	800c644 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c674:	bf00      	nop
 800c676:	bf00      	nop
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	20005b0c 	.word	0x20005b0c

0800c688 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c690:	2300      	movs	r3, #0
 800c692:	60fb      	str	r3, [r7, #12]
 800c694:	e016      	b.n	800c6c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c696:	4a10      	ldr	r2, [pc, #64]	; (800c6d8 <vQueueUnregisterQueue+0x50>)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	4413      	add	r3, r2
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d10b      	bne.n	800c6be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c6a6:	4a0c      	ldr	r2, [pc, #48]	; (800c6d8 <vQueueUnregisterQueue+0x50>)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c6b0:	4a09      	ldr	r2, [pc, #36]	; (800c6d8 <vQueueUnregisterQueue+0x50>)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	4413      	add	r3, r2
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	605a      	str	r2, [r3, #4]
				break;
 800c6bc:	e006      	b.n	800c6cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2b07      	cmp	r3, #7
 800c6c8:	d9e5      	bls.n	800c696 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c6ca:	bf00      	nop
 800c6cc:	bf00      	nop
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	20005b0c 	.word	0x20005b0c

0800c6dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c6ec:	f001 fdb2 	bl	800e254 <vPortEnterCritical>
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6f6:	b25b      	sxtb	r3, r3
 800c6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fc:	d103      	bne.n	800c706 <vQueueWaitForMessageRestricted+0x2a>
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	2200      	movs	r2, #0
 800c702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c70c:	b25b      	sxtb	r3, r3
 800c70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c712:	d103      	bne.n	800c71c <vQueueWaitForMessageRestricted+0x40>
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2200      	movs	r2, #0
 800c718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c71c:	f001 fdca 	bl	800e2b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c724:	2b00      	cmp	r3, #0
 800c726:	d106      	bne.n	800c736 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	3324      	adds	r3, #36	; 0x24
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	68b9      	ldr	r1, [r7, #8]
 800c730:	4618      	mov	r0, r3
 800c732:	f000 fc3b 	bl	800cfac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c736:	6978      	ldr	r0, [r7, #20]
 800c738:	f7ff fefb 	bl	800c532 <prvUnlockQueue>
	}
 800c73c:	bf00      	nop
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c744:	b580      	push	{r7, lr}
 800c746:	b08e      	sub	sp, #56	; 0x38
 800c748:	af04      	add	r7, sp, #16
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
 800c750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10a      	bne.n	800c76e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	623b      	str	r3, [r7, #32]
}
 800c76a:	bf00      	nop
 800c76c:	e7fe      	b.n	800c76c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10a      	bne.n	800c78a <xTaskCreateStatic+0x46>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	61fb      	str	r3, [r7, #28]
}
 800c786:	bf00      	nop
 800c788:	e7fe      	b.n	800c788 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c78a:	235c      	movs	r3, #92	; 0x5c
 800c78c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	2b5c      	cmp	r3, #92	; 0x5c
 800c792:	d00a      	beq.n	800c7aa <xTaskCreateStatic+0x66>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	61bb      	str	r3, [r7, #24]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d01e      	beq.n	800c7f0 <xTaskCreateStatic+0xac>
 800c7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d01b      	beq.n	800c7f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	9303      	str	r3, [sp, #12]
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	9302      	str	r3, [sp, #8]
 800c7d2:	f107 0314 	add.w	r3, r7, #20
 800c7d6:	9301      	str	r3, [sp, #4]
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	68b9      	ldr	r1, [r7, #8]
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f000 f850 	bl	800c888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7ea:	f000 f8dd 	bl	800c9a8 <prvAddNewTaskToReadyList>
 800c7ee:	e001      	b.n	800c7f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c7f4:	697b      	ldr	r3, [r7, #20]
	}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3728      	adds	r7, #40	; 0x28
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b08c      	sub	sp, #48	; 0x30
 800c802:	af04      	add	r7, sp, #16
 800c804:	60f8      	str	r0, [r7, #12]
 800c806:	60b9      	str	r1, [r7, #8]
 800c808:	603b      	str	r3, [r7, #0]
 800c80a:	4613      	mov	r3, r2
 800c80c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c80e:	88fb      	ldrh	r3, [r7, #6]
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4618      	mov	r0, r3
 800c814:	f001 fe40 	bl	800e498 <pvPortMalloc>
 800c818:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00e      	beq.n	800c83e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c820:	205c      	movs	r0, #92	; 0x5c
 800c822:	f001 fe39 	bl	800e498 <pvPortMalloc>
 800c826:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	631a      	str	r2, [r3, #48]	; 0x30
 800c834:	e005      	b.n	800c842 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c836:	6978      	ldr	r0, [r7, #20]
 800c838:	f001 fefa 	bl	800e630 <vPortFree>
 800c83c:	e001      	b.n	800c842 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c83e:	2300      	movs	r3, #0
 800c840:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d017      	beq.n	800c878 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c850:	88fa      	ldrh	r2, [r7, #6]
 800c852:	2300      	movs	r3, #0
 800c854:	9303      	str	r3, [sp, #12]
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	9302      	str	r3, [sp, #8]
 800c85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	68b9      	ldr	r1, [r7, #8]
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f000 f80e 	bl	800c888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c86c:	69f8      	ldr	r0, [r7, #28]
 800c86e:	f000 f89b 	bl	800c9a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c872:	2301      	movs	r3, #1
 800c874:	61bb      	str	r3, [r7, #24]
 800c876:	e002      	b.n	800c87e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c878:	f04f 33ff 	mov.w	r3, #4294967295
 800c87c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c87e:	69bb      	ldr	r3, [r7, #24]
	}
 800c880:	4618      	mov	r0, r3
 800c882:	3720      	adds	r7, #32
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b088      	sub	sp, #32
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	461a      	mov	r2, r3
 800c8a0:	21a5      	movs	r1, #165	; 0xa5
 800c8a2:	f002 f81f 	bl	800e8e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	f023 0307 	bic.w	r3, r3, #7
 800c8be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	617b      	str	r3, [r7, #20]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d01f      	beq.n	800c926 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	61fb      	str	r3, [r7, #28]
 800c8ea:	e012      	b.n	800c912 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	7819      	ldrb	r1, [r3, #0]
 800c8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	3334      	adds	r3, #52	; 0x34
 800c8fc:	460a      	mov	r2, r1
 800c8fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	4413      	add	r3, r2
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d006      	beq.n	800c91a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	3301      	adds	r3, #1
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	2b0f      	cmp	r3, #15
 800c916:	d9e9      	bls.n	800c8ec <prvInitialiseNewTask+0x64>
 800c918:	e000      	b.n	800c91c <prvInitialiseNewTask+0x94>
			{
				break;
 800c91a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c924:	e003      	b.n	800c92e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	2b37      	cmp	r3, #55	; 0x37
 800c932:	d901      	bls.n	800c938 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c934:	2337      	movs	r3, #55	; 0x37
 800c936:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c93c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c942:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	2200      	movs	r2, #0
 800c948:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	3304      	adds	r3, #4
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fe fda0 	bl	800b494 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c956:	3318      	adds	r3, #24
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fe fd9b 	bl	800b494 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c962:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c966:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c972:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c976:	2200      	movs	r2, #0
 800c978:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	68f9      	ldr	r1, [r7, #12]
 800c986:	69b8      	ldr	r0, [r7, #24]
 800c988:	f001 fb36 	bl	800dff8 <pxPortInitialiseStack>
 800c98c:	4602      	mov	r2, r0
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c99c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c99e:	bf00      	nop
 800c9a0:	3720      	adds	r7, #32
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
	...

0800c9a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9b0:	f001 fc50 	bl	800e254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9b4:	4b2d      	ldr	r3, [pc, #180]	; (800ca6c <prvAddNewTaskToReadyList+0xc4>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	4a2c      	ldr	r2, [pc, #176]	; (800ca6c <prvAddNewTaskToReadyList+0xc4>)
 800c9bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9be:	4b2c      	ldr	r3, [pc, #176]	; (800ca70 <prvAddNewTaskToReadyList+0xc8>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d109      	bne.n	800c9da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c9c6:	4a2a      	ldr	r2, [pc, #168]	; (800ca70 <prvAddNewTaskToReadyList+0xc8>)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c9cc:	4b27      	ldr	r3, [pc, #156]	; (800ca6c <prvAddNewTaskToReadyList+0xc4>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d110      	bne.n	800c9f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c9d4:	f000 fc16 	bl	800d204 <prvInitialiseTaskLists>
 800c9d8:	e00d      	b.n	800c9f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c9da:	4b26      	ldr	r3, [pc, #152]	; (800ca74 <prvAddNewTaskToReadyList+0xcc>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d109      	bne.n	800c9f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c9e2:	4b23      	ldr	r3, [pc, #140]	; (800ca70 <prvAddNewTaskToReadyList+0xc8>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d802      	bhi.n	800c9f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c9f0:	4a1f      	ldr	r2, [pc, #124]	; (800ca70 <prvAddNewTaskToReadyList+0xc8>)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c9f6:	4b20      	ldr	r3, [pc, #128]	; (800ca78 <prvAddNewTaskToReadyList+0xd0>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	4a1e      	ldr	r2, [pc, #120]	; (800ca78 <prvAddNewTaskToReadyList+0xd0>)
 800c9fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ca00:	4b1d      	ldr	r3, [pc, #116]	; (800ca78 <prvAddNewTaskToReadyList+0xd0>)
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0c:	4b1b      	ldr	r3, [pc, #108]	; (800ca7c <prvAddNewTaskToReadyList+0xd4>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d903      	bls.n	800ca1c <prvAddNewTaskToReadyList+0x74>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	4a18      	ldr	r2, [pc, #96]	; (800ca7c <prvAddNewTaskToReadyList+0xd4>)
 800ca1a:	6013      	str	r3, [r2, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca20:	4613      	mov	r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	4413      	add	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4a15      	ldr	r2, [pc, #84]	; (800ca80 <prvAddNewTaskToReadyList+0xd8>)
 800ca2a:	441a      	add	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3304      	adds	r3, #4
 800ca30:	4619      	mov	r1, r3
 800ca32:	4610      	mov	r0, r2
 800ca34:	f7fe fd3b 	bl	800b4ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca38:	f001 fc3c 	bl	800e2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca3c:	4b0d      	ldr	r3, [pc, #52]	; (800ca74 <prvAddNewTaskToReadyList+0xcc>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00e      	beq.n	800ca62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca44:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <prvAddNewTaskToReadyList+0xc8>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d207      	bcs.n	800ca62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca52:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <prvAddNewTaskToReadyList+0xdc>)
 800ca54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20000f00 	.word	0x20000f00
 800ca70:	20000a2c 	.word	0x20000a2c
 800ca74:	20000f0c 	.word	0x20000f0c
 800ca78:	20000f1c 	.word	0x20000f1c
 800ca7c:	20000f08 	.word	0x20000f08
 800ca80:	20000a30 	.word	0x20000a30
 800ca84:	e000ed04 	.word	0xe000ed04

0800ca88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d017      	beq.n	800caca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca9a:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <vTaskDelay+0x60>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00a      	beq.n	800cab8 <vTaskDelay+0x30>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	60bb      	str	r3, [r7, #8]
}
 800cab4:	bf00      	nop
 800cab6:	e7fe      	b.n	800cab6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cab8:	f000 f880 	bl	800cbbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cabc:	2100      	movs	r1, #0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fef8 	bl	800d8b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cac4:	f000 f888 	bl	800cbd8 <xTaskResumeAll>
 800cac8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d107      	bne.n	800cae0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <vTaskDelay+0x64>)
 800cad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cae0:	bf00      	nop
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	20000f28 	.word	0x20000f28
 800caec:	e000ed04 	.word	0xe000ed04

0800caf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b08a      	sub	sp, #40	; 0x28
 800caf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cafe:	463a      	mov	r2, r7
 800cb00:	1d39      	adds	r1, r7, #4
 800cb02:	f107 0308 	add.w	r3, r7, #8
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fc70 	bl	800b3ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	9202      	str	r2, [sp, #8]
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	2300      	movs	r3, #0
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	460a      	mov	r2, r1
 800cb1e:	4921      	ldr	r1, [pc, #132]	; (800cba4 <vTaskStartScheduler+0xb4>)
 800cb20:	4821      	ldr	r0, [pc, #132]	; (800cba8 <vTaskStartScheduler+0xb8>)
 800cb22:	f7ff fe0f 	bl	800c744 <xTaskCreateStatic>
 800cb26:	4603      	mov	r3, r0
 800cb28:	4a20      	ldr	r2, [pc, #128]	; (800cbac <vTaskStartScheduler+0xbc>)
 800cb2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb2c:	4b1f      	ldr	r3, [pc, #124]	; (800cbac <vTaskStartScheduler+0xbc>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d002      	beq.n	800cb3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb34:	2301      	movs	r3, #1
 800cb36:	617b      	str	r3, [r7, #20]
 800cb38:	e001      	b.n	800cb3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d102      	bne.n	800cb4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cb44:	f000 ff0a 	bl	800d95c <xTimerCreateTimerTask>
 800cb48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d116      	bne.n	800cb7e <vTaskStartScheduler+0x8e>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	613b      	str	r3, [r7, #16]
}
 800cb62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb64:	4b12      	ldr	r3, [pc, #72]	; (800cbb0 <vTaskStartScheduler+0xc0>)
 800cb66:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb6c:	4b11      	ldr	r3, [pc, #68]	; (800cbb4 <vTaskStartScheduler+0xc4>)
 800cb6e:	2201      	movs	r2, #1
 800cb70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb72:	4b11      	ldr	r3, [pc, #68]	; (800cbb8 <vTaskStartScheduler+0xc8>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb78:	f001 faca 	bl	800e110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb7c:	e00e      	b.n	800cb9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb84:	d10a      	bne.n	800cb9c <vTaskStartScheduler+0xac>
	__asm volatile
 800cb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8a:	f383 8811 	msr	BASEPRI, r3
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	60fb      	str	r3, [r7, #12]
}
 800cb98:	bf00      	nop
 800cb9a:	e7fe      	b.n	800cb9a <vTaskStartScheduler+0xaa>
}
 800cb9c:	bf00      	nop
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	080132f0 	.word	0x080132f0
 800cba8:	0800d1d5 	.word	0x0800d1d5
 800cbac:	20000f24 	.word	0x20000f24
 800cbb0:	20000f20 	.word	0x20000f20
 800cbb4:	20000f0c 	.word	0x20000f0c
 800cbb8:	20000f04 	.word	0x20000f04

0800cbbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cbc0:	4b04      	ldr	r3, [pc, #16]	; (800cbd4 <vTaskSuspendAll+0x18>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	4a03      	ldr	r2, [pc, #12]	; (800cbd4 <vTaskSuspendAll+0x18>)
 800cbc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cbca:	bf00      	nop
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr
 800cbd4:	20000f28 	.word	0x20000f28

0800cbd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cbe6:	4b42      	ldr	r3, [pc, #264]	; (800ccf0 <xTaskResumeAll+0x118>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10a      	bne.n	800cc04 <xTaskResumeAll+0x2c>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	603b      	str	r3, [r7, #0]
}
 800cc00:	bf00      	nop
 800cc02:	e7fe      	b.n	800cc02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc04:	f001 fb26 	bl	800e254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc08:	4b39      	ldr	r3, [pc, #228]	; (800ccf0 <xTaskResumeAll+0x118>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	4a38      	ldr	r2, [pc, #224]	; (800ccf0 <xTaskResumeAll+0x118>)
 800cc10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc12:	4b37      	ldr	r3, [pc, #220]	; (800ccf0 <xTaskResumeAll+0x118>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d162      	bne.n	800cce0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc1a:	4b36      	ldr	r3, [pc, #216]	; (800ccf4 <xTaskResumeAll+0x11c>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d05e      	beq.n	800cce0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc22:	e02f      	b.n	800cc84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc24:	4b34      	ldr	r3, [pc, #208]	; (800ccf8 <xTaskResumeAll+0x120>)
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	3318      	adds	r3, #24
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fe fc99 	bl	800b568 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3304      	adds	r3, #4
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fe fc94 	bl	800b568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc44:	4b2d      	ldr	r3, [pc, #180]	; (800ccfc <xTaskResumeAll+0x124>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d903      	bls.n	800cc54 <xTaskResumeAll+0x7c>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc50:	4a2a      	ldr	r2, [pc, #168]	; (800ccfc <xTaskResumeAll+0x124>)
 800cc52:	6013      	str	r3, [r2, #0]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc58:	4613      	mov	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4a27      	ldr	r2, [pc, #156]	; (800cd00 <xTaskResumeAll+0x128>)
 800cc62:	441a      	add	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3304      	adds	r3, #4
 800cc68:	4619      	mov	r1, r3
 800cc6a:	4610      	mov	r0, r2
 800cc6c:	f7fe fc1f 	bl	800b4ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc74:	4b23      	ldr	r3, [pc, #140]	; (800cd04 <xTaskResumeAll+0x12c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d302      	bcc.n	800cc84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cc7e:	4b22      	ldr	r3, [pc, #136]	; (800cd08 <xTaskResumeAll+0x130>)
 800cc80:	2201      	movs	r2, #1
 800cc82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc84:	4b1c      	ldr	r3, [pc, #112]	; (800ccf8 <xTaskResumeAll+0x120>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1cb      	bne.n	800cc24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d001      	beq.n	800cc96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc92:	f000 fb55 	bl	800d340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cc96:	4b1d      	ldr	r3, [pc, #116]	; (800cd0c <xTaskResumeAll+0x134>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d010      	beq.n	800ccc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cca2:	f000 f847 	bl	800cd34 <xTaskIncrementTick>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ccac:	4b16      	ldr	r3, [pc, #88]	; (800cd08 <xTaskResumeAll+0x130>)
 800ccae:	2201      	movs	r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1f1      	bne.n	800cca2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ccbe:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <xTaskResumeAll+0x134>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ccc4:	4b10      	ldr	r3, [pc, #64]	; (800cd08 <xTaskResumeAll+0x130>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d009      	beq.n	800cce0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cccc:	2301      	movs	r3, #1
 800ccce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ccd0:	4b0f      	ldr	r3, [pc, #60]	; (800cd10 <xTaskResumeAll+0x138>)
 800ccd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd6:	601a      	str	r2, [r3, #0]
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cce0:	f001 fae8 	bl	800e2b4 <vPortExitCritical>

	return xAlreadyYielded;
 800cce4:	68bb      	ldr	r3, [r7, #8]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000f28 	.word	0x20000f28
 800ccf4:	20000f00 	.word	0x20000f00
 800ccf8:	20000ec0 	.word	0x20000ec0
 800ccfc:	20000f08 	.word	0x20000f08
 800cd00:	20000a30 	.word	0x20000a30
 800cd04:	20000a2c 	.word	0x20000a2c
 800cd08:	20000f14 	.word	0x20000f14
 800cd0c:	20000f10 	.word	0x20000f10
 800cd10:	e000ed04 	.word	0xe000ed04

0800cd14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd1a:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <xTaskGetTickCount+0x1c>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cd20:	687b      	ldr	r3, [r7, #4]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	20000f04 	.word	0x20000f04

0800cd34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd3e:	4b4f      	ldr	r3, [pc, #316]	; (800ce7c <xTaskIncrementTick+0x148>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f040 808f 	bne.w	800ce66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd48:	4b4d      	ldr	r3, [pc, #308]	; (800ce80 <xTaskIncrementTick+0x14c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd50:	4a4b      	ldr	r2, [pc, #300]	; (800ce80 <xTaskIncrementTick+0x14c>)
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d120      	bne.n	800cd9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd5c:	4b49      	ldr	r3, [pc, #292]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00a      	beq.n	800cd7c <xTaskIncrementTick+0x48>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	603b      	str	r3, [r7, #0]
}
 800cd78:	bf00      	nop
 800cd7a:	e7fe      	b.n	800cd7a <xTaskIncrementTick+0x46>
 800cd7c:	4b41      	ldr	r3, [pc, #260]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	60fb      	str	r3, [r7, #12]
 800cd82:	4b41      	ldr	r3, [pc, #260]	; (800ce88 <xTaskIncrementTick+0x154>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a3f      	ldr	r2, [pc, #252]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cd88:	6013      	str	r3, [r2, #0]
 800cd8a:	4a3f      	ldr	r2, [pc, #252]	; (800ce88 <xTaskIncrementTick+0x154>)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	4b3e      	ldr	r3, [pc, #248]	; (800ce8c <xTaskIncrementTick+0x158>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	3301      	adds	r3, #1
 800cd96:	4a3d      	ldr	r2, [pc, #244]	; (800ce8c <xTaskIncrementTick+0x158>)
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	f000 fad1 	bl	800d340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd9e:	4b3c      	ldr	r3, [pc, #240]	; (800ce90 <xTaskIncrementTick+0x15c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	693a      	ldr	r2, [r7, #16]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d349      	bcc.n	800ce3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cda8:	4b36      	ldr	r3, [pc, #216]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d104      	bne.n	800cdbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdb2:	4b37      	ldr	r3, [pc, #220]	; (800ce90 <xTaskIncrementTick+0x15c>)
 800cdb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb8:	601a      	str	r2, [r3, #0]
					break;
 800cdba:	e03f      	b.n	800ce3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdbc:	4b31      	ldr	r3, [pc, #196]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d203      	bcs.n	800cddc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cdd4:	4a2e      	ldr	r2, [pc, #184]	; (800ce90 <xTaskIncrementTick+0x15c>)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cdda:	e02f      	b.n	800ce3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	3304      	adds	r3, #4
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe fbc1 	bl	800b568 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d004      	beq.n	800cdf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	3318      	adds	r3, #24
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fe fbb8 	bl	800b568 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfc:	4b25      	ldr	r3, [pc, #148]	; (800ce94 <xTaskIncrementTick+0x160>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d903      	bls.n	800ce0c <xTaskIncrementTick+0xd8>
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce08:	4a22      	ldr	r2, [pc, #136]	; (800ce94 <xTaskIncrementTick+0x160>)
 800ce0a:	6013      	str	r3, [r2, #0]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce10:	4613      	mov	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4a1f      	ldr	r2, [pc, #124]	; (800ce98 <xTaskIncrementTick+0x164>)
 800ce1a:	441a      	add	r2, r3
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	4619      	mov	r1, r3
 800ce22:	4610      	mov	r0, r2
 800ce24:	f7fe fb43 	bl	800b4ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2c:	4b1b      	ldr	r3, [pc, #108]	; (800ce9c <xTaskIncrementTick+0x168>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d3b8      	bcc.n	800cda8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ce36:	2301      	movs	r3, #1
 800ce38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce3a:	e7b5      	b.n	800cda8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce3c:	4b17      	ldr	r3, [pc, #92]	; (800ce9c <xTaskIncrementTick+0x168>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce42:	4915      	ldr	r1, [pc, #84]	; (800ce98 <xTaskIncrementTick+0x164>)
 800ce44:	4613      	mov	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	440b      	add	r3, r1
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d901      	bls.n	800ce58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ce54:	2301      	movs	r3, #1
 800ce56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce58:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <xTaskIncrementTick+0x16c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d007      	beq.n	800ce70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ce60:	2301      	movs	r3, #1
 800ce62:	617b      	str	r3, [r7, #20]
 800ce64:	e004      	b.n	800ce70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce66:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <xTaskIncrementTick+0x170>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	4a0d      	ldr	r2, [pc, #52]	; (800cea4 <xTaskIncrementTick+0x170>)
 800ce6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce70:	697b      	ldr	r3, [r7, #20]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3718      	adds	r7, #24
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20000f28 	.word	0x20000f28
 800ce80:	20000f04 	.word	0x20000f04
 800ce84:	20000eb8 	.word	0x20000eb8
 800ce88:	20000ebc 	.word	0x20000ebc
 800ce8c:	20000f18 	.word	0x20000f18
 800ce90:	20000f20 	.word	0x20000f20
 800ce94:	20000f08 	.word	0x20000f08
 800ce98:	20000a30 	.word	0x20000a30
 800ce9c:	20000a2c 	.word	0x20000a2c
 800cea0:	20000f14 	.word	0x20000f14
 800cea4:	20000f10 	.word	0x20000f10

0800cea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ceae:	4b28      	ldr	r3, [pc, #160]	; (800cf50 <vTaskSwitchContext+0xa8>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d003      	beq.n	800cebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ceb6:	4b27      	ldr	r3, [pc, #156]	; (800cf54 <vTaskSwitchContext+0xac>)
 800ceb8:	2201      	movs	r2, #1
 800ceba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cebc:	e041      	b.n	800cf42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800cebe:	4b25      	ldr	r3, [pc, #148]	; (800cf54 <vTaskSwitchContext+0xac>)
 800cec0:	2200      	movs	r2, #0
 800cec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cec4:	4b24      	ldr	r3, [pc, #144]	; (800cf58 <vTaskSwitchContext+0xb0>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	e010      	b.n	800ceee <vTaskSwitchContext+0x46>
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10a      	bne.n	800cee8 <vTaskSwitchContext+0x40>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	607b      	str	r3, [r7, #4]
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <vTaskSwitchContext+0x3e>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	491b      	ldr	r1, [pc, #108]	; (800cf5c <vTaskSwitchContext+0xb4>)
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4613      	mov	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4413      	add	r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	440b      	add	r3, r1
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d0e4      	beq.n	800cecc <vTaskSwitchContext+0x24>
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	4613      	mov	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4413      	add	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4a13      	ldr	r2, [pc, #76]	; (800cf5c <vTaskSwitchContext+0xb4>)
 800cf0e:	4413      	add	r3, r2
 800cf10:	60bb      	str	r3, [r7, #8]
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	605a      	str	r2, [r3, #4]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	3308      	adds	r3, #8
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d104      	bne.n	800cf32 <vTaskSwitchContext+0x8a>
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	605a      	str	r2, [r3, #4]
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	4a09      	ldr	r2, [pc, #36]	; (800cf60 <vTaskSwitchContext+0xb8>)
 800cf3a:	6013      	str	r3, [r2, #0]
 800cf3c:	4a06      	ldr	r2, [pc, #24]	; (800cf58 <vTaskSwitchContext+0xb0>)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6013      	str	r3, [r2, #0]
}
 800cf42:	bf00      	nop
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	20000f28 	.word	0x20000f28
 800cf54:	20000f14 	.word	0x20000f14
 800cf58:	20000f08 	.word	0x20000f08
 800cf5c:	20000a30 	.word	0x20000a30
 800cf60:	20000a2c 	.word	0x20000a2c

0800cf64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10a      	bne.n	800cf8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	60fb      	str	r3, [r7, #12]
}
 800cf86:	bf00      	nop
 800cf88:	e7fe      	b.n	800cf88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf8a:	4b07      	ldr	r3, [pc, #28]	; (800cfa8 <vTaskPlaceOnEventList+0x44>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3318      	adds	r3, #24
 800cf90:	4619      	mov	r1, r3
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7fe faaf 	bl	800b4f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf98:	2101      	movs	r1, #1
 800cf9a:	6838      	ldr	r0, [r7, #0]
 800cf9c:	f000 fc8a 	bl	800d8b4 <prvAddCurrentTaskToDelayedList>
}
 800cfa0:	bf00      	nop
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	20000a2c 	.word	0x20000a2c

0800cfac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b086      	sub	sp, #24
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	617b      	str	r3, [r7, #20]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cfd4:	4b0a      	ldr	r3, [pc, #40]	; (800d000 <vTaskPlaceOnEventListRestricted+0x54>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3318      	adds	r3, #24
 800cfda:	4619      	mov	r1, r3
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f7fe fa66 	bl	800b4ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cfee:	6879      	ldr	r1, [r7, #4]
 800cff0:	68b8      	ldr	r0, [r7, #8]
 800cff2:	f000 fc5f 	bl	800d8b4 <prvAddCurrentTaskToDelayedList>
	}
 800cff6:	bf00      	nop
 800cff8:	3718      	adds	r7, #24
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000a2c 	.word	0x20000a2c

0800d004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10a      	bne.n	800d030 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	60fb      	str	r3, [r7, #12]
}
 800d02c:	bf00      	nop
 800d02e:	e7fe      	b.n	800d02e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	3318      	adds	r3, #24
 800d034:	4618      	mov	r0, r3
 800d036:	f7fe fa97 	bl	800b568 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d03a:	4b1e      	ldr	r3, [pc, #120]	; (800d0b4 <xTaskRemoveFromEventList+0xb0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d11d      	bne.n	800d07e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	3304      	adds	r3, #4
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe fa8e 	bl	800b568 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d050:	4b19      	ldr	r3, [pc, #100]	; (800d0b8 <xTaskRemoveFromEventList+0xb4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	429a      	cmp	r2, r3
 800d056:	d903      	bls.n	800d060 <xTaskRemoveFromEventList+0x5c>
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	4a16      	ldr	r2, [pc, #88]	; (800d0b8 <xTaskRemoveFromEventList+0xb4>)
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d064:	4613      	mov	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4a13      	ldr	r2, [pc, #76]	; (800d0bc <xTaskRemoveFromEventList+0xb8>)
 800d06e:	441a      	add	r2, r3
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	3304      	adds	r3, #4
 800d074:	4619      	mov	r1, r3
 800d076:	4610      	mov	r0, r2
 800d078:	f7fe fa19 	bl	800b4ae <vListInsertEnd>
 800d07c:	e005      	b.n	800d08a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	3318      	adds	r3, #24
 800d082:	4619      	mov	r1, r3
 800d084:	480e      	ldr	r0, [pc, #56]	; (800d0c0 <xTaskRemoveFromEventList+0xbc>)
 800d086:	f7fe fa12 	bl	800b4ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08e:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <xTaskRemoveFromEventList+0xc0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d094:	429a      	cmp	r2, r3
 800d096:	d905      	bls.n	800d0a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d098:	2301      	movs	r3, #1
 800d09a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d09c:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <xTaskRemoveFromEventList+0xc4>)
 800d09e:	2201      	movs	r2, #1
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	e001      	b.n	800d0a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d0a8:	697b      	ldr	r3, [r7, #20]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3718      	adds	r7, #24
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000f28 	.word	0x20000f28
 800d0b8:	20000f08 	.word	0x20000f08
 800d0bc:	20000a30 	.word	0x20000a30
 800d0c0:	20000ec0 	.word	0x20000ec0
 800d0c4:	20000a2c 	.word	0x20000a2c
 800d0c8:	20000f14 	.word	0x20000f14

0800d0cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d0d4:	4b06      	ldr	r3, [pc, #24]	; (800d0f0 <vTaskInternalSetTimeOutState+0x24>)
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d0dc:	4b05      	ldr	r3, [pc, #20]	; (800d0f4 <vTaskInternalSetTimeOutState+0x28>)
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	605a      	str	r2, [r3, #4]
}
 800d0e4:	bf00      	nop
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	20000f18 	.word	0x20000f18
 800d0f4:	20000f04 	.word	0x20000f04

0800d0f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b088      	sub	sp, #32
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	613b      	str	r3, [r7, #16]
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10a      	bne.n	800d13a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d128:	f383 8811 	msr	BASEPRI, r3
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	60fb      	str	r3, [r7, #12]
}
 800d136:	bf00      	nop
 800d138:	e7fe      	b.n	800d138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d13a:	f001 f88b 	bl	800e254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d13e:	4b1d      	ldr	r3, [pc, #116]	; (800d1b4 <xTaskCheckForTimeOut+0xbc>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	69ba      	ldr	r2, [r7, #24]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d156:	d102      	bne.n	800d15e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d158:	2300      	movs	r3, #0
 800d15a:	61fb      	str	r3, [r7, #28]
 800d15c:	e023      	b.n	800d1a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	4b15      	ldr	r3, [pc, #84]	; (800d1b8 <xTaskCheckForTimeOut+0xc0>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	429a      	cmp	r2, r3
 800d168:	d007      	beq.n	800d17a <xTaskCheckForTimeOut+0x82>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	69ba      	ldr	r2, [r7, #24]
 800d170:	429a      	cmp	r2, r3
 800d172:	d302      	bcc.n	800d17a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d174:	2301      	movs	r3, #1
 800d176:	61fb      	str	r3, [r7, #28]
 800d178:	e015      	b.n	800d1a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	429a      	cmp	r2, r3
 800d182:	d20b      	bcs.n	800d19c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	1ad2      	subs	r2, r2, r3
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff ff9b 	bl	800d0cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d196:	2300      	movs	r3, #0
 800d198:	61fb      	str	r3, [r7, #28]
 800d19a:	e004      	b.n	800d1a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d1a6:	f001 f885 	bl	800e2b4 <vPortExitCritical>

	return xReturn;
 800d1aa:	69fb      	ldr	r3, [r7, #28]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3720      	adds	r7, #32
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	20000f04 	.word	0x20000f04
 800d1b8:	20000f18 	.word	0x20000f18

0800d1bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d1bc:	b480      	push	{r7}
 800d1be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d1c0:	4b03      	ldr	r3, [pc, #12]	; (800d1d0 <vTaskMissedYield+0x14>)
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	601a      	str	r2, [r3, #0]
}
 800d1c6:	bf00      	nop
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	20000f14 	.word	0x20000f14

0800d1d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d1dc:	f000 f852 	bl	800d284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d1e0:	4b06      	ldr	r3, [pc, #24]	; (800d1fc <prvIdleTask+0x28>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d9f9      	bls.n	800d1dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d1e8:	4b05      	ldr	r3, [pc, #20]	; (800d200 <prvIdleTask+0x2c>)
 800d1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d1f8:	e7f0      	b.n	800d1dc <prvIdleTask+0x8>
 800d1fa:	bf00      	nop
 800d1fc:	20000a30 	.word	0x20000a30
 800d200:	e000ed04 	.word	0xe000ed04

0800d204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d20a:	2300      	movs	r3, #0
 800d20c:	607b      	str	r3, [r7, #4]
 800d20e:	e00c      	b.n	800d22a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	4613      	mov	r3, r2
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4a12      	ldr	r2, [pc, #72]	; (800d264 <prvInitialiseTaskLists+0x60>)
 800d21c:	4413      	add	r3, r2
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fe f918 	bl	800b454 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3301      	adds	r3, #1
 800d228:	607b      	str	r3, [r7, #4]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b37      	cmp	r3, #55	; 0x37
 800d22e:	d9ef      	bls.n	800d210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d230:	480d      	ldr	r0, [pc, #52]	; (800d268 <prvInitialiseTaskLists+0x64>)
 800d232:	f7fe f90f 	bl	800b454 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d236:	480d      	ldr	r0, [pc, #52]	; (800d26c <prvInitialiseTaskLists+0x68>)
 800d238:	f7fe f90c 	bl	800b454 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d23c:	480c      	ldr	r0, [pc, #48]	; (800d270 <prvInitialiseTaskLists+0x6c>)
 800d23e:	f7fe f909 	bl	800b454 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d242:	480c      	ldr	r0, [pc, #48]	; (800d274 <prvInitialiseTaskLists+0x70>)
 800d244:	f7fe f906 	bl	800b454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d248:	480b      	ldr	r0, [pc, #44]	; (800d278 <prvInitialiseTaskLists+0x74>)
 800d24a:	f7fe f903 	bl	800b454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d24e:	4b0b      	ldr	r3, [pc, #44]	; (800d27c <prvInitialiseTaskLists+0x78>)
 800d250:	4a05      	ldr	r2, [pc, #20]	; (800d268 <prvInitialiseTaskLists+0x64>)
 800d252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d254:	4b0a      	ldr	r3, [pc, #40]	; (800d280 <prvInitialiseTaskLists+0x7c>)
 800d256:	4a05      	ldr	r2, [pc, #20]	; (800d26c <prvInitialiseTaskLists+0x68>)
 800d258:	601a      	str	r2, [r3, #0]
}
 800d25a:	bf00      	nop
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	20000a30 	.word	0x20000a30
 800d268:	20000e90 	.word	0x20000e90
 800d26c:	20000ea4 	.word	0x20000ea4
 800d270:	20000ec0 	.word	0x20000ec0
 800d274:	20000ed4 	.word	0x20000ed4
 800d278:	20000eec 	.word	0x20000eec
 800d27c:	20000eb8 	.word	0x20000eb8
 800d280:	20000ebc 	.word	0x20000ebc

0800d284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d28a:	e019      	b.n	800d2c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d28c:	f000 ffe2 	bl	800e254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d290:	4b10      	ldr	r3, [pc, #64]	; (800d2d4 <prvCheckTasksWaitingTermination+0x50>)
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3304      	adds	r3, #4
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe f963 	bl	800b568 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d2a2:	4b0d      	ldr	r3, [pc, #52]	; (800d2d8 <prvCheckTasksWaitingTermination+0x54>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	4a0b      	ldr	r2, [pc, #44]	; (800d2d8 <prvCheckTasksWaitingTermination+0x54>)
 800d2aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d2ac:	4b0b      	ldr	r3, [pc, #44]	; (800d2dc <prvCheckTasksWaitingTermination+0x58>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	4a0a      	ldr	r2, [pc, #40]	; (800d2dc <prvCheckTasksWaitingTermination+0x58>)
 800d2b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d2b6:	f000 fffd 	bl	800e2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f810 	bl	800d2e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2c0:	4b06      	ldr	r3, [pc, #24]	; (800d2dc <prvCheckTasksWaitingTermination+0x58>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e1      	bne.n	800d28c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20000ed4 	.word	0x20000ed4
 800d2d8:	20000f00 	.word	0x20000f00
 800d2dc:	20000ee8 	.word	0x20000ee8

0800d2e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d108      	bne.n	800d304 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f001 f99a 	bl	800e630 <vPortFree>
				vPortFree( pxTCB );
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f001 f997 	bl	800e630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d302:	e018      	b.n	800d336 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d103      	bne.n	800d316 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f001 f98e 	bl	800e630 <vPortFree>
	}
 800d314:	e00f      	b.n	800d336 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d00a      	beq.n	800d336 <prvDeleteTCB+0x56>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d324:	f383 8811 	msr	BASEPRI, r3
 800d328:	f3bf 8f6f 	isb	sy
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	60fb      	str	r3, [r7, #12]
}
 800d332:	bf00      	nop
 800d334:	e7fe      	b.n	800d334 <prvDeleteTCB+0x54>
	}
 800d336:	bf00      	nop
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
	...

0800d340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d346:	4b0c      	ldr	r3, [pc, #48]	; (800d378 <prvResetNextTaskUnblockTime+0x38>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d104      	bne.n	800d35a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d350:	4b0a      	ldr	r3, [pc, #40]	; (800d37c <prvResetNextTaskUnblockTime+0x3c>)
 800d352:	f04f 32ff 	mov.w	r2, #4294967295
 800d356:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d358:	e008      	b.n	800d36c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d35a:	4b07      	ldr	r3, [pc, #28]	; (800d378 <prvResetNextTaskUnblockTime+0x38>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	4a04      	ldr	r2, [pc, #16]	; (800d37c <prvResetNextTaskUnblockTime+0x3c>)
 800d36a:	6013      	str	r3, [r2, #0]
}
 800d36c:	bf00      	nop
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	20000eb8 	.word	0x20000eb8
 800d37c:	20000f20 	.word	0x20000f20

0800d380 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d386:	4b05      	ldr	r3, [pc, #20]	; (800d39c <xTaskGetCurrentTaskHandle+0x1c>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d38c:	687b      	ldr	r3, [r7, #4]
	}
 800d38e:	4618      	mov	r0, r3
 800d390:	370c      	adds	r7, #12
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	20000a2c 	.word	0x20000a2c

0800d3a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <xTaskGetSchedulerState+0x34>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d102      	bne.n	800d3b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	607b      	str	r3, [r7, #4]
 800d3b2:	e008      	b.n	800d3c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3b4:	4b08      	ldr	r3, [pc, #32]	; (800d3d8 <xTaskGetSchedulerState+0x38>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d102      	bne.n	800d3c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d3bc:	2302      	movs	r3, #2
 800d3be:	607b      	str	r3, [r7, #4]
 800d3c0:	e001      	b.n	800d3c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d3c6:	687b      	ldr	r3, [r7, #4]
	}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr
 800d3d4:	20000f0c 	.word	0x20000f0c
 800d3d8:	20000f28 	.word	0x20000f28

0800d3dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d051      	beq.n	800d496 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f6:	4b2a      	ldr	r3, [pc, #168]	; (800d4a0 <xTaskPriorityInherit+0xc4>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d241      	bcs.n	800d484 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	2b00      	cmp	r3, #0
 800d406:	db06      	blt.n	800d416 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d408:	4b25      	ldr	r3, [pc, #148]	; (800d4a0 <xTaskPriorityInherit+0xc4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	6959      	ldr	r1, [r3, #20]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41e:	4613      	mov	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4413      	add	r3, r2
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	4a1f      	ldr	r2, [pc, #124]	; (800d4a4 <xTaskPriorityInherit+0xc8>)
 800d428:	4413      	add	r3, r2
 800d42a:	4299      	cmp	r1, r3
 800d42c:	d122      	bne.n	800d474 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	3304      	adds	r3, #4
 800d432:	4618      	mov	r0, r3
 800d434:	f7fe f898 	bl	800b568 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d438:	4b19      	ldr	r3, [pc, #100]	; (800d4a0 <xTaskPriorityInherit+0xc4>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d446:	4b18      	ldr	r3, [pc, #96]	; (800d4a8 <xTaskPriorityInherit+0xcc>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d903      	bls.n	800d456 <xTaskPriorityInherit+0x7a>
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d452:	4a15      	ldr	r2, [pc, #84]	; (800d4a8 <xTaskPriorityInherit+0xcc>)
 800d454:	6013      	str	r3, [r2, #0]
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45a:	4613      	mov	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4413      	add	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	4a10      	ldr	r2, [pc, #64]	; (800d4a4 <xTaskPriorityInherit+0xc8>)
 800d464:	441a      	add	r2, r3
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	3304      	adds	r3, #4
 800d46a:	4619      	mov	r1, r3
 800d46c:	4610      	mov	r0, r2
 800d46e:	f7fe f81e 	bl	800b4ae <vListInsertEnd>
 800d472:	e004      	b.n	800d47e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d474:	4b0a      	ldr	r3, [pc, #40]	; (800d4a0 <xTaskPriorityInherit+0xc4>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d47e:	2301      	movs	r3, #1
 800d480:	60fb      	str	r3, [r7, #12]
 800d482:	e008      	b.n	800d496 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d488:	4b05      	ldr	r3, [pc, #20]	; (800d4a0 <xTaskPriorityInherit+0xc4>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48e:	429a      	cmp	r2, r3
 800d490:	d201      	bcs.n	800d496 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d492:	2301      	movs	r3, #1
 800d494:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d496:	68fb      	ldr	r3, [r7, #12]
	}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	20000a2c 	.word	0x20000a2c
 800d4a4:	20000a30 	.word	0x20000a30
 800d4a8:	20000f08 	.word	0x20000f08

0800d4ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d056      	beq.n	800d570 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4c2:	4b2e      	ldr	r3, [pc, #184]	; (800d57c <xTaskPriorityDisinherit+0xd0>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d00a      	beq.n	800d4e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	60fb      	str	r3, [r7, #12]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10a      	bne.n	800d500 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	60bb      	str	r3, [r7, #8]
}
 800d4fc:	bf00      	nop
 800d4fe:	e7fe      	b.n	800d4fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d504:	1e5a      	subs	r2, r3, #1
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d512:	429a      	cmp	r2, r3
 800d514:	d02c      	beq.n	800d570 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d128      	bne.n	800d570 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	3304      	adds	r3, #4
 800d522:	4618      	mov	r0, r3
 800d524:	f7fe f820 	bl	800b568 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d534:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d540:	4b0f      	ldr	r3, [pc, #60]	; (800d580 <xTaskPriorityDisinherit+0xd4>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	429a      	cmp	r2, r3
 800d546:	d903      	bls.n	800d550 <xTaskPriorityDisinherit+0xa4>
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54c:	4a0c      	ldr	r2, [pc, #48]	; (800d580 <xTaskPriorityDisinherit+0xd4>)
 800d54e:	6013      	str	r3, [r2, #0]
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d554:	4613      	mov	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4a09      	ldr	r2, [pc, #36]	; (800d584 <xTaskPriorityDisinherit+0xd8>)
 800d55e:	441a      	add	r2, r3
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	3304      	adds	r3, #4
 800d564:	4619      	mov	r1, r3
 800d566:	4610      	mov	r0, r2
 800d568:	f7fd ffa1 	bl	800b4ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d56c:	2301      	movs	r3, #1
 800d56e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d570:	697b      	ldr	r3, [r7, #20]
	}
 800d572:	4618      	mov	r0, r3
 800d574:	3718      	adds	r7, #24
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20000a2c 	.word	0x20000a2c
 800d580:	20000f08 	.word	0x20000f08
 800d584:	20000a30 	.word	0x20000a30

0800d588 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d596:	2301      	movs	r3, #1
 800d598:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d06a      	beq.n	800d676 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10a      	bne.n	800d5be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	60fb      	str	r3, [r7, #12]
}
 800d5ba:	bf00      	nop
 800d5bc:	e7fe      	b.n	800d5bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5c2:	683a      	ldr	r2, [r7, #0]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d902      	bls.n	800d5ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	61fb      	str	r3, [r7, #28]
 800d5cc:	e002      	b.n	800d5d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	69fa      	ldr	r2, [r7, #28]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d04b      	beq.n	800d676 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d146      	bne.n	800d676 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d5e8:	4b25      	ldr	r3, [pc, #148]	; (800d680 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	69ba      	ldr	r2, [r7, #24]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d10a      	bne.n	800d608 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	60bb      	str	r3, [r7, #8]
}
 800d604:	bf00      	nop
 800d606:	e7fe      	b.n	800d606 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	69fa      	ldr	r2, [r7, #28]
 800d612:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	db04      	blt.n	800d626 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	6959      	ldr	r1, [r3, #20]
 800d62a:	693a      	ldr	r2, [r7, #16]
 800d62c:	4613      	mov	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4a13      	ldr	r2, [pc, #76]	; (800d684 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d636:	4413      	add	r3, r2
 800d638:	4299      	cmp	r1, r3
 800d63a:	d11c      	bne.n	800d676 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	3304      	adds	r3, #4
 800d640:	4618      	mov	r0, r3
 800d642:	f7fd ff91 	bl	800b568 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64a:	4b0f      	ldr	r3, [pc, #60]	; (800d688 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d903      	bls.n	800d65a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d656:	4a0c      	ldr	r2, [pc, #48]	; (800d688 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d658:	6013      	str	r3, [r2, #0]
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65e:	4613      	mov	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4413      	add	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4a07      	ldr	r2, [pc, #28]	; (800d684 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d668:	441a      	add	r2, r3
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	3304      	adds	r3, #4
 800d66e:	4619      	mov	r1, r3
 800d670:	4610      	mov	r0, r2
 800d672:	f7fd ff1c 	bl	800b4ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d676:	bf00      	nop
 800d678:	3720      	adds	r7, #32
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	20000a2c 	.word	0x20000a2c
 800d684:	20000a30 	.word	0x20000a30
 800d688:	20000f08 	.word	0x20000f08

0800d68c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d68c:	b480      	push	{r7}
 800d68e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d690:	4b07      	ldr	r3, [pc, #28]	; (800d6b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d004      	beq.n	800d6a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d698:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d69e:	3201      	adds	r2, #1
 800d6a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d6a2:	4b03      	ldr	r3, [pc, #12]	; (800d6b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
	}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr
 800d6b0:	20000a2c 	.word	0x20000a2c

0800d6b4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d6be:	f000 fdc9 	bl	800e254 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d6c2:	4b1e      	ldr	r3, [pc, #120]	; (800d73c <ulTaskNotifyTake+0x88>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d113      	bne.n	800d6f4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d6cc:	4b1b      	ldr	r3, [pc, #108]	; (800d73c <ulTaskNotifyTake+0x88>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00b      	beq.n	800d6f4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d6dc:	2101      	movs	r1, #1
 800d6de:	6838      	ldr	r0, [r7, #0]
 800d6e0:	f000 f8e8 	bl	800d8b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d6e4:	4b16      	ldr	r3, [pc, #88]	; (800d740 <ulTaskNotifyTake+0x8c>)
 800d6e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d6f4:	f000 fdde 	bl	800e2b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d6f8:	f000 fdac 	bl	800e254 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d6fc:	4b0f      	ldr	r3, [pc, #60]	; (800d73c <ulTaskNotifyTake+0x88>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d702:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00c      	beq.n	800d724 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d710:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <ulTaskNotifyTake+0x88>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2200      	movs	r2, #0
 800d716:	655a      	str	r2, [r3, #84]	; 0x54
 800d718:	e004      	b.n	800d724 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d71a:	4b08      	ldr	r3, [pc, #32]	; (800d73c <ulTaskNotifyTake+0x88>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	3a01      	subs	r2, #1
 800d722:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d724:	4b05      	ldr	r3, [pc, #20]	; (800d73c <ulTaskNotifyTake+0x88>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2200      	movs	r2, #0
 800d72a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d72e:	f000 fdc1 	bl	800e2b4 <vPortExitCritical>

		return ulReturn;
 800d732:	68fb      	ldr	r3, [r7, #12]
	}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	20000a2c 	.word	0x20000a2c
 800d740:	e000ed04 	.word	0xe000ed04

0800d744 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08a      	sub	sp, #40	; 0x28
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	603b      	str	r3, [r7, #0]
 800d750:	4613      	mov	r3, r2
 800d752:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d754:	2301      	movs	r3, #1
 800d756:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d10a      	bne.n	800d774 <xTaskGenericNotify+0x30>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	61bb      	str	r3, [r7, #24]
}
 800d770:	bf00      	nop
 800d772:	e7fe      	b.n	800d772 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d778:	f000 fd6c 	bl	800e254 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d790:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	2202      	movs	r2, #2
 800d796:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	2b04      	cmp	r3, #4
 800d79e:	d828      	bhi.n	800d7f2 <xTaskGenericNotify+0xae>
 800d7a0:	a201      	add	r2, pc, #4	; (adr r2, 800d7a8 <xTaskGenericNotify+0x64>)
 800d7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a6:	bf00      	nop
 800d7a8:	0800d813 	.word	0x0800d813
 800d7ac:	0800d7bd 	.word	0x0800d7bd
 800d7b0:	0800d7cb 	.word	0x0800d7cb
 800d7b4:	0800d7d7 	.word	0x0800d7d7
 800d7b8:	0800d7df 	.word	0x0800d7df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d7bc:	6a3b      	ldr	r3, [r7, #32]
 800d7be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d7c8:	e026      	b.n	800d818 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d7d4:	e020      	b.n	800d818 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d7d6:	6a3b      	ldr	r3, [r7, #32]
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d7dc:	e01c      	b.n	800d818 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d7de:	7ffb      	ldrb	r3, [r7, #31]
 800d7e0:	2b02      	cmp	r3, #2
 800d7e2:	d003      	beq.n	800d7ec <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d7e4:	6a3b      	ldr	r3, [r7, #32]
 800d7e6:	68ba      	ldr	r2, [r7, #8]
 800d7e8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d7ea:	e015      	b.n	800d818 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d7f0:	e012      	b.n	800d818 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fa:	d00c      	beq.n	800d816 <xTaskGenericNotify+0xd2>
	__asm volatile
 800d7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	617b      	str	r3, [r7, #20]
}
 800d80e:	bf00      	nop
 800d810:	e7fe      	b.n	800d810 <xTaskGenericNotify+0xcc>
					break;
 800d812:	bf00      	nop
 800d814:	e000      	b.n	800d818 <xTaskGenericNotify+0xd4>

					break;
 800d816:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d818:	7ffb      	ldrb	r3, [r7, #31]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d13a      	bne.n	800d894 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	3304      	adds	r3, #4
 800d822:	4618      	mov	r0, r3
 800d824:	f7fd fea0 	bl	800b568 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82c:	4b1d      	ldr	r3, [pc, #116]	; (800d8a4 <xTaskGenericNotify+0x160>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	429a      	cmp	r2, r3
 800d832:	d903      	bls.n	800d83c <xTaskGenericNotify+0xf8>
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	4a1a      	ldr	r2, [pc, #104]	; (800d8a4 <xTaskGenericNotify+0x160>)
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	6a3b      	ldr	r3, [r7, #32]
 800d83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d840:	4613      	mov	r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	4413      	add	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4a17      	ldr	r2, [pc, #92]	; (800d8a8 <xTaskGenericNotify+0x164>)
 800d84a:	441a      	add	r2, r3
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	3304      	adds	r3, #4
 800d850:	4619      	mov	r1, r3
 800d852:	4610      	mov	r0, r2
 800d854:	f7fd fe2b 	bl	800b4ae <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00a      	beq.n	800d876 <xTaskGenericNotify+0x132>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	613b      	str	r3, [r7, #16]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87a:	4b0c      	ldr	r3, [pc, #48]	; (800d8ac <xTaskGenericNotify+0x168>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d880:	429a      	cmp	r2, r3
 800d882:	d907      	bls.n	800d894 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d884:	4b0a      	ldr	r3, [pc, #40]	; (800d8b0 <xTaskGenericNotify+0x16c>)
 800d886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d88a:	601a      	str	r2, [r3, #0]
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d894:	f000 fd0e 	bl	800e2b4 <vPortExitCritical>

		return xReturn;
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3728      	adds	r7, #40	; 0x28
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20000f08 	.word	0x20000f08
 800d8a8:	20000a30 	.word	0x20000a30
 800d8ac:	20000a2c 	.word	0x20000a2c
 800d8b0:	e000ed04 	.word	0xe000ed04

0800d8b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8be:	4b21      	ldr	r3, [pc, #132]	; (800d944 <prvAddCurrentTaskToDelayedList+0x90>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8c4:	4b20      	ldr	r3, [pc, #128]	; (800d948 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3304      	adds	r3, #4
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fd fe4c 	bl	800b568 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d6:	d10a      	bne.n	800d8ee <prvAddCurrentTaskToDelayedList+0x3a>
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d007      	beq.n	800d8ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8de:	4b1a      	ldr	r3, [pc, #104]	; (800d948 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	4819      	ldr	r0, [pc, #100]	; (800d94c <prvAddCurrentTaskToDelayedList+0x98>)
 800d8e8:	f7fd fde1 	bl	800b4ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8ec:	e026      	b.n	800d93c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d8f6:	4b14      	ldr	r3, [pc, #80]	; (800d948 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	429a      	cmp	r2, r3
 800d904:	d209      	bcs.n	800d91a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d906:	4b12      	ldr	r3, [pc, #72]	; (800d950 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b0f      	ldr	r3, [pc, #60]	; (800d948 <prvAddCurrentTaskToDelayedList+0x94>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	3304      	adds	r3, #4
 800d910:	4619      	mov	r1, r3
 800d912:	4610      	mov	r0, r2
 800d914:	f7fd fdef 	bl	800b4f6 <vListInsert>
}
 800d918:	e010      	b.n	800d93c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d91a:	4b0e      	ldr	r3, [pc, #56]	; (800d954 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	4b0a      	ldr	r3, [pc, #40]	; (800d948 <prvAddCurrentTaskToDelayedList+0x94>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	3304      	adds	r3, #4
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7fd fde5 	bl	800b4f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d92c:	4b0a      	ldr	r3, [pc, #40]	; (800d958 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	429a      	cmp	r2, r3
 800d934:	d202      	bcs.n	800d93c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d936:	4a08      	ldr	r2, [pc, #32]	; (800d958 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	6013      	str	r3, [r2, #0]
}
 800d93c:	bf00      	nop
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	20000f04 	.word	0x20000f04
 800d948:	20000a2c 	.word	0x20000a2c
 800d94c:	20000eec 	.word	0x20000eec
 800d950:	20000ebc 	.word	0x20000ebc
 800d954:	20000eb8 	.word	0x20000eb8
 800d958:	20000f20 	.word	0x20000f20

0800d95c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08a      	sub	sp, #40	; 0x28
 800d960:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d962:	2300      	movs	r3, #0
 800d964:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d966:	f000 fb07 	bl	800df78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d96a:	4b1c      	ldr	r3, [pc, #112]	; (800d9dc <xTimerCreateTimerTask+0x80>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d021      	beq.n	800d9b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d972:	2300      	movs	r3, #0
 800d974:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d976:	2300      	movs	r3, #0
 800d978:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d97a:	1d3a      	adds	r2, r7, #4
 800d97c:	f107 0108 	add.w	r1, r7, #8
 800d980:	f107 030c 	add.w	r3, r7, #12
 800d984:	4618      	mov	r0, r3
 800d986:	f7fd fd4b 	bl	800b420 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d98a:	6879      	ldr	r1, [r7, #4]
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	9202      	str	r2, [sp, #8]
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	2302      	movs	r3, #2
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	2300      	movs	r3, #0
 800d99a:	460a      	mov	r2, r1
 800d99c:	4910      	ldr	r1, [pc, #64]	; (800d9e0 <xTimerCreateTimerTask+0x84>)
 800d99e:	4811      	ldr	r0, [pc, #68]	; (800d9e4 <xTimerCreateTimerTask+0x88>)
 800d9a0:	f7fe fed0 	bl	800c744 <xTaskCreateStatic>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	4a10      	ldr	r2, [pc, #64]	; (800d9e8 <xTimerCreateTimerTask+0x8c>)
 800d9a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d9aa:	4b0f      	ldr	r3, [pc, #60]	; (800d9e8 <xTimerCreateTimerTask+0x8c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d001      	beq.n	800d9b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c0:	f383 8811 	msr	BASEPRI, r3
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	613b      	str	r3, [r7, #16]
}
 800d9ce:	bf00      	nop
 800d9d0:	e7fe      	b.n	800d9d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d9d2:	697b      	ldr	r3, [r7, #20]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	20000f5c 	.word	0x20000f5c
 800d9e0:	080132f8 	.word	0x080132f8
 800d9e4:	0800db21 	.word	0x0800db21
 800d9e8:	20000f60 	.word	0x20000f60

0800d9ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b08a      	sub	sp, #40	; 0x28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	607a      	str	r2, [r7, #4]
 800d9f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10a      	bne.n	800da1a <xTimerGenericCommand+0x2e>
	__asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	623b      	str	r3, [r7, #32]
}
 800da16:	bf00      	nop
 800da18:	e7fe      	b.n	800da18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da1a:	4b1a      	ldr	r3, [pc, #104]	; (800da84 <xTimerGenericCommand+0x98>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d02a      	beq.n	800da78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	2b05      	cmp	r3, #5
 800da32:	dc18      	bgt.n	800da66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da34:	f7ff fcb4 	bl	800d3a0 <xTaskGetSchedulerState>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d109      	bne.n	800da52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da3e:	4b11      	ldr	r3, [pc, #68]	; (800da84 <xTimerGenericCommand+0x98>)
 800da40:	6818      	ldr	r0, [r3, #0]
 800da42:	f107 0110 	add.w	r1, r7, #16
 800da46:	2300      	movs	r3, #0
 800da48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da4a:	f7fe f815 	bl	800ba78 <xQueueGenericSend>
 800da4e:	6278      	str	r0, [r7, #36]	; 0x24
 800da50:	e012      	b.n	800da78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da52:	4b0c      	ldr	r3, [pc, #48]	; (800da84 <xTimerGenericCommand+0x98>)
 800da54:	6818      	ldr	r0, [r3, #0]
 800da56:	f107 0110 	add.w	r1, r7, #16
 800da5a:	2300      	movs	r3, #0
 800da5c:	2200      	movs	r2, #0
 800da5e:	f7fe f80b 	bl	800ba78 <xQueueGenericSend>
 800da62:	6278      	str	r0, [r7, #36]	; 0x24
 800da64:	e008      	b.n	800da78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da66:	4b07      	ldr	r3, [pc, #28]	; (800da84 <xTimerGenericCommand+0x98>)
 800da68:	6818      	ldr	r0, [r3, #0]
 800da6a:	f107 0110 	add.w	r1, r7, #16
 800da6e:	2300      	movs	r3, #0
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	f7fe f8ff 	bl	800bc74 <xQueueGenericSendFromISR>
 800da76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3728      	adds	r7, #40	; 0x28
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	20000f5c 	.word	0x20000f5c

0800da88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da92:	4b22      	ldr	r3, [pc, #136]	; (800db1c <prvProcessExpiredTimer+0x94>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	3304      	adds	r3, #4
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fd fd61 	bl	800b568 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daac:	f003 0304 	and.w	r3, r3, #4
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d022      	beq.n	800dafa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	699a      	ldr	r2, [r3, #24]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	18d1      	adds	r1, r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	6978      	ldr	r0, [r7, #20]
 800dac2:	f000 f8d1 	bl	800dc68 <prvInsertTimerInActiveList>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d01f      	beq.n	800db0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dacc:	2300      	movs	r3, #0
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	2300      	movs	r3, #0
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	2100      	movs	r1, #0
 800dad6:	6978      	ldr	r0, [r7, #20]
 800dad8:	f7ff ff88 	bl	800d9ec <xTimerGenericCommand>
 800dadc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d113      	bne.n	800db0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	60fb      	str	r3, [r7, #12]
}
 800daf6:	bf00      	nop
 800daf8:	e7fe      	b.n	800daf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db00:	f023 0301 	bic.w	r3, r3, #1
 800db04:	b2da      	uxtb	r2, r3
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	6978      	ldr	r0, [r7, #20]
 800db12:	4798      	blx	r3
}
 800db14:	bf00      	nop
 800db16:	3718      	adds	r7, #24
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	20000f54 	.word	0x20000f54

0800db20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db28:	f107 0308 	add.w	r3, r7, #8
 800db2c:	4618      	mov	r0, r3
 800db2e:	f000 f857 	bl	800dbe0 <prvGetNextExpireTime>
 800db32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	4619      	mov	r1, r3
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 f803 	bl	800db44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db3e:	f000 f8d5 	bl	800dcec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db42:	e7f1      	b.n	800db28 <prvTimerTask+0x8>

0800db44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db4e:	f7ff f835 	bl	800cbbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db52:	f107 0308 	add.w	r3, r7, #8
 800db56:	4618      	mov	r0, r3
 800db58:	f000 f866 	bl	800dc28 <prvSampleTimeNow>
 800db5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d130      	bne.n	800dbc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d10a      	bne.n	800db80 <prvProcessTimerOrBlockTask+0x3c>
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d806      	bhi.n	800db80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db72:	f7ff f831 	bl	800cbd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db76:	68f9      	ldr	r1, [r7, #12]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff ff85 	bl	800da88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800db7e:	e024      	b.n	800dbca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d008      	beq.n	800db98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db86:	4b13      	ldr	r3, [pc, #76]	; (800dbd4 <prvProcessTimerOrBlockTask+0x90>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <prvProcessTimerOrBlockTask+0x50>
 800db90:	2301      	movs	r3, #1
 800db92:	e000      	b.n	800db96 <prvProcessTimerOrBlockTask+0x52>
 800db94:	2300      	movs	r3, #0
 800db96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db98:	4b0f      	ldr	r3, [pc, #60]	; (800dbd8 <prvProcessTimerOrBlockTask+0x94>)
 800db9a:	6818      	ldr	r0, [r3, #0]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	4619      	mov	r1, r3
 800dba6:	f7fe fd99 	bl	800c6dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dbaa:	f7ff f815 	bl	800cbd8 <xTaskResumeAll>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10a      	bne.n	800dbca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dbb4:	4b09      	ldr	r3, [pc, #36]	; (800dbdc <prvProcessTimerOrBlockTask+0x98>)
 800dbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	f3bf 8f6f 	isb	sy
}
 800dbc4:	e001      	b.n	800dbca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dbc6:	f7ff f807 	bl	800cbd8 <xTaskResumeAll>
}
 800dbca:	bf00      	nop
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	20000f58 	.word	0x20000f58
 800dbd8:	20000f5c 	.word	0x20000f5c
 800dbdc:	e000ed04 	.word	0xe000ed04

0800dbe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dbe8:	4b0e      	ldr	r3, [pc, #56]	; (800dc24 <prvGetNextExpireTime+0x44>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d101      	bne.n	800dbf6 <prvGetNextExpireTime+0x16>
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	e000      	b.n	800dbf8 <prvGetNextExpireTime+0x18>
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d105      	bne.n	800dc10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc04:	4b07      	ldr	r3, [pc, #28]	; (800dc24 <prvGetNextExpireTime+0x44>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	60fb      	str	r3, [r7, #12]
 800dc0e:	e001      	b.n	800dc14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc10:	2300      	movs	r3, #0
 800dc12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc14:	68fb      	ldr	r3, [r7, #12]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3714      	adds	r7, #20
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	20000f54 	.word	0x20000f54

0800dc28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc30:	f7ff f870 	bl	800cd14 <xTaskGetTickCount>
 800dc34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc36:	4b0b      	ldr	r3, [pc, #44]	; (800dc64 <prvSampleTimeNow+0x3c>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d205      	bcs.n	800dc4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc40:	f000 f936 	bl	800deb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	601a      	str	r2, [r3, #0]
 800dc4a:	e002      	b.n	800dc52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc52:	4a04      	ldr	r2, [pc, #16]	; (800dc64 <prvSampleTimeNow+0x3c>)
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc58:	68fb      	ldr	r3, [r7, #12]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20000f64 	.word	0x20000f64

0800dc68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
 800dc74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc76:	2300      	movs	r3, #0
 800dc78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d812      	bhi.n	800dcb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	1ad2      	subs	r2, r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	699b      	ldr	r3, [r3, #24]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d302      	bcc.n	800dca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	617b      	str	r3, [r7, #20]
 800dca0:	e01b      	b.n	800dcda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dca2:	4b10      	ldr	r3, [pc, #64]	; (800dce4 <prvInsertTimerInActiveList+0x7c>)
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3304      	adds	r3, #4
 800dcaa:	4619      	mov	r1, r3
 800dcac:	4610      	mov	r0, r2
 800dcae:	f7fd fc22 	bl	800b4f6 <vListInsert>
 800dcb2:	e012      	b.n	800dcda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d206      	bcs.n	800dcca <prvInsertTimerInActiveList+0x62>
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d302      	bcc.n	800dcca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	617b      	str	r3, [r7, #20]
 800dcc8:	e007      	b.n	800dcda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcca:	4b07      	ldr	r3, [pc, #28]	; (800dce8 <prvInsertTimerInActiveList+0x80>)
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	f7fd fc0e 	bl	800b4f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dcda:	697b      	ldr	r3, [r7, #20]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3718      	adds	r7, #24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	20000f58 	.word	0x20000f58
 800dce8:	20000f54 	.word	0x20000f54

0800dcec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08e      	sub	sp, #56	; 0x38
 800dcf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcf2:	e0ca      	b.n	800de8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	da18      	bge.n	800dd2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dcfa:	1d3b      	adds	r3, r7, #4
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10a      	bne.n	800dd1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0a:	f383 8811 	msr	BASEPRI, r3
 800dd0e:	f3bf 8f6f 	isb	sy
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	61fb      	str	r3, [r7, #28]
}
 800dd18:	bf00      	nop
 800dd1a:	e7fe      	b.n	800dd1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd22:	6850      	ldr	r0, [r2, #4]
 800dd24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd26:	6892      	ldr	r2, [r2, #8]
 800dd28:	4611      	mov	r1, r2
 800dd2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f2c0 80aa 	blt.w	800de88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	695b      	ldr	r3, [r3, #20]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d004      	beq.n	800dd4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd42:	3304      	adds	r3, #4
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fd fc0f 	bl	800b568 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd4a:	463b      	mov	r3, r7
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7ff ff6b 	bl	800dc28 <prvSampleTimeNow>
 800dd52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b09      	cmp	r3, #9
 800dd58:	f200 8097 	bhi.w	800de8a <prvProcessReceivedCommands+0x19e>
 800dd5c:	a201      	add	r2, pc, #4	; (adr r2, 800dd64 <prvProcessReceivedCommands+0x78>)
 800dd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd62:	bf00      	nop
 800dd64:	0800dd8d 	.word	0x0800dd8d
 800dd68:	0800dd8d 	.word	0x0800dd8d
 800dd6c:	0800dd8d 	.word	0x0800dd8d
 800dd70:	0800de01 	.word	0x0800de01
 800dd74:	0800de15 	.word	0x0800de15
 800dd78:	0800de5f 	.word	0x0800de5f
 800dd7c:	0800dd8d 	.word	0x0800dd8d
 800dd80:	0800dd8d 	.word	0x0800dd8d
 800dd84:	0800de01 	.word	0x0800de01
 800dd88:	0800de15 	.word	0x0800de15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd92:	f043 0301 	orr.w	r3, r3, #1
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	18d1      	adds	r1, r2, r3
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddac:	f7ff ff5c 	bl	800dc68 <prvInsertTimerInActiveList>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d069      	beq.n	800de8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	6a1b      	ldr	r3, [r3, #32]
 800ddba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d05e      	beq.n	800de8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ddcc:	68ba      	ldr	r2, [r7, #8]
 800ddce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd0:	699b      	ldr	r3, [r3, #24]
 800ddd2:	441a      	add	r2, r3
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	2100      	movs	r1, #0
 800dddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddde:	f7ff fe05 	bl	800d9ec <xTimerGenericCommand>
 800dde2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d14f      	bne.n	800de8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	61bb      	str	r3, [r7, #24]
}
 800ddfc:	bf00      	nop
 800ddfe:	e7fe      	b.n	800ddfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de06:	f023 0301 	bic.w	r3, r3, #1
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800de12:	e03a      	b.n	800de8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de1a:	f043 0301 	orr.w	r3, r3, #1
 800de1e:	b2da      	uxtb	r2, r3
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10a      	bne.n	800de4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	617b      	str	r3, [r7, #20]
}
 800de46:	bf00      	nop
 800de48:	e7fe      	b.n	800de48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4c:	699a      	ldr	r2, [r3, #24]
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	18d1      	adds	r1, r2, r3
 800de52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de58:	f7ff ff06 	bl	800dc68 <prvInsertTimerInActiveList>
					break;
 800de5c:	e015      	b.n	800de8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de64:	f003 0302 	and.w	r3, r3, #2
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d103      	bne.n	800de74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800de6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de6e:	f000 fbdf 	bl	800e630 <vPortFree>
 800de72:	e00a      	b.n	800de8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de7a:	f023 0301 	bic.w	r3, r3, #1
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800de86:	e000      	b.n	800de8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800de88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de8a:	4b08      	ldr	r3, [pc, #32]	; (800deac <prvProcessReceivedCommands+0x1c0>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	1d39      	adds	r1, r7, #4
 800de90:	2200      	movs	r2, #0
 800de92:	4618      	mov	r0, r3
 800de94:	f7fe f816 	bl	800bec4 <xQueueReceive>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f47f af2a 	bne.w	800dcf4 <prvProcessReceivedCommands+0x8>
	}
}
 800dea0:	bf00      	nop
 800dea2:	bf00      	nop
 800dea4:	3730      	adds	r7, #48	; 0x30
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	20000f5c 	.word	0x20000f5c

0800deb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b088      	sub	sp, #32
 800deb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800deb6:	e048      	b.n	800df4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800deb8:	4b2d      	ldr	r3, [pc, #180]	; (800df70 <prvSwitchTimerLists+0xc0>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dec2:	4b2b      	ldr	r3, [pc, #172]	; (800df70 <prvSwitchTimerLists+0xc0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	3304      	adds	r3, #4
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fd fb49 	bl	800b568 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6a1b      	ldr	r3, [r3, #32]
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dee4:	f003 0304 	and.w	r3, r3, #4
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d02e      	beq.n	800df4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	699b      	ldr	r3, [r3, #24]
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	4413      	add	r3, r2
 800def4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	429a      	cmp	r2, r3
 800defc:	d90e      	bls.n	800df1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df0a:	4b19      	ldr	r3, [pc, #100]	; (800df70 <prvSwitchTimerLists+0xc0>)
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3304      	adds	r3, #4
 800df12:	4619      	mov	r1, r3
 800df14:	4610      	mov	r0, r2
 800df16:	f7fd faee 	bl	800b4f6 <vListInsert>
 800df1a:	e016      	b.n	800df4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df1c:	2300      	movs	r3, #0
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	2300      	movs	r3, #0
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	2100      	movs	r1, #0
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f7ff fd60 	bl	800d9ec <xTimerGenericCommand>
 800df2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10a      	bne.n	800df4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	603b      	str	r3, [r7, #0]
}
 800df46:	bf00      	nop
 800df48:	e7fe      	b.n	800df48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df4a:	4b09      	ldr	r3, [pc, #36]	; (800df70 <prvSwitchTimerLists+0xc0>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1b1      	bne.n	800deb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df54:	4b06      	ldr	r3, [pc, #24]	; (800df70 <prvSwitchTimerLists+0xc0>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df5a:	4b06      	ldr	r3, [pc, #24]	; (800df74 <prvSwitchTimerLists+0xc4>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a04      	ldr	r2, [pc, #16]	; (800df70 <prvSwitchTimerLists+0xc0>)
 800df60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df62:	4a04      	ldr	r2, [pc, #16]	; (800df74 <prvSwitchTimerLists+0xc4>)
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	6013      	str	r3, [r2, #0]
}
 800df68:	bf00      	nop
 800df6a:	3718      	adds	r7, #24
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	20000f54 	.word	0x20000f54
 800df74:	20000f58 	.word	0x20000f58

0800df78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800df7e:	f000 f969 	bl	800e254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800df82:	4b15      	ldr	r3, [pc, #84]	; (800dfd8 <prvCheckForValidListAndQueue+0x60>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d120      	bne.n	800dfcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df8a:	4814      	ldr	r0, [pc, #80]	; (800dfdc <prvCheckForValidListAndQueue+0x64>)
 800df8c:	f7fd fa62 	bl	800b454 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df90:	4813      	ldr	r0, [pc, #76]	; (800dfe0 <prvCheckForValidListAndQueue+0x68>)
 800df92:	f7fd fa5f 	bl	800b454 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df96:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <prvCheckForValidListAndQueue+0x6c>)
 800df98:	4a10      	ldr	r2, [pc, #64]	; (800dfdc <prvCheckForValidListAndQueue+0x64>)
 800df9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df9c:	4b12      	ldr	r3, [pc, #72]	; (800dfe8 <prvCheckForValidListAndQueue+0x70>)
 800df9e:	4a10      	ldr	r2, [pc, #64]	; (800dfe0 <prvCheckForValidListAndQueue+0x68>)
 800dfa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	4b11      	ldr	r3, [pc, #68]	; (800dfec <prvCheckForValidListAndQueue+0x74>)
 800dfa8:	4a11      	ldr	r2, [pc, #68]	; (800dff0 <prvCheckForValidListAndQueue+0x78>)
 800dfaa:	2110      	movs	r1, #16
 800dfac:	200a      	movs	r0, #10
 800dfae:	f7fd fb6d 	bl	800b68c <xQueueGenericCreateStatic>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	4a08      	ldr	r2, [pc, #32]	; (800dfd8 <prvCheckForValidListAndQueue+0x60>)
 800dfb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dfb8:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <prvCheckForValidListAndQueue+0x60>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d005      	beq.n	800dfcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dfc0:	4b05      	ldr	r3, [pc, #20]	; (800dfd8 <prvCheckForValidListAndQueue+0x60>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	490b      	ldr	r1, [pc, #44]	; (800dff4 <prvCheckForValidListAndQueue+0x7c>)
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe fb34 	bl	800c634 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfcc:	f000 f972 	bl	800e2b4 <vPortExitCritical>
}
 800dfd0:	bf00      	nop
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20000f5c 	.word	0x20000f5c
 800dfdc:	20000f2c 	.word	0x20000f2c
 800dfe0:	20000f40 	.word	0x20000f40
 800dfe4:	20000f54 	.word	0x20000f54
 800dfe8:	20000f58 	.word	0x20000f58
 800dfec:	20001008 	.word	0x20001008
 800dff0:	20000f68 	.word	0x20000f68
 800dff4:	08013300 	.word	0x08013300

0800dff8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	3b04      	subs	r3, #4
 800e008:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	3b04      	subs	r3, #4
 800e016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	f023 0201 	bic.w	r2, r3, #1
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	3b04      	subs	r3, #4
 800e026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e028:	4a0c      	ldr	r2, [pc, #48]	; (800e05c <pxPortInitialiseStack+0x64>)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3b14      	subs	r3, #20
 800e032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	3b04      	subs	r3, #4
 800e03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f06f 0202 	mvn.w	r2, #2
 800e046:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	3b20      	subs	r3, #32
 800e04c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e04e:	68fb      	ldr	r3, [r7, #12]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	0800e061 	.word	0x0800e061

0800e060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e06a:	4b12      	ldr	r3, [pc, #72]	; (800e0b4 <prvTaskExitError+0x54>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e072:	d00a      	beq.n	800e08a <prvTaskExitError+0x2a>
	__asm volatile
 800e074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e078:	f383 8811 	msr	BASEPRI, r3
 800e07c:	f3bf 8f6f 	isb	sy
 800e080:	f3bf 8f4f 	dsb	sy
 800e084:	60fb      	str	r3, [r7, #12]
}
 800e086:	bf00      	nop
 800e088:	e7fe      	b.n	800e088 <prvTaskExitError+0x28>
	__asm volatile
 800e08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	60bb      	str	r3, [r7, #8]
}
 800e09c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e09e:	bf00      	nop
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0fc      	beq.n	800e0a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0a6:	bf00      	nop
 800e0a8:	bf00      	nop
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	20000024 	.word	0x20000024
	...

0800e0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e0c0:	4b07      	ldr	r3, [pc, #28]	; (800e0e0 <pxCurrentTCBConst2>)
 800e0c2:	6819      	ldr	r1, [r3, #0]
 800e0c4:	6808      	ldr	r0, [r1, #0]
 800e0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ca:	f380 8809 	msr	PSP, r0
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f04f 0000 	mov.w	r0, #0
 800e0d6:	f380 8811 	msr	BASEPRI, r0
 800e0da:	4770      	bx	lr
 800e0dc:	f3af 8000 	nop.w

0800e0e0 <pxCurrentTCBConst2>:
 800e0e0:	20000a2c 	.word	0x20000a2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e0e4:	bf00      	nop
 800e0e6:	bf00      	nop

0800e0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e0e8:	4808      	ldr	r0, [pc, #32]	; (800e10c <prvPortStartFirstTask+0x24>)
 800e0ea:	6800      	ldr	r0, [r0, #0]
 800e0ec:	6800      	ldr	r0, [r0, #0]
 800e0ee:	f380 8808 	msr	MSP, r0
 800e0f2:	f04f 0000 	mov.w	r0, #0
 800e0f6:	f380 8814 	msr	CONTROL, r0
 800e0fa:	b662      	cpsie	i
 800e0fc:	b661      	cpsie	f
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	f3bf 8f6f 	isb	sy
 800e106:	df00      	svc	0
 800e108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e10a:	bf00      	nop
 800e10c:	e000ed08 	.word	0xe000ed08

0800e110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e116:	4b46      	ldr	r3, [pc, #280]	; (800e230 <xPortStartScheduler+0x120>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a46      	ldr	r2, [pc, #280]	; (800e234 <xPortStartScheduler+0x124>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d10a      	bne.n	800e136 <xPortStartScheduler+0x26>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	613b      	str	r3, [r7, #16]
}
 800e132:	bf00      	nop
 800e134:	e7fe      	b.n	800e134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e136:	4b3e      	ldr	r3, [pc, #248]	; (800e230 <xPortStartScheduler+0x120>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a3f      	ldr	r2, [pc, #252]	; (800e238 <xPortStartScheduler+0x128>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d10a      	bne.n	800e156 <xPortStartScheduler+0x46>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	60fb      	str	r3, [r7, #12]
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e156:	4b39      	ldr	r3, [pc, #228]	; (800e23c <xPortStartScheduler+0x12c>)
 800e158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	22ff      	movs	r2, #255	; 0xff
 800e166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e170:	78fb      	ldrb	r3, [r7, #3]
 800e172:	b2db      	uxtb	r3, r3
 800e174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	4b31      	ldr	r3, [pc, #196]	; (800e240 <xPortStartScheduler+0x130>)
 800e17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e17e:	4b31      	ldr	r3, [pc, #196]	; (800e244 <xPortStartScheduler+0x134>)
 800e180:	2207      	movs	r2, #7
 800e182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e184:	e009      	b.n	800e19a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e186:	4b2f      	ldr	r3, [pc, #188]	; (800e244 <xPortStartScheduler+0x134>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3b01      	subs	r3, #1
 800e18c:	4a2d      	ldr	r2, [pc, #180]	; (800e244 <xPortStartScheduler+0x134>)
 800e18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e190:	78fb      	ldrb	r3, [r7, #3]
 800e192:	b2db      	uxtb	r3, r3
 800e194:	005b      	lsls	r3, r3, #1
 800e196:	b2db      	uxtb	r3, r3
 800e198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e19a:	78fb      	ldrb	r3, [r7, #3]
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1a2:	2b80      	cmp	r3, #128	; 0x80
 800e1a4:	d0ef      	beq.n	800e186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1a6:	4b27      	ldr	r3, [pc, #156]	; (800e244 <xPortStartScheduler+0x134>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f1c3 0307 	rsb	r3, r3, #7
 800e1ae:	2b04      	cmp	r3, #4
 800e1b0:	d00a      	beq.n	800e1c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	60bb      	str	r3, [r7, #8]
}
 800e1c4:	bf00      	nop
 800e1c6:	e7fe      	b.n	800e1c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e1c8:	4b1e      	ldr	r3, [pc, #120]	; (800e244 <xPortStartScheduler+0x134>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	021b      	lsls	r3, r3, #8
 800e1ce:	4a1d      	ldr	r2, [pc, #116]	; (800e244 <xPortStartScheduler+0x134>)
 800e1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e1d2:	4b1c      	ldr	r3, [pc, #112]	; (800e244 <xPortStartScheduler+0x134>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e1da:	4a1a      	ldr	r2, [pc, #104]	; (800e244 <xPortStartScheduler+0x134>)
 800e1dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1e6:	4b18      	ldr	r3, [pc, #96]	; (800e248 <xPortStartScheduler+0x138>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a17      	ldr	r2, [pc, #92]	; (800e248 <xPortStartScheduler+0x138>)
 800e1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e1f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1f2:	4b15      	ldr	r3, [pc, #84]	; (800e248 <xPortStartScheduler+0x138>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a14      	ldr	r2, [pc, #80]	; (800e248 <xPortStartScheduler+0x138>)
 800e1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e1fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1fe:	f000 f8dd 	bl	800e3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e202:	4b12      	ldr	r3, [pc, #72]	; (800e24c <xPortStartScheduler+0x13c>)
 800e204:	2200      	movs	r2, #0
 800e206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e208:	f000 f8fc 	bl	800e404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e20c:	4b10      	ldr	r3, [pc, #64]	; (800e250 <xPortStartScheduler+0x140>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a0f      	ldr	r2, [pc, #60]	; (800e250 <xPortStartScheduler+0x140>)
 800e212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e218:	f7ff ff66 	bl	800e0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e21c:	f7fe fe44 	bl	800cea8 <vTaskSwitchContext>
	prvTaskExitError();
 800e220:	f7ff ff1e 	bl	800e060 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3718      	adds	r7, #24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	e000ed00 	.word	0xe000ed00
 800e234:	410fc271 	.word	0x410fc271
 800e238:	410fc270 	.word	0x410fc270
 800e23c:	e000e400 	.word	0xe000e400
 800e240:	20001058 	.word	0x20001058
 800e244:	2000105c 	.word	0x2000105c
 800e248:	e000ed20 	.word	0xe000ed20
 800e24c:	20000024 	.word	0x20000024
 800e250:	e000ef34 	.word	0xe000ef34

0800e254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
	__asm volatile
 800e25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e25e:	f383 8811 	msr	BASEPRI, r3
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	607b      	str	r3, [r7, #4]
}
 800e26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e26e:	4b0f      	ldr	r3, [pc, #60]	; (800e2ac <vPortEnterCritical+0x58>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	3301      	adds	r3, #1
 800e274:	4a0d      	ldr	r2, [pc, #52]	; (800e2ac <vPortEnterCritical+0x58>)
 800e276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e278:	4b0c      	ldr	r3, [pc, #48]	; (800e2ac <vPortEnterCritical+0x58>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d10f      	bne.n	800e2a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e280:	4b0b      	ldr	r3, [pc, #44]	; (800e2b0 <vPortEnterCritical+0x5c>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	b2db      	uxtb	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00a      	beq.n	800e2a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	603b      	str	r3, [r7, #0]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <vPortEnterCritical+0x4a>
	}
}
 800e2a0:	bf00      	nop
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr
 800e2ac:	20000024 	.word	0x20000024
 800e2b0:	e000ed04 	.word	0xe000ed04

0800e2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e2ba:	4b12      	ldr	r3, [pc, #72]	; (800e304 <vPortExitCritical+0x50>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d10a      	bne.n	800e2d8 <vPortExitCritical+0x24>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c6:	f383 8811 	msr	BASEPRI, r3
 800e2ca:	f3bf 8f6f 	isb	sy
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	607b      	str	r3, [r7, #4]
}
 800e2d4:	bf00      	nop
 800e2d6:	e7fe      	b.n	800e2d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e2d8:	4b0a      	ldr	r3, [pc, #40]	; (800e304 <vPortExitCritical+0x50>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	4a09      	ldr	r2, [pc, #36]	; (800e304 <vPortExitCritical+0x50>)
 800e2e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2e2:	4b08      	ldr	r3, [pc, #32]	; (800e304 <vPortExitCritical+0x50>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d105      	bne.n	800e2f6 <vPortExitCritical+0x42>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	f383 8811 	msr	BASEPRI, r3
}
 800e2f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2f6:	bf00      	nop
 800e2f8:	370c      	adds	r7, #12
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	20000024 	.word	0x20000024
	...

0800e310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e310:	f3ef 8009 	mrs	r0, PSP
 800e314:	f3bf 8f6f 	isb	sy
 800e318:	4b15      	ldr	r3, [pc, #84]	; (800e370 <pxCurrentTCBConst>)
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	f01e 0f10 	tst.w	lr, #16
 800e320:	bf08      	it	eq
 800e322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e32a:	6010      	str	r0, [r2, #0]
 800e32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e334:	f380 8811 	msr	BASEPRI, r0
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f7fe fdb2 	bl	800cea8 <vTaskSwitchContext>
 800e344:	f04f 0000 	mov.w	r0, #0
 800e348:	f380 8811 	msr	BASEPRI, r0
 800e34c:	bc09      	pop	{r0, r3}
 800e34e:	6819      	ldr	r1, [r3, #0]
 800e350:	6808      	ldr	r0, [r1, #0]
 800e352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e356:	f01e 0f10 	tst.w	lr, #16
 800e35a:	bf08      	it	eq
 800e35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e360:	f380 8809 	msr	PSP, r0
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	f3af 8000 	nop.w

0800e370 <pxCurrentTCBConst>:
 800e370:	20000a2c 	.word	0x20000a2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e374:	bf00      	nop
 800e376:	bf00      	nop

0800e378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	607b      	str	r3, [r7, #4]
}
 800e390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e392:	f7fe fccf 	bl	800cd34 <xTaskIncrementTick>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d003      	beq.n	800e3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e39c:	4b06      	ldr	r3, [pc, #24]	; (800e3b8 <xPortSysTickHandler+0x40>)
 800e39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	f383 8811 	msr	BASEPRI, r3
}
 800e3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e3b0:	bf00      	nop
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	e000ed04 	.word	0xe000ed04

0800e3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e3bc:	b480      	push	{r7}
 800e3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3c0:	4b0b      	ldr	r3, [pc, #44]	; (800e3f0 <vPortSetupTimerInterrupt+0x34>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e3c6:	4b0b      	ldr	r3, [pc, #44]	; (800e3f4 <vPortSetupTimerInterrupt+0x38>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <vPortSetupTimerInterrupt+0x3c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a0a      	ldr	r2, [pc, #40]	; (800e3fc <vPortSetupTimerInterrupt+0x40>)
 800e3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3d6:	099b      	lsrs	r3, r3, #6
 800e3d8:	4a09      	ldr	r2, [pc, #36]	; (800e400 <vPortSetupTimerInterrupt+0x44>)
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3de:	4b04      	ldr	r3, [pc, #16]	; (800e3f0 <vPortSetupTimerInterrupt+0x34>)
 800e3e0:	2207      	movs	r2, #7
 800e3e2:	601a      	str	r2, [r3, #0]
}
 800e3e4:	bf00      	nop
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ec:	4770      	bx	lr
 800e3ee:	bf00      	nop
 800e3f0:	e000e010 	.word	0xe000e010
 800e3f4:	e000e018 	.word	0xe000e018
 800e3f8:	20000004 	.word	0x20000004
 800e3fc:	10624dd3 	.word	0x10624dd3
 800e400:	e000e014 	.word	0xe000e014

0800e404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e414 <vPortEnableVFP+0x10>
 800e408:	6801      	ldr	r1, [r0, #0]
 800e40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e40e:	6001      	str	r1, [r0, #0]
 800e410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e412:	bf00      	nop
 800e414:	e000ed88 	.word	0xe000ed88

0800e418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e41e:	f3ef 8305 	mrs	r3, IPSR
 800e422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b0f      	cmp	r3, #15
 800e428:	d914      	bls.n	800e454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e42a:	4a17      	ldr	r2, [pc, #92]	; (800e488 <vPortValidateInterruptPriority+0x70>)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	4413      	add	r3, r2
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e434:	4b15      	ldr	r3, [pc, #84]	; (800e48c <vPortValidateInterruptPriority+0x74>)
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	7afa      	ldrb	r2, [r7, #11]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d20a      	bcs.n	800e454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e442:	f383 8811 	msr	BASEPRI, r3
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	607b      	str	r3, [r7, #4]
}
 800e450:	bf00      	nop
 800e452:	e7fe      	b.n	800e452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e454:	4b0e      	ldr	r3, [pc, #56]	; (800e490 <vPortValidateInterruptPriority+0x78>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e45c:	4b0d      	ldr	r3, [pc, #52]	; (800e494 <vPortValidateInterruptPriority+0x7c>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	429a      	cmp	r2, r3
 800e462:	d90a      	bls.n	800e47a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	603b      	str	r3, [r7, #0]
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <vPortValidateInterruptPriority+0x60>
	}
 800e47a:	bf00      	nop
 800e47c:	3714      	adds	r7, #20
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	e000e3f0 	.word	0xe000e3f0
 800e48c:	20001058 	.word	0x20001058
 800e490:	e000ed0c 	.word	0xe000ed0c
 800e494:	2000105c 	.word	0x2000105c

0800e498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08a      	sub	sp, #40	; 0x28
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4a4:	f7fe fb8a 	bl	800cbbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4a8:	4b5b      	ldr	r3, [pc, #364]	; (800e618 <pvPortMalloc+0x180>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4b0:	f000 f920 	bl	800e6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4b4:	4b59      	ldr	r3, [pc, #356]	; (800e61c <pvPortMalloc+0x184>)
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f040 8093 	bne.w	800e5e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d01d      	beq.n	800e504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e4c8:	2208      	movs	r2, #8
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f003 0307 	and.w	r3, r3, #7
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d014      	beq.n	800e504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f023 0307 	bic.w	r3, r3, #7
 800e4e0:	3308      	adds	r3, #8
 800e4e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f003 0307 	and.w	r3, r3, #7
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00a      	beq.n	800e504 <pvPortMalloc+0x6c>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	617b      	str	r3, [r7, #20]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d06e      	beq.n	800e5e8 <pvPortMalloc+0x150>
 800e50a:	4b45      	ldr	r3, [pc, #276]	; (800e620 <pvPortMalloc+0x188>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	429a      	cmp	r2, r3
 800e512:	d869      	bhi.n	800e5e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e514:	4b43      	ldr	r3, [pc, #268]	; (800e624 <pvPortMalloc+0x18c>)
 800e516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e518:	4b42      	ldr	r3, [pc, #264]	; (800e624 <pvPortMalloc+0x18c>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e51e:	e004      	b.n	800e52a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	429a      	cmp	r2, r3
 800e532:	d903      	bls.n	800e53c <pvPortMalloc+0xa4>
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1f1      	bne.n	800e520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e53c:	4b36      	ldr	r3, [pc, #216]	; (800e618 <pvPortMalloc+0x180>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e542:	429a      	cmp	r2, r3
 800e544:	d050      	beq.n	800e5e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e546:	6a3b      	ldr	r3, [r7, #32]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2208      	movs	r2, #8
 800e54c:	4413      	add	r3, r2
 800e54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	1ad2      	subs	r2, r2, r3
 800e560:	2308      	movs	r3, #8
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	429a      	cmp	r2, r3
 800e566:	d91f      	bls.n	800e5a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4413      	add	r3, r2
 800e56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	f003 0307 	and.w	r3, r3, #7
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00a      	beq.n	800e590 <pvPortMalloc+0xf8>
	__asm volatile
 800e57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	613b      	str	r3, [r7, #16]
}
 800e58c:	bf00      	nop
 800e58e:	e7fe      	b.n	800e58e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	1ad2      	subs	r2, r2, r3
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5a2:	69b8      	ldr	r0, [r7, #24]
 800e5a4:	f000 f908 	bl	800e7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5a8:	4b1d      	ldr	r3, [pc, #116]	; (800e620 <pvPortMalloc+0x188>)
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	4a1b      	ldr	r2, [pc, #108]	; (800e620 <pvPortMalloc+0x188>)
 800e5b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5b6:	4b1a      	ldr	r3, [pc, #104]	; (800e620 <pvPortMalloc+0x188>)
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	4b1b      	ldr	r3, [pc, #108]	; (800e628 <pvPortMalloc+0x190>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d203      	bcs.n	800e5ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5c2:	4b17      	ldr	r3, [pc, #92]	; (800e620 <pvPortMalloc+0x188>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a18      	ldr	r2, [pc, #96]	; (800e628 <pvPortMalloc+0x190>)
 800e5c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	4b13      	ldr	r3, [pc, #76]	; (800e61c <pvPortMalloc+0x184>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	431a      	orrs	r2, r3
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	2200      	movs	r2, #0
 800e5dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e5de:	4b13      	ldr	r3, [pc, #76]	; (800e62c <pvPortMalloc+0x194>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	4a11      	ldr	r2, [pc, #68]	; (800e62c <pvPortMalloc+0x194>)
 800e5e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5e8:	f7fe faf6 	bl	800cbd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	f003 0307 	and.w	r3, r3, #7
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00a      	beq.n	800e60c <pvPortMalloc+0x174>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	60fb      	str	r3, [r7, #12]
}
 800e608:	bf00      	nop
 800e60a:	e7fe      	b.n	800e60a <pvPortMalloc+0x172>
	return pvReturn;
 800e60c:	69fb      	ldr	r3, [r7, #28]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3728      	adds	r7, #40	; 0x28
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	20004c68 	.word	0x20004c68
 800e61c:	20004c7c 	.word	0x20004c7c
 800e620:	20004c6c 	.word	0x20004c6c
 800e624:	20004c60 	.word	0x20004c60
 800e628:	20004c70 	.word	0x20004c70
 800e62c:	20004c74 	.word	0x20004c74

0800e630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d04d      	beq.n	800e6de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e642:	2308      	movs	r3, #8
 800e644:	425b      	negs	r3, r3
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	4413      	add	r3, r2
 800e64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	685a      	ldr	r2, [r3, #4]
 800e654:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <vPortFree+0xb8>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4013      	ands	r3, r2
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d10a      	bne.n	800e674 <vPortFree+0x44>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	60fb      	str	r3, [r7, #12]
}
 800e670:	bf00      	nop
 800e672:	e7fe      	b.n	800e672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00a      	beq.n	800e692 <vPortFree+0x62>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e680:	f383 8811 	msr	BASEPRI, r3
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	60bb      	str	r3, [r7, #8]
}
 800e68e:	bf00      	nop
 800e690:	e7fe      	b.n	800e690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	685a      	ldr	r2, [r3, #4]
 800e696:	4b14      	ldr	r3, [pc, #80]	; (800e6e8 <vPortFree+0xb8>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4013      	ands	r3, r2
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d01e      	beq.n	800e6de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d11a      	bne.n	800e6de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	4b0e      	ldr	r3, [pc, #56]	; (800e6e8 <vPortFree+0xb8>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	43db      	mvns	r3, r3
 800e6b2:	401a      	ands	r2, r3
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6b8:	f7fe fa80 	bl	800cbbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	685a      	ldr	r2, [r3, #4]
 800e6c0:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <vPortFree+0xbc>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	4a09      	ldr	r2, [pc, #36]	; (800e6ec <vPortFree+0xbc>)
 800e6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6ca:	6938      	ldr	r0, [r7, #16]
 800e6cc:	f000 f874 	bl	800e7b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e6d0:	4b07      	ldr	r3, [pc, #28]	; (800e6f0 <vPortFree+0xc0>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	4a06      	ldr	r2, [pc, #24]	; (800e6f0 <vPortFree+0xc0>)
 800e6d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e6da:	f7fe fa7d 	bl	800cbd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6de:	bf00      	nop
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	20004c7c 	.word	0x20004c7c
 800e6ec:	20004c6c 	.word	0x20004c6c
 800e6f0:	20004c78 	.word	0x20004c78

0800e6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b085      	sub	sp, #20
 800e6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e700:	4b27      	ldr	r3, [pc, #156]	; (800e7a0 <prvHeapInit+0xac>)
 800e702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f003 0307 	and.w	r3, r3, #7
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00c      	beq.n	800e728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	3307      	adds	r3, #7
 800e712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f023 0307 	bic.w	r3, r3, #7
 800e71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	4a1f      	ldr	r2, [pc, #124]	; (800e7a0 <prvHeapInit+0xac>)
 800e724:	4413      	add	r3, r2
 800e726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e72c:	4a1d      	ldr	r2, [pc, #116]	; (800e7a4 <prvHeapInit+0xb0>)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e732:	4b1c      	ldr	r3, [pc, #112]	; (800e7a4 <prvHeapInit+0xb0>)
 800e734:	2200      	movs	r2, #0
 800e736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	4413      	add	r3, r2
 800e73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e740:	2208      	movs	r2, #8
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	1a9b      	subs	r3, r3, r2
 800e746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f023 0307 	bic.w	r3, r3, #7
 800e74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	4a15      	ldr	r2, [pc, #84]	; (800e7a8 <prvHeapInit+0xb4>)
 800e754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e756:	4b14      	ldr	r3, [pc, #80]	; (800e7a8 <prvHeapInit+0xb4>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2200      	movs	r2, #0
 800e75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e75e:	4b12      	ldr	r3, [pc, #72]	; (800e7a8 <prvHeapInit+0xb4>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2200      	movs	r2, #0
 800e764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	1ad2      	subs	r2, r2, r3
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e774:	4b0c      	ldr	r3, [pc, #48]	; (800e7a8 <prvHeapInit+0xb4>)
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	4a0a      	ldr	r2, [pc, #40]	; (800e7ac <prvHeapInit+0xb8>)
 800e782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	4a09      	ldr	r2, [pc, #36]	; (800e7b0 <prvHeapInit+0xbc>)
 800e78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e78c:	4b09      	ldr	r3, [pc, #36]	; (800e7b4 <prvHeapInit+0xc0>)
 800e78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e792:	601a      	str	r2, [r3, #0]
}
 800e794:	bf00      	nop
 800e796:	3714      	adds	r7, #20
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	20001060 	.word	0x20001060
 800e7a4:	20004c60 	.word	0x20004c60
 800e7a8:	20004c68 	.word	0x20004c68
 800e7ac:	20004c70 	.word	0x20004c70
 800e7b0:	20004c6c 	.word	0x20004c6c
 800e7b4:	20004c7c 	.word	0x20004c7c

0800e7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7c0:	4b28      	ldr	r3, [pc, #160]	; (800e864 <prvInsertBlockIntoFreeList+0xac>)
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	e002      	b.n	800e7cc <prvInsertBlockIntoFreeList+0x14>
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d8f7      	bhi.n	800e7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d108      	bne.n	800e7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	441a      	add	r2, r3
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	68ba      	ldr	r2, [r7, #8]
 800e804:	441a      	add	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d118      	bne.n	800e840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	4b15      	ldr	r3, [pc, #84]	; (800e868 <prvInsertBlockIntoFreeList+0xb0>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	429a      	cmp	r2, r3
 800e818:	d00d      	beq.n	800e836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	685a      	ldr	r2, [r3, #4]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	441a      	add	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	601a      	str	r2, [r3, #0]
 800e834:	e008      	b.n	800e848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e836:	4b0c      	ldr	r3, [pc, #48]	; (800e868 <prvInsertBlockIntoFreeList+0xb0>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	e003      	b.n	800e848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d002      	beq.n	800e856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e856:	bf00      	nop
 800e858:	3714      	adds	r7, #20
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	20004c60 	.word	0x20004c60
 800e868:	20004c68 	.word	0x20004c68

0800e86c <atof>:
 800e86c:	2100      	movs	r1, #0
 800e86e:	f001 bb61 	b.w	800ff34 <strtod>
	...

0800e874 <__errno>:
 800e874:	4b01      	ldr	r3, [pc, #4]	; (800e87c <__errno+0x8>)
 800e876:	6818      	ldr	r0, [r3, #0]
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	20000028 	.word	0x20000028

0800e880 <__libc_init_array>:
 800e880:	b570      	push	{r4, r5, r6, lr}
 800e882:	4d0d      	ldr	r5, [pc, #52]	; (800e8b8 <__libc_init_array+0x38>)
 800e884:	4c0d      	ldr	r4, [pc, #52]	; (800e8bc <__libc_init_array+0x3c>)
 800e886:	1b64      	subs	r4, r4, r5
 800e888:	10a4      	asrs	r4, r4, #2
 800e88a:	2600      	movs	r6, #0
 800e88c:	42a6      	cmp	r6, r4
 800e88e:	d109      	bne.n	800e8a4 <__libc_init_array+0x24>
 800e890:	4d0b      	ldr	r5, [pc, #44]	; (800e8c0 <__libc_init_array+0x40>)
 800e892:	4c0c      	ldr	r4, [pc, #48]	; (800e8c4 <__libc_init_array+0x44>)
 800e894:	f004 fae8 	bl	8012e68 <_init>
 800e898:	1b64      	subs	r4, r4, r5
 800e89a:	10a4      	asrs	r4, r4, #2
 800e89c:	2600      	movs	r6, #0
 800e89e:	42a6      	cmp	r6, r4
 800e8a0:	d105      	bne.n	800e8ae <__libc_init_array+0x2e>
 800e8a2:	bd70      	pop	{r4, r5, r6, pc}
 800e8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8a8:	4798      	blx	r3
 800e8aa:	3601      	adds	r6, #1
 800e8ac:	e7ee      	b.n	800e88c <__libc_init_array+0xc>
 800e8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b2:	4798      	blx	r3
 800e8b4:	3601      	adds	r6, #1
 800e8b6:	e7f2      	b.n	800e89e <__libc_init_array+0x1e>
 800e8b8:	080139e8 	.word	0x080139e8
 800e8bc:	080139e8 	.word	0x080139e8
 800e8c0:	080139e8 	.word	0x080139e8
 800e8c4:	080139ec 	.word	0x080139ec

0800e8c8 <memcpy>:
 800e8c8:	440a      	add	r2, r1
 800e8ca:	4291      	cmp	r1, r2
 800e8cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8d0:	d100      	bne.n	800e8d4 <memcpy+0xc>
 800e8d2:	4770      	bx	lr
 800e8d4:	b510      	push	{r4, lr}
 800e8d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8de:	4291      	cmp	r1, r2
 800e8e0:	d1f9      	bne.n	800e8d6 <memcpy+0xe>
 800e8e2:	bd10      	pop	{r4, pc}

0800e8e4 <memset>:
 800e8e4:	4402      	add	r2, r0
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d100      	bne.n	800e8ee <memset+0xa>
 800e8ec:	4770      	bx	lr
 800e8ee:	f803 1b01 	strb.w	r1, [r3], #1
 800e8f2:	e7f9      	b.n	800e8e8 <memset+0x4>

0800e8f4 <__cvt>:
 800e8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f8:	ec55 4b10 	vmov	r4, r5, d0
 800e8fc:	2d00      	cmp	r5, #0
 800e8fe:	460e      	mov	r6, r1
 800e900:	4619      	mov	r1, r3
 800e902:	462b      	mov	r3, r5
 800e904:	bfbb      	ittet	lt
 800e906:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e90a:	461d      	movlt	r5, r3
 800e90c:	2300      	movge	r3, #0
 800e90e:	232d      	movlt	r3, #45	; 0x2d
 800e910:	700b      	strb	r3, [r1, #0]
 800e912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e914:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e918:	4691      	mov	r9, r2
 800e91a:	f023 0820 	bic.w	r8, r3, #32
 800e91e:	bfbc      	itt	lt
 800e920:	4622      	movlt	r2, r4
 800e922:	4614      	movlt	r4, r2
 800e924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e928:	d005      	beq.n	800e936 <__cvt+0x42>
 800e92a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e92e:	d100      	bne.n	800e932 <__cvt+0x3e>
 800e930:	3601      	adds	r6, #1
 800e932:	2102      	movs	r1, #2
 800e934:	e000      	b.n	800e938 <__cvt+0x44>
 800e936:	2103      	movs	r1, #3
 800e938:	ab03      	add	r3, sp, #12
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	ab02      	add	r3, sp, #8
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	ec45 4b10 	vmov	d0, r4, r5
 800e944:	4653      	mov	r3, sl
 800e946:	4632      	mov	r2, r6
 800e948:	f001 fc42 	bl	80101d0 <_dtoa_r>
 800e94c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e950:	4607      	mov	r7, r0
 800e952:	d102      	bne.n	800e95a <__cvt+0x66>
 800e954:	f019 0f01 	tst.w	r9, #1
 800e958:	d022      	beq.n	800e9a0 <__cvt+0xac>
 800e95a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e95e:	eb07 0906 	add.w	r9, r7, r6
 800e962:	d110      	bne.n	800e986 <__cvt+0x92>
 800e964:	783b      	ldrb	r3, [r7, #0]
 800e966:	2b30      	cmp	r3, #48	; 0x30
 800e968:	d10a      	bne.n	800e980 <__cvt+0x8c>
 800e96a:	2200      	movs	r2, #0
 800e96c:	2300      	movs	r3, #0
 800e96e:	4620      	mov	r0, r4
 800e970:	4629      	mov	r1, r5
 800e972:	f7f2 f8b1 	bl	8000ad8 <__aeabi_dcmpeq>
 800e976:	b918      	cbnz	r0, 800e980 <__cvt+0x8c>
 800e978:	f1c6 0601 	rsb	r6, r6, #1
 800e97c:	f8ca 6000 	str.w	r6, [sl]
 800e980:	f8da 3000 	ldr.w	r3, [sl]
 800e984:	4499      	add	r9, r3
 800e986:	2200      	movs	r2, #0
 800e988:	2300      	movs	r3, #0
 800e98a:	4620      	mov	r0, r4
 800e98c:	4629      	mov	r1, r5
 800e98e:	f7f2 f8a3 	bl	8000ad8 <__aeabi_dcmpeq>
 800e992:	b108      	cbz	r0, 800e998 <__cvt+0xa4>
 800e994:	f8cd 900c 	str.w	r9, [sp, #12]
 800e998:	2230      	movs	r2, #48	; 0x30
 800e99a:	9b03      	ldr	r3, [sp, #12]
 800e99c:	454b      	cmp	r3, r9
 800e99e:	d307      	bcc.n	800e9b0 <__cvt+0xbc>
 800e9a0:	9b03      	ldr	r3, [sp, #12]
 800e9a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9a4:	1bdb      	subs	r3, r3, r7
 800e9a6:	4638      	mov	r0, r7
 800e9a8:	6013      	str	r3, [r2, #0]
 800e9aa:	b004      	add	sp, #16
 800e9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b0:	1c59      	adds	r1, r3, #1
 800e9b2:	9103      	str	r1, [sp, #12]
 800e9b4:	701a      	strb	r2, [r3, #0]
 800e9b6:	e7f0      	b.n	800e99a <__cvt+0xa6>

0800e9b8 <__exponent>:
 800e9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2900      	cmp	r1, #0
 800e9be:	bfb8      	it	lt
 800e9c0:	4249      	neglt	r1, r1
 800e9c2:	f803 2b02 	strb.w	r2, [r3], #2
 800e9c6:	bfb4      	ite	lt
 800e9c8:	222d      	movlt	r2, #45	; 0x2d
 800e9ca:	222b      	movge	r2, #43	; 0x2b
 800e9cc:	2909      	cmp	r1, #9
 800e9ce:	7042      	strb	r2, [r0, #1]
 800e9d0:	dd2a      	ble.n	800ea28 <__exponent+0x70>
 800e9d2:	f10d 0407 	add.w	r4, sp, #7
 800e9d6:	46a4      	mov	ip, r4
 800e9d8:	270a      	movs	r7, #10
 800e9da:	46a6      	mov	lr, r4
 800e9dc:	460a      	mov	r2, r1
 800e9de:	fb91 f6f7 	sdiv	r6, r1, r7
 800e9e2:	fb07 1516 	mls	r5, r7, r6, r1
 800e9e6:	3530      	adds	r5, #48	; 0x30
 800e9e8:	2a63      	cmp	r2, #99	; 0x63
 800e9ea:	f104 34ff 	add.w	r4, r4, #4294967295
 800e9ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e9f2:	4631      	mov	r1, r6
 800e9f4:	dcf1      	bgt.n	800e9da <__exponent+0x22>
 800e9f6:	3130      	adds	r1, #48	; 0x30
 800e9f8:	f1ae 0502 	sub.w	r5, lr, #2
 800e9fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ea00:	1c44      	adds	r4, r0, #1
 800ea02:	4629      	mov	r1, r5
 800ea04:	4561      	cmp	r1, ip
 800ea06:	d30a      	bcc.n	800ea1e <__exponent+0x66>
 800ea08:	f10d 0209 	add.w	r2, sp, #9
 800ea0c:	eba2 020e 	sub.w	r2, r2, lr
 800ea10:	4565      	cmp	r5, ip
 800ea12:	bf88      	it	hi
 800ea14:	2200      	movhi	r2, #0
 800ea16:	4413      	add	r3, r2
 800ea18:	1a18      	subs	r0, r3, r0
 800ea1a:	b003      	add	sp, #12
 800ea1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ea26:	e7ed      	b.n	800ea04 <__exponent+0x4c>
 800ea28:	2330      	movs	r3, #48	; 0x30
 800ea2a:	3130      	adds	r1, #48	; 0x30
 800ea2c:	7083      	strb	r3, [r0, #2]
 800ea2e:	70c1      	strb	r1, [r0, #3]
 800ea30:	1d03      	adds	r3, r0, #4
 800ea32:	e7f1      	b.n	800ea18 <__exponent+0x60>

0800ea34 <_printf_float>:
 800ea34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea38:	ed2d 8b02 	vpush	{d8}
 800ea3c:	b08d      	sub	sp, #52	; 0x34
 800ea3e:	460c      	mov	r4, r1
 800ea40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea44:	4616      	mov	r6, r2
 800ea46:	461f      	mov	r7, r3
 800ea48:	4605      	mov	r5, r0
 800ea4a:	f002 fd2f 	bl	80114ac <_localeconv_r>
 800ea4e:	f8d0 a000 	ldr.w	sl, [r0]
 800ea52:	4650      	mov	r0, sl
 800ea54:	f7f1 fbc4 	bl	80001e0 <strlen>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea5c:	6823      	ldr	r3, [r4, #0]
 800ea5e:	9305      	str	r3, [sp, #20]
 800ea60:	f8d8 3000 	ldr.w	r3, [r8]
 800ea64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea68:	3307      	adds	r3, #7
 800ea6a:	f023 0307 	bic.w	r3, r3, #7
 800ea6e:	f103 0208 	add.w	r2, r3, #8
 800ea72:	f8c8 2000 	str.w	r2, [r8]
 800ea76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea86:	9307      	str	r3, [sp, #28]
 800ea88:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea8c:	ee08 0a10 	vmov	s16, r0
 800ea90:	4b9f      	ldr	r3, [pc, #636]	; (800ed10 <_printf_float+0x2dc>)
 800ea92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea96:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9a:	f7f2 f84f 	bl	8000b3c <__aeabi_dcmpun>
 800ea9e:	bb88      	cbnz	r0, 800eb04 <_printf_float+0xd0>
 800eaa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaa4:	4b9a      	ldr	r3, [pc, #616]	; (800ed10 <_printf_float+0x2dc>)
 800eaa6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaaa:	f7f2 f829 	bl	8000b00 <__aeabi_dcmple>
 800eaae:	bb48      	cbnz	r0, 800eb04 <_printf_float+0xd0>
 800eab0:	2200      	movs	r2, #0
 800eab2:	2300      	movs	r3, #0
 800eab4:	4640      	mov	r0, r8
 800eab6:	4649      	mov	r1, r9
 800eab8:	f7f2 f818 	bl	8000aec <__aeabi_dcmplt>
 800eabc:	b110      	cbz	r0, 800eac4 <_printf_float+0x90>
 800eabe:	232d      	movs	r3, #45	; 0x2d
 800eac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eac4:	4b93      	ldr	r3, [pc, #588]	; (800ed14 <_printf_float+0x2e0>)
 800eac6:	4894      	ldr	r0, [pc, #592]	; (800ed18 <_printf_float+0x2e4>)
 800eac8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eacc:	bf94      	ite	ls
 800eace:	4698      	movls	r8, r3
 800ead0:	4680      	movhi	r8, r0
 800ead2:	2303      	movs	r3, #3
 800ead4:	6123      	str	r3, [r4, #16]
 800ead6:	9b05      	ldr	r3, [sp, #20]
 800ead8:	f023 0204 	bic.w	r2, r3, #4
 800eadc:	6022      	str	r2, [r4, #0]
 800eade:	f04f 0900 	mov.w	r9, #0
 800eae2:	9700      	str	r7, [sp, #0]
 800eae4:	4633      	mov	r3, r6
 800eae6:	aa0b      	add	r2, sp, #44	; 0x2c
 800eae8:	4621      	mov	r1, r4
 800eaea:	4628      	mov	r0, r5
 800eaec:	f000 f9d8 	bl	800eea0 <_printf_common>
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	f040 8090 	bne.w	800ec16 <_printf_float+0x1e2>
 800eaf6:	f04f 30ff 	mov.w	r0, #4294967295
 800eafa:	b00d      	add	sp, #52	; 0x34
 800eafc:	ecbd 8b02 	vpop	{d8}
 800eb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb04:	4642      	mov	r2, r8
 800eb06:	464b      	mov	r3, r9
 800eb08:	4640      	mov	r0, r8
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	f7f2 f816 	bl	8000b3c <__aeabi_dcmpun>
 800eb10:	b140      	cbz	r0, 800eb24 <_printf_float+0xf0>
 800eb12:	464b      	mov	r3, r9
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	bfbc      	itt	lt
 800eb18:	232d      	movlt	r3, #45	; 0x2d
 800eb1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb1e:	487f      	ldr	r0, [pc, #508]	; (800ed1c <_printf_float+0x2e8>)
 800eb20:	4b7f      	ldr	r3, [pc, #508]	; (800ed20 <_printf_float+0x2ec>)
 800eb22:	e7d1      	b.n	800eac8 <_printf_float+0x94>
 800eb24:	6863      	ldr	r3, [r4, #4]
 800eb26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb2a:	9206      	str	r2, [sp, #24]
 800eb2c:	1c5a      	adds	r2, r3, #1
 800eb2e:	d13f      	bne.n	800ebb0 <_printf_float+0x17c>
 800eb30:	2306      	movs	r3, #6
 800eb32:	6063      	str	r3, [r4, #4]
 800eb34:	9b05      	ldr	r3, [sp, #20]
 800eb36:	6861      	ldr	r1, [r4, #4]
 800eb38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	9303      	str	r3, [sp, #12]
 800eb40:	ab0a      	add	r3, sp, #40	; 0x28
 800eb42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb46:	ab09      	add	r3, sp, #36	; 0x24
 800eb48:	ec49 8b10 	vmov	d0, r8, r9
 800eb4c:	9300      	str	r3, [sp, #0]
 800eb4e:	6022      	str	r2, [r4, #0]
 800eb50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb54:	4628      	mov	r0, r5
 800eb56:	f7ff fecd 	bl	800e8f4 <__cvt>
 800eb5a:	9b06      	ldr	r3, [sp, #24]
 800eb5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb5e:	2b47      	cmp	r3, #71	; 0x47
 800eb60:	4680      	mov	r8, r0
 800eb62:	d108      	bne.n	800eb76 <_printf_float+0x142>
 800eb64:	1cc8      	adds	r0, r1, #3
 800eb66:	db02      	blt.n	800eb6e <_printf_float+0x13a>
 800eb68:	6863      	ldr	r3, [r4, #4]
 800eb6a:	4299      	cmp	r1, r3
 800eb6c:	dd41      	ble.n	800ebf2 <_printf_float+0x1be>
 800eb6e:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb72:	fa5f fb8b 	uxtb.w	fp, fp
 800eb76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb7a:	d820      	bhi.n	800ebbe <_printf_float+0x18a>
 800eb7c:	3901      	subs	r1, #1
 800eb7e:	465a      	mov	r2, fp
 800eb80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb84:	9109      	str	r1, [sp, #36]	; 0x24
 800eb86:	f7ff ff17 	bl	800e9b8 <__exponent>
 800eb8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb8c:	1813      	adds	r3, r2, r0
 800eb8e:	2a01      	cmp	r2, #1
 800eb90:	4681      	mov	r9, r0
 800eb92:	6123      	str	r3, [r4, #16]
 800eb94:	dc02      	bgt.n	800eb9c <_printf_float+0x168>
 800eb96:	6822      	ldr	r2, [r4, #0]
 800eb98:	07d2      	lsls	r2, r2, #31
 800eb9a:	d501      	bpl.n	800eba0 <_printf_float+0x16c>
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	6123      	str	r3, [r4, #16]
 800eba0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d09c      	beq.n	800eae2 <_printf_float+0xae>
 800eba8:	232d      	movs	r3, #45	; 0x2d
 800ebaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebae:	e798      	b.n	800eae2 <_printf_float+0xae>
 800ebb0:	9a06      	ldr	r2, [sp, #24]
 800ebb2:	2a47      	cmp	r2, #71	; 0x47
 800ebb4:	d1be      	bne.n	800eb34 <_printf_float+0x100>
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1bc      	bne.n	800eb34 <_printf_float+0x100>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e7b9      	b.n	800eb32 <_printf_float+0xfe>
 800ebbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ebc2:	d118      	bne.n	800ebf6 <_printf_float+0x1c2>
 800ebc4:	2900      	cmp	r1, #0
 800ebc6:	6863      	ldr	r3, [r4, #4]
 800ebc8:	dd0b      	ble.n	800ebe2 <_printf_float+0x1ae>
 800ebca:	6121      	str	r1, [r4, #16]
 800ebcc:	b913      	cbnz	r3, 800ebd4 <_printf_float+0x1a0>
 800ebce:	6822      	ldr	r2, [r4, #0]
 800ebd0:	07d0      	lsls	r0, r2, #31
 800ebd2:	d502      	bpl.n	800ebda <_printf_float+0x1a6>
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	440b      	add	r3, r1
 800ebd8:	6123      	str	r3, [r4, #16]
 800ebda:	65a1      	str	r1, [r4, #88]	; 0x58
 800ebdc:	f04f 0900 	mov.w	r9, #0
 800ebe0:	e7de      	b.n	800eba0 <_printf_float+0x16c>
 800ebe2:	b913      	cbnz	r3, 800ebea <_printf_float+0x1b6>
 800ebe4:	6822      	ldr	r2, [r4, #0]
 800ebe6:	07d2      	lsls	r2, r2, #31
 800ebe8:	d501      	bpl.n	800ebee <_printf_float+0x1ba>
 800ebea:	3302      	adds	r3, #2
 800ebec:	e7f4      	b.n	800ebd8 <_printf_float+0x1a4>
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e7f2      	b.n	800ebd8 <_printf_float+0x1a4>
 800ebf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ebf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebf8:	4299      	cmp	r1, r3
 800ebfa:	db05      	blt.n	800ec08 <_printf_float+0x1d4>
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	6121      	str	r1, [r4, #16]
 800ec00:	07d8      	lsls	r0, r3, #31
 800ec02:	d5ea      	bpl.n	800ebda <_printf_float+0x1a6>
 800ec04:	1c4b      	adds	r3, r1, #1
 800ec06:	e7e7      	b.n	800ebd8 <_printf_float+0x1a4>
 800ec08:	2900      	cmp	r1, #0
 800ec0a:	bfd4      	ite	le
 800ec0c:	f1c1 0202 	rsble	r2, r1, #2
 800ec10:	2201      	movgt	r2, #1
 800ec12:	4413      	add	r3, r2
 800ec14:	e7e0      	b.n	800ebd8 <_printf_float+0x1a4>
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	055a      	lsls	r2, r3, #21
 800ec1a:	d407      	bmi.n	800ec2c <_printf_float+0x1f8>
 800ec1c:	6923      	ldr	r3, [r4, #16]
 800ec1e:	4642      	mov	r2, r8
 800ec20:	4631      	mov	r1, r6
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b8      	blx	r7
 800ec26:	3001      	adds	r0, #1
 800ec28:	d12c      	bne.n	800ec84 <_printf_float+0x250>
 800ec2a:	e764      	b.n	800eaf6 <_printf_float+0xc2>
 800ec2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec30:	f240 80e0 	bls.w	800edf4 <_printf_float+0x3c0>
 800ec34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec38:	2200      	movs	r2, #0
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	f7f1 ff4c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d034      	beq.n	800ecae <_printf_float+0x27a>
 800ec44:	4a37      	ldr	r2, [pc, #220]	; (800ed24 <_printf_float+0x2f0>)
 800ec46:	2301      	movs	r3, #1
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	47b8      	blx	r7
 800ec4e:	3001      	adds	r0, #1
 800ec50:	f43f af51 	beq.w	800eaf6 <_printf_float+0xc2>
 800ec54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	db02      	blt.n	800ec62 <_printf_float+0x22e>
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	07d8      	lsls	r0, r3, #31
 800ec60:	d510      	bpl.n	800ec84 <_printf_float+0x250>
 800ec62:	ee18 3a10 	vmov	r3, s16
 800ec66:	4652      	mov	r2, sl
 800ec68:	4631      	mov	r1, r6
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	47b8      	blx	r7
 800ec6e:	3001      	adds	r0, #1
 800ec70:	f43f af41 	beq.w	800eaf6 <_printf_float+0xc2>
 800ec74:	f04f 0800 	mov.w	r8, #0
 800ec78:	f104 091a 	add.w	r9, r4, #26
 800ec7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	4543      	cmp	r3, r8
 800ec82:	dc09      	bgt.n	800ec98 <_printf_float+0x264>
 800ec84:	6823      	ldr	r3, [r4, #0]
 800ec86:	079b      	lsls	r3, r3, #30
 800ec88:	f100 8105 	bmi.w	800ee96 <_printf_float+0x462>
 800ec8c:	68e0      	ldr	r0, [r4, #12]
 800ec8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec90:	4298      	cmp	r0, r3
 800ec92:	bfb8      	it	lt
 800ec94:	4618      	movlt	r0, r3
 800ec96:	e730      	b.n	800eafa <_printf_float+0xc6>
 800ec98:	2301      	movs	r3, #1
 800ec9a:	464a      	mov	r2, r9
 800ec9c:	4631      	mov	r1, r6
 800ec9e:	4628      	mov	r0, r5
 800eca0:	47b8      	blx	r7
 800eca2:	3001      	adds	r0, #1
 800eca4:	f43f af27 	beq.w	800eaf6 <_printf_float+0xc2>
 800eca8:	f108 0801 	add.w	r8, r8, #1
 800ecac:	e7e6      	b.n	800ec7c <_printf_float+0x248>
 800ecae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	dc39      	bgt.n	800ed28 <_printf_float+0x2f4>
 800ecb4:	4a1b      	ldr	r2, [pc, #108]	; (800ed24 <_printf_float+0x2f0>)
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	4631      	mov	r1, r6
 800ecba:	4628      	mov	r0, r5
 800ecbc:	47b8      	blx	r7
 800ecbe:	3001      	adds	r0, #1
 800ecc0:	f43f af19 	beq.w	800eaf6 <_printf_float+0xc2>
 800ecc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	d102      	bne.n	800ecd2 <_printf_float+0x29e>
 800eccc:	6823      	ldr	r3, [r4, #0]
 800ecce:	07d9      	lsls	r1, r3, #31
 800ecd0:	d5d8      	bpl.n	800ec84 <_printf_float+0x250>
 800ecd2:	ee18 3a10 	vmov	r3, s16
 800ecd6:	4652      	mov	r2, sl
 800ecd8:	4631      	mov	r1, r6
 800ecda:	4628      	mov	r0, r5
 800ecdc:	47b8      	blx	r7
 800ecde:	3001      	adds	r0, #1
 800ece0:	f43f af09 	beq.w	800eaf6 <_printf_float+0xc2>
 800ece4:	f04f 0900 	mov.w	r9, #0
 800ece8:	f104 0a1a 	add.w	sl, r4, #26
 800ecec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecee:	425b      	negs	r3, r3
 800ecf0:	454b      	cmp	r3, r9
 800ecf2:	dc01      	bgt.n	800ecf8 <_printf_float+0x2c4>
 800ecf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecf6:	e792      	b.n	800ec1e <_printf_float+0x1ea>
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	4652      	mov	r2, sl
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4628      	mov	r0, r5
 800ed00:	47b8      	blx	r7
 800ed02:	3001      	adds	r0, #1
 800ed04:	f43f aef7 	beq.w	800eaf6 <_printf_float+0xc2>
 800ed08:	f109 0901 	add.w	r9, r9, #1
 800ed0c:	e7ee      	b.n	800ecec <_printf_float+0x2b8>
 800ed0e:	bf00      	nop
 800ed10:	7fefffff 	.word	0x7fefffff
 800ed14:	080134dc 	.word	0x080134dc
 800ed18:	080134e0 	.word	0x080134e0
 800ed1c:	080134e8 	.word	0x080134e8
 800ed20:	080134e4 	.word	0x080134e4
 800ed24:	080134ec 	.word	0x080134ec
 800ed28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	bfa8      	it	ge
 800ed30:	461a      	movge	r2, r3
 800ed32:	2a00      	cmp	r2, #0
 800ed34:	4691      	mov	r9, r2
 800ed36:	dc37      	bgt.n	800eda8 <_printf_float+0x374>
 800ed38:	f04f 0b00 	mov.w	fp, #0
 800ed3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed40:	f104 021a 	add.w	r2, r4, #26
 800ed44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed46:	9305      	str	r3, [sp, #20]
 800ed48:	eba3 0309 	sub.w	r3, r3, r9
 800ed4c:	455b      	cmp	r3, fp
 800ed4e:	dc33      	bgt.n	800edb8 <_printf_float+0x384>
 800ed50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed54:	429a      	cmp	r2, r3
 800ed56:	db3b      	blt.n	800edd0 <_printf_float+0x39c>
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	07da      	lsls	r2, r3, #31
 800ed5c:	d438      	bmi.n	800edd0 <_printf_float+0x39c>
 800ed5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed60:	9b05      	ldr	r3, [sp, #20]
 800ed62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed64:	1ad3      	subs	r3, r2, r3
 800ed66:	eba2 0901 	sub.w	r9, r2, r1
 800ed6a:	4599      	cmp	r9, r3
 800ed6c:	bfa8      	it	ge
 800ed6e:	4699      	movge	r9, r3
 800ed70:	f1b9 0f00 	cmp.w	r9, #0
 800ed74:	dc35      	bgt.n	800ede2 <_printf_float+0x3ae>
 800ed76:	f04f 0800 	mov.w	r8, #0
 800ed7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed7e:	f104 0a1a 	add.w	sl, r4, #26
 800ed82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed86:	1a9b      	subs	r3, r3, r2
 800ed88:	eba3 0309 	sub.w	r3, r3, r9
 800ed8c:	4543      	cmp	r3, r8
 800ed8e:	f77f af79 	ble.w	800ec84 <_printf_float+0x250>
 800ed92:	2301      	movs	r3, #1
 800ed94:	4652      	mov	r2, sl
 800ed96:	4631      	mov	r1, r6
 800ed98:	4628      	mov	r0, r5
 800ed9a:	47b8      	blx	r7
 800ed9c:	3001      	adds	r0, #1
 800ed9e:	f43f aeaa 	beq.w	800eaf6 <_printf_float+0xc2>
 800eda2:	f108 0801 	add.w	r8, r8, #1
 800eda6:	e7ec      	b.n	800ed82 <_printf_float+0x34e>
 800eda8:	4613      	mov	r3, r2
 800edaa:	4631      	mov	r1, r6
 800edac:	4642      	mov	r2, r8
 800edae:	4628      	mov	r0, r5
 800edb0:	47b8      	blx	r7
 800edb2:	3001      	adds	r0, #1
 800edb4:	d1c0      	bne.n	800ed38 <_printf_float+0x304>
 800edb6:	e69e      	b.n	800eaf6 <_printf_float+0xc2>
 800edb8:	2301      	movs	r3, #1
 800edba:	4631      	mov	r1, r6
 800edbc:	4628      	mov	r0, r5
 800edbe:	9205      	str	r2, [sp, #20]
 800edc0:	47b8      	blx	r7
 800edc2:	3001      	adds	r0, #1
 800edc4:	f43f ae97 	beq.w	800eaf6 <_printf_float+0xc2>
 800edc8:	9a05      	ldr	r2, [sp, #20]
 800edca:	f10b 0b01 	add.w	fp, fp, #1
 800edce:	e7b9      	b.n	800ed44 <_printf_float+0x310>
 800edd0:	ee18 3a10 	vmov	r3, s16
 800edd4:	4652      	mov	r2, sl
 800edd6:	4631      	mov	r1, r6
 800edd8:	4628      	mov	r0, r5
 800edda:	47b8      	blx	r7
 800eddc:	3001      	adds	r0, #1
 800edde:	d1be      	bne.n	800ed5e <_printf_float+0x32a>
 800ede0:	e689      	b.n	800eaf6 <_printf_float+0xc2>
 800ede2:	9a05      	ldr	r2, [sp, #20]
 800ede4:	464b      	mov	r3, r9
 800ede6:	4442      	add	r2, r8
 800ede8:	4631      	mov	r1, r6
 800edea:	4628      	mov	r0, r5
 800edec:	47b8      	blx	r7
 800edee:	3001      	adds	r0, #1
 800edf0:	d1c1      	bne.n	800ed76 <_printf_float+0x342>
 800edf2:	e680      	b.n	800eaf6 <_printf_float+0xc2>
 800edf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edf6:	2a01      	cmp	r2, #1
 800edf8:	dc01      	bgt.n	800edfe <_printf_float+0x3ca>
 800edfa:	07db      	lsls	r3, r3, #31
 800edfc:	d538      	bpl.n	800ee70 <_printf_float+0x43c>
 800edfe:	2301      	movs	r3, #1
 800ee00:	4642      	mov	r2, r8
 800ee02:	4631      	mov	r1, r6
 800ee04:	4628      	mov	r0, r5
 800ee06:	47b8      	blx	r7
 800ee08:	3001      	adds	r0, #1
 800ee0a:	f43f ae74 	beq.w	800eaf6 <_printf_float+0xc2>
 800ee0e:	ee18 3a10 	vmov	r3, s16
 800ee12:	4652      	mov	r2, sl
 800ee14:	4631      	mov	r1, r6
 800ee16:	4628      	mov	r0, r5
 800ee18:	47b8      	blx	r7
 800ee1a:	3001      	adds	r0, #1
 800ee1c:	f43f ae6b 	beq.w	800eaf6 <_printf_float+0xc2>
 800ee20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee24:	2200      	movs	r2, #0
 800ee26:	2300      	movs	r3, #0
 800ee28:	f7f1 fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee2c:	b9d8      	cbnz	r0, 800ee66 <_printf_float+0x432>
 800ee2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee30:	f108 0201 	add.w	r2, r8, #1
 800ee34:	3b01      	subs	r3, #1
 800ee36:	4631      	mov	r1, r6
 800ee38:	4628      	mov	r0, r5
 800ee3a:	47b8      	blx	r7
 800ee3c:	3001      	adds	r0, #1
 800ee3e:	d10e      	bne.n	800ee5e <_printf_float+0x42a>
 800ee40:	e659      	b.n	800eaf6 <_printf_float+0xc2>
 800ee42:	2301      	movs	r3, #1
 800ee44:	4652      	mov	r2, sl
 800ee46:	4631      	mov	r1, r6
 800ee48:	4628      	mov	r0, r5
 800ee4a:	47b8      	blx	r7
 800ee4c:	3001      	adds	r0, #1
 800ee4e:	f43f ae52 	beq.w	800eaf6 <_printf_float+0xc2>
 800ee52:	f108 0801 	add.w	r8, r8, #1
 800ee56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	4543      	cmp	r3, r8
 800ee5c:	dcf1      	bgt.n	800ee42 <_printf_float+0x40e>
 800ee5e:	464b      	mov	r3, r9
 800ee60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee64:	e6dc      	b.n	800ec20 <_printf_float+0x1ec>
 800ee66:	f04f 0800 	mov.w	r8, #0
 800ee6a:	f104 0a1a 	add.w	sl, r4, #26
 800ee6e:	e7f2      	b.n	800ee56 <_printf_float+0x422>
 800ee70:	2301      	movs	r3, #1
 800ee72:	4642      	mov	r2, r8
 800ee74:	e7df      	b.n	800ee36 <_printf_float+0x402>
 800ee76:	2301      	movs	r3, #1
 800ee78:	464a      	mov	r2, r9
 800ee7a:	4631      	mov	r1, r6
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	47b8      	blx	r7
 800ee80:	3001      	adds	r0, #1
 800ee82:	f43f ae38 	beq.w	800eaf6 <_printf_float+0xc2>
 800ee86:	f108 0801 	add.w	r8, r8, #1
 800ee8a:	68e3      	ldr	r3, [r4, #12]
 800ee8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee8e:	1a5b      	subs	r3, r3, r1
 800ee90:	4543      	cmp	r3, r8
 800ee92:	dcf0      	bgt.n	800ee76 <_printf_float+0x442>
 800ee94:	e6fa      	b.n	800ec8c <_printf_float+0x258>
 800ee96:	f04f 0800 	mov.w	r8, #0
 800ee9a:	f104 0919 	add.w	r9, r4, #25
 800ee9e:	e7f4      	b.n	800ee8a <_printf_float+0x456>

0800eea0 <_printf_common>:
 800eea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea4:	4616      	mov	r6, r2
 800eea6:	4699      	mov	r9, r3
 800eea8:	688a      	ldr	r2, [r1, #8]
 800eeaa:	690b      	ldr	r3, [r1, #16]
 800eeac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	bfb8      	it	lt
 800eeb4:	4613      	movlt	r3, r2
 800eeb6:	6033      	str	r3, [r6, #0]
 800eeb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eebc:	4607      	mov	r7, r0
 800eebe:	460c      	mov	r4, r1
 800eec0:	b10a      	cbz	r2, 800eec6 <_printf_common+0x26>
 800eec2:	3301      	adds	r3, #1
 800eec4:	6033      	str	r3, [r6, #0]
 800eec6:	6823      	ldr	r3, [r4, #0]
 800eec8:	0699      	lsls	r1, r3, #26
 800eeca:	bf42      	ittt	mi
 800eecc:	6833      	ldrmi	r3, [r6, #0]
 800eece:	3302      	addmi	r3, #2
 800eed0:	6033      	strmi	r3, [r6, #0]
 800eed2:	6825      	ldr	r5, [r4, #0]
 800eed4:	f015 0506 	ands.w	r5, r5, #6
 800eed8:	d106      	bne.n	800eee8 <_printf_common+0x48>
 800eeda:	f104 0a19 	add.w	sl, r4, #25
 800eede:	68e3      	ldr	r3, [r4, #12]
 800eee0:	6832      	ldr	r2, [r6, #0]
 800eee2:	1a9b      	subs	r3, r3, r2
 800eee4:	42ab      	cmp	r3, r5
 800eee6:	dc26      	bgt.n	800ef36 <_printf_common+0x96>
 800eee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eeec:	1e13      	subs	r3, r2, #0
 800eeee:	6822      	ldr	r2, [r4, #0]
 800eef0:	bf18      	it	ne
 800eef2:	2301      	movne	r3, #1
 800eef4:	0692      	lsls	r2, r2, #26
 800eef6:	d42b      	bmi.n	800ef50 <_printf_common+0xb0>
 800eef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eefc:	4649      	mov	r1, r9
 800eefe:	4638      	mov	r0, r7
 800ef00:	47c0      	blx	r8
 800ef02:	3001      	adds	r0, #1
 800ef04:	d01e      	beq.n	800ef44 <_printf_common+0xa4>
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	68e5      	ldr	r5, [r4, #12]
 800ef0a:	6832      	ldr	r2, [r6, #0]
 800ef0c:	f003 0306 	and.w	r3, r3, #6
 800ef10:	2b04      	cmp	r3, #4
 800ef12:	bf08      	it	eq
 800ef14:	1aad      	subeq	r5, r5, r2
 800ef16:	68a3      	ldr	r3, [r4, #8]
 800ef18:	6922      	ldr	r2, [r4, #16]
 800ef1a:	bf0c      	ite	eq
 800ef1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef20:	2500      	movne	r5, #0
 800ef22:	4293      	cmp	r3, r2
 800ef24:	bfc4      	itt	gt
 800ef26:	1a9b      	subgt	r3, r3, r2
 800ef28:	18ed      	addgt	r5, r5, r3
 800ef2a:	2600      	movs	r6, #0
 800ef2c:	341a      	adds	r4, #26
 800ef2e:	42b5      	cmp	r5, r6
 800ef30:	d11a      	bne.n	800ef68 <_printf_common+0xc8>
 800ef32:	2000      	movs	r0, #0
 800ef34:	e008      	b.n	800ef48 <_printf_common+0xa8>
 800ef36:	2301      	movs	r3, #1
 800ef38:	4652      	mov	r2, sl
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	4638      	mov	r0, r7
 800ef3e:	47c0      	blx	r8
 800ef40:	3001      	adds	r0, #1
 800ef42:	d103      	bne.n	800ef4c <_printf_common+0xac>
 800ef44:	f04f 30ff 	mov.w	r0, #4294967295
 800ef48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef4c:	3501      	adds	r5, #1
 800ef4e:	e7c6      	b.n	800eede <_printf_common+0x3e>
 800ef50:	18e1      	adds	r1, r4, r3
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	2030      	movs	r0, #48	; 0x30
 800ef56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef5a:	4422      	add	r2, r4
 800ef5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef64:	3302      	adds	r3, #2
 800ef66:	e7c7      	b.n	800eef8 <_printf_common+0x58>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	4622      	mov	r2, r4
 800ef6c:	4649      	mov	r1, r9
 800ef6e:	4638      	mov	r0, r7
 800ef70:	47c0      	blx	r8
 800ef72:	3001      	adds	r0, #1
 800ef74:	d0e6      	beq.n	800ef44 <_printf_common+0xa4>
 800ef76:	3601      	adds	r6, #1
 800ef78:	e7d9      	b.n	800ef2e <_printf_common+0x8e>
	...

0800ef7c <_printf_i>:
 800ef7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef80:	460c      	mov	r4, r1
 800ef82:	4691      	mov	r9, r2
 800ef84:	7e27      	ldrb	r7, [r4, #24]
 800ef86:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef88:	2f78      	cmp	r7, #120	; 0x78
 800ef8a:	4680      	mov	r8, r0
 800ef8c:	469a      	mov	sl, r3
 800ef8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef92:	d807      	bhi.n	800efa4 <_printf_i+0x28>
 800ef94:	2f62      	cmp	r7, #98	; 0x62
 800ef96:	d80a      	bhi.n	800efae <_printf_i+0x32>
 800ef98:	2f00      	cmp	r7, #0
 800ef9a:	f000 80d8 	beq.w	800f14e <_printf_i+0x1d2>
 800ef9e:	2f58      	cmp	r7, #88	; 0x58
 800efa0:	f000 80a3 	beq.w	800f0ea <_printf_i+0x16e>
 800efa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efac:	e03a      	b.n	800f024 <_printf_i+0xa8>
 800efae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efb2:	2b15      	cmp	r3, #21
 800efb4:	d8f6      	bhi.n	800efa4 <_printf_i+0x28>
 800efb6:	a001      	add	r0, pc, #4	; (adr r0, 800efbc <_printf_i+0x40>)
 800efb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800efbc:	0800f015 	.word	0x0800f015
 800efc0:	0800f029 	.word	0x0800f029
 800efc4:	0800efa5 	.word	0x0800efa5
 800efc8:	0800efa5 	.word	0x0800efa5
 800efcc:	0800efa5 	.word	0x0800efa5
 800efd0:	0800efa5 	.word	0x0800efa5
 800efd4:	0800f029 	.word	0x0800f029
 800efd8:	0800efa5 	.word	0x0800efa5
 800efdc:	0800efa5 	.word	0x0800efa5
 800efe0:	0800efa5 	.word	0x0800efa5
 800efe4:	0800efa5 	.word	0x0800efa5
 800efe8:	0800f135 	.word	0x0800f135
 800efec:	0800f059 	.word	0x0800f059
 800eff0:	0800f117 	.word	0x0800f117
 800eff4:	0800efa5 	.word	0x0800efa5
 800eff8:	0800efa5 	.word	0x0800efa5
 800effc:	0800f157 	.word	0x0800f157
 800f000:	0800efa5 	.word	0x0800efa5
 800f004:	0800f059 	.word	0x0800f059
 800f008:	0800efa5 	.word	0x0800efa5
 800f00c:	0800efa5 	.word	0x0800efa5
 800f010:	0800f11f 	.word	0x0800f11f
 800f014:	680b      	ldr	r3, [r1, #0]
 800f016:	1d1a      	adds	r2, r3, #4
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	600a      	str	r2, [r1, #0]
 800f01c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f024:	2301      	movs	r3, #1
 800f026:	e0a3      	b.n	800f170 <_printf_i+0x1f4>
 800f028:	6825      	ldr	r5, [r4, #0]
 800f02a:	6808      	ldr	r0, [r1, #0]
 800f02c:	062e      	lsls	r6, r5, #24
 800f02e:	f100 0304 	add.w	r3, r0, #4
 800f032:	d50a      	bpl.n	800f04a <_printf_i+0xce>
 800f034:	6805      	ldr	r5, [r0, #0]
 800f036:	600b      	str	r3, [r1, #0]
 800f038:	2d00      	cmp	r5, #0
 800f03a:	da03      	bge.n	800f044 <_printf_i+0xc8>
 800f03c:	232d      	movs	r3, #45	; 0x2d
 800f03e:	426d      	negs	r5, r5
 800f040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f044:	485e      	ldr	r0, [pc, #376]	; (800f1c0 <_printf_i+0x244>)
 800f046:	230a      	movs	r3, #10
 800f048:	e019      	b.n	800f07e <_printf_i+0x102>
 800f04a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f04e:	6805      	ldr	r5, [r0, #0]
 800f050:	600b      	str	r3, [r1, #0]
 800f052:	bf18      	it	ne
 800f054:	b22d      	sxthne	r5, r5
 800f056:	e7ef      	b.n	800f038 <_printf_i+0xbc>
 800f058:	680b      	ldr	r3, [r1, #0]
 800f05a:	6825      	ldr	r5, [r4, #0]
 800f05c:	1d18      	adds	r0, r3, #4
 800f05e:	6008      	str	r0, [r1, #0]
 800f060:	0628      	lsls	r0, r5, #24
 800f062:	d501      	bpl.n	800f068 <_printf_i+0xec>
 800f064:	681d      	ldr	r5, [r3, #0]
 800f066:	e002      	b.n	800f06e <_printf_i+0xf2>
 800f068:	0669      	lsls	r1, r5, #25
 800f06a:	d5fb      	bpl.n	800f064 <_printf_i+0xe8>
 800f06c:	881d      	ldrh	r5, [r3, #0]
 800f06e:	4854      	ldr	r0, [pc, #336]	; (800f1c0 <_printf_i+0x244>)
 800f070:	2f6f      	cmp	r7, #111	; 0x6f
 800f072:	bf0c      	ite	eq
 800f074:	2308      	moveq	r3, #8
 800f076:	230a      	movne	r3, #10
 800f078:	2100      	movs	r1, #0
 800f07a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f07e:	6866      	ldr	r6, [r4, #4]
 800f080:	60a6      	str	r6, [r4, #8]
 800f082:	2e00      	cmp	r6, #0
 800f084:	bfa2      	ittt	ge
 800f086:	6821      	ldrge	r1, [r4, #0]
 800f088:	f021 0104 	bicge.w	r1, r1, #4
 800f08c:	6021      	strge	r1, [r4, #0]
 800f08e:	b90d      	cbnz	r5, 800f094 <_printf_i+0x118>
 800f090:	2e00      	cmp	r6, #0
 800f092:	d04d      	beq.n	800f130 <_printf_i+0x1b4>
 800f094:	4616      	mov	r6, r2
 800f096:	fbb5 f1f3 	udiv	r1, r5, r3
 800f09a:	fb03 5711 	mls	r7, r3, r1, r5
 800f09e:	5dc7      	ldrb	r7, [r0, r7]
 800f0a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0a4:	462f      	mov	r7, r5
 800f0a6:	42bb      	cmp	r3, r7
 800f0a8:	460d      	mov	r5, r1
 800f0aa:	d9f4      	bls.n	800f096 <_printf_i+0x11a>
 800f0ac:	2b08      	cmp	r3, #8
 800f0ae:	d10b      	bne.n	800f0c8 <_printf_i+0x14c>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	07df      	lsls	r7, r3, #31
 800f0b4:	d508      	bpl.n	800f0c8 <_printf_i+0x14c>
 800f0b6:	6923      	ldr	r3, [r4, #16]
 800f0b8:	6861      	ldr	r1, [r4, #4]
 800f0ba:	4299      	cmp	r1, r3
 800f0bc:	bfde      	ittt	le
 800f0be:	2330      	movle	r3, #48	; 0x30
 800f0c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f0c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f0c8:	1b92      	subs	r2, r2, r6
 800f0ca:	6122      	str	r2, [r4, #16]
 800f0cc:	f8cd a000 	str.w	sl, [sp]
 800f0d0:	464b      	mov	r3, r9
 800f0d2:	aa03      	add	r2, sp, #12
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	f7ff fee2 	bl	800eea0 <_printf_common>
 800f0dc:	3001      	adds	r0, #1
 800f0de:	d14c      	bne.n	800f17a <_printf_i+0x1fe>
 800f0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e4:	b004      	add	sp, #16
 800f0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ea:	4835      	ldr	r0, [pc, #212]	; (800f1c0 <_printf_i+0x244>)
 800f0ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	680e      	ldr	r6, [r1, #0]
 800f0f4:	061f      	lsls	r7, r3, #24
 800f0f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f0fa:	600e      	str	r6, [r1, #0]
 800f0fc:	d514      	bpl.n	800f128 <_printf_i+0x1ac>
 800f0fe:	07d9      	lsls	r1, r3, #31
 800f100:	bf44      	itt	mi
 800f102:	f043 0320 	orrmi.w	r3, r3, #32
 800f106:	6023      	strmi	r3, [r4, #0]
 800f108:	b91d      	cbnz	r5, 800f112 <_printf_i+0x196>
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	f023 0320 	bic.w	r3, r3, #32
 800f110:	6023      	str	r3, [r4, #0]
 800f112:	2310      	movs	r3, #16
 800f114:	e7b0      	b.n	800f078 <_printf_i+0xfc>
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	f043 0320 	orr.w	r3, r3, #32
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	2378      	movs	r3, #120	; 0x78
 800f120:	4828      	ldr	r0, [pc, #160]	; (800f1c4 <_printf_i+0x248>)
 800f122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f126:	e7e3      	b.n	800f0f0 <_printf_i+0x174>
 800f128:	065e      	lsls	r6, r3, #25
 800f12a:	bf48      	it	mi
 800f12c:	b2ad      	uxthmi	r5, r5
 800f12e:	e7e6      	b.n	800f0fe <_printf_i+0x182>
 800f130:	4616      	mov	r6, r2
 800f132:	e7bb      	b.n	800f0ac <_printf_i+0x130>
 800f134:	680b      	ldr	r3, [r1, #0]
 800f136:	6826      	ldr	r6, [r4, #0]
 800f138:	6960      	ldr	r0, [r4, #20]
 800f13a:	1d1d      	adds	r5, r3, #4
 800f13c:	600d      	str	r5, [r1, #0]
 800f13e:	0635      	lsls	r5, r6, #24
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	d501      	bpl.n	800f148 <_printf_i+0x1cc>
 800f144:	6018      	str	r0, [r3, #0]
 800f146:	e002      	b.n	800f14e <_printf_i+0x1d2>
 800f148:	0671      	lsls	r1, r6, #25
 800f14a:	d5fb      	bpl.n	800f144 <_printf_i+0x1c8>
 800f14c:	8018      	strh	r0, [r3, #0]
 800f14e:	2300      	movs	r3, #0
 800f150:	6123      	str	r3, [r4, #16]
 800f152:	4616      	mov	r6, r2
 800f154:	e7ba      	b.n	800f0cc <_printf_i+0x150>
 800f156:	680b      	ldr	r3, [r1, #0]
 800f158:	1d1a      	adds	r2, r3, #4
 800f15a:	600a      	str	r2, [r1, #0]
 800f15c:	681e      	ldr	r6, [r3, #0]
 800f15e:	6862      	ldr	r2, [r4, #4]
 800f160:	2100      	movs	r1, #0
 800f162:	4630      	mov	r0, r6
 800f164:	f7f1 f844 	bl	80001f0 <memchr>
 800f168:	b108      	cbz	r0, 800f16e <_printf_i+0x1f2>
 800f16a:	1b80      	subs	r0, r0, r6
 800f16c:	6060      	str	r0, [r4, #4]
 800f16e:	6863      	ldr	r3, [r4, #4]
 800f170:	6123      	str	r3, [r4, #16]
 800f172:	2300      	movs	r3, #0
 800f174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f178:	e7a8      	b.n	800f0cc <_printf_i+0x150>
 800f17a:	6923      	ldr	r3, [r4, #16]
 800f17c:	4632      	mov	r2, r6
 800f17e:	4649      	mov	r1, r9
 800f180:	4640      	mov	r0, r8
 800f182:	47d0      	blx	sl
 800f184:	3001      	adds	r0, #1
 800f186:	d0ab      	beq.n	800f0e0 <_printf_i+0x164>
 800f188:	6823      	ldr	r3, [r4, #0]
 800f18a:	079b      	lsls	r3, r3, #30
 800f18c:	d413      	bmi.n	800f1b6 <_printf_i+0x23a>
 800f18e:	68e0      	ldr	r0, [r4, #12]
 800f190:	9b03      	ldr	r3, [sp, #12]
 800f192:	4298      	cmp	r0, r3
 800f194:	bfb8      	it	lt
 800f196:	4618      	movlt	r0, r3
 800f198:	e7a4      	b.n	800f0e4 <_printf_i+0x168>
 800f19a:	2301      	movs	r3, #1
 800f19c:	4632      	mov	r2, r6
 800f19e:	4649      	mov	r1, r9
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	47d0      	blx	sl
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	d09b      	beq.n	800f0e0 <_printf_i+0x164>
 800f1a8:	3501      	adds	r5, #1
 800f1aa:	68e3      	ldr	r3, [r4, #12]
 800f1ac:	9903      	ldr	r1, [sp, #12]
 800f1ae:	1a5b      	subs	r3, r3, r1
 800f1b0:	42ab      	cmp	r3, r5
 800f1b2:	dcf2      	bgt.n	800f19a <_printf_i+0x21e>
 800f1b4:	e7eb      	b.n	800f18e <_printf_i+0x212>
 800f1b6:	2500      	movs	r5, #0
 800f1b8:	f104 0619 	add.w	r6, r4, #25
 800f1bc:	e7f5      	b.n	800f1aa <_printf_i+0x22e>
 800f1be:	bf00      	nop
 800f1c0:	080134ee 	.word	0x080134ee
 800f1c4:	080134ff 	.word	0x080134ff

0800f1c8 <siprintf>:
 800f1c8:	b40e      	push	{r1, r2, r3}
 800f1ca:	b500      	push	{lr}
 800f1cc:	b09c      	sub	sp, #112	; 0x70
 800f1ce:	ab1d      	add	r3, sp, #116	; 0x74
 800f1d0:	9002      	str	r0, [sp, #8]
 800f1d2:	9006      	str	r0, [sp, #24]
 800f1d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f1d8:	4809      	ldr	r0, [pc, #36]	; (800f200 <siprintf+0x38>)
 800f1da:	9107      	str	r1, [sp, #28]
 800f1dc:	9104      	str	r1, [sp, #16]
 800f1de:	4909      	ldr	r1, [pc, #36]	; (800f204 <siprintf+0x3c>)
 800f1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1e4:	9105      	str	r1, [sp, #20]
 800f1e6:	6800      	ldr	r0, [r0, #0]
 800f1e8:	9301      	str	r3, [sp, #4]
 800f1ea:	a902      	add	r1, sp, #8
 800f1ec:	f002 ff4c 	bl	8012088 <_svfiprintf_r>
 800f1f0:	9b02      	ldr	r3, [sp, #8]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	701a      	strb	r2, [r3, #0]
 800f1f6:	b01c      	add	sp, #112	; 0x70
 800f1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1fc:	b003      	add	sp, #12
 800f1fe:	4770      	bx	lr
 800f200:	20000028 	.word	0x20000028
 800f204:	ffff0208 	.word	0xffff0208

0800f208 <strcat>:
 800f208:	b510      	push	{r4, lr}
 800f20a:	4602      	mov	r2, r0
 800f20c:	7814      	ldrb	r4, [r2, #0]
 800f20e:	4613      	mov	r3, r2
 800f210:	3201      	adds	r2, #1
 800f212:	2c00      	cmp	r4, #0
 800f214:	d1fa      	bne.n	800f20c <strcat+0x4>
 800f216:	3b01      	subs	r3, #1
 800f218:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f21c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f220:	2a00      	cmp	r2, #0
 800f222:	d1f9      	bne.n	800f218 <strcat+0x10>
 800f224:	bd10      	pop	{r4, pc}

0800f226 <strchr>:
 800f226:	b2c9      	uxtb	r1, r1
 800f228:	4603      	mov	r3, r0
 800f22a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f22e:	b11a      	cbz	r2, 800f238 <strchr+0x12>
 800f230:	428a      	cmp	r2, r1
 800f232:	d1f9      	bne.n	800f228 <strchr+0x2>
 800f234:	4618      	mov	r0, r3
 800f236:	4770      	bx	lr
 800f238:	2900      	cmp	r1, #0
 800f23a:	bf18      	it	ne
 800f23c:	2300      	movne	r3, #0
 800f23e:	e7f9      	b.n	800f234 <strchr+0xe>

0800f240 <strcpy>:
 800f240:	4603      	mov	r3, r0
 800f242:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f246:	f803 2b01 	strb.w	r2, [r3], #1
 800f24a:	2a00      	cmp	r2, #0
 800f24c:	d1f9      	bne.n	800f242 <strcpy+0x2>
 800f24e:	4770      	bx	lr

0800f250 <strdup>:
 800f250:	4b02      	ldr	r3, [pc, #8]	; (800f25c <strdup+0xc>)
 800f252:	4601      	mov	r1, r0
 800f254:	6818      	ldr	r0, [r3, #0]
 800f256:	f000 b803 	b.w	800f260 <_strdup_r>
 800f25a:	bf00      	nop
 800f25c:	20000028 	.word	0x20000028

0800f260 <_strdup_r>:
 800f260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	460d      	mov	r5, r1
 800f268:	f7f0 ffba 	bl	80001e0 <strlen>
 800f26c:	1c42      	adds	r2, r0, #1
 800f26e:	4611      	mov	r1, r2
 800f270:	4620      	mov	r0, r4
 800f272:	9201      	str	r2, [sp, #4]
 800f274:	f002 fe52 	bl	8011f1c <_malloc_r>
 800f278:	4604      	mov	r4, r0
 800f27a:	b118      	cbz	r0, 800f284 <_strdup_r+0x24>
 800f27c:	9a01      	ldr	r2, [sp, #4]
 800f27e:	4629      	mov	r1, r5
 800f280:	f7ff fb22 	bl	800e8c8 <memcpy>
 800f284:	4620      	mov	r0, r4
 800f286:	b003      	add	sp, #12
 800f288:	bd30      	pop	{r4, r5, pc}

0800f28a <strncpy>:
 800f28a:	b510      	push	{r4, lr}
 800f28c:	3901      	subs	r1, #1
 800f28e:	4603      	mov	r3, r0
 800f290:	b132      	cbz	r2, 800f2a0 <strncpy+0x16>
 800f292:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f296:	f803 4b01 	strb.w	r4, [r3], #1
 800f29a:	3a01      	subs	r2, #1
 800f29c:	2c00      	cmp	r4, #0
 800f29e:	d1f7      	bne.n	800f290 <strncpy+0x6>
 800f2a0:	441a      	add	r2, r3
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d100      	bne.n	800f2aa <strncpy+0x20>
 800f2a8:	bd10      	pop	{r4, pc}
 800f2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f2ae:	e7f9      	b.n	800f2a4 <strncpy+0x1a>

0800f2b0 <strsep>:
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	6800      	ldr	r0, [r0, #0]
 800f2b6:	f000 be7d 	b.w	800ffb4 <__strtok_r>

0800f2ba <strstr>:
 800f2ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2bc:	780c      	ldrb	r4, [r1, #0]
 800f2be:	b164      	cbz	r4, 800f2da <strstr+0x20>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	781a      	ldrb	r2, [r3, #0]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	1c5e      	adds	r6, r3, #1
 800f2c8:	b90a      	cbnz	r2, 800f2ce <strstr+0x14>
 800f2ca:	4610      	mov	r0, r2
 800f2cc:	e005      	b.n	800f2da <strstr+0x20>
 800f2ce:	4294      	cmp	r4, r2
 800f2d0:	d108      	bne.n	800f2e4 <strstr+0x2a>
 800f2d2:	460d      	mov	r5, r1
 800f2d4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800f2d8:	b902      	cbnz	r2, 800f2dc <strstr+0x22>
 800f2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2dc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800f2e0:	4297      	cmp	r7, r2
 800f2e2:	d0f7      	beq.n	800f2d4 <strstr+0x1a>
 800f2e4:	4633      	mov	r3, r6
 800f2e6:	e7ec      	b.n	800f2c2 <strstr+0x8>

0800f2e8 <sulp>:
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	460d      	mov	r5, r1
 800f2ee:	ec45 4b10 	vmov	d0, r4, r5
 800f2f2:	4616      	mov	r6, r2
 800f2f4:	f002 fc64 	bl	8011bc0 <__ulp>
 800f2f8:	ec51 0b10 	vmov	r0, r1, d0
 800f2fc:	b17e      	cbz	r6, 800f31e <sulp+0x36>
 800f2fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f302:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f306:	2b00      	cmp	r3, #0
 800f308:	dd09      	ble.n	800f31e <sulp+0x36>
 800f30a:	051b      	lsls	r3, r3, #20
 800f30c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f310:	2400      	movs	r4, #0
 800f312:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f316:	4622      	mov	r2, r4
 800f318:	462b      	mov	r3, r5
 800f31a:	f7f1 f975 	bl	8000608 <__aeabi_dmul>
 800f31e:	bd70      	pop	{r4, r5, r6, pc}

0800f320 <_strtod_l>:
 800f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	b0a3      	sub	sp, #140	; 0x8c
 800f326:	461f      	mov	r7, r3
 800f328:	2300      	movs	r3, #0
 800f32a:	931e      	str	r3, [sp, #120]	; 0x78
 800f32c:	4ba4      	ldr	r3, [pc, #656]	; (800f5c0 <_strtod_l+0x2a0>)
 800f32e:	9219      	str	r2, [sp, #100]	; 0x64
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	9307      	str	r3, [sp, #28]
 800f334:	4604      	mov	r4, r0
 800f336:	4618      	mov	r0, r3
 800f338:	4688      	mov	r8, r1
 800f33a:	f7f0 ff51 	bl	80001e0 <strlen>
 800f33e:	f04f 0a00 	mov.w	sl, #0
 800f342:	4605      	mov	r5, r0
 800f344:	f04f 0b00 	mov.w	fp, #0
 800f348:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f34c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f34e:	781a      	ldrb	r2, [r3, #0]
 800f350:	2a2b      	cmp	r2, #43	; 0x2b
 800f352:	d04c      	beq.n	800f3ee <_strtod_l+0xce>
 800f354:	d839      	bhi.n	800f3ca <_strtod_l+0xaa>
 800f356:	2a0d      	cmp	r2, #13
 800f358:	d832      	bhi.n	800f3c0 <_strtod_l+0xa0>
 800f35a:	2a08      	cmp	r2, #8
 800f35c:	d832      	bhi.n	800f3c4 <_strtod_l+0xa4>
 800f35e:	2a00      	cmp	r2, #0
 800f360:	d03c      	beq.n	800f3dc <_strtod_l+0xbc>
 800f362:	2300      	movs	r3, #0
 800f364:	930e      	str	r3, [sp, #56]	; 0x38
 800f366:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f368:	7833      	ldrb	r3, [r6, #0]
 800f36a:	2b30      	cmp	r3, #48	; 0x30
 800f36c:	f040 80b4 	bne.w	800f4d8 <_strtod_l+0x1b8>
 800f370:	7873      	ldrb	r3, [r6, #1]
 800f372:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f376:	2b58      	cmp	r3, #88	; 0x58
 800f378:	d16c      	bne.n	800f454 <_strtod_l+0x134>
 800f37a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f37c:	9301      	str	r3, [sp, #4]
 800f37e:	ab1e      	add	r3, sp, #120	; 0x78
 800f380:	9702      	str	r7, [sp, #8]
 800f382:	9300      	str	r3, [sp, #0]
 800f384:	4a8f      	ldr	r2, [pc, #572]	; (800f5c4 <_strtod_l+0x2a4>)
 800f386:	ab1f      	add	r3, sp, #124	; 0x7c
 800f388:	a91d      	add	r1, sp, #116	; 0x74
 800f38a:	4620      	mov	r0, r4
 800f38c:	f001 fd86 	bl	8010e9c <__gethex>
 800f390:	f010 0707 	ands.w	r7, r0, #7
 800f394:	4605      	mov	r5, r0
 800f396:	d005      	beq.n	800f3a4 <_strtod_l+0x84>
 800f398:	2f06      	cmp	r7, #6
 800f39a:	d12a      	bne.n	800f3f2 <_strtod_l+0xd2>
 800f39c:	3601      	adds	r6, #1
 800f39e:	2300      	movs	r3, #0
 800f3a0:	961d      	str	r6, [sp, #116]	; 0x74
 800f3a2:	930e      	str	r3, [sp, #56]	; 0x38
 800f3a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f040 8596 	bne.w	800fed8 <_strtod_l+0xbb8>
 800f3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3ae:	b1db      	cbz	r3, 800f3e8 <_strtod_l+0xc8>
 800f3b0:	4652      	mov	r2, sl
 800f3b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f3b6:	ec43 2b10 	vmov	d0, r2, r3
 800f3ba:	b023      	add	sp, #140	; 0x8c
 800f3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c0:	2a20      	cmp	r2, #32
 800f3c2:	d1ce      	bne.n	800f362 <_strtod_l+0x42>
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	931d      	str	r3, [sp, #116]	; 0x74
 800f3c8:	e7c0      	b.n	800f34c <_strtod_l+0x2c>
 800f3ca:	2a2d      	cmp	r2, #45	; 0x2d
 800f3cc:	d1c9      	bne.n	800f362 <_strtod_l+0x42>
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	920e      	str	r2, [sp, #56]	; 0x38
 800f3d2:	1c5a      	adds	r2, r3, #1
 800f3d4:	921d      	str	r2, [sp, #116]	; 0x74
 800f3d6:	785b      	ldrb	r3, [r3, #1]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d1c4      	bne.n	800f366 <_strtod_l+0x46>
 800f3dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f3de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f040 8576 	bne.w	800fed4 <_strtod_l+0xbb4>
 800f3e8:	4652      	mov	r2, sl
 800f3ea:	465b      	mov	r3, fp
 800f3ec:	e7e3      	b.n	800f3b6 <_strtod_l+0x96>
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	e7ee      	b.n	800f3d0 <_strtod_l+0xb0>
 800f3f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f3f4:	b13a      	cbz	r2, 800f406 <_strtod_l+0xe6>
 800f3f6:	2135      	movs	r1, #53	; 0x35
 800f3f8:	a820      	add	r0, sp, #128	; 0x80
 800f3fa:	f002 fcec 	bl	8011dd6 <__copybits>
 800f3fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f400:	4620      	mov	r0, r4
 800f402:	f002 f8b1 	bl	8011568 <_Bfree>
 800f406:	3f01      	subs	r7, #1
 800f408:	2f05      	cmp	r7, #5
 800f40a:	d807      	bhi.n	800f41c <_strtod_l+0xfc>
 800f40c:	e8df f007 	tbb	[pc, r7]
 800f410:	1d180b0e 	.word	0x1d180b0e
 800f414:	030e      	.short	0x030e
 800f416:	f04f 0b00 	mov.w	fp, #0
 800f41a:	46da      	mov	sl, fp
 800f41c:	0728      	lsls	r0, r5, #28
 800f41e:	d5c1      	bpl.n	800f3a4 <_strtod_l+0x84>
 800f420:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f424:	e7be      	b.n	800f3a4 <_strtod_l+0x84>
 800f426:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f42a:	e7f7      	b.n	800f41c <_strtod_l+0xfc>
 800f42c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f430:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f432:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f436:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f43a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f43e:	e7ed      	b.n	800f41c <_strtod_l+0xfc>
 800f440:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f5c8 <_strtod_l+0x2a8>
 800f444:	f04f 0a00 	mov.w	sl, #0
 800f448:	e7e8      	b.n	800f41c <_strtod_l+0xfc>
 800f44a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f44e:	f04f 3aff 	mov.w	sl, #4294967295
 800f452:	e7e3      	b.n	800f41c <_strtod_l+0xfc>
 800f454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	921d      	str	r2, [sp, #116]	; 0x74
 800f45a:	785b      	ldrb	r3, [r3, #1]
 800f45c:	2b30      	cmp	r3, #48	; 0x30
 800f45e:	d0f9      	beq.n	800f454 <_strtod_l+0x134>
 800f460:	2b00      	cmp	r3, #0
 800f462:	d09f      	beq.n	800f3a4 <_strtod_l+0x84>
 800f464:	2301      	movs	r3, #1
 800f466:	f04f 0900 	mov.w	r9, #0
 800f46a:	9304      	str	r3, [sp, #16]
 800f46c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f46e:	930a      	str	r3, [sp, #40]	; 0x28
 800f470:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f474:	464f      	mov	r7, r9
 800f476:	220a      	movs	r2, #10
 800f478:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f47a:	7806      	ldrb	r6, [r0, #0]
 800f47c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f480:	b2d9      	uxtb	r1, r3
 800f482:	2909      	cmp	r1, #9
 800f484:	d92a      	bls.n	800f4dc <_strtod_l+0x1bc>
 800f486:	9907      	ldr	r1, [sp, #28]
 800f488:	462a      	mov	r2, r5
 800f48a:	f003 f871 	bl	8012570 <strncmp>
 800f48e:	b398      	cbz	r0, 800f4f8 <_strtod_l+0x1d8>
 800f490:	2000      	movs	r0, #0
 800f492:	4633      	mov	r3, r6
 800f494:	463d      	mov	r5, r7
 800f496:	9007      	str	r0, [sp, #28]
 800f498:	4602      	mov	r2, r0
 800f49a:	2b65      	cmp	r3, #101	; 0x65
 800f49c:	d001      	beq.n	800f4a2 <_strtod_l+0x182>
 800f49e:	2b45      	cmp	r3, #69	; 0x45
 800f4a0:	d118      	bne.n	800f4d4 <_strtod_l+0x1b4>
 800f4a2:	b91d      	cbnz	r5, 800f4ac <_strtod_l+0x18c>
 800f4a4:	9b04      	ldr	r3, [sp, #16]
 800f4a6:	4303      	orrs	r3, r0
 800f4a8:	d098      	beq.n	800f3dc <_strtod_l+0xbc>
 800f4aa:	2500      	movs	r5, #0
 800f4ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f4b0:	f108 0301 	add.w	r3, r8, #1
 800f4b4:	931d      	str	r3, [sp, #116]	; 0x74
 800f4b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f4ba:	2b2b      	cmp	r3, #43	; 0x2b
 800f4bc:	d075      	beq.n	800f5aa <_strtod_l+0x28a>
 800f4be:	2b2d      	cmp	r3, #45	; 0x2d
 800f4c0:	d07b      	beq.n	800f5ba <_strtod_l+0x29a>
 800f4c2:	f04f 0c00 	mov.w	ip, #0
 800f4c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f4ca:	2909      	cmp	r1, #9
 800f4cc:	f240 8082 	bls.w	800f5d4 <_strtod_l+0x2b4>
 800f4d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f4d4:	2600      	movs	r6, #0
 800f4d6:	e09d      	b.n	800f614 <_strtod_l+0x2f4>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	e7c4      	b.n	800f466 <_strtod_l+0x146>
 800f4dc:	2f08      	cmp	r7, #8
 800f4de:	bfd8      	it	le
 800f4e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f4e2:	f100 0001 	add.w	r0, r0, #1
 800f4e6:	bfda      	itte	le
 800f4e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f4ec:	9309      	strle	r3, [sp, #36]	; 0x24
 800f4ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f4f2:	3701      	adds	r7, #1
 800f4f4:	901d      	str	r0, [sp, #116]	; 0x74
 800f4f6:	e7bf      	b.n	800f478 <_strtod_l+0x158>
 800f4f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4fa:	195a      	adds	r2, r3, r5
 800f4fc:	921d      	str	r2, [sp, #116]	; 0x74
 800f4fe:	5d5b      	ldrb	r3, [r3, r5]
 800f500:	2f00      	cmp	r7, #0
 800f502:	d037      	beq.n	800f574 <_strtod_l+0x254>
 800f504:	9007      	str	r0, [sp, #28]
 800f506:	463d      	mov	r5, r7
 800f508:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f50c:	2a09      	cmp	r2, #9
 800f50e:	d912      	bls.n	800f536 <_strtod_l+0x216>
 800f510:	2201      	movs	r2, #1
 800f512:	e7c2      	b.n	800f49a <_strtod_l+0x17a>
 800f514:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f516:	1c5a      	adds	r2, r3, #1
 800f518:	921d      	str	r2, [sp, #116]	; 0x74
 800f51a:	785b      	ldrb	r3, [r3, #1]
 800f51c:	3001      	adds	r0, #1
 800f51e:	2b30      	cmp	r3, #48	; 0x30
 800f520:	d0f8      	beq.n	800f514 <_strtod_l+0x1f4>
 800f522:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f526:	2a08      	cmp	r2, #8
 800f528:	f200 84db 	bhi.w	800fee2 <_strtod_l+0xbc2>
 800f52c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f52e:	9007      	str	r0, [sp, #28]
 800f530:	2000      	movs	r0, #0
 800f532:	920a      	str	r2, [sp, #40]	; 0x28
 800f534:	4605      	mov	r5, r0
 800f536:	3b30      	subs	r3, #48	; 0x30
 800f538:	f100 0201 	add.w	r2, r0, #1
 800f53c:	d014      	beq.n	800f568 <_strtod_l+0x248>
 800f53e:	9907      	ldr	r1, [sp, #28]
 800f540:	4411      	add	r1, r2
 800f542:	9107      	str	r1, [sp, #28]
 800f544:	462a      	mov	r2, r5
 800f546:	eb00 0e05 	add.w	lr, r0, r5
 800f54a:	210a      	movs	r1, #10
 800f54c:	4572      	cmp	r2, lr
 800f54e:	d113      	bne.n	800f578 <_strtod_l+0x258>
 800f550:	182a      	adds	r2, r5, r0
 800f552:	2a08      	cmp	r2, #8
 800f554:	f105 0501 	add.w	r5, r5, #1
 800f558:	4405      	add	r5, r0
 800f55a:	dc1c      	bgt.n	800f596 <_strtod_l+0x276>
 800f55c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f55e:	220a      	movs	r2, #10
 800f560:	fb02 3301 	mla	r3, r2, r1, r3
 800f564:	9309      	str	r3, [sp, #36]	; 0x24
 800f566:	2200      	movs	r2, #0
 800f568:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f56a:	1c59      	adds	r1, r3, #1
 800f56c:	911d      	str	r1, [sp, #116]	; 0x74
 800f56e:	785b      	ldrb	r3, [r3, #1]
 800f570:	4610      	mov	r0, r2
 800f572:	e7c9      	b.n	800f508 <_strtod_l+0x1e8>
 800f574:	4638      	mov	r0, r7
 800f576:	e7d2      	b.n	800f51e <_strtod_l+0x1fe>
 800f578:	2a08      	cmp	r2, #8
 800f57a:	dc04      	bgt.n	800f586 <_strtod_l+0x266>
 800f57c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f57e:	434e      	muls	r6, r1
 800f580:	9609      	str	r6, [sp, #36]	; 0x24
 800f582:	3201      	adds	r2, #1
 800f584:	e7e2      	b.n	800f54c <_strtod_l+0x22c>
 800f586:	f102 0c01 	add.w	ip, r2, #1
 800f58a:	f1bc 0f10 	cmp.w	ip, #16
 800f58e:	bfd8      	it	le
 800f590:	fb01 f909 	mulle.w	r9, r1, r9
 800f594:	e7f5      	b.n	800f582 <_strtod_l+0x262>
 800f596:	2d10      	cmp	r5, #16
 800f598:	bfdc      	itt	le
 800f59a:	220a      	movle	r2, #10
 800f59c:	fb02 3909 	mlale	r9, r2, r9, r3
 800f5a0:	e7e1      	b.n	800f566 <_strtod_l+0x246>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	9307      	str	r3, [sp, #28]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	e77c      	b.n	800f4a4 <_strtod_l+0x184>
 800f5aa:	f04f 0c00 	mov.w	ip, #0
 800f5ae:	f108 0302 	add.w	r3, r8, #2
 800f5b2:	931d      	str	r3, [sp, #116]	; 0x74
 800f5b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f5b8:	e785      	b.n	800f4c6 <_strtod_l+0x1a6>
 800f5ba:	f04f 0c01 	mov.w	ip, #1
 800f5be:	e7f6      	b.n	800f5ae <_strtod_l+0x28e>
 800f5c0:	080136fc 	.word	0x080136fc
 800f5c4:	08013510 	.word	0x08013510
 800f5c8:	7ff00000 	.word	0x7ff00000
 800f5cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5ce:	1c59      	adds	r1, r3, #1
 800f5d0:	911d      	str	r1, [sp, #116]	; 0x74
 800f5d2:	785b      	ldrb	r3, [r3, #1]
 800f5d4:	2b30      	cmp	r3, #48	; 0x30
 800f5d6:	d0f9      	beq.n	800f5cc <_strtod_l+0x2ac>
 800f5d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f5dc:	2908      	cmp	r1, #8
 800f5de:	f63f af79 	bhi.w	800f4d4 <_strtod_l+0x1b4>
 800f5e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f5e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5e8:	9308      	str	r3, [sp, #32]
 800f5ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5ec:	1c59      	adds	r1, r3, #1
 800f5ee:	911d      	str	r1, [sp, #116]	; 0x74
 800f5f0:	785b      	ldrb	r3, [r3, #1]
 800f5f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f5f6:	2e09      	cmp	r6, #9
 800f5f8:	d937      	bls.n	800f66a <_strtod_l+0x34a>
 800f5fa:	9e08      	ldr	r6, [sp, #32]
 800f5fc:	1b89      	subs	r1, r1, r6
 800f5fe:	2908      	cmp	r1, #8
 800f600:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f604:	dc02      	bgt.n	800f60c <_strtod_l+0x2ec>
 800f606:	4576      	cmp	r6, lr
 800f608:	bfa8      	it	ge
 800f60a:	4676      	movge	r6, lr
 800f60c:	f1bc 0f00 	cmp.w	ip, #0
 800f610:	d000      	beq.n	800f614 <_strtod_l+0x2f4>
 800f612:	4276      	negs	r6, r6
 800f614:	2d00      	cmp	r5, #0
 800f616:	d14f      	bne.n	800f6b8 <_strtod_l+0x398>
 800f618:	9904      	ldr	r1, [sp, #16]
 800f61a:	4301      	orrs	r1, r0
 800f61c:	f47f aec2 	bne.w	800f3a4 <_strtod_l+0x84>
 800f620:	2a00      	cmp	r2, #0
 800f622:	f47f aedb 	bne.w	800f3dc <_strtod_l+0xbc>
 800f626:	2b69      	cmp	r3, #105	; 0x69
 800f628:	d027      	beq.n	800f67a <_strtod_l+0x35a>
 800f62a:	dc24      	bgt.n	800f676 <_strtod_l+0x356>
 800f62c:	2b49      	cmp	r3, #73	; 0x49
 800f62e:	d024      	beq.n	800f67a <_strtod_l+0x35a>
 800f630:	2b4e      	cmp	r3, #78	; 0x4e
 800f632:	f47f aed3 	bne.w	800f3dc <_strtod_l+0xbc>
 800f636:	499e      	ldr	r1, [pc, #632]	; (800f8b0 <_strtod_l+0x590>)
 800f638:	a81d      	add	r0, sp, #116	; 0x74
 800f63a:	f001 fe87 	bl	801134c <__match>
 800f63e:	2800      	cmp	r0, #0
 800f640:	f43f aecc 	beq.w	800f3dc <_strtod_l+0xbc>
 800f644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b28      	cmp	r3, #40	; 0x28
 800f64a:	d12d      	bne.n	800f6a8 <_strtod_l+0x388>
 800f64c:	4999      	ldr	r1, [pc, #612]	; (800f8b4 <_strtod_l+0x594>)
 800f64e:	aa20      	add	r2, sp, #128	; 0x80
 800f650:	a81d      	add	r0, sp, #116	; 0x74
 800f652:	f001 fe8f 	bl	8011374 <__hexnan>
 800f656:	2805      	cmp	r0, #5
 800f658:	d126      	bne.n	800f6a8 <_strtod_l+0x388>
 800f65a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f65c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f660:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f664:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f668:	e69c      	b.n	800f3a4 <_strtod_l+0x84>
 800f66a:	210a      	movs	r1, #10
 800f66c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f670:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f674:	e7b9      	b.n	800f5ea <_strtod_l+0x2ca>
 800f676:	2b6e      	cmp	r3, #110	; 0x6e
 800f678:	e7db      	b.n	800f632 <_strtod_l+0x312>
 800f67a:	498f      	ldr	r1, [pc, #572]	; (800f8b8 <_strtod_l+0x598>)
 800f67c:	a81d      	add	r0, sp, #116	; 0x74
 800f67e:	f001 fe65 	bl	801134c <__match>
 800f682:	2800      	cmp	r0, #0
 800f684:	f43f aeaa 	beq.w	800f3dc <_strtod_l+0xbc>
 800f688:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f68a:	498c      	ldr	r1, [pc, #560]	; (800f8bc <_strtod_l+0x59c>)
 800f68c:	3b01      	subs	r3, #1
 800f68e:	a81d      	add	r0, sp, #116	; 0x74
 800f690:	931d      	str	r3, [sp, #116]	; 0x74
 800f692:	f001 fe5b 	bl	801134c <__match>
 800f696:	b910      	cbnz	r0, 800f69e <_strtod_l+0x37e>
 800f698:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f69a:	3301      	adds	r3, #1
 800f69c:	931d      	str	r3, [sp, #116]	; 0x74
 800f69e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f8cc <_strtod_l+0x5ac>
 800f6a2:	f04f 0a00 	mov.w	sl, #0
 800f6a6:	e67d      	b.n	800f3a4 <_strtod_l+0x84>
 800f6a8:	4885      	ldr	r0, [pc, #532]	; (800f8c0 <_strtod_l+0x5a0>)
 800f6aa:	f002 ff49 	bl	8012540 <nan>
 800f6ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f6b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f6b6:	e675      	b.n	800f3a4 <_strtod_l+0x84>
 800f6b8:	9b07      	ldr	r3, [sp, #28]
 800f6ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6bc:	1af3      	subs	r3, r6, r3
 800f6be:	2f00      	cmp	r7, #0
 800f6c0:	bf08      	it	eq
 800f6c2:	462f      	moveq	r7, r5
 800f6c4:	2d10      	cmp	r5, #16
 800f6c6:	9308      	str	r3, [sp, #32]
 800f6c8:	46a8      	mov	r8, r5
 800f6ca:	bfa8      	it	ge
 800f6cc:	f04f 0810 	movge.w	r8, #16
 800f6d0:	f7f0 ff20 	bl	8000514 <__aeabi_ui2d>
 800f6d4:	2d09      	cmp	r5, #9
 800f6d6:	4682      	mov	sl, r0
 800f6d8:	468b      	mov	fp, r1
 800f6da:	dd13      	ble.n	800f704 <_strtod_l+0x3e4>
 800f6dc:	4b79      	ldr	r3, [pc, #484]	; (800f8c4 <_strtod_l+0x5a4>)
 800f6de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f6e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f6e6:	f7f0 ff8f 	bl	8000608 <__aeabi_dmul>
 800f6ea:	4682      	mov	sl, r0
 800f6ec:	4648      	mov	r0, r9
 800f6ee:	468b      	mov	fp, r1
 800f6f0:	f7f0 ff10 	bl	8000514 <__aeabi_ui2d>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	4650      	mov	r0, sl
 800f6fa:	4659      	mov	r1, fp
 800f6fc:	f7f0 fdce 	bl	800029c <__adddf3>
 800f700:	4682      	mov	sl, r0
 800f702:	468b      	mov	fp, r1
 800f704:	2d0f      	cmp	r5, #15
 800f706:	dc38      	bgt.n	800f77a <_strtod_l+0x45a>
 800f708:	9b08      	ldr	r3, [sp, #32]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f43f ae4a 	beq.w	800f3a4 <_strtod_l+0x84>
 800f710:	dd24      	ble.n	800f75c <_strtod_l+0x43c>
 800f712:	2b16      	cmp	r3, #22
 800f714:	dc0b      	bgt.n	800f72e <_strtod_l+0x40e>
 800f716:	4d6b      	ldr	r5, [pc, #428]	; (800f8c4 <_strtod_l+0x5a4>)
 800f718:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f71c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f720:	4652      	mov	r2, sl
 800f722:	465b      	mov	r3, fp
 800f724:	f7f0 ff70 	bl	8000608 <__aeabi_dmul>
 800f728:	4682      	mov	sl, r0
 800f72a:	468b      	mov	fp, r1
 800f72c:	e63a      	b.n	800f3a4 <_strtod_l+0x84>
 800f72e:	9a08      	ldr	r2, [sp, #32]
 800f730:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f734:	4293      	cmp	r3, r2
 800f736:	db20      	blt.n	800f77a <_strtod_l+0x45a>
 800f738:	4c62      	ldr	r4, [pc, #392]	; (800f8c4 <_strtod_l+0x5a4>)
 800f73a:	f1c5 050f 	rsb	r5, r5, #15
 800f73e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f742:	4652      	mov	r2, sl
 800f744:	465b      	mov	r3, fp
 800f746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f74a:	f7f0 ff5d 	bl	8000608 <__aeabi_dmul>
 800f74e:	9b08      	ldr	r3, [sp, #32]
 800f750:	1b5d      	subs	r5, r3, r5
 800f752:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f756:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f75a:	e7e3      	b.n	800f724 <_strtod_l+0x404>
 800f75c:	9b08      	ldr	r3, [sp, #32]
 800f75e:	3316      	adds	r3, #22
 800f760:	db0b      	blt.n	800f77a <_strtod_l+0x45a>
 800f762:	9b07      	ldr	r3, [sp, #28]
 800f764:	4a57      	ldr	r2, [pc, #348]	; (800f8c4 <_strtod_l+0x5a4>)
 800f766:	1b9e      	subs	r6, r3, r6
 800f768:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f76c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f770:	4650      	mov	r0, sl
 800f772:	4659      	mov	r1, fp
 800f774:	f7f1 f872 	bl	800085c <__aeabi_ddiv>
 800f778:	e7d6      	b.n	800f728 <_strtod_l+0x408>
 800f77a:	9b08      	ldr	r3, [sp, #32]
 800f77c:	eba5 0808 	sub.w	r8, r5, r8
 800f780:	4498      	add	r8, r3
 800f782:	f1b8 0f00 	cmp.w	r8, #0
 800f786:	dd71      	ble.n	800f86c <_strtod_l+0x54c>
 800f788:	f018 030f 	ands.w	r3, r8, #15
 800f78c:	d00a      	beq.n	800f7a4 <_strtod_l+0x484>
 800f78e:	494d      	ldr	r1, [pc, #308]	; (800f8c4 <_strtod_l+0x5a4>)
 800f790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f794:	4652      	mov	r2, sl
 800f796:	465b      	mov	r3, fp
 800f798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f79c:	f7f0 ff34 	bl	8000608 <__aeabi_dmul>
 800f7a0:	4682      	mov	sl, r0
 800f7a2:	468b      	mov	fp, r1
 800f7a4:	f038 080f 	bics.w	r8, r8, #15
 800f7a8:	d04d      	beq.n	800f846 <_strtod_l+0x526>
 800f7aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f7ae:	dd22      	ble.n	800f7f6 <_strtod_l+0x4d6>
 800f7b0:	2500      	movs	r5, #0
 800f7b2:	462e      	mov	r6, r5
 800f7b4:	9509      	str	r5, [sp, #36]	; 0x24
 800f7b6:	9507      	str	r5, [sp, #28]
 800f7b8:	2322      	movs	r3, #34	; 0x22
 800f7ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f8cc <_strtod_l+0x5ac>
 800f7be:	6023      	str	r3, [r4, #0]
 800f7c0:	f04f 0a00 	mov.w	sl, #0
 800f7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f43f adec 	beq.w	800f3a4 <_strtod_l+0x84>
 800f7cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f001 feca 	bl	8011568 <_Bfree>
 800f7d4:	9907      	ldr	r1, [sp, #28]
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f001 fec6 	bl	8011568 <_Bfree>
 800f7dc:	4631      	mov	r1, r6
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f001 fec2 	bl	8011568 <_Bfree>
 800f7e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f001 febe 	bl	8011568 <_Bfree>
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	f001 feba 	bl	8011568 <_Bfree>
 800f7f4:	e5d6      	b.n	800f3a4 <_strtod_l+0x84>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f7fc:	4650      	mov	r0, sl
 800f7fe:	4659      	mov	r1, fp
 800f800:	4699      	mov	r9, r3
 800f802:	f1b8 0f01 	cmp.w	r8, #1
 800f806:	dc21      	bgt.n	800f84c <_strtod_l+0x52c>
 800f808:	b10b      	cbz	r3, 800f80e <_strtod_l+0x4ee>
 800f80a:	4682      	mov	sl, r0
 800f80c:	468b      	mov	fp, r1
 800f80e:	4b2e      	ldr	r3, [pc, #184]	; (800f8c8 <_strtod_l+0x5a8>)
 800f810:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f814:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f818:	4652      	mov	r2, sl
 800f81a:	465b      	mov	r3, fp
 800f81c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f820:	f7f0 fef2 	bl	8000608 <__aeabi_dmul>
 800f824:	4b29      	ldr	r3, [pc, #164]	; (800f8cc <_strtod_l+0x5ac>)
 800f826:	460a      	mov	r2, r1
 800f828:	400b      	ands	r3, r1
 800f82a:	4929      	ldr	r1, [pc, #164]	; (800f8d0 <_strtod_l+0x5b0>)
 800f82c:	428b      	cmp	r3, r1
 800f82e:	4682      	mov	sl, r0
 800f830:	d8be      	bhi.n	800f7b0 <_strtod_l+0x490>
 800f832:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f836:	428b      	cmp	r3, r1
 800f838:	bf86      	itte	hi
 800f83a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f8d4 <_strtod_l+0x5b4>
 800f83e:	f04f 3aff 	movhi.w	sl, #4294967295
 800f842:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f846:	2300      	movs	r3, #0
 800f848:	9304      	str	r3, [sp, #16]
 800f84a:	e081      	b.n	800f950 <_strtod_l+0x630>
 800f84c:	f018 0f01 	tst.w	r8, #1
 800f850:	d007      	beq.n	800f862 <_strtod_l+0x542>
 800f852:	4b1d      	ldr	r3, [pc, #116]	; (800f8c8 <_strtod_l+0x5a8>)
 800f854:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85c:	f7f0 fed4 	bl	8000608 <__aeabi_dmul>
 800f860:	2301      	movs	r3, #1
 800f862:	f109 0901 	add.w	r9, r9, #1
 800f866:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f86a:	e7ca      	b.n	800f802 <_strtod_l+0x4e2>
 800f86c:	d0eb      	beq.n	800f846 <_strtod_l+0x526>
 800f86e:	f1c8 0800 	rsb	r8, r8, #0
 800f872:	f018 020f 	ands.w	r2, r8, #15
 800f876:	d00a      	beq.n	800f88e <_strtod_l+0x56e>
 800f878:	4b12      	ldr	r3, [pc, #72]	; (800f8c4 <_strtod_l+0x5a4>)
 800f87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f87e:	4650      	mov	r0, sl
 800f880:	4659      	mov	r1, fp
 800f882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f886:	f7f0 ffe9 	bl	800085c <__aeabi_ddiv>
 800f88a:	4682      	mov	sl, r0
 800f88c:	468b      	mov	fp, r1
 800f88e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f892:	d0d8      	beq.n	800f846 <_strtod_l+0x526>
 800f894:	f1b8 0f1f 	cmp.w	r8, #31
 800f898:	dd1e      	ble.n	800f8d8 <_strtod_l+0x5b8>
 800f89a:	2500      	movs	r5, #0
 800f89c:	462e      	mov	r6, r5
 800f89e:	9509      	str	r5, [sp, #36]	; 0x24
 800f8a0:	9507      	str	r5, [sp, #28]
 800f8a2:	2322      	movs	r3, #34	; 0x22
 800f8a4:	f04f 0a00 	mov.w	sl, #0
 800f8a8:	f04f 0b00 	mov.w	fp, #0
 800f8ac:	6023      	str	r3, [r4, #0]
 800f8ae:	e789      	b.n	800f7c4 <_strtod_l+0x4a4>
 800f8b0:	080134e9 	.word	0x080134e9
 800f8b4:	08013524 	.word	0x08013524
 800f8b8:	080134e1 	.word	0x080134e1
 800f8bc:	08013617 	.word	0x08013617
 800f8c0:	08013613 	.word	0x08013613
 800f8c4:	08013798 	.word	0x08013798
 800f8c8:	08013770 	.word	0x08013770
 800f8cc:	7ff00000 	.word	0x7ff00000
 800f8d0:	7ca00000 	.word	0x7ca00000
 800f8d4:	7fefffff 	.word	0x7fefffff
 800f8d8:	f018 0310 	ands.w	r3, r8, #16
 800f8dc:	bf18      	it	ne
 800f8de:	236a      	movne	r3, #106	; 0x6a
 800f8e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800fc98 <_strtod_l+0x978>
 800f8e4:	9304      	str	r3, [sp, #16]
 800f8e6:	4650      	mov	r0, sl
 800f8e8:	4659      	mov	r1, fp
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	f018 0f01 	tst.w	r8, #1
 800f8f0:	d004      	beq.n	800f8fc <_strtod_l+0x5dc>
 800f8f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f8f6:	f7f0 fe87 	bl	8000608 <__aeabi_dmul>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f900:	f109 0908 	add.w	r9, r9, #8
 800f904:	d1f2      	bne.n	800f8ec <_strtod_l+0x5cc>
 800f906:	b10b      	cbz	r3, 800f90c <_strtod_l+0x5ec>
 800f908:	4682      	mov	sl, r0
 800f90a:	468b      	mov	fp, r1
 800f90c:	9b04      	ldr	r3, [sp, #16]
 800f90e:	b1bb      	cbz	r3, 800f940 <_strtod_l+0x620>
 800f910:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f914:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f918:	2b00      	cmp	r3, #0
 800f91a:	4659      	mov	r1, fp
 800f91c:	dd10      	ble.n	800f940 <_strtod_l+0x620>
 800f91e:	2b1f      	cmp	r3, #31
 800f920:	f340 8128 	ble.w	800fb74 <_strtod_l+0x854>
 800f924:	2b34      	cmp	r3, #52	; 0x34
 800f926:	bfde      	ittt	le
 800f928:	3b20      	suble	r3, #32
 800f92a:	f04f 32ff 	movle.w	r2, #4294967295
 800f92e:	fa02 f303 	lslle.w	r3, r2, r3
 800f932:	f04f 0a00 	mov.w	sl, #0
 800f936:	bfcc      	ite	gt
 800f938:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f93c:	ea03 0b01 	andle.w	fp, r3, r1
 800f940:	2200      	movs	r2, #0
 800f942:	2300      	movs	r3, #0
 800f944:	4650      	mov	r0, sl
 800f946:	4659      	mov	r1, fp
 800f948:	f7f1 f8c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d1a4      	bne.n	800f89a <_strtod_l+0x57a>
 800f950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f956:	462b      	mov	r3, r5
 800f958:	463a      	mov	r2, r7
 800f95a:	4620      	mov	r0, r4
 800f95c:	f001 fe70 	bl	8011640 <__s2b>
 800f960:	9009      	str	r0, [sp, #36]	; 0x24
 800f962:	2800      	cmp	r0, #0
 800f964:	f43f af24 	beq.w	800f7b0 <_strtod_l+0x490>
 800f968:	9b07      	ldr	r3, [sp, #28]
 800f96a:	1b9e      	subs	r6, r3, r6
 800f96c:	9b08      	ldr	r3, [sp, #32]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	bfb4      	ite	lt
 800f972:	4633      	movlt	r3, r6
 800f974:	2300      	movge	r3, #0
 800f976:	9310      	str	r3, [sp, #64]	; 0x40
 800f978:	9b08      	ldr	r3, [sp, #32]
 800f97a:	2500      	movs	r5, #0
 800f97c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f980:	9318      	str	r3, [sp, #96]	; 0x60
 800f982:	462e      	mov	r6, r5
 800f984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f986:	4620      	mov	r0, r4
 800f988:	6859      	ldr	r1, [r3, #4]
 800f98a:	f001 fdad 	bl	80114e8 <_Balloc>
 800f98e:	9007      	str	r0, [sp, #28]
 800f990:	2800      	cmp	r0, #0
 800f992:	f43f af11 	beq.w	800f7b8 <_strtod_l+0x498>
 800f996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f998:	691a      	ldr	r2, [r3, #16]
 800f99a:	3202      	adds	r2, #2
 800f99c:	f103 010c 	add.w	r1, r3, #12
 800f9a0:	0092      	lsls	r2, r2, #2
 800f9a2:	300c      	adds	r0, #12
 800f9a4:	f7fe ff90 	bl	800e8c8 <memcpy>
 800f9a8:	ec4b ab10 	vmov	d0, sl, fp
 800f9ac:	aa20      	add	r2, sp, #128	; 0x80
 800f9ae:	a91f      	add	r1, sp, #124	; 0x7c
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f9b6:	f002 f97f 	bl	8011cb8 <__d2b>
 800f9ba:	901e      	str	r0, [sp, #120]	; 0x78
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	f43f aefb 	beq.w	800f7b8 <_strtod_l+0x498>
 800f9c2:	2101      	movs	r1, #1
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f001 fed5 	bl	8011774 <__i2b>
 800f9ca:	4606      	mov	r6, r0
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	f43f aef3 	beq.w	800f7b8 <_strtod_l+0x498>
 800f9d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f9d4:	9904      	ldr	r1, [sp, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	bfab      	itete	ge
 800f9da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f9dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f9de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f9e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f9e4:	bfac      	ite	ge
 800f9e6:	eb03 0902 	addge.w	r9, r3, r2
 800f9ea:	1ad7      	sublt	r7, r2, r3
 800f9ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f9ee:	eba3 0801 	sub.w	r8, r3, r1
 800f9f2:	4490      	add	r8, r2
 800f9f4:	4ba3      	ldr	r3, [pc, #652]	; (800fc84 <_strtod_l+0x964>)
 800f9f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800f9fa:	4598      	cmp	r8, r3
 800f9fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fa00:	f280 80cc 	bge.w	800fb9c <_strtod_l+0x87c>
 800fa04:	eba3 0308 	sub.w	r3, r3, r8
 800fa08:	2b1f      	cmp	r3, #31
 800fa0a:	eba2 0203 	sub.w	r2, r2, r3
 800fa0e:	f04f 0101 	mov.w	r1, #1
 800fa12:	f300 80b6 	bgt.w	800fb82 <_strtod_l+0x862>
 800fa16:	fa01 f303 	lsl.w	r3, r1, r3
 800fa1a:	9311      	str	r3, [sp, #68]	; 0x44
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	930c      	str	r3, [sp, #48]	; 0x30
 800fa20:	eb09 0802 	add.w	r8, r9, r2
 800fa24:	9b04      	ldr	r3, [sp, #16]
 800fa26:	45c1      	cmp	r9, r8
 800fa28:	4417      	add	r7, r2
 800fa2a:	441f      	add	r7, r3
 800fa2c:	464b      	mov	r3, r9
 800fa2e:	bfa8      	it	ge
 800fa30:	4643      	movge	r3, r8
 800fa32:	42bb      	cmp	r3, r7
 800fa34:	bfa8      	it	ge
 800fa36:	463b      	movge	r3, r7
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	bfc2      	ittt	gt
 800fa3c:	eba8 0803 	subgt.w	r8, r8, r3
 800fa40:	1aff      	subgt	r7, r7, r3
 800fa42:	eba9 0903 	subgt.w	r9, r9, r3
 800fa46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	dd17      	ble.n	800fa7c <_strtod_l+0x75c>
 800fa4c:	4631      	mov	r1, r6
 800fa4e:	461a      	mov	r2, r3
 800fa50:	4620      	mov	r0, r4
 800fa52:	f001 ff4b 	bl	80118ec <__pow5mult>
 800fa56:	4606      	mov	r6, r0
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	f43f aead 	beq.w	800f7b8 <_strtod_l+0x498>
 800fa5e:	4601      	mov	r1, r0
 800fa60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fa62:	4620      	mov	r0, r4
 800fa64:	f001 fe9c 	bl	80117a0 <__multiply>
 800fa68:	900f      	str	r0, [sp, #60]	; 0x3c
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	f43f aea4 	beq.w	800f7b8 <_strtod_l+0x498>
 800fa70:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fa72:	4620      	mov	r0, r4
 800fa74:	f001 fd78 	bl	8011568 <_Bfree>
 800fa78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa7a:	931e      	str	r3, [sp, #120]	; 0x78
 800fa7c:	f1b8 0f00 	cmp.w	r8, #0
 800fa80:	f300 8091 	bgt.w	800fba6 <_strtod_l+0x886>
 800fa84:	9b08      	ldr	r3, [sp, #32]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	dd08      	ble.n	800fa9c <_strtod_l+0x77c>
 800fa8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fa8c:	9907      	ldr	r1, [sp, #28]
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f001 ff2c 	bl	80118ec <__pow5mult>
 800fa94:	9007      	str	r0, [sp, #28]
 800fa96:	2800      	cmp	r0, #0
 800fa98:	f43f ae8e 	beq.w	800f7b8 <_strtod_l+0x498>
 800fa9c:	2f00      	cmp	r7, #0
 800fa9e:	dd08      	ble.n	800fab2 <_strtod_l+0x792>
 800faa0:	9907      	ldr	r1, [sp, #28]
 800faa2:	463a      	mov	r2, r7
 800faa4:	4620      	mov	r0, r4
 800faa6:	f001 ff7b 	bl	80119a0 <__lshift>
 800faaa:	9007      	str	r0, [sp, #28]
 800faac:	2800      	cmp	r0, #0
 800faae:	f43f ae83 	beq.w	800f7b8 <_strtod_l+0x498>
 800fab2:	f1b9 0f00 	cmp.w	r9, #0
 800fab6:	dd08      	ble.n	800faca <_strtod_l+0x7aa>
 800fab8:	4631      	mov	r1, r6
 800faba:	464a      	mov	r2, r9
 800fabc:	4620      	mov	r0, r4
 800fabe:	f001 ff6f 	bl	80119a0 <__lshift>
 800fac2:	4606      	mov	r6, r0
 800fac4:	2800      	cmp	r0, #0
 800fac6:	f43f ae77 	beq.w	800f7b8 <_strtod_l+0x498>
 800faca:	9a07      	ldr	r2, [sp, #28]
 800facc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800face:	4620      	mov	r0, r4
 800fad0:	f001 ffee 	bl	8011ab0 <__mdiff>
 800fad4:	4605      	mov	r5, r0
 800fad6:	2800      	cmp	r0, #0
 800fad8:	f43f ae6e 	beq.w	800f7b8 <_strtod_l+0x498>
 800fadc:	68c3      	ldr	r3, [r0, #12]
 800fade:	930f      	str	r3, [sp, #60]	; 0x3c
 800fae0:	2300      	movs	r3, #0
 800fae2:	60c3      	str	r3, [r0, #12]
 800fae4:	4631      	mov	r1, r6
 800fae6:	f001 ffc7 	bl	8011a78 <__mcmp>
 800faea:	2800      	cmp	r0, #0
 800faec:	da65      	bge.n	800fbba <_strtod_l+0x89a>
 800faee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800faf0:	ea53 030a 	orrs.w	r3, r3, sl
 800faf4:	f040 8087 	bne.w	800fc06 <_strtod_l+0x8e6>
 800faf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f040 8082 	bne.w	800fc06 <_strtod_l+0x8e6>
 800fb02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fb06:	0d1b      	lsrs	r3, r3, #20
 800fb08:	051b      	lsls	r3, r3, #20
 800fb0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fb0e:	d97a      	bls.n	800fc06 <_strtod_l+0x8e6>
 800fb10:	696b      	ldr	r3, [r5, #20]
 800fb12:	b913      	cbnz	r3, 800fb1a <_strtod_l+0x7fa>
 800fb14:	692b      	ldr	r3, [r5, #16]
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	dd75      	ble.n	800fc06 <_strtod_l+0x8e6>
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f001 ff3e 	bl	80119a0 <__lshift>
 800fb24:	4631      	mov	r1, r6
 800fb26:	4605      	mov	r5, r0
 800fb28:	f001 ffa6 	bl	8011a78 <__mcmp>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	dd6a      	ble.n	800fc06 <_strtod_l+0x8e6>
 800fb30:	9904      	ldr	r1, [sp, #16]
 800fb32:	4a55      	ldr	r2, [pc, #340]	; (800fc88 <_strtod_l+0x968>)
 800fb34:	465b      	mov	r3, fp
 800fb36:	2900      	cmp	r1, #0
 800fb38:	f000 8085 	beq.w	800fc46 <_strtod_l+0x926>
 800fb3c:	ea02 010b 	and.w	r1, r2, fp
 800fb40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fb44:	dc7f      	bgt.n	800fc46 <_strtod_l+0x926>
 800fb46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fb4a:	f77f aeaa 	ble.w	800f8a2 <_strtod_l+0x582>
 800fb4e:	4a4f      	ldr	r2, [pc, #316]	; (800fc8c <_strtod_l+0x96c>)
 800fb50:	2300      	movs	r3, #0
 800fb52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800fb56:	4650      	mov	r0, sl
 800fb58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800fb5c:	4659      	mov	r1, fp
 800fb5e:	f7f0 fd53 	bl	8000608 <__aeabi_dmul>
 800fb62:	460b      	mov	r3, r1
 800fb64:	4303      	orrs	r3, r0
 800fb66:	bf08      	it	eq
 800fb68:	2322      	moveq	r3, #34	; 0x22
 800fb6a:	4682      	mov	sl, r0
 800fb6c:	468b      	mov	fp, r1
 800fb6e:	bf08      	it	eq
 800fb70:	6023      	streq	r3, [r4, #0]
 800fb72:	e62b      	b.n	800f7cc <_strtod_l+0x4ac>
 800fb74:	f04f 32ff 	mov.w	r2, #4294967295
 800fb78:	fa02 f303 	lsl.w	r3, r2, r3
 800fb7c:	ea03 0a0a 	and.w	sl, r3, sl
 800fb80:	e6de      	b.n	800f940 <_strtod_l+0x620>
 800fb82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fb86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fb8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fb8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fb92:	fa01 f308 	lsl.w	r3, r1, r8
 800fb96:	930c      	str	r3, [sp, #48]	; 0x30
 800fb98:	9111      	str	r1, [sp, #68]	; 0x44
 800fb9a:	e741      	b.n	800fa20 <_strtod_l+0x700>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	930c      	str	r3, [sp, #48]	; 0x30
 800fba0:	2301      	movs	r3, #1
 800fba2:	9311      	str	r3, [sp, #68]	; 0x44
 800fba4:	e73c      	b.n	800fa20 <_strtod_l+0x700>
 800fba6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fba8:	4642      	mov	r2, r8
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f001 fef8 	bl	80119a0 <__lshift>
 800fbb0:	901e      	str	r0, [sp, #120]	; 0x78
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	f47f af66 	bne.w	800fa84 <_strtod_l+0x764>
 800fbb8:	e5fe      	b.n	800f7b8 <_strtod_l+0x498>
 800fbba:	465f      	mov	r7, fp
 800fbbc:	d16e      	bne.n	800fc9c <_strtod_l+0x97c>
 800fbbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fbc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbc4:	b342      	cbz	r2, 800fc18 <_strtod_l+0x8f8>
 800fbc6:	4a32      	ldr	r2, [pc, #200]	; (800fc90 <_strtod_l+0x970>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d128      	bne.n	800fc1e <_strtod_l+0x8fe>
 800fbcc:	9b04      	ldr	r3, [sp, #16]
 800fbce:	4650      	mov	r0, sl
 800fbd0:	b1eb      	cbz	r3, 800fc0e <_strtod_l+0x8ee>
 800fbd2:	4a2d      	ldr	r2, [pc, #180]	; (800fc88 <_strtod_l+0x968>)
 800fbd4:	403a      	ands	r2, r7
 800fbd6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fbda:	f04f 31ff 	mov.w	r1, #4294967295
 800fbde:	d819      	bhi.n	800fc14 <_strtod_l+0x8f4>
 800fbe0:	0d12      	lsrs	r2, r2, #20
 800fbe2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fbe6:	fa01 f303 	lsl.w	r3, r1, r3
 800fbea:	4298      	cmp	r0, r3
 800fbec:	d117      	bne.n	800fc1e <_strtod_l+0x8fe>
 800fbee:	4b29      	ldr	r3, [pc, #164]	; (800fc94 <_strtod_l+0x974>)
 800fbf0:	429f      	cmp	r7, r3
 800fbf2:	d102      	bne.n	800fbfa <_strtod_l+0x8da>
 800fbf4:	3001      	adds	r0, #1
 800fbf6:	f43f addf 	beq.w	800f7b8 <_strtod_l+0x498>
 800fbfa:	4b23      	ldr	r3, [pc, #140]	; (800fc88 <_strtod_l+0x968>)
 800fbfc:	403b      	ands	r3, r7
 800fbfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fc02:	f04f 0a00 	mov.w	sl, #0
 800fc06:	9b04      	ldr	r3, [sp, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1a0      	bne.n	800fb4e <_strtod_l+0x82e>
 800fc0c:	e5de      	b.n	800f7cc <_strtod_l+0x4ac>
 800fc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc12:	e7ea      	b.n	800fbea <_strtod_l+0x8ca>
 800fc14:	460b      	mov	r3, r1
 800fc16:	e7e8      	b.n	800fbea <_strtod_l+0x8ca>
 800fc18:	ea53 030a 	orrs.w	r3, r3, sl
 800fc1c:	d088      	beq.n	800fb30 <_strtod_l+0x810>
 800fc1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc20:	b1db      	cbz	r3, 800fc5a <_strtod_l+0x93a>
 800fc22:	423b      	tst	r3, r7
 800fc24:	d0ef      	beq.n	800fc06 <_strtod_l+0x8e6>
 800fc26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc28:	9a04      	ldr	r2, [sp, #16]
 800fc2a:	4650      	mov	r0, sl
 800fc2c:	4659      	mov	r1, fp
 800fc2e:	b1c3      	cbz	r3, 800fc62 <_strtod_l+0x942>
 800fc30:	f7ff fb5a 	bl	800f2e8 <sulp>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fc3c:	f7f0 fb2e 	bl	800029c <__adddf3>
 800fc40:	4682      	mov	sl, r0
 800fc42:	468b      	mov	fp, r1
 800fc44:	e7df      	b.n	800fc06 <_strtod_l+0x8e6>
 800fc46:	4013      	ands	r3, r2
 800fc48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fc4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fc50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fc54:	f04f 3aff 	mov.w	sl, #4294967295
 800fc58:	e7d5      	b.n	800fc06 <_strtod_l+0x8e6>
 800fc5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc5c:	ea13 0f0a 	tst.w	r3, sl
 800fc60:	e7e0      	b.n	800fc24 <_strtod_l+0x904>
 800fc62:	f7ff fb41 	bl	800f2e8 <sulp>
 800fc66:	4602      	mov	r2, r0
 800fc68:	460b      	mov	r3, r1
 800fc6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fc6e:	f7f0 fb13 	bl	8000298 <__aeabi_dsub>
 800fc72:	2200      	movs	r2, #0
 800fc74:	2300      	movs	r3, #0
 800fc76:	4682      	mov	sl, r0
 800fc78:	468b      	mov	fp, r1
 800fc7a:	f7f0 ff2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	d0c1      	beq.n	800fc06 <_strtod_l+0x8e6>
 800fc82:	e60e      	b.n	800f8a2 <_strtod_l+0x582>
 800fc84:	fffffc02 	.word	0xfffffc02
 800fc88:	7ff00000 	.word	0x7ff00000
 800fc8c:	39500000 	.word	0x39500000
 800fc90:	000fffff 	.word	0x000fffff
 800fc94:	7fefffff 	.word	0x7fefffff
 800fc98:	08013538 	.word	0x08013538
 800fc9c:	4631      	mov	r1, r6
 800fc9e:	4628      	mov	r0, r5
 800fca0:	f002 f866 	bl	8011d70 <__ratio>
 800fca4:	ec59 8b10 	vmov	r8, r9, d0
 800fca8:	ee10 0a10 	vmov	r0, s0
 800fcac:	2200      	movs	r2, #0
 800fcae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fcb2:	4649      	mov	r1, r9
 800fcb4:	f7f0 ff24 	bl	8000b00 <__aeabi_dcmple>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	d07c      	beq.n	800fdb6 <_strtod_l+0xa96>
 800fcbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d04c      	beq.n	800fd5c <_strtod_l+0xa3c>
 800fcc2:	4b95      	ldr	r3, [pc, #596]	; (800ff18 <_strtod_l+0xbf8>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fcca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ff18 <_strtod_l+0xbf8>
 800fcce:	f04f 0800 	mov.w	r8, #0
 800fcd2:	4b92      	ldr	r3, [pc, #584]	; (800ff1c <_strtod_l+0xbfc>)
 800fcd4:	403b      	ands	r3, r7
 800fcd6:	9311      	str	r3, [sp, #68]	; 0x44
 800fcd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fcda:	4b91      	ldr	r3, [pc, #580]	; (800ff20 <_strtod_l+0xc00>)
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	f040 80b2 	bne.w	800fe46 <_strtod_l+0xb26>
 800fce2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fcea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fcee:	ec4b ab10 	vmov	d0, sl, fp
 800fcf2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800fcf6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fcfa:	f001 ff61 	bl	8011bc0 <__ulp>
 800fcfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fd02:	ec53 2b10 	vmov	r2, r3, d0
 800fd06:	f7f0 fc7f 	bl	8000608 <__aeabi_dmul>
 800fd0a:	4652      	mov	r2, sl
 800fd0c:	465b      	mov	r3, fp
 800fd0e:	f7f0 fac5 	bl	800029c <__adddf3>
 800fd12:	460b      	mov	r3, r1
 800fd14:	4981      	ldr	r1, [pc, #516]	; (800ff1c <_strtod_l+0xbfc>)
 800fd16:	4a83      	ldr	r2, [pc, #524]	; (800ff24 <_strtod_l+0xc04>)
 800fd18:	4019      	ands	r1, r3
 800fd1a:	4291      	cmp	r1, r2
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	d95e      	bls.n	800fdde <_strtod_l+0xabe>
 800fd20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d103      	bne.n	800fd32 <_strtod_l+0xa12>
 800fd2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	f43f ad43 	beq.w	800f7b8 <_strtod_l+0x498>
 800fd32:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ff30 <_strtod_l+0xc10>
 800fd36:	f04f 3aff 	mov.w	sl, #4294967295
 800fd3a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f001 fc13 	bl	8011568 <_Bfree>
 800fd42:	9907      	ldr	r1, [sp, #28]
 800fd44:	4620      	mov	r0, r4
 800fd46:	f001 fc0f 	bl	8011568 <_Bfree>
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f001 fc0b 	bl	8011568 <_Bfree>
 800fd52:	4629      	mov	r1, r5
 800fd54:	4620      	mov	r0, r4
 800fd56:	f001 fc07 	bl	8011568 <_Bfree>
 800fd5a:	e613      	b.n	800f984 <_strtod_l+0x664>
 800fd5c:	f1ba 0f00 	cmp.w	sl, #0
 800fd60:	d11b      	bne.n	800fd9a <_strtod_l+0xa7a>
 800fd62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd66:	b9f3      	cbnz	r3, 800fda6 <_strtod_l+0xa86>
 800fd68:	4b6b      	ldr	r3, [pc, #428]	; (800ff18 <_strtod_l+0xbf8>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	4640      	mov	r0, r8
 800fd6e:	4649      	mov	r1, r9
 800fd70:	f7f0 febc 	bl	8000aec <__aeabi_dcmplt>
 800fd74:	b9d0      	cbnz	r0, 800fdac <_strtod_l+0xa8c>
 800fd76:	4640      	mov	r0, r8
 800fd78:	4649      	mov	r1, r9
 800fd7a:	4b6b      	ldr	r3, [pc, #428]	; (800ff28 <_strtod_l+0xc08>)
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f7f0 fc43 	bl	8000608 <__aeabi_dmul>
 800fd82:	4680      	mov	r8, r0
 800fd84:	4689      	mov	r9, r1
 800fd86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fd8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800fd8e:	931b      	str	r3, [sp, #108]	; 0x6c
 800fd90:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800fd94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fd98:	e79b      	b.n	800fcd2 <_strtod_l+0x9b2>
 800fd9a:	f1ba 0f01 	cmp.w	sl, #1
 800fd9e:	d102      	bne.n	800fda6 <_strtod_l+0xa86>
 800fda0:	2f00      	cmp	r7, #0
 800fda2:	f43f ad7e 	beq.w	800f8a2 <_strtod_l+0x582>
 800fda6:	4b61      	ldr	r3, [pc, #388]	; (800ff2c <_strtod_l+0xc0c>)
 800fda8:	2200      	movs	r2, #0
 800fdaa:	e78c      	b.n	800fcc6 <_strtod_l+0x9a6>
 800fdac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ff28 <_strtod_l+0xc08>
 800fdb0:	f04f 0800 	mov.w	r8, #0
 800fdb4:	e7e7      	b.n	800fd86 <_strtod_l+0xa66>
 800fdb6:	4b5c      	ldr	r3, [pc, #368]	; (800ff28 <_strtod_l+0xc08>)
 800fdb8:	4640      	mov	r0, r8
 800fdba:	4649      	mov	r1, r9
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f7f0 fc23 	bl	8000608 <__aeabi_dmul>
 800fdc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdc4:	4680      	mov	r8, r0
 800fdc6:	4689      	mov	r9, r1
 800fdc8:	b933      	cbnz	r3, 800fdd8 <_strtod_l+0xab8>
 800fdca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdce:	9012      	str	r0, [sp, #72]	; 0x48
 800fdd0:	9313      	str	r3, [sp, #76]	; 0x4c
 800fdd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fdd6:	e7dd      	b.n	800fd94 <_strtod_l+0xa74>
 800fdd8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800fddc:	e7f9      	b.n	800fdd2 <_strtod_l+0xab2>
 800fdde:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fde2:	9b04      	ldr	r3, [sp, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1a8      	bne.n	800fd3a <_strtod_l+0xa1a>
 800fde8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fdec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fdee:	0d1b      	lsrs	r3, r3, #20
 800fdf0:	051b      	lsls	r3, r3, #20
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d1a1      	bne.n	800fd3a <_strtod_l+0xa1a>
 800fdf6:	4640      	mov	r0, r8
 800fdf8:	4649      	mov	r1, r9
 800fdfa:	f7f0 ff65 	bl	8000cc8 <__aeabi_d2lz>
 800fdfe:	f7f0 fbd5 	bl	80005ac <__aeabi_l2d>
 800fe02:	4602      	mov	r2, r0
 800fe04:	460b      	mov	r3, r1
 800fe06:	4640      	mov	r0, r8
 800fe08:	4649      	mov	r1, r9
 800fe0a:	f7f0 fa45 	bl	8000298 <__aeabi_dsub>
 800fe0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe14:	ea43 030a 	orr.w	r3, r3, sl
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	4680      	mov	r8, r0
 800fe1c:	4689      	mov	r9, r1
 800fe1e:	d053      	beq.n	800fec8 <_strtod_l+0xba8>
 800fe20:	a335      	add	r3, pc, #212	; (adr r3, 800fef8 <_strtod_l+0xbd8>)
 800fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe26:	f7f0 fe61 	bl	8000aec <__aeabi_dcmplt>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	f47f acce 	bne.w	800f7cc <_strtod_l+0x4ac>
 800fe30:	a333      	add	r3, pc, #204	; (adr r3, 800ff00 <_strtod_l+0xbe0>)
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	4640      	mov	r0, r8
 800fe38:	4649      	mov	r1, r9
 800fe3a:	f7f0 fe75 	bl	8000b28 <__aeabi_dcmpgt>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	f43f af7b 	beq.w	800fd3a <_strtod_l+0xa1a>
 800fe44:	e4c2      	b.n	800f7cc <_strtod_l+0x4ac>
 800fe46:	9b04      	ldr	r3, [sp, #16]
 800fe48:	b333      	cbz	r3, 800fe98 <_strtod_l+0xb78>
 800fe4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fe50:	d822      	bhi.n	800fe98 <_strtod_l+0xb78>
 800fe52:	a32d      	add	r3, pc, #180	; (adr r3, 800ff08 <_strtod_l+0xbe8>)
 800fe54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe58:	4640      	mov	r0, r8
 800fe5a:	4649      	mov	r1, r9
 800fe5c:	f7f0 fe50 	bl	8000b00 <__aeabi_dcmple>
 800fe60:	b1a0      	cbz	r0, 800fe8c <_strtod_l+0xb6c>
 800fe62:	4649      	mov	r1, r9
 800fe64:	4640      	mov	r0, r8
 800fe66:	f7f0 fea7 	bl	8000bb8 <__aeabi_d2uiz>
 800fe6a:	2801      	cmp	r0, #1
 800fe6c:	bf38      	it	cc
 800fe6e:	2001      	movcc	r0, #1
 800fe70:	f7f0 fb50 	bl	8000514 <__aeabi_ui2d>
 800fe74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe76:	4680      	mov	r8, r0
 800fe78:	4689      	mov	r9, r1
 800fe7a:	bb13      	cbnz	r3, 800fec2 <_strtod_l+0xba2>
 800fe7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe80:	9014      	str	r0, [sp, #80]	; 0x50
 800fe82:	9315      	str	r3, [sp, #84]	; 0x54
 800fe84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fe88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fe8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fe90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fe94:	1a9b      	subs	r3, r3, r2
 800fe96:	930d      	str	r3, [sp, #52]	; 0x34
 800fe98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fe9c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fea0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fea4:	f001 fe8c 	bl	8011bc0 <__ulp>
 800fea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800feac:	ec53 2b10 	vmov	r2, r3, d0
 800feb0:	f7f0 fbaa 	bl	8000608 <__aeabi_dmul>
 800feb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800feb8:	f7f0 f9f0 	bl	800029c <__adddf3>
 800febc:	4682      	mov	sl, r0
 800febe:	468b      	mov	fp, r1
 800fec0:	e78f      	b.n	800fde2 <_strtod_l+0xac2>
 800fec2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800fec6:	e7dd      	b.n	800fe84 <_strtod_l+0xb64>
 800fec8:	a311      	add	r3, pc, #68	; (adr r3, 800ff10 <_strtod_l+0xbf0>)
 800feca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fece:	f7f0 fe0d 	bl	8000aec <__aeabi_dcmplt>
 800fed2:	e7b4      	b.n	800fe3e <_strtod_l+0xb1e>
 800fed4:	2300      	movs	r3, #0
 800fed6:	930e      	str	r3, [sp, #56]	; 0x38
 800fed8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800feda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fedc:	6013      	str	r3, [r2, #0]
 800fede:	f7ff ba65 	b.w	800f3ac <_strtod_l+0x8c>
 800fee2:	2b65      	cmp	r3, #101	; 0x65
 800fee4:	f43f ab5d 	beq.w	800f5a2 <_strtod_l+0x282>
 800fee8:	2b45      	cmp	r3, #69	; 0x45
 800feea:	f43f ab5a 	beq.w	800f5a2 <_strtod_l+0x282>
 800feee:	2201      	movs	r2, #1
 800fef0:	f7ff bb92 	b.w	800f618 <_strtod_l+0x2f8>
 800fef4:	f3af 8000 	nop.w
 800fef8:	94a03595 	.word	0x94a03595
 800fefc:	3fdfffff 	.word	0x3fdfffff
 800ff00:	35afe535 	.word	0x35afe535
 800ff04:	3fe00000 	.word	0x3fe00000
 800ff08:	ffc00000 	.word	0xffc00000
 800ff0c:	41dfffff 	.word	0x41dfffff
 800ff10:	94a03595 	.word	0x94a03595
 800ff14:	3fcfffff 	.word	0x3fcfffff
 800ff18:	3ff00000 	.word	0x3ff00000
 800ff1c:	7ff00000 	.word	0x7ff00000
 800ff20:	7fe00000 	.word	0x7fe00000
 800ff24:	7c9fffff 	.word	0x7c9fffff
 800ff28:	3fe00000 	.word	0x3fe00000
 800ff2c:	bff00000 	.word	0xbff00000
 800ff30:	7fefffff 	.word	0x7fefffff

0800ff34 <strtod>:
 800ff34:	460a      	mov	r2, r1
 800ff36:	4601      	mov	r1, r0
 800ff38:	4802      	ldr	r0, [pc, #8]	; (800ff44 <strtod+0x10>)
 800ff3a:	4b03      	ldr	r3, [pc, #12]	; (800ff48 <strtod+0x14>)
 800ff3c:	6800      	ldr	r0, [r0, #0]
 800ff3e:	f7ff b9ef 	b.w	800f320 <_strtod_l>
 800ff42:	bf00      	nop
 800ff44:	20000028 	.word	0x20000028
 800ff48:	20000090 	.word	0x20000090

0800ff4c <strtok>:
 800ff4c:	4b16      	ldr	r3, [pc, #88]	; (800ffa8 <strtok+0x5c>)
 800ff4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff50:	681e      	ldr	r6, [r3, #0]
 800ff52:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ff54:	4605      	mov	r5, r0
 800ff56:	b9fc      	cbnz	r4, 800ff98 <strtok+0x4c>
 800ff58:	2050      	movs	r0, #80	; 0x50
 800ff5a:	9101      	str	r1, [sp, #4]
 800ff5c:	f001 faaa 	bl	80114b4 <malloc>
 800ff60:	9901      	ldr	r1, [sp, #4]
 800ff62:	65b0      	str	r0, [r6, #88]	; 0x58
 800ff64:	4602      	mov	r2, r0
 800ff66:	b920      	cbnz	r0, 800ff72 <strtok+0x26>
 800ff68:	4b10      	ldr	r3, [pc, #64]	; (800ffac <strtok+0x60>)
 800ff6a:	4811      	ldr	r0, [pc, #68]	; (800ffb0 <strtok+0x64>)
 800ff6c:	2157      	movs	r1, #87	; 0x57
 800ff6e:	f000 f883 	bl	8010078 <__assert_func>
 800ff72:	e9c0 4400 	strd	r4, r4, [r0]
 800ff76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ff7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ff7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ff82:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ff86:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ff8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ff8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ff92:	6184      	str	r4, [r0, #24]
 800ff94:	7704      	strb	r4, [r0, #28]
 800ff96:	6244      	str	r4, [r0, #36]	; 0x24
 800ff98:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	4628      	mov	r0, r5
 800ff9e:	b002      	add	sp, #8
 800ffa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffa4:	f000 b806 	b.w	800ffb4 <__strtok_r>
 800ffa8:	20000028 	.word	0x20000028
 800ffac:	08013560 	.word	0x08013560
 800ffb0:	08013577 	.word	0x08013577

0800ffb4 <__strtok_r>:
 800ffb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffb6:	b908      	cbnz	r0, 800ffbc <__strtok_r+0x8>
 800ffb8:	6810      	ldr	r0, [r2, #0]
 800ffba:	b188      	cbz	r0, 800ffe0 <__strtok_r+0x2c>
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ffc4:	460f      	mov	r7, r1
 800ffc6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ffca:	b91e      	cbnz	r6, 800ffd4 <__strtok_r+0x20>
 800ffcc:	b965      	cbnz	r5, 800ffe8 <__strtok_r+0x34>
 800ffce:	6015      	str	r5, [r2, #0]
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	e005      	b.n	800ffe0 <__strtok_r+0x2c>
 800ffd4:	42b5      	cmp	r5, r6
 800ffd6:	d1f6      	bne.n	800ffc6 <__strtok_r+0x12>
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1f0      	bne.n	800ffbe <__strtok_r+0xa>
 800ffdc:	6014      	str	r4, [r2, #0]
 800ffde:	7003      	strb	r3, [r0, #0]
 800ffe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffe2:	461c      	mov	r4, r3
 800ffe4:	e00c      	b.n	8010000 <__strtok_r+0x4c>
 800ffe6:	b915      	cbnz	r5, 800ffee <__strtok_r+0x3a>
 800ffe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ffec:	460e      	mov	r6, r1
 800ffee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fff2:	42ab      	cmp	r3, r5
 800fff4:	d1f7      	bne.n	800ffe6 <__strtok_r+0x32>
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d0f3      	beq.n	800ffe2 <__strtok_r+0x2e>
 800fffa:	2300      	movs	r3, #0
 800fffc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010000:	6014      	str	r4, [r2, #0]
 8010002:	e7ed      	b.n	800ffe0 <__strtok_r+0x2c>

08010004 <_vsniprintf_r>:
 8010004:	b530      	push	{r4, r5, lr}
 8010006:	1e14      	subs	r4, r2, #0
 8010008:	4605      	mov	r5, r0
 801000a:	b09b      	sub	sp, #108	; 0x6c
 801000c:	4618      	mov	r0, r3
 801000e:	da05      	bge.n	801001c <_vsniprintf_r+0x18>
 8010010:	238b      	movs	r3, #139	; 0x8b
 8010012:	602b      	str	r3, [r5, #0]
 8010014:	f04f 30ff 	mov.w	r0, #4294967295
 8010018:	b01b      	add	sp, #108	; 0x6c
 801001a:	bd30      	pop	{r4, r5, pc}
 801001c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010020:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010024:	bf14      	ite	ne
 8010026:	f104 33ff 	addne.w	r3, r4, #4294967295
 801002a:	4623      	moveq	r3, r4
 801002c:	9302      	str	r3, [sp, #8]
 801002e:	9305      	str	r3, [sp, #20]
 8010030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010034:	9100      	str	r1, [sp, #0]
 8010036:	9104      	str	r1, [sp, #16]
 8010038:	f8ad 300e 	strh.w	r3, [sp, #14]
 801003c:	4602      	mov	r2, r0
 801003e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010040:	4669      	mov	r1, sp
 8010042:	4628      	mov	r0, r5
 8010044:	f002 f820 	bl	8012088 <_svfiprintf_r>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	bfbc      	itt	lt
 801004c:	238b      	movlt	r3, #139	; 0x8b
 801004e:	602b      	strlt	r3, [r5, #0]
 8010050:	2c00      	cmp	r4, #0
 8010052:	d0e1      	beq.n	8010018 <_vsniprintf_r+0x14>
 8010054:	9b00      	ldr	r3, [sp, #0]
 8010056:	2200      	movs	r2, #0
 8010058:	701a      	strb	r2, [r3, #0]
 801005a:	e7dd      	b.n	8010018 <_vsniprintf_r+0x14>

0801005c <vsniprintf>:
 801005c:	b507      	push	{r0, r1, r2, lr}
 801005e:	9300      	str	r3, [sp, #0]
 8010060:	4613      	mov	r3, r2
 8010062:	460a      	mov	r2, r1
 8010064:	4601      	mov	r1, r0
 8010066:	4803      	ldr	r0, [pc, #12]	; (8010074 <vsniprintf+0x18>)
 8010068:	6800      	ldr	r0, [r0, #0]
 801006a:	f7ff ffcb 	bl	8010004 <_vsniprintf_r>
 801006e:	b003      	add	sp, #12
 8010070:	f85d fb04 	ldr.w	pc, [sp], #4
 8010074:	20000028 	.word	0x20000028

08010078 <__assert_func>:
 8010078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801007a:	4614      	mov	r4, r2
 801007c:	461a      	mov	r2, r3
 801007e:	4b09      	ldr	r3, [pc, #36]	; (80100a4 <__assert_func+0x2c>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4605      	mov	r5, r0
 8010084:	68d8      	ldr	r0, [r3, #12]
 8010086:	b14c      	cbz	r4, 801009c <__assert_func+0x24>
 8010088:	4b07      	ldr	r3, [pc, #28]	; (80100a8 <__assert_func+0x30>)
 801008a:	9100      	str	r1, [sp, #0]
 801008c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010090:	4906      	ldr	r1, [pc, #24]	; (80100ac <__assert_func+0x34>)
 8010092:	462b      	mov	r3, r5
 8010094:	f000 fe88 	bl	8010da8 <fiprintf>
 8010098:	f002 fb4a 	bl	8012730 <abort>
 801009c:	4b04      	ldr	r3, [pc, #16]	; (80100b0 <__assert_func+0x38>)
 801009e:	461c      	mov	r4, r3
 80100a0:	e7f3      	b.n	801008a <__assert_func+0x12>
 80100a2:	bf00      	nop
 80100a4:	20000028 	.word	0x20000028
 80100a8:	080135d8 	.word	0x080135d8
 80100ac:	080135e5 	.word	0x080135e5
 80100b0:	08013613 	.word	0x08013613

080100b4 <quorem>:
 80100b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b8:	6903      	ldr	r3, [r0, #16]
 80100ba:	690c      	ldr	r4, [r1, #16]
 80100bc:	42a3      	cmp	r3, r4
 80100be:	4607      	mov	r7, r0
 80100c0:	f2c0 8081 	blt.w	80101c6 <quorem+0x112>
 80100c4:	3c01      	subs	r4, #1
 80100c6:	f101 0814 	add.w	r8, r1, #20
 80100ca:	f100 0514 	add.w	r5, r0, #20
 80100ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100d2:	9301      	str	r3, [sp, #4]
 80100d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100dc:	3301      	adds	r3, #1
 80100de:	429a      	cmp	r2, r3
 80100e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80100e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80100ec:	d331      	bcc.n	8010152 <quorem+0x9e>
 80100ee:	f04f 0e00 	mov.w	lr, #0
 80100f2:	4640      	mov	r0, r8
 80100f4:	46ac      	mov	ip, r5
 80100f6:	46f2      	mov	sl, lr
 80100f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80100fc:	b293      	uxth	r3, r2
 80100fe:	fb06 e303 	mla	r3, r6, r3, lr
 8010102:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010106:	b29b      	uxth	r3, r3
 8010108:	ebaa 0303 	sub.w	r3, sl, r3
 801010c:	0c12      	lsrs	r2, r2, #16
 801010e:	f8dc a000 	ldr.w	sl, [ip]
 8010112:	fb06 e202 	mla	r2, r6, r2, lr
 8010116:	fa13 f38a 	uxtah	r3, r3, sl
 801011a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801011e:	fa1f fa82 	uxth.w	sl, r2
 8010122:	f8dc 2000 	ldr.w	r2, [ip]
 8010126:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801012a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801012e:	b29b      	uxth	r3, r3
 8010130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010134:	4581      	cmp	r9, r0
 8010136:	f84c 3b04 	str.w	r3, [ip], #4
 801013a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801013e:	d2db      	bcs.n	80100f8 <quorem+0x44>
 8010140:	f855 300b 	ldr.w	r3, [r5, fp]
 8010144:	b92b      	cbnz	r3, 8010152 <quorem+0x9e>
 8010146:	9b01      	ldr	r3, [sp, #4]
 8010148:	3b04      	subs	r3, #4
 801014a:	429d      	cmp	r5, r3
 801014c:	461a      	mov	r2, r3
 801014e:	d32e      	bcc.n	80101ae <quorem+0xfa>
 8010150:	613c      	str	r4, [r7, #16]
 8010152:	4638      	mov	r0, r7
 8010154:	f001 fc90 	bl	8011a78 <__mcmp>
 8010158:	2800      	cmp	r0, #0
 801015a:	db24      	blt.n	80101a6 <quorem+0xf2>
 801015c:	3601      	adds	r6, #1
 801015e:	4628      	mov	r0, r5
 8010160:	f04f 0c00 	mov.w	ip, #0
 8010164:	f858 2b04 	ldr.w	r2, [r8], #4
 8010168:	f8d0 e000 	ldr.w	lr, [r0]
 801016c:	b293      	uxth	r3, r2
 801016e:	ebac 0303 	sub.w	r3, ip, r3
 8010172:	0c12      	lsrs	r2, r2, #16
 8010174:	fa13 f38e 	uxtah	r3, r3, lr
 8010178:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801017c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010180:	b29b      	uxth	r3, r3
 8010182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010186:	45c1      	cmp	r9, r8
 8010188:	f840 3b04 	str.w	r3, [r0], #4
 801018c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010190:	d2e8      	bcs.n	8010164 <quorem+0xb0>
 8010192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801019a:	b922      	cbnz	r2, 80101a6 <quorem+0xf2>
 801019c:	3b04      	subs	r3, #4
 801019e:	429d      	cmp	r5, r3
 80101a0:	461a      	mov	r2, r3
 80101a2:	d30a      	bcc.n	80101ba <quorem+0x106>
 80101a4:	613c      	str	r4, [r7, #16]
 80101a6:	4630      	mov	r0, r6
 80101a8:	b003      	add	sp, #12
 80101aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ae:	6812      	ldr	r2, [r2, #0]
 80101b0:	3b04      	subs	r3, #4
 80101b2:	2a00      	cmp	r2, #0
 80101b4:	d1cc      	bne.n	8010150 <quorem+0x9c>
 80101b6:	3c01      	subs	r4, #1
 80101b8:	e7c7      	b.n	801014a <quorem+0x96>
 80101ba:	6812      	ldr	r2, [r2, #0]
 80101bc:	3b04      	subs	r3, #4
 80101be:	2a00      	cmp	r2, #0
 80101c0:	d1f0      	bne.n	80101a4 <quorem+0xf0>
 80101c2:	3c01      	subs	r4, #1
 80101c4:	e7eb      	b.n	801019e <quorem+0xea>
 80101c6:	2000      	movs	r0, #0
 80101c8:	e7ee      	b.n	80101a8 <quorem+0xf4>
 80101ca:	0000      	movs	r0, r0
 80101cc:	0000      	movs	r0, r0
	...

080101d0 <_dtoa_r>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	ed2d 8b02 	vpush	{d8}
 80101d8:	ec57 6b10 	vmov	r6, r7, d0
 80101dc:	b095      	sub	sp, #84	; 0x54
 80101de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80101e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80101e4:	9105      	str	r1, [sp, #20]
 80101e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80101ea:	4604      	mov	r4, r0
 80101ec:	9209      	str	r2, [sp, #36]	; 0x24
 80101ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80101f0:	b975      	cbnz	r5, 8010210 <_dtoa_r+0x40>
 80101f2:	2010      	movs	r0, #16
 80101f4:	f001 f95e 	bl	80114b4 <malloc>
 80101f8:	4602      	mov	r2, r0
 80101fa:	6260      	str	r0, [r4, #36]	; 0x24
 80101fc:	b920      	cbnz	r0, 8010208 <_dtoa_r+0x38>
 80101fe:	4bb2      	ldr	r3, [pc, #712]	; (80104c8 <_dtoa_r+0x2f8>)
 8010200:	21ea      	movs	r1, #234	; 0xea
 8010202:	48b2      	ldr	r0, [pc, #712]	; (80104cc <_dtoa_r+0x2fc>)
 8010204:	f7ff ff38 	bl	8010078 <__assert_func>
 8010208:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801020c:	6005      	str	r5, [r0, #0]
 801020e:	60c5      	str	r5, [r0, #12]
 8010210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010212:	6819      	ldr	r1, [r3, #0]
 8010214:	b151      	cbz	r1, 801022c <_dtoa_r+0x5c>
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	604a      	str	r2, [r1, #4]
 801021a:	2301      	movs	r3, #1
 801021c:	4093      	lsls	r3, r2
 801021e:	608b      	str	r3, [r1, #8]
 8010220:	4620      	mov	r0, r4
 8010222:	f001 f9a1 	bl	8011568 <_Bfree>
 8010226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010228:	2200      	movs	r2, #0
 801022a:	601a      	str	r2, [r3, #0]
 801022c:	1e3b      	subs	r3, r7, #0
 801022e:	bfb9      	ittee	lt
 8010230:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010234:	9303      	strlt	r3, [sp, #12]
 8010236:	2300      	movge	r3, #0
 8010238:	f8c8 3000 	strge.w	r3, [r8]
 801023c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010240:	4ba3      	ldr	r3, [pc, #652]	; (80104d0 <_dtoa_r+0x300>)
 8010242:	bfbc      	itt	lt
 8010244:	2201      	movlt	r2, #1
 8010246:	f8c8 2000 	strlt.w	r2, [r8]
 801024a:	ea33 0309 	bics.w	r3, r3, r9
 801024e:	d11b      	bne.n	8010288 <_dtoa_r+0xb8>
 8010250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010252:	f242 730f 	movw	r3, #9999	; 0x270f
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801025c:	4333      	orrs	r3, r6
 801025e:	f000 857a 	beq.w	8010d56 <_dtoa_r+0xb86>
 8010262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010264:	b963      	cbnz	r3, 8010280 <_dtoa_r+0xb0>
 8010266:	4b9b      	ldr	r3, [pc, #620]	; (80104d4 <_dtoa_r+0x304>)
 8010268:	e024      	b.n	80102b4 <_dtoa_r+0xe4>
 801026a:	4b9b      	ldr	r3, [pc, #620]	; (80104d8 <_dtoa_r+0x308>)
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	3308      	adds	r3, #8
 8010270:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010272:	6013      	str	r3, [r2, #0]
 8010274:	9800      	ldr	r0, [sp, #0]
 8010276:	b015      	add	sp, #84	; 0x54
 8010278:	ecbd 8b02 	vpop	{d8}
 801027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010280:	4b94      	ldr	r3, [pc, #592]	; (80104d4 <_dtoa_r+0x304>)
 8010282:	9300      	str	r3, [sp, #0]
 8010284:	3303      	adds	r3, #3
 8010286:	e7f3      	b.n	8010270 <_dtoa_r+0xa0>
 8010288:	ed9d 7b02 	vldr	d7, [sp, #8]
 801028c:	2200      	movs	r2, #0
 801028e:	ec51 0b17 	vmov	r0, r1, d7
 8010292:	2300      	movs	r3, #0
 8010294:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010298:	f7f0 fc1e 	bl	8000ad8 <__aeabi_dcmpeq>
 801029c:	4680      	mov	r8, r0
 801029e:	b158      	cbz	r0, 80102b8 <_dtoa_r+0xe8>
 80102a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80102a2:	2301      	movs	r3, #1
 80102a4:	6013      	str	r3, [r2, #0]
 80102a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f000 8551 	beq.w	8010d50 <_dtoa_r+0xb80>
 80102ae:	488b      	ldr	r0, [pc, #556]	; (80104dc <_dtoa_r+0x30c>)
 80102b0:	6018      	str	r0, [r3, #0]
 80102b2:	1e43      	subs	r3, r0, #1
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	e7dd      	b.n	8010274 <_dtoa_r+0xa4>
 80102b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80102bc:	aa12      	add	r2, sp, #72	; 0x48
 80102be:	a913      	add	r1, sp, #76	; 0x4c
 80102c0:	4620      	mov	r0, r4
 80102c2:	f001 fcf9 	bl	8011cb8 <__d2b>
 80102c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102ca:	4683      	mov	fp, r0
 80102cc:	2d00      	cmp	r5, #0
 80102ce:	d07c      	beq.n	80103ca <_dtoa_r+0x1fa>
 80102d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80102d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80102de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80102e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80102e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80102ea:	4b7d      	ldr	r3, [pc, #500]	; (80104e0 <_dtoa_r+0x310>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	4630      	mov	r0, r6
 80102f0:	4639      	mov	r1, r7
 80102f2:	f7ef ffd1 	bl	8000298 <__aeabi_dsub>
 80102f6:	a36e      	add	r3, pc, #440	; (adr r3, 80104b0 <_dtoa_r+0x2e0>)
 80102f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fc:	f7f0 f984 	bl	8000608 <__aeabi_dmul>
 8010300:	a36d      	add	r3, pc, #436	; (adr r3, 80104b8 <_dtoa_r+0x2e8>)
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	f7ef ffc9 	bl	800029c <__adddf3>
 801030a:	4606      	mov	r6, r0
 801030c:	4628      	mov	r0, r5
 801030e:	460f      	mov	r7, r1
 8010310:	f7f0 f910 	bl	8000534 <__aeabi_i2d>
 8010314:	a36a      	add	r3, pc, #424	; (adr r3, 80104c0 <_dtoa_r+0x2f0>)
 8010316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031a:	f7f0 f975 	bl	8000608 <__aeabi_dmul>
 801031e:	4602      	mov	r2, r0
 8010320:	460b      	mov	r3, r1
 8010322:	4630      	mov	r0, r6
 8010324:	4639      	mov	r1, r7
 8010326:	f7ef ffb9 	bl	800029c <__adddf3>
 801032a:	4606      	mov	r6, r0
 801032c:	460f      	mov	r7, r1
 801032e:	f7f0 fc1b 	bl	8000b68 <__aeabi_d2iz>
 8010332:	2200      	movs	r2, #0
 8010334:	4682      	mov	sl, r0
 8010336:	2300      	movs	r3, #0
 8010338:	4630      	mov	r0, r6
 801033a:	4639      	mov	r1, r7
 801033c:	f7f0 fbd6 	bl	8000aec <__aeabi_dcmplt>
 8010340:	b148      	cbz	r0, 8010356 <_dtoa_r+0x186>
 8010342:	4650      	mov	r0, sl
 8010344:	f7f0 f8f6 	bl	8000534 <__aeabi_i2d>
 8010348:	4632      	mov	r2, r6
 801034a:	463b      	mov	r3, r7
 801034c:	f7f0 fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8010350:	b908      	cbnz	r0, 8010356 <_dtoa_r+0x186>
 8010352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010356:	f1ba 0f16 	cmp.w	sl, #22
 801035a:	d854      	bhi.n	8010406 <_dtoa_r+0x236>
 801035c:	4b61      	ldr	r3, [pc, #388]	; (80104e4 <_dtoa_r+0x314>)
 801035e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801036a:	f7f0 fbbf 	bl	8000aec <__aeabi_dcmplt>
 801036e:	2800      	cmp	r0, #0
 8010370:	d04b      	beq.n	801040a <_dtoa_r+0x23a>
 8010372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010376:	2300      	movs	r3, #0
 8010378:	930e      	str	r3, [sp, #56]	; 0x38
 801037a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801037c:	1b5d      	subs	r5, r3, r5
 801037e:	1e6b      	subs	r3, r5, #1
 8010380:	9304      	str	r3, [sp, #16]
 8010382:	bf43      	ittte	mi
 8010384:	2300      	movmi	r3, #0
 8010386:	f1c5 0801 	rsbmi	r8, r5, #1
 801038a:	9304      	strmi	r3, [sp, #16]
 801038c:	f04f 0800 	movpl.w	r8, #0
 8010390:	f1ba 0f00 	cmp.w	sl, #0
 8010394:	db3b      	blt.n	801040e <_dtoa_r+0x23e>
 8010396:	9b04      	ldr	r3, [sp, #16]
 8010398:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801039c:	4453      	add	r3, sl
 801039e:	9304      	str	r3, [sp, #16]
 80103a0:	2300      	movs	r3, #0
 80103a2:	9306      	str	r3, [sp, #24]
 80103a4:	9b05      	ldr	r3, [sp, #20]
 80103a6:	2b09      	cmp	r3, #9
 80103a8:	d869      	bhi.n	801047e <_dtoa_r+0x2ae>
 80103aa:	2b05      	cmp	r3, #5
 80103ac:	bfc4      	itt	gt
 80103ae:	3b04      	subgt	r3, #4
 80103b0:	9305      	strgt	r3, [sp, #20]
 80103b2:	9b05      	ldr	r3, [sp, #20]
 80103b4:	f1a3 0302 	sub.w	r3, r3, #2
 80103b8:	bfcc      	ite	gt
 80103ba:	2500      	movgt	r5, #0
 80103bc:	2501      	movle	r5, #1
 80103be:	2b03      	cmp	r3, #3
 80103c0:	d869      	bhi.n	8010496 <_dtoa_r+0x2c6>
 80103c2:	e8df f003 	tbb	[pc, r3]
 80103c6:	4e2c      	.short	0x4e2c
 80103c8:	5a4c      	.short	0x5a4c
 80103ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80103ce:	441d      	add	r5, r3
 80103d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80103d4:	2b20      	cmp	r3, #32
 80103d6:	bfc1      	itttt	gt
 80103d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80103dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80103e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80103e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80103e8:	bfda      	itte	le
 80103ea:	f1c3 0320 	rsble	r3, r3, #32
 80103ee:	fa06 f003 	lslle.w	r0, r6, r3
 80103f2:	4318      	orrgt	r0, r3
 80103f4:	f7f0 f88e 	bl	8000514 <__aeabi_ui2d>
 80103f8:	2301      	movs	r3, #1
 80103fa:	4606      	mov	r6, r0
 80103fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010400:	3d01      	subs	r5, #1
 8010402:	9310      	str	r3, [sp, #64]	; 0x40
 8010404:	e771      	b.n	80102ea <_dtoa_r+0x11a>
 8010406:	2301      	movs	r3, #1
 8010408:	e7b6      	b.n	8010378 <_dtoa_r+0x1a8>
 801040a:	900e      	str	r0, [sp, #56]	; 0x38
 801040c:	e7b5      	b.n	801037a <_dtoa_r+0x1aa>
 801040e:	f1ca 0300 	rsb	r3, sl, #0
 8010412:	9306      	str	r3, [sp, #24]
 8010414:	2300      	movs	r3, #0
 8010416:	eba8 080a 	sub.w	r8, r8, sl
 801041a:	930d      	str	r3, [sp, #52]	; 0x34
 801041c:	e7c2      	b.n	80103a4 <_dtoa_r+0x1d4>
 801041e:	2300      	movs	r3, #0
 8010420:	9308      	str	r3, [sp, #32]
 8010422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010424:	2b00      	cmp	r3, #0
 8010426:	dc39      	bgt.n	801049c <_dtoa_r+0x2cc>
 8010428:	f04f 0901 	mov.w	r9, #1
 801042c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010430:	464b      	mov	r3, r9
 8010432:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010436:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010438:	2200      	movs	r2, #0
 801043a:	6042      	str	r2, [r0, #4]
 801043c:	2204      	movs	r2, #4
 801043e:	f102 0614 	add.w	r6, r2, #20
 8010442:	429e      	cmp	r6, r3
 8010444:	6841      	ldr	r1, [r0, #4]
 8010446:	d92f      	bls.n	80104a8 <_dtoa_r+0x2d8>
 8010448:	4620      	mov	r0, r4
 801044a:	f001 f84d 	bl	80114e8 <_Balloc>
 801044e:	9000      	str	r0, [sp, #0]
 8010450:	2800      	cmp	r0, #0
 8010452:	d14b      	bne.n	80104ec <_dtoa_r+0x31c>
 8010454:	4b24      	ldr	r3, [pc, #144]	; (80104e8 <_dtoa_r+0x318>)
 8010456:	4602      	mov	r2, r0
 8010458:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801045c:	e6d1      	b.n	8010202 <_dtoa_r+0x32>
 801045e:	2301      	movs	r3, #1
 8010460:	e7de      	b.n	8010420 <_dtoa_r+0x250>
 8010462:	2300      	movs	r3, #0
 8010464:	9308      	str	r3, [sp, #32]
 8010466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010468:	eb0a 0903 	add.w	r9, sl, r3
 801046c:	f109 0301 	add.w	r3, r9, #1
 8010470:	2b01      	cmp	r3, #1
 8010472:	9301      	str	r3, [sp, #4]
 8010474:	bfb8      	it	lt
 8010476:	2301      	movlt	r3, #1
 8010478:	e7dd      	b.n	8010436 <_dtoa_r+0x266>
 801047a:	2301      	movs	r3, #1
 801047c:	e7f2      	b.n	8010464 <_dtoa_r+0x294>
 801047e:	2501      	movs	r5, #1
 8010480:	2300      	movs	r3, #0
 8010482:	9305      	str	r3, [sp, #20]
 8010484:	9508      	str	r5, [sp, #32]
 8010486:	f04f 39ff 	mov.w	r9, #4294967295
 801048a:	2200      	movs	r2, #0
 801048c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010490:	2312      	movs	r3, #18
 8010492:	9209      	str	r2, [sp, #36]	; 0x24
 8010494:	e7cf      	b.n	8010436 <_dtoa_r+0x266>
 8010496:	2301      	movs	r3, #1
 8010498:	9308      	str	r3, [sp, #32]
 801049a:	e7f4      	b.n	8010486 <_dtoa_r+0x2b6>
 801049c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80104a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80104a4:	464b      	mov	r3, r9
 80104a6:	e7c6      	b.n	8010436 <_dtoa_r+0x266>
 80104a8:	3101      	adds	r1, #1
 80104aa:	6041      	str	r1, [r0, #4]
 80104ac:	0052      	lsls	r2, r2, #1
 80104ae:	e7c6      	b.n	801043e <_dtoa_r+0x26e>
 80104b0:	636f4361 	.word	0x636f4361
 80104b4:	3fd287a7 	.word	0x3fd287a7
 80104b8:	8b60c8b3 	.word	0x8b60c8b3
 80104bc:	3fc68a28 	.word	0x3fc68a28
 80104c0:	509f79fb 	.word	0x509f79fb
 80104c4:	3fd34413 	.word	0x3fd34413
 80104c8:	08013560 	.word	0x08013560
 80104cc:	08013621 	.word	0x08013621
 80104d0:	7ff00000 	.word	0x7ff00000
 80104d4:	0801361d 	.word	0x0801361d
 80104d8:	08013614 	.word	0x08013614
 80104dc:	080134ed 	.word	0x080134ed
 80104e0:	3ff80000 	.word	0x3ff80000
 80104e4:	08013798 	.word	0x08013798
 80104e8:	08013680 	.word	0x08013680
 80104ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104ee:	9a00      	ldr	r2, [sp, #0]
 80104f0:	601a      	str	r2, [r3, #0]
 80104f2:	9b01      	ldr	r3, [sp, #4]
 80104f4:	2b0e      	cmp	r3, #14
 80104f6:	f200 80ad 	bhi.w	8010654 <_dtoa_r+0x484>
 80104fa:	2d00      	cmp	r5, #0
 80104fc:	f000 80aa 	beq.w	8010654 <_dtoa_r+0x484>
 8010500:	f1ba 0f00 	cmp.w	sl, #0
 8010504:	dd36      	ble.n	8010574 <_dtoa_r+0x3a4>
 8010506:	4ac3      	ldr	r2, [pc, #780]	; (8010814 <_dtoa_r+0x644>)
 8010508:	f00a 030f 	and.w	r3, sl, #15
 801050c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010510:	ed93 7b00 	vldr	d7, [r3]
 8010514:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010518:	ea4f 172a 	mov.w	r7, sl, asr #4
 801051c:	eeb0 8a47 	vmov.f32	s16, s14
 8010520:	eef0 8a67 	vmov.f32	s17, s15
 8010524:	d016      	beq.n	8010554 <_dtoa_r+0x384>
 8010526:	4bbc      	ldr	r3, [pc, #752]	; (8010818 <_dtoa_r+0x648>)
 8010528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801052c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010530:	f7f0 f994 	bl	800085c <__aeabi_ddiv>
 8010534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010538:	f007 070f 	and.w	r7, r7, #15
 801053c:	2503      	movs	r5, #3
 801053e:	4eb6      	ldr	r6, [pc, #728]	; (8010818 <_dtoa_r+0x648>)
 8010540:	b957      	cbnz	r7, 8010558 <_dtoa_r+0x388>
 8010542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010546:	ec53 2b18 	vmov	r2, r3, d8
 801054a:	f7f0 f987 	bl	800085c <__aeabi_ddiv>
 801054e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010552:	e029      	b.n	80105a8 <_dtoa_r+0x3d8>
 8010554:	2502      	movs	r5, #2
 8010556:	e7f2      	b.n	801053e <_dtoa_r+0x36e>
 8010558:	07f9      	lsls	r1, r7, #31
 801055a:	d508      	bpl.n	801056e <_dtoa_r+0x39e>
 801055c:	ec51 0b18 	vmov	r0, r1, d8
 8010560:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010564:	f7f0 f850 	bl	8000608 <__aeabi_dmul>
 8010568:	ec41 0b18 	vmov	d8, r0, r1
 801056c:	3501      	adds	r5, #1
 801056e:	107f      	asrs	r7, r7, #1
 8010570:	3608      	adds	r6, #8
 8010572:	e7e5      	b.n	8010540 <_dtoa_r+0x370>
 8010574:	f000 80a6 	beq.w	80106c4 <_dtoa_r+0x4f4>
 8010578:	f1ca 0600 	rsb	r6, sl, #0
 801057c:	4ba5      	ldr	r3, [pc, #660]	; (8010814 <_dtoa_r+0x644>)
 801057e:	4fa6      	ldr	r7, [pc, #664]	; (8010818 <_dtoa_r+0x648>)
 8010580:	f006 020f 	and.w	r2, r6, #15
 8010584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010590:	f7f0 f83a 	bl	8000608 <__aeabi_dmul>
 8010594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010598:	1136      	asrs	r6, r6, #4
 801059a:	2300      	movs	r3, #0
 801059c:	2502      	movs	r5, #2
 801059e:	2e00      	cmp	r6, #0
 80105a0:	f040 8085 	bne.w	80106ae <_dtoa_r+0x4de>
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1d2      	bne.n	801054e <_dtoa_r+0x37e>
 80105a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	f000 808c 	beq.w	80106c8 <_dtoa_r+0x4f8>
 80105b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80105b4:	4b99      	ldr	r3, [pc, #612]	; (801081c <_dtoa_r+0x64c>)
 80105b6:	2200      	movs	r2, #0
 80105b8:	4630      	mov	r0, r6
 80105ba:	4639      	mov	r1, r7
 80105bc:	f7f0 fa96 	bl	8000aec <__aeabi_dcmplt>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	f000 8081 	beq.w	80106c8 <_dtoa_r+0x4f8>
 80105c6:	9b01      	ldr	r3, [sp, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d07d      	beq.n	80106c8 <_dtoa_r+0x4f8>
 80105cc:	f1b9 0f00 	cmp.w	r9, #0
 80105d0:	dd3c      	ble.n	801064c <_dtoa_r+0x47c>
 80105d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80105d6:	9307      	str	r3, [sp, #28]
 80105d8:	2200      	movs	r2, #0
 80105da:	4b91      	ldr	r3, [pc, #580]	; (8010820 <_dtoa_r+0x650>)
 80105dc:	4630      	mov	r0, r6
 80105de:	4639      	mov	r1, r7
 80105e0:	f7f0 f812 	bl	8000608 <__aeabi_dmul>
 80105e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105e8:	3501      	adds	r5, #1
 80105ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80105ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80105f2:	4628      	mov	r0, r5
 80105f4:	f7ef ff9e 	bl	8000534 <__aeabi_i2d>
 80105f8:	4632      	mov	r2, r6
 80105fa:	463b      	mov	r3, r7
 80105fc:	f7f0 f804 	bl	8000608 <__aeabi_dmul>
 8010600:	4b88      	ldr	r3, [pc, #544]	; (8010824 <_dtoa_r+0x654>)
 8010602:	2200      	movs	r2, #0
 8010604:	f7ef fe4a 	bl	800029c <__adddf3>
 8010608:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801060c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010610:	9303      	str	r3, [sp, #12]
 8010612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010614:	2b00      	cmp	r3, #0
 8010616:	d15c      	bne.n	80106d2 <_dtoa_r+0x502>
 8010618:	4b83      	ldr	r3, [pc, #524]	; (8010828 <_dtoa_r+0x658>)
 801061a:	2200      	movs	r2, #0
 801061c:	4630      	mov	r0, r6
 801061e:	4639      	mov	r1, r7
 8010620:	f7ef fe3a 	bl	8000298 <__aeabi_dsub>
 8010624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010628:	4606      	mov	r6, r0
 801062a:	460f      	mov	r7, r1
 801062c:	f7f0 fa7c 	bl	8000b28 <__aeabi_dcmpgt>
 8010630:	2800      	cmp	r0, #0
 8010632:	f040 8296 	bne.w	8010b62 <_dtoa_r+0x992>
 8010636:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801063a:	4630      	mov	r0, r6
 801063c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010640:	4639      	mov	r1, r7
 8010642:	f7f0 fa53 	bl	8000aec <__aeabi_dcmplt>
 8010646:	2800      	cmp	r0, #0
 8010648:	f040 8288 	bne.w	8010b5c <_dtoa_r+0x98c>
 801064c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010650:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010654:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010656:	2b00      	cmp	r3, #0
 8010658:	f2c0 8158 	blt.w	801090c <_dtoa_r+0x73c>
 801065c:	f1ba 0f0e 	cmp.w	sl, #14
 8010660:	f300 8154 	bgt.w	801090c <_dtoa_r+0x73c>
 8010664:	4b6b      	ldr	r3, [pc, #428]	; (8010814 <_dtoa_r+0x644>)
 8010666:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801066a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801066e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010670:	2b00      	cmp	r3, #0
 8010672:	f280 80e3 	bge.w	801083c <_dtoa_r+0x66c>
 8010676:	9b01      	ldr	r3, [sp, #4]
 8010678:	2b00      	cmp	r3, #0
 801067a:	f300 80df 	bgt.w	801083c <_dtoa_r+0x66c>
 801067e:	f040 826d 	bne.w	8010b5c <_dtoa_r+0x98c>
 8010682:	4b69      	ldr	r3, [pc, #420]	; (8010828 <_dtoa_r+0x658>)
 8010684:	2200      	movs	r2, #0
 8010686:	4640      	mov	r0, r8
 8010688:	4649      	mov	r1, r9
 801068a:	f7ef ffbd 	bl	8000608 <__aeabi_dmul>
 801068e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010692:	f7f0 fa3f 	bl	8000b14 <__aeabi_dcmpge>
 8010696:	9e01      	ldr	r6, [sp, #4]
 8010698:	4637      	mov	r7, r6
 801069a:	2800      	cmp	r0, #0
 801069c:	f040 8243 	bne.w	8010b26 <_dtoa_r+0x956>
 80106a0:	9d00      	ldr	r5, [sp, #0]
 80106a2:	2331      	movs	r3, #49	; 0x31
 80106a4:	f805 3b01 	strb.w	r3, [r5], #1
 80106a8:	f10a 0a01 	add.w	sl, sl, #1
 80106ac:	e23f      	b.n	8010b2e <_dtoa_r+0x95e>
 80106ae:	07f2      	lsls	r2, r6, #31
 80106b0:	d505      	bpl.n	80106be <_dtoa_r+0x4ee>
 80106b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106b6:	f7ef ffa7 	bl	8000608 <__aeabi_dmul>
 80106ba:	3501      	adds	r5, #1
 80106bc:	2301      	movs	r3, #1
 80106be:	1076      	asrs	r6, r6, #1
 80106c0:	3708      	adds	r7, #8
 80106c2:	e76c      	b.n	801059e <_dtoa_r+0x3ce>
 80106c4:	2502      	movs	r5, #2
 80106c6:	e76f      	b.n	80105a8 <_dtoa_r+0x3d8>
 80106c8:	9b01      	ldr	r3, [sp, #4]
 80106ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80106ce:	930c      	str	r3, [sp, #48]	; 0x30
 80106d0:	e78d      	b.n	80105ee <_dtoa_r+0x41e>
 80106d2:	9900      	ldr	r1, [sp, #0]
 80106d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80106d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106d8:	4b4e      	ldr	r3, [pc, #312]	; (8010814 <_dtoa_r+0x644>)
 80106da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106de:	4401      	add	r1, r0
 80106e0:	9102      	str	r1, [sp, #8]
 80106e2:	9908      	ldr	r1, [sp, #32]
 80106e4:	eeb0 8a47 	vmov.f32	s16, s14
 80106e8:	eef0 8a67 	vmov.f32	s17, s15
 80106ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106f4:	2900      	cmp	r1, #0
 80106f6:	d045      	beq.n	8010784 <_dtoa_r+0x5b4>
 80106f8:	494c      	ldr	r1, [pc, #304]	; (801082c <_dtoa_r+0x65c>)
 80106fa:	2000      	movs	r0, #0
 80106fc:	f7f0 f8ae 	bl	800085c <__aeabi_ddiv>
 8010700:	ec53 2b18 	vmov	r2, r3, d8
 8010704:	f7ef fdc8 	bl	8000298 <__aeabi_dsub>
 8010708:	9d00      	ldr	r5, [sp, #0]
 801070a:	ec41 0b18 	vmov	d8, r0, r1
 801070e:	4639      	mov	r1, r7
 8010710:	4630      	mov	r0, r6
 8010712:	f7f0 fa29 	bl	8000b68 <__aeabi_d2iz>
 8010716:	900c      	str	r0, [sp, #48]	; 0x30
 8010718:	f7ef ff0c 	bl	8000534 <__aeabi_i2d>
 801071c:	4602      	mov	r2, r0
 801071e:	460b      	mov	r3, r1
 8010720:	4630      	mov	r0, r6
 8010722:	4639      	mov	r1, r7
 8010724:	f7ef fdb8 	bl	8000298 <__aeabi_dsub>
 8010728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801072a:	3330      	adds	r3, #48	; 0x30
 801072c:	f805 3b01 	strb.w	r3, [r5], #1
 8010730:	ec53 2b18 	vmov	r2, r3, d8
 8010734:	4606      	mov	r6, r0
 8010736:	460f      	mov	r7, r1
 8010738:	f7f0 f9d8 	bl	8000aec <__aeabi_dcmplt>
 801073c:	2800      	cmp	r0, #0
 801073e:	d165      	bne.n	801080c <_dtoa_r+0x63c>
 8010740:	4632      	mov	r2, r6
 8010742:	463b      	mov	r3, r7
 8010744:	4935      	ldr	r1, [pc, #212]	; (801081c <_dtoa_r+0x64c>)
 8010746:	2000      	movs	r0, #0
 8010748:	f7ef fda6 	bl	8000298 <__aeabi_dsub>
 801074c:	ec53 2b18 	vmov	r2, r3, d8
 8010750:	f7f0 f9cc 	bl	8000aec <__aeabi_dcmplt>
 8010754:	2800      	cmp	r0, #0
 8010756:	f040 80b9 	bne.w	80108cc <_dtoa_r+0x6fc>
 801075a:	9b02      	ldr	r3, [sp, #8]
 801075c:	429d      	cmp	r5, r3
 801075e:	f43f af75 	beq.w	801064c <_dtoa_r+0x47c>
 8010762:	4b2f      	ldr	r3, [pc, #188]	; (8010820 <_dtoa_r+0x650>)
 8010764:	ec51 0b18 	vmov	r0, r1, d8
 8010768:	2200      	movs	r2, #0
 801076a:	f7ef ff4d 	bl	8000608 <__aeabi_dmul>
 801076e:	4b2c      	ldr	r3, [pc, #176]	; (8010820 <_dtoa_r+0x650>)
 8010770:	ec41 0b18 	vmov	d8, r0, r1
 8010774:	2200      	movs	r2, #0
 8010776:	4630      	mov	r0, r6
 8010778:	4639      	mov	r1, r7
 801077a:	f7ef ff45 	bl	8000608 <__aeabi_dmul>
 801077e:	4606      	mov	r6, r0
 8010780:	460f      	mov	r7, r1
 8010782:	e7c4      	b.n	801070e <_dtoa_r+0x53e>
 8010784:	ec51 0b17 	vmov	r0, r1, d7
 8010788:	f7ef ff3e 	bl	8000608 <__aeabi_dmul>
 801078c:	9b02      	ldr	r3, [sp, #8]
 801078e:	9d00      	ldr	r5, [sp, #0]
 8010790:	930c      	str	r3, [sp, #48]	; 0x30
 8010792:	ec41 0b18 	vmov	d8, r0, r1
 8010796:	4639      	mov	r1, r7
 8010798:	4630      	mov	r0, r6
 801079a:	f7f0 f9e5 	bl	8000b68 <__aeabi_d2iz>
 801079e:	9011      	str	r0, [sp, #68]	; 0x44
 80107a0:	f7ef fec8 	bl	8000534 <__aeabi_i2d>
 80107a4:	4602      	mov	r2, r0
 80107a6:	460b      	mov	r3, r1
 80107a8:	4630      	mov	r0, r6
 80107aa:	4639      	mov	r1, r7
 80107ac:	f7ef fd74 	bl	8000298 <__aeabi_dsub>
 80107b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80107b2:	3330      	adds	r3, #48	; 0x30
 80107b4:	f805 3b01 	strb.w	r3, [r5], #1
 80107b8:	9b02      	ldr	r3, [sp, #8]
 80107ba:	429d      	cmp	r5, r3
 80107bc:	4606      	mov	r6, r0
 80107be:	460f      	mov	r7, r1
 80107c0:	f04f 0200 	mov.w	r2, #0
 80107c4:	d134      	bne.n	8010830 <_dtoa_r+0x660>
 80107c6:	4b19      	ldr	r3, [pc, #100]	; (801082c <_dtoa_r+0x65c>)
 80107c8:	ec51 0b18 	vmov	r0, r1, d8
 80107cc:	f7ef fd66 	bl	800029c <__adddf3>
 80107d0:	4602      	mov	r2, r0
 80107d2:	460b      	mov	r3, r1
 80107d4:	4630      	mov	r0, r6
 80107d6:	4639      	mov	r1, r7
 80107d8:	f7f0 f9a6 	bl	8000b28 <__aeabi_dcmpgt>
 80107dc:	2800      	cmp	r0, #0
 80107de:	d175      	bne.n	80108cc <_dtoa_r+0x6fc>
 80107e0:	ec53 2b18 	vmov	r2, r3, d8
 80107e4:	4911      	ldr	r1, [pc, #68]	; (801082c <_dtoa_r+0x65c>)
 80107e6:	2000      	movs	r0, #0
 80107e8:	f7ef fd56 	bl	8000298 <__aeabi_dsub>
 80107ec:	4602      	mov	r2, r0
 80107ee:	460b      	mov	r3, r1
 80107f0:	4630      	mov	r0, r6
 80107f2:	4639      	mov	r1, r7
 80107f4:	f7f0 f97a 	bl	8000aec <__aeabi_dcmplt>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	f43f af27 	beq.w	801064c <_dtoa_r+0x47c>
 80107fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010800:	1e6b      	subs	r3, r5, #1
 8010802:	930c      	str	r3, [sp, #48]	; 0x30
 8010804:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010808:	2b30      	cmp	r3, #48	; 0x30
 801080a:	d0f8      	beq.n	80107fe <_dtoa_r+0x62e>
 801080c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010810:	e04a      	b.n	80108a8 <_dtoa_r+0x6d8>
 8010812:	bf00      	nop
 8010814:	08013798 	.word	0x08013798
 8010818:	08013770 	.word	0x08013770
 801081c:	3ff00000 	.word	0x3ff00000
 8010820:	40240000 	.word	0x40240000
 8010824:	401c0000 	.word	0x401c0000
 8010828:	40140000 	.word	0x40140000
 801082c:	3fe00000 	.word	0x3fe00000
 8010830:	4baf      	ldr	r3, [pc, #700]	; (8010af0 <_dtoa_r+0x920>)
 8010832:	f7ef fee9 	bl	8000608 <__aeabi_dmul>
 8010836:	4606      	mov	r6, r0
 8010838:	460f      	mov	r7, r1
 801083a:	e7ac      	b.n	8010796 <_dtoa_r+0x5c6>
 801083c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010840:	9d00      	ldr	r5, [sp, #0]
 8010842:	4642      	mov	r2, r8
 8010844:	464b      	mov	r3, r9
 8010846:	4630      	mov	r0, r6
 8010848:	4639      	mov	r1, r7
 801084a:	f7f0 f807 	bl	800085c <__aeabi_ddiv>
 801084e:	f7f0 f98b 	bl	8000b68 <__aeabi_d2iz>
 8010852:	9002      	str	r0, [sp, #8]
 8010854:	f7ef fe6e 	bl	8000534 <__aeabi_i2d>
 8010858:	4642      	mov	r2, r8
 801085a:	464b      	mov	r3, r9
 801085c:	f7ef fed4 	bl	8000608 <__aeabi_dmul>
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	4630      	mov	r0, r6
 8010866:	4639      	mov	r1, r7
 8010868:	f7ef fd16 	bl	8000298 <__aeabi_dsub>
 801086c:	9e02      	ldr	r6, [sp, #8]
 801086e:	9f01      	ldr	r7, [sp, #4]
 8010870:	3630      	adds	r6, #48	; 0x30
 8010872:	f805 6b01 	strb.w	r6, [r5], #1
 8010876:	9e00      	ldr	r6, [sp, #0]
 8010878:	1bae      	subs	r6, r5, r6
 801087a:	42b7      	cmp	r7, r6
 801087c:	4602      	mov	r2, r0
 801087e:	460b      	mov	r3, r1
 8010880:	d137      	bne.n	80108f2 <_dtoa_r+0x722>
 8010882:	f7ef fd0b 	bl	800029c <__adddf3>
 8010886:	4642      	mov	r2, r8
 8010888:	464b      	mov	r3, r9
 801088a:	4606      	mov	r6, r0
 801088c:	460f      	mov	r7, r1
 801088e:	f7f0 f94b 	bl	8000b28 <__aeabi_dcmpgt>
 8010892:	b9c8      	cbnz	r0, 80108c8 <_dtoa_r+0x6f8>
 8010894:	4642      	mov	r2, r8
 8010896:	464b      	mov	r3, r9
 8010898:	4630      	mov	r0, r6
 801089a:	4639      	mov	r1, r7
 801089c:	f7f0 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80108a0:	b110      	cbz	r0, 80108a8 <_dtoa_r+0x6d8>
 80108a2:	9b02      	ldr	r3, [sp, #8]
 80108a4:	07d9      	lsls	r1, r3, #31
 80108a6:	d40f      	bmi.n	80108c8 <_dtoa_r+0x6f8>
 80108a8:	4620      	mov	r0, r4
 80108aa:	4659      	mov	r1, fp
 80108ac:	f000 fe5c 	bl	8011568 <_Bfree>
 80108b0:	2300      	movs	r3, #0
 80108b2:	702b      	strb	r3, [r5, #0]
 80108b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108b6:	f10a 0001 	add.w	r0, sl, #1
 80108ba:	6018      	str	r0, [r3, #0]
 80108bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f43f acd8 	beq.w	8010274 <_dtoa_r+0xa4>
 80108c4:	601d      	str	r5, [r3, #0]
 80108c6:	e4d5      	b.n	8010274 <_dtoa_r+0xa4>
 80108c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80108cc:	462b      	mov	r3, r5
 80108ce:	461d      	mov	r5, r3
 80108d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108d4:	2a39      	cmp	r2, #57	; 0x39
 80108d6:	d108      	bne.n	80108ea <_dtoa_r+0x71a>
 80108d8:	9a00      	ldr	r2, [sp, #0]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d1f7      	bne.n	80108ce <_dtoa_r+0x6fe>
 80108de:	9a07      	ldr	r2, [sp, #28]
 80108e0:	9900      	ldr	r1, [sp, #0]
 80108e2:	3201      	adds	r2, #1
 80108e4:	9207      	str	r2, [sp, #28]
 80108e6:	2230      	movs	r2, #48	; 0x30
 80108e8:	700a      	strb	r2, [r1, #0]
 80108ea:	781a      	ldrb	r2, [r3, #0]
 80108ec:	3201      	adds	r2, #1
 80108ee:	701a      	strb	r2, [r3, #0]
 80108f0:	e78c      	b.n	801080c <_dtoa_r+0x63c>
 80108f2:	4b7f      	ldr	r3, [pc, #508]	; (8010af0 <_dtoa_r+0x920>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	f7ef fe87 	bl	8000608 <__aeabi_dmul>
 80108fa:	2200      	movs	r2, #0
 80108fc:	2300      	movs	r3, #0
 80108fe:	4606      	mov	r6, r0
 8010900:	460f      	mov	r7, r1
 8010902:	f7f0 f8e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010906:	2800      	cmp	r0, #0
 8010908:	d09b      	beq.n	8010842 <_dtoa_r+0x672>
 801090a:	e7cd      	b.n	80108a8 <_dtoa_r+0x6d8>
 801090c:	9a08      	ldr	r2, [sp, #32]
 801090e:	2a00      	cmp	r2, #0
 8010910:	f000 80c4 	beq.w	8010a9c <_dtoa_r+0x8cc>
 8010914:	9a05      	ldr	r2, [sp, #20]
 8010916:	2a01      	cmp	r2, #1
 8010918:	f300 80a8 	bgt.w	8010a6c <_dtoa_r+0x89c>
 801091c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801091e:	2a00      	cmp	r2, #0
 8010920:	f000 80a0 	beq.w	8010a64 <_dtoa_r+0x894>
 8010924:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010928:	9e06      	ldr	r6, [sp, #24]
 801092a:	4645      	mov	r5, r8
 801092c:	9a04      	ldr	r2, [sp, #16]
 801092e:	2101      	movs	r1, #1
 8010930:	441a      	add	r2, r3
 8010932:	4620      	mov	r0, r4
 8010934:	4498      	add	r8, r3
 8010936:	9204      	str	r2, [sp, #16]
 8010938:	f000 ff1c 	bl	8011774 <__i2b>
 801093c:	4607      	mov	r7, r0
 801093e:	2d00      	cmp	r5, #0
 8010940:	dd0b      	ble.n	801095a <_dtoa_r+0x78a>
 8010942:	9b04      	ldr	r3, [sp, #16]
 8010944:	2b00      	cmp	r3, #0
 8010946:	dd08      	ble.n	801095a <_dtoa_r+0x78a>
 8010948:	42ab      	cmp	r3, r5
 801094a:	9a04      	ldr	r2, [sp, #16]
 801094c:	bfa8      	it	ge
 801094e:	462b      	movge	r3, r5
 8010950:	eba8 0803 	sub.w	r8, r8, r3
 8010954:	1aed      	subs	r5, r5, r3
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	9304      	str	r3, [sp, #16]
 801095a:	9b06      	ldr	r3, [sp, #24]
 801095c:	b1fb      	cbz	r3, 801099e <_dtoa_r+0x7ce>
 801095e:	9b08      	ldr	r3, [sp, #32]
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 809f 	beq.w	8010aa4 <_dtoa_r+0x8d4>
 8010966:	2e00      	cmp	r6, #0
 8010968:	dd11      	ble.n	801098e <_dtoa_r+0x7be>
 801096a:	4639      	mov	r1, r7
 801096c:	4632      	mov	r2, r6
 801096e:	4620      	mov	r0, r4
 8010970:	f000 ffbc 	bl	80118ec <__pow5mult>
 8010974:	465a      	mov	r2, fp
 8010976:	4601      	mov	r1, r0
 8010978:	4607      	mov	r7, r0
 801097a:	4620      	mov	r0, r4
 801097c:	f000 ff10 	bl	80117a0 <__multiply>
 8010980:	4659      	mov	r1, fp
 8010982:	9007      	str	r0, [sp, #28]
 8010984:	4620      	mov	r0, r4
 8010986:	f000 fdef 	bl	8011568 <_Bfree>
 801098a:	9b07      	ldr	r3, [sp, #28]
 801098c:	469b      	mov	fp, r3
 801098e:	9b06      	ldr	r3, [sp, #24]
 8010990:	1b9a      	subs	r2, r3, r6
 8010992:	d004      	beq.n	801099e <_dtoa_r+0x7ce>
 8010994:	4659      	mov	r1, fp
 8010996:	4620      	mov	r0, r4
 8010998:	f000 ffa8 	bl	80118ec <__pow5mult>
 801099c:	4683      	mov	fp, r0
 801099e:	2101      	movs	r1, #1
 80109a0:	4620      	mov	r0, r4
 80109a2:	f000 fee7 	bl	8011774 <__i2b>
 80109a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	4606      	mov	r6, r0
 80109ac:	dd7c      	ble.n	8010aa8 <_dtoa_r+0x8d8>
 80109ae:	461a      	mov	r2, r3
 80109b0:	4601      	mov	r1, r0
 80109b2:	4620      	mov	r0, r4
 80109b4:	f000 ff9a 	bl	80118ec <__pow5mult>
 80109b8:	9b05      	ldr	r3, [sp, #20]
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	4606      	mov	r6, r0
 80109be:	dd76      	ble.n	8010aae <_dtoa_r+0x8de>
 80109c0:	2300      	movs	r3, #0
 80109c2:	9306      	str	r3, [sp, #24]
 80109c4:	6933      	ldr	r3, [r6, #16]
 80109c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80109ca:	6918      	ldr	r0, [r3, #16]
 80109cc:	f000 fe82 	bl	80116d4 <__hi0bits>
 80109d0:	f1c0 0020 	rsb	r0, r0, #32
 80109d4:	9b04      	ldr	r3, [sp, #16]
 80109d6:	4418      	add	r0, r3
 80109d8:	f010 001f 	ands.w	r0, r0, #31
 80109dc:	f000 8086 	beq.w	8010aec <_dtoa_r+0x91c>
 80109e0:	f1c0 0320 	rsb	r3, r0, #32
 80109e4:	2b04      	cmp	r3, #4
 80109e6:	dd7f      	ble.n	8010ae8 <_dtoa_r+0x918>
 80109e8:	f1c0 001c 	rsb	r0, r0, #28
 80109ec:	9b04      	ldr	r3, [sp, #16]
 80109ee:	4403      	add	r3, r0
 80109f0:	4480      	add	r8, r0
 80109f2:	4405      	add	r5, r0
 80109f4:	9304      	str	r3, [sp, #16]
 80109f6:	f1b8 0f00 	cmp.w	r8, #0
 80109fa:	dd05      	ble.n	8010a08 <_dtoa_r+0x838>
 80109fc:	4659      	mov	r1, fp
 80109fe:	4642      	mov	r2, r8
 8010a00:	4620      	mov	r0, r4
 8010a02:	f000 ffcd 	bl	80119a0 <__lshift>
 8010a06:	4683      	mov	fp, r0
 8010a08:	9b04      	ldr	r3, [sp, #16]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	dd05      	ble.n	8010a1a <_dtoa_r+0x84a>
 8010a0e:	4631      	mov	r1, r6
 8010a10:	461a      	mov	r2, r3
 8010a12:	4620      	mov	r0, r4
 8010a14:	f000 ffc4 	bl	80119a0 <__lshift>
 8010a18:	4606      	mov	r6, r0
 8010a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d069      	beq.n	8010af4 <_dtoa_r+0x924>
 8010a20:	4631      	mov	r1, r6
 8010a22:	4658      	mov	r0, fp
 8010a24:	f001 f828 	bl	8011a78 <__mcmp>
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	da63      	bge.n	8010af4 <_dtoa_r+0x924>
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	4659      	mov	r1, fp
 8010a30:	220a      	movs	r2, #10
 8010a32:	4620      	mov	r0, r4
 8010a34:	f000 fdba 	bl	80115ac <__multadd>
 8010a38:	9b08      	ldr	r3, [sp, #32]
 8010a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a3e:	4683      	mov	fp, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 818f 	beq.w	8010d64 <_dtoa_r+0xb94>
 8010a46:	4639      	mov	r1, r7
 8010a48:	2300      	movs	r3, #0
 8010a4a:	220a      	movs	r2, #10
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	f000 fdad 	bl	80115ac <__multadd>
 8010a52:	f1b9 0f00 	cmp.w	r9, #0
 8010a56:	4607      	mov	r7, r0
 8010a58:	f300 808e 	bgt.w	8010b78 <_dtoa_r+0x9a8>
 8010a5c:	9b05      	ldr	r3, [sp, #20]
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	dc50      	bgt.n	8010b04 <_dtoa_r+0x934>
 8010a62:	e089      	b.n	8010b78 <_dtoa_r+0x9a8>
 8010a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a6a:	e75d      	b.n	8010928 <_dtoa_r+0x758>
 8010a6c:	9b01      	ldr	r3, [sp, #4]
 8010a6e:	1e5e      	subs	r6, r3, #1
 8010a70:	9b06      	ldr	r3, [sp, #24]
 8010a72:	42b3      	cmp	r3, r6
 8010a74:	bfbf      	itttt	lt
 8010a76:	9b06      	ldrlt	r3, [sp, #24]
 8010a78:	9606      	strlt	r6, [sp, #24]
 8010a7a:	1af2      	sublt	r2, r6, r3
 8010a7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010a7e:	bfb6      	itet	lt
 8010a80:	189b      	addlt	r3, r3, r2
 8010a82:	1b9e      	subge	r6, r3, r6
 8010a84:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010a86:	9b01      	ldr	r3, [sp, #4]
 8010a88:	bfb8      	it	lt
 8010a8a:	2600      	movlt	r6, #0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	bfb5      	itete	lt
 8010a90:	eba8 0503 	sublt.w	r5, r8, r3
 8010a94:	9b01      	ldrge	r3, [sp, #4]
 8010a96:	2300      	movlt	r3, #0
 8010a98:	4645      	movge	r5, r8
 8010a9a:	e747      	b.n	801092c <_dtoa_r+0x75c>
 8010a9c:	9e06      	ldr	r6, [sp, #24]
 8010a9e:	9f08      	ldr	r7, [sp, #32]
 8010aa0:	4645      	mov	r5, r8
 8010aa2:	e74c      	b.n	801093e <_dtoa_r+0x76e>
 8010aa4:	9a06      	ldr	r2, [sp, #24]
 8010aa6:	e775      	b.n	8010994 <_dtoa_r+0x7c4>
 8010aa8:	9b05      	ldr	r3, [sp, #20]
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	dc18      	bgt.n	8010ae0 <_dtoa_r+0x910>
 8010aae:	9b02      	ldr	r3, [sp, #8]
 8010ab0:	b9b3      	cbnz	r3, 8010ae0 <_dtoa_r+0x910>
 8010ab2:	9b03      	ldr	r3, [sp, #12]
 8010ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ab8:	b9a3      	cbnz	r3, 8010ae4 <_dtoa_r+0x914>
 8010aba:	9b03      	ldr	r3, [sp, #12]
 8010abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ac0:	0d1b      	lsrs	r3, r3, #20
 8010ac2:	051b      	lsls	r3, r3, #20
 8010ac4:	b12b      	cbz	r3, 8010ad2 <_dtoa_r+0x902>
 8010ac6:	9b04      	ldr	r3, [sp, #16]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	9304      	str	r3, [sp, #16]
 8010acc:	f108 0801 	add.w	r8, r8, #1
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	9306      	str	r3, [sp, #24]
 8010ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f47f af74 	bne.w	80109c4 <_dtoa_r+0x7f4>
 8010adc:	2001      	movs	r0, #1
 8010ade:	e779      	b.n	80109d4 <_dtoa_r+0x804>
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	e7f6      	b.n	8010ad2 <_dtoa_r+0x902>
 8010ae4:	9b02      	ldr	r3, [sp, #8]
 8010ae6:	e7f4      	b.n	8010ad2 <_dtoa_r+0x902>
 8010ae8:	d085      	beq.n	80109f6 <_dtoa_r+0x826>
 8010aea:	4618      	mov	r0, r3
 8010aec:	301c      	adds	r0, #28
 8010aee:	e77d      	b.n	80109ec <_dtoa_r+0x81c>
 8010af0:	40240000 	.word	0x40240000
 8010af4:	9b01      	ldr	r3, [sp, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	dc38      	bgt.n	8010b6c <_dtoa_r+0x99c>
 8010afa:	9b05      	ldr	r3, [sp, #20]
 8010afc:	2b02      	cmp	r3, #2
 8010afe:	dd35      	ble.n	8010b6c <_dtoa_r+0x99c>
 8010b00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010b04:	f1b9 0f00 	cmp.w	r9, #0
 8010b08:	d10d      	bne.n	8010b26 <_dtoa_r+0x956>
 8010b0a:	4631      	mov	r1, r6
 8010b0c:	464b      	mov	r3, r9
 8010b0e:	2205      	movs	r2, #5
 8010b10:	4620      	mov	r0, r4
 8010b12:	f000 fd4b 	bl	80115ac <__multadd>
 8010b16:	4601      	mov	r1, r0
 8010b18:	4606      	mov	r6, r0
 8010b1a:	4658      	mov	r0, fp
 8010b1c:	f000 ffac 	bl	8011a78 <__mcmp>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	f73f adbd 	bgt.w	80106a0 <_dtoa_r+0x4d0>
 8010b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b28:	9d00      	ldr	r5, [sp, #0]
 8010b2a:	ea6f 0a03 	mvn.w	sl, r3
 8010b2e:	f04f 0800 	mov.w	r8, #0
 8010b32:	4631      	mov	r1, r6
 8010b34:	4620      	mov	r0, r4
 8010b36:	f000 fd17 	bl	8011568 <_Bfree>
 8010b3a:	2f00      	cmp	r7, #0
 8010b3c:	f43f aeb4 	beq.w	80108a8 <_dtoa_r+0x6d8>
 8010b40:	f1b8 0f00 	cmp.w	r8, #0
 8010b44:	d005      	beq.n	8010b52 <_dtoa_r+0x982>
 8010b46:	45b8      	cmp	r8, r7
 8010b48:	d003      	beq.n	8010b52 <_dtoa_r+0x982>
 8010b4a:	4641      	mov	r1, r8
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f000 fd0b 	bl	8011568 <_Bfree>
 8010b52:	4639      	mov	r1, r7
 8010b54:	4620      	mov	r0, r4
 8010b56:	f000 fd07 	bl	8011568 <_Bfree>
 8010b5a:	e6a5      	b.n	80108a8 <_dtoa_r+0x6d8>
 8010b5c:	2600      	movs	r6, #0
 8010b5e:	4637      	mov	r7, r6
 8010b60:	e7e1      	b.n	8010b26 <_dtoa_r+0x956>
 8010b62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010b64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010b68:	4637      	mov	r7, r6
 8010b6a:	e599      	b.n	80106a0 <_dtoa_r+0x4d0>
 8010b6c:	9b08      	ldr	r3, [sp, #32]
 8010b6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f000 80fd 	beq.w	8010d72 <_dtoa_r+0xba2>
 8010b78:	2d00      	cmp	r5, #0
 8010b7a:	dd05      	ble.n	8010b88 <_dtoa_r+0x9b8>
 8010b7c:	4639      	mov	r1, r7
 8010b7e:	462a      	mov	r2, r5
 8010b80:	4620      	mov	r0, r4
 8010b82:	f000 ff0d 	bl	80119a0 <__lshift>
 8010b86:	4607      	mov	r7, r0
 8010b88:	9b06      	ldr	r3, [sp, #24]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d05c      	beq.n	8010c48 <_dtoa_r+0xa78>
 8010b8e:	6879      	ldr	r1, [r7, #4]
 8010b90:	4620      	mov	r0, r4
 8010b92:	f000 fca9 	bl	80114e8 <_Balloc>
 8010b96:	4605      	mov	r5, r0
 8010b98:	b928      	cbnz	r0, 8010ba6 <_dtoa_r+0x9d6>
 8010b9a:	4b80      	ldr	r3, [pc, #512]	; (8010d9c <_dtoa_r+0xbcc>)
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010ba2:	f7ff bb2e 	b.w	8010202 <_dtoa_r+0x32>
 8010ba6:	693a      	ldr	r2, [r7, #16]
 8010ba8:	3202      	adds	r2, #2
 8010baa:	0092      	lsls	r2, r2, #2
 8010bac:	f107 010c 	add.w	r1, r7, #12
 8010bb0:	300c      	adds	r0, #12
 8010bb2:	f7fd fe89 	bl	800e8c8 <memcpy>
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	4629      	mov	r1, r5
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f000 fef0 	bl	80119a0 <__lshift>
 8010bc0:	9b00      	ldr	r3, [sp, #0]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	9301      	str	r3, [sp, #4]
 8010bc6:	9b00      	ldr	r3, [sp, #0]
 8010bc8:	444b      	add	r3, r9
 8010bca:	9307      	str	r3, [sp, #28]
 8010bcc:	9b02      	ldr	r3, [sp, #8]
 8010bce:	f003 0301 	and.w	r3, r3, #1
 8010bd2:	46b8      	mov	r8, r7
 8010bd4:	9306      	str	r3, [sp, #24]
 8010bd6:	4607      	mov	r7, r0
 8010bd8:	9b01      	ldr	r3, [sp, #4]
 8010bda:	4631      	mov	r1, r6
 8010bdc:	3b01      	subs	r3, #1
 8010bde:	4658      	mov	r0, fp
 8010be0:	9302      	str	r3, [sp, #8]
 8010be2:	f7ff fa67 	bl	80100b4 <quorem>
 8010be6:	4603      	mov	r3, r0
 8010be8:	3330      	adds	r3, #48	; 0x30
 8010bea:	9004      	str	r0, [sp, #16]
 8010bec:	4641      	mov	r1, r8
 8010bee:	4658      	mov	r0, fp
 8010bf0:	9308      	str	r3, [sp, #32]
 8010bf2:	f000 ff41 	bl	8011a78 <__mcmp>
 8010bf6:	463a      	mov	r2, r7
 8010bf8:	4681      	mov	r9, r0
 8010bfa:	4631      	mov	r1, r6
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f000 ff57 	bl	8011ab0 <__mdiff>
 8010c02:	68c2      	ldr	r2, [r0, #12]
 8010c04:	9b08      	ldr	r3, [sp, #32]
 8010c06:	4605      	mov	r5, r0
 8010c08:	bb02      	cbnz	r2, 8010c4c <_dtoa_r+0xa7c>
 8010c0a:	4601      	mov	r1, r0
 8010c0c:	4658      	mov	r0, fp
 8010c0e:	f000 ff33 	bl	8011a78 <__mcmp>
 8010c12:	9b08      	ldr	r3, [sp, #32]
 8010c14:	4602      	mov	r2, r0
 8010c16:	4629      	mov	r1, r5
 8010c18:	4620      	mov	r0, r4
 8010c1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010c1e:	f000 fca3 	bl	8011568 <_Bfree>
 8010c22:	9b05      	ldr	r3, [sp, #20]
 8010c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c26:	9d01      	ldr	r5, [sp, #4]
 8010c28:	ea43 0102 	orr.w	r1, r3, r2
 8010c2c:	9b06      	ldr	r3, [sp, #24]
 8010c2e:	430b      	orrs	r3, r1
 8010c30:	9b08      	ldr	r3, [sp, #32]
 8010c32:	d10d      	bne.n	8010c50 <_dtoa_r+0xa80>
 8010c34:	2b39      	cmp	r3, #57	; 0x39
 8010c36:	d029      	beq.n	8010c8c <_dtoa_r+0xabc>
 8010c38:	f1b9 0f00 	cmp.w	r9, #0
 8010c3c:	dd01      	ble.n	8010c42 <_dtoa_r+0xa72>
 8010c3e:	9b04      	ldr	r3, [sp, #16]
 8010c40:	3331      	adds	r3, #49	; 0x31
 8010c42:	9a02      	ldr	r2, [sp, #8]
 8010c44:	7013      	strb	r3, [r2, #0]
 8010c46:	e774      	b.n	8010b32 <_dtoa_r+0x962>
 8010c48:	4638      	mov	r0, r7
 8010c4a:	e7b9      	b.n	8010bc0 <_dtoa_r+0x9f0>
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	e7e2      	b.n	8010c16 <_dtoa_r+0xa46>
 8010c50:	f1b9 0f00 	cmp.w	r9, #0
 8010c54:	db06      	blt.n	8010c64 <_dtoa_r+0xa94>
 8010c56:	9905      	ldr	r1, [sp, #20]
 8010c58:	ea41 0909 	orr.w	r9, r1, r9
 8010c5c:	9906      	ldr	r1, [sp, #24]
 8010c5e:	ea59 0101 	orrs.w	r1, r9, r1
 8010c62:	d120      	bne.n	8010ca6 <_dtoa_r+0xad6>
 8010c64:	2a00      	cmp	r2, #0
 8010c66:	ddec      	ble.n	8010c42 <_dtoa_r+0xa72>
 8010c68:	4659      	mov	r1, fp
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	9301      	str	r3, [sp, #4]
 8010c70:	f000 fe96 	bl	80119a0 <__lshift>
 8010c74:	4631      	mov	r1, r6
 8010c76:	4683      	mov	fp, r0
 8010c78:	f000 fefe 	bl	8011a78 <__mcmp>
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	9b01      	ldr	r3, [sp, #4]
 8010c80:	dc02      	bgt.n	8010c88 <_dtoa_r+0xab8>
 8010c82:	d1de      	bne.n	8010c42 <_dtoa_r+0xa72>
 8010c84:	07da      	lsls	r2, r3, #31
 8010c86:	d5dc      	bpl.n	8010c42 <_dtoa_r+0xa72>
 8010c88:	2b39      	cmp	r3, #57	; 0x39
 8010c8a:	d1d8      	bne.n	8010c3e <_dtoa_r+0xa6e>
 8010c8c:	9a02      	ldr	r2, [sp, #8]
 8010c8e:	2339      	movs	r3, #57	; 0x39
 8010c90:	7013      	strb	r3, [r2, #0]
 8010c92:	462b      	mov	r3, r5
 8010c94:	461d      	mov	r5, r3
 8010c96:	3b01      	subs	r3, #1
 8010c98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010c9c:	2a39      	cmp	r2, #57	; 0x39
 8010c9e:	d050      	beq.n	8010d42 <_dtoa_r+0xb72>
 8010ca0:	3201      	adds	r2, #1
 8010ca2:	701a      	strb	r2, [r3, #0]
 8010ca4:	e745      	b.n	8010b32 <_dtoa_r+0x962>
 8010ca6:	2a00      	cmp	r2, #0
 8010ca8:	dd03      	ble.n	8010cb2 <_dtoa_r+0xae2>
 8010caa:	2b39      	cmp	r3, #57	; 0x39
 8010cac:	d0ee      	beq.n	8010c8c <_dtoa_r+0xabc>
 8010cae:	3301      	adds	r3, #1
 8010cb0:	e7c7      	b.n	8010c42 <_dtoa_r+0xa72>
 8010cb2:	9a01      	ldr	r2, [sp, #4]
 8010cb4:	9907      	ldr	r1, [sp, #28]
 8010cb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010cba:	428a      	cmp	r2, r1
 8010cbc:	d02a      	beq.n	8010d14 <_dtoa_r+0xb44>
 8010cbe:	4659      	mov	r1, fp
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	220a      	movs	r2, #10
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f000 fc71 	bl	80115ac <__multadd>
 8010cca:	45b8      	cmp	r8, r7
 8010ccc:	4683      	mov	fp, r0
 8010cce:	f04f 0300 	mov.w	r3, #0
 8010cd2:	f04f 020a 	mov.w	r2, #10
 8010cd6:	4641      	mov	r1, r8
 8010cd8:	4620      	mov	r0, r4
 8010cda:	d107      	bne.n	8010cec <_dtoa_r+0xb1c>
 8010cdc:	f000 fc66 	bl	80115ac <__multadd>
 8010ce0:	4680      	mov	r8, r0
 8010ce2:	4607      	mov	r7, r0
 8010ce4:	9b01      	ldr	r3, [sp, #4]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	9301      	str	r3, [sp, #4]
 8010cea:	e775      	b.n	8010bd8 <_dtoa_r+0xa08>
 8010cec:	f000 fc5e 	bl	80115ac <__multadd>
 8010cf0:	4639      	mov	r1, r7
 8010cf2:	4680      	mov	r8, r0
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	220a      	movs	r2, #10
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f000 fc57 	bl	80115ac <__multadd>
 8010cfe:	4607      	mov	r7, r0
 8010d00:	e7f0      	b.n	8010ce4 <_dtoa_r+0xb14>
 8010d02:	f1b9 0f00 	cmp.w	r9, #0
 8010d06:	9a00      	ldr	r2, [sp, #0]
 8010d08:	bfcc      	ite	gt
 8010d0a:	464d      	movgt	r5, r9
 8010d0c:	2501      	movle	r5, #1
 8010d0e:	4415      	add	r5, r2
 8010d10:	f04f 0800 	mov.w	r8, #0
 8010d14:	4659      	mov	r1, fp
 8010d16:	2201      	movs	r2, #1
 8010d18:	4620      	mov	r0, r4
 8010d1a:	9301      	str	r3, [sp, #4]
 8010d1c:	f000 fe40 	bl	80119a0 <__lshift>
 8010d20:	4631      	mov	r1, r6
 8010d22:	4683      	mov	fp, r0
 8010d24:	f000 fea8 	bl	8011a78 <__mcmp>
 8010d28:	2800      	cmp	r0, #0
 8010d2a:	dcb2      	bgt.n	8010c92 <_dtoa_r+0xac2>
 8010d2c:	d102      	bne.n	8010d34 <_dtoa_r+0xb64>
 8010d2e:	9b01      	ldr	r3, [sp, #4]
 8010d30:	07db      	lsls	r3, r3, #31
 8010d32:	d4ae      	bmi.n	8010c92 <_dtoa_r+0xac2>
 8010d34:	462b      	mov	r3, r5
 8010d36:	461d      	mov	r5, r3
 8010d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d3c:	2a30      	cmp	r2, #48	; 0x30
 8010d3e:	d0fa      	beq.n	8010d36 <_dtoa_r+0xb66>
 8010d40:	e6f7      	b.n	8010b32 <_dtoa_r+0x962>
 8010d42:	9a00      	ldr	r2, [sp, #0]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d1a5      	bne.n	8010c94 <_dtoa_r+0xac4>
 8010d48:	f10a 0a01 	add.w	sl, sl, #1
 8010d4c:	2331      	movs	r3, #49	; 0x31
 8010d4e:	e779      	b.n	8010c44 <_dtoa_r+0xa74>
 8010d50:	4b13      	ldr	r3, [pc, #76]	; (8010da0 <_dtoa_r+0xbd0>)
 8010d52:	f7ff baaf 	b.w	80102b4 <_dtoa_r+0xe4>
 8010d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f47f aa86 	bne.w	801026a <_dtoa_r+0x9a>
 8010d5e:	4b11      	ldr	r3, [pc, #68]	; (8010da4 <_dtoa_r+0xbd4>)
 8010d60:	f7ff baa8 	b.w	80102b4 <_dtoa_r+0xe4>
 8010d64:	f1b9 0f00 	cmp.w	r9, #0
 8010d68:	dc03      	bgt.n	8010d72 <_dtoa_r+0xba2>
 8010d6a:	9b05      	ldr	r3, [sp, #20]
 8010d6c:	2b02      	cmp	r3, #2
 8010d6e:	f73f aec9 	bgt.w	8010b04 <_dtoa_r+0x934>
 8010d72:	9d00      	ldr	r5, [sp, #0]
 8010d74:	4631      	mov	r1, r6
 8010d76:	4658      	mov	r0, fp
 8010d78:	f7ff f99c 	bl	80100b4 <quorem>
 8010d7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010d80:	f805 3b01 	strb.w	r3, [r5], #1
 8010d84:	9a00      	ldr	r2, [sp, #0]
 8010d86:	1aaa      	subs	r2, r5, r2
 8010d88:	4591      	cmp	r9, r2
 8010d8a:	ddba      	ble.n	8010d02 <_dtoa_r+0xb32>
 8010d8c:	4659      	mov	r1, fp
 8010d8e:	2300      	movs	r3, #0
 8010d90:	220a      	movs	r2, #10
 8010d92:	4620      	mov	r0, r4
 8010d94:	f000 fc0a 	bl	80115ac <__multadd>
 8010d98:	4683      	mov	fp, r0
 8010d9a:	e7eb      	b.n	8010d74 <_dtoa_r+0xba4>
 8010d9c:	08013680 	.word	0x08013680
 8010da0:	080134ec 	.word	0x080134ec
 8010da4:	08013614 	.word	0x08013614

08010da8 <fiprintf>:
 8010da8:	b40e      	push	{r1, r2, r3}
 8010daa:	b503      	push	{r0, r1, lr}
 8010dac:	4601      	mov	r1, r0
 8010dae:	ab03      	add	r3, sp, #12
 8010db0:	4805      	ldr	r0, [pc, #20]	; (8010dc8 <fiprintf+0x20>)
 8010db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010db6:	6800      	ldr	r0, [r0, #0]
 8010db8:	9301      	str	r3, [sp, #4]
 8010dba:	f001 fa8f 	bl	80122dc <_vfiprintf_r>
 8010dbe:	b002      	add	sp, #8
 8010dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dc4:	b003      	add	sp, #12
 8010dc6:	4770      	bx	lr
 8010dc8:	20000028 	.word	0x20000028

08010dcc <rshift>:
 8010dcc:	6903      	ldr	r3, [r0, #16]
 8010dce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010dda:	f100 0414 	add.w	r4, r0, #20
 8010dde:	dd45      	ble.n	8010e6c <rshift+0xa0>
 8010de0:	f011 011f 	ands.w	r1, r1, #31
 8010de4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010de8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010dec:	d10c      	bne.n	8010e08 <rshift+0x3c>
 8010dee:	f100 0710 	add.w	r7, r0, #16
 8010df2:	4629      	mov	r1, r5
 8010df4:	42b1      	cmp	r1, r6
 8010df6:	d334      	bcc.n	8010e62 <rshift+0x96>
 8010df8:	1a9b      	subs	r3, r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	1eea      	subs	r2, r5, #3
 8010dfe:	4296      	cmp	r6, r2
 8010e00:	bf38      	it	cc
 8010e02:	2300      	movcc	r3, #0
 8010e04:	4423      	add	r3, r4
 8010e06:	e015      	b.n	8010e34 <rshift+0x68>
 8010e08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e0c:	f1c1 0820 	rsb	r8, r1, #32
 8010e10:	40cf      	lsrs	r7, r1
 8010e12:	f105 0e04 	add.w	lr, r5, #4
 8010e16:	46a1      	mov	r9, r4
 8010e18:	4576      	cmp	r6, lr
 8010e1a:	46f4      	mov	ip, lr
 8010e1c:	d815      	bhi.n	8010e4a <rshift+0x7e>
 8010e1e:	1a9b      	subs	r3, r3, r2
 8010e20:	009a      	lsls	r2, r3, #2
 8010e22:	3a04      	subs	r2, #4
 8010e24:	3501      	adds	r5, #1
 8010e26:	42ae      	cmp	r6, r5
 8010e28:	bf38      	it	cc
 8010e2a:	2200      	movcc	r2, #0
 8010e2c:	18a3      	adds	r3, r4, r2
 8010e2e:	50a7      	str	r7, [r4, r2]
 8010e30:	b107      	cbz	r7, 8010e34 <rshift+0x68>
 8010e32:	3304      	adds	r3, #4
 8010e34:	1b1a      	subs	r2, r3, r4
 8010e36:	42a3      	cmp	r3, r4
 8010e38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e3c:	bf08      	it	eq
 8010e3e:	2300      	moveq	r3, #0
 8010e40:	6102      	str	r2, [r0, #16]
 8010e42:	bf08      	it	eq
 8010e44:	6143      	streq	r3, [r0, #20]
 8010e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e4a:	f8dc c000 	ldr.w	ip, [ip]
 8010e4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e52:	ea4c 0707 	orr.w	r7, ip, r7
 8010e56:	f849 7b04 	str.w	r7, [r9], #4
 8010e5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e5e:	40cf      	lsrs	r7, r1
 8010e60:	e7da      	b.n	8010e18 <rshift+0x4c>
 8010e62:	f851 cb04 	ldr.w	ip, [r1], #4
 8010e66:	f847 cf04 	str.w	ip, [r7, #4]!
 8010e6a:	e7c3      	b.n	8010df4 <rshift+0x28>
 8010e6c:	4623      	mov	r3, r4
 8010e6e:	e7e1      	b.n	8010e34 <rshift+0x68>

08010e70 <__hexdig_fun>:
 8010e70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010e74:	2b09      	cmp	r3, #9
 8010e76:	d802      	bhi.n	8010e7e <__hexdig_fun+0xe>
 8010e78:	3820      	subs	r0, #32
 8010e7a:	b2c0      	uxtb	r0, r0
 8010e7c:	4770      	bx	lr
 8010e7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010e82:	2b05      	cmp	r3, #5
 8010e84:	d801      	bhi.n	8010e8a <__hexdig_fun+0x1a>
 8010e86:	3847      	subs	r0, #71	; 0x47
 8010e88:	e7f7      	b.n	8010e7a <__hexdig_fun+0xa>
 8010e8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010e8e:	2b05      	cmp	r3, #5
 8010e90:	d801      	bhi.n	8010e96 <__hexdig_fun+0x26>
 8010e92:	3827      	subs	r0, #39	; 0x27
 8010e94:	e7f1      	b.n	8010e7a <__hexdig_fun+0xa>
 8010e96:	2000      	movs	r0, #0
 8010e98:	4770      	bx	lr
	...

08010e9c <__gethex>:
 8010e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	ed2d 8b02 	vpush	{d8}
 8010ea4:	b089      	sub	sp, #36	; 0x24
 8010ea6:	ee08 0a10 	vmov	s16, r0
 8010eaa:	9304      	str	r3, [sp, #16]
 8010eac:	4bbc      	ldr	r3, [pc, #752]	; (80111a0 <__gethex+0x304>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	9301      	str	r3, [sp, #4]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	468b      	mov	fp, r1
 8010eb6:	4690      	mov	r8, r2
 8010eb8:	f7ef f992 	bl	80001e0 <strlen>
 8010ebc:	9b01      	ldr	r3, [sp, #4]
 8010ebe:	f8db 2000 	ldr.w	r2, [fp]
 8010ec2:	4403      	add	r3, r0
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010eca:	9305      	str	r3, [sp, #20]
 8010ecc:	1c93      	adds	r3, r2, #2
 8010ece:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010ed2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010ed6:	32fe      	adds	r2, #254	; 0xfe
 8010ed8:	18d1      	adds	r1, r2, r3
 8010eda:	461f      	mov	r7, r3
 8010edc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ee0:	9100      	str	r1, [sp, #0]
 8010ee2:	2830      	cmp	r0, #48	; 0x30
 8010ee4:	d0f8      	beq.n	8010ed8 <__gethex+0x3c>
 8010ee6:	f7ff ffc3 	bl	8010e70 <__hexdig_fun>
 8010eea:	4604      	mov	r4, r0
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d13a      	bne.n	8010f66 <__gethex+0xca>
 8010ef0:	9901      	ldr	r1, [sp, #4]
 8010ef2:	4652      	mov	r2, sl
 8010ef4:	4638      	mov	r0, r7
 8010ef6:	f001 fb3b 	bl	8012570 <strncmp>
 8010efa:	4605      	mov	r5, r0
 8010efc:	2800      	cmp	r0, #0
 8010efe:	d168      	bne.n	8010fd2 <__gethex+0x136>
 8010f00:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010f04:	eb07 060a 	add.w	r6, r7, sl
 8010f08:	f7ff ffb2 	bl	8010e70 <__hexdig_fun>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d062      	beq.n	8010fd6 <__gethex+0x13a>
 8010f10:	4633      	mov	r3, r6
 8010f12:	7818      	ldrb	r0, [r3, #0]
 8010f14:	2830      	cmp	r0, #48	; 0x30
 8010f16:	461f      	mov	r7, r3
 8010f18:	f103 0301 	add.w	r3, r3, #1
 8010f1c:	d0f9      	beq.n	8010f12 <__gethex+0x76>
 8010f1e:	f7ff ffa7 	bl	8010e70 <__hexdig_fun>
 8010f22:	2301      	movs	r3, #1
 8010f24:	fab0 f480 	clz	r4, r0
 8010f28:	0964      	lsrs	r4, r4, #5
 8010f2a:	4635      	mov	r5, r6
 8010f2c:	9300      	str	r3, [sp, #0]
 8010f2e:	463a      	mov	r2, r7
 8010f30:	4616      	mov	r6, r2
 8010f32:	3201      	adds	r2, #1
 8010f34:	7830      	ldrb	r0, [r6, #0]
 8010f36:	f7ff ff9b 	bl	8010e70 <__hexdig_fun>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d1f8      	bne.n	8010f30 <__gethex+0x94>
 8010f3e:	9901      	ldr	r1, [sp, #4]
 8010f40:	4652      	mov	r2, sl
 8010f42:	4630      	mov	r0, r6
 8010f44:	f001 fb14 	bl	8012570 <strncmp>
 8010f48:	b980      	cbnz	r0, 8010f6c <__gethex+0xd0>
 8010f4a:	b94d      	cbnz	r5, 8010f60 <__gethex+0xc4>
 8010f4c:	eb06 050a 	add.w	r5, r6, sl
 8010f50:	462a      	mov	r2, r5
 8010f52:	4616      	mov	r6, r2
 8010f54:	3201      	adds	r2, #1
 8010f56:	7830      	ldrb	r0, [r6, #0]
 8010f58:	f7ff ff8a 	bl	8010e70 <__hexdig_fun>
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	d1f8      	bne.n	8010f52 <__gethex+0xb6>
 8010f60:	1bad      	subs	r5, r5, r6
 8010f62:	00ad      	lsls	r5, r5, #2
 8010f64:	e004      	b.n	8010f70 <__gethex+0xd4>
 8010f66:	2400      	movs	r4, #0
 8010f68:	4625      	mov	r5, r4
 8010f6a:	e7e0      	b.n	8010f2e <__gethex+0x92>
 8010f6c:	2d00      	cmp	r5, #0
 8010f6e:	d1f7      	bne.n	8010f60 <__gethex+0xc4>
 8010f70:	7833      	ldrb	r3, [r6, #0]
 8010f72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010f76:	2b50      	cmp	r3, #80	; 0x50
 8010f78:	d13b      	bne.n	8010ff2 <__gethex+0x156>
 8010f7a:	7873      	ldrb	r3, [r6, #1]
 8010f7c:	2b2b      	cmp	r3, #43	; 0x2b
 8010f7e:	d02c      	beq.n	8010fda <__gethex+0x13e>
 8010f80:	2b2d      	cmp	r3, #45	; 0x2d
 8010f82:	d02e      	beq.n	8010fe2 <__gethex+0x146>
 8010f84:	1c71      	adds	r1, r6, #1
 8010f86:	f04f 0900 	mov.w	r9, #0
 8010f8a:	7808      	ldrb	r0, [r1, #0]
 8010f8c:	f7ff ff70 	bl	8010e70 <__hexdig_fun>
 8010f90:	1e43      	subs	r3, r0, #1
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	2b18      	cmp	r3, #24
 8010f96:	d82c      	bhi.n	8010ff2 <__gethex+0x156>
 8010f98:	f1a0 0210 	sub.w	r2, r0, #16
 8010f9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fa0:	f7ff ff66 	bl	8010e70 <__hexdig_fun>
 8010fa4:	1e43      	subs	r3, r0, #1
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	2b18      	cmp	r3, #24
 8010faa:	d91d      	bls.n	8010fe8 <__gethex+0x14c>
 8010fac:	f1b9 0f00 	cmp.w	r9, #0
 8010fb0:	d000      	beq.n	8010fb4 <__gethex+0x118>
 8010fb2:	4252      	negs	r2, r2
 8010fb4:	4415      	add	r5, r2
 8010fb6:	f8cb 1000 	str.w	r1, [fp]
 8010fba:	b1e4      	cbz	r4, 8010ff6 <__gethex+0x15a>
 8010fbc:	9b00      	ldr	r3, [sp, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	bf14      	ite	ne
 8010fc2:	2700      	movne	r7, #0
 8010fc4:	2706      	moveq	r7, #6
 8010fc6:	4638      	mov	r0, r7
 8010fc8:	b009      	add	sp, #36	; 0x24
 8010fca:	ecbd 8b02 	vpop	{d8}
 8010fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd2:	463e      	mov	r6, r7
 8010fd4:	4625      	mov	r5, r4
 8010fd6:	2401      	movs	r4, #1
 8010fd8:	e7ca      	b.n	8010f70 <__gethex+0xd4>
 8010fda:	f04f 0900 	mov.w	r9, #0
 8010fde:	1cb1      	adds	r1, r6, #2
 8010fe0:	e7d3      	b.n	8010f8a <__gethex+0xee>
 8010fe2:	f04f 0901 	mov.w	r9, #1
 8010fe6:	e7fa      	b.n	8010fde <__gethex+0x142>
 8010fe8:	230a      	movs	r3, #10
 8010fea:	fb03 0202 	mla	r2, r3, r2, r0
 8010fee:	3a10      	subs	r2, #16
 8010ff0:	e7d4      	b.n	8010f9c <__gethex+0x100>
 8010ff2:	4631      	mov	r1, r6
 8010ff4:	e7df      	b.n	8010fb6 <__gethex+0x11a>
 8010ff6:	1bf3      	subs	r3, r6, r7
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	4621      	mov	r1, r4
 8010ffc:	2b07      	cmp	r3, #7
 8010ffe:	dc0b      	bgt.n	8011018 <__gethex+0x17c>
 8011000:	ee18 0a10 	vmov	r0, s16
 8011004:	f000 fa70 	bl	80114e8 <_Balloc>
 8011008:	4604      	mov	r4, r0
 801100a:	b940      	cbnz	r0, 801101e <__gethex+0x182>
 801100c:	4b65      	ldr	r3, [pc, #404]	; (80111a4 <__gethex+0x308>)
 801100e:	4602      	mov	r2, r0
 8011010:	21de      	movs	r1, #222	; 0xde
 8011012:	4865      	ldr	r0, [pc, #404]	; (80111a8 <__gethex+0x30c>)
 8011014:	f7ff f830 	bl	8010078 <__assert_func>
 8011018:	3101      	adds	r1, #1
 801101a:	105b      	asrs	r3, r3, #1
 801101c:	e7ee      	b.n	8010ffc <__gethex+0x160>
 801101e:	f100 0914 	add.w	r9, r0, #20
 8011022:	f04f 0b00 	mov.w	fp, #0
 8011026:	f1ca 0301 	rsb	r3, sl, #1
 801102a:	f8cd 9008 	str.w	r9, [sp, #8]
 801102e:	f8cd b000 	str.w	fp, [sp]
 8011032:	9306      	str	r3, [sp, #24]
 8011034:	42b7      	cmp	r7, r6
 8011036:	d340      	bcc.n	80110ba <__gethex+0x21e>
 8011038:	9802      	ldr	r0, [sp, #8]
 801103a:	9b00      	ldr	r3, [sp, #0]
 801103c:	f840 3b04 	str.w	r3, [r0], #4
 8011040:	eba0 0009 	sub.w	r0, r0, r9
 8011044:	1080      	asrs	r0, r0, #2
 8011046:	0146      	lsls	r6, r0, #5
 8011048:	6120      	str	r0, [r4, #16]
 801104a:	4618      	mov	r0, r3
 801104c:	f000 fb42 	bl	80116d4 <__hi0bits>
 8011050:	1a30      	subs	r0, r6, r0
 8011052:	f8d8 6000 	ldr.w	r6, [r8]
 8011056:	42b0      	cmp	r0, r6
 8011058:	dd63      	ble.n	8011122 <__gethex+0x286>
 801105a:	1b87      	subs	r7, r0, r6
 801105c:	4639      	mov	r1, r7
 801105e:	4620      	mov	r0, r4
 8011060:	f000 fedc 	bl	8011e1c <__any_on>
 8011064:	4682      	mov	sl, r0
 8011066:	b1a8      	cbz	r0, 8011094 <__gethex+0x1f8>
 8011068:	1e7b      	subs	r3, r7, #1
 801106a:	1159      	asrs	r1, r3, #5
 801106c:	f003 021f 	and.w	r2, r3, #31
 8011070:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011074:	f04f 0a01 	mov.w	sl, #1
 8011078:	fa0a f202 	lsl.w	r2, sl, r2
 801107c:	420a      	tst	r2, r1
 801107e:	d009      	beq.n	8011094 <__gethex+0x1f8>
 8011080:	4553      	cmp	r3, sl
 8011082:	dd05      	ble.n	8011090 <__gethex+0x1f4>
 8011084:	1eb9      	subs	r1, r7, #2
 8011086:	4620      	mov	r0, r4
 8011088:	f000 fec8 	bl	8011e1c <__any_on>
 801108c:	2800      	cmp	r0, #0
 801108e:	d145      	bne.n	801111c <__gethex+0x280>
 8011090:	f04f 0a02 	mov.w	sl, #2
 8011094:	4639      	mov	r1, r7
 8011096:	4620      	mov	r0, r4
 8011098:	f7ff fe98 	bl	8010dcc <rshift>
 801109c:	443d      	add	r5, r7
 801109e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110a2:	42ab      	cmp	r3, r5
 80110a4:	da4c      	bge.n	8011140 <__gethex+0x2a4>
 80110a6:	ee18 0a10 	vmov	r0, s16
 80110aa:	4621      	mov	r1, r4
 80110ac:	f000 fa5c 	bl	8011568 <_Bfree>
 80110b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110b2:	2300      	movs	r3, #0
 80110b4:	6013      	str	r3, [r2, #0]
 80110b6:	27a3      	movs	r7, #163	; 0xa3
 80110b8:	e785      	b.n	8010fc6 <__gethex+0x12a>
 80110ba:	1e73      	subs	r3, r6, #1
 80110bc:	9a05      	ldr	r2, [sp, #20]
 80110be:	9303      	str	r3, [sp, #12]
 80110c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d019      	beq.n	80110fc <__gethex+0x260>
 80110c8:	f1bb 0f20 	cmp.w	fp, #32
 80110cc:	d107      	bne.n	80110de <__gethex+0x242>
 80110ce:	9b02      	ldr	r3, [sp, #8]
 80110d0:	9a00      	ldr	r2, [sp, #0]
 80110d2:	f843 2b04 	str.w	r2, [r3], #4
 80110d6:	9302      	str	r3, [sp, #8]
 80110d8:	2300      	movs	r3, #0
 80110da:	9300      	str	r3, [sp, #0]
 80110dc:	469b      	mov	fp, r3
 80110de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80110e2:	f7ff fec5 	bl	8010e70 <__hexdig_fun>
 80110e6:	9b00      	ldr	r3, [sp, #0]
 80110e8:	f000 000f 	and.w	r0, r0, #15
 80110ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80110f0:	4303      	orrs	r3, r0
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	f10b 0b04 	add.w	fp, fp, #4
 80110f8:	9b03      	ldr	r3, [sp, #12]
 80110fa:	e00d      	b.n	8011118 <__gethex+0x27c>
 80110fc:	9b03      	ldr	r3, [sp, #12]
 80110fe:	9a06      	ldr	r2, [sp, #24]
 8011100:	4413      	add	r3, r2
 8011102:	42bb      	cmp	r3, r7
 8011104:	d3e0      	bcc.n	80110c8 <__gethex+0x22c>
 8011106:	4618      	mov	r0, r3
 8011108:	9901      	ldr	r1, [sp, #4]
 801110a:	9307      	str	r3, [sp, #28]
 801110c:	4652      	mov	r2, sl
 801110e:	f001 fa2f 	bl	8012570 <strncmp>
 8011112:	9b07      	ldr	r3, [sp, #28]
 8011114:	2800      	cmp	r0, #0
 8011116:	d1d7      	bne.n	80110c8 <__gethex+0x22c>
 8011118:	461e      	mov	r6, r3
 801111a:	e78b      	b.n	8011034 <__gethex+0x198>
 801111c:	f04f 0a03 	mov.w	sl, #3
 8011120:	e7b8      	b.n	8011094 <__gethex+0x1f8>
 8011122:	da0a      	bge.n	801113a <__gethex+0x29e>
 8011124:	1a37      	subs	r7, r6, r0
 8011126:	4621      	mov	r1, r4
 8011128:	ee18 0a10 	vmov	r0, s16
 801112c:	463a      	mov	r2, r7
 801112e:	f000 fc37 	bl	80119a0 <__lshift>
 8011132:	1bed      	subs	r5, r5, r7
 8011134:	4604      	mov	r4, r0
 8011136:	f100 0914 	add.w	r9, r0, #20
 801113a:	f04f 0a00 	mov.w	sl, #0
 801113e:	e7ae      	b.n	801109e <__gethex+0x202>
 8011140:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011144:	42a8      	cmp	r0, r5
 8011146:	dd72      	ble.n	801122e <__gethex+0x392>
 8011148:	1b45      	subs	r5, r0, r5
 801114a:	42ae      	cmp	r6, r5
 801114c:	dc36      	bgt.n	80111bc <__gethex+0x320>
 801114e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011152:	2b02      	cmp	r3, #2
 8011154:	d02a      	beq.n	80111ac <__gethex+0x310>
 8011156:	2b03      	cmp	r3, #3
 8011158:	d02c      	beq.n	80111b4 <__gethex+0x318>
 801115a:	2b01      	cmp	r3, #1
 801115c:	d115      	bne.n	801118a <__gethex+0x2ee>
 801115e:	42ae      	cmp	r6, r5
 8011160:	d113      	bne.n	801118a <__gethex+0x2ee>
 8011162:	2e01      	cmp	r6, #1
 8011164:	d10b      	bne.n	801117e <__gethex+0x2e2>
 8011166:	9a04      	ldr	r2, [sp, #16]
 8011168:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801116c:	6013      	str	r3, [r2, #0]
 801116e:	2301      	movs	r3, #1
 8011170:	6123      	str	r3, [r4, #16]
 8011172:	f8c9 3000 	str.w	r3, [r9]
 8011176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011178:	2762      	movs	r7, #98	; 0x62
 801117a:	601c      	str	r4, [r3, #0]
 801117c:	e723      	b.n	8010fc6 <__gethex+0x12a>
 801117e:	1e71      	subs	r1, r6, #1
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fe4b 	bl	8011e1c <__any_on>
 8011186:	2800      	cmp	r0, #0
 8011188:	d1ed      	bne.n	8011166 <__gethex+0x2ca>
 801118a:	ee18 0a10 	vmov	r0, s16
 801118e:	4621      	mov	r1, r4
 8011190:	f000 f9ea 	bl	8011568 <_Bfree>
 8011194:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011196:	2300      	movs	r3, #0
 8011198:	6013      	str	r3, [r2, #0]
 801119a:	2750      	movs	r7, #80	; 0x50
 801119c:	e713      	b.n	8010fc6 <__gethex+0x12a>
 801119e:	bf00      	nop
 80111a0:	080136fc 	.word	0x080136fc
 80111a4:	08013680 	.word	0x08013680
 80111a8:	08013691 	.word	0x08013691
 80111ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1eb      	bne.n	801118a <__gethex+0x2ee>
 80111b2:	e7d8      	b.n	8011166 <__gethex+0x2ca>
 80111b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1d5      	bne.n	8011166 <__gethex+0x2ca>
 80111ba:	e7e6      	b.n	801118a <__gethex+0x2ee>
 80111bc:	1e6f      	subs	r7, r5, #1
 80111be:	f1ba 0f00 	cmp.w	sl, #0
 80111c2:	d131      	bne.n	8011228 <__gethex+0x38c>
 80111c4:	b127      	cbz	r7, 80111d0 <__gethex+0x334>
 80111c6:	4639      	mov	r1, r7
 80111c8:	4620      	mov	r0, r4
 80111ca:	f000 fe27 	bl	8011e1c <__any_on>
 80111ce:	4682      	mov	sl, r0
 80111d0:	117b      	asrs	r3, r7, #5
 80111d2:	2101      	movs	r1, #1
 80111d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80111d8:	f007 071f 	and.w	r7, r7, #31
 80111dc:	fa01 f707 	lsl.w	r7, r1, r7
 80111e0:	421f      	tst	r7, r3
 80111e2:	4629      	mov	r1, r5
 80111e4:	4620      	mov	r0, r4
 80111e6:	bf18      	it	ne
 80111e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80111ec:	1b76      	subs	r6, r6, r5
 80111ee:	f7ff fded 	bl	8010dcc <rshift>
 80111f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80111f6:	2702      	movs	r7, #2
 80111f8:	f1ba 0f00 	cmp.w	sl, #0
 80111fc:	d048      	beq.n	8011290 <__gethex+0x3f4>
 80111fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011202:	2b02      	cmp	r3, #2
 8011204:	d015      	beq.n	8011232 <__gethex+0x396>
 8011206:	2b03      	cmp	r3, #3
 8011208:	d017      	beq.n	801123a <__gethex+0x39e>
 801120a:	2b01      	cmp	r3, #1
 801120c:	d109      	bne.n	8011222 <__gethex+0x386>
 801120e:	f01a 0f02 	tst.w	sl, #2
 8011212:	d006      	beq.n	8011222 <__gethex+0x386>
 8011214:	f8d9 0000 	ldr.w	r0, [r9]
 8011218:	ea4a 0a00 	orr.w	sl, sl, r0
 801121c:	f01a 0f01 	tst.w	sl, #1
 8011220:	d10e      	bne.n	8011240 <__gethex+0x3a4>
 8011222:	f047 0710 	orr.w	r7, r7, #16
 8011226:	e033      	b.n	8011290 <__gethex+0x3f4>
 8011228:	f04f 0a01 	mov.w	sl, #1
 801122c:	e7d0      	b.n	80111d0 <__gethex+0x334>
 801122e:	2701      	movs	r7, #1
 8011230:	e7e2      	b.n	80111f8 <__gethex+0x35c>
 8011232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011234:	f1c3 0301 	rsb	r3, r3, #1
 8011238:	9315      	str	r3, [sp, #84]	; 0x54
 801123a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801123c:	2b00      	cmp	r3, #0
 801123e:	d0f0      	beq.n	8011222 <__gethex+0x386>
 8011240:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011244:	f104 0314 	add.w	r3, r4, #20
 8011248:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801124c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011250:	f04f 0c00 	mov.w	ip, #0
 8011254:	4618      	mov	r0, r3
 8011256:	f853 2b04 	ldr.w	r2, [r3], #4
 801125a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801125e:	d01c      	beq.n	801129a <__gethex+0x3fe>
 8011260:	3201      	adds	r2, #1
 8011262:	6002      	str	r2, [r0, #0]
 8011264:	2f02      	cmp	r7, #2
 8011266:	f104 0314 	add.w	r3, r4, #20
 801126a:	d13f      	bne.n	80112ec <__gethex+0x450>
 801126c:	f8d8 2000 	ldr.w	r2, [r8]
 8011270:	3a01      	subs	r2, #1
 8011272:	42b2      	cmp	r2, r6
 8011274:	d10a      	bne.n	801128c <__gethex+0x3f0>
 8011276:	1171      	asrs	r1, r6, #5
 8011278:	2201      	movs	r2, #1
 801127a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801127e:	f006 061f 	and.w	r6, r6, #31
 8011282:	fa02 f606 	lsl.w	r6, r2, r6
 8011286:	421e      	tst	r6, r3
 8011288:	bf18      	it	ne
 801128a:	4617      	movne	r7, r2
 801128c:	f047 0720 	orr.w	r7, r7, #32
 8011290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011292:	601c      	str	r4, [r3, #0]
 8011294:	9b04      	ldr	r3, [sp, #16]
 8011296:	601d      	str	r5, [r3, #0]
 8011298:	e695      	b.n	8010fc6 <__gethex+0x12a>
 801129a:	4299      	cmp	r1, r3
 801129c:	f843 cc04 	str.w	ip, [r3, #-4]
 80112a0:	d8d8      	bhi.n	8011254 <__gethex+0x3b8>
 80112a2:	68a3      	ldr	r3, [r4, #8]
 80112a4:	459b      	cmp	fp, r3
 80112a6:	db19      	blt.n	80112dc <__gethex+0x440>
 80112a8:	6861      	ldr	r1, [r4, #4]
 80112aa:	ee18 0a10 	vmov	r0, s16
 80112ae:	3101      	adds	r1, #1
 80112b0:	f000 f91a 	bl	80114e8 <_Balloc>
 80112b4:	4681      	mov	r9, r0
 80112b6:	b918      	cbnz	r0, 80112c0 <__gethex+0x424>
 80112b8:	4b1a      	ldr	r3, [pc, #104]	; (8011324 <__gethex+0x488>)
 80112ba:	4602      	mov	r2, r0
 80112bc:	2184      	movs	r1, #132	; 0x84
 80112be:	e6a8      	b.n	8011012 <__gethex+0x176>
 80112c0:	6922      	ldr	r2, [r4, #16]
 80112c2:	3202      	adds	r2, #2
 80112c4:	f104 010c 	add.w	r1, r4, #12
 80112c8:	0092      	lsls	r2, r2, #2
 80112ca:	300c      	adds	r0, #12
 80112cc:	f7fd fafc 	bl	800e8c8 <memcpy>
 80112d0:	4621      	mov	r1, r4
 80112d2:	ee18 0a10 	vmov	r0, s16
 80112d6:	f000 f947 	bl	8011568 <_Bfree>
 80112da:	464c      	mov	r4, r9
 80112dc:	6923      	ldr	r3, [r4, #16]
 80112de:	1c5a      	adds	r2, r3, #1
 80112e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112e4:	6122      	str	r2, [r4, #16]
 80112e6:	2201      	movs	r2, #1
 80112e8:	615a      	str	r2, [r3, #20]
 80112ea:	e7bb      	b.n	8011264 <__gethex+0x3c8>
 80112ec:	6922      	ldr	r2, [r4, #16]
 80112ee:	455a      	cmp	r2, fp
 80112f0:	dd0b      	ble.n	801130a <__gethex+0x46e>
 80112f2:	2101      	movs	r1, #1
 80112f4:	4620      	mov	r0, r4
 80112f6:	f7ff fd69 	bl	8010dcc <rshift>
 80112fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112fe:	3501      	adds	r5, #1
 8011300:	42ab      	cmp	r3, r5
 8011302:	f6ff aed0 	blt.w	80110a6 <__gethex+0x20a>
 8011306:	2701      	movs	r7, #1
 8011308:	e7c0      	b.n	801128c <__gethex+0x3f0>
 801130a:	f016 061f 	ands.w	r6, r6, #31
 801130e:	d0fa      	beq.n	8011306 <__gethex+0x46a>
 8011310:	449a      	add	sl, r3
 8011312:	f1c6 0620 	rsb	r6, r6, #32
 8011316:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801131a:	f000 f9db 	bl	80116d4 <__hi0bits>
 801131e:	42b0      	cmp	r0, r6
 8011320:	dbe7      	blt.n	80112f2 <__gethex+0x456>
 8011322:	e7f0      	b.n	8011306 <__gethex+0x46a>
 8011324:	08013680 	.word	0x08013680

08011328 <L_shift>:
 8011328:	f1c2 0208 	rsb	r2, r2, #8
 801132c:	0092      	lsls	r2, r2, #2
 801132e:	b570      	push	{r4, r5, r6, lr}
 8011330:	f1c2 0620 	rsb	r6, r2, #32
 8011334:	6843      	ldr	r3, [r0, #4]
 8011336:	6804      	ldr	r4, [r0, #0]
 8011338:	fa03 f506 	lsl.w	r5, r3, r6
 801133c:	432c      	orrs	r4, r5
 801133e:	40d3      	lsrs	r3, r2
 8011340:	6004      	str	r4, [r0, #0]
 8011342:	f840 3f04 	str.w	r3, [r0, #4]!
 8011346:	4288      	cmp	r0, r1
 8011348:	d3f4      	bcc.n	8011334 <L_shift+0xc>
 801134a:	bd70      	pop	{r4, r5, r6, pc}

0801134c <__match>:
 801134c:	b530      	push	{r4, r5, lr}
 801134e:	6803      	ldr	r3, [r0, #0]
 8011350:	3301      	adds	r3, #1
 8011352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011356:	b914      	cbnz	r4, 801135e <__match+0x12>
 8011358:	6003      	str	r3, [r0, #0]
 801135a:	2001      	movs	r0, #1
 801135c:	bd30      	pop	{r4, r5, pc}
 801135e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011362:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011366:	2d19      	cmp	r5, #25
 8011368:	bf98      	it	ls
 801136a:	3220      	addls	r2, #32
 801136c:	42a2      	cmp	r2, r4
 801136e:	d0f0      	beq.n	8011352 <__match+0x6>
 8011370:	2000      	movs	r0, #0
 8011372:	e7f3      	b.n	801135c <__match+0x10>

08011374 <__hexnan>:
 8011374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011378:	680b      	ldr	r3, [r1, #0]
 801137a:	6801      	ldr	r1, [r0, #0]
 801137c:	115e      	asrs	r6, r3, #5
 801137e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011382:	f013 031f 	ands.w	r3, r3, #31
 8011386:	b087      	sub	sp, #28
 8011388:	bf18      	it	ne
 801138a:	3604      	addne	r6, #4
 801138c:	2500      	movs	r5, #0
 801138e:	1f37      	subs	r7, r6, #4
 8011390:	4682      	mov	sl, r0
 8011392:	4690      	mov	r8, r2
 8011394:	9301      	str	r3, [sp, #4]
 8011396:	f846 5c04 	str.w	r5, [r6, #-4]
 801139a:	46b9      	mov	r9, r7
 801139c:	463c      	mov	r4, r7
 801139e:	9502      	str	r5, [sp, #8]
 80113a0:	46ab      	mov	fp, r5
 80113a2:	784a      	ldrb	r2, [r1, #1]
 80113a4:	1c4b      	adds	r3, r1, #1
 80113a6:	9303      	str	r3, [sp, #12]
 80113a8:	b342      	cbz	r2, 80113fc <__hexnan+0x88>
 80113aa:	4610      	mov	r0, r2
 80113ac:	9105      	str	r1, [sp, #20]
 80113ae:	9204      	str	r2, [sp, #16]
 80113b0:	f7ff fd5e 	bl	8010e70 <__hexdig_fun>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d14f      	bne.n	8011458 <__hexnan+0xe4>
 80113b8:	9a04      	ldr	r2, [sp, #16]
 80113ba:	9905      	ldr	r1, [sp, #20]
 80113bc:	2a20      	cmp	r2, #32
 80113be:	d818      	bhi.n	80113f2 <__hexnan+0x7e>
 80113c0:	9b02      	ldr	r3, [sp, #8]
 80113c2:	459b      	cmp	fp, r3
 80113c4:	dd13      	ble.n	80113ee <__hexnan+0x7a>
 80113c6:	454c      	cmp	r4, r9
 80113c8:	d206      	bcs.n	80113d8 <__hexnan+0x64>
 80113ca:	2d07      	cmp	r5, #7
 80113cc:	dc04      	bgt.n	80113d8 <__hexnan+0x64>
 80113ce:	462a      	mov	r2, r5
 80113d0:	4649      	mov	r1, r9
 80113d2:	4620      	mov	r0, r4
 80113d4:	f7ff ffa8 	bl	8011328 <L_shift>
 80113d8:	4544      	cmp	r4, r8
 80113da:	d950      	bls.n	801147e <__hexnan+0x10a>
 80113dc:	2300      	movs	r3, #0
 80113de:	f1a4 0904 	sub.w	r9, r4, #4
 80113e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80113e6:	f8cd b008 	str.w	fp, [sp, #8]
 80113ea:	464c      	mov	r4, r9
 80113ec:	461d      	mov	r5, r3
 80113ee:	9903      	ldr	r1, [sp, #12]
 80113f0:	e7d7      	b.n	80113a2 <__hexnan+0x2e>
 80113f2:	2a29      	cmp	r2, #41	; 0x29
 80113f4:	d156      	bne.n	80114a4 <__hexnan+0x130>
 80113f6:	3102      	adds	r1, #2
 80113f8:	f8ca 1000 	str.w	r1, [sl]
 80113fc:	f1bb 0f00 	cmp.w	fp, #0
 8011400:	d050      	beq.n	80114a4 <__hexnan+0x130>
 8011402:	454c      	cmp	r4, r9
 8011404:	d206      	bcs.n	8011414 <__hexnan+0xa0>
 8011406:	2d07      	cmp	r5, #7
 8011408:	dc04      	bgt.n	8011414 <__hexnan+0xa0>
 801140a:	462a      	mov	r2, r5
 801140c:	4649      	mov	r1, r9
 801140e:	4620      	mov	r0, r4
 8011410:	f7ff ff8a 	bl	8011328 <L_shift>
 8011414:	4544      	cmp	r4, r8
 8011416:	d934      	bls.n	8011482 <__hexnan+0x10e>
 8011418:	f1a8 0204 	sub.w	r2, r8, #4
 801141c:	4623      	mov	r3, r4
 801141e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011422:	f842 1f04 	str.w	r1, [r2, #4]!
 8011426:	429f      	cmp	r7, r3
 8011428:	d2f9      	bcs.n	801141e <__hexnan+0xaa>
 801142a:	1b3b      	subs	r3, r7, r4
 801142c:	f023 0303 	bic.w	r3, r3, #3
 8011430:	3304      	adds	r3, #4
 8011432:	3401      	adds	r4, #1
 8011434:	3e03      	subs	r6, #3
 8011436:	42b4      	cmp	r4, r6
 8011438:	bf88      	it	hi
 801143a:	2304      	movhi	r3, #4
 801143c:	4443      	add	r3, r8
 801143e:	2200      	movs	r2, #0
 8011440:	f843 2b04 	str.w	r2, [r3], #4
 8011444:	429f      	cmp	r7, r3
 8011446:	d2fb      	bcs.n	8011440 <__hexnan+0xcc>
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	b91b      	cbnz	r3, 8011454 <__hexnan+0xe0>
 801144c:	4547      	cmp	r7, r8
 801144e:	d127      	bne.n	80114a0 <__hexnan+0x12c>
 8011450:	2301      	movs	r3, #1
 8011452:	603b      	str	r3, [r7, #0]
 8011454:	2005      	movs	r0, #5
 8011456:	e026      	b.n	80114a6 <__hexnan+0x132>
 8011458:	3501      	adds	r5, #1
 801145a:	2d08      	cmp	r5, #8
 801145c:	f10b 0b01 	add.w	fp, fp, #1
 8011460:	dd06      	ble.n	8011470 <__hexnan+0xfc>
 8011462:	4544      	cmp	r4, r8
 8011464:	d9c3      	bls.n	80113ee <__hexnan+0x7a>
 8011466:	2300      	movs	r3, #0
 8011468:	f844 3c04 	str.w	r3, [r4, #-4]
 801146c:	2501      	movs	r5, #1
 801146e:	3c04      	subs	r4, #4
 8011470:	6822      	ldr	r2, [r4, #0]
 8011472:	f000 000f 	and.w	r0, r0, #15
 8011476:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801147a:	6022      	str	r2, [r4, #0]
 801147c:	e7b7      	b.n	80113ee <__hexnan+0x7a>
 801147e:	2508      	movs	r5, #8
 8011480:	e7b5      	b.n	80113ee <__hexnan+0x7a>
 8011482:	9b01      	ldr	r3, [sp, #4]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d0df      	beq.n	8011448 <__hexnan+0xd4>
 8011488:	f04f 32ff 	mov.w	r2, #4294967295
 801148c:	f1c3 0320 	rsb	r3, r3, #32
 8011490:	fa22 f303 	lsr.w	r3, r2, r3
 8011494:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011498:	401a      	ands	r2, r3
 801149a:	f846 2c04 	str.w	r2, [r6, #-4]
 801149e:	e7d3      	b.n	8011448 <__hexnan+0xd4>
 80114a0:	3f04      	subs	r7, #4
 80114a2:	e7d1      	b.n	8011448 <__hexnan+0xd4>
 80114a4:	2004      	movs	r0, #4
 80114a6:	b007      	add	sp, #28
 80114a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114ac <_localeconv_r>:
 80114ac:	4800      	ldr	r0, [pc, #0]	; (80114b0 <_localeconv_r+0x4>)
 80114ae:	4770      	bx	lr
 80114b0:	20000180 	.word	0x20000180

080114b4 <malloc>:
 80114b4:	4b02      	ldr	r3, [pc, #8]	; (80114c0 <malloc+0xc>)
 80114b6:	4601      	mov	r1, r0
 80114b8:	6818      	ldr	r0, [r3, #0]
 80114ba:	f000 bd2f 	b.w	8011f1c <_malloc_r>
 80114be:	bf00      	nop
 80114c0:	20000028 	.word	0x20000028

080114c4 <__ascii_mbtowc>:
 80114c4:	b082      	sub	sp, #8
 80114c6:	b901      	cbnz	r1, 80114ca <__ascii_mbtowc+0x6>
 80114c8:	a901      	add	r1, sp, #4
 80114ca:	b142      	cbz	r2, 80114de <__ascii_mbtowc+0x1a>
 80114cc:	b14b      	cbz	r3, 80114e2 <__ascii_mbtowc+0x1e>
 80114ce:	7813      	ldrb	r3, [r2, #0]
 80114d0:	600b      	str	r3, [r1, #0]
 80114d2:	7812      	ldrb	r2, [r2, #0]
 80114d4:	1e10      	subs	r0, r2, #0
 80114d6:	bf18      	it	ne
 80114d8:	2001      	movne	r0, #1
 80114da:	b002      	add	sp, #8
 80114dc:	4770      	bx	lr
 80114de:	4610      	mov	r0, r2
 80114e0:	e7fb      	b.n	80114da <__ascii_mbtowc+0x16>
 80114e2:	f06f 0001 	mvn.w	r0, #1
 80114e6:	e7f8      	b.n	80114da <__ascii_mbtowc+0x16>

080114e8 <_Balloc>:
 80114e8:	b570      	push	{r4, r5, r6, lr}
 80114ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114ec:	4604      	mov	r4, r0
 80114ee:	460d      	mov	r5, r1
 80114f0:	b976      	cbnz	r6, 8011510 <_Balloc+0x28>
 80114f2:	2010      	movs	r0, #16
 80114f4:	f7ff ffde 	bl	80114b4 <malloc>
 80114f8:	4602      	mov	r2, r0
 80114fa:	6260      	str	r0, [r4, #36]	; 0x24
 80114fc:	b920      	cbnz	r0, 8011508 <_Balloc+0x20>
 80114fe:	4b18      	ldr	r3, [pc, #96]	; (8011560 <_Balloc+0x78>)
 8011500:	4818      	ldr	r0, [pc, #96]	; (8011564 <_Balloc+0x7c>)
 8011502:	2166      	movs	r1, #102	; 0x66
 8011504:	f7fe fdb8 	bl	8010078 <__assert_func>
 8011508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801150c:	6006      	str	r6, [r0, #0]
 801150e:	60c6      	str	r6, [r0, #12]
 8011510:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011512:	68f3      	ldr	r3, [r6, #12]
 8011514:	b183      	cbz	r3, 8011538 <_Balloc+0x50>
 8011516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801151e:	b9b8      	cbnz	r0, 8011550 <_Balloc+0x68>
 8011520:	2101      	movs	r1, #1
 8011522:	fa01 f605 	lsl.w	r6, r1, r5
 8011526:	1d72      	adds	r2, r6, #5
 8011528:	0092      	lsls	r2, r2, #2
 801152a:	4620      	mov	r0, r4
 801152c:	f000 fc97 	bl	8011e5e <_calloc_r>
 8011530:	b160      	cbz	r0, 801154c <_Balloc+0x64>
 8011532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011536:	e00e      	b.n	8011556 <_Balloc+0x6e>
 8011538:	2221      	movs	r2, #33	; 0x21
 801153a:	2104      	movs	r1, #4
 801153c:	4620      	mov	r0, r4
 801153e:	f000 fc8e 	bl	8011e5e <_calloc_r>
 8011542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011544:	60f0      	str	r0, [r6, #12]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1e4      	bne.n	8011516 <_Balloc+0x2e>
 801154c:	2000      	movs	r0, #0
 801154e:	bd70      	pop	{r4, r5, r6, pc}
 8011550:	6802      	ldr	r2, [r0, #0]
 8011552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011556:	2300      	movs	r3, #0
 8011558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801155c:	e7f7      	b.n	801154e <_Balloc+0x66>
 801155e:	bf00      	nop
 8011560:	08013560 	.word	0x08013560
 8011564:	08013710 	.word	0x08013710

08011568 <_Bfree>:
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801156c:	4605      	mov	r5, r0
 801156e:	460c      	mov	r4, r1
 8011570:	b976      	cbnz	r6, 8011590 <_Bfree+0x28>
 8011572:	2010      	movs	r0, #16
 8011574:	f7ff ff9e 	bl	80114b4 <malloc>
 8011578:	4602      	mov	r2, r0
 801157a:	6268      	str	r0, [r5, #36]	; 0x24
 801157c:	b920      	cbnz	r0, 8011588 <_Bfree+0x20>
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <_Bfree+0x3c>)
 8011580:	4809      	ldr	r0, [pc, #36]	; (80115a8 <_Bfree+0x40>)
 8011582:	218a      	movs	r1, #138	; 0x8a
 8011584:	f7fe fd78 	bl	8010078 <__assert_func>
 8011588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801158c:	6006      	str	r6, [r0, #0]
 801158e:	60c6      	str	r6, [r0, #12]
 8011590:	b13c      	cbz	r4, 80115a2 <_Bfree+0x3a>
 8011592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011594:	6862      	ldr	r2, [r4, #4]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801159c:	6021      	str	r1, [r4, #0]
 801159e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115a2:	bd70      	pop	{r4, r5, r6, pc}
 80115a4:	08013560 	.word	0x08013560
 80115a8:	08013710 	.word	0x08013710

080115ac <__multadd>:
 80115ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115b0:	690e      	ldr	r6, [r1, #16]
 80115b2:	4607      	mov	r7, r0
 80115b4:	4698      	mov	r8, r3
 80115b6:	460c      	mov	r4, r1
 80115b8:	f101 0014 	add.w	r0, r1, #20
 80115bc:	2300      	movs	r3, #0
 80115be:	6805      	ldr	r5, [r0, #0]
 80115c0:	b2a9      	uxth	r1, r5
 80115c2:	fb02 8101 	mla	r1, r2, r1, r8
 80115c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80115ca:	0c2d      	lsrs	r5, r5, #16
 80115cc:	fb02 c505 	mla	r5, r2, r5, ip
 80115d0:	b289      	uxth	r1, r1
 80115d2:	3301      	adds	r3, #1
 80115d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80115d8:	429e      	cmp	r6, r3
 80115da:	f840 1b04 	str.w	r1, [r0], #4
 80115de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80115e2:	dcec      	bgt.n	80115be <__multadd+0x12>
 80115e4:	f1b8 0f00 	cmp.w	r8, #0
 80115e8:	d022      	beq.n	8011630 <__multadd+0x84>
 80115ea:	68a3      	ldr	r3, [r4, #8]
 80115ec:	42b3      	cmp	r3, r6
 80115ee:	dc19      	bgt.n	8011624 <__multadd+0x78>
 80115f0:	6861      	ldr	r1, [r4, #4]
 80115f2:	4638      	mov	r0, r7
 80115f4:	3101      	adds	r1, #1
 80115f6:	f7ff ff77 	bl	80114e8 <_Balloc>
 80115fa:	4605      	mov	r5, r0
 80115fc:	b928      	cbnz	r0, 801160a <__multadd+0x5e>
 80115fe:	4602      	mov	r2, r0
 8011600:	4b0d      	ldr	r3, [pc, #52]	; (8011638 <__multadd+0x8c>)
 8011602:	480e      	ldr	r0, [pc, #56]	; (801163c <__multadd+0x90>)
 8011604:	21b5      	movs	r1, #181	; 0xb5
 8011606:	f7fe fd37 	bl	8010078 <__assert_func>
 801160a:	6922      	ldr	r2, [r4, #16]
 801160c:	3202      	adds	r2, #2
 801160e:	f104 010c 	add.w	r1, r4, #12
 8011612:	0092      	lsls	r2, r2, #2
 8011614:	300c      	adds	r0, #12
 8011616:	f7fd f957 	bl	800e8c8 <memcpy>
 801161a:	4621      	mov	r1, r4
 801161c:	4638      	mov	r0, r7
 801161e:	f7ff ffa3 	bl	8011568 <_Bfree>
 8011622:	462c      	mov	r4, r5
 8011624:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011628:	3601      	adds	r6, #1
 801162a:	f8c3 8014 	str.w	r8, [r3, #20]
 801162e:	6126      	str	r6, [r4, #16]
 8011630:	4620      	mov	r0, r4
 8011632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011636:	bf00      	nop
 8011638:	08013680 	.word	0x08013680
 801163c:	08013710 	.word	0x08013710

08011640 <__s2b>:
 8011640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011644:	460c      	mov	r4, r1
 8011646:	4615      	mov	r5, r2
 8011648:	461f      	mov	r7, r3
 801164a:	2209      	movs	r2, #9
 801164c:	3308      	adds	r3, #8
 801164e:	4606      	mov	r6, r0
 8011650:	fb93 f3f2 	sdiv	r3, r3, r2
 8011654:	2100      	movs	r1, #0
 8011656:	2201      	movs	r2, #1
 8011658:	429a      	cmp	r2, r3
 801165a:	db09      	blt.n	8011670 <__s2b+0x30>
 801165c:	4630      	mov	r0, r6
 801165e:	f7ff ff43 	bl	80114e8 <_Balloc>
 8011662:	b940      	cbnz	r0, 8011676 <__s2b+0x36>
 8011664:	4602      	mov	r2, r0
 8011666:	4b19      	ldr	r3, [pc, #100]	; (80116cc <__s2b+0x8c>)
 8011668:	4819      	ldr	r0, [pc, #100]	; (80116d0 <__s2b+0x90>)
 801166a:	21ce      	movs	r1, #206	; 0xce
 801166c:	f7fe fd04 	bl	8010078 <__assert_func>
 8011670:	0052      	lsls	r2, r2, #1
 8011672:	3101      	adds	r1, #1
 8011674:	e7f0      	b.n	8011658 <__s2b+0x18>
 8011676:	9b08      	ldr	r3, [sp, #32]
 8011678:	6143      	str	r3, [r0, #20]
 801167a:	2d09      	cmp	r5, #9
 801167c:	f04f 0301 	mov.w	r3, #1
 8011680:	6103      	str	r3, [r0, #16]
 8011682:	dd16      	ble.n	80116b2 <__s2b+0x72>
 8011684:	f104 0909 	add.w	r9, r4, #9
 8011688:	46c8      	mov	r8, r9
 801168a:	442c      	add	r4, r5
 801168c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011690:	4601      	mov	r1, r0
 8011692:	3b30      	subs	r3, #48	; 0x30
 8011694:	220a      	movs	r2, #10
 8011696:	4630      	mov	r0, r6
 8011698:	f7ff ff88 	bl	80115ac <__multadd>
 801169c:	45a0      	cmp	r8, r4
 801169e:	d1f5      	bne.n	801168c <__s2b+0x4c>
 80116a0:	f1a5 0408 	sub.w	r4, r5, #8
 80116a4:	444c      	add	r4, r9
 80116a6:	1b2d      	subs	r5, r5, r4
 80116a8:	1963      	adds	r3, r4, r5
 80116aa:	42bb      	cmp	r3, r7
 80116ac:	db04      	blt.n	80116b8 <__s2b+0x78>
 80116ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116b2:	340a      	adds	r4, #10
 80116b4:	2509      	movs	r5, #9
 80116b6:	e7f6      	b.n	80116a6 <__s2b+0x66>
 80116b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80116bc:	4601      	mov	r1, r0
 80116be:	3b30      	subs	r3, #48	; 0x30
 80116c0:	220a      	movs	r2, #10
 80116c2:	4630      	mov	r0, r6
 80116c4:	f7ff ff72 	bl	80115ac <__multadd>
 80116c8:	e7ee      	b.n	80116a8 <__s2b+0x68>
 80116ca:	bf00      	nop
 80116cc:	08013680 	.word	0x08013680
 80116d0:	08013710 	.word	0x08013710

080116d4 <__hi0bits>:
 80116d4:	0c03      	lsrs	r3, r0, #16
 80116d6:	041b      	lsls	r3, r3, #16
 80116d8:	b9d3      	cbnz	r3, 8011710 <__hi0bits+0x3c>
 80116da:	0400      	lsls	r0, r0, #16
 80116dc:	2310      	movs	r3, #16
 80116de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80116e2:	bf04      	itt	eq
 80116e4:	0200      	lsleq	r0, r0, #8
 80116e6:	3308      	addeq	r3, #8
 80116e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80116ec:	bf04      	itt	eq
 80116ee:	0100      	lsleq	r0, r0, #4
 80116f0:	3304      	addeq	r3, #4
 80116f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116f6:	bf04      	itt	eq
 80116f8:	0080      	lsleq	r0, r0, #2
 80116fa:	3302      	addeq	r3, #2
 80116fc:	2800      	cmp	r0, #0
 80116fe:	db05      	blt.n	801170c <__hi0bits+0x38>
 8011700:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011704:	f103 0301 	add.w	r3, r3, #1
 8011708:	bf08      	it	eq
 801170a:	2320      	moveq	r3, #32
 801170c:	4618      	mov	r0, r3
 801170e:	4770      	bx	lr
 8011710:	2300      	movs	r3, #0
 8011712:	e7e4      	b.n	80116de <__hi0bits+0xa>

08011714 <__lo0bits>:
 8011714:	6803      	ldr	r3, [r0, #0]
 8011716:	f013 0207 	ands.w	r2, r3, #7
 801171a:	4601      	mov	r1, r0
 801171c:	d00b      	beq.n	8011736 <__lo0bits+0x22>
 801171e:	07da      	lsls	r2, r3, #31
 8011720:	d424      	bmi.n	801176c <__lo0bits+0x58>
 8011722:	0798      	lsls	r0, r3, #30
 8011724:	bf49      	itett	mi
 8011726:	085b      	lsrmi	r3, r3, #1
 8011728:	089b      	lsrpl	r3, r3, #2
 801172a:	2001      	movmi	r0, #1
 801172c:	600b      	strmi	r3, [r1, #0]
 801172e:	bf5c      	itt	pl
 8011730:	600b      	strpl	r3, [r1, #0]
 8011732:	2002      	movpl	r0, #2
 8011734:	4770      	bx	lr
 8011736:	b298      	uxth	r0, r3
 8011738:	b9b0      	cbnz	r0, 8011768 <__lo0bits+0x54>
 801173a:	0c1b      	lsrs	r3, r3, #16
 801173c:	2010      	movs	r0, #16
 801173e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011742:	bf04      	itt	eq
 8011744:	0a1b      	lsreq	r3, r3, #8
 8011746:	3008      	addeq	r0, #8
 8011748:	071a      	lsls	r2, r3, #28
 801174a:	bf04      	itt	eq
 801174c:	091b      	lsreq	r3, r3, #4
 801174e:	3004      	addeq	r0, #4
 8011750:	079a      	lsls	r2, r3, #30
 8011752:	bf04      	itt	eq
 8011754:	089b      	lsreq	r3, r3, #2
 8011756:	3002      	addeq	r0, #2
 8011758:	07da      	lsls	r2, r3, #31
 801175a:	d403      	bmi.n	8011764 <__lo0bits+0x50>
 801175c:	085b      	lsrs	r3, r3, #1
 801175e:	f100 0001 	add.w	r0, r0, #1
 8011762:	d005      	beq.n	8011770 <__lo0bits+0x5c>
 8011764:	600b      	str	r3, [r1, #0]
 8011766:	4770      	bx	lr
 8011768:	4610      	mov	r0, r2
 801176a:	e7e8      	b.n	801173e <__lo0bits+0x2a>
 801176c:	2000      	movs	r0, #0
 801176e:	4770      	bx	lr
 8011770:	2020      	movs	r0, #32
 8011772:	4770      	bx	lr

08011774 <__i2b>:
 8011774:	b510      	push	{r4, lr}
 8011776:	460c      	mov	r4, r1
 8011778:	2101      	movs	r1, #1
 801177a:	f7ff feb5 	bl	80114e8 <_Balloc>
 801177e:	4602      	mov	r2, r0
 8011780:	b928      	cbnz	r0, 801178e <__i2b+0x1a>
 8011782:	4b05      	ldr	r3, [pc, #20]	; (8011798 <__i2b+0x24>)
 8011784:	4805      	ldr	r0, [pc, #20]	; (801179c <__i2b+0x28>)
 8011786:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801178a:	f7fe fc75 	bl	8010078 <__assert_func>
 801178e:	2301      	movs	r3, #1
 8011790:	6144      	str	r4, [r0, #20]
 8011792:	6103      	str	r3, [r0, #16]
 8011794:	bd10      	pop	{r4, pc}
 8011796:	bf00      	nop
 8011798:	08013680 	.word	0x08013680
 801179c:	08013710 	.word	0x08013710

080117a0 <__multiply>:
 80117a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a4:	4614      	mov	r4, r2
 80117a6:	690a      	ldr	r2, [r1, #16]
 80117a8:	6923      	ldr	r3, [r4, #16]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	bfb8      	it	lt
 80117ae:	460b      	movlt	r3, r1
 80117b0:	460d      	mov	r5, r1
 80117b2:	bfbc      	itt	lt
 80117b4:	4625      	movlt	r5, r4
 80117b6:	461c      	movlt	r4, r3
 80117b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80117bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80117c0:	68ab      	ldr	r3, [r5, #8]
 80117c2:	6869      	ldr	r1, [r5, #4]
 80117c4:	eb0a 0709 	add.w	r7, sl, r9
 80117c8:	42bb      	cmp	r3, r7
 80117ca:	b085      	sub	sp, #20
 80117cc:	bfb8      	it	lt
 80117ce:	3101      	addlt	r1, #1
 80117d0:	f7ff fe8a 	bl	80114e8 <_Balloc>
 80117d4:	b930      	cbnz	r0, 80117e4 <__multiply+0x44>
 80117d6:	4602      	mov	r2, r0
 80117d8:	4b42      	ldr	r3, [pc, #264]	; (80118e4 <__multiply+0x144>)
 80117da:	4843      	ldr	r0, [pc, #268]	; (80118e8 <__multiply+0x148>)
 80117dc:	f240 115d 	movw	r1, #349	; 0x15d
 80117e0:	f7fe fc4a 	bl	8010078 <__assert_func>
 80117e4:	f100 0614 	add.w	r6, r0, #20
 80117e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80117ec:	4633      	mov	r3, r6
 80117ee:	2200      	movs	r2, #0
 80117f0:	4543      	cmp	r3, r8
 80117f2:	d31e      	bcc.n	8011832 <__multiply+0x92>
 80117f4:	f105 0c14 	add.w	ip, r5, #20
 80117f8:	f104 0314 	add.w	r3, r4, #20
 80117fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011800:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011804:	9202      	str	r2, [sp, #8]
 8011806:	ebac 0205 	sub.w	r2, ip, r5
 801180a:	3a15      	subs	r2, #21
 801180c:	f022 0203 	bic.w	r2, r2, #3
 8011810:	3204      	adds	r2, #4
 8011812:	f105 0115 	add.w	r1, r5, #21
 8011816:	458c      	cmp	ip, r1
 8011818:	bf38      	it	cc
 801181a:	2204      	movcc	r2, #4
 801181c:	9201      	str	r2, [sp, #4]
 801181e:	9a02      	ldr	r2, [sp, #8]
 8011820:	9303      	str	r3, [sp, #12]
 8011822:	429a      	cmp	r2, r3
 8011824:	d808      	bhi.n	8011838 <__multiply+0x98>
 8011826:	2f00      	cmp	r7, #0
 8011828:	dc55      	bgt.n	80118d6 <__multiply+0x136>
 801182a:	6107      	str	r7, [r0, #16]
 801182c:	b005      	add	sp, #20
 801182e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011832:	f843 2b04 	str.w	r2, [r3], #4
 8011836:	e7db      	b.n	80117f0 <__multiply+0x50>
 8011838:	f8b3 a000 	ldrh.w	sl, [r3]
 801183c:	f1ba 0f00 	cmp.w	sl, #0
 8011840:	d020      	beq.n	8011884 <__multiply+0xe4>
 8011842:	f105 0e14 	add.w	lr, r5, #20
 8011846:	46b1      	mov	r9, r6
 8011848:	2200      	movs	r2, #0
 801184a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801184e:	f8d9 b000 	ldr.w	fp, [r9]
 8011852:	b2a1      	uxth	r1, r4
 8011854:	fa1f fb8b 	uxth.w	fp, fp
 8011858:	fb0a b101 	mla	r1, sl, r1, fp
 801185c:	4411      	add	r1, r2
 801185e:	f8d9 2000 	ldr.w	r2, [r9]
 8011862:	0c24      	lsrs	r4, r4, #16
 8011864:	0c12      	lsrs	r2, r2, #16
 8011866:	fb0a 2404 	mla	r4, sl, r4, r2
 801186a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801186e:	b289      	uxth	r1, r1
 8011870:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011874:	45f4      	cmp	ip, lr
 8011876:	f849 1b04 	str.w	r1, [r9], #4
 801187a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801187e:	d8e4      	bhi.n	801184a <__multiply+0xaa>
 8011880:	9901      	ldr	r1, [sp, #4]
 8011882:	5072      	str	r2, [r6, r1]
 8011884:	9a03      	ldr	r2, [sp, #12]
 8011886:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801188a:	3304      	adds	r3, #4
 801188c:	f1b9 0f00 	cmp.w	r9, #0
 8011890:	d01f      	beq.n	80118d2 <__multiply+0x132>
 8011892:	6834      	ldr	r4, [r6, #0]
 8011894:	f105 0114 	add.w	r1, r5, #20
 8011898:	46b6      	mov	lr, r6
 801189a:	f04f 0a00 	mov.w	sl, #0
 801189e:	880a      	ldrh	r2, [r1, #0]
 80118a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80118a4:	fb09 b202 	mla	r2, r9, r2, fp
 80118a8:	4492      	add	sl, r2
 80118aa:	b2a4      	uxth	r4, r4
 80118ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80118b0:	f84e 4b04 	str.w	r4, [lr], #4
 80118b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80118b8:	f8be 2000 	ldrh.w	r2, [lr]
 80118bc:	0c24      	lsrs	r4, r4, #16
 80118be:	fb09 2404 	mla	r4, r9, r4, r2
 80118c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80118c6:	458c      	cmp	ip, r1
 80118c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80118cc:	d8e7      	bhi.n	801189e <__multiply+0xfe>
 80118ce:	9a01      	ldr	r2, [sp, #4]
 80118d0:	50b4      	str	r4, [r6, r2]
 80118d2:	3604      	adds	r6, #4
 80118d4:	e7a3      	b.n	801181e <__multiply+0x7e>
 80118d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1a5      	bne.n	801182a <__multiply+0x8a>
 80118de:	3f01      	subs	r7, #1
 80118e0:	e7a1      	b.n	8011826 <__multiply+0x86>
 80118e2:	bf00      	nop
 80118e4:	08013680 	.word	0x08013680
 80118e8:	08013710 	.word	0x08013710

080118ec <__pow5mult>:
 80118ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118f0:	4615      	mov	r5, r2
 80118f2:	f012 0203 	ands.w	r2, r2, #3
 80118f6:	4606      	mov	r6, r0
 80118f8:	460f      	mov	r7, r1
 80118fa:	d007      	beq.n	801190c <__pow5mult+0x20>
 80118fc:	4c25      	ldr	r4, [pc, #148]	; (8011994 <__pow5mult+0xa8>)
 80118fe:	3a01      	subs	r2, #1
 8011900:	2300      	movs	r3, #0
 8011902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011906:	f7ff fe51 	bl	80115ac <__multadd>
 801190a:	4607      	mov	r7, r0
 801190c:	10ad      	asrs	r5, r5, #2
 801190e:	d03d      	beq.n	801198c <__pow5mult+0xa0>
 8011910:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011912:	b97c      	cbnz	r4, 8011934 <__pow5mult+0x48>
 8011914:	2010      	movs	r0, #16
 8011916:	f7ff fdcd 	bl	80114b4 <malloc>
 801191a:	4602      	mov	r2, r0
 801191c:	6270      	str	r0, [r6, #36]	; 0x24
 801191e:	b928      	cbnz	r0, 801192c <__pow5mult+0x40>
 8011920:	4b1d      	ldr	r3, [pc, #116]	; (8011998 <__pow5mult+0xac>)
 8011922:	481e      	ldr	r0, [pc, #120]	; (801199c <__pow5mult+0xb0>)
 8011924:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011928:	f7fe fba6 	bl	8010078 <__assert_func>
 801192c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011930:	6004      	str	r4, [r0, #0]
 8011932:	60c4      	str	r4, [r0, #12]
 8011934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801193c:	b94c      	cbnz	r4, 8011952 <__pow5mult+0x66>
 801193e:	f240 2171 	movw	r1, #625	; 0x271
 8011942:	4630      	mov	r0, r6
 8011944:	f7ff ff16 	bl	8011774 <__i2b>
 8011948:	2300      	movs	r3, #0
 801194a:	f8c8 0008 	str.w	r0, [r8, #8]
 801194e:	4604      	mov	r4, r0
 8011950:	6003      	str	r3, [r0, #0]
 8011952:	f04f 0900 	mov.w	r9, #0
 8011956:	07eb      	lsls	r3, r5, #31
 8011958:	d50a      	bpl.n	8011970 <__pow5mult+0x84>
 801195a:	4639      	mov	r1, r7
 801195c:	4622      	mov	r2, r4
 801195e:	4630      	mov	r0, r6
 8011960:	f7ff ff1e 	bl	80117a0 <__multiply>
 8011964:	4639      	mov	r1, r7
 8011966:	4680      	mov	r8, r0
 8011968:	4630      	mov	r0, r6
 801196a:	f7ff fdfd 	bl	8011568 <_Bfree>
 801196e:	4647      	mov	r7, r8
 8011970:	106d      	asrs	r5, r5, #1
 8011972:	d00b      	beq.n	801198c <__pow5mult+0xa0>
 8011974:	6820      	ldr	r0, [r4, #0]
 8011976:	b938      	cbnz	r0, 8011988 <__pow5mult+0x9c>
 8011978:	4622      	mov	r2, r4
 801197a:	4621      	mov	r1, r4
 801197c:	4630      	mov	r0, r6
 801197e:	f7ff ff0f 	bl	80117a0 <__multiply>
 8011982:	6020      	str	r0, [r4, #0]
 8011984:	f8c0 9000 	str.w	r9, [r0]
 8011988:	4604      	mov	r4, r0
 801198a:	e7e4      	b.n	8011956 <__pow5mult+0x6a>
 801198c:	4638      	mov	r0, r7
 801198e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011992:	bf00      	nop
 8011994:	08013860 	.word	0x08013860
 8011998:	08013560 	.word	0x08013560
 801199c:	08013710 	.word	0x08013710

080119a0 <__lshift>:
 80119a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a4:	460c      	mov	r4, r1
 80119a6:	6849      	ldr	r1, [r1, #4]
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119ae:	68a3      	ldr	r3, [r4, #8]
 80119b0:	4607      	mov	r7, r0
 80119b2:	4691      	mov	r9, r2
 80119b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119b8:	f108 0601 	add.w	r6, r8, #1
 80119bc:	42b3      	cmp	r3, r6
 80119be:	db0b      	blt.n	80119d8 <__lshift+0x38>
 80119c0:	4638      	mov	r0, r7
 80119c2:	f7ff fd91 	bl	80114e8 <_Balloc>
 80119c6:	4605      	mov	r5, r0
 80119c8:	b948      	cbnz	r0, 80119de <__lshift+0x3e>
 80119ca:	4602      	mov	r2, r0
 80119cc:	4b28      	ldr	r3, [pc, #160]	; (8011a70 <__lshift+0xd0>)
 80119ce:	4829      	ldr	r0, [pc, #164]	; (8011a74 <__lshift+0xd4>)
 80119d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80119d4:	f7fe fb50 	bl	8010078 <__assert_func>
 80119d8:	3101      	adds	r1, #1
 80119da:	005b      	lsls	r3, r3, #1
 80119dc:	e7ee      	b.n	80119bc <__lshift+0x1c>
 80119de:	2300      	movs	r3, #0
 80119e0:	f100 0114 	add.w	r1, r0, #20
 80119e4:	f100 0210 	add.w	r2, r0, #16
 80119e8:	4618      	mov	r0, r3
 80119ea:	4553      	cmp	r3, sl
 80119ec:	db33      	blt.n	8011a56 <__lshift+0xb6>
 80119ee:	6920      	ldr	r0, [r4, #16]
 80119f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119f4:	f104 0314 	add.w	r3, r4, #20
 80119f8:	f019 091f 	ands.w	r9, r9, #31
 80119fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a04:	d02b      	beq.n	8011a5e <__lshift+0xbe>
 8011a06:	f1c9 0e20 	rsb	lr, r9, #32
 8011a0a:	468a      	mov	sl, r1
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	6818      	ldr	r0, [r3, #0]
 8011a10:	fa00 f009 	lsl.w	r0, r0, r9
 8011a14:	4302      	orrs	r2, r0
 8011a16:	f84a 2b04 	str.w	r2, [sl], #4
 8011a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a1e:	459c      	cmp	ip, r3
 8011a20:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a24:	d8f3      	bhi.n	8011a0e <__lshift+0x6e>
 8011a26:	ebac 0304 	sub.w	r3, ip, r4
 8011a2a:	3b15      	subs	r3, #21
 8011a2c:	f023 0303 	bic.w	r3, r3, #3
 8011a30:	3304      	adds	r3, #4
 8011a32:	f104 0015 	add.w	r0, r4, #21
 8011a36:	4584      	cmp	ip, r0
 8011a38:	bf38      	it	cc
 8011a3a:	2304      	movcc	r3, #4
 8011a3c:	50ca      	str	r2, [r1, r3]
 8011a3e:	b10a      	cbz	r2, 8011a44 <__lshift+0xa4>
 8011a40:	f108 0602 	add.w	r6, r8, #2
 8011a44:	3e01      	subs	r6, #1
 8011a46:	4638      	mov	r0, r7
 8011a48:	612e      	str	r6, [r5, #16]
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	f7ff fd8c 	bl	8011568 <_Bfree>
 8011a50:	4628      	mov	r0, r5
 8011a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	e7c5      	b.n	80119ea <__lshift+0x4a>
 8011a5e:	3904      	subs	r1, #4
 8011a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a68:	459c      	cmp	ip, r3
 8011a6a:	d8f9      	bhi.n	8011a60 <__lshift+0xc0>
 8011a6c:	e7ea      	b.n	8011a44 <__lshift+0xa4>
 8011a6e:	bf00      	nop
 8011a70:	08013680 	.word	0x08013680
 8011a74:	08013710 	.word	0x08013710

08011a78 <__mcmp>:
 8011a78:	b530      	push	{r4, r5, lr}
 8011a7a:	6902      	ldr	r2, [r0, #16]
 8011a7c:	690c      	ldr	r4, [r1, #16]
 8011a7e:	1b12      	subs	r2, r2, r4
 8011a80:	d10e      	bne.n	8011aa0 <__mcmp+0x28>
 8011a82:	f100 0314 	add.w	r3, r0, #20
 8011a86:	3114      	adds	r1, #20
 8011a88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a98:	42a5      	cmp	r5, r4
 8011a9a:	d003      	beq.n	8011aa4 <__mcmp+0x2c>
 8011a9c:	d305      	bcc.n	8011aaa <__mcmp+0x32>
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	4610      	mov	r0, r2
 8011aa2:	bd30      	pop	{r4, r5, pc}
 8011aa4:	4283      	cmp	r3, r0
 8011aa6:	d3f3      	bcc.n	8011a90 <__mcmp+0x18>
 8011aa8:	e7fa      	b.n	8011aa0 <__mcmp+0x28>
 8011aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8011aae:	e7f7      	b.n	8011aa0 <__mcmp+0x28>

08011ab0 <__mdiff>:
 8011ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab4:	460c      	mov	r4, r1
 8011ab6:	4606      	mov	r6, r0
 8011ab8:	4611      	mov	r1, r2
 8011aba:	4620      	mov	r0, r4
 8011abc:	4617      	mov	r7, r2
 8011abe:	f7ff ffdb 	bl	8011a78 <__mcmp>
 8011ac2:	1e05      	subs	r5, r0, #0
 8011ac4:	d110      	bne.n	8011ae8 <__mdiff+0x38>
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	4630      	mov	r0, r6
 8011aca:	f7ff fd0d 	bl	80114e8 <_Balloc>
 8011ace:	b930      	cbnz	r0, 8011ade <__mdiff+0x2e>
 8011ad0:	4b39      	ldr	r3, [pc, #228]	; (8011bb8 <__mdiff+0x108>)
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	f240 2132 	movw	r1, #562	; 0x232
 8011ad8:	4838      	ldr	r0, [pc, #224]	; (8011bbc <__mdiff+0x10c>)
 8011ada:	f7fe facd 	bl	8010078 <__assert_func>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae8:	bfa4      	itt	ge
 8011aea:	463b      	movge	r3, r7
 8011aec:	4627      	movge	r7, r4
 8011aee:	4630      	mov	r0, r6
 8011af0:	6879      	ldr	r1, [r7, #4]
 8011af2:	bfa6      	itte	ge
 8011af4:	461c      	movge	r4, r3
 8011af6:	2500      	movge	r5, #0
 8011af8:	2501      	movlt	r5, #1
 8011afa:	f7ff fcf5 	bl	80114e8 <_Balloc>
 8011afe:	b920      	cbnz	r0, 8011b0a <__mdiff+0x5a>
 8011b00:	4b2d      	ldr	r3, [pc, #180]	; (8011bb8 <__mdiff+0x108>)
 8011b02:	4602      	mov	r2, r0
 8011b04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011b08:	e7e6      	b.n	8011ad8 <__mdiff+0x28>
 8011b0a:	693e      	ldr	r6, [r7, #16]
 8011b0c:	60c5      	str	r5, [r0, #12]
 8011b0e:	6925      	ldr	r5, [r4, #16]
 8011b10:	f107 0114 	add.w	r1, r7, #20
 8011b14:	f104 0914 	add.w	r9, r4, #20
 8011b18:	f100 0e14 	add.w	lr, r0, #20
 8011b1c:	f107 0210 	add.w	r2, r7, #16
 8011b20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011b24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011b28:	46f2      	mov	sl, lr
 8011b2a:	2700      	movs	r7, #0
 8011b2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b34:	fa1f f883 	uxth.w	r8, r3
 8011b38:	fa17 f78b 	uxtah	r7, r7, fp
 8011b3c:	0c1b      	lsrs	r3, r3, #16
 8011b3e:	eba7 0808 	sub.w	r8, r7, r8
 8011b42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b4a:	fa1f f888 	uxth.w	r8, r8
 8011b4e:	141f      	asrs	r7, r3, #16
 8011b50:	454d      	cmp	r5, r9
 8011b52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b56:	f84a 3b04 	str.w	r3, [sl], #4
 8011b5a:	d8e7      	bhi.n	8011b2c <__mdiff+0x7c>
 8011b5c:	1b2b      	subs	r3, r5, r4
 8011b5e:	3b15      	subs	r3, #21
 8011b60:	f023 0303 	bic.w	r3, r3, #3
 8011b64:	3304      	adds	r3, #4
 8011b66:	3415      	adds	r4, #21
 8011b68:	42a5      	cmp	r5, r4
 8011b6a:	bf38      	it	cc
 8011b6c:	2304      	movcc	r3, #4
 8011b6e:	4419      	add	r1, r3
 8011b70:	4473      	add	r3, lr
 8011b72:	469e      	mov	lr, r3
 8011b74:	460d      	mov	r5, r1
 8011b76:	4565      	cmp	r5, ip
 8011b78:	d30e      	bcc.n	8011b98 <__mdiff+0xe8>
 8011b7a:	f10c 0203 	add.w	r2, ip, #3
 8011b7e:	1a52      	subs	r2, r2, r1
 8011b80:	f022 0203 	bic.w	r2, r2, #3
 8011b84:	3903      	subs	r1, #3
 8011b86:	458c      	cmp	ip, r1
 8011b88:	bf38      	it	cc
 8011b8a:	2200      	movcc	r2, #0
 8011b8c:	441a      	add	r2, r3
 8011b8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b92:	b17b      	cbz	r3, 8011bb4 <__mdiff+0x104>
 8011b94:	6106      	str	r6, [r0, #16]
 8011b96:	e7a5      	b.n	8011ae4 <__mdiff+0x34>
 8011b98:	f855 8b04 	ldr.w	r8, [r5], #4
 8011b9c:	fa17 f488 	uxtah	r4, r7, r8
 8011ba0:	1422      	asrs	r2, r4, #16
 8011ba2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011ba6:	b2a4      	uxth	r4, r4
 8011ba8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011bac:	f84e 4b04 	str.w	r4, [lr], #4
 8011bb0:	1417      	asrs	r7, r2, #16
 8011bb2:	e7e0      	b.n	8011b76 <__mdiff+0xc6>
 8011bb4:	3e01      	subs	r6, #1
 8011bb6:	e7ea      	b.n	8011b8e <__mdiff+0xde>
 8011bb8:	08013680 	.word	0x08013680
 8011bbc:	08013710 	.word	0x08013710

08011bc0 <__ulp>:
 8011bc0:	b082      	sub	sp, #8
 8011bc2:	ed8d 0b00 	vstr	d0, [sp]
 8011bc6:	9b01      	ldr	r3, [sp, #4]
 8011bc8:	4912      	ldr	r1, [pc, #72]	; (8011c14 <__ulp+0x54>)
 8011bca:	4019      	ands	r1, r3
 8011bcc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011bd0:	2900      	cmp	r1, #0
 8011bd2:	dd05      	ble.n	8011be0 <__ulp+0x20>
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	ec43 2b10 	vmov	d0, r2, r3
 8011bdc:	b002      	add	sp, #8
 8011bde:	4770      	bx	lr
 8011be0:	4249      	negs	r1, r1
 8011be2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011be6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011bea:	f04f 0200 	mov.w	r2, #0
 8011bee:	f04f 0300 	mov.w	r3, #0
 8011bf2:	da04      	bge.n	8011bfe <__ulp+0x3e>
 8011bf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011bf8:	fa41 f300 	asr.w	r3, r1, r0
 8011bfc:	e7ec      	b.n	8011bd8 <__ulp+0x18>
 8011bfe:	f1a0 0114 	sub.w	r1, r0, #20
 8011c02:	291e      	cmp	r1, #30
 8011c04:	bfda      	itte	le
 8011c06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011c0a:	fa20 f101 	lsrle.w	r1, r0, r1
 8011c0e:	2101      	movgt	r1, #1
 8011c10:	460a      	mov	r2, r1
 8011c12:	e7e1      	b.n	8011bd8 <__ulp+0x18>
 8011c14:	7ff00000 	.word	0x7ff00000

08011c18 <__b2d>:
 8011c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1a:	6905      	ldr	r5, [r0, #16]
 8011c1c:	f100 0714 	add.w	r7, r0, #20
 8011c20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011c24:	1f2e      	subs	r6, r5, #4
 8011c26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f7ff fd52 	bl	80116d4 <__hi0bits>
 8011c30:	f1c0 0320 	rsb	r3, r0, #32
 8011c34:	280a      	cmp	r0, #10
 8011c36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011cb4 <__b2d+0x9c>
 8011c3a:	600b      	str	r3, [r1, #0]
 8011c3c:	dc14      	bgt.n	8011c68 <__b2d+0x50>
 8011c3e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011c42:	fa24 f10e 	lsr.w	r1, r4, lr
 8011c46:	42b7      	cmp	r7, r6
 8011c48:	ea41 030c 	orr.w	r3, r1, ip
 8011c4c:	bf34      	ite	cc
 8011c4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011c52:	2100      	movcs	r1, #0
 8011c54:	3015      	adds	r0, #21
 8011c56:	fa04 f000 	lsl.w	r0, r4, r0
 8011c5a:	fa21 f10e 	lsr.w	r1, r1, lr
 8011c5e:	ea40 0201 	orr.w	r2, r0, r1
 8011c62:	ec43 2b10 	vmov	d0, r2, r3
 8011c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c68:	42b7      	cmp	r7, r6
 8011c6a:	bf3a      	itte	cc
 8011c6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011c70:	f1a5 0608 	subcc.w	r6, r5, #8
 8011c74:	2100      	movcs	r1, #0
 8011c76:	380b      	subs	r0, #11
 8011c78:	d017      	beq.n	8011caa <__b2d+0x92>
 8011c7a:	f1c0 0c20 	rsb	ip, r0, #32
 8011c7e:	fa04 f500 	lsl.w	r5, r4, r0
 8011c82:	42be      	cmp	r6, r7
 8011c84:	fa21 f40c 	lsr.w	r4, r1, ip
 8011c88:	ea45 0504 	orr.w	r5, r5, r4
 8011c8c:	bf8c      	ite	hi
 8011c8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011c92:	2400      	movls	r4, #0
 8011c94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011c98:	fa01 f000 	lsl.w	r0, r1, r0
 8011c9c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011ca0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011ca4:	ea40 0204 	orr.w	r2, r0, r4
 8011ca8:	e7db      	b.n	8011c62 <__b2d+0x4a>
 8011caa:	ea44 030c 	orr.w	r3, r4, ip
 8011cae:	460a      	mov	r2, r1
 8011cb0:	e7d7      	b.n	8011c62 <__b2d+0x4a>
 8011cb2:	bf00      	nop
 8011cb4:	3ff00000 	.word	0x3ff00000

08011cb8 <__d2b>:
 8011cb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cbc:	4689      	mov	r9, r1
 8011cbe:	2101      	movs	r1, #1
 8011cc0:	ec57 6b10 	vmov	r6, r7, d0
 8011cc4:	4690      	mov	r8, r2
 8011cc6:	f7ff fc0f 	bl	80114e8 <_Balloc>
 8011cca:	4604      	mov	r4, r0
 8011ccc:	b930      	cbnz	r0, 8011cdc <__d2b+0x24>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	4b25      	ldr	r3, [pc, #148]	; (8011d68 <__d2b+0xb0>)
 8011cd2:	4826      	ldr	r0, [pc, #152]	; (8011d6c <__d2b+0xb4>)
 8011cd4:	f240 310a 	movw	r1, #778	; 0x30a
 8011cd8:	f7fe f9ce 	bl	8010078 <__assert_func>
 8011cdc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011ce0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011ce4:	bb35      	cbnz	r5, 8011d34 <__d2b+0x7c>
 8011ce6:	2e00      	cmp	r6, #0
 8011ce8:	9301      	str	r3, [sp, #4]
 8011cea:	d028      	beq.n	8011d3e <__d2b+0x86>
 8011cec:	4668      	mov	r0, sp
 8011cee:	9600      	str	r6, [sp, #0]
 8011cf0:	f7ff fd10 	bl	8011714 <__lo0bits>
 8011cf4:	9900      	ldr	r1, [sp, #0]
 8011cf6:	b300      	cbz	r0, 8011d3a <__d2b+0x82>
 8011cf8:	9a01      	ldr	r2, [sp, #4]
 8011cfa:	f1c0 0320 	rsb	r3, r0, #32
 8011cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8011d02:	430b      	orrs	r3, r1
 8011d04:	40c2      	lsrs	r2, r0
 8011d06:	6163      	str	r3, [r4, #20]
 8011d08:	9201      	str	r2, [sp, #4]
 8011d0a:	9b01      	ldr	r3, [sp, #4]
 8011d0c:	61a3      	str	r3, [r4, #24]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	bf14      	ite	ne
 8011d12:	2202      	movne	r2, #2
 8011d14:	2201      	moveq	r2, #1
 8011d16:	6122      	str	r2, [r4, #16]
 8011d18:	b1d5      	cbz	r5, 8011d50 <__d2b+0x98>
 8011d1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d1e:	4405      	add	r5, r0
 8011d20:	f8c9 5000 	str.w	r5, [r9]
 8011d24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d28:	f8c8 0000 	str.w	r0, [r8]
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	b003      	add	sp, #12
 8011d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d38:	e7d5      	b.n	8011ce6 <__d2b+0x2e>
 8011d3a:	6161      	str	r1, [r4, #20]
 8011d3c:	e7e5      	b.n	8011d0a <__d2b+0x52>
 8011d3e:	a801      	add	r0, sp, #4
 8011d40:	f7ff fce8 	bl	8011714 <__lo0bits>
 8011d44:	9b01      	ldr	r3, [sp, #4]
 8011d46:	6163      	str	r3, [r4, #20]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	6122      	str	r2, [r4, #16]
 8011d4c:	3020      	adds	r0, #32
 8011d4e:	e7e3      	b.n	8011d18 <__d2b+0x60>
 8011d50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d58:	f8c9 0000 	str.w	r0, [r9]
 8011d5c:	6918      	ldr	r0, [r3, #16]
 8011d5e:	f7ff fcb9 	bl	80116d4 <__hi0bits>
 8011d62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d66:	e7df      	b.n	8011d28 <__d2b+0x70>
 8011d68:	08013680 	.word	0x08013680
 8011d6c:	08013710 	.word	0x08013710

08011d70 <__ratio>:
 8011d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d74:	4688      	mov	r8, r1
 8011d76:	4669      	mov	r1, sp
 8011d78:	4681      	mov	r9, r0
 8011d7a:	f7ff ff4d 	bl	8011c18 <__b2d>
 8011d7e:	a901      	add	r1, sp, #4
 8011d80:	4640      	mov	r0, r8
 8011d82:	ec55 4b10 	vmov	r4, r5, d0
 8011d86:	f7ff ff47 	bl	8011c18 <__b2d>
 8011d8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011d8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011d92:	eba3 0c02 	sub.w	ip, r3, r2
 8011d96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011d9a:	1a9b      	subs	r3, r3, r2
 8011d9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011da0:	ec51 0b10 	vmov	r0, r1, d0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	bfd6      	itet	le
 8011da8:	460a      	movle	r2, r1
 8011daa:	462a      	movgt	r2, r5
 8011dac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011db0:	468b      	mov	fp, r1
 8011db2:	462f      	mov	r7, r5
 8011db4:	bfd4      	ite	le
 8011db6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011dba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	ee10 2a10 	vmov	r2, s0
 8011dc4:	465b      	mov	r3, fp
 8011dc6:	4639      	mov	r1, r7
 8011dc8:	f7ee fd48 	bl	800085c <__aeabi_ddiv>
 8011dcc:	ec41 0b10 	vmov	d0, r0, r1
 8011dd0:	b003      	add	sp, #12
 8011dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011dd6 <__copybits>:
 8011dd6:	3901      	subs	r1, #1
 8011dd8:	b570      	push	{r4, r5, r6, lr}
 8011dda:	1149      	asrs	r1, r1, #5
 8011ddc:	6914      	ldr	r4, [r2, #16]
 8011dde:	3101      	adds	r1, #1
 8011de0:	f102 0314 	add.w	r3, r2, #20
 8011de4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011de8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011dec:	1f05      	subs	r5, r0, #4
 8011dee:	42a3      	cmp	r3, r4
 8011df0:	d30c      	bcc.n	8011e0c <__copybits+0x36>
 8011df2:	1aa3      	subs	r3, r4, r2
 8011df4:	3b11      	subs	r3, #17
 8011df6:	f023 0303 	bic.w	r3, r3, #3
 8011dfa:	3211      	adds	r2, #17
 8011dfc:	42a2      	cmp	r2, r4
 8011dfe:	bf88      	it	hi
 8011e00:	2300      	movhi	r3, #0
 8011e02:	4418      	add	r0, r3
 8011e04:	2300      	movs	r3, #0
 8011e06:	4288      	cmp	r0, r1
 8011e08:	d305      	bcc.n	8011e16 <__copybits+0x40>
 8011e0a:	bd70      	pop	{r4, r5, r6, pc}
 8011e0c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e10:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e14:	e7eb      	b.n	8011dee <__copybits+0x18>
 8011e16:	f840 3b04 	str.w	r3, [r0], #4
 8011e1a:	e7f4      	b.n	8011e06 <__copybits+0x30>

08011e1c <__any_on>:
 8011e1c:	f100 0214 	add.w	r2, r0, #20
 8011e20:	6900      	ldr	r0, [r0, #16]
 8011e22:	114b      	asrs	r3, r1, #5
 8011e24:	4298      	cmp	r0, r3
 8011e26:	b510      	push	{r4, lr}
 8011e28:	db11      	blt.n	8011e4e <__any_on+0x32>
 8011e2a:	dd0a      	ble.n	8011e42 <__any_on+0x26>
 8011e2c:	f011 011f 	ands.w	r1, r1, #31
 8011e30:	d007      	beq.n	8011e42 <__any_on+0x26>
 8011e32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e36:	fa24 f001 	lsr.w	r0, r4, r1
 8011e3a:	fa00 f101 	lsl.w	r1, r0, r1
 8011e3e:	428c      	cmp	r4, r1
 8011e40:	d10b      	bne.n	8011e5a <__any_on+0x3e>
 8011e42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d803      	bhi.n	8011e52 <__any_on+0x36>
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	bd10      	pop	{r4, pc}
 8011e4e:	4603      	mov	r3, r0
 8011e50:	e7f7      	b.n	8011e42 <__any_on+0x26>
 8011e52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e56:	2900      	cmp	r1, #0
 8011e58:	d0f5      	beq.n	8011e46 <__any_on+0x2a>
 8011e5a:	2001      	movs	r0, #1
 8011e5c:	e7f6      	b.n	8011e4c <__any_on+0x30>

08011e5e <_calloc_r>:
 8011e5e:	b513      	push	{r0, r1, r4, lr}
 8011e60:	434a      	muls	r2, r1
 8011e62:	4611      	mov	r1, r2
 8011e64:	9201      	str	r2, [sp, #4]
 8011e66:	f000 f859 	bl	8011f1c <_malloc_r>
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	b118      	cbz	r0, 8011e76 <_calloc_r+0x18>
 8011e6e:	9a01      	ldr	r2, [sp, #4]
 8011e70:	2100      	movs	r1, #0
 8011e72:	f7fc fd37 	bl	800e8e4 <memset>
 8011e76:	4620      	mov	r0, r4
 8011e78:	b002      	add	sp, #8
 8011e7a:	bd10      	pop	{r4, pc}

08011e7c <_free_r>:
 8011e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e7e:	2900      	cmp	r1, #0
 8011e80:	d048      	beq.n	8011f14 <_free_r+0x98>
 8011e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e86:	9001      	str	r0, [sp, #4]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8011e8e:	bfb8      	it	lt
 8011e90:	18e4      	addlt	r4, r4, r3
 8011e92:	f000 fe8d 	bl	8012bb0 <__malloc_lock>
 8011e96:	4a20      	ldr	r2, [pc, #128]	; (8011f18 <_free_r+0x9c>)
 8011e98:	9801      	ldr	r0, [sp, #4]
 8011e9a:	6813      	ldr	r3, [r2, #0]
 8011e9c:	4615      	mov	r5, r2
 8011e9e:	b933      	cbnz	r3, 8011eae <_free_r+0x32>
 8011ea0:	6063      	str	r3, [r4, #4]
 8011ea2:	6014      	str	r4, [r2, #0]
 8011ea4:	b003      	add	sp, #12
 8011ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011eaa:	f000 be87 	b.w	8012bbc <__malloc_unlock>
 8011eae:	42a3      	cmp	r3, r4
 8011eb0:	d90b      	bls.n	8011eca <_free_r+0x4e>
 8011eb2:	6821      	ldr	r1, [r4, #0]
 8011eb4:	1862      	adds	r2, r4, r1
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	bf04      	itt	eq
 8011eba:	681a      	ldreq	r2, [r3, #0]
 8011ebc:	685b      	ldreq	r3, [r3, #4]
 8011ebe:	6063      	str	r3, [r4, #4]
 8011ec0:	bf04      	itt	eq
 8011ec2:	1852      	addeq	r2, r2, r1
 8011ec4:	6022      	streq	r2, [r4, #0]
 8011ec6:	602c      	str	r4, [r5, #0]
 8011ec8:	e7ec      	b.n	8011ea4 <_free_r+0x28>
 8011eca:	461a      	mov	r2, r3
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	b10b      	cbz	r3, 8011ed4 <_free_r+0x58>
 8011ed0:	42a3      	cmp	r3, r4
 8011ed2:	d9fa      	bls.n	8011eca <_free_r+0x4e>
 8011ed4:	6811      	ldr	r1, [r2, #0]
 8011ed6:	1855      	adds	r5, r2, r1
 8011ed8:	42a5      	cmp	r5, r4
 8011eda:	d10b      	bne.n	8011ef4 <_free_r+0x78>
 8011edc:	6824      	ldr	r4, [r4, #0]
 8011ede:	4421      	add	r1, r4
 8011ee0:	1854      	adds	r4, r2, r1
 8011ee2:	42a3      	cmp	r3, r4
 8011ee4:	6011      	str	r1, [r2, #0]
 8011ee6:	d1dd      	bne.n	8011ea4 <_free_r+0x28>
 8011ee8:	681c      	ldr	r4, [r3, #0]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	6053      	str	r3, [r2, #4]
 8011eee:	4421      	add	r1, r4
 8011ef0:	6011      	str	r1, [r2, #0]
 8011ef2:	e7d7      	b.n	8011ea4 <_free_r+0x28>
 8011ef4:	d902      	bls.n	8011efc <_free_r+0x80>
 8011ef6:	230c      	movs	r3, #12
 8011ef8:	6003      	str	r3, [r0, #0]
 8011efa:	e7d3      	b.n	8011ea4 <_free_r+0x28>
 8011efc:	6825      	ldr	r5, [r4, #0]
 8011efe:	1961      	adds	r1, r4, r5
 8011f00:	428b      	cmp	r3, r1
 8011f02:	bf04      	itt	eq
 8011f04:	6819      	ldreq	r1, [r3, #0]
 8011f06:	685b      	ldreq	r3, [r3, #4]
 8011f08:	6063      	str	r3, [r4, #4]
 8011f0a:	bf04      	itt	eq
 8011f0c:	1949      	addeq	r1, r1, r5
 8011f0e:	6021      	streq	r1, [r4, #0]
 8011f10:	6054      	str	r4, [r2, #4]
 8011f12:	e7c7      	b.n	8011ea4 <_free_r+0x28>
 8011f14:	b003      	add	sp, #12
 8011f16:	bd30      	pop	{r4, r5, pc}
 8011f18:	20004c80 	.word	0x20004c80

08011f1c <_malloc_r>:
 8011f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1e:	1ccd      	adds	r5, r1, #3
 8011f20:	f025 0503 	bic.w	r5, r5, #3
 8011f24:	3508      	adds	r5, #8
 8011f26:	2d0c      	cmp	r5, #12
 8011f28:	bf38      	it	cc
 8011f2a:	250c      	movcc	r5, #12
 8011f2c:	2d00      	cmp	r5, #0
 8011f2e:	4606      	mov	r6, r0
 8011f30:	db01      	blt.n	8011f36 <_malloc_r+0x1a>
 8011f32:	42a9      	cmp	r1, r5
 8011f34:	d903      	bls.n	8011f3e <_malloc_r+0x22>
 8011f36:	230c      	movs	r3, #12
 8011f38:	6033      	str	r3, [r6, #0]
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f3e:	f000 fe37 	bl	8012bb0 <__malloc_lock>
 8011f42:	4921      	ldr	r1, [pc, #132]	; (8011fc8 <_malloc_r+0xac>)
 8011f44:	680a      	ldr	r2, [r1, #0]
 8011f46:	4614      	mov	r4, r2
 8011f48:	b99c      	cbnz	r4, 8011f72 <_malloc_r+0x56>
 8011f4a:	4f20      	ldr	r7, [pc, #128]	; (8011fcc <_malloc_r+0xb0>)
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	b923      	cbnz	r3, 8011f5a <_malloc_r+0x3e>
 8011f50:	4621      	mov	r1, r4
 8011f52:	4630      	mov	r0, r6
 8011f54:	f000 fafc 	bl	8012550 <_sbrk_r>
 8011f58:	6038      	str	r0, [r7, #0]
 8011f5a:	4629      	mov	r1, r5
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	f000 faf7 	bl	8012550 <_sbrk_r>
 8011f62:	1c43      	adds	r3, r0, #1
 8011f64:	d123      	bne.n	8011fae <_malloc_r+0x92>
 8011f66:	230c      	movs	r3, #12
 8011f68:	6033      	str	r3, [r6, #0]
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	f000 fe26 	bl	8012bbc <__malloc_unlock>
 8011f70:	e7e3      	b.n	8011f3a <_malloc_r+0x1e>
 8011f72:	6823      	ldr	r3, [r4, #0]
 8011f74:	1b5b      	subs	r3, r3, r5
 8011f76:	d417      	bmi.n	8011fa8 <_malloc_r+0x8c>
 8011f78:	2b0b      	cmp	r3, #11
 8011f7a:	d903      	bls.n	8011f84 <_malloc_r+0x68>
 8011f7c:	6023      	str	r3, [r4, #0]
 8011f7e:	441c      	add	r4, r3
 8011f80:	6025      	str	r5, [r4, #0]
 8011f82:	e004      	b.n	8011f8e <_malloc_r+0x72>
 8011f84:	6863      	ldr	r3, [r4, #4]
 8011f86:	42a2      	cmp	r2, r4
 8011f88:	bf0c      	ite	eq
 8011f8a:	600b      	streq	r3, [r1, #0]
 8011f8c:	6053      	strne	r3, [r2, #4]
 8011f8e:	4630      	mov	r0, r6
 8011f90:	f000 fe14 	bl	8012bbc <__malloc_unlock>
 8011f94:	f104 000b 	add.w	r0, r4, #11
 8011f98:	1d23      	adds	r3, r4, #4
 8011f9a:	f020 0007 	bic.w	r0, r0, #7
 8011f9e:	1ac2      	subs	r2, r0, r3
 8011fa0:	d0cc      	beq.n	8011f3c <_malloc_r+0x20>
 8011fa2:	1a1b      	subs	r3, r3, r0
 8011fa4:	50a3      	str	r3, [r4, r2]
 8011fa6:	e7c9      	b.n	8011f3c <_malloc_r+0x20>
 8011fa8:	4622      	mov	r2, r4
 8011faa:	6864      	ldr	r4, [r4, #4]
 8011fac:	e7cc      	b.n	8011f48 <_malloc_r+0x2c>
 8011fae:	1cc4      	adds	r4, r0, #3
 8011fb0:	f024 0403 	bic.w	r4, r4, #3
 8011fb4:	42a0      	cmp	r0, r4
 8011fb6:	d0e3      	beq.n	8011f80 <_malloc_r+0x64>
 8011fb8:	1a21      	subs	r1, r4, r0
 8011fba:	4630      	mov	r0, r6
 8011fbc:	f000 fac8 	bl	8012550 <_sbrk_r>
 8011fc0:	3001      	adds	r0, #1
 8011fc2:	d1dd      	bne.n	8011f80 <_malloc_r+0x64>
 8011fc4:	e7cf      	b.n	8011f66 <_malloc_r+0x4a>
 8011fc6:	bf00      	nop
 8011fc8:	20004c80 	.word	0x20004c80
 8011fcc:	20004c84 	.word	0x20004c84

08011fd0 <__ssputs_r>:
 8011fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fd4:	688e      	ldr	r6, [r1, #8]
 8011fd6:	429e      	cmp	r6, r3
 8011fd8:	4682      	mov	sl, r0
 8011fda:	460c      	mov	r4, r1
 8011fdc:	4690      	mov	r8, r2
 8011fde:	461f      	mov	r7, r3
 8011fe0:	d838      	bhi.n	8012054 <__ssputs_r+0x84>
 8011fe2:	898a      	ldrh	r2, [r1, #12]
 8011fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011fe8:	d032      	beq.n	8012050 <__ssputs_r+0x80>
 8011fea:	6825      	ldr	r5, [r4, #0]
 8011fec:	6909      	ldr	r1, [r1, #16]
 8011fee:	eba5 0901 	sub.w	r9, r5, r1
 8011ff2:	6965      	ldr	r5, [r4, #20]
 8011ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	444b      	add	r3, r9
 8012000:	106d      	asrs	r5, r5, #1
 8012002:	429d      	cmp	r5, r3
 8012004:	bf38      	it	cc
 8012006:	461d      	movcc	r5, r3
 8012008:	0553      	lsls	r3, r2, #21
 801200a:	d531      	bpl.n	8012070 <__ssputs_r+0xa0>
 801200c:	4629      	mov	r1, r5
 801200e:	f7ff ff85 	bl	8011f1c <_malloc_r>
 8012012:	4606      	mov	r6, r0
 8012014:	b950      	cbnz	r0, 801202c <__ssputs_r+0x5c>
 8012016:	230c      	movs	r3, #12
 8012018:	f8ca 3000 	str.w	r3, [sl]
 801201c:	89a3      	ldrh	r3, [r4, #12]
 801201e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012022:	81a3      	strh	r3, [r4, #12]
 8012024:	f04f 30ff 	mov.w	r0, #4294967295
 8012028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801202c:	6921      	ldr	r1, [r4, #16]
 801202e:	464a      	mov	r2, r9
 8012030:	f7fc fc4a 	bl	800e8c8 <memcpy>
 8012034:	89a3      	ldrh	r3, [r4, #12]
 8012036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801203a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801203e:	81a3      	strh	r3, [r4, #12]
 8012040:	6126      	str	r6, [r4, #16]
 8012042:	6165      	str	r5, [r4, #20]
 8012044:	444e      	add	r6, r9
 8012046:	eba5 0509 	sub.w	r5, r5, r9
 801204a:	6026      	str	r6, [r4, #0]
 801204c:	60a5      	str	r5, [r4, #8]
 801204e:	463e      	mov	r6, r7
 8012050:	42be      	cmp	r6, r7
 8012052:	d900      	bls.n	8012056 <__ssputs_r+0x86>
 8012054:	463e      	mov	r6, r7
 8012056:	4632      	mov	r2, r6
 8012058:	6820      	ldr	r0, [r4, #0]
 801205a:	4641      	mov	r1, r8
 801205c:	f000 fd8e 	bl	8012b7c <memmove>
 8012060:	68a3      	ldr	r3, [r4, #8]
 8012062:	6822      	ldr	r2, [r4, #0]
 8012064:	1b9b      	subs	r3, r3, r6
 8012066:	4432      	add	r2, r6
 8012068:	60a3      	str	r3, [r4, #8]
 801206a:	6022      	str	r2, [r4, #0]
 801206c:	2000      	movs	r0, #0
 801206e:	e7db      	b.n	8012028 <__ssputs_r+0x58>
 8012070:	462a      	mov	r2, r5
 8012072:	f000 fda9 	bl	8012bc8 <_realloc_r>
 8012076:	4606      	mov	r6, r0
 8012078:	2800      	cmp	r0, #0
 801207a:	d1e1      	bne.n	8012040 <__ssputs_r+0x70>
 801207c:	6921      	ldr	r1, [r4, #16]
 801207e:	4650      	mov	r0, sl
 8012080:	f7ff fefc 	bl	8011e7c <_free_r>
 8012084:	e7c7      	b.n	8012016 <__ssputs_r+0x46>
	...

08012088 <_svfiprintf_r>:
 8012088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208c:	4698      	mov	r8, r3
 801208e:	898b      	ldrh	r3, [r1, #12]
 8012090:	061b      	lsls	r3, r3, #24
 8012092:	b09d      	sub	sp, #116	; 0x74
 8012094:	4607      	mov	r7, r0
 8012096:	460d      	mov	r5, r1
 8012098:	4614      	mov	r4, r2
 801209a:	d50e      	bpl.n	80120ba <_svfiprintf_r+0x32>
 801209c:	690b      	ldr	r3, [r1, #16]
 801209e:	b963      	cbnz	r3, 80120ba <_svfiprintf_r+0x32>
 80120a0:	2140      	movs	r1, #64	; 0x40
 80120a2:	f7ff ff3b 	bl	8011f1c <_malloc_r>
 80120a6:	6028      	str	r0, [r5, #0]
 80120a8:	6128      	str	r0, [r5, #16]
 80120aa:	b920      	cbnz	r0, 80120b6 <_svfiprintf_r+0x2e>
 80120ac:	230c      	movs	r3, #12
 80120ae:	603b      	str	r3, [r7, #0]
 80120b0:	f04f 30ff 	mov.w	r0, #4294967295
 80120b4:	e0d1      	b.n	801225a <_svfiprintf_r+0x1d2>
 80120b6:	2340      	movs	r3, #64	; 0x40
 80120b8:	616b      	str	r3, [r5, #20]
 80120ba:	2300      	movs	r3, #0
 80120bc:	9309      	str	r3, [sp, #36]	; 0x24
 80120be:	2320      	movs	r3, #32
 80120c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80120c8:	2330      	movs	r3, #48	; 0x30
 80120ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012274 <_svfiprintf_r+0x1ec>
 80120ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120d2:	f04f 0901 	mov.w	r9, #1
 80120d6:	4623      	mov	r3, r4
 80120d8:	469a      	mov	sl, r3
 80120da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120de:	b10a      	cbz	r2, 80120e4 <_svfiprintf_r+0x5c>
 80120e0:	2a25      	cmp	r2, #37	; 0x25
 80120e2:	d1f9      	bne.n	80120d8 <_svfiprintf_r+0x50>
 80120e4:	ebba 0b04 	subs.w	fp, sl, r4
 80120e8:	d00b      	beq.n	8012102 <_svfiprintf_r+0x7a>
 80120ea:	465b      	mov	r3, fp
 80120ec:	4622      	mov	r2, r4
 80120ee:	4629      	mov	r1, r5
 80120f0:	4638      	mov	r0, r7
 80120f2:	f7ff ff6d 	bl	8011fd0 <__ssputs_r>
 80120f6:	3001      	adds	r0, #1
 80120f8:	f000 80aa 	beq.w	8012250 <_svfiprintf_r+0x1c8>
 80120fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120fe:	445a      	add	r2, fp
 8012100:	9209      	str	r2, [sp, #36]	; 0x24
 8012102:	f89a 3000 	ldrb.w	r3, [sl]
 8012106:	2b00      	cmp	r3, #0
 8012108:	f000 80a2 	beq.w	8012250 <_svfiprintf_r+0x1c8>
 801210c:	2300      	movs	r3, #0
 801210e:	f04f 32ff 	mov.w	r2, #4294967295
 8012112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012116:	f10a 0a01 	add.w	sl, sl, #1
 801211a:	9304      	str	r3, [sp, #16]
 801211c:	9307      	str	r3, [sp, #28]
 801211e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012122:	931a      	str	r3, [sp, #104]	; 0x68
 8012124:	4654      	mov	r4, sl
 8012126:	2205      	movs	r2, #5
 8012128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801212c:	4851      	ldr	r0, [pc, #324]	; (8012274 <_svfiprintf_r+0x1ec>)
 801212e:	f7ee f85f 	bl	80001f0 <memchr>
 8012132:	9a04      	ldr	r2, [sp, #16]
 8012134:	b9d8      	cbnz	r0, 801216e <_svfiprintf_r+0xe6>
 8012136:	06d0      	lsls	r0, r2, #27
 8012138:	bf44      	itt	mi
 801213a:	2320      	movmi	r3, #32
 801213c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012140:	0711      	lsls	r1, r2, #28
 8012142:	bf44      	itt	mi
 8012144:	232b      	movmi	r3, #43	; 0x2b
 8012146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801214a:	f89a 3000 	ldrb.w	r3, [sl]
 801214e:	2b2a      	cmp	r3, #42	; 0x2a
 8012150:	d015      	beq.n	801217e <_svfiprintf_r+0xf6>
 8012152:	9a07      	ldr	r2, [sp, #28]
 8012154:	4654      	mov	r4, sl
 8012156:	2000      	movs	r0, #0
 8012158:	f04f 0c0a 	mov.w	ip, #10
 801215c:	4621      	mov	r1, r4
 801215e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012162:	3b30      	subs	r3, #48	; 0x30
 8012164:	2b09      	cmp	r3, #9
 8012166:	d94e      	bls.n	8012206 <_svfiprintf_r+0x17e>
 8012168:	b1b0      	cbz	r0, 8012198 <_svfiprintf_r+0x110>
 801216a:	9207      	str	r2, [sp, #28]
 801216c:	e014      	b.n	8012198 <_svfiprintf_r+0x110>
 801216e:	eba0 0308 	sub.w	r3, r0, r8
 8012172:	fa09 f303 	lsl.w	r3, r9, r3
 8012176:	4313      	orrs	r3, r2
 8012178:	9304      	str	r3, [sp, #16]
 801217a:	46a2      	mov	sl, r4
 801217c:	e7d2      	b.n	8012124 <_svfiprintf_r+0x9c>
 801217e:	9b03      	ldr	r3, [sp, #12]
 8012180:	1d19      	adds	r1, r3, #4
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	9103      	str	r1, [sp, #12]
 8012186:	2b00      	cmp	r3, #0
 8012188:	bfbb      	ittet	lt
 801218a:	425b      	neglt	r3, r3
 801218c:	f042 0202 	orrlt.w	r2, r2, #2
 8012190:	9307      	strge	r3, [sp, #28]
 8012192:	9307      	strlt	r3, [sp, #28]
 8012194:	bfb8      	it	lt
 8012196:	9204      	strlt	r2, [sp, #16]
 8012198:	7823      	ldrb	r3, [r4, #0]
 801219a:	2b2e      	cmp	r3, #46	; 0x2e
 801219c:	d10c      	bne.n	80121b8 <_svfiprintf_r+0x130>
 801219e:	7863      	ldrb	r3, [r4, #1]
 80121a0:	2b2a      	cmp	r3, #42	; 0x2a
 80121a2:	d135      	bne.n	8012210 <_svfiprintf_r+0x188>
 80121a4:	9b03      	ldr	r3, [sp, #12]
 80121a6:	1d1a      	adds	r2, r3, #4
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	9203      	str	r2, [sp, #12]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	bfb8      	it	lt
 80121b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80121b4:	3402      	adds	r4, #2
 80121b6:	9305      	str	r3, [sp, #20]
 80121b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012284 <_svfiprintf_r+0x1fc>
 80121bc:	7821      	ldrb	r1, [r4, #0]
 80121be:	2203      	movs	r2, #3
 80121c0:	4650      	mov	r0, sl
 80121c2:	f7ee f815 	bl	80001f0 <memchr>
 80121c6:	b140      	cbz	r0, 80121da <_svfiprintf_r+0x152>
 80121c8:	2340      	movs	r3, #64	; 0x40
 80121ca:	eba0 000a 	sub.w	r0, r0, sl
 80121ce:	fa03 f000 	lsl.w	r0, r3, r0
 80121d2:	9b04      	ldr	r3, [sp, #16]
 80121d4:	4303      	orrs	r3, r0
 80121d6:	3401      	adds	r4, #1
 80121d8:	9304      	str	r3, [sp, #16]
 80121da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121de:	4826      	ldr	r0, [pc, #152]	; (8012278 <_svfiprintf_r+0x1f0>)
 80121e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121e4:	2206      	movs	r2, #6
 80121e6:	f7ee f803 	bl	80001f0 <memchr>
 80121ea:	2800      	cmp	r0, #0
 80121ec:	d038      	beq.n	8012260 <_svfiprintf_r+0x1d8>
 80121ee:	4b23      	ldr	r3, [pc, #140]	; (801227c <_svfiprintf_r+0x1f4>)
 80121f0:	bb1b      	cbnz	r3, 801223a <_svfiprintf_r+0x1b2>
 80121f2:	9b03      	ldr	r3, [sp, #12]
 80121f4:	3307      	adds	r3, #7
 80121f6:	f023 0307 	bic.w	r3, r3, #7
 80121fa:	3308      	adds	r3, #8
 80121fc:	9303      	str	r3, [sp, #12]
 80121fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012200:	4433      	add	r3, r6
 8012202:	9309      	str	r3, [sp, #36]	; 0x24
 8012204:	e767      	b.n	80120d6 <_svfiprintf_r+0x4e>
 8012206:	fb0c 3202 	mla	r2, ip, r2, r3
 801220a:	460c      	mov	r4, r1
 801220c:	2001      	movs	r0, #1
 801220e:	e7a5      	b.n	801215c <_svfiprintf_r+0xd4>
 8012210:	2300      	movs	r3, #0
 8012212:	3401      	adds	r4, #1
 8012214:	9305      	str	r3, [sp, #20]
 8012216:	4619      	mov	r1, r3
 8012218:	f04f 0c0a 	mov.w	ip, #10
 801221c:	4620      	mov	r0, r4
 801221e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012222:	3a30      	subs	r2, #48	; 0x30
 8012224:	2a09      	cmp	r2, #9
 8012226:	d903      	bls.n	8012230 <_svfiprintf_r+0x1a8>
 8012228:	2b00      	cmp	r3, #0
 801222a:	d0c5      	beq.n	80121b8 <_svfiprintf_r+0x130>
 801222c:	9105      	str	r1, [sp, #20]
 801222e:	e7c3      	b.n	80121b8 <_svfiprintf_r+0x130>
 8012230:	fb0c 2101 	mla	r1, ip, r1, r2
 8012234:	4604      	mov	r4, r0
 8012236:	2301      	movs	r3, #1
 8012238:	e7f0      	b.n	801221c <_svfiprintf_r+0x194>
 801223a:	ab03      	add	r3, sp, #12
 801223c:	9300      	str	r3, [sp, #0]
 801223e:	462a      	mov	r2, r5
 8012240:	4b0f      	ldr	r3, [pc, #60]	; (8012280 <_svfiprintf_r+0x1f8>)
 8012242:	a904      	add	r1, sp, #16
 8012244:	4638      	mov	r0, r7
 8012246:	f7fc fbf5 	bl	800ea34 <_printf_float>
 801224a:	1c42      	adds	r2, r0, #1
 801224c:	4606      	mov	r6, r0
 801224e:	d1d6      	bne.n	80121fe <_svfiprintf_r+0x176>
 8012250:	89ab      	ldrh	r3, [r5, #12]
 8012252:	065b      	lsls	r3, r3, #25
 8012254:	f53f af2c 	bmi.w	80120b0 <_svfiprintf_r+0x28>
 8012258:	9809      	ldr	r0, [sp, #36]	; 0x24
 801225a:	b01d      	add	sp, #116	; 0x74
 801225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012260:	ab03      	add	r3, sp, #12
 8012262:	9300      	str	r3, [sp, #0]
 8012264:	462a      	mov	r2, r5
 8012266:	4b06      	ldr	r3, [pc, #24]	; (8012280 <_svfiprintf_r+0x1f8>)
 8012268:	a904      	add	r1, sp, #16
 801226a:	4638      	mov	r0, r7
 801226c:	f7fc fe86 	bl	800ef7c <_printf_i>
 8012270:	e7eb      	b.n	801224a <_svfiprintf_r+0x1c2>
 8012272:	bf00      	nop
 8012274:	0801386c 	.word	0x0801386c
 8012278:	08013876 	.word	0x08013876
 801227c:	0800ea35 	.word	0x0800ea35
 8012280:	08011fd1 	.word	0x08011fd1
 8012284:	08013872 	.word	0x08013872

08012288 <__sfputc_r>:
 8012288:	6893      	ldr	r3, [r2, #8]
 801228a:	3b01      	subs	r3, #1
 801228c:	2b00      	cmp	r3, #0
 801228e:	b410      	push	{r4}
 8012290:	6093      	str	r3, [r2, #8]
 8012292:	da08      	bge.n	80122a6 <__sfputc_r+0x1e>
 8012294:	6994      	ldr	r4, [r2, #24]
 8012296:	42a3      	cmp	r3, r4
 8012298:	db01      	blt.n	801229e <__sfputc_r+0x16>
 801229a:	290a      	cmp	r1, #10
 801229c:	d103      	bne.n	80122a6 <__sfputc_r+0x1e>
 801229e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122a2:	f000 b977 	b.w	8012594 <__swbuf_r>
 80122a6:	6813      	ldr	r3, [r2, #0]
 80122a8:	1c58      	adds	r0, r3, #1
 80122aa:	6010      	str	r0, [r2, #0]
 80122ac:	7019      	strb	r1, [r3, #0]
 80122ae:	4608      	mov	r0, r1
 80122b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <__sfputs_r>:
 80122b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122b8:	4606      	mov	r6, r0
 80122ba:	460f      	mov	r7, r1
 80122bc:	4614      	mov	r4, r2
 80122be:	18d5      	adds	r5, r2, r3
 80122c0:	42ac      	cmp	r4, r5
 80122c2:	d101      	bne.n	80122c8 <__sfputs_r+0x12>
 80122c4:	2000      	movs	r0, #0
 80122c6:	e007      	b.n	80122d8 <__sfputs_r+0x22>
 80122c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122cc:	463a      	mov	r2, r7
 80122ce:	4630      	mov	r0, r6
 80122d0:	f7ff ffda 	bl	8012288 <__sfputc_r>
 80122d4:	1c43      	adds	r3, r0, #1
 80122d6:	d1f3      	bne.n	80122c0 <__sfputs_r+0xa>
 80122d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080122dc <_vfiprintf_r>:
 80122dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e0:	460d      	mov	r5, r1
 80122e2:	b09d      	sub	sp, #116	; 0x74
 80122e4:	4614      	mov	r4, r2
 80122e6:	4698      	mov	r8, r3
 80122e8:	4606      	mov	r6, r0
 80122ea:	b118      	cbz	r0, 80122f4 <_vfiprintf_r+0x18>
 80122ec:	6983      	ldr	r3, [r0, #24]
 80122ee:	b90b      	cbnz	r3, 80122f4 <_vfiprintf_r+0x18>
 80122f0:	f000 fb40 	bl	8012974 <__sinit>
 80122f4:	4b89      	ldr	r3, [pc, #548]	; (801251c <_vfiprintf_r+0x240>)
 80122f6:	429d      	cmp	r5, r3
 80122f8:	d11b      	bne.n	8012332 <_vfiprintf_r+0x56>
 80122fa:	6875      	ldr	r5, [r6, #4]
 80122fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122fe:	07d9      	lsls	r1, r3, #31
 8012300:	d405      	bmi.n	801230e <_vfiprintf_r+0x32>
 8012302:	89ab      	ldrh	r3, [r5, #12]
 8012304:	059a      	lsls	r2, r3, #22
 8012306:	d402      	bmi.n	801230e <_vfiprintf_r+0x32>
 8012308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801230a:	f000 fbd1 	bl	8012ab0 <__retarget_lock_acquire_recursive>
 801230e:	89ab      	ldrh	r3, [r5, #12]
 8012310:	071b      	lsls	r3, r3, #28
 8012312:	d501      	bpl.n	8012318 <_vfiprintf_r+0x3c>
 8012314:	692b      	ldr	r3, [r5, #16]
 8012316:	b9eb      	cbnz	r3, 8012354 <_vfiprintf_r+0x78>
 8012318:	4629      	mov	r1, r5
 801231a:	4630      	mov	r0, r6
 801231c:	f000 f99a 	bl	8012654 <__swsetup_r>
 8012320:	b1c0      	cbz	r0, 8012354 <_vfiprintf_r+0x78>
 8012322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012324:	07dc      	lsls	r4, r3, #31
 8012326:	d50e      	bpl.n	8012346 <_vfiprintf_r+0x6a>
 8012328:	f04f 30ff 	mov.w	r0, #4294967295
 801232c:	b01d      	add	sp, #116	; 0x74
 801232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012332:	4b7b      	ldr	r3, [pc, #492]	; (8012520 <_vfiprintf_r+0x244>)
 8012334:	429d      	cmp	r5, r3
 8012336:	d101      	bne.n	801233c <_vfiprintf_r+0x60>
 8012338:	68b5      	ldr	r5, [r6, #8]
 801233a:	e7df      	b.n	80122fc <_vfiprintf_r+0x20>
 801233c:	4b79      	ldr	r3, [pc, #484]	; (8012524 <_vfiprintf_r+0x248>)
 801233e:	429d      	cmp	r5, r3
 8012340:	bf08      	it	eq
 8012342:	68f5      	ldreq	r5, [r6, #12]
 8012344:	e7da      	b.n	80122fc <_vfiprintf_r+0x20>
 8012346:	89ab      	ldrh	r3, [r5, #12]
 8012348:	0598      	lsls	r0, r3, #22
 801234a:	d4ed      	bmi.n	8012328 <_vfiprintf_r+0x4c>
 801234c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801234e:	f000 fbb0 	bl	8012ab2 <__retarget_lock_release_recursive>
 8012352:	e7e9      	b.n	8012328 <_vfiprintf_r+0x4c>
 8012354:	2300      	movs	r3, #0
 8012356:	9309      	str	r3, [sp, #36]	; 0x24
 8012358:	2320      	movs	r3, #32
 801235a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801235e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012362:	2330      	movs	r3, #48	; 0x30
 8012364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012528 <_vfiprintf_r+0x24c>
 8012368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801236c:	f04f 0901 	mov.w	r9, #1
 8012370:	4623      	mov	r3, r4
 8012372:	469a      	mov	sl, r3
 8012374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012378:	b10a      	cbz	r2, 801237e <_vfiprintf_r+0xa2>
 801237a:	2a25      	cmp	r2, #37	; 0x25
 801237c:	d1f9      	bne.n	8012372 <_vfiprintf_r+0x96>
 801237e:	ebba 0b04 	subs.w	fp, sl, r4
 8012382:	d00b      	beq.n	801239c <_vfiprintf_r+0xc0>
 8012384:	465b      	mov	r3, fp
 8012386:	4622      	mov	r2, r4
 8012388:	4629      	mov	r1, r5
 801238a:	4630      	mov	r0, r6
 801238c:	f7ff ff93 	bl	80122b6 <__sfputs_r>
 8012390:	3001      	adds	r0, #1
 8012392:	f000 80aa 	beq.w	80124ea <_vfiprintf_r+0x20e>
 8012396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012398:	445a      	add	r2, fp
 801239a:	9209      	str	r2, [sp, #36]	; 0x24
 801239c:	f89a 3000 	ldrb.w	r3, [sl]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	f000 80a2 	beq.w	80124ea <_vfiprintf_r+0x20e>
 80123a6:	2300      	movs	r3, #0
 80123a8:	f04f 32ff 	mov.w	r2, #4294967295
 80123ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123b0:	f10a 0a01 	add.w	sl, sl, #1
 80123b4:	9304      	str	r3, [sp, #16]
 80123b6:	9307      	str	r3, [sp, #28]
 80123b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123bc:	931a      	str	r3, [sp, #104]	; 0x68
 80123be:	4654      	mov	r4, sl
 80123c0:	2205      	movs	r2, #5
 80123c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123c6:	4858      	ldr	r0, [pc, #352]	; (8012528 <_vfiprintf_r+0x24c>)
 80123c8:	f7ed ff12 	bl	80001f0 <memchr>
 80123cc:	9a04      	ldr	r2, [sp, #16]
 80123ce:	b9d8      	cbnz	r0, 8012408 <_vfiprintf_r+0x12c>
 80123d0:	06d1      	lsls	r1, r2, #27
 80123d2:	bf44      	itt	mi
 80123d4:	2320      	movmi	r3, #32
 80123d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123da:	0713      	lsls	r3, r2, #28
 80123dc:	bf44      	itt	mi
 80123de:	232b      	movmi	r3, #43	; 0x2b
 80123e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123e4:	f89a 3000 	ldrb.w	r3, [sl]
 80123e8:	2b2a      	cmp	r3, #42	; 0x2a
 80123ea:	d015      	beq.n	8012418 <_vfiprintf_r+0x13c>
 80123ec:	9a07      	ldr	r2, [sp, #28]
 80123ee:	4654      	mov	r4, sl
 80123f0:	2000      	movs	r0, #0
 80123f2:	f04f 0c0a 	mov.w	ip, #10
 80123f6:	4621      	mov	r1, r4
 80123f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123fc:	3b30      	subs	r3, #48	; 0x30
 80123fe:	2b09      	cmp	r3, #9
 8012400:	d94e      	bls.n	80124a0 <_vfiprintf_r+0x1c4>
 8012402:	b1b0      	cbz	r0, 8012432 <_vfiprintf_r+0x156>
 8012404:	9207      	str	r2, [sp, #28]
 8012406:	e014      	b.n	8012432 <_vfiprintf_r+0x156>
 8012408:	eba0 0308 	sub.w	r3, r0, r8
 801240c:	fa09 f303 	lsl.w	r3, r9, r3
 8012410:	4313      	orrs	r3, r2
 8012412:	9304      	str	r3, [sp, #16]
 8012414:	46a2      	mov	sl, r4
 8012416:	e7d2      	b.n	80123be <_vfiprintf_r+0xe2>
 8012418:	9b03      	ldr	r3, [sp, #12]
 801241a:	1d19      	adds	r1, r3, #4
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	9103      	str	r1, [sp, #12]
 8012420:	2b00      	cmp	r3, #0
 8012422:	bfbb      	ittet	lt
 8012424:	425b      	neglt	r3, r3
 8012426:	f042 0202 	orrlt.w	r2, r2, #2
 801242a:	9307      	strge	r3, [sp, #28]
 801242c:	9307      	strlt	r3, [sp, #28]
 801242e:	bfb8      	it	lt
 8012430:	9204      	strlt	r2, [sp, #16]
 8012432:	7823      	ldrb	r3, [r4, #0]
 8012434:	2b2e      	cmp	r3, #46	; 0x2e
 8012436:	d10c      	bne.n	8012452 <_vfiprintf_r+0x176>
 8012438:	7863      	ldrb	r3, [r4, #1]
 801243a:	2b2a      	cmp	r3, #42	; 0x2a
 801243c:	d135      	bne.n	80124aa <_vfiprintf_r+0x1ce>
 801243e:	9b03      	ldr	r3, [sp, #12]
 8012440:	1d1a      	adds	r2, r3, #4
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	9203      	str	r2, [sp, #12]
 8012446:	2b00      	cmp	r3, #0
 8012448:	bfb8      	it	lt
 801244a:	f04f 33ff 	movlt.w	r3, #4294967295
 801244e:	3402      	adds	r4, #2
 8012450:	9305      	str	r3, [sp, #20]
 8012452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012538 <_vfiprintf_r+0x25c>
 8012456:	7821      	ldrb	r1, [r4, #0]
 8012458:	2203      	movs	r2, #3
 801245a:	4650      	mov	r0, sl
 801245c:	f7ed fec8 	bl	80001f0 <memchr>
 8012460:	b140      	cbz	r0, 8012474 <_vfiprintf_r+0x198>
 8012462:	2340      	movs	r3, #64	; 0x40
 8012464:	eba0 000a 	sub.w	r0, r0, sl
 8012468:	fa03 f000 	lsl.w	r0, r3, r0
 801246c:	9b04      	ldr	r3, [sp, #16]
 801246e:	4303      	orrs	r3, r0
 8012470:	3401      	adds	r4, #1
 8012472:	9304      	str	r3, [sp, #16]
 8012474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012478:	482c      	ldr	r0, [pc, #176]	; (801252c <_vfiprintf_r+0x250>)
 801247a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801247e:	2206      	movs	r2, #6
 8012480:	f7ed feb6 	bl	80001f0 <memchr>
 8012484:	2800      	cmp	r0, #0
 8012486:	d03f      	beq.n	8012508 <_vfiprintf_r+0x22c>
 8012488:	4b29      	ldr	r3, [pc, #164]	; (8012530 <_vfiprintf_r+0x254>)
 801248a:	bb1b      	cbnz	r3, 80124d4 <_vfiprintf_r+0x1f8>
 801248c:	9b03      	ldr	r3, [sp, #12]
 801248e:	3307      	adds	r3, #7
 8012490:	f023 0307 	bic.w	r3, r3, #7
 8012494:	3308      	adds	r3, #8
 8012496:	9303      	str	r3, [sp, #12]
 8012498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801249a:	443b      	add	r3, r7
 801249c:	9309      	str	r3, [sp, #36]	; 0x24
 801249e:	e767      	b.n	8012370 <_vfiprintf_r+0x94>
 80124a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80124a4:	460c      	mov	r4, r1
 80124a6:	2001      	movs	r0, #1
 80124a8:	e7a5      	b.n	80123f6 <_vfiprintf_r+0x11a>
 80124aa:	2300      	movs	r3, #0
 80124ac:	3401      	adds	r4, #1
 80124ae:	9305      	str	r3, [sp, #20]
 80124b0:	4619      	mov	r1, r3
 80124b2:	f04f 0c0a 	mov.w	ip, #10
 80124b6:	4620      	mov	r0, r4
 80124b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124bc:	3a30      	subs	r2, #48	; 0x30
 80124be:	2a09      	cmp	r2, #9
 80124c0:	d903      	bls.n	80124ca <_vfiprintf_r+0x1ee>
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d0c5      	beq.n	8012452 <_vfiprintf_r+0x176>
 80124c6:	9105      	str	r1, [sp, #20]
 80124c8:	e7c3      	b.n	8012452 <_vfiprintf_r+0x176>
 80124ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80124ce:	4604      	mov	r4, r0
 80124d0:	2301      	movs	r3, #1
 80124d2:	e7f0      	b.n	80124b6 <_vfiprintf_r+0x1da>
 80124d4:	ab03      	add	r3, sp, #12
 80124d6:	9300      	str	r3, [sp, #0]
 80124d8:	462a      	mov	r2, r5
 80124da:	4b16      	ldr	r3, [pc, #88]	; (8012534 <_vfiprintf_r+0x258>)
 80124dc:	a904      	add	r1, sp, #16
 80124de:	4630      	mov	r0, r6
 80124e0:	f7fc faa8 	bl	800ea34 <_printf_float>
 80124e4:	4607      	mov	r7, r0
 80124e6:	1c78      	adds	r0, r7, #1
 80124e8:	d1d6      	bne.n	8012498 <_vfiprintf_r+0x1bc>
 80124ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124ec:	07d9      	lsls	r1, r3, #31
 80124ee:	d405      	bmi.n	80124fc <_vfiprintf_r+0x220>
 80124f0:	89ab      	ldrh	r3, [r5, #12]
 80124f2:	059a      	lsls	r2, r3, #22
 80124f4:	d402      	bmi.n	80124fc <_vfiprintf_r+0x220>
 80124f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124f8:	f000 fadb 	bl	8012ab2 <__retarget_lock_release_recursive>
 80124fc:	89ab      	ldrh	r3, [r5, #12]
 80124fe:	065b      	lsls	r3, r3, #25
 8012500:	f53f af12 	bmi.w	8012328 <_vfiprintf_r+0x4c>
 8012504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012506:	e711      	b.n	801232c <_vfiprintf_r+0x50>
 8012508:	ab03      	add	r3, sp, #12
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	462a      	mov	r2, r5
 801250e:	4b09      	ldr	r3, [pc, #36]	; (8012534 <_vfiprintf_r+0x258>)
 8012510:	a904      	add	r1, sp, #16
 8012512:	4630      	mov	r0, r6
 8012514:	f7fc fd32 	bl	800ef7c <_printf_i>
 8012518:	e7e4      	b.n	80124e4 <_vfiprintf_r+0x208>
 801251a:	bf00      	nop
 801251c:	080139a0 	.word	0x080139a0
 8012520:	080139c0 	.word	0x080139c0
 8012524:	08013980 	.word	0x08013980
 8012528:	0801386c 	.word	0x0801386c
 801252c:	08013876 	.word	0x08013876
 8012530:	0800ea35 	.word	0x0800ea35
 8012534:	080122b7 	.word	0x080122b7
 8012538:	08013872 	.word	0x08013872
 801253c:	00000000 	.word	0x00000000

08012540 <nan>:
 8012540:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012548 <nan+0x8>
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop
 8012548:	00000000 	.word	0x00000000
 801254c:	7ff80000 	.word	0x7ff80000

08012550 <_sbrk_r>:
 8012550:	b538      	push	{r3, r4, r5, lr}
 8012552:	4d06      	ldr	r5, [pc, #24]	; (801256c <_sbrk_r+0x1c>)
 8012554:	2300      	movs	r3, #0
 8012556:	4604      	mov	r4, r0
 8012558:	4608      	mov	r0, r1
 801255a:	602b      	str	r3, [r5, #0]
 801255c:	f7f0 fedc 	bl	8003318 <_sbrk>
 8012560:	1c43      	adds	r3, r0, #1
 8012562:	d102      	bne.n	801256a <_sbrk_r+0x1a>
 8012564:	682b      	ldr	r3, [r5, #0]
 8012566:	b103      	cbz	r3, 801256a <_sbrk_r+0x1a>
 8012568:	6023      	str	r3, [r4, #0]
 801256a:	bd38      	pop	{r3, r4, r5, pc}
 801256c:	20005b58 	.word	0x20005b58

08012570 <strncmp>:
 8012570:	b510      	push	{r4, lr}
 8012572:	b16a      	cbz	r2, 8012590 <strncmp+0x20>
 8012574:	3901      	subs	r1, #1
 8012576:	1884      	adds	r4, r0, r2
 8012578:	f810 3b01 	ldrb.w	r3, [r0], #1
 801257c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012580:	4293      	cmp	r3, r2
 8012582:	d103      	bne.n	801258c <strncmp+0x1c>
 8012584:	42a0      	cmp	r0, r4
 8012586:	d001      	beq.n	801258c <strncmp+0x1c>
 8012588:	2b00      	cmp	r3, #0
 801258a:	d1f5      	bne.n	8012578 <strncmp+0x8>
 801258c:	1a98      	subs	r0, r3, r2
 801258e:	bd10      	pop	{r4, pc}
 8012590:	4610      	mov	r0, r2
 8012592:	e7fc      	b.n	801258e <strncmp+0x1e>

08012594 <__swbuf_r>:
 8012594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012596:	460e      	mov	r6, r1
 8012598:	4614      	mov	r4, r2
 801259a:	4605      	mov	r5, r0
 801259c:	b118      	cbz	r0, 80125a6 <__swbuf_r+0x12>
 801259e:	6983      	ldr	r3, [r0, #24]
 80125a0:	b90b      	cbnz	r3, 80125a6 <__swbuf_r+0x12>
 80125a2:	f000 f9e7 	bl	8012974 <__sinit>
 80125a6:	4b21      	ldr	r3, [pc, #132]	; (801262c <__swbuf_r+0x98>)
 80125a8:	429c      	cmp	r4, r3
 80125aa:	d12b      	bne.n	8012604 <__swbuf_r+0x70>
 80125ac:	686c      	ldr	r4, [r5, #4]
 80125ae:	69a3      	ldr	r3, [r4, #24]
 80125b0:	60a3      	str	r3, [r4, #8]
 80125b2:	89a3      	ldrh	r3, [r4, #12]
 80125b4:	071a      	lsls	r2, r3, #28
 80125b6:	d52f      	bpl.n	8012618 <__swbuf_r+0x84>
 80125b8:	6923      	ldr	r3, [r4, #16]
 80125ba:	b36b      	cbz	r3, 8012618 <__swbuf_r+0x84>
 80125bc:	6923      	ldr	r3, [r4, #16]
 80125be:	6820      	ldr	r0, [r4, #0]
 80125c0:	1ac0      	subs	r0, r0, r3
 80125c2:	6963      	ldr	r3, [r4, #20]
 80125c4:	b2f6      	uxtb	r6, r6
 80125c6:	4283      	cmp	r3, r0
 80125c8:	4637      	mov	r7, r6
 80125ca:	dc04      	bgt.n	80125d6 <__swbuf_r+0x42>
 80125cc:	4621      	mov	r1, r4
 80125ce:	4628      	mov	r0, r5
 80125d0:	f000 f93c 	bl	801284c <_fflush_r>
 80125d4:	bb30      	cbnz	r0, 8012624 <__swbuf_r+0x90>
 80125d6:	68a3      	ldr	r3, [r4, #8]
 80125d8:	3b01      	subs	r3, #1
 80125da:	60a3      	str	r3, [r4, #8]
 80125dc:	6823      	ldr	r3, [r4, #0]
 80125de:	1c5a      	adds	r2, r3, #1
 80125e0:	6022      	str	r2, [r4, #0]
 80125e2:	701e      	strb	r6, [r3, #0]
 80125e4:	6963      	ldr	r3, [r4, #20]
 80125e6:	3001      	adds	r0, #1
 80125e8:	4283      	cmp	r3, r0
 80125ea:	d004      	beq.n	80125f6 <__swbuf_r+0x62>
 80125ec:	89a3      	ldrh	r3, [r4, #12]
 80125ee:	07db      	lsls	r3, r3, #31
 80125f0:	d506      	bpl.n	8012600 <__swbuf_r+0x6c>
 80125f2:	2e0a      	cmp	r6, #10
 80125f4:	d104      	bne.n	8012600 <__swbuf_r+0x6c>
 80125f6:	4621      	mov	r1, r4
 80125f8:	4628      	mov	r0, r5
 80125fa:	f000 f927 	bl	801284c <_fflush_r>
 80125fe:	b988      	cbnz	r0, 8012624 <__swbuf_r+0x90>
 8012600:	4638      	mov	r0, r7
 8012602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012604:	4b0a      	ldr	r3, [pc, #40]	; (8012630 <__swbuf_r+0x9c>)
 8012606:	429c      	cmp	r4, r3
 8012608:	d101      	bne.n	801260e <__swbuf_r+0x7a>
 801260a:	68ac      	ldr	r4, [r5, #8]
 801260c:	e7cf      	b.n	80125ae <__swbuf_r+0x1a>
 801260e:	4b09      	ldr	r3, [pc, #36]	; (8012634 <__swbuf_r+0xa0>)
 8012610:	429c      	cmp	r4, r3
 8012612:	bf08      	it	eq
 8012614:	68ec      	ldreq	r4, [r5, #12]
 8012616:	e7ca      	b.n	80125ae <__swbuf_r+0x1a>
 8012618:	4621      	mov	r1, r4
 801261a:	4628      	mov	r0, r5
 801261c:	f000 f81a 	bl	8012654 <__swsetup_r>
 8012620:	2800      	cmp	r0, #0
 8012622:	d0cb      	beq.n	80125bc <__swbuf_r+0x28>
 8012624:	f04f 37ff 	mov.w	r7, #4294967295
 8012628:	e7ea      	b.n	8012600 <__swbuf_r+0x6c>
 801262a:	bf00      	nop
 801262c:	080139a0 	.word	0x080139a0
 8012630:	080139c0 	.word	0x080139c0
 8012634:	08013980 	.word	0x08013980

08012638 <__ascii_wctomb>:
 8012638:	b149      	cbz	r1, 801264e <__ascii_wctomb+0x16>
 801263a:	2aff      	cmp	r2, #255	; 0xff
 801263c:	bf85      	ittet	hi
 801263e:	238a      	movhi	r3, #138	; 0x8a
 8012640:	6003      	strhi	r3, [r0, #0]
 8012642:	700a      	strbls	r2, [r1, #0]
 8012644:	f04f 30ff 	movhi.w	r0, #4294967295
 8012648:	bf98      	it	ls
 801264a:	2001      	movls	r0, #1
 801264c:	4770      	bx	lr
 801264e:	4608      	mov	r0, r1
 8012650:	4770      	bx	lr
	...

08012654 <__swsetup_r>:
 8012654:	4b32      	ldr	r3, [pc, #200]	; (8012720 <__swsetup_r+0xcc>)
 8012656:	b570      	push	{r4, r5, r6, lr}
 8012658:	681d      	ldr	r5, [r3, #0]
 801265a:	4606      	mov	r6, r0
 801265c:	460c      	mov	r4, r1
 801265e:	b125      	cbz	r5, 801266a <__swsetup_r+0x16>
 8012660:	69ab      	ldr	r3, [r5, #24]
 8012662:	b913      	cbnz	r3, 801266a <__swsetup_r+0x16>
 8012664:	4628      	mov	r0, r5
 8012666:	f000 f985 	bl	8012974 <__sinit>
 801266a:	4b2e      	ldr	r3, [pc, #184]	; (8012724 <__swsetup_r+0xd0>)
 801266c:	429c      	cmp	r4, r3
 801266e:	d10f      	bne.n	8012690 <__swsetup_r+0x3c>
 8012670:	686c      	ldr	r4, [r5, #4]
 8012672:	89a3      	ldrh	r3, [r4, #12]
 8012674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012678:	0719      	lsls	r1, r3, #28
 801267a:	d42c      	bmi.n	80126d6 <__swsetup_r+0x82>
 801267c:	06dd      	lsls	r5, r3, #27
 801267e:	d411      	bmi.n	80126a4 <__swsetup_r+0x50>
 8012680:	2309      	movs	r3, #9
 8012682:	6033      	str	r3, [r6, #0]
 8012684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012688:	81a3      	strh	r3, [r4, #12]
 801268a:	f04f 30ff 	mov.w	r0, #4294967295
 801268e:	e03e      	b.n	801270e <__swsetup_r+0xba>
 8012690:	4b25      	ldr	r3, [pc, #148]	; (8012728 <__swsetup_r+0xd4>)
 8012692:	429c      	cmp	r4, r3
 8012694:	d101      	bne.n	801269a <__swsetup_r+0x46>
 8012696:	68ac      	ldr	r4, [r5, #8]
 8012698:	e7eb      	b.n	8012672 <__swsetup_r+0x1e>
 801269a:	4b24      	ldr	r3, [pc, #144]	; (801272c <__swsetup_r+0xd8>)
 801269c:	429c      	cmp	r4, r3
 801269e:	bf08      	it	eq
 80126a0:	68ec      	ldreq	r4, [r5, #12]
 80126a2:	e7e6      	b.n	8012672 <__swsetup_r+0x1e>
 80126a4:	0758      	lsls	r0, r3, #29
 80126a6:	d512      	bpl.n	80126ce <__swsetup_r+0x7a>
 80126a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126aa:	b141      	cbz	r1, 80126be <__swsetup_r+0x6a>
 80126ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126b0:	4299      	cmp	r1, r3
 80126b2:	d002      	beq.n	80126ba <__swsetup_r+0x66>
 80126b4:	4630      	mov	r0, r6
 80126b6:	f7ff fbe1 	bl	8011e7c <_free_r>
 80126ba:	2300      	movs	r3, #0
 80126bc:	6363      	str	r3, [r4, #52]	; 0x34
 80126be:	89a3      	ldrh	r3, [r4, #12]
 80126c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80126c4:	81a3      	strh	r3, [r4, #12]
 80126c6:	2300      	movs	r3, #0
 80126c8:	6063      	str	r3, [r4, #4]
 80126ca:	6923      	ldr	r3, [r4, #16]
 80126cc:	6023      	str	r3, [r4, #0]
 80126ce:	89a3      	ldrh	r3, [r4, #12]
 80126d0:	f043 0308 	orr.w	r3, r3, #8
 80126d4:	81a3      	strh	r3, [r4, #12]
 80126d6:	6923      	ldr	r3, [r4, #16]
 80126d8:	b94b      	cbnz	r3, 80126ee <__swsetup_r+0x9a>
 80126da:	89a3      	ldrh	r3, [r4, #12]
 80126dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80126e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126e4:	d003      	beq.n	80126ee <__swsetup_r+0x9a>
 80126e6:	4621      	mov	r1, r4
 80126e8:	4630      	mov	r0, r6
 80126ea:	f000 fa07 	bl	8012afc <__smakebuf_r>
 80126ee:	89a0      	ldrh	r0, [r4, #12]
 80126f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126f4:	f010 0301 	ands.w	r3, r0, #1
 80126f8:	d00a      	beq.n	8012710 <__swsetup_r+0xbc>
 80126fa:	2300      	movs	r3, #0
 80126fc:	60a3      	str	r3, [r4, #8]
 80126fe:	6963      	ldr	r3, [r4, #20]
 8012700:	425b      	negs	r3, r3
 8012702:	61a3      	str	r3, [r4, #24]
 8012704:	6923      	ldr	r3, [r4, #16]
 8012706:	b943      	cbnz	r3, 801271a <__swsetup_r+0xc6>
 8012708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801270c:	d1ba      	bne.n	8012684 <__swsetup_r+0x30>
 801270e:	bd70      	pop	{r4, r5, r6, pc}
 8012710:	0781      	lsls	r1, r0, #30
 8012712:	bf58      	it	pl
 8012714:	6963      	ldrpl	r3, [r4, #20]
 8012716:	60a3      	str	r3, [r4, #8]
 8012718:	e7f4      	b.n	8012704 <__swsetup_r+0xb0>
 801271a:	2000      	movs	r0, #0
 801271c:	e7f7      	b.n	801270e <__swsetup_r+0xba>
 801271e:	bf00      	nop
 8012720:	20000028 	.word	0x20000028
 8012724:	080139a0 	.word	0x080139a0
 8012728:	080139c0 	.word	0x080139c0
 801272c:	08013980 	.word	0x08013980

08012730 <abort>:
 8012730:	b508      	push	{r3, lr}
 8012732:	2006      	movs	r0, #6
 8012734:	f000 fa96 	bl	8012c64 <raise>
 8012738:	2001      	movs	r0, #1
 801273a:	f7f0 fd75 	bl	8003228 <_exit>
	...

08012740 <__sflush_r>:
 8012740:	898a      	ldrh	r2, [r1, #12]
 8012742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012746:	4605      	mov	r5, r0
 8012748:	0710      	lsls	r0, r2, #28
 801274a:	460c      	mov	r4, r1
 801274c:	d458      	bmi.n	8012800 <__sflush_r+0xc0>
 801274e:	684b      	ldr	r3, [r1, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	dc05      	bgt.n	8012760 <__sflush_r+0x20>
 8012754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012756:	2b00      	cmp	r3, #0
 8012758:	dc02      	bgt.n	8012760 <__sflush_r+0x20>
 801275a:	2000      	movs	r0, #0
 801275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012762:	2e00      	cmp	r6, #0
 8012764:	d0f9      	beq.n	801275a <__sflush_r+0x1a>
 8012766:	2300      	movs	r3, #0
 8012768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801276c:	682f      	ldr	r7, [r5, #0]
 801276e:	602b      	str	r3, [r5, #0]
 8012770:	d032      	beq.n	80127d8 <__sflush_r+0x98>
 8012772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012774:	89a3      	ldrh	r3, [r4, #12]
 8012776:	075a      	lsls	r2, r3, #29
 8012778:	d505      	bpl.n	8012786 <__sflush_r+0x46>
 801277a:	6863      	ldr	r3, [r4, #4]
 801277c:	1ac0      	subs	r0, r0, r3
 801277e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012780:	b10b      	cbz	r3, 8012786 <__sflush_r+0x46>
 8012782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012784:	1ac0      	subs	r0, r0, r3
 8012786:	2300      	movs	r3, #0
 8012788:	4602      	mov	r2, r0
 801278a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801278c:	6a21      	ldr	r1, [r4, #32]
 801278e:	4628      	mov	r0, r5
 8012790:	47b0      	blx	r6
 8012792:	1c43      	adds	r3, r0, #1
 8012794:	89a3      	ldrh	r3, [r4, #12]
 8012796:	d106      	bne.n	80127a6 <__sflush_r+0x66>
 8012798:	6829      	ldr	r1, [r5, #0]
 801279a:	291d      	cmp	r1, #29
 801279c:	d82c      	bhi.n	80127f8 <__sflush_r+0xb8>
 801279e:	4a2a      	ldr	r2, [pc, #168]	; (8012848 <__sflush_r+0x108>)
 80127a0:	40ca      	lsrs	r2, r1
 80127a2:	07d6      	lsls	r6, r2, #31
 80127a4:	d528      	bpl.n	80127f8 <__sflush_r+0xb8>
 80127a6:	2200      	movs	r2, #0
 80127a8:	6062      	str	r2, [r4, #4]
 80127aa:	04d9      	lsls	r1, r3, #19
 80127ac:	6922      	ldr	r2, [r4, #16]
 80127ae:	6022      	str	r2, [r4, #0]
 80127b0:	d504      	bpl.n	80127bc <__sflush_r+0x7c>
 80127b2:	1c42      	adds	r2, r0, #1
 80127b4:	d101      	bne.n	80127ba <__sflush_r+0x7a>
 80127b6:	682b      	ldr	r3, [r5, #0]
 80127b8:	b903      	cbnz	r3, 80127bc <__sflush_r+0x7c>
 80127ba:	6560      	str	r0, [r4, #84]	; 0x54
 80127bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127be:	602f      	str	r7, [r5, #0]
 80127c0:	2900      	cmp	r1, #0
 80127c2:	d0ca      	beq.n	801275a <__sflush_r+0x1a>
 80127c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127c8:	4299      	cmp	r1, r3
 80127ca:	d002      	beq.n	80127d2 <__sflush_r+0x92>
 80127cc:	4628      	mov	r0, r5
 80127ce:	f7ff fb55 	bl	8011e7c <_free_r>
 80127d2:	2000      	movs	r0, #0
 80127d4:	6360      	str	r0, [r4, #52]	; 0x34
 80127d6:	e7c1      	b.n	801275c <__sflush_r+0x1c>
 80127d8:	6a21      	ldr	r1, [r4, #32]
 80127da:	2301      	movs	r3, #1
 80127dc:	4628      	mov	r0, r5
 80127de:	47b0      	blx	r6
 80127e0:	1c41      	adds	r1, r0, #1
 80127e2:	d1c7      	bne.n	8012774 <__sflush_r+0x34>
 80127e4:	682b      	ldr	r3, [r5, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d0c4      	beq.n	8012774 <__sflush_r+0x34>
 80127ea:	2b1d      	cmp	r3, #29
 80127ec:	d001      	beq.n	80127f2 <__sflush_r+0xb2>
 80127ee:	2b16      	cmp	r3, #22
 80127f0:	d101      	bne.n	80127f6 <__sflush_r+0xb6>
 80127f2:	602f      	str	r7, [r5, #0]
 80127f4:	e7b1      	b.n	801275a <__sflush_r+0x1a>
 80127f6:	89a3      	ldrh	r3, [r4, #12]
 80127f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127fc:	81a3      	strh	r3, [r4, #12]
 80127fe:	e7ad      	b.n	801275c <__sflush_r+0x1c>
 8012800:	690f      	ldr	r7, [r1, #16]
 8012802:	2f00      	cmp	r7, #0
 8012804:	d0a9      	beq.n	801275a <__sflush_r+0x1a>
 8012806:	0793      	lsls	r3, r2, #30
 8012808:	680e      	ldr	r6, [r1, #0]
 801280a:	bf08      	it	eq
 801280c:	694b      	ldreq	r3, [r1, #20]
 801280e:	600f      	str	r7, [r1, #0]
 8012810:	bf18      	it	ne
 8012812:	2300      	movne	r3, #0
 8012814:	eba6 0807 	sub.w	r8, r6, r7
 8012818:	608b      	str	r3, [r1, #8]
 801281a:	f1b8 0f00 	cmp.w	r8, #0
 801281e:	dd9c      	ble.n	801275a <__sflush_r+0x1a>
 8012820:	6a21      	ldr	r1, [r4, #32]
 8012822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012824:	4643      	mov	r3, r8
 8012826:	463a      	mov	r2, r7
 8012828:	4628      	mov	r0, r5
 801282a:	47b0      	blx	r6
 801282c:	2800      	cmp	r0, #0
 801282e:	dc06      	bgt.n	801283e <__sflush_r+0xfe>
 8012830:	89a3      	ldrh	r3, [r4, #12]
 8012832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012836:	81a3      	strh	r3, [r4, #12]
 8012838:	f04f 30ff 	mov.w	r0, #4294967295
 801283c:	e78e      	b.n	801275c <__sflush_r+0x1c>
 801283e:	4407      	add	r7, r0
 8012840:	eba8 0800 	sub.w	r8, r8, r0
 8012844:	e7e9      	b.n	801281a <__sflush_r+0xda>
 8012846:	bf00      	nop
 8012848:	20400001 	.word	0x20400001

0801284c <_fflush_r>:
 801284c:	b538      	push	{r3, r4, r5, lr}
 801284e:	690b      	ldr	r3, [r1, #16]
 8012850:	4605      	mov	r5, r0
 8012852:	460c      	mov	r4, r1
 8012854:	b913      	cbnz	r3, 801285c <_fflush_r+0x10>
 8012856:	2500      	movs	r5, #0
 8012858:	4628      	mov	r0, r5
 801285a:	bd38      	pop	{r3, r4, r5, pc}
 801285c:	b118      	cbz	r0, 8012866 <_fflush_r+0x1a>
 801285e:	6983      	ldr	r3, [r0, #24]
 8012860:	b90b      	cbnz	r3, 8012866 <_fflush_r+0x1a>
 8012862:	f000 f887 	bl	8012974 <__sinit>
 8012866:	4b14      	ldr	r3, [pc, #80]	; (80128b8 <_fflush_r+0x6c>)
 8012868:	429c      	cmp	r4, r3
 801286a:	d11b      	bne.n	80128a4 <_fflush_r+0x58>
 801286c:	686c      	ldr	r4, [r5, #4]
 801286e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d0ef      	beq.n	8012856 <_fflush_r+0xa>
 8012876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012878:	07d0      	lsls	r0, r2, #31
 801287a:	d404      	bmi.n	8012886 <_fflush_r+0x3a>
 801287c:	0599      	lsls	r1, r3, #22
 801287e:	d402      	bmi.n	8012886 <_fflush_r+0x3a>
 8012880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012882:	f000 f915 	bl	8012ab0 <__retarget_lock_acquire_recursive>
 8012886:	4628      	mov	r0, r5
 8012888:	4621      	mov	r1, r4
 801288a:	f7ff ff59 	bl	8012740 <__sflush_r>
 801288e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012890:	07da      	lsls	r2, r3, #31
 8012892:	4605      	mov	r5, r0
 8012894:	d4e0      	bmi.n	8012858 <_fflush_r+0xc>
 8012896:	89a3      	ldrh	r3, [r4, #12]
 8012898:	059b      	lsls	r3, r3, #22
 801289a:	d4dd      	bmi.n	8012858 <_fflush_r+0xc>
 801289c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801289e:	f000 f908 	bl	8012ab2 <__retarget_lock_release_recursive>
 80128a2:	e7d9      	b.n	8012858 <_fflush_r+0xc>
 80128a4:	4b05      	ldr	r3, [pc, #20]	; (80128bc <_fflush_r+0x70>)
 80128a6:	429c      	cmp	r4, r3
 80128a8:	d101      	bne.n	80128ae <_fflush_r+0x62>
 80128aa:	68ac      	ldr	r4, [r5, #8]
 80128ac:	e7df      	b.n	801286e <_fflush_r+0x22>
 80128ae:	4b04      	ldr	r3, [pc, #16]	; (80128c0 <_fflush_r+0x74>)
 80128b0:	429c      	cmp	r4, r3
 80128b2:	bf08      	it	eq
 80128b4:	68ec      	ldreq	r4, [r5, #12]
 80128b6:	e7da      	b.n	801286e <_fflush_r+0x22>
 80128b8:	080139a0 	.word	0x080139a0
 80128bc:	080139c0 	.word	0x080139c0
 80128c0:	08013980 	.word	0x08013980

080128c4 <std>:
 80128c4:	2300      	movs	r3, #0
 80128c6:	b510      	push	{r4, lr}
 80128c8:	4604      	mov	r4, r0
 80128ca:	e9c0 3300 	strd	r3, r3, [r0]
 80128ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80128d2:	6083      	str	r3, [r0, #8]
 80128d4:	8181      	strh	r1, [r0, #12]
 80128d6:	6643      	str	r3, [r0, #100]	; 0x64
 80128d8:	81c2      	strh	r2, [r0, #14]
 80128da:	6183      	str	r3, [r0, #24]
 80128dc:	4619      	mov	r1, r3
 80128de:	2208      	movs	r2, #8
 80128e0:	305c      	adds	r0, #92	; 0x5c
 80128e2:	f7fb ffff 	bl	800e8e4 <memset>
 80128e6:	4b05      	ldr	r3, [pc, #20]	; (80128fc <std+0x38>)
 80128e8:	6263      	str	r3, [r4, #36]	; 0x24
 80128ea:	4b05      	ldr	r3, [pc, #20]	; (8012900 <std+0x3c>)
 80128ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80128ee:	4b05      	ldr	r3, [pc, #20]	; (8012904 <std+0x40>)
 80128f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80128f2:	4b05      	ldr	r3, [pc, #20]	; (8012908 <std+0x44>)
 80128f4:	6224      	str	r4, [r4, #32]
 80128f6:	6323      	str	r3, [r4, #48]	; 0x30
 80128f8:	bd10      	pop	{r4, pc}
 80128fa:	bf00      	nop
 80128fc:	08012c9d 	.word	0x08012c9d
 8012900:	08012cbf 	.word	0x08012cbf
 8012904:	08012cf7 	.word	0x08012cf7
 8012908:	08012d1b 	.word	0x08012d1b

0801290c <_cleanup_r>:
 801290c:	4901      	ldr	r1, [pc, #4]	; (8012914 <_cleanup_r+0x8>)
 801290e:	f000 b8af 	b.w	8012a70 <_fwalk_reent>
 8012912:	bf00      	nop
 8012914:	0801284d 	.word	0x0801284d

08012918 <__sfmoreglue>:
 8012918:	b570      	push	{r4, r5, r6, lr}
 801291a:	1e4a      	subs	r2, r1, #1
 801291c:	2568      	movs	r5, #104	; 0x68
 801291e:	4355      	muls	r5, r2
 8012920:	460e      	mov	r6, r1
 8012922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012926:	f7ff faf9 	bl	8011f1c <_malloc_r>
 801292a:	4604      	mov	r4, r0
 801292c:	b140      	cbz	r0, 8012940 <__sfmoreglue+0x28>
 801292e:	2100      	movs	r1, #0
 8012930:	e9c0 1600 	strd	r1, r6, [r0]
 8012934:	300c      	adds	r0, #12
 8012936:	60a0      	str	r0, [r4, #8]
 8012938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801293c:	f7fb ffd2 	bl	800e8e4 <memset>
 8012940:	4620      	mov	r0, r4
 8012942:	bd70      	pop	{r4, r5, r6, pc}

08012944 <__sfp_lock_acquire>:
 8012944:	4801      	ldr	r0, [pc, #4]	; (801294c <__sfp_lock_acquire+0x8>)
 8012946:	f000 b8b3 	b.w	8012ab0 <__retarget_lock_acquire_recursive>
 801294a:	bf00      	nop
 801294c:	20005b54 	.word	0x20005b54

08012950 <__sfp_lock_release>:
 8012950:	4801      	ldr	r0, [pc, #4]	; (8012958 <__sfp_lock_release+0x8>)
 8012952:	f000 b8ae 	b.w	8012ab2 <__retarget_lock_release_recursive>
 8012956:	bf00      	nop
 8012958:	20005b54 	.word	0x20005b54

0801295c <__sinit_lock_acquire>:
 801295c:	4801      	ldr	r0, [pc, #4]	; (8012964 <__sinit_lock_acquire+0x8>)
 801295e:	f000 b8a7 	b.w	8012ab0 <__retarget_lock_acquire_recursive>
 8012962:	bf00      	nop
 8012964:	20005b4f 	.word	0x20005b4f

08012968 <__sinit_lock_release>:
 8012968:	4801      	ldr	r0, [pc, #4]	; (8012970 <__sinit_lock_release+0x8>)
 801296a:	f000 b8a2 	b.w	8012ab2 <__retarget_lock_release_recursive>
 801296e:	bf00      	nop
 8012970:	20005b4f 	.word	0x20005b4f

08012974 <__sinit>:
 8012974:	b510      	push	{r4, lr}
 8012976:	4604      	mov	r4, r0
 8012978:	f7ff fff0 	bl	801295c <__sinit_lock_acquire>
 801297c:	69a3      	ldr	r3, [r4, #24]
 801297e:	b11b      	cbz	r3, 8012988 <__sinit+0x14>
 8012980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012984:	f7ff bff0 	b.w	8012968 <__sinit_lock_release>
 8012988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801298c:	6523      	str	r3, [r4, #80]	; 0x50
 801298e:	4b13      	ldr	r3, [pc, #76]	; (80129dc <__sinit+0x68>)
 8012990:	4a13      	ldr	r2, [pc, #76]	; (80129e0 <__sinit+0x6c>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	62a2      	str	r2, [r4, #40]	; 0x28
 8012996:	42a3      	cmp	r3, r4
 8012998:	bf04      	itt	eq
 801299a:	2301      	moveq	r3, #1
 801299c:	61a3      	streq	r3, [r4, #24]
 801299e:	4620      	mov	r0, r4
 80129a0:	f000 f820 	bl	80129e4 <__sfp>
 80129a4:	6060      	str	r0, [r4, #4]
 80129a6:	4620      	mov	r0, r4
 80129a8:	f000 f81c 	bl	80129e4 <__sfp>
 80129ac:	60a0      	str	r0, [r4, #8]
 80129ae:	4620      	mov	r0, r4
 80129b0:	f000 f818 	bl	80129e4 <__sfp>
 80129b4:	2200      	movs	r2, #0
 80129b6:	60e0      	str	r0, [r4, #12]
 80129b8:	2104      	movs	r1, #4
 80129ba:	6860      	ldr	r0, [r4, #4]
 80129bc:	f7ff ff82 	bl	80128c4 <std>
 80129c0:	68a0      	ldr	r0, [r4, #8]
 80129c2:	2201      	movs	r2, #1
 80129c4:	2109      	movs	r1, #9
 80129c6:	f7ff ff7d 	bl	80128c4 <std>
 80129ca:	68e0      	ldr	r0, [r4, #12]
 80129cc:	2202      	movs	r2, #2
 80129ce:	2112      	movs	r1, #18
 80129d0:	f7ff ff78 	bl	80128c4 <std>
 80129d4:	2301      	movs	r3, #1
 80129d6:	61a3      	str	r3, [r4, #24]
 80129d8:	e7d2      	b.n	8012980 <__sinit+0xc>
 80129da:	bf00      	nop
 80129dc:	080134d8 	.word	0x080134d8
 80129e0:	0801290d 	.word	0x0801290d

080129e4 <__sfp>:
 80129e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e6:	4607      	mov	r7, r0
 80129e8:	f7ff ffac 	bl	8012944 <__sfp_lock_acquire>
 80129ec:	4b1e      	ldr	r3, [pc, #120]	; (8012a68 <__sfp+0x84>)
 80129ee:	681e      	ldr	r6, [r3, #0]
 80129f0:	69b3      	ldr	r3, [r6, #24]
 80129f2:	b913      	cbnz	r3, 80129fa <__sfp+0x16>
 80129f4:	4630      	mov	r0, r6
 80129f6:	f7ff ffbd 	bl	8012974 <__sinit>
 80129fa:	3648      	adds	r6, #72	; 0x48
 80129fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012a00:	3b01      	subs	r3, #1
 8012a02:	d503      	bpl.n	8012a0c <__sfp+0x28>
 8012a04:	6833      	ldr	r3, [r6, #0]
 8012a06:	b30b      	cbz	r3, 8012a4c <__sfp+0x68>
 8012a08:	6836      	ldr	r6, [r6, #0]
 8012a0a:	e7f7      	b.n	80129fc <__sfp+0x18>
 8012a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012a10:	b9d5      	cbnz	r5, 8012a48 <__sfp+0x64>
 8012a12:	4b16      	ldr	r3, [pc, #88]	; (8012a6c <__sfp+0x88>)
 8012a14:	60e3      	str	r3, [r4, #12]
 8012a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8012a1c:	f000 f847 	bl	8012aae <__retarget_lock_init_recursive>
 8012a20:	f7ff ff96 	bl	8012950 <__sfp_lock_release>
 8012a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012a2c:	6025      	str	r5, [r4, #0]
 8012a2e:	61a5      	str	r5, [r4, #24]
 8012a30:	2208      	movs	r2, #8
 8012a32:	4629      	mov	r1, r5
 8012a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012a38:	f7fb ff54 	bl	800e8e4 <memset>
 8012a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012a44:	4620      	mov	r0, r4
 8012a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a48:	3468      	adds	r4, #104	; 0x68
 8012a4a:	e7d9      	b.n	8012a00 <__sfp+0x1c>
 8012a4c:	2104      	movs	r1, #4
 8012a4e:	4638      	mov	r0, r7
 8012a50:	f7ff ff62 	bl	8012918 <__sfmoreglue>
 8012a54:	4604      	mov	r4, r0
 8012a56:	6030      	str	r0, [r6, #0]
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	d1d5      	bne.n	8012a08 <__sfp+0x24>
 8012a5c:	f7ff ff78 	bl	8012950 <__sfp_lock_release>
 8012a60:	230c      	movs	r3, #12
 8012a62:	603b      	str	r3, [r7, #0]
 8012a64:	e7ee      	b.n	8012a44 <__sfp+0x60>
 8012a66:	bf00      	nop
 8012a68:	080134d8 	.word	0x080134d8
 8012a6c:	ffff0001 	.word	0xffff0001

08012a70 <_fwalk_reent>:
 8012a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a74:	4606      	mov	r6, r0
 8012a76:	4688      	mov	r8, r1
 8012a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a7c:	2700      	movs	r7, #0
 8012a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a82:	f1b9 0901 	subs.w	r9, r9, #1
 8012a86:	d505      	bpl.n	8012a94 <_fwalk_reent+0x24>
 8012a88:	6824      	ldr	r4, [r4, #0]
 8012a8a:	2c00      	cmp	r4, #0
 8012a8c:	d1f7      	bne.n	8012a7e <_fwalk_reent+0xe>
 8012a8e:	4638      	mov	r0, r7
 8012a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a94:	89ab      	ldrh	r3, [r5, #12]
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d907      	bls.n	8012aaa <_fwalk_reent+0x3a>
 8012a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	d003      	beq.n	8012aaa <_fwalk_reent+0x3a>
 8012aa2:	4629      	mov	r1, r5
 8012aa4:	4630      	mov	r0, r6
 8012aa6:	47c0      	blx	r8
 8012aa8:	4307      	orrs	r7, r0
 8012aaa:	3568      	adds	r5, #104	; 0x68
 8012aac:	e7e9      	b.n	8012a82 <_fwalk_reent+0x12>

08012aae <__retarget_lock_init_recursive>:
 8012aae:	4770      	bx	lr

08012ab0 <__retarget_lock_acquire_recursive>:
 8012ab0:	4770      	bx	lr

08012ab2 <__retarget_lock_release_recursive>:
 8012ab2:	4770      	bx	lr

08012ab4 <__swhatbuf_r>:
 8012ab4:	b570      	push	{r4, r5, r6, lr}
 8012ab6:	460e      	mov	r6, r1
 8012ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012abc:	2900      	cmp	r1, #0
 8012abe:	b096      	sub	sp, #88	; 0x58
 8012ac0:	4614      	mov	r4, r2
 8012ac2:	461d      	mov	r5, r3
 8012ac4:	da07      	bge.n	8012ad6 <__swhatbuf_r+0x22>
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	602b      	str	r3, [r5, #0]
 8012aca:	89b3      	ldrh	r3, [r6, #12]
 8012acc:	061a      	lsls	r2, r3, #24
 8012ace:	d410      	bmi.n	8012af2 <__swhatbuf_r+0x3e>
 8012ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ad4:	e00e      	b.n	8012af4 <__swhatbuf_r+0x40>
 8012ad6:	466a      	mov	r2, sp
 8012ad8:	f000 f946 	bl	8012d68 <_fstat_r>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	dbf2      	blt.n	8012ac6 <__swhatbuf_r+0x12>
 8012ae0:	9a01      	ldr	r2, [sp, #4]
 8012ae2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012ae6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012aea:	425a      	negs	r2, r3
 8012aec:	415a      	adcs	r2, r3
 8012aee:	602a      	str	r2, [r5, #0]
 8012af0:	e7ee      	b.n	8012ad0 <__swhatbuf_r+0x1c>
 8012af2:	2340      	movs	r3, #64	; 0x40
 8012af4:	2000      	movs	r0, #0
 8012af6:	6023      	str	r3, [r4, #0]
 8012af8:	b016      	add	sp, #88	; 0x58
 8012afa:	bd70      	pop	{r4, r5, r6, pc}

08012afc <__smakebuf_r>:
 8012afc:	898b      	ldrh	r3, [r1, #12]
 8012afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b00:	079d      	lsls	r5, r3, #30
 8012b02:	4606      	mov	r6, r0
 8012b04:	460c      	mov	r4, r1
 8012b06:	d507      	bpl.n	8012b18 <__smakebuf_r+0x1c>
 8012b08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	6123      	str	r3, [r4, #16]
 8012b10:	2301      	movs	r3, #1
 8012b12:	6163      	str	r3, [r4, #20]
 8012b14:	b002      	add	sp, #8
 8012b16:	bd70      	pop	{r4, r5, r6, pc}
 8012b18:	ab01      	add	r3, sp, #4
 8012b1a:	466a      	mov	r2, sp
 8012b1c:	f7ff ffca 	bl	8012ab4 <__swhatbuf_r>
 8012b20:	9900      	ldr	r1, [sp, #0]
 8012b22:	4605      	mov	r5, r0
 8012b24:	4630      	mov	r0, r6
 8012b26:	f7ff f9f9 	bl	8011f1c <_malloc_r>
 8012b2a:	b948      	cbnz	r0, 8012b40 <__smakebuf_r+0x44>
 8012b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b30:	059a      	lsls	r2, r3, #22
 8012b32:	d4ef      	bmi.n	8012b14 <__smakebuf_r+0x18>
 8012b34:	f023 0303 	bic.w	r3, r3, #3
 8012b38:	f043 0302 	orr.w	r3, r3, #2
 8012b3c:	81a3      	strh	r3, [r4, #12]
 8012b3e:	e7e3      	b.n	8012b08 <__smakebuf_r+0xc>
 8012b40:	4b0d      	ldr	r3, [pc, #52]	; (8012b78 <__smakebuf_r+0x7c>)
 8012b42:	62b3      	str	r3, [r6, #40]	; 0x28
 8012b44:	89a3      	ldrh	r3, [r4, #12]
 8012b46:	6020      	str	r0, [r4, #0]
 8012b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b4c:	81a3      	strh	r3, [r4, #12]
 8012b4e:	9b00      	ldr	r3, [sp, #0]
 8012b50:	6163      	str	r3, [r4, #20]
 8012b52:	9b01      	ldr	r3, [sp, #4]
 8012b54:	6120      	str	r0, [r4, #16]
 8012b56:	b15b      	cbz	r3, 8012b70 <__smakebuf_r+0x74>
 8012b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	f000 f915 	bl	8012d8c <_isatty_r>
 8012b62:	b128      	cbz	r0, 8012b70 <__smakebuf_r+0x74>
 8012b64:	89a3      	ldrh	r3, [r4, #12]
 8012b66:	f023 0303 	bic.w	r3, r3, #3
 8012b6a:	f043 0301 	orr.w	r3, r3, #1
 8012b6e:	81a3      	strh	r3, [r4, #12]
 8012b70:	89a0      	ldrh	r0, [r4, #12]
 8012b72:	4305      	orrs	r5, r0
 8012b74:	81a5      	strh	r5, [r4, #12]
 8012b76:	e7cd      	b.n	8012b14 <__smakebuf_r+0x18>
 8012b78:	0801290d 	.word	0x0801290d

08012b7c <memmove>:
 8012b7c:	4288      	cmp	r0, r1
 8012b7e:	b510      	push	{r4, lr}
 8012b80:	eb01 0402 	add.w	r4, r1, r2
 8012b84:	d902      	bls.n	8012b8c <memmove+0x10>
 8012b86:	4284      	cmp	r4, r0
 8012b88:	4623      	mov	r3, r4
 8012b8a:	d807      	bhi.n	8012b9c <memmove+0x20>
 8012b8c:	1e43      	subs	r3, r0, #1
 8012b8e:	42a1      	cmp	r1, r4
 8012b90:	d008      	beq.n	8012ba4 <memmove+0x28>
 8012b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b9a:	e7f8      	b.n	8012b8e <memmove+0x12>
 8012b9c:	4402      	add	r2, r0
 8012b9e:	4601      	mov	r1, r0
 8012ba0:	428a      	cmp	r2, r1
 8012ba2:	d100      	bne.n	8012ba6 <memmove+0x2a>
 8012ba4:	bd10      	pop	{r4, pc}
 8012ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012bae:	e7f7      	b.n	8012ba0 <memmove+0x24>

08012bb0 <__malloc_lock>:
 8012bb0:	4801      	ldr	r0, [pc, #4]	; (8012bb8 <__malloc_lock+0x8>)
 8012bb2:	f7ff bf7d 	b.w	8012ab0 <__retarget_lock_acquire_recursive>
 8012bb6:	bf00      	nop
 8012bb8:	20005b50 	.word	0x20005b50

08012bbc <__malloc_unlock>:
 8012bbc:	4801      	ldr	r0, [pc, #4]	; (8012bc4 <__malloc_unlock+0x8>)
 8012bbe:	f7ff bf78 	b.w	8012ab2 <__retarget_lock_release_recursive>
 8012bc2:	bf00      	nop
 8012bc4:	20005b50 	.word	0x20005b50

08012bc8 <_realloc_r>:
 8012bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bca:	4607      	mov	r7, r0
 8012bcc:	4614      	mov	r4, r2
 8012bce:	460e      	mov	r6, r1
 8012bd0:	b921      	cbnz	r1, 8012bdc <_realloc_r+0x14>
 8012bd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012bd6:	4611      	mov	r1, r2
 8012bd8:	f7ff b9a0 	b.w	8011f1c <_malloc_r>
 8012bdc:	b922      	cbnz	r2, 8012be8 <_realloc_r+0x20>
 8012bde:	f7ff f94d 	bl	8011e7c <_free_r>
 8012be2:	4625      	mov	r5, r4
 8012be4:	4628      	mov	r0, r5
 8012be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012be8:	f000 f8f2 	bl	8012dd0 <_malloc_usable_size_r>
 8012bec:	42a0      	cmp	r0, r4
 8012bee:	d20f      	bcs.n	8012c10 <_realloc_r+0x48>
 8012bf0:	4621      	mov	r1, r4
 8012bf2:	4638      	mov	r0, r7
 8012bf4:	f7ff f992 	bl	8011f1c <_malloc_r>
 8012bf8:	4605      	mov	r5, r0
 8012bfa:	2800      	cmp	r0, #0
 8012bfc:	d0f2      	beq.n	8012be4 <_realloc_r+0x1c>
 8012bfe:	4631      	mov	r1, r6
 8012c00:	4622      	mov	r2, r4
 8012c02:	f7fb fe61 	bl	800e8c8 <memcpy>
 8012c06:	4631      	mov	r1, r6
 8012c08:	4638      	mov	r0, r7
 8012c0a:	f7ff f937 	bl	8011e7c <_free_r>
 8012c0e:	e7e9      	b.n	8012be4 <_realloc_r+0x1c>
 8012c10:	4635      	mov	r5, r6
 8012c12:	e7e7      	b.n	8012be4 <_realloc_r+0x1c>

08012c14 <_raise_r>:
 8012c14:	291f      	cmp	r1, #31
 8012c16:	b538      	push	{r3, r4, r5, lr}
 8012c18:	4604      	mov	r4, r0
 8012c1a:	460d      	mov	r5, r1
 8012c1c:	d904      	bls.n	8012c28 <_raise_r+0x14>
 8012c1e:	2316      	movs	r3, #22
 8012c20:	6003      	str	r3, [r0, #0]
 8012c22:	f04f 30ff 	mov.w	r0, #4294967295
 8012c26:	bd38      	pop	{r3, r4, r5, pc}
 8012c28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012c2a:	b112      	cbz	r2, 8012c32 <_raise_r+0x1e>
 8012c2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c30:	b94b      	cbnz	r3, 8012c46 <_raise_r+0x32>
 8012c32:	4620      	mov	r0, r4
 8012c34:	f000 f830 	bl	8012c98 <_getpid_r>
 8012c38:	462a      	mov	r2, r5
 8012c3a:	4601      	mov	r1, r0
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c42:	f000 b817 	b.w	8012c74 <_kill_r>
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d00a      	beq.n	8012c60 <_raise_r+0x4c>
 8012c4a:	1c59      	adds	r1, r3, #1
 8012c4c:	d103      	bne.n	8012c56 <_raise_r+0x42>
 8012c4e:	2316      	movs	r3, #22
 8012c50:	6003      	str	r3, [r0, #0]
 8012c52:	2001      	movs	r0, #1
 8012c54:	e7e7      	b.n	8012c26 <_raise_r+0x12>
 8012c56:	2400      	movs	r4, #0
 8012c58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	4798      	blx	r3
 8012c60:	2000      	movs	r0, #0
 8012c62:	e7e0      	b.n	8012c26 <_raise_r+0x12>

08012c64 <raise>:
 8012c64:	4b02      	ldr	r3, [pc, #8]	; (8012c70 <raise+0xc>)
 8012c66:	4601      	mov	r1, r0
 8012c68:	6818      	ldr	r0, [r3, #0]
 8012c6a:	f7ff bfd3 	b.w	8012c14 <_raise_r>
 8012c6e:	bf00      	nop
 8012c70:	20000028 	.word	0x20000028

08012c74 <_kill_r>:
 8012c74:	b538      	push	{r3, r4, r5, lr}
 8012c76:	4d07      	ldr	r5, [pc, #28]	; (8012c94 <_kill_r+0x20>)
 8012c78:	2300      	movs	r3, #0
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	4608      	mov	r0, r1
 8012c7e:	4611      	mov	r1, r2
 8012c80:	602b      	str	r3, [r5, #0]
 8012c82:	f7f0 fac1 	bl	8003208 <_kill>
 8012c86:	1c43      	adds	r3, r0, #1
 8012c88:	d102      	bne.n	8012c90 <_kill_r+0x1c>
 8012c8a:	682b      	ldr	r3, [r5, #0]
 8012c8c:	b103      	cbz	r3, 8012c90 <_kill_r+0x1c>
 8012c8e:	6023      	str	r3, [r4, #0]
 8012c90:	bd38      	pop	{r3, r4, r5, pc}
 8012c92:	bf00      	nop
 8012c94:	20005b58 	.word	0x20005b58

08012c98 <_getpid_r>:
 8012c98:	f7f0 baae 	b.w	80031f8 <_getpid>

08012c9c <__sread>:
 8012c9c:	b510      	push	{r4, lr}
 8012c9e:	460c      	mov	r4, r1
 8012ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ca4:	f000 f89c 	bl	8012de0 <_read_r>
 8012ca8:	2800      	cmp	r0, #0
 8012caa:	bfab      	itete	ge
 8012cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012cae:	89a3      	ldrhlt	r3, [r4, #12]
 8012cb0:	181b      	addge	r3, r3, r0
 8012cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012cb6:	bfac      	ite	ge
 8012cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8012cba:	81a3      	strhlt	r3, [r4, #12]
 8012cbc:	bd10      	pop	{r4, pc}

08012cbe <__swrite>:
 8012cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc2:	461f      	mov	r7, r3
 8012cc4:	898b      	ldrh	r3, [r1, #12]
 8012cc6:	05db      	lsls	r3, r3, #23
 8012cc8:	4605      	mov	r5, r0
 8012cca:	460c      	mov	r4, r1
 8012ccc:	4616      	mov	r6, r2
 8012cce:	d505      	bpl.n	8012cdc <__swrite+0x1e>
 8012cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cd4:	2302      	movs	r3, #2
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f000 f868 	bl	8012dac <_lseek_r>
 8012cdc:	89a3      	ldrh	r3, [r4, #12]
 8012cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ce6:	81a3      	strh	r3, [r4, #12]
 8012ce8:	4632      	mov	r2, r6
 8012cea:	463b      	mov	r3, r7
 8012cec:	4628      	mov	r0, r5
 8012cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf2:	f000 b817 	b.w	8012d24 <_write_r>

08012cf6 <__sseek>:
 8012cf6:	b510      	push	{r4, lr}
 8012cf8:	460c      	mov	r4, r1
 8012cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cfe:	f000 f855 	bl	8012dac <_lseek_r>
 8012d02:	1c43      	adds	r3, r0, #1
 8012d04:	89a3      	ldrh	r3, [r4, #12]
 8012d06:	bf15      	itete	ne
 8012d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012d12:	81a3      	strheq	r3, [r4, #12]
 8012d14:	bf18      	it	ne
 8012d16:	81a3      	strhne	r3, [r4, #12]
 8012d18:	bd10      	pop	{r4, pc}

08012d1a <__sclose>:
 8012d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d1e:	f000 b813 	b.w	8012d48 <_close_r>
	...

08012d24 <_write_r>:
 8012d24:	b538      	push	{r3, r4, r5, lr}
 8012d26:	4d07      	ldr	r5, [pc, #28]	; (8012d44 <_write_r+0x20>)
 8012d28:	4604      	mov	r4, r0
 8012d2a:	4608      	mov	r0, r1
 8012d2c:	4611      	mov	r1, r2
 8012d2e:	2200      	movs	r2, #0
 8012d30:	602a      	str	r2, [r5, #0]
 8012d32:	461a      	mov	r2, r3
 8012d34:	f7f0 fa9f 	bl	8003276 <_write>
 8012d38:	1c43      	adds	r3, r0, #1
 8012d3a:	d102      	bne.n	8012d42 <_write_r+0x1e>
 8012d3c:	682b      	ldr	r3, [r5, #0]
 8012d3e:	b103      	cbz	r3, 8012d42 <_write_r+0x1e>
 8012d40:	6023      	str	r3, [r4, #0]
 8012d42:	bd38      	pop	{r3, r4, r5, pc}
 8012d44:	20005b58 	.word	0x20005b58

08012d48 <_close_r>:
 8012d48:	b538      	push	{r3, r4, r5, lr}
 8012d4a:	4d06      	ldr	r5, [pc, #24]	; (8012d64 <_close_r+0x1c>)
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	4604      	mov	r4, r0
 8012d50:	4608      	mov	r0, r1
 8012d52:	602b      	str	r3, [r5, #0]
 8012d54:	f7f0 faab 	bl	80032ae <_close>
 8012d58:	1c43      	adds	r3, r0, #1
 8012d5a:	d102      	bne.n	8012d62 <_close_r+0x1a>
 8012d5c:	682b      	ldr	r3, [r5, #0]
 8012d5e:	b103      	cbz	r3, 8012d62 <_close_r+0x1a>
 8012d60:	6023      	str	r3, [r4, #0]
 8012d62:	bd38      	pop	{r3, r4, r5, pc}
 8012d64:	20005b58 	.word	0x20005b58

08012d68 <_fstat_r>:
 8012d68:	b538      	push	{r3, r4, r5, lr}
 8012d6a:	4d07      	ldr	r5, [pc, #28]	; (8012d88 <_fstat_r+0x20>)
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	4604      	mov	r4, r0
 8012d70:	4608      	mov	r0, r1
 8012d72:	4611      	mov	r1, r2
 8012d74:	602b      	str	r3, [r5, #0]
 8012d76:	f7f0 faa6 	bl	80032c6 <_fstat>
 8012d7a:	1c43      	adds	r3, r0, #1
 8012d7c:	d102      	bne.n	8012d84 <_fstat_r+0x1c>
 8012d7e:	682b      	ldr	r3, [r5, #0]
 8012d80:	b103      	cbz	r3, 8012d84 <_fstat_r+0x1c>
 8012d82:	6023      	str	r3, [r4, #0]
 8012d84:	bd38      	pop	{r3, r4, r5, pc}
 8012d86:	bf00      	nop
 8012d88:	20005b58 	.word	0x20005b58

08012d8c <_isatty_r>:
 8012d8c:	b538      	push	{r3, r4, r5, lr}
 8012d8e:	4d06      	ldr	r5, [pc, #24]	; (8012da8 <_isatty_r+0x1c>)
 8012d90:	2300      	movs	r3, #0
 8012d92:	4604      	mov	r4, r0
 8012d94:	4608      	mov	r0, r1
 8012d96:	602b      	str	r3, [r5, #0]
 8012d98:	f7f0 faa5 	bl	80032e6 <_isatty>
 8012d9c:	1c43      	adds	r3, r0, #1
 8012d9e:	d102      	bne.n	8012da6 <_isatty_r+0x1a>
 8012da0:	682b      	ldr	r3, [r5, #0]
 8012da2:	b103      	cbz	r3, 8012da6 <_isatty_r+0x1a>
 8012da4:	6023      	str	r3, [r4, #0]
 8012da6:	bd38      	pop	{r3, r4, r5, pc}
 8012da8:	20005b58 	.word	0x20005b58

08012dac <_lseek_r>:
 8012dac:	b538      	push	{r3, r4, r5, lr}
 8012dae:	4d07      	ldr	r5, [pc, #28]	; (8012dcc <_lseek_r+0x20>)
 8012db0:	4604      	mov	r4, r0
 8012db2:	4608      	mov	r0, r1
 8012db4:	4611      	mov	r1, r2
 8012db6:	2200      	movs	r2, #0
 8012db8:	602a      	str	r2, [r5, #0]
 8012dba:	461a      	mov	r2, r3
 8012dbc:	f7f0 fa9e 	bl	80032fc <_lseek>
 8012dc0:	1c43      	adds	r3, r0, #1
 8012dc2:	d102      	bne.n	8012dca <_lseek_r+0x1e>
 8012dc4:	682b      	ldr	r3, [r5, #0]
 8012dc6:	b103      	cbz	r3, 8012dca <_lseek_r+0x1e>
 8012dc8:	6023      	str	r3, [r4, #0]
 8012dca:	bd38      	pop	{r3, r4, r5, pc}
 8012dcc:	20005b58 	.word	0x20005b58

08012dd0 <_malloc_usable_size_r>:
 8012dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dd4:	1f18      	subs	r0, r3, #4
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	bfbc      	itt	lt
 8012dda:	580b      	ldrlt	r3, [r1, r0]
 8012ddc:	18c0      	addlt	r0, r0, r3
 8012dde:	4770      	bx	lr

08012de0 <_read_r>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	4d07      	ldr	r5, [pc, #28]	; (8012e00 <_read_r+0x20>)
 8012de4:	4604      	mov	r4, r0
 8012de6:	4608      	mov	r0, r1
 8012de8:	4611      	mov	r1, r2
 8012dea:	2200      	movs	r2, #0
 8012dec:	602a      	str	r2, [r5, #0]
 8012dee:	461a      	mov	r2, r3
 8012df0:	f7f0 fa24 	bl	800323c <_read>
 8012df4:	1c43      	adds	r3, r0, #1
 8012df6:	d102      	bne.n	8012dfe <_read_r+0x1e>
 8012df8:	682b      	ldr	r3, [r5, #0]
 8012dfa:	b103      	cbz	r3, 8012dfe <_read_r+0x1e>
 8012dfc:	6023      	str	r3, [r4, #0]
 8012dfe:	bd38      	pop	{r3, r4, r5, pc}
 8012e00:	20005b58 	.word	0x20005b58

08012e04 <trunc>:
 8012e04:	ec51 0b10 	vmov	r0, r1, d0
 8012e08:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012e0c:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012e10:	2b13      	cmp	r3, #19
 8012e12:	b5d0      	push	{r4, r6, r7, lr}
 8012e14:	460c      	mov	r4, r1
 8012e16:	dc10      	bgt.n	8012e3a <trunc+0x36>
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	bfa5      	ittet	ge
 8012e1c:	4a11      	ldrge	r2, [pc, #68]	; (8012e64 <trunc+0x60>)
 8012e1e:	fa42 f303 	asrge.w	r3, r2, r3
 8012e22:	2100      	movlt	r1, #0
 8012e24:	2100      	movge	r1, #0
 8012e26:	bfb9      	ittee	lt
 8012e28:	2000      	movlt	r0, #0
 8012e2a:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8012e2e:	2000      	movge	r0, #0
 8012e30:	ea24 0103 	bicge.w	r1, r4, r3
 8012e34:	ec41 0b10 	vmov	d0, r0, r1
 8012e38:	bdd0      	pop	{r4, r6, r7, pc}
 8012e3a:	2b33      	cmp	r3, #51	; 0x33
 8012e3c:	dd08      	ble.n	8012e50 <trunc+0x4c>
 8012e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e42:	d1f7      	bne.n	8012e34 <trunc+0x30>
 8012e44:	ee10 2a10 	vmov	r2, s0
 8012e48:	460b      	mov	r3, r1
 8012e4a:	f7ed fa27 	bl	800029c <__adddf3>
 8012e4e:	e7f1      	b.n	8012e34 <trunc+0x30>
 8012e50:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012e54:	f04f 33ff 	mov.w	r3, #4294967295
 8012e58:	fa23 f202 	lsr.w	r2, r3, r2
 8012e5c:	ea20 0602 	bic.w	r6, r0, r2
 8012e60:	4630      	mov	r0, r6
 8012e62:	e7e7      	b.n	8012e34 <trunc+0x30>
 8012e64:	000fffff 	.word	0x000fffff

08012e68 <_init>:
 8012e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6a:	bf00      	nop
 8012e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e6e:	bc08      	pop	{r3}
 8012e70:	469e      	mov	lr, r3
 8012e72:	4770      	bx	lr

08012e74 <_fini>:
 8012e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e76:	bf00      	nop
 8012e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e7a:	bc08      	pop	{r3}
 8012e7c:	469e      	mov	lr, r3
 8012e7e:	4770      	bx	lr
