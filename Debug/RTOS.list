
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af0  08012ce0  08012ce0  00022ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137d0  080137d0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080137d0  080137d0  000237d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137d8  080137d8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137d8  080137d8  000237d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137dc  080137dc  000237dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080137e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005958  20000200  080139dc  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005b58  080139dc  00035b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000292db  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d1  00000000  00000000  00059507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  0005e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d70  00000000  00000000  00060518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da7c  00000000  00000000  00062288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254a6  00000000  00000000  0007fd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad414  00000000  00000000  000a51aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001525be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b10  00000000  00000000  00152614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012cc8 	.word	0x08012cc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	08012cc8 	.word	0x08012cc8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <Write_MFRC522+0x58>)
 8001020:	f003 fbee 	bl	8004800 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001024:	f107 010f 	add.w	r1, r7, #15
 8001028:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800102c:	2201      	movs	r2, #1
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <Write_MFRC522+0x5c>)
 8001030:	f005 f8ef 	bl	8006212 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8001034:	1db9      	adds	r1, r7, #6
 8001036:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103a:	2201      	movs	r2, #1
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <Write_MFRC522+0x5c>)
 800103e:	f005 f8e8 	bl	8006212 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <Write_MFRC522+0x58>)
 8001048:	f003 fbda 	bl	8004800 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020000 	.word	0x40020000
 8001058:	2000535c 	.word	0x2000535c

0800105c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	b25b      	sxtb	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <Read_MFRC522+0x60>)
 8001082:	f003 fbbd 	bl	8004800 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001086:	f107 010e 	add.w	r1, r7, #14
 800108a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <Read_MFRC522+0x64>)
 8001092:	f005 f8be 	bl	8006212 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800109e:	2201      	movs	r2, #1
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <Read_MFRC522+0x64>)
 80010a2:	f005 f9f2 	bl	800648a <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <Read_MFRC522+0x60>)
 80010ac:	f003 fba8 	bl	8004800 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000
 80010c0:	2000535c 	.word	0x2000535c

080010c4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffc0 	bl	800105c <Read_MFRC522>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff85 	bl	8000ffc <Write_MFRC522>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	460a      	mov	r2, r1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4613      	mov	r3, r2
 8001108:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffa5 	bl	800105c <Read_MFRC522>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001116:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800111a:	43db      	mvns	r3, r3
 800111c:	b25a      	sxtb	r2, r3
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4013      	ands	r3, r2
 8001124:	b25b      	sxtb	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff65 	bl	8000ffc <Write_MFRC522>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2014      	movs	r0, #20
 8001142:	f7ff ffbf 	bl	80010c4 <SetBitMask>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800114e:	210f      	movs	r1, #15
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff53 	bl	8000ffc <Write_MFRC522>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <MFRC522_Init+0x54>)
 8001166:	f003 fb4b 	bl	8004800 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 800116a:	f7ff ffee 	bl	800114a <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	202a      	movs	r0, #42	; 0x2a
 8001172:	f7ff ff43 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 8001176:	21a9      	movs	r1, #169	; 0xa9
 8001178:	202b      	movs	r0, #43	; 0x2b
 800117a:	f7ff ff3f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800117e:	2103      	movs	r1, #3
 8001180:	202d      	movs	r0, #45	; 0x2d
 8001182:	f7ff ff3b 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001186:	21e8      	movs	r1, #232	; 0xe8
 8001188:	202c      	movs	r0, #44	; 0x2c
 800118a:	f7ff ff37 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	2015      	movs	r0, #21
 8001192:	f7ff ff33 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 8001196:	213d      	movs	r1, #61	; 0x3d
 8001198:	2011      	movs	r0, #17
 800119a:	f7ff ff2f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 800119e:	2170      	movs	r1, #112	; 0x70
 80011a0:	2026      	movs	r0, #38	; 0x26
 80011a2:	f7ff ff2b 	bl	8000ffc <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80011a6:	f7ff ffc8 	bl	800113a <AntennaOn>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000

080011b4 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80011c0:	2107      	movs	r1, #7
 80011c2:	200d      	movs	r0, #13
 80011c4:	f7ff ff1a 	bl	8000ffc <Write_MFRC522>

  TagType[0] = reqMode;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	200c      	movs	r0, #12
 80011dc:	f000 f80f 	bl	80011fe <MFRC522_ToCard>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <MFRC522_Request+0x3c>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d001      	beq.n	80011f4 <MFRC522_Request+0x40>
    status = MI_ERR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	4613      	mov	r3, r2
 800120e:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8001210:	2302      	movs	r3, #2
 8001212:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b0c      	cmp	r3, #12
 8001220:	d006      	beq.n	8001230 <MFRC522_ToCard+0x32>
 8001222:	2b0e      	cmp	r3, #14
 8001224:	d109      	bne.n	800123a <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001226:	2312      	movs	r3, #18
 8001228:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 800122a:	2310      	movs	r3, #16
 800122c:	777b      	strb	r3, [r7, #29]
        break;
 800122e:	e005      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001230:	2377      	movs	r3, #119	; 0x77
 8001232:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001234:	2330      	movs	r3, #48	; 0x30
 8001236:	777b      	strb	r3, [r7, #29]
        break;
 8001238:	e000      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800123a:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800123c:	7fbb      	ldrb	r3, [r7, #30]
 800123e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff fed8 	bl	8000ffc <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff ff53 	bl	80010fa <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	200a      	movs	r0, #10
 8001258:	f7ff ff34 	bl	80010c4 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 800125c:	2100      	movs	r1, #0
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fecc 	bl	8000ffc <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e00a      	b.n	8001280 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	2009      	movs	r0, #9
 8001276:	f7ff fec1 	bl	8000ffc <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3301      	adds	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3f0      	bcc.n	800126a <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4619      	mov	r1, r3
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff feb5 	bl	8000ffc <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d103      	bne.n	80012a0 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	200d      	movs	r0, #13
 800129c:	f7ff ff12 	bl	80010c4 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80012a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a4:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80012a6:	2004      	movs	r0, #4
 80012a8:	f7ff fed8 	bl	800105c <Read_MFRC522>
 80012ac:	4603      	mov	r3, r0
 80012ae:	773b      	strb	r3, [r7, #28]
    i--;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <MFRC522_ToCard+0xd4>
 80012bc:	7f3b      	ldrb	r3, [r7, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <MFRC522_ToCard+0xd4>
 80012c6:	7f3a      	ldrb	r2, [r7, #28]
 80012c8:	7f7b      	ldrb	r3, [r7, #29]
 80012ca:	4013      	ands	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0e9      	beq.n	80012a6 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	200d      	movs	r0, #13
 80012d6:	f7ff ff10 	bl	80010fa <ClearBitMask>

  if (i != 0)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d052      	beq.n	8001386 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80012e0:	2006      	movs	r0, #6
 80012e2:	f7ff febb 	bl	800105c <Read_MFRC522>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 031b 	and.w	r3, r3, #27
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d148      	bne.n	8001382 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80012f4:	7f3a      	ldrb	r2, [r7, #28]
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8001304:	2301      	movs	r3, #1
 8001306:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d13b      	bne.n	8001386 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fea4 	bl	800105c <Read_MFRC522>
 8001314:	4603      	mov	r3, r0
 8001316:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001318:	200c      	movs	r0, #12
 800131a:	f7ff fe9f 	bl	800105c <Read_MFRC522>
 800131e:	4603      	mov	r3, r0
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 800132c:	7f3b      	ldrb	r3, [r7, #28]
 800132e:	3b01      	subs	r3, #1
 8001330:	00da      	lsls	r2, r3, #3
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4413      	add	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e004      	b.n	8001348 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 800133e:	7f3b      	ldrb	r3, [r7, #28]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	461a      	mov	r2, r3
 8001344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001346:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001348:	7f3b      	ldrb	r3, [r7, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <MFRC522_ToCard+0x154>
        {
          n = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	2b10      	cmp	r3, #16
 8001356:	d901      	bls.n	800135c <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8001358:	2310      	movs	r3, #16
 800135a:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e00a      	b.n	8001378 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	18d4      	adds	r4, r2, r3
 8001368:	2009      	movs	r0, #9
 800136a:	f7ff fe77 	bl	800105c <Read_MFRC522>
 800136e:	4603      	mov	r3, r0
 8001370:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3301      	adds	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	7f3b      	ldrb	r3, [r7, #28]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f0      	bcc.n	8001362 <MFRC522_ToCard+0x164>
 8001380:	e001      	b.n	8001386 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001382:	2302      	movs	r3, #2
 8001384:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001386:	7ffb      	ldrb	r3, [r7, #31]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8001398:	2300      	movs	r3, #0
 800139a:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800139c:	2100      	movs	r1, #0
 800139e:	200d      	movs	r0, #13
 80013a0:	f7ff fe2c 	bl	8000ffc <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2293      	movs	r2, #147	; 0x93
 80013a8:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	2220      	movs	r2, #32
 80013b0:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200c      	movs	r0, #12
 80013c0:	f7ff ff1d 	bl	80011fe <MFRC522_ToCard>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]
 80013d2:	e009      	b.n	80013e8 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	4053      	eors	r3, r2
 80013e0:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73bb      	strb	r3, [r7, #14]
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d9f2      	bls.n	80013d4 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	7b7a      	ldrb	r2, [r7, #13]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 80013fc:	2302      	movs	r3, #2
 80013fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	0000      	movs	r0, r0
 800140c:	0000      	movs	r0, r0
	...

08001410 <RCFilter_Init>:
#include "RCFilter.h"
#include <math.h>

void RCFilter_Init(RCFilter * filter, float cutoffFreqHz, float sampleFreq_Hz){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	ed87 0a02 	vstr	s0, [r7, #8]
 800141c:	edc7 0a01 	vstr	s1, [r7, #4]
	/*Clear output buffer*/
	filter->out[0] = 0.0f;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
	filter->out[1] = 0.0f;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
	float sampleTime_s = 1.0f/ sampleFreq_Hz;
 8001430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001434:	ed97 7a01 	vldr	s14, [r7, #4]
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	edc7 7a05 	vstr	s15, [r7, #20]
	/*Compute equivalent RC Constant from cutoff Frequency*/
	float RC = 1.0f/(2* M_PI * cutoffFreqHz);
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f889 	bl	8000558 <__aeabi_f2d>
 8001446:	a31b      	add	r3, pc, #108	; (adr r3, 80014b4 <RCFilter_Init+0xa4>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8dc 	bl	8000608 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	f04f 0000 	mov.w	r0, #0
 8001458:	4915      	ldr	r1, [pc, #84]	; (80014b0 <RCFilter_Init+0xa0>)
 800145a:	f7ff f9ff 	bl	800085c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbc7 	bl	8000bf8 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	613b      	str	r3, [r7, #16]
	/*Pre-compute filter coefficient for first order low-pass filter*/
	filter->coeff[0] = sampleTime_s/(sampleTime_s+ RC);
 800146e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001472:	edd7 7a04 	vldr	s15, [r7, #16]
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	edd7 6a05 	vldr	s13, [r7, #20]
 800147e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edc3 7a00 	vstr	s15, [r3]
	filter->coeff[1] = RC/(sampleTime_s+RC);
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 6a04 	vldr	s13, [r7, #16]
 8001498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	3ff00000 	.word	0x3ff00000
 80014b4:	54442d18 	.word	0x54442d18
 80014b8:	401921fb 	.word	0x401921fb

080014bc <RCFilter_Update>:

float RCFilter_Update(RCFilter *filter, float input){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	ed87 0a00 	vstr	s0, [r7]
	/* Shift output samples */
	filter->out[1] = filter->out[0];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

	/* Compute new ouput sample */
	filter->out[0] = filter->coeff[0] * input+filter->coeff[1] * filter->out[1];
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	edd7 7a00 	vldr	s15, [r7]
 80014da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return Filtered sample */
	return filter->out[0];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	ee07 3a90 	vmov	s15, r3
}
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <MovAvgFilter_init>:

void MovAvgFilter_init(MovAvgFilter * filter){
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	/*Clear output buffer*/
	filter->out = 0.0f;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/*clear value*/
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e009      	b.n	800153a <MovAvgFilter_init+0x2c>
		filter -> val[i]= 0;
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b31      	cmp	r3, #49	; 0x31
 800153e:	ddf2      	ble.n	8001526 <MovAvgFilter_init+0x18>
	}
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <MovAvgFilter_Update>:

float MovAvgFilter_Update(MovAvgFilter *filter, float input){
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	ed87 0a00 	vstr	s0, [r7]
	/*Shifting Value and calculate the cumulative sum*/
	float sum = 0;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e019      	b.n	800159c <MovAvgFilter_Update+0x4c>
		filter->val[i] = filter-> val[i+1];
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	601a      	str	r2, [r3, #0]
		sum += filter -> val[i];
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ed97 7a05 	vldr	s14, [r7, #20]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3301      	adds	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b31      	cmp	r3, #49	; 0x31
 80015a0:	dde2      	ble.n	8001568 <MovAvgFilter_Update+0x18>
	}
	(filter -> val[BUFF_LENGTH-1]) = input;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sum += input;
 80015aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80015ae:	edd7 7a00 	vldr	s15, [r7]
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	edc7 7a05 	vstr	s15, [r7, #20]

	/*Calculating the average*/
	float avg = sum/BUFF_LENGTH;
 80015ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80015be:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80015ec <MovAvgFilter_Update+0x9c>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	edc7 7a03 	vstr	s15, [r7, #12]
	filter -> out = avg;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	return filter -> out;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015d8:	ee07 3a90 	vmov	s15, r3
}
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	42480000 	.word	0x42480000

080015f0 <nmea0183_checksum>:
void PowManagement(void *argument);

/* USER CODE BEGIN PFP */
// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001600:	2301      	movs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e00a      	b.n	800161c <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4053      	eors	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3301      	adds	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe fddf 	bl	80001e0 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	1f1a      	subs	r2, r3, #4
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8ec      	bhi.n	8001606 <nmea0183_checksum+0x16>
	}
	return checksum;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i<3; i++){
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e010      	b.n	8001668 <HAL_ADC_ConvCpltCallback+0x30>
	  value[i] = buffer[i];
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_ADC_ConvCpltCallback+0x44>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_ADC_ConvCpltCallback+0x48>)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i<3; i++){
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b02      	cmp	r3, #2
 800166c:	ddeb      	ble.n	8001646 <HAL_ADC_ConvCpltCallback+0xe>
  }
  //Filtering Analog reading
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	2000520c 	.word	0x2000520c
 8001680:	20005644 	.word	0x20005644

08001684 <myprintf>:

void myprintf(const char *fmt, ...) {
 8001684:	b40f      	push	{r0, r1, r2, r3}
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <myprintf+0x44>)
 800169c:	f00e fc0e 	bl	800febc <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <myprintf+0x44>)
 80016a2:	f7fe fd9d 	bl	80001e0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	4905      	ldr	r1, [pc, #20]	; (80016c8 <myprintf+0x44>)
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <myprintf+0x48>)
 80016b6:	f005 fd98 	bl	80071ea <HAL_UART_Transmit>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016c4:	b004      	add	sp, #16
 80016c6:	4770      	bx	lr
 80016c8:	20000234 	.word	0x20000234
 80016cc:	200053b4 	.word	0x200053b4

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b09a      	sub	sp, #104	; 0x68
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d6:	f001 fddd 	bl	8003294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016da:	f000 f89b 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016de:	f000 fa53 	bl	8001b88 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e2:	f000 fa29 	bl	8001b38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 f9fd 	bl	8001ae4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016ea:	f000 f96d 	bl	80019c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80016ee:	f000 f999 	bl	8001a24 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016f2:	f000 f9cd 	bl	8001a90 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80016f6:	f000 f8f9 	bl	80018ec <MX_ADC1_Init>
  MX_FATFS_Init();
 80016fa:	f006 fc95 	bl	8008028 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	2260      	movs	r2, #96	; 0x60
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00d f81a 	bl	800e744 <memset>
  sprintf(txBuffer, "Bismillah..\n");
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4927      	ldr	r1, [pc, #156]	; (80017b0 <main+0xe0>)
 8001714:	4618      	mov	r0, r3
 8001716:	f00d fc87 	bl	800f028 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 800171a:	1d39      	adds	r1, r7, #4
 800171c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001720:	2264      	movs	r2, #100	; 0x64
 8001722:	4824      	ldr	r0, [pc, #144]	; (80017b4 <main+0xe4>)
 8001724:	f005 fd61 	bl	80071ea <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001728:	f009 fa4c 	bl	800abc4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSPI1 */
  MutexSPI1Handle = osMutexNew(&MutexSPI1_attributes);
 800172c:	4822      	ldr	r0, [pc, #136]	; (80017b8 <main+0xe8>)
 800172e:	f009 fb40 	bl	800adb2 <osMutexNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a21      	ldr	r2, [pc, #132]	; (80017bc <main+0xec>)
 8001736:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainProcessTask */
  MainProcessTaskHandle = osThreadNew(MainProcess, NULL, &MainProcessTask_attributes);
 8001738:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <main+0xf0>)
 800173a:	2100      	movs	r1, #0
 800173c:	4821      	ldr	r0, [pc, #132]	; (80017c4 <main+0xf4>)
 800173e:	f009 fa8b 	bl	800ac58 <osThreadNew>
 8001742:	4603      	mov	r3, r0
 8001744:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <main+0xf8>)
 8001746:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <main+0xfc>)
 800174a:	2100      	movs	r1, #0
 800174c:	4820      	ldr	r0, [pc, #128]	; (80017d0 <main+0x100>)
 800174e:	f009 fa83 	bl	800ac58 <osThreadNew>
 8001752:	4603      	mov	r3, r0
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <main+0x104>)
 8001756:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <main+0x108>)
 800175a:	2100      	movs	r1, #0
 800175c:	481f      	ldr	r0, [pc, #124]	; (80017dc <main+0x10c>)
 800175e:	f009 fa7b 	bl	800ac58 <osThreadNew>
 8001762:	4603      	mov	r3, r0
 8001764:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <main+0x110>)
 8001766:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <main+0x114>)
 800176a:	2100      	movs	r1, #0
 800176c:	481e      	ldr	r0, [pc, #120]	; (80017e8 <main+0x118>)
 800176e:	f009 fa73 	bl	800ac58 <osThreadNew>
 8001772:	4603      	mov	r3, r0
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <main+0x11c>)
 8001776:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
  SDCardTaskHandle = osThreadNew(SDCard, NULL, &SDCardTask_attributes);
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <main+0x120>)
 800177a:	2100      	movs	r1, #0
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <main+0x124>)
 800177e:	f009 fa6b 	bl	800ac58 <osThreadNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <main+0x128>)
 8001786:	6013      	str	r3, [r2, #0]

  /* creation of ADCProcessingTa */
  ADCProcessingTaHandle = osThreadNew(ADCProcesing, NULL, &ADCProcessingTa_attributes);
 8001788:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <main+0x12c>)
 800178a:	2100      	movs	r1, #0
 800178c:	481c      	ldr	r0, [pc, #112]	; (8001800 <main+0x130>)
 800178e:	f009 fa63 	bl	800ac58 <osThreadNew>
 8001792:	4603      	mov	r3, r0
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <main+0x134>)
 8001796:	6013      	str	r3, [r2, #0]

  /* creation of PowerManagement */
  PowerManagementHandle = osThreadNew(PowManagement, NULL, &PowerManagement_attributes);
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <main+0x138>)
 800179a:	2100      	movs	r1, #0
 800179c:	481b      	ldr	r0, [pc, #108]	; (800180c <main+0x13c>)
 800179e:	f009 fa5b 	bl	800ac58 <osThreadNew>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <main+0x140>)
 80017a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017a8:	f009 fa30 	bl	800ac0c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 80017ac:	e7fe      	b.n	80017ac <main+0xdc>
 80017ae:	bf00      	nop
 80017b0:	08012d44 	.word	0x08012d44
 80017b4:	200053b4 	.word	0x200053b4
 80017b8:	08013218 	.word	0x08013218
 80017bc:	20004f80 	.word	0x20004f80
 80017c0:	0801311c 	.word	0x0801311c
 80017c4:	08001cc9 	.word	0x08001cc9
 80017c8:	20005358 	.word	0x20005358
 80017cc:	08013140 	.word	0x08013140
 80017d0:	08001db5 	.word	0x08001db5
 80017d4:	20004f24 	.word	0x20004f24
 80017d8:	08013164 	.word	0x08013164
 80017dc:	08001e49 	.word	0x08001e49
 80017e0:	200053fc 	.word	0x200053fc
 80017e4:	08013188 	.word	0x08013188
 80017e8:	08002439 	.word	0x08002439
 80017ec:	20005278 	.word	0x20005278
 80017f0:	080131ac 	.word	0x080131ac
 80017f4:	080025b1 	.word	0x080025b1
 80017f8:	20004c88 	.word	0x20004c88
 80017fc:	080131d0 	.word	0x080131d0
 8001800:	08002789 	.word	0x08002789
 8001804:	20005208 	.word	0x20005208
 8001808:	080131f4 	.word	0x080131f4
 800180c:	08002881 	.word	0x08002881
 8001810:	200053f8 	.word	0x200053f8

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b094      	sub	sp, #80	; 0x50
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0320 	add.w	r3, r7, #32
 800181e:	2230      	movs	r2, #48	; 0x30
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f00c ff8e 	bl	800e744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <SystemClock_Config+0xd0>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <SystemClock_Config+0xd0>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <SystemClock_Config+0xd0>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <SystemClock_Config+0xd4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001860:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <SystemClock_Config+0xd4>)
 8001862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <SystemClock_Config+0xd4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001878:	2301      	movs	r3, #1
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187c:	2310      	movs	r3, #16
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001880:	2302      	movs	r3, #2
 8001882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001884:	2300      	movs	r3, #0
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001888:	2310      	movs	r3, #16
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800188c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001892:	2304      	movs	r3, #4
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001896:	2307      	movs	r3, #7
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 ff88 	bl	80057b4 <HAL_RCC_OscConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018aa:	f001 f84f 	bl	800294c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ae:	230f      	movs	r3, #15
 80018b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b2:	2302      	movs	r3, #2
 80018b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2102      	movs	r1, #2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 f9ea 	bl	8005ca4 <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018d6:	f001 f839 	bl	800294c <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3750      	adds	r7, #80	; 0x50
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000

080018ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <MX_ADC1_Init+0xd0>)
 8001900:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <MX_ADC1_Init+0xd4>)
 8001902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <MX_ADC1_Init+0xd0>)
 8001906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800190a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <MX_ADC1_Init+0xd0>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <MX_ADC1_Init+0xd0>)
 8001914:	2201      	movs	r2, #1
 8001916:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <MX_ADC1_Init+0xd0>)
 800191a:	2201      	movs	r2, #1
 800191c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <MX_ADC1_Init+0xd0>)
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <MX_ADC1_Init+0xd0>)
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <MX_ADC1_Init+0xd0>)
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <MX_ADC1_Init+0xd8>)
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_ADC1_Init+0xd0>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_ADC1_Init+0xd0>)
 800193a:	2203      	movs	r2, #3
 800193c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <MX_ADC1_Init+0xd0>)
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_ADC1_Init+0xd0>)
 8001948:	2201      	movs	r2, #1
 800194a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800194c:	481b      	ldr	r0, [pc, #108]	; (80019bc <MX_ADC1_Init+0xd0>)
 800194e:	f001 fd07 	bl	8003360 <HAL_ADC_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001958:	f000 fff8 	bl	800294c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800195c:	230f      	movs	r3, #15
 800195e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001964:	2307      	movs	r3, #7
 8001966:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4813      	ldr	r0, [pc, #76]	; (80019bc <MX_ADC1_Init+0xd0>)
 800196e:	f001 fe3f 	bl	80035f0 <HAL_ADC_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001978:	f000 ffe8 	bl	800294c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800197c:	2308      	movs	r3, #8
 800197e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001980:	2302      	movs	r3, #2
 8001982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_ADC1_Init+0xd0>)
 800198a:	f001 fe31 	bl	80035f0 <HAL_ADC_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001994:	f000 ffda 	bl	800294c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001998:	2309      	movs	r3, #9
 800199a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800199c:	2303      	movs	r3, #3
 800199e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_ADC1_Init+0xd0>)
 80019a6:	f001 fe23 	bl	80035f0 <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80019b0:	f000 ffcc 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000511c 	.word	0x2000511c
 80019c0:	40012000 	.word	0x40012000
 80019c4:	0f000001 	.word	0x0f000001

080019c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <MX_I2C1_Init+0x54>)
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x58>)
 80019d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_I2C1_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_I2C1_Init+0x50>)
 8001a06:	f002 ff15 	bl	8004834 <HAL_I2C_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a10:	f000 ff9c 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20004ed0 	.word	0x20004ed0
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	000186a0 	.word	0x000186a0

08001a24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a2a:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <MX_SPI1_Init+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a58:	2230      	movs	r2, #48	; 0x30
 8001a5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a70:	220a      	movs	r2, #10
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_SPI1_Init+0x64>)
 8001a76:	f004 fb43 	bl	8006100 <HAL_SPI_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a80:	f000 ff64 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000535c 	.word	0x2000535c
 8001a8c:	40013000 	.word	0x40013000

08001a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_USART1_UART_Init+0x50>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001a9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001ac8:	f005 fb42 	bl	8007150 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ad2:	f000 ff3b 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200051c4 	.word	0x200051c4
 8001ae0:	40011000 	.word	0x40011000

08001ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <MX_USART2_UART_Init+0x50>)
 8001aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	f005 fb18 	bl	8007150 <HAL_UART_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b26:	f000 ff11 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200053b4 	.word	0x200053b4
 8001b34:	40004400 	.word	0x40004400

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_DMA_Init+0x4c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <MX_DMA_Init+0x4c>)
 8001b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <MX_DMA_Init+0x4c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	2038      	movs	r0, #56	; 0x38
 8001b60:	f002 f89e 	bl	8003ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b64:	2038      	movs	r0, #56	; 0x38
 8001b66:	f002 f8b7 	bl	8003cd8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	203a      	movs	r0, #58	; 0x3a
 8001b70:	f002 f896 	bl	8003ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b74:	203a      	movs	r0, #58	; 0x3a
 8001b76:	f002 f8af 	bl	8003cd8 <HAL_NVIC_EnableIRQ>

}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a43      	ldr	r2, [pc, #268]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a3c      	ldr	r2, [pc, #240]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a35      	ldr	r2, [pc, #212]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <MX_GPIO_Init+0x12c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2112      	movs	r1, #18
 8001c12:	4829      	ldr	r0, [pc, #164]	; (8001cb8 <MX_GPIO_Init+0x130>)
 8001c14:	f002 fdf4 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001c1e:	4827      	ldr	r0, [pc, #156]	; (8001cbc <MX_GPIO_Init+0x134>)
 8001c20:	f002 fdee 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <MX_GPIO_Init+0x138>)
 8001c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	4820      	ldr	r0, [pc, #128]	; (8001cbc <MX_GPIO_Init+0x134>)
 8001c3a:	f002 fc5d 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 8001c3e:	2312      	movs	r3, #18
 8001c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4818      	ldr	r0, [pc, #96]	; (8001cb8 <MX_GPIO_Init+0x130>)
 8001c56:	f002 fc4f 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin POWER_SEL_Pin IGNITION_LOGIC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin;
 8001c5a:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4812      	ldr	r0, [pc, #72]	; (8001cbc <MX_GPIO_Init+0x134>)
 8001c74:	f002 fc40 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGING_SIGNAL_Pin */
  GPIO_InitStruct.Pin = CHARGING_SIGNAL_Pin;
 8001c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGING_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <MX_GPIO_Init+0x13c>)
 8001c8e:	f002 fc33 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IGNITION_SIGNAL_Pin;
 8001c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IGNITION_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <MX_GPIO_Init+0x130>)
 8001ca8:	f002 fc26 	bl	80044f8 <HAL_GPIO_Init>

}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	10210000 	.word	0x10210000
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <MainProcess>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainProcess */
void MainProcess(void *argument)
{
 8001cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ccc:	b0c3      	sub	sp, #268	; 0x10c
 8001cce:	af0a      	add	r7, sp, #40	; 0x28
 8001cd0:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	f107 0318 	add.w	r3, r7, #24
 8001cda:	22c4      	movs	r2, #196	; 0xc4
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00c fd30 	bl	800e744 <memset>
	sprintf(txBuffer, "Running Display Task..\n");
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <MainProcess+0xd0>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00d f99c 	bl	800f028 <siprintf>
  /* Infinite loop */
	uint8_t identification = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  for(;;)
  {
	  //Identification Check
	  if (identification == 1){
 8001cf6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d106      	bne.n	8001d0c <MainProcess+0x44>
		  xTaskNotifyGive(IMUTaskHandle);
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <MainProcess+0xd4>)
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2202      	movs	r2, #2
 8001d06:	2100      	movs	r1, #0
 8001d08:	f00b fc50 	bl	800d5ac <xTaskGenericNotify>
	  }

	  if(UID[0]== 0x29){ // Need to add driver database
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <MainProcess+0xd8>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b29      	cmp	r3, #41	; 0x29
 8001d12:	d103      	bne.n	8001d1c <MainProcess+0x54>
		  identification = 1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001d1a:	e002      	b.n	8001d22 <MainProcess+0x5a>
	  } else {
		  identification = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	  }
	  //End of Identification Check
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <MainProcess+0xd8>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001d26:	60bb      	str	r3, [r7, #8]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <MainProcess+0xd8>)
 8001d2a:	785b      	ldrb	r3, [r3, #1]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001d2c:	607b      	str	r3, [r7, #4]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <MainProcess+0xd8>)
 8001d30:	789b      	ldrb	r3, [r3, #2]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001d32:	461e      	mov	r6, r3
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MainProcess+0xd8>)
 8001d36:	78db      	ldrb	r3, [r3, #3]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MainProcess+0xdc>)
 8001d3c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MainProcess+0xdc>)
 8001d42:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MainProcess+0xdc>)
 8001d48:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MainProcess+0xe0>)
 8001d4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fc00 	bl	8000558 <__aeabi_f2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	f107 0014 	add.w	r0, r7, #20
 8001d60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d64:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001d68:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001d6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	9101      	str	r1, [sp, #4]
 8001d74:	9600      	str	r6, [sp, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <MainProcess+0xe4>)
 8001d7c:	f00d f954 	bl	800f028 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
 8001d80:	f107 0114 	add.w	r1, r7, #20
 8001d84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d88:	22c8      	movs	r2, #200	; 0xc8
 8001d8a:	4809      	ldr	r0, [pc, #36]	; (8001db0 <MainProcess+0xe8>)
 8001d8c:	f005 fa2d 	bl	80071ea <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(10);
 8001d90:	200a      	movs	r0, #10
 8001d92:	f008 fff3 	bl	800ad7c <osDelay>
	  if (identification == 1){
 8001d96:	e7ae      	b.n	8001cf6 <MainProcess+0x2e>
 8001d98:	08012d54 	.word	0x08012d54
 8001d9c:	20004f24 	.word	0x20004f24
 8001da0:	2000021c 	.word	0x2000021c
 8001da4:	20004f28 	.word	0x20004f28
 8001da8:	20005050 	.word	0x20005050
 8001dac:	08012d6c 	.word	0x08012d6c
 8001db0:	200053b4 	.word	0x200053b4

08001db4 <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b09c      	sub	sp, #112	; 0x70
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2260      	movs	r2, #96	; 0x60
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00c fcbb 	bl	800e744 <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	4918      	ldr	r1, [pc, #96]	; (8001e34 <IMU+0x80>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00d f927 	bl	800f028 <siprintf>

	uint8_t ID = MPU6050_Init(&hi2c1);
 8001dda:	4817      	ldr	r0, [pc, #92]	; (8001e38 <IMU+0x84>)
 8001ddc:	f000 fdbb 	bl	8002956 <MPU6050_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 8001de6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4913      	ldr	r1, [pc, #76]	; (8001e3c <IMU+0x88>)
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00d f919 	bl	800f028 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 8001df6:	f107 0108 	add.w	r1, r7, #8
 8001dfa:	2364      	movs	r3, #100	; 0x64
 8001dfc:	2264      	movs	r2, #100	; 0x64
 8001dfe:	4810      	ldr	r0, [pc, #64]	; (8001e40 <IMU+0x8c>)
 8001e00:	f005 f9f3 	bl	80071ea <HAL_UART_Transmit>
	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	2264      	movs	r2, #100	; 0x64
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00c fc99 	bl	800e744 <memset>
	osDelay(200);
 8001e12:	20c8      	movs	r0, #200	; 0xc8
 8001e14:	f008 ffb2 	bl	800ad7c <osDelay>
  /* Infinite loop */
  for(;;)
  {
	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f00b fb7d 	bl	800d51c <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001e22:	4908      	ldr	r1, [pc, #32]	; (8001e44 <IMU+0x90>)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <IMU+0x84>)
 8001e26:	f000 fe0f 	bl	8002a48 <MPU6050_Read_Accel>
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay,MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(50);
 8001e2a:	2032      	movs	r0, #50	; 0x32
 8001e2c:	f008 ffa6 	bl	800ad7c <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001e30:	e7f2      	b.n	8001e18 <IMU+0x64>
 8001e32:	bf00      	nop
 8001e34:	08012da8 	.word	0x08012da8
 8001e38:	20004ed0 	.word	0x20004ed0
 8001e3c:	08012dbc 	.word	0x08012dbc
 8001e40:	200053b4 	.word	0x200053b4
 8001e44:	20004f28 	.word	0x20004f28

08001e48 <GPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS */
void GPS(void *argument)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8001e4e:	af04      	add	r7, sp, #16
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	6018      	str	r0, [r3, #0]

	  char hH[2]; // hours
	  char mM[2]; // minutes
	  char sS[2]; // seconds

	  uint8_t cnt = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393

	  HAL_UART_Receive_DMA(&huart1, buff, 255);
 8001e5a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001e5e:	22ff      	movs	r2, #255	; 0xff
 8001e60:	4619      	mov	r1, r3
 8001e62:	4876      	ldr	r0, [pc, #472]	; (800203c <GPS+0x1f4>)
 8001e64:	f005 fa53 	bl	800730e <HAL_UART_Receive_DMA>

	  HAL_UART_Transmit(&huart2, (unsigned char *) "Start\n", 6, 500);
 8001e68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e6c:	2206      	movs	r2, #6
 8001e6e:	4974      	ldr	r1, [pc, #464]	; (8002040 <GPS+0x1f8>)
 8001e70:	4874      	ldr	r0, [pc, #464]	; (8002044 <GPS+0x1fc>)
 8001e72:	f005 f9ba 	bl	80071ea <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  char txBuffer[200] = {};
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	22c4      	movs	r2, #196	; 0xc4
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00c fc5d 	bl	800e744 <memset>
	  sprintf(txBuffer,"\nFlag : %d", flag);
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <GPS+0x200>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	496d      	ldr	r1, [pc, #436]	; (800204c <GPS+0x204>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f00d f8c6 	bl	800f028 <siprintf>
	  //	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  if (flag) {
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <GPS+0x200>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 82b3 	beq.w	800240c <GPS+0x5c4>
	  	memset(buffStr, 0, 255);
 8001ea6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001eaa:	22ff      	movs	r2, #255	; 0xff
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f00c fc48 	bl	800e744 <memset>
	  	sprintf(buffStr, "%s", buff);
 8001eb4:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8001eb8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001ebc:	4964      	ldr	r1, [pc, #400]	; (8002050 <GPS+0x208>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00d f8b2 	bl	800f028 <siprintf>
	  //HAL_UART_Transmit(&huart2, (uint8_t *)buffStr, sizeof(buffStr), 70);
	  // splitting the buffStr by the "\n" delimiter with the strsep() C function
	  // see http://www.manpagez.com/man/3/strsep/
	  	char *token, *string;
	  	// actually splitting the string by "\n" delimiter
	  	string = strdup(buffStr);
 8001ec4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00d f8f1 	bl	800f0b0 <strdup>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ed6:	601a      	str	r2, [r3, #0]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8001ed8:	e26e      	b.n	80023b8 <GPS+0x570>
	  		memset(nmeaSnt, 0, 80);
 8001eda:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ede:	2250      	movs	r2, #80	; 0x50
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00c fc2e 	bl	800e744 <memset>
	  		sprintf(nmeaSnt, "%s", token);
 8001ee8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001eec:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8001ef0:	4957      	ldr	r1, [pc, #348]	; (8002050 <GPS+0x208>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00d f898 	bl	800f028 <siprintf>

	  		memset(txBuffer,0,sizeof(txBuffer));
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	22c8      	movs	r2, #200	; 0xc8
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00c fc1f 	bl	800e744 <memset>
	  //HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 100);
	  // selecting only $GNGLL sentences, combined GPS and GLONAS
	  // on my GPS sensor this good NMEA sentence is always 50 characters
	  		if ((strstr(nmeaSnt, "$GPGGA") != 0) && (strlen(nmeaSnt) > 49) &&(strlen(nmeaSnt) <90) && strstr(nmeaSnt, "*") != 0) {
 8001f06:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f0a:	4952      	ldr	r1, [pc, #328]	; (8002054 <GPS+0x20c>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f00d f904 	bl	800f11a <strstr>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 824f 	beq.w	80023b8 <GPS+0x570>
 8001f1a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe f95e 	bl	80001e0 <strlen>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b31      	cmp	r3, #49	; 0x31
 8001f28:	f240 8246 	bls.w	80023b8 <GPS+0x570>
 8001f2c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe f955 	bl	80001e0 <strlen>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b59      	cmp	r3, #89	; 0x59
 8001f3a:	f200 823d 	bhi.w	80023b8 <GPS+0x570>
 8001f3e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f42:	212a      	movs	r1, #42	; 0x2a
 8001f44:	4618      	mov	r0, r3
 8001f46:	f00d f89e 	bl	800f086 <strchr>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8233 	beq.w	80023b8 <GPS+0x570>
	  			rawSum = strstr(nmeaSnt, "*");
 8001f52:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f56:	212a      	movs	r1, #42	; 0x2a
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00d f894 	bl	800f086 <strchr>
 8001f5e:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  			memcpy(smNmbr, &rawSum[1], 2);
 8001f62:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001f66:	3301      	adds	r3, #1
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f70:	801a      	strh	r2, [r3, #0]
	  			smNmbr[2] = '\0';
 8001f72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f76:	2200      	movs	r2, #0
 8001f78:	709a      	strb	r2, [r3, #2]

	  			uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8001f7a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fb36 	bl	80015f0 <nmea0183_checksum>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f887 3383 	strb.w	r3, [r7, #899]	; 0x383
	  			char hex[2];
	  			// "%X" unsigned hexadecimal integer (capital letters)
	  			sprintf(hex, "%X", intSum);
 8001f8a:	f897 2383 	ldrb.w	r2, [r7, #899]	; 0x383
 8001f8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f92:	4931      	ldr	r1, [pc, #196]	; (8002058 <GPS+0x210>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00d f847 	bl	800f028 <siprintf>

	  			// checksum data verification, if OK, then we can really trust
	  			// the data in the the NMEA sentence
	  			if (strstr(smNmbr, hex) != NULL) {
 8001f9a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001f9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00d f8b8 	bl	800f11a <strstr>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8203 	beq.w	80023b8 <GPS+0x570>
	  				cnt = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  //			sprintf(txBuffer,"pV : %s\n", pV);
	  			// splitting the good NMEA sentence into the tokens by the comma delimiter
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8001fb8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001fbc:	4927      	ldr	r1, [pc, #156]	; (800205c <GPS+0x214>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00d fef4 	bl	800fdac <strtok>
 8001fc4:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8001fc8:	e05d      	b.n	8002086 <GPS+0x23e>
	  					memset(txBuffer,0,sizeof(txBuffer));
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	22c8      	movs	r2, #200	; 0xc8
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00c fbb6 	bl	800e744 <memset>
//	  					sprintf(txBuffer,"pV[%d] : %s\n",cnt, pV);
	  //				HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 100);
	  					switch (cnt) {
 8001fd8:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d846      	bhi.n	8002070 <GPS+0x228>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <GPS+0x1a0>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ffd 	.word	0x08001ffd
 8001fec:	0800200d 	.word	0x0800200d
 8001ff0:	0800201d 	.word	0x0800201d
 8001ff4:	0800202d 	.word	0x0800202d
 8001ff8:	08002061 	.word	0x08002061
	  						case 1:
	  							  utcRaw = strdup(pV);
 8001ffc:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002000:	f00d f856 	bl	800f0b0 <strdup>
 8002004:	4603      	mov	r3, r0
 8002006:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	  							  break;
 800200a:	e031      	b.n	8002070 <GPS+0x228>
	  						case 2:
	  							  latRaw = strdup(pV);
 800200c:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002010:	f00d f84e 	bl	800f0b0 <strdup>
 8002014:	4603      	mov	r3, r0
 8002016:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
	  							  break;
 800201a:	e029      	b.n	8002070 <GPS+0x228>
	  						case 3:
	  							  hemNS = strdup(pV);
 800201c:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002020:	f00d f846 	bl	800f0b0 <strdup>
 8002024:	4603      	mov	r3, r0
 8002026:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	  							  break;
 800202a:	e021      	b.n	8002070 <GPS+0x228>
	  						case 4:
	  							  lonRaw = strdup(pV);
 800202c:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002030:	f00d f83e 	bl	800f0b0 <strdup>
 8002034:	4603      	mov	r3, r0
 8002036:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	  							  break;
 800203a:	e019      	b.n	8002070 <GPS+0x228>
 800203c:	200051c4 	.word	0x200051c4
 8002040:	08012de0 	.word	0x08012de0
 8002044:	200053b4 	.word	0x200053b4
 8002048:	20000230 	.word	0x20000230
 800204c:	08012de8 	.word	0x08012de8
 8002050:	08012df4 	.word	0x08012df4
 8002054:	08012df8 	.word	0x08012df8
 8002058:	08012e00 	.word	0x08012e00
 800205c:	08012e04 	.word	0x08012e04
	  						case 5:
	  							  hemEW = strdup(pV);
 8002060:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002064:	f00d f824 	bl	800f0b0 <strdup>
 8002068:	4603      	mov	r3, r0
 800206a:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	  							  break;
 800206e:	bf00      	nop
	  					}
	  					cnt++;
 8002070:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 8002074:	3301      	adds	r3, #1
 8002076:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 800207a:	49d8      	ldr	r1, [pc, #864]	; (80023dc <GPS+0x594>)
 800207c:	2000      	movs	r0, #0
 800207e:	f00d fe95 	bl	800fdac <strtok>
 8002082:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8002086:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d19d      	bne.n	8001fca <GPS+0x182>
	  				} //end for

	  				//Converting Longitude and Latitude into Float
	  				latitude = atof(latRaw);
 800208e:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 8002092:	f00c fb1b 	bl	800e6cc <atof>
 8002096:	ec53 2b10 	vmov	r2, r3, d0
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fdab 	bl	8000bf8 <__aeabi_d2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4ace      	ldr	r2, [pc, #824]	; (80023e0 <GPS+0x598>)
 80020a6:	6013      	str	r3, [r2, #0]
	  				longitude = atof(lonRaw);
 80020a8:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 80020ac:	f00c fb0e 	bl	800e6cc <atof>
 80020b0:	ec53 2b10 	vmov	r2, r3, d0
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7fe fd9e 	bl	8000bf8 <__aeabi_d2f>
 80020bc:	4603      	mov	r3, r0
 80020be:	4ac9      	ldr	r2, [pc, #804]	; (80023e4 <GPS+0x59c>)
 80020c0:	6013      	str	r3, [r2, #0]

	  				if (*hemNS == 'S') {
 80020c2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b53      	cmp	r3, #83	; 0x53
 80020ca:	d112      	bne.n	80020f2 <GPS+0x2aa>
	  					latitude  *= -1.0;
 80020cc:	4bc4      	ldr	r3, [pc, #784]	; (80023e0 <GPS+0x598>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa41 	bl	8000558 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd8b 	bl	8000bf8 <__aeabi_d2f>
 80020e2:	4603      	mov	r3, r0
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef1 7a67 	vneg.f32	s15, s15
 80020ec:	4bbc      	ldr	r3, [pc, #752]	; (80023e0 <GPS+0x598>)
 80020ee:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				if (*hemEW == 'W') {
 80020f2:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b57      	cmp	r3, #87	; 0x57
 80020fa:	d112      	bne.n	8002122 <GPS+0x2da>
	  					longitude *= -1.0;
 80020fc:	4bb9      	ldr	r3, [pc, #740]	; (80023e4 <GPS+0x59c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fa29 	bl	8000558 <__aeabi_f2d>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fd73 	bl	8000bf8 <__aeabi_d2f>
 8002112:	4603      	mov	r3, r0
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef1 7a67 	vneg.f32	s15, s15
 800211c:	4bb1      	ldr	r3, [pc, #708]	; (80023e4 <GPS+0x59c>)
 800211e:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				char * token;
	  				//Get LatitudeDegree
	  				token = strtok(latRaw, ".");
 8002122:	49b1      	ldr	r1, [pc, #708]	; (80023e8 <GPS+0x5a0>)
 8002124:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 8002128:	f00d fe40 	bl	800fdac <strtok>
 800212c:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latDg, 0, sizeof(latDg));
 8002130:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002134:	220a      	movs	r2, #10
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f00c fb03 	bl	800e744 <memset>
	  //			memcpy(latDg, token, strlen(token));
	  				sprintf(latDg, token);
 800213e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002142:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002146:	4618      	mov	r0, r3
 8002148:	f00c ff6e 	bl	800f028 <siprintf>
	  				//Get Minutes
	  				token = strtok(NULL,".");
 800214c:	49a6      	ldr	r1, [pc, #664]	; (80023e8 <GPS+0x5a0>)
 800214e:	2000      	movs	r0, #0
 8002150:	f00d fe2c 	bl	800fdac <strtok>
 8002154:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latMS, 0, sizeof(latMS));
 8002158:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800215c:	2214      	movs	r2, #20
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f00c faef 	bl	800e744 <memset>
	  //			memcpy(latMS, token, strlen(token));
	  				sprintf(latMS, token);
 8002166:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800216a:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 800216e:	4618      	mov	r0, r3
 8002170:	f00c ff5a 	bl	800f028 <siprintf>
	  //			latMS[7] = '.';

	  				//Get longitude Degree
	  				float degrees = trunc(latitude / 100.0f);
 8002174:	4b9a      	ldr	r3, [pc, #616]	; (80023e0 <GPS+0x598>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80023ec <GPS+0x5a4>
 800217e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002182:	ee16 0a90 	vmov	r0, s13
 8002186:	f7fe f9e7 	bl	8000558 <__aeabi_f2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ec43 2b10 	vmov	d0, r2, r3
 8002192:	f010 fd67 	bl	8012c64 <trunc>
 8002196:	ec53 2b10 	vmov	r2, r3, d0
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f7fe fd2b 	bl	8000bf8 <__aeabi_d2f>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				float minutes = latitude - (degrees * 100.0f);
 80021a8:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <GPS+0x598>)
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 80021b2:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80023ec <GPS+0x5a4>
 80021b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021be:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				latitude = degrees + (minutes / 60.0f);
 80021c2:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 80021c6:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80023f0 <GPS+0x5a8>
 80021ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021ce:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	4b82      	ldr	r3, [pc, #520]	; (80023e0 <GPS+0x598>)
 80021d8:	edc3 7a00 	vstr	s15, [r3]

	  				degrees = trunc(longitude / 100.0f);
 80021dc:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <GPS+0x59c>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80023ec <GPS+0x5a4>
 80021e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021ea:	ee16 0a90 	vmov	r0, s13
 80021ee:	f7fe f9b3 	bl	8000558 <__aeabi_f2d>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	ec43 2b10 	vmov	d0, r2, r3
 80021fa:	f010 fd33 	bl	8012c64 <trunc>
 80021fe:	ec53 2b10 	vmov	r2, r3, d0
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	f7fe fcf7 	bl	8000bf8 <__aeabi_d2f>
 800220a:	4603      	mov	r3, r0
 800220c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				minutes = longitude - (degrees * 100.0f);
 8002210:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <GPS+0x59c>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800221a:	eddf 6a74 	vldr	s13, [pc, #464]	; 80023ec <GPS+0x5a4>
 800221e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002226:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				longitude = degrees + (minutes / 60.0f);
 800222a:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 800222e:	eddf 6a70 	vldr	s13, [pc, #448]	; 80023f0 <GPS+0x5a8>
 8002232:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002236:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <GPS+0x59c>)
 8002240:	edc3 7a00 	vstr	s15, [r3]


	  				token = strtok(lonRaw, ".");
 8002244:	4968      	ldr	r1, [pc, #416]	; (80023e8 <GPS+0x5a0>)
 8002246:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 800224a:	f00d fdaf 	bl	800fdac <strtok>
 800224e:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonDg, 0, sizeof(lonDg));
 8002252:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002256:	220a      	movs	r2, #10
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f00c fa72 	bl	800e744 <memset>
	  				memcpy(lonDg, token, strlen(token));
 8002260:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8002264:	f7fd ffbc 	bl	80001e0 <strlen>
 8002268:	4602      	mov	r2, r0
 800226a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800226e:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002272:	4618      	mov	r0, r3
 8002274:	f00c fa58 	bl	800e728 <memcpy>

	  				token = strtok(NULL, ".");
 8002278:	495b      	ldr	r1, [pc, #364]	; (80023e8 <GPS+0x5a0>)
 800227a:	2000      	movs	r0, #0
 800227c:	f00d fd96 	bl	800fdac <strtok>
 8002280:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonMS, 0, sizeof(lonMS));
 8002284:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002288:	220a      	movs	r2, #10
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f00c fa59 	bl	800e744 <memset>
	  				memcpy(lonMS, token, strlen(token));
 8002292:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8002296:	f7fd ffa3 	bl	80001e0 <strlen>
 800229a:	4602      	mov	r2, r0
 800229c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022a0:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00c fa3f 	bl	800e728 <memcpy>

	  				memset(txBuffer,0,sizeof(txBuffer));
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	22c8      	movs	r2, #200	; 0xc8
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f00c fa46 	bl	800e744 <memset>
	  				sprintf(txBuffer, "latDg : %s latMs : %s lonDg : %s lonMs : %s\n",latDg,latMS,lonDg,lonMS );
 80022b8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80022bc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80022c0:	f107 000c 	add.w	r0, r7, #12
 80022c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	460b      	mov	r3, r1
 80022d2:	4948      	ldr	r1, [pc, #288]	; (80023f4 <GPS+0x5ac>)
 80022d4:	f00c fea8 	bl	800f028 <siprintf>
 80022d8:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29a      	uxth	r2, r3
	  //		  HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);

	  					  //converting the UTC time in the hh:mm:ss format
	  				memcpy(hH, &utcRaw[0], 2);
 80022e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022e4:	801a      	strh	r2, [r3, #0]
	  				hH[2] = '\0';
 80022e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022ea:	2200      	movs	r2, #0
 80022ec:	709a      	strb	r2, [r3, #2]

	  				memcpy(mM, &utcRaw[2], 2);
 80022ee:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80022f2:	3302      	adds	r3, #2
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022fc:	801a      	strh	r2, [r3, #0]
	  				mM[2] = '\0';
 80022fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002302:	2200      	movs	r2, #0
 8002304:	709a      	strb	r2, [r3, #2]

	  				memcpy(sS, &utcRaw[4], 2);
 8002306:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800230a:	3304      	adds	r3, #4
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29a      	uxth	r2, r3
 8002310:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002314:	801a      	strh	r2, [r3, #0]
	  				sS[2] = '\0';
 8002316:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800231a:	2200      	movs	r2, #0
 800231c:	709a      	strb	r2, [r3, #2]
//	  				float latDg_f = atof(latDg)/100.0;
//	  				float latMS_f = atof(latMS)/60.0;
//	  				float lonDg_f = atof(lonDg)/100.0;
//	  				float lonMS_f = atof(lonMS)/60.0;

	  				strcpy(strUTC, hH);
 800231e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002322:	4619      	mov	r1, r3
 8002324:	4834      	ldr	r0, [pc, #208]	; (80023f8 <GPS+0x5b0>)
 8002326:	f00c febb 	bl	800f0a0 <strcpy>
	  				strcat(strUTC, ":");
 800232a:	4833      	ldr	r0, [pc, #204]	; (80023f8 <GPS+0x5b0>)
 800232c:	f7fd ff58 	bl	80001e0 <strlen>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <GPS+0x5b0>)
 8002336:	4413      	add	r3, r2
 8002338:	4930      	ldr	r1, [pc, #192]	; (80023fc <GPS+0x5b4>)
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, mM);
 8002342:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002346:	4619      	mov	r1, r3
 8002348:	482b      	ldr	r0, [pc, #172]	; (80023f8 <GPS+0x5b0>)
 800234a:	f00c fe8d 	bl	800f068 <strcat>
	  				strcat(strUTC, ":");
 800234e:	482a      	ldr	r0, [pc, #168]	; (80023f8 <GPS+0x5b0>)
 8002350:	f7fd ff46 	bl	80001e0 <strlen>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <GPS+0x5b0>)
 800235a:	4413      	add	r3, r2
 800235c:	4927      	ldr	r1, [pc, #156]	; (80023fc <GPS+0x5b4>)
 800235e:	461a      	mov	r2, r3
 8002360:	460b      	mov	r3, r1
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, sS);
 8002366:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800236a:	4619      	mov	r1, r3
 800236c:	4822      	ldr	r0, [pc, #136]	; (80023f8 <GPS+0x5b0>)
 800236e:	f00c fe7b 	bl	800f068 <strcat>
	  				strUTC[8] = '\0';
 8002372:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <GPS+0x5b0>)
 8002374:	2200      	movs	r2, #0
 8002376:	721a      	strb	r2, [r3, #8]

	  				memset(txBuffer,0,sizeof(txBuffer));
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	22c8      	movs	r2, #200	; 0xc8
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f00c f9df 	bl	800e744 <memset>
	  				sprintf(txBuffer, "Latitude : %f Longitude : %f UTC : %s\n",latitude,longitude, strUTC);
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <GPS+0x598>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f8e4 	bl	8000558 <__aeabi_f2d>
 8002390:	4604      	mov	r4, r0
 8002392:	460d      	mov	r5, r1
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <GPS+0x59c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8dd 	bl	8000558 <__aeabi_f2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	f107 000c 	add.w	r0, r7, #12
 80023a6:	4914      	ldr	r1, [pc, #80]	; (80023f8 <GPS+0x5b0>)
 80023a8:	9102      	str	r1, [sp, #8]
 80023aa:	e9cd 2300 	strd	r2, r3, [sp]
 80023ae:	4622      	mov	r2, r4
 80023b0:	462b      	mov	r3, r5
 80023b2:	4913      	ldr	r1, [pc, #76]	; (8002400 <GPS+0x5b8>)
 80023b4:	f00c fe38 	bl	800f028 <siprintf>
	  	while ((token = strsep(&string, "\n")) != NULL) {
 80023b8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023bc:	4911      	ldr	r1, [pc, #68]	; (8002404 <GPS+0x5bc>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f00c fea6 	bl	800f110 <strsep>
 80023c4:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 80023c8:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f ad84 	bne.w	8001eda <GPS+0x92>
//	  				HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);

	  			} //end of the chekcsum data verification
	  		} //end of %GPPGA Sentences selection
	  	}// end of splotting the buffstr by the "\n" delimiter with strsep() c function
	  	flag = 0;
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <GPS+0x5c0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e025      	b.n	8002426 <GPS+0x5de>
 80023da:	bf00      	nop
 80023dc:	08012e04 	.word	0x08012e04
 80023e0:	20000220 	.word	0x20000220
 80023e4:	20000224 	.word	0x20000224
 80023e8:	08012e08 	.word	0x08012e08
 80023ec:	42c80000 	.word	0x42c80000
 80023f0:	42700000 	.word	0x42700000
 80023f4:	08012e0c 	.word	0x08012e0c
 80023f8:	20000228 	.word	0x20000228
 80023fc:	08012e3c 	.word	0x08012e3c
 8002400:	08012e40 	.word	0x08012e40
 8002404:	08012e68 	.word	0x08012e68
 8002408:	20000230 	.word	0x20000230
	  }
	  else {
		  sprintf(txBuffer," GPS no signal..");
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	4907      	ldr	r1, [pc, #28]	; (8002430 <GPS+0x5e8>)
 8002412:	4618      	mov	r0, r3
 8002414:	f00c fe08 	bl	800f028 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer, sizeof(txBuffer), 100);
 8002418:	f107 010c 	add.w	r1, r7, #12
 800241c:	2364      	movs	r3, #100	; 0x64
 800241e:	22c8      	movs	r2, #200	; 0xc8
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <GPS+0x5ec>)
 8002422:	f004 fee2 	bl	80071ea <HAL_UART_Transmit>
	  }
	  osDelay(500);
 8002426:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800242a:	f008 fca7 	bl	800ad7c <osDelay>
  {
 800242e:	e522      	b.n	8001e76 <GPS+0x2e>
 8002430:	08012e6c 	.word	0x08012e6c
 8002434:	200053b4 	.word	0x200053b4

08002438 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0a2      	sub	sp, #136	; 0x88
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */
	char txBuffer [100] ={};
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	2260      	movs	r2, #96	; 0x60
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f00c f979 	bl	800e744 <memset>
	u_char status, checksum1, cardstr[MAX_LEN];
	MFRC522_Init();
 8002452:	f7fe fe83 	bl	800115c <MFRC522_Init>
	status = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	while (status == 0){
 800245c:	e018      	b.n	8002490 <RFID+0x58>
		status = Read_MFRC522(VersionReg);
 800245e:	2037      	movs	r0, #55	; 0x37
 8002460:	f7fe fdfc 	bl	800105c <Read_MFRC522>
 8002464:	4603      	mov	r3, r0
 8002466:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 800246a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800246e:	f107 0318 	add.w	r3, r7, #24
 8002472:	4949      	ldr	r1, [pc, #292]	; (8002598 <RFID+0x160>)
 8002474:	4618      	mov	r0, r3
 8002476:	f00c fdd7 	bl	800f028 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 800247a:	f107 0118 	add.w	r1, r7, #24
 800247e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002482:	2264      	movs	r2, #100	; 0x64
 8002484:	4845      	ldr	r0, [pc, #276]	; (800259c <RFID+0x164>)
 8002486:	f004 feb0 	bl	80071ea <HAL_UART_Transmit>
		osDelay(100);
 800248a:	2064      	movs	r0, #100	; 0x64
 800248c:	f008 fc76 	bl	800ad7c <osDelay>
	while (status == 0){
 8002490:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0e2      	beq.n	800245e <RFID+0x26>
	}
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8002498:	f107 0318 	add.w	r3, r7, #24
 800249c:	2264      	movs	r2, #100	; 0x64
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00c f94f 	bl	800e744 <memset>
	status = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(200);
 80024ac:	20c8      	movs	r0, #200	; 0xc8
 80024ae:	f008 fc65 	bl	800ad7c <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <RFID+0x168>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f04f 31ff 	mov.w	r1, #4294967295
 80024ba:	4618      	mov	r0, r3
 80024bc:	f008 fcff 	bl	800aebe <osMutexAcquire>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	4619      	mov	r1, r3
 80024c6:	2026      	movs	r0, #38	; 0x26
 80024c8:	f7fe fe74 	bl	80011b4 <MFRC522_Request>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 80024d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d145      	bne.n	8002566 <RFID+0x12e>
		  sprintf(txBuffer,"Card detected ..\n");
 80024da:	f107 0318 	add.w	r3, r7, #24
 80024de:	4931      	ldr	r1, [pc, #196]	; (80025a4 <RFID+0x16c>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00c fda1 	bl	800f028 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 80024e6:	f107 0118 	add.w	r1, r7, #24
 80024ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024ee:	2264      	movs	r2, #100	; 0x64
 80024f0:	482a      	ldr	r0, [pc, #168]	; (800259c <RFID+0x164>)
 80024f2:	f004 fe7a 	bl	80071ea <HAL_UART_Transmit>
//		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	2264      	movs	r2, #100	; 0x64
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f00c f920 	bl	800e744 <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe ff41 	bl	8001390 <MFRC522_Anticoll>
 800250e:	4603      	mov	r3, r0
 8002510:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 8002514:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002518:	2b00      	cmp	r3, #0
 800251a:	d133      	bne.n	8002584 <RFID+0x14c>
			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
 800251c:	7a3a      	ldrb	r2, [r7, #8]
 800251e:	7a7b      	ldrb	r3, [r7, #9]
 8002520:	4053      	eors	r3, r2
 8002522:	b2da      	uxtb	r2, r3
 8002524:	7abb      	ldrb	r3, [r7, #10]
 8002526:	4053      	eors	r3, r2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	4053      	eors	r3, r2
 800252e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  for(int i = 0; i <4 ;i++){
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002538:	e010      	b.n	800255c <RFID+0x124>
				  UID[i]=cardstr[i];
 800253a:	f107 0208 	add.w	r2, r7, #8
 800253e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002542:	4413      	add	r3, r2
 8002544:	7819      	ldrb	r1, [r3, #0]
 8002546:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <RFID+0x170>)
 8002548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800254c:	4413      	add	r3, r2
 800254e:	460a      	mov	r2, r1
 8002550:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 8002552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002556:	3301      	adds	r3, #1
 8002558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800255c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002560:	2b03      	cmp	r3, #3
 8002562:	ddea      	ble.n	800253a <RFID+0x102>
 8002564:	e00e      	b.n	8002584 <RFID+0x14c>
//			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
//			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 8002566:	f107 0318 	add.w	r3, r7, #24
 800256a:	2264      	movs	r2, #100	; 0x64
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f00c f8e8 	bl	800e744 <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 8002574:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002578:	f107 0318 	add.w	r3, r7, #24
 800257c:	490b      	ldr	r1, [pc, #44]	; (80025ac <RFID+0x174>)
 800257e:	4618      	mov	r0, r3
 8002580:	f00c fd52 	bl	800f028 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
	  osMutexRelease(MutexSPI1Handle);
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <RFID+0x168>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f008 fce3 	bl	800af54 <osMutexRelease>
    osDelay(100);
 800258e:	2064      	movs	r0, #100	; 0x64
 8002590:	f008 fbf4 	bl	800ad7c <osDelay>
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002594:	e78d      	b.n	80024b2 <RFID+0x7a>
 8002596:	bf00      	nop
 8002598:	08012e80 	.word	0x08012e80
 800259c:	200053b4 	.word	0x200053b4
 80025a0:	20004f80 	.word	0x20004f80
 80025a4:	08012e98 	.word	0x08012e98
 80025a8:	2000021c 	.word	0x2000021c
 80025ac:	08012eac 	.word	0x08012eac

080025b0 <SDCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDCard */
void SDCard(void *argument)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0a4      	sub	sp, #144	; 0x90
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDCard */
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80025b8:	2201      	movs	r2, #1
 80025ba:	4961      	ldr	r1, [pc, #388]	; (8002740 <SDCard+0x190>)
 80025bc:	4861      	ldr	r0, [pc, #388]	; (8002744 <SDCard+0x194>)
 80025be:	f007 fb2f 	bl	8009c20 <f_mount>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b60      	ldr	r3, [pc, #384]	; (8002748 <SDCard+0x198>)
 80025c8:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <SDCard+0x198>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <SDCard+0x30>
		myprintf("f_mount error (%i)\r\n", fres);
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <SDCard+0x198>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	485c      	ldr	r0, [pc, #368]	; (800274c <SDCard+0x19c>)
 80025da:	f7ff f853 	bl	8001684 <myprintf>
		while(1);
 80025de:	e7fe      	b.n	80025de <SDCard+0x2e>
	}
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;
    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 80025e0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80025e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025e8:	4619      	mov	r1, r3
 80025ea:	4855      	ldr	r0, [pc, #340]	; (8002740 <SDCard+0x190>)
 80025ec:	f008 f90b 	bl	800a806 <f_getfree>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b54      	ldr	r3, [pc, #336]	; (8002748 <SDCard+0x198>)
 80025f6:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <SDCard+0x198>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <SDCard+0x5e>
  	myprintf("f_getfree error (%i)\r\n", fres);
 8002600:	4b51      	ldr	r3, [pc, #324]	; (8002748 <SDCard+0x198>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	4852      	ldr	r0, [pc, #328]	; (8002750 <SDCard+0x1a0>)
 8002608:	f7ff f83c 	bl	8001684 <myprintf>
  	while(1);
 800260c:	e7fe      	b.n	800260c <SDCard+0x5c>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800260e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	3b02      	subs	r3, #2
 8002614:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002616:	8952      	ldrh	r2, [r2, #10]
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    free_sectors = free_clusters * getFreeFs->csize;
 8002620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002622:	895b      	ldrh	r3, [r3, #10]
 8002624:	461a      	mov	r2, r3
 8002626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002628:	fb03 f302 	mul.w	r3, r3, r2
 800262c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8002630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002634:	0859      	lsrs	r1, r3, #1
 8002636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	461a      	mov	r2, r3
 800263e:	4845      	ldr	r0, [pc, #276]	; (8002754 <SDCard+0x1a4>)
 8002640:	f7ff f820 	bl	8001684 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "tesjson.txt", FA_READ);
 8002644:	2201      	movs	r2, #1
 8002646:	4944      	ldr	r1, [pc, #272]	; (8002758 <SDCard+0x1a8>)
 8002648:	4844      	ldr	r0, [pc, #272]	; (800275c <SDCard+0x1ac>)
 800264a:	f007 fb4d 	bl	8009ce8 <f_open>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <SDCard+0x198>)
 8002654:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8002656:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <SDCard+0x198>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <SDCard+0xb6>
  	myprintf("f_open error (%i)\r\n");
 800265e:	4840      	ldr	r0, [pc, #256]	; (8002760 <SDCard+0x1b0>)
 8002660:	f7ff f810 	bl	8001684 <myprintf>
  	while(1);
 8002664:	e7fe      	b.n	8002664 <SDCard+0xb4>
    }
    myprintf("I was able to open 'tesjson.txt' for reading!\r\n");
 8002666:	483f      	ldr	r0, [pc, #252]	; (8002764 <SDCard+0x1b4>)
 8002668:	f7ff f80c 	bl	8001684 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[100];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4a3a      	ldr	r2, [pc, #232]	; (800275c <SDCard+0x1ac>)
 8002672:	2164      	movs	r1, #100	; 0x64
 8002674:	4618      	mov	r0, r3
 8002676:	f008 f982 	bl	800a97e <f_gets>
 800267a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    if(rres != 0) {
 800267e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <SDCard+0xe4>
  	myprintf("Read string from 'tesjson.txt'' contents: %s\r\n", readBuf);
 8002686:	f107 0310 	add.w	r3, r7, #16
 800268a:	4619      	mov	r1, r3
 800268c:	4836      	ldr	r0, [pc, #216]	; (8002768 <SDCard+0x1b8>)
 800268e:	f7fe fff9 	bl	8001684 <myprintf>
 8002692:	e005      	b.n	80026a0 <SDCard+0xf0>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <SDCard+0x198>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	4834      	ldr	r0, [pc, #208]	; (800276c <SDCard+0x1bc>)
 800269c:	f7fe fff2 	bl	8001684 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 80026a0:	482e      	ldr	r0, [pc, #184]	; (800275c <SDCard+0x1ac>)
 80026a2:	f008 f881 	bl	800a7a8 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80026a6:	221a      	movs	r2, #26
 80026a8:	4931      	ldr	r1, [pc, #196]	; (8002770 <SDCard+0x1c0>)
 80026aa:	482c      	ldr	r0, [pc, #176]	; (800275c <SDCard+0x1ac>)
 80026ac:	f007 fb1c 	bl	8009ce8 <f_open>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <SDCard+0x198>)
 80026b6:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <SDCard+0x198>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <SDCard+0x118>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 80026c0:	482c      	ldr	r0, [pc, #176]	; (8002774 <SDCard+0x1c4>)
 80026c2:	f7fe ffdf 	bl	8001684 <myprintf>
 80026c6:	e005      	b.n	80026d4 <SDCard+0x124>
    } else {
    	myprintf("f_open error (%i)\r\n", fres);
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <SDCard+0x198>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4824      	ldr	r0, [pc, #144]	; (8002760 <SDCard+0x1b0>)
 80026d0:	f7fe ffd8 	bl	8001684 <myprintf>
    }

    //Copy in a string
//    strncpy((char*)readBuf, "a new file is made!", 19);
    char* kirimjson = "{'Lokasi':'-6.914744,107.609810','Time_Stamp':'27 April 2021, 20:22'}" ;
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <SDCard+0x1c8>)
 80026d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    uint32_t length_var = strlen(kirimjson);
 80026da:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80026de:	f7fd fd7f 	bl	80001e0 <strlen>
 80026e2:	67f8      	str	r0, [r7, #124]	; 0x7c
    strncpy((char*)readBuf, kirimjson, length_var);
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80026ee:	4618      	mov	r0, r3
 80026f0:	f00c fcfb 	bl	800f0ea <strncpy>
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, length_var, &bytesWrote);
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	f107 0110 	add.w	r1, r7, #16
 80026fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026fe:	4817      	ldr	r0, [pc, #92]	; (800275c <SDCard+0x1ac>)
 8002700:	f007 fe25 	bl	800a34e <f_write>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <SDCard+0x198>)
 800270a:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <SDCard+0x198>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <SDCard+0x170>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4619      	mov	r1, r3
 8002718:	4818      	ldr	r0, [pc, #96]	; (800277c <SDCard+0x1cc>)
 800271a:	f7fe ffb3 	bl	8001684 <myprintf>
 800271e:	e002      	b.n	8002726 <SDCard+0x176>
    } else {
    	myprintf("f_write error (%i)\r\n");
 8002720:	4817      	ldr	r0, [pc, #92]	; (8002780 <SDCard+0x1d0>)
 8002722:	f7fe ffaf 	bl	8001684 <myprintf>
    }
    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8002726:	480d      	ldr	r0, [pc, #52]	; (800275c <SDCard+0x1ac>)
 8002728:	f008 f83e 	bl	800a7a8 <f_close>
//    f_unlink("/write.txt"); Buat ngedelete file
    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 800272c:	2200      	movs	r2, #0
 800272e:	4904      	ldr	r1, [pc, #16]	; (8002740 <SDCard+0x190>)
 8002730:	2000      	movs	r0, #0
 8002732:	f007 fa75 	bl	8009c20 <f_mount>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002736:	2001      	movs	r0, #1
 8002738:	f008 fb20 	bl	800ad7c <osDelay>
 800273c:	e7fb      	b.n	8002736 <SDCard+0x186>
 800273e:	bf00      	nop
 8002740:	08012eb8 	.word	0x08012eb8
 8002744:	20004c8c 	.word	0x20004c8c
 8002748:	20005400 	.word	0x20005400
 800274c:	08012ebc 	.word	0x08012ebc
 8002750:	08012ed4 	.word	0x08012ed4
 8002754:	08012eec 	.word	0x08012eec
 8002758:	08012f34 	.word	0x08012f34
 800275c:	20005404 	.word	0x20005404
 8002760:	08012f40 	.word	0x08012f40
 8002764:	08012f54 	.word	0x08012f54
 8002768:	08012f84 	.word	0x08012f84
 800276c:	08012fb4 	.word	0x08012fb4
 8002770:	08012fc8 	.word	0x08012fc8
 8002774:	08012fd4 	.word	0x08012fd4
 8002778:	08013004 	.word	0x08013004
 800277c:	0801304c 	.word	0x0801304c
 8002780:	08013070 	.word	0x08013070
 8002784:	00000000 	.word	0x00000000

08002788 <ADCProcesing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCProcesing */
void ADCProcesing(void *argument)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b09c      	sub	sp, #112	; 0x70
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADCProcesing */
	char txBuffer[100] = {};
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	2260      	movs	r2, #96	; 0x60
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f00b ffd1 	bl	800e744 <memset>
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 80027a2:	2203      	movs	r2, #3
 80027a4:	492c      	ldr	r1, [pc, #176]	; (8002858 <ADCProcesing+0xd0>)
 80027a6:	482d      	ldr	r0, [pc, #180]	; (800285c <ADCProcesing+0xd4>)
 80027a8:	f000 fe1e 	bl	80033e8 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization..\n");
 80027ac:	f107 0308 	add.w	r3, r7, #8
 80027b0:	492b      	ldr	r1, [pc, #172]	; (8002860 <ADCProcesing+0xd8>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f00c fc38 	bl	800f028 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 80027b8:	f107 0108 	add.w	r1, r7, #8
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	2264      	movs	r2, #100	; 0x64
 80027c2:	4828      	ldr	r0, [pc, #160]	; (8002864 <ADCProcesing+0xdc>)
 80027c4:	f004 fd11 	bl	80071ea <HAL_UART_Transmit>
	/* Initialize RC Filter */
	RCFilter_Init(&rcFiltFuel, 5.0f, 100.0f);
 80027c8:	eddf 0a27 	vldr	s1, [pc, #156]	; 8002868 <ADCProcesing+0xe0>
 80027cc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80027d0:	4826      	ldr	r0, [pc, #152]	; (800286c <ADCProcesing+0xe4>)
 80027d2:	f7fe fe1d 	bl	8001410 <RCFilter_Init>

	/*Initialize Moving Average Filter*/
	MovAvgFilter_init(&MAFiltFuel);
 80027d6:	4826      	ldr	r0, [pc, #152]	; (8002870 <ADCProcesing+0xe8>)
 80027d8:	f7fe fe99 	bl	800150e <MovAvgFilter_init>
	/* Start ADC */
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 80027dc:	2203      	movs	r2, #3
 80027de:	491e      	ldr	r1, [pc, #120]	; (8002858 <ADCProcesing+0xd0>)
 80027e0:	481e      	ldr	r0, [pc, #120]	; (800285c <ADCProcesing+0xd4>)
 80027e2:	f000 fe01 	bl	80033e8 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization Success..\n");
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	4922      	ldr	r1, [pc, #136]	; (8002874 <ADCProcesing+0xec>)
 80027ec:	4618      	mov	r0, r3
 80027ee:	f00c fc1b 	bl	800f028 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 80027f2:	f107 0108 	add.w	r1, r7, #8
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	2264      	movs	r2, #100	; 0x64
 80027fc:	4819      	ldr	r0, [pc, #100]	; (8002864 <ADCProcesing+0xdc>)
 80027fe:	f004 fcf4 	bl	80071ea <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  float input = (value[1]/ADC_RESOLUTION) * VOLTAGE_REFERENCE;
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <ADCProcesing+0xf0>)
 8002804:	edd3 7a01 	vldr	s15, [r3, #4]
 8002808:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800287c <ADCProcesing+0xf4>
 800280c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002810:	ee16 0a90 	vmov	r0, s13
 8002814:	f7fd fea0 	bl	8000558 <__aeabi_f2d>
 8002818:	a30d      	add	r3, pc, #52	; (adr r3, 8002850 <ADCProcesing+0xc8>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fef3 	bl	8000608 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe f9e5 	bl	8000bf8 <__aeabi_d2f>
 800282e:	4603      	mov	r3, r0
 8002830:	66fb      	str	r3, [r7, #108]	; 0x6c
	  RCFilter_Update(&rcFiltFuel, input);
 8002832:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8002836:	480d      	ldr	r0, [pc, #52]	; (800286c <ADCProcesing+0xe4>)
 8002838:	f7fe fe40 	bl	80014bc <RCFilter_Update>
	  MovAvgFilter_Update(&MAFiltFuel, input);
 800283c:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <ADCProcesing+0xe8>)
 8002842:	f7fe fe85 	bl	8001550 <MovAvgFilter_Update>
//	  sprintf(txBuffer,"Raw : %.3f Filtered : %.3f\n", input, rcFiltFuel.out[0]);
//	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
	  osDelay(100); //100 Hz Sampling Rate
 8002846:	2064      	movs	r0, #100	; 0x64
 8002848:	f008 fa98 	bl	800ad7c <osDelay>
  {
 800284c:	e7d9      	b.n	8002802 <ADCProcesing+0x7a>
 800284e:	bf00      	nop
 8002850:	66666666 	.word	0x66666666
 8002854:	400a6666 	.word	0x400a6666
 8002858:	2000520c 	.word	0x2000520c
 800285c:	2000511c 	.word	0x2000511c
 8002860:	08013088 	.word	0x08013088
 8002864:	200053b4 	.word	0x200053b4
 8002868:	42c80000 	.word	0x42c80000
 800286c:	2000527c 	.word	0x2000527c
 8002870:	20005050 	.word	0x20005050
 8002874:	080130a0 	.word	0x080130a0
 8002878:	20005644 	.word	0x20005644
 800287c:	45800000 	.word	0x45800000

08002880 <PowManagement>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PowManagement */
void PowManagement(void *argument)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PowManagement */
	HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_RESET);
 8002888:	2200      	movs	r2, #0
 800288a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288e:	4822      	ldr	r0, [pc, #136]	; (8002918 <PowManagement+0x98>)
 8002890:	f001 ffb6 	bl	8004800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289a:	4820      	ldr	r0, [pc, #128]	; (800291c <PowManagement+0x9c>)
 800289c:	f001 ffb0 	bl	8004800 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  /* Check Accu Level */
	  if(MAFiltAccu.out < ACCU_THRESHOLD) {
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <PowManagement+0xa0>)
 80028a2:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80028a6:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80028aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	d506      	bpl.n	80028c2 <PowManagement+0x42>
		  //Change Power Source to Battery
		  //Set Power Selector Pin Output HIGH
		  HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ba:	4817      	ldr	r0, [pc, #92]	; (8002918 <PowManagement+0x98>)
 80028bc:	f001 ffa0 	bl	8004800 <HAL_GPIO_WritePin>
 80028c0:	e005      	b.n	80028ce <PowManagement+0x4e>
	  }
	  else {
		  HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c8:	4813      	ldr	r0, [pc, #76]	; (8002918 <PowManagement+0x98>)
 80028ca:	f001 ff99 	bl	8004800 <HAL_GPIO_WritePin>
	  }

	  /* Check Battery Level*/
	  if (MAFiltBatt.out < BATT_THRESHOLD){
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <PowManagement+0xa4>)
 80028d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fe3f 	bl	8000558 <__aeabi_f2d>
 80028da:	a30d      	add	r3, pc, #52	; (adr r3, 8002910 <PowManagement+0x90>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fe f904 	bl	8000aec <__aeabi_dcmplt>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d006      	beq.n	80028f8 <PowManagement+0x78>
		  //Battery Low, need to charge battery
		  //Set Charging Signal High
		  HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 80028ea:	2200      	movs	r2, #0
 80028ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f0:	480a      	ldr	r0, [pc, #40]	; (800291c <PowManagement+0x9c>)
 80028f2:	f001 ff85 	bl	8004800 <HAL_GPIO_WritePin>
 80028f6:	e005      	b.n	8002904 <PowManagement+0x84>
	  }
	  else {
		  // No Battery Charging
		  HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 80028f8:	2200      	movs	r2, #0
 80028fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028fe:	4807      	ldr	r0, [pc, #28]	; (800291c <PowManagement+0x9c>)
 8002900:	f001 ff7e 	bl	8004800 <HAL_GPIO_WritePin>
	  }
    osDelay(100);
 8002904:	2064      	movs	r0, #100	; 0x64
 8002906:	f008 fa39 	bl	800ad7c <osDelay>
	  if(MAFiltAccu.out < ACCU_THRESHOLD) {
 800290a:	e7c9      	b.n	80028a0 <PowManagement+0x20>
 800290c:	f3af 8000 	nop.w
 8002910:	9999999a 	.word	0x9999999a
 8002914:	400d9999 	.word	0x400d9999
 8002918:	40020800 	.word	0x40020800
 800291c:	40020400 	.word	0x40020400
 8002920:	2000528c 	.word	0x2000528c
 8002924:	20004f84 	.word	0x20004f84

08002928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800293a:	f000 fccd 	bl	80032d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40010000 	.word	0x40010000

0800294c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002950:	b672      	cpsid	i
}
 8002952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002954:	e7fe      	b.n	8002954 <Error_Handler+0x8>

08002956 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002956:	b580      	push	{r7, lr}
 8002958:	b088      	sub	sp, #32
 800295a:	af04      	add	r7, sp, #16
 800295c:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 800295e:	2364      	movs	r3, #100	; 0x64
 8002960:	9302      	str	r3, [sp, #8]
 8002962:	2301      	movs	r3, #1
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	f107 030f 	add.w	r3, r7, #15
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2301      	movs	r3, #1
 800296e:	2200      	movs	r2, #0
 8002970:	21a6      	movs	r1, #166	; 0xa6
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f002 f99c 	bl	8004cb0 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2be5      	cmp	r3, #229	; 0xe5
 800297c:	d15e      	bne.n	8002a3c <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 800297e:	2300      	movs	r3, #0
 8002980:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002982:	2364      	movs	r3, #100	; 0x64
 8002984:	9302      	str	r3, [sp, #8]
 8002986:	2301      	movs	r3, #1
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	f107 030e 	add.w	r3, r7, #14
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2301      	movs	r3, #1
 8002992:	222d      	movs	r2, #45	; 0x2d
 8002994:	21a6      	movs	r1, #166	; 0xa6
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f002 f890 	bl	8004abc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800299c:	2064      	movs	r0, #100	; 0x64
 800299e:	f000 fcbb 	bl	8003318 <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 80029a2:	230b      	movs	r3, #11
 80029a4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 80029a6:	2364      	movs	r3, #100	; 0x64
 80029a8:	9302      	str	r3, [sp, #8]
 80029aa:	2301      	movs	r3, #1
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	f107 030e 	add.w	r3, r7, #14
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2301      	movs	r3, #1
 80029b6:	2231      	movs	r2, #49	; 0x31
 80029b8:	21a6      	movs	r1, #166	; 0xa6
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f002 f87e 	bl	8004abc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80029c0:	2064      	movs	r0, #100	; 0x64
 80029c2:	f000 fca9 	bl	8003318 <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80029c6:	2364      	movs	r3, #100	; 0x64
 80029c8:	9302      	str	r3, [sp, #8]
 80029ca:	2301      	movs	r3, #1
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	f107 030d 	add.w	r3, r7, #13
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2301      	movs	r3, #1
 80029d6:	222c      	movs	r2, #44	; 0x2c
 80029d8:	21a6      	movs	r1, #166	; 0xa6
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f002 f968 	bl	8004cb0 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 80029e0:	7b7b      	ldrb	r3, [r7, #13]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 80029ea:	7b7b      	ldrb	r3, [r7, #13]
 80029ec:	f043 030f 	orr.w	r3, r3, #15
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80029f4:	2364      	movs	r3, #100	; 0x64
 80029f6:	9302      	str	r3, [sp, #8]
 80029f8:	2301      	movs	r3, #1
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	f107 030d 	add.w	r3, r7, #13
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2301      	movs	r3, #1
 8002a04:	222c      	movs	r2, #44	; 0x2c
 8002a06:	21a6      	movs	r1, #166	; 0xa6
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f002 f857 	bl	8004abc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002a0e:	2064      	movs	r0, #100	; 0x64
 8002a10:	f000 fc82 	bl	8003318 <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 8002a14:	2308      	movs	r3, #8
 8002a16:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002a18:	2364      	movs	r3, #100	; 0x64
 8002a1a:	9302      	str	r3, [sp, #8]
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	f107 030e 	add.w	r3, r7, #14
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2301      	movs	r3, #1
 8002a28:	222d      	movs	r2, #45	; 0x2d
 8002a2a:	21a6      	movs	r1, #166	; 0xa6
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f002 f845 	bl	8004abc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002a32:	2064      	movs	r0, #100	; 0x64
 8002a34:	f000 fc70 	bl	8003318 <HAL_Delay>

        return check;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	e000      	b.n	8002a3e <MPU6050_Init+0xe8>
    }
    return 1;
 8002a3c:	2301      	movs	r3, #1
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af04      	add	r7, sp, #16
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002a52:	2364      	movs	r3, #100	; 0x64
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	2306      	movs	r3, #6
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2301      	movs	r3, #1
 8002a62:	2232      	movs	r2, #50	; 0x32
 8002a64:	21a6      	movs	r1, #166	; 0xa6
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f002 f922 	bl	8004cb0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 8002a6c:	7a7b      	ldrb	r3, [r7, #9]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	b21a      	sxth	r2, r3
 8002a72:	7a3b      	ldrb	r3, [r7, #8]
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 8002a7e:	7afb      	ldrb	r3, [r7, #11]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	7abb      	ldrb	r3, [r7, #10]
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	b21a      	sxth	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 8002a90:	7b7b      	ldrb	r3, [r7, #13]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	7b3b      	ldrb	r3, [r7, #12]
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <MPU6050_Read_Accel+0x108>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	ee17 0a90 	vmov	r0, s15
 8002abe:	f7fd fd4b 	bl	8000558 <__aeabi_f2d>
 8002ac2:	a321      	add	r3, pc, #132	; (adr r3, 8002b48 <MPU6050_Read_Accel+0x100>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fec8 	bl	800085c <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <MPU6050_Read_Accel+0x108>)
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aee:	ee17 0a90 	vmov	r0, s15
 8002af2:	f7fd fd31 	bl	8000558 <__aeabi_f2d>
 8002af6:	a314      	add	r3, pc, #80	; (adr r3, 8002b48 <MPU6050_Read_Accel+0x100>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd feae 	bl	800085c <__aeabi_ddiv>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	6839      	ldr	r1, [r7, #0]
 8002b06:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <MPU6050_Read_Accel+0x108>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	ee17 0a90 	vmov	r0, s15
 8002b26:	f7fd fd17 	bl	8000558 <__aeabi_f2d>
 8002b2a:	a307      	add	r3, pc, #28	; (adr r3, 8002b48 <MPU6050_Read_Accel+0x100>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd fe94 	bl	800085c <__aeabi_ddiv>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	6839      	ldr	r1, [r7, #0]
 8002b3a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	3a92a305 	.word	0x3a92a305
 8002b4c:	40239d01 	.word	0x40239d01
 8002b50:	20000000 	.word	0x20000000

08002b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_MspInit+0x54>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <HAL_MspInit+0x54>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_MspInit+0x54>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_MspInit+0x54>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <HAL_MspInit+0x54>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_MspInit+0x54>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	210f      	movs	r1, #15
 8002b96:	f06f 0001 	mvn.w	r0, #1
 8002b9a:	f001 f881 	bl	8003ca0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <HAL_ADC_MspInit+0x110>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d171      	bne.n	8002cb2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a3a      	ldr	r2, [pc, #232]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a2c      	ldr	r2, [pc, #176]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_ADC_MspInit+0x114>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8002c22:	2320      	movs	r3, #32
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c26:	2303      	movs	r3, #3
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	4619      	mov	r1, r3
 8002c34:	4823      	ldr	r0, [pc, #140]	; (8002cc4 <HAL_ADC_MspInit+0x118>)
 8002c36:	f001 fc5f 	bl	80044f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACCU_LEVEL_Pin|FUEL_LEVEL_Pin;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	481e      	ldr	r0, [pc, #120]	; (8002cc8 <HAL_ADC_MspInit+0x11c>)
 8002c4e:	f001 fc53 	bl	80044f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_ADC_MspInit+0x124>)
 8002c56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c58:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c96:	480d      	ldr	r0, [pc, #52]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002c98:	f001 f82c 	bl	8003cf4 <HAL_DMA_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002ca2:	f7ff fe53 	bl	800294c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
 8002cac:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <HAL_ADC_MspInit+0x120>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3728      	adds	r7, #40	; 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40012000 	.word	0x40012000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020800 	.word	0x40020800
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	20005218 	.word	0x20005218
 8002cd0:	40026410 	.word	0x40026410

08002cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_I2C_MspInit+0x84>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d12b      	bne.n	8002d4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d16:	2312      	movs	r3, #18
 8002d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d22:	2304      	movs	r3, #4
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <HAL_I2C_MspInit+0x8c>)
 8002d2e:	f001 fbe3 	bl	80044f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3728      	adds	r7, #40	; 0x28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40005400 	.word	0x40005400
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020400 	.word	0x40020400

08002d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_SPI_MspInit+0x84>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d12b      	bne.n	8002dde <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_SPI_MspInit+0x88>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a17      	ldr	r2, [pc, #92]	; (8002dec <HAL_SPI_MspInit+0x88>)
 8002d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_SPI_MspInit+0x88>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_SPI_MspInit+0x88>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_SPI_MspInit+0x88>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_SPI_MspInit+0x88>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002dbe:	23e0      	movs	r3, #224	; 0xe0
 8002dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dce:	2305      	movs	r3, #5
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <HAL_SPI_MspInit+0x8c>)
 8002dda:	f001 fb8d 	bl	80044f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002dde:	bf00      	nop
 8002de0:	3728      	adds	r7, #40	; 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40013000 	.word	0x40013000
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020000 	.word	0x40020000

08002df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	; 0x30
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a4e      	ldr	r2, [pc, #312]	; (8002f4c <HAL_UART_MspInit+0x158>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d164      	bne.n	8002ee0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	4a4c      	ldr	r2, [pc, #304]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002e20:	f043 0310 	orr.w	r3, r3, #16
 8002e24:	6453      	str	r3, [r2, #68]	; 0x44
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a45      	ldr	r2, [pc, #276]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e60:	2307      	movs	r3, #7
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	4619      	mov	r1, r3
 8002e6a:	483a      	ldr	r0, [pc, #232]	; (8002f54 <HAL_UART_MspInit+0x160>)
 8002e6c:	f001 fb44 	bl	80044f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002e70:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002e72:	4a3a      	ldr	r2, [pc, #232]	; (8002f5c <HAL_UART_MspInit+0x168>)
 8002e74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e76:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002e78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e90:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002eb2:	4829      	ldr	r0, [pc, #164]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002eb4:	f000 ff1e 	bl	8003cf4 <HAL_DMA_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002ebe:	f7ff fd45 	bl	800294c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec8:	4a23      	ldr	r2, [pc, #140]	; (8002f58 <HAL_UART_MspInit+0x164>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	2025      	movs	r0, #37	; 0x25
 8002ed4:	f000 fee4 	bl	8003ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ed8:	2025      	movs	r0, #37	; 0x25
 8002eda:	f000 fefd 	bl	8003cd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ede:	e030      	b.n	8002f42 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_UART_MspInit+0x16c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d12b      	bne.n	8002f42 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_UART_MspInit+0x15c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f22:	230c      	movs	r3, #12
 8002f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f32:	2307      	movs	r3, #7
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f107 031c 	add.w	r3, r7, #28
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4805      	ldr	r0, [pc, #20]	; (8002f54 <HAL_UART_MspInit+0x160>)
 8002f3e:	f001 fadb 	bl	80044f8 <HAL_GPIO_Init>
}
 8002f42:	bf00      	nop
 8002f44:	3730      	adds	r7, #48	; 0x30
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40011000 	.word	0x40011000
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	20005164 	.word	0x20005164
 8002f5c:	40026440 	.word	0x40026440
 8002f60:	40004400 	.word	0x40004400

08002f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08c      	sub	sp, #48	; 0x30
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	2019      	movs	r0, #25
 8002f7a:	f000 fe91 	bl	8003ca0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f7e:	2019      	movs	r0, #25
 8002f80:	f000 feaa 	bl	8003cd8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_InitTick+0xa0>)
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_InitTick+0xa0>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6453      	str	r3, [r2, #68]	; 0x44
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_InitTick+0xa0>)
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fa0:	f107 0210 	add.w	r2, r7, #16
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 f876 	bl	800609c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002fb0:	f003 f860 	bl	8006074 <HAL_RCC_GetPCLK2Freq>
 8002fb4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	4a13      	ldr	r2, [pc, #76]	; (8003008 <HAL_InitTick+0xa4>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0c9b      	lsrs	r3, r3, #18
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <HAL_InitTick+0xa8>)
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_InitTick+0xac>)
 8002fc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_InitTick+0xa8>)
 8002fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fd0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <HAL_InitTick+0xa8>)
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_InitTick+0xa8>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_InitTick+0xa8>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002fe4:	4809      	ldr	r0, [pc, #36]	; (800300c <HAL_InitTick+0xa8>)
 8002fe6:	f003 fe33 	bl	8006c50 <HAL_TIM_Base_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002ff0:	4806      	ldr	r0, [pc, #24]	; (800300c <HAL_InitTick+0xa8>)
 8002ff2:	f003 fe87 	bl	8006d04 <HAL_TIM_Base_Start_IT>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3730      	adds	r7, #48	; 0x30
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	431bde83 	.word	0x431bde83
 800300c:	20005650 	.word	0x20005650
 8003010:	40010000 	.word	0x40010000

08003014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003018:	e7fe      	b.n	8003018 <NMI_Handler+0x4>

0800301a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301e:	e7fe      	b.n	800301e <HardFault_Handler+0x4>

08003020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003024:	e7fe      	b.n	8003024 <MemManage_Handler+0x4>

08003026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800302a:	e7fe      	b.n	800302a <BusFault_Handler+0x4>

0800302c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <UsageFault_Handler+0x4>

08003032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003046:	f003 febf 	bl	8006dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20005650 	.word	0x20005650

08003054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <USART1_IRQHandler+0x10>)
 800305a:	f004 f989 	bl	8007370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200051c4 	.word	0x200051c4

08003068 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <DMA2_Stream0_IRQHandler+0x10>)
 800306e:	f000 ffd9 	bl	8004024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20005218 	.word	0x20005218

0800307c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <DMA2_Stream2_IRQHandler+0x10>)
 8003082:	f000 ffcf 	bl	8004024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20005164 	.word	0x20005164

08003090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
	return 1;
 8003094:	2301      	movs	r3, #1
}
 8003096:	4618      	mov	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_kill>:

int _kill(int pid, int sig)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030aa:	f00b fb13 	bl	800e6d4 <__errno>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2216      	movs	r2, #22
 80030b2:	601a      	str	r2, [r3, #0]
	return -1;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_exit>:

void _exit (int status)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ffe7 	bl	80030a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030d2:	e7fe      	b.n	80030d2 <_exit+0x12>

080030d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e00a      	b.n	80030fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030e6:	f3af 8000 	nop.w
 80030ea:	4601      	mov	r1, r0
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	60ba      	str	r2, [r7, #8]
 80030f2:	b2ca      	uxtb	r2, r1
 80030f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3301      	adds	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	dbf0      	blt.n	80030e6 <_read+0x12>
	}

return len;
 8003104:	687b      	ldr	r3, [r7, #4]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e009      	b.n	8003134 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	60ba      	str	r2, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3301      	adds	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	dbf1      	blt.n	8003120 <_write+0x12>
	}
	return len;
 800313c:	687b      	ldr	r3, [r7, #4]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <_close>:

int _close(int file)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
	return -1;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800316e:	605a      	str	r2, [r3, #4]
	return 0;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <_isatty>:

int _isatty(int file)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
	return 1;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
	return 0;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <_sbrk+0x5c>)
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <_sbrk+0x60>)
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <_sbrk+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <_sbrk+0x64>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <_sbrk+0x68>)
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <_sbrk+0x64>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d207      	bcs.n	80031f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e0:	f00b fa78 	bl	800e6d4 <__errno>
 80031e4:	4603      	mov	r3, r0
 80031e6:	220c      	movs	r2, #12
 80031e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	e009      	b.n	8003204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <_sbrk+0x64>)
 8003200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20018000 	.word	0x20018000
 8003210:	00000400 	.word	0x00000400
 8003214:	20000334 	.word	0x20000334
 8003218:	20005b58 	.word	0x20005b58

0800321c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <SystemInit+0x20>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	4a05      	ldr	r2, [pc, #20]	; (800323c <SystemInit+0x20>)
 8003228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800322c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003244:	480d      	ldr	r0, [pc, #52]	; (800327c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003246:	490e      	ldr	r1, [pc, #56]	; (8003280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003248:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800324c:	e002      	b.n	8003254 <LoopCopyDataInit>

0800324e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800324e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003252:	3304      	adds	r3, #4

08003254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003258:	d3f9      	bcc.n	800324e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325a:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800325c:	4c0b      	ldr	r4, [pc, #44]	; (800328c <LoopFillZerobss+0x26>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003260:	e001      	b.n	8003266 <LoopFillZerobss>

08003262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003264:	3204      	adds	r2, #4

08003266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003268:	d3fb      	bcc.n	8003262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800326a:	f7ff ffd7 	bl	800321c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800326e:	f00b fa37 	bl	800e6e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003272:	f7fe fa2d 	bl	80016d0 <main>
  bx  lr    
 8003276:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003278:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003280:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003284:	080137e0 	.word	0x080137e0
  ldr r2, =_sbss
 8003288:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800328c:	20005b58 	.word	0x20005b58

08003290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC_IRQHandler>
	...

08003294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <HAL_Init+0x40>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <HAL_Init+0x40>)
 800329e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_Init+0x40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_Init+0x40>)
 80032aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <HAL_Init+0x40>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032bc:	2003      	movs	r0, #3
 80032be:	f000 fce4 	bl	8003c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7ff fe4e 	bl	8002f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c8:	f7ff fc44 	bl	8002b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023c00 	.word	0x40023c00

080032d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_IncTick+0x20>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_IncTick+0x24>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_IncTick+0x24>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	2000000c 	.word	0x2000000c
 80032fc:	20005698 	.word	0x20005698

08003300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return uwTick;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_GetTick+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20005698 	.word	0x20005698

08003318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff ffee 	bl	8003300 <HAL_GetTick>
 8003324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d005      	beq.n	800333e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_Delay+0x44>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800333e:	bf00      	nop
 8003340:	f7ff ffde 	bl	8003300 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	429a      	cmp	r2, r3
 800334e:	d8f7      	bhi.n	8003340 <HAL_Delay+0x28>
  {
  }
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	2000000c 	.word	0x2000000c

08003360 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e033      	b.n	80033de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fc14 	bl	8002bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d118      	bne.n	80033d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033a6:	f023 0302 	bic.w	r3, r3, #2
 80033aa:	f043 0202 	orr.w	r2, r3, #2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fa3e 	bl	8003834 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
 80033ce:	e001      	b.n	80033d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_ADC_Start_DMA+0x1e>
 8003402:	2302      	movs	r3, #2
 8003404:	e0ce      	b.n	80035a4 <HAL_ADC_Start_DMA+0x1bc>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d018      	beq.n	800344e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800342c:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_ADC_Start_DMA+0x1c4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5f      	ldr	r2, [pc, #380]	; (80035b0 <HAL_ADC_Start_DMA+0x1c8>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9a      	lsrs	r2, r3, #18
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003440:	e002      	b.n	8003448 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	3b01      	subs	r3, #1
 8003446:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f9      	bne.n	8003442 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345c:	d107      	bne.n	800346e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800346c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	f040 8086 	bne.w	800358a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034bc:	d106      	bne.n	80034cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f023 0206 	bic.w	r2, r3, #6
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
 80034ca:	e002      	b.n	80034d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034da:	4b36      	ldr	r3, [pc, #216]	; (80035b4 <HAL_ADC_Start_DMA+0x1cc>)
 80034dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	4a35      	ldr	r2, [pc, #212]	; (80035b8 <HAL_ADC_Start_DMA+0x1d0>)
 80034e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4a34      	ldr	r2, [pc, #208]	; (80035bc <HAL_ADC_Start_DMA+0x1d4>)
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4a33      	ldr	r2, [pc, #204]	; (80035c0 <HAL_ADC_Start_DMA+0x1d8>)
 80034f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800350e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	334c      	adds	r3, #76	; 0x4c
 800352a:	4619      	mov	r1, r3
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f000 fc8e 	bl	8003e50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10f      	bne.n	8003560 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d129      	bne.n	80035a2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	e020      	b.n	80035a2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <HAL_ADC_Start_DMA+0x1dc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d11b      	bne.n	80035a2 <HAL_ADC_Start_DMA+0x1ba>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d114      	bne.n	80035a2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	e00b      	b.n	80035a2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000004 	.word	0x20000004
 80035b0:	431bde83 	.word	0x431bde83
 80035b4:	40012300 	.word	0x40012300
 80035b8:	08003a2d 	.word	0x08003a2d
 80035bc:	08003ae7 	.word	0x08003ae7
 80035c0:	08003b03 	.word	0x08003b03
 80035c4:	40012000 	.word	0x40012000

080035c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1c>
 8003608:	2302      	movs	r3, #2
 800360a:	e105      	b.n	8003818 <HAL_ADC_ConfigChannel+0x228>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b09      	cmp	r3, #9
 800361a:	d925      	bls.n	8003668 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68d9      	ldr	r1, [r3, #12]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	3b1e      	subs	r3, #30
 8003632:	2207      	movs	r2, #7
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43da      	mvns	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	400a      	ands	r2, r1
 8003640:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68d9      	ldr	r1, [r3, #12]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	4618      	mov	r0, r3
 8003654:	4603      	mov	r3, r0
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4403      	add	r3, r0
 800365a:	3b1e      	subs	r3, #30
 800365c:	409a      	lsls	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	e022      	b.n	80036ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6919      	ldr	r1, [r3, #16]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	2207      	movs	r2, #7
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	400a      	ands	r2, r1
 800368a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6919      	ldr	r1, [r3, #16]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	4618      	mov	r0, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4403      	add	r3, r0
 80036a4:	409a      	lsls	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d824      	bhi.n	8003700 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	3b05      	subs	r3, #5
 80036c8:	221f      	movs	r2, #31
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43da      	mvns	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	400a      	ands	r2, r1
 80036d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	3b05      	subs	r3, #5
 80036f2:	fa00 f203 	lsl.w	r2, r0, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	635a      	str	r2, [r3, #52]	; 0x34
 80036fe:	e04c      	b.n	800379a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b0c      	cmp	r3, #12
 8003706:	d824      	bhi.n	8003752 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	3b23      	subs	r3, #35	; 0x23
 800371a:	221f      	movs	r2, #31
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43da      	mvns	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	400a      	ands	r2, r1
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	b29b      	uxth	r3, r3
 8003736:	4618      	mov	r0, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	3b23      	subs	r3, #35	; 0x23
 8003744:	fa00 f203 	lsl.w	r2, r0, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
 8003750:	e023      	b.n	800379a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	3b41      	subs	r3, #65	; 0x41
 8003764:	221f      	movs	r2, #31
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	400a      	ands	r2, r1
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	4618      	mov	r0, r3
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	3b41      	subs	r3, #65	; 0x41
 800378e:	fa00 f203 	lsl.w	r2, r0, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_ADC_ConfigChannel+0x234>)
 800379c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_ADC_ConfigChannel+0x238>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d109      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x1cc>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b12      	cmp	r3, #18
 80037ae:	d105      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_ADC_ConfigChannel+0x238>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d123      	bne.n	800380e <HAL_ADC_ConfigChannel+0x21e>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d003      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x1e6>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b11      	cmp	r3, #17
 80037d4:	d11b      	bne.n	800380e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d111      	bne.n	800380e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_ADC_ConfigChannel+0x23c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a10      	ldr	r2, [pc, #64]	; (8003830 <HAL_ADC_ConfigChannel+0x240>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	0c9a      	lsrs	r2, r3, #18
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003800:	e002      	b.n	8003808 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3b01      	subs	r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f9      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40012300 	.word	0x40012300
 8003828:	40012000 	.word	0x40012000
 800382c:	20000004 	.word	0x20000004
 8003830:	431bde83 	.word	0x431bde83

08003834 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800383c:	4b79      	ldr	r3, [pc, #484]	; (8003a24 <ADC_Init+0x1f0>)
 800383e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	021a      	lsls	r2, r3, #8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800388c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6899      	ldr	r1, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	4a58      	ldr	r2, [pc, #352]	; (8003a28 <ADC_Init+0x1f4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d022      	beq.n	8003912 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6899      	ldr	r1, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	e00f      	b.n	8003932 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003930:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0202 	bic.w	r2, r2, #2
 8003940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	7e1b      	ldrb	r3, [r3, #24]
 800394c:	005a      	lsls	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01b      	beq.n	8003998 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800397e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	3b01      	subs	r3, #1
 800398c:	035a      	lsls	r2, r3, #13
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	e007      	b.n	80039a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	051a      	lsls	r2, r3, #20
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6899      	ldr	r1, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039ea:	025a      	lsls	r2, r3, #9
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6899      	ldr	r1, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	029a      	lsls	r2, r3, #10
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40012300 	.word	0x40012300
 8003a28:	0f000001 	.word	0x0f000001

08003a2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d13c      	bne.n	8003ac0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d12b      	bne.n	8003ab8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d127      	bne.n	8003ab8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d119      	bne.n	8003ab8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0220 	bic.w	r2, r2, #32
 8003a92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7fd fdbd 	bl	8001638 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003abe:	e00e      	b.n	8003ade <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff fd85 	bl	80035dc <HAL_ADC_ErrorCallback>
}
 8003ad2:	e004      	b.n	8003ade <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fd67 	bl	80035c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	f043 0204 	orr.w	r2, r3, #4
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff fd5a 	bl	80035dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	60d3      	str	r3, [r2, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <__NVIC_GetPriorityGrouping+0x18>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0307 	and.w	r3, r3, #7
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	db0b      	blt.n	8003bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	f003 021f 	and.w	r2, r3, #31
 8003bac:	4907      	ldr	r1, [pc, #28]	; (8003bcc <__NVIC_EnableIRQ+0x38>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	e000e100 	.word	0xe000e100

08003bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	db0a      	blt.n	8003bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	490c      	ldr	r1, [pc, #48]	; (8003c1c <__NVIC_SetPriority+0x4c>)
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	0112      	lsls	r2, r2, #4
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf8:	e00a      	b.n	8003c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4908      	ldr	r1, [pc, #32]	; (8003c20 <__NVIC_SetPriority+0x50>)
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	3b04      	subs	r3, #4
 8003c08:	0112      	lsls	r2, r2, #4
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	761a      	strb	r2, [r3, #24]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000e100 	.word	0xe000e100
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f1c3 0307 	rsb	r3, r3, #7
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	bf28      	it	cs
 8003c42:	2304      	movcs	r3, #4
 8003c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d902      	bls.n	8003c54 <NVIC_EncodePriority+0x30>
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3b03      	subs	r3, #3
 8003c52:	e000      	b.n	8003c56 <NVIC_EncodePriority+0x32>
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43da      	mvns	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	401a      	ands	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	43d9      	mvns	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c7c:	4313      	orrs	r3, r2
         );
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3724      	adds	r7, #36	; 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff4c 	bl	8003b30 <__NVIC_SetPriorityGrouping>
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cb2:	f7ff ff61 	bl	8003b78 <__NVIC_GetPriorityGrouping>
 8003cb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	6978      	ldr	r0, [r7, #20]
 8003cbe:	f7ff ffb1 	bl	8003c24 <NVIC_EncodePriority>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff ff80 	bl	8003bd0 <__NVIC_SetPriority>
}
 8003cd0:	bf00      	nop
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ff54 	bl	8003b94 <__NVIC_EnableIRQ>
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d00:	f7ff fafe 	bl	8003300 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e099      	b.n	8003e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d30:	e00f      	b.n	8003d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d32:	f7ff fae5 	bl	8003300 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d908      	bls.n	8003d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e078      	b.n	8003e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e8      	bne.n	8003d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_DMA_Init+0x158>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4313      	orrs	r3, r2
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d117      	bne.n	8003e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb01 	bl	8004400 <DMA_CheckFifoParam>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e12:	2301      	movs	r3, #1
 8003e14:	e016      	b.n	8003e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fab8 	bl	8004394 <DMA_CalcBaseAndBitshift>
 8003e24:	4603      	mov	r3, r0
 8003e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	223f      	movs	r2, #63	; 0x3f
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	f010803f 	.word	0xf010803f

08003e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA_Start_IT+0x26>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e040      	b.n	8003ef8 <HAL_DMA_Start_IT+0xa8>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d12f      	bne.n	8003eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fa4a 	bl	8004338 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	223f      	movs	r2, #63	; 0x3f
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0216 	orr.w	r2, r2, #22
 8003ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0208 	orr.w	r2, r2, #8
 8003ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e005      	b.n	8003ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f0e:	f7ff f9f7 	bl	8003300 <HAL_GetTick>
 8003f12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d008      	beq.n	8003f32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e052      	b.n	8003fd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0216 	bic.w	r2, r2, #22
 8003f40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d103      	bne.n	8003f62 <HAL_DMA_Abort+0x62>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0208 	bic.w	r2, r2, #8
 8003f70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f82:	e013      	b.n	8003fac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f84:	f7ff f9bc 	bl	8003300 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d90c      	bls.n	8003fac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e015      	b.n	8003fd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e4      	bne.n	8003f84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	223f      	movs	r2, #63	; 0x3f
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d004      	beq.n	8003ffe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00c      	b.n	8004018 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2205      	movs	r2, #5
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004030:	4b92      	ldr	r3, [pc, #584]	; (800427c <HAL_DMA_IRQHandler+0x258>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a92      	ldr	r2, [pc, #584]	; (8004280 <HAL_DMA_IRQHandler+0x25c>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	2208      	movs	r2, #8
 8004050:	409a      	lsls	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01a      	beq.n	8004090 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0204 	bic.w	r2, r2, #4
 8004076:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	2208      	movs	r2, #8
 800407e:	409a      	lsls	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d012      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	2201      	movs	r2, #1
 80040b4:	409a      	lsls	r2, r3
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f043 0202 	orr.w	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	2204      	movs	r2, #4
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e8:	2204      	movs	r2, #4
 80040ea:	409a      	lsls	r2, r3
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	f043 0204 	orr.w	r2, r3, #4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	2210      	movs	r2, #16
 8004102:	409a      	lsls	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d043      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d03c      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	2210      	movs	r2, #16
 8004120:	409a      	lsls	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d018      	beq.n	8004166 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d024      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
 8004152:	e01f      	b.n	8004194 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01b      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
 8004164:	e016      	b.n	8004194 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0208 	bic.w	r2, r2, #8
 8004182:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	2220      	movs	r2, #32
 800419a:	409a      	lsls	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 808e 	beq.w	80042c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8086 	beq.w	80042c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	2220      	movs	r2, #32
 80041bc:	409a      	lsls	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d136      	bne.n	800423c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0216 	bic.w	r2, r2, #22
 80041dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <HAL_DMA_IRQHandler+0x1da>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0208 	bic.w	r2, r2, #8
 800420c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	223f      	movs	r2, #63	; 0x3f
 8004214:	409a      	lsls	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	2b00      	cmp	r3, #0
 8004230:	d07d      	beq.n	800432e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
        }
        return;
 800423a:	e078      	b.n	800432e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01c      	beq.n	8004284 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d108      	bne.n	800426a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	2b00      	cmp	r3, #0
 800425e:	d030      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
 8004268:	e02b      	b.n	80042c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d027      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
 800427a:	e022      	b.n	80042c2 <HAL_DMA_IRQHandler+0x29e>
 800427c:	20000004 	.word	0x20000004
 8004280:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0210 	bic.w	r2, r2, #16
 80042a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d032      	beq.n	8004330 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d022      	beq.n	800431c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2205      	movs	r2, #5
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d307      	bcc.n	800430a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f2      	bne.n	80042ee <HAL_DMA_IRQHandler+0x2ca>
 8004308:	e000      	b.n	800430c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800430a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
 800432c:	e000      	b.n	8004330 <HAL_DMA_IRQHandler+0x30c>
        return;
 800432e:	bf00      	nop
    }
  }
}
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop

08004338 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004354:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b40      	cmp	r3, #64	; 0x40
 8004364:	d108      	bne.n	8004378 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004376:	e007      	b.n	8004388 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3b10      	subs	r3, #16
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <DMA_CalcBaseAndBitshift+0x64>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043ae:	4a13      	ldr	r2, [pc, #76]	; (80043fc <DMA_CalcBaseAndBitshift+0x68>)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d909      	bls.n	80043d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	1d1a      	adds	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	659a      	str	r2, [r3, #88]	; 0x58
 80043d4:	e007      	b.n	80043e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	aaaaaaab 	.word	0xaaaaaaab
 80043fc:	08013240 	.word	0x08013240

08004400 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d11f      	bne.n	800445a <DMA_CheckFifoParam+0x5a>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d856      	bhi.n	80044ce <DMA_CheckFifoParam+0xce>
 8004420:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <DMA_CheckFifoParam+0x28>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	08004439 	.word	0x08004439
 800442c:	0800444b 	.word	0x0800444b
 8004430:	08004439 	.word	0x08004439
 8004434:	080044cf 	.word	0x080044cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d046      	beq.n	80044d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004448:	e043      	b.n	80044d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004452:	d140      	bne.n	80044d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004458:	e03d      	b.n	80044d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004462:	d121      	bne.n	80044a8 <DMA_CheckFifoParam+0xa8>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d837      	bhi.n	80044da <DMA_CheckFifoParam+0xda>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <DMA_CheckFifoParam+0x70>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	08004481 	.word	0x08004481
 8004474:	08004487 	.word	0x08004487
 8004478:	08004481 	.word	0x08004481
 800447c:	08004499 	.word	0x08004499
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	e030      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d025      	beq.n	80044de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004496:	e022      	b.n	80044de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044a0:	d11f      	bne.n	80044e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044a6:	e01c      	b.n	80044e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d903      	bls.n	80044b6 <DMA_CheckFifoParam+0xb6>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d003      	beq.n	80044bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044b4:	e018      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
      break;
 80044ba:	e015      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      break;
 80044cc:	e00b      	b.n	80044e6 <DMA_CheckFifoParam+0xe6>
      break;
 80044ce:	bf00      	nop
 80044d0:	e00a      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
      break;
 80044d2:	bf00      	nop
 80044d4:	e008      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
      break;
 80044d6:	bf00      	nop
 80044d8:	e006      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
      break;
 80044da:	bf00      	nop
 80044dc:	e004      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
      break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <DMA_CheckFifoParam+0xe8>
      break;
 80044e6:	bf00      	nop
    }
  } 
  
  return status; 
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop

080044f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	; 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	e159      	b.n	80047c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004514:	2201      	movs	r2, #1
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	f040 8148 	bne.w	80047c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d005      	beq.n	800454a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004546:	2b02      	cmp	r3, #2
 8004548:	d130      	bne.n	80045ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004580:	2201      	movs	r2, #1
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4013      	ands	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 0201 	and.w	r2, r3, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d017      	beq.n	80045e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2203      	movs	r2, #3
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d123      	bne.n	800463c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	08da      	lsrs	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3208      	adds	r2, #8
 80045fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	220f      	movs	r2, #15
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	08da      	lsrs	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3208      	adds	r2, #8
 8004636:	69b9      	ldr	r1, [r7, #24]
 8004638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0203 	and.w	r2, r3, #3
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4313      	orrs	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80a2 	beq.w	80047c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <HAL_GPIO_Init+0x2e8>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	4a56      	ldr	r2, [pc, #344]	; (80047e0 <HAL_GPIO_Init+0x2e8>)
 8004688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800468c:	6453      	str	r3, [r2, #68]	; 0x44
 800468e:	4b54      	ldr	r3, [pc, #336]	; (80047e0 <HAL_GPIO_Init+0x2e8>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800469a:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_GPIO_Init+0x2ec>)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	3302      	adds	r3, #2
 80046a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4013      	ands	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a49      	ldr	r2, [pc, #292]	; (80047e8 <HAL_GPIO_Init+0x2f0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d019      	beq.n	80046fa <HAL_GPIO_Init+0x202>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a48      	ldr	r2, [pc, #288]	; (80047ec <HAL_GPIO_Init+0x2f4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_GPIO_Init+0x1fe>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a47      	ldr	r2, [pc, #284]	; (80047f0 <HAL_GPIO_Init+0x2f8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00d      	beq.n	80046f2 <HAL_GPIO_Init+0x1fa>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a46      	ldr	r2, [pc, #280]	; (80047f4 <HAL_GPIO_Init+0x2fc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d007      	beq.n	80046ee <HAL_GPIO_Init+0x1f6>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a45      	ldr	r2, [pc, #276]	; (80047f8 <HAL_GPIO_Init+0x300>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d101      	bne.n	80046ea <HAL_GPIO_Init+0x1f2>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e008      	b.n	80046fc <HAL_GPIO_Init+0x204>
 80046ea:	2307      	movs	r3, #7
 80046ec:	e006      	b.n	80046fc <HAL_GPIO_Init+0x204>
 80046ee:	2303      	movs	r3, #3
 80046f0:	e004      	b.n	80046fc <HAL_GPIO_Init+0x204>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e002      	b.n	80046fc <HAL_GPIO_Init+0x204>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <HAL_GPIO_Init+0x204>
 80046fa:	2300      	movs	r3, #0
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	f002 0203 	and.w	r2, r2, #3
 8004702:	0092      	lsls	r2, r2, #2
 8004704:	4093      	lsls	r3, r2
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800470c:	4935      	ldr	r1, [pc, #212]	; (80047e4 <HAL_GPIO_Init+0x2ec>)
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	3302      	adds	r3, #2
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800471a:	4b38      	ldr	r3, [pc, #224]	; (80047fc <HAL_GPIO_Init+0x304>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800473e:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <HAL_GPIO_Init+0x304>)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004744:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <HAL_GPIO_Init+0x304>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <HAL_GPIO_Init+0x304>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <HAL_GPIO_Init+0x304>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	43db      	mvns	r3, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4013      	ands	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004792:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <HAL_GPIO_Init+0x304>)
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004798:	4b18      	ldr	r3, [pc, #96]	; (80047fc <HAL_GPIO_Init+0x304>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047bc:	4a0f      	ldr	r2, [pc, #60]	; (80047fc <HAL_GPIO_Init+0x304>)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3301      	adds	r3, #1
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	f67f aea2 	bls.w	8004514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	3724      	adds	r7, #36	; 0x24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40013800 	.word	0x40013800
 80047e8:	40020000 	.word	0x40020000
 80047ec:	40020400 	.word	0x40020400
 80047f0:	40020800 	.word	0x40020800
 80047f4:	40020c00 	.word	0x40020c00
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40013c00 	.word	0x40013c00

08004800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
 800480c:	4613      	mov	r3, r2
 800480e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004810:	787b      	ldrb	r3, [r7, #1]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800481c:	e003      	b.n	8004826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	041a      	lsls	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	619a      	str	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e12b      	b.n	8004a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fe fa3a 	bl	8002cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004898:	f001 fbd8 	bl	800604c <HAL_RCC_GetPCLK1Freq>
 800489c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4a81      	ldr	r2, [pc, #516]	; (8004aa8 <HAL_I2C_Init+0x274>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d807      	bhi.n	80048b8 <HAL_I2C_Init+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a80      	ldr	r2, [pc, #512]	; (8004aac <HAL_I2C_Init+0x278>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	bf94      	ite	ls
 80048b0:	2301      	movls	r3, #1
 80048b2:	2300      	movhi	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e006      	b.n	80048c6 <HAL_I2C_Init+0x92>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a7d      	ldr	r2, [pc, #500]	; (8004ab0 <HAL_I2C_Init+0x27c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	bf94      	ite	ls
 80048c0:	2301      	movls	r3, #1
 80048c2:	2300      	movhi	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0e7      	b.n	8004a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a78      	ldr	r2, [pc, #480]	; (8004ab4 <HAL_I2C_Init+0x280>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	0c9b      	lsrs	r3, r3, #18
 80048d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a6a      	ldr	r2, [pc, #424]	; (8004aa8 <HAL_I2C_Init+0x274>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d802      	bhi.n	8004908 <HAL_I2C_Init+0xd4>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3301      	adds	r3, #1
 8004906:	e009      	b.n	800491c <HAL_I2C_Init+0xe8>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	4a69      	ldr	r2, [pc, #420]	; (8004ab8 <HAL_I2C_Init+0x284>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	3301      	adds	r3, #1
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	430b      	orrs	r3, r1
 8004922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800492e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	495c      	ldr	r1, [pc, #368]	; (8004aa8 <HAL_I2C_Init+0x274>)
 8004938:	428b      	cmp	r3, r1
 800493a:	d819      	bhi.n	8004970 <HAL_I2C_Init+0x13c>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1e59      	subs	r1, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	fbb1 f3f3 	udiv	r3, r1, r3
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004950:	400b      	ands	r3, r1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_I2C_Init+0x138>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1e59      	subs	r1, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fbb1 f3f3 	udiv	r3, r1, r3
 8004964:	3301      	adds	r3, #1
 8004966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496a:	e051      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 800496c:	2304      	movs	r3, #4
 800496e:	e04f      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d111      	bne.n	800499c <HAL_I2C_Init+0x168>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	440b      	add	r3, r1
 8004986:	fbb0 f3f3 	udiv	r3, r0, r3
 800498a:	3301      	adds	r3, #1
 800498c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e012      	b.n	80049c2 <HAL_I2C_Init+0x18e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1e58      	subs	r0, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	0099      	lsls	r1, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_I2C_Init+0x196>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e022      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10e      	bne.n	80049f0 <HAL_I2C_Init+0x1bc>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1e58      	subs	r0, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	440b      	add	r3, r1
 80049e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	e00f      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e58      	subs	r0, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	0099      	lsls	r1, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	6809      	ldr	r1, [r1, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6911      	ldr	r1, [r2, #16]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68d2      	ldr	r2, [r2, #12]
 8004a4a:	4311      	orrs	r1, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	000186a0 	.word	0x000186a0
 8004aac:	001e847f 	.word	0x001e847f
 8004ab0:	003d08ff 	.word	0x003d08ff
 8004ab4:	431bde83 	.word	0x431bde83
 8004ab8:	10624dd3 	.word	0x10624dd3

08004abc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	817b      	strh	r3, [r7, #10]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	813b      	strh	r3, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ad6:	f7fe fc13 	bl	8003300 <HAL_GetTick>
 8004ada:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	f040 80d9 	bne.w	8004c9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2319      	movs	r3, #25
 8004af0:	2201      	movs	r2, #1
 8004af2:	496d      	ldr	r1, [pc, #436]	; (8004ca8 <HAL_I2C_Mem_Write+0x1ec>)
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fc7f 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
 8004b02:	e0cc      	b.n	8004c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_I2C_Mem_Write+0x56>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0c5      	b.n	8004c9e <HAL_I2C_Mem_Write+0x1e2>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d007      	beq.n	8004b38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2221      	movs	r2, #33	; 0x21
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2240      	movs	r2, #64	; 0x40
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a3a      	ldr	r2, [r7, #32]
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a4d      	ldr	r2, [pc, #308]	; (8004cac <HAL_I2C_Mem_Write+0x1f0>)
 8004b78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b7a:	88f8      	ldrh	r0, [r7, #6]
 8004b7c:	893a      	ldrh	r2, [r7, #8]
 8004b7e:	8979      	ldrh	r1, [r7, #10]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	4603      	mov	r3, r0
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fab6 	bl	80050fc <I2C_RequestMemoryWrite>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d052      	beq.n	8004c3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e081      	b.n	8004c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fd00 	bl	80055a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d107      	bne.n	8004bc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e06b      	b.n	8004c9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d11b      	bne.n	8004c3c <HAL_I2C_Mem_Write+0x180>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d017      	beq.n	8004c3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	781a      	ldrb	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1aa      	bne.n	8004b9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fcec 	bl	8005626 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00d      	beq.n	8004c70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d107      	bne.n	8004c6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e016      	b.n	8004c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	00100002 	.word	0x00100002
 8004cac:	ffff0000 	.word	0xffff0000

08004cb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	; 0x30
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	817b      	strh	r3, [r7, #10]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	813b      	strh	r3, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cca:	f7fe fb19 	bl	8003300 <HAL_GetTick>
 8004cce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	f040 8208 	bne.w	80050ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	2319      	movs	r3, #25
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	497b      	ldr	r1, [pc, #492]	; (8004ed4 <HAL_I2C_Mem_Read+0x224>)
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fb85 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e1fb      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_I2C_Mem_Read+0x56>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e1f4      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d007      	beq.n	8004d2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2222      	movs	r2, #34	; 0x22
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2240      	movs	r2, #64	; 0x40
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a5b      	ldr	r2, [pc, #364]	; (8004ed8 <HAL_I2C_Mem_Read+0x228>)
 8004d6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d6e:	88f8      	ldrh	r0, [r7, #6]
 8004d70:	893a      	ldrh	r2, [r7, #8]
 8004d72:	8979      	ldrh	r1, [r7, #10]
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fa52 	bl	8005228 <I2C_RequestMemoryRead>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e1b0      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d113      	bne.n	8004dbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d96:	2300      	movs	r3, #0
 8004d98:	623b      	str	r3, [r7, #32]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	623b      	str	r3, [r7, #32]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e184      	b.n	80050c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d11b      	bne.n	8004dfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e164      	b.n	80050c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d11b      	bne.n	8004e3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	e144      	b.n	80050c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e54:	e138      	b.n	80050c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	f200 80f1 	bhi.w	8005042 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d123      	bne.n	8004eb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fc1b 	bl	80056a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e139      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eae:	e10b      	b.n	80050c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d14e      	bne.n	8004f56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	4906      	ldr	r1, [pc, #24]	; (8004edc <HAL_I2C_Mem_Read+0x22c>)
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fa98 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e10e      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
 8004ed2:	bf00      	nop
 8004ed4:	00100002 	.word	0x00100002
 8004ed8:	ffff0000 	.word	0xffff0000
 8004edc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f54:	e0b8      	b.n	80050c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4966      	ldr	r1, [pc, #408]	; (80050f8 <HAL_I2C_Mem_Read+0x448>)
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fa49 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0bf      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2200      	movs	r2, #0
 8004fba:	494f      	ldr	r1, [pc, #316]	; (80050f8 <HAL_I2C_Mem_Read+0x448>)
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fa1b 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e091      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005040:	e042      	b.n	80050c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fb2e 	bl	80056a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e04c      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d118      	bne.n	80050c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f47f aec2 	bne.w	8004e56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	00010004 	.word	0x00010004

080050fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	4608      	mov	r0, r1
 8005106:	4611      	mov	r1, r2
 8005108:	461a      	mov	r2, r3
 800510a:	4603      	mov	r3, r0
 800510c:	817b      	strh	r3, [r7, #10]
 800510e:	460b      	mov	r3, r1
 8005110:	813b      	strh	r3, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	2200      	movs	r2, #0
 800512e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f960 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514c:	d103      	bne.n	8005156 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005154:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e05f      	b.n	800521a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800515a:	897b      	ldrh	r3, [r7, #10]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005168:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	6a3a      	ldr	r2, [r7, #32]
 800516e:	492d      	ldr	r1, [pc, #180]	; (8005224 <I2C_RequestMemoryWrite+0x128>)
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f998 	bl	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e04c      	b.n	800521a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005198:	6a39      	ldr	r1, [r7, #32]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fa02 	bl	80055a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d107      	bne.n	80051be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e02b      	b.n	800521a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c8:	893b      	ldrh	r3, [r7, #8]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	611a      	str	r2, [r3, #16]
 80051d2:	e021      	b.n	8005218 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051d4:	893b      	ldrh	r3, [r7, #8]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	b29b      	uxth	r3, r3
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	6a39      	ldr	r1, [r7, #32]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f9dc 	bl	80055a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d107      	bne.n	800520a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e005      	b.n	800521a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800520e:	893b      	ldrh	r3, [r7, #8]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	00010002 	.word	0x00010002

08005228 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	4608      	mov	r0, r1
 8005232:	4611      	mov	r1, r2
 8005234:	461a      	mov	r2, r3
 8005236:	4603      	mov	r3, r0
 8005238:	817b      	strh	r3, [r7, #10]
 800523a:	460b      	mov	r3, r1
 800523c:	813b      	strh	r3, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005250:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005260:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	2200      	movs	r2, #0
 800526a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f8c2 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005288:	d103      	bne.n	8005292 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e0aa      	b.n	80053ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005296:	897b      	ldrh	r3, [r7, #10]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	4952      	ldr	r1, [pc, #328]	; (80053f4 <I2C_RequestMemoryRead+0x1cc>)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f8fa 	bl	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e097      	b.n	80053ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	6a39      	ldr	r1, [r7, #32]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f964 	bl	80055a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d107      	bne.n	80052fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e076      	b.n	80053ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	611a      	str	r2, [r3, #16]
 800530e:	e021      	b.n	8005354 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005310:	893b      	ldrh	r3, [r7, #8]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	b29b      	uxth	r3, r3
 8005316:	b2da      	uxtb	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	6a39      	ldr	r1, [r7, #32]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f93e 	bl	80055a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	2b04      	cmp	r3, #4
 8005334:	d107      	bne.n	8005346 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005344:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e050      	b.n	80053ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	6a39      	ldr	r1, [r7, #32]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f923 	bl	80055a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00d      	beq.n	8005380 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b04      	cmp	r3, #4
 800536a:	d107      	bne.n	800537c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e035      	b.n	80053ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800538e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	2200      	movs	r2, #0
 8005398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f82b 	bl	80053f8 <I2C_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00d      	beq.n	80053c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b6:	d103      	bne.n	80053c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e013      	b.n	80053ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053c4:	897b      	ldrh	r3, [r7, #10]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	4906      	ldr	r1, [pc, #24]	; (80053f4 <I2C_RequestMemoryRead+0x1cc>)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f863 	bl	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	00010002 	.word	0x00010002

080053f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005408:	e025      	b.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d021      	beq.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005412:	f7fd ff75 	bl	8003300 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e023      	b.n	800549e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10d      	bne.n	800547c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	43da      	mvns	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	e00c      	b.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	43da      	mvns	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4013      	ands	r3, r2
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	bf0c      	ite	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	2300      	movne	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	429a      	cmp	r2, r3
 800549a:	d0b6      	beq.n	800540a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b4:	e051      	b.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c4:	d123      	bne.n	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f043 0204 	orr.w	r2, r3, #4
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e046      	b.n	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d021      	beq.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fd fef3 	bl	8003300 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e020      	b.n	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	0c1b      	lsrs	r3, r3, #16
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d10c      	bne.n	800557e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	43da      	mvns	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e00b      	b.n	8005596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	43da      	mvns	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d18d      	bne.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055b0:	e02d      	b.n	800560e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f8ce 	bl	8005754 <I2C_IsAcknowledgeFailed>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e02d      	b.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d021      	beq.n	800560e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7fd fe99 	bl	8003300 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d116      	bne.n	800560e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f043 0220 	orr.w	r2, r3, #32
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e007      	b.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d1ca      	bne.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005632:	e02d      	b.n	8005690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f88d 	bl	8005754 <I2C_IsAcknowledgeFailed>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e02d      	b.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d021      	beq.n	8005690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564c:	f7fd fe58 	bl	8003300 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d116      	bne.n	8005690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e007      	b.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d1ca      	bne.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056b4:	e042      	b.n	800573c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d119      	bne.n	80056f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0210 	mvn.w	r2, #16
 80056cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e029      	b.n	800574c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f8:	f7fd fe02 	bl	8003300 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d116      	bne.n	800573c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	f043 0220 	orr.w	r2, r3, #32
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e007      	b.n	800574c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d1b5      	bne.n	80056b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576a:	d11b      	bne.n	80057a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005774:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	f043 0204 	orr.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e264      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d075      	beq.n	80058be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057d2:	4ba3      	ldr	r3, [pc, #652]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d00c      	beq.n	80057f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057de:	4ba0      	ldr	r3, [pc, #640]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d112      	bne.n	8005810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ea:	4b9d      	ldr	r3, [pc, #628]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057f6:	d10b      	bne.n	8005810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f8:	4b99      	ldr	r3, [pc, #612]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d05b      	beq.n	80058bc <HAL_RCC_OscConfig+0x108>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d157      	bne.n	80058bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e23f      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005818:	d106      	bne.n	8005828 <HAL_RCC_OscConfig+0x74>
 800581a:	4b91      	ldr	r3, [pc, #580]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a90      	ldr	r2, [pc, #576]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e01d      	b.n	8005864 <HAL_RCC_OscConfig+0xb0>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005830:	d10c      	bne.n	800584c <HAL_RCC_OscConfig+0x98>
 8005832:	4b8b      	ldr	r3, [pc, #556]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a8a      	ldr	r2, [pc, #552]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	4b88      	ldr	r3, [pc, #544]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a87      	ldr	r2, [pc, #540]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e00b      	b.n	8005864 <HAL_RCC_OscConfig+0xb0>
 800584c:	4b84      	ldr	r3, [pc, #528]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a83      	ldr	r2, [pc, #524]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	4b81      	ldr	r3, [pc, #516]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a80      	ldr	r2, [pc, #512]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 800585e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d013      	beq.n	8005894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586c:	f7fd fd48 	bl	8003300 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005874:	f7fd fd44 	bl	8003300 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b64      	cmp	r3, #100	; 0x64
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e204      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005886:	4b76      	ldr	r3, [pc, #472]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0xc0>
 8005892:	e014      	b.n	80058be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005894:	f7fd fd34 	bl	8003300 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800589c:	f7fd fd30 	bl	8003300 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b64      	cmp	r3, #100	; 0x64
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e1f0      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ae:	4b6c      	ldr	r3, [pc, #432]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0xe8>
 80058ba:	e000      	b.n	80058be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d063      	beq.n	8005992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ca:	4b65      	ldr	r3, [pc, #404]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058d6:	4b62      	ldr	r3, [pc, #392]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d11c      	bne.n	800591c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058e2:	4b5f      	ldr	r3, [pc, #380]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d116      	bne.n	800591c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ee:	4b5c      	ldr	r3, [pc, #368]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_RCC_OscConfig+0x152>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d001      	beq.n	8005906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e1c4      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005906:	4b56      	ldr	r3, [pc, #344]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4952      	ldr	r1, [pc, #328]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005916:	4313      	orrs	r3, r2
 8005918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591a:	e03a      	b.n	8005992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d020      	beq.n	8005966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005924:	4b4f      	ldr	r3, [pc, #316]	; (8005a64 <HAL_RCC_OscConfig+0x2b0>)
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592a:	f7fd fce9 	bl	8003300 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005932:	f7fd fce5 	bl	8003300 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e1a5      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005944:	4b46      	ldr	r3, [pc, #280]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f0      	beq.n	8005932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005950:	4b43      	ldr	r3, [pc, #268]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4940      	ldr	r1, [pc, #256]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005960:	4313      	orrs	r3, r2
 8005962:	600b      	str	r3, [r1, #0]
 8005964:	e015      	b.n	8005992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005966:	4b3f      	ldr	r3, [pc, #252]	; (8005a64 <HAL_RCC_OscConfig+0x2b0>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596c:	f7fd fcc8 	bl	8003300 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005974:	f7fd fcc4 	bl	8003300 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e184      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005986:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f0      	bne.n	8005974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d030      	beq.n	8005a00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d016      	beq.n	80059d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <HAL_RCC_OscConfig+0x2b4>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ac:	f7fd fca8 	bl	8003300 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b4:	f7fd fca4 	bl	8003300 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e164      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c6:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x200>
 80059d2:	e015      	b.n	8005a00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <HAL_RCC_OscConfig+0x2b4>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059da:	f7fd fc91 	bl	8003300 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059e2:	f7fd fc8d 	bl	8003300 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e14d      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f4:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 80059f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f0      	bne.n	80059e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80a0 	beq.w	8005b4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10f      	bne.n	8005a3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	4a0e      	ldr	r2, [pc, #56]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a36:	60bb      	str	r3, [r7, #8]
 8005a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_OscConfig+0x2b8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d121      	bne.n	8005a8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <HAL_RCC_OscConfig+0x2b8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <HAL_RCC_OscConfig+0x2b8>)
 8005a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a56:	f7fd fc53 	bl	8003300 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5c:	e011      	b.n	8005a82 <HAL_RCC_OscConfig+0x2ce>
 8005a5e:	bf00      	nop
 8005a60:	40023800 	.word	0x40023800
 8005a64:	42470000 	.word	0x42470000
 8005a68:	42470e80 	.word	0x42470e80
 8005a6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a70:	f7fd fc46 	bl	8003300 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e106      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a82:	4b85      	ldr	r3, [pc, #532]	; (8005c98 <HAL_RCC_OscConfig+0x4e4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d106      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x2f0>
 8005a96:	4b81      	ldr	r3, [pc, #516]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9a:	4a80      	ldr	r2, [pc, #512]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005a9c:	f043 0301 	orr.w	r3, r3, #1
 8005aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa2:	e01c      	b.n	8005ade <HAL_RCC_OscConfig+0x32a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b05      	cmp	r3, #5
 8005aaa:	d10c      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x312>
 8005aac:	4b7b      	ldr	r3, [pc, #492]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	4a7a      	ldr	r2, [pc, #488]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005ab2:	f043 0304 	orr.w	r3, r3, #4
 8005ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab8:	4b78      	ldr	r3, [pc, #480]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	4a77      	ldr	r2, [pc, #476]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac4:	e00b      	b.n	8005ade <HAL_RCC_OscConfig+0x32a>
 8005ac6:	4b75      	ldr	r3, [pc, #468]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	4a74      	ldr	r2, [pc, #464]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad2:	4b72      	ldr	r3, [pc, #456]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	4a71      	ldr	r2, [pc, #452]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d015      	beq.n	8005b12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fd fc0b 	bl	8003300 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aee:	f7fd fc07 	bl	8003300 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0c5      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b04:	4b65      	ldr	r3, [pc, #404]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ee      	beq.n	8005aee <HAL_RCC_OscConfig+0x33a>
 8005b10:	e014      	b.n	8005b3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b12:	f7fd fbf5 	bl	8003300 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b18:	e00a      	b.n	8005b30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b1a:	f7fd fbf1 	bl	8003300 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e0af      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b30:	4b5a      	ldr	r3, [pc, #360]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1ee      	bne.n	8005b1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d105      	bne.n	8005b4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b42:	4b56      	ldr	r3, [pc, #344]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a55      	ldr	r2, [pc, #340]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 809b 	beq.w	8005c8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b58:	4b50      	ldr	r3, [pc, #320]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 030c 	and.w	r3, r3, #12
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d05c      	beq.n	8005c1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d141      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6c:	4b4c      	ldr	r3, [pc, #304]	; (8005ca0 <HAL_RCC_OscConfig+0x4ec>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b72:	f7fd fbc5 	bl	8003300 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b7a:	f7fd fbc1 	bl	8003300 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e081      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8c:	4b43      	ldr	r3, [pc, #268]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f0      	bne.n	8005b7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	019b      	lsls	r3, r3, #6
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	4937      	ldr	r1, [pc, #220]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc2:	4b37      	ldr	r3, [pc, #220]	; (8005ca0 <HAL_RCC_OscConfig+0x4ec>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc8:	f7fd fb9a 	bl	8003300 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd0:	f7fd fb96 	bl	8003300 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e056      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be2:	4b2e      	ldr	r3, [pc, #184]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x41c>
 8005bee:	e04e      	b.n	8005c8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf0:	4b2b      	ldr	r3, [pc, #172]	; (8005ca0 <HAL_RCC_OscConfig+0x4ec>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf6:	f7fd fb83 	bl	8003300 <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfe:	f7fd fb7f 	bl	8003300 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e03f      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c10:	4b22      	ldr	r3, [pc, #136]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f0      	bne.n	8005bfe <HAL_RCC_OscConfig+0x44a>
 8005c1c:	e037      	b.n	8005c8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e032      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c2a:	4b1c      	ldr	r3, [pc, #112]	; (8005c9c <HAL_RCC_OscConfig+0x4e8>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d028      	beq.n	8005c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d121      	bne.n	8005c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d11a      	bne.n	8005c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d111      	bne.n	8005c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	3b01      	subs	r3, #1
 8005c74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d001      	beq.n	8005c8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40007000 	.word	0x40007000
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	42470060 	.word	0x42470060

08005ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0cc      	b.n	8005e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb8:	4b68      	ldr	r3, [pc, #416]	; (8005e5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d90c      	bls.n	8005ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cce:	4b63      	ldr	r3, [pc, #396]	; (8005e5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0b8      	b.n	8005e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d020      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf8:	4b59      	ldr	r3, [pc, #356]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	4a58      	ldr	r2, [pc, #352]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d10:	4b53      	ldr	r3, [pc, #332]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a52      	ldr	r2, [pc, #328]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d1c:	4b50      	ldr	r3, [pc, #320]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	494d      	ldr	r1, [pc, #308]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d044      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d107      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d42:	4b47      	ldr	r3, [pc, #284]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d119      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e07f      	b.n	8005e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d003      	beq.n	8005d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d107      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d62:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d109      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e06f      	b.n	8005e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d72:	4b3b      	ldr	r3, [pc, #236]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e067      	b.n	8005e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d82:	4b37      	ldr	r3, [pc, #220]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f023 0203 	bic.w	r2, r3, #3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	4934      	ldr	r1, [pc, #208]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d94:	f7fd fab4 	bl	8003300 <HAL_GetTick>
 8005d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d9c:	f7fd fab0 	bl	8003300 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e04f      	b.n	8005e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db2:	4b2b      	ldr	r3, [pc, #172]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 020c 	and.w	r2, r3, #12
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d1eb      	bne.n	8005d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc4:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <HAL_RCC_ClockConfig+0x1b8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d20c      	bcs.n	8005dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd2:	4b22      	ldr	r3, [pc, #136]	; (8005e5c <HAL_RCC_ClockConfig+0x1b8>)
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dda:	4b20      	ldr	r3, [pc, #128]	; (8005e5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e032      	b.n	8005e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d008      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df8:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	4916      	ldr	r1, [pc, #88]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e16:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	490e      	ldr	r1, [pc, #56]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e2a:	f000 f821 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	091b      	lsrs	r3, r3, #4
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	490a      	ldr	r1, [pc, #40]	; (8005e64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e3c:	5ccb      	ldrb	r3, [r1, r3]
 8005e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e42:	4a09      	ldr	r2, [pc, #36]	; (8005e68 <HAL_RCC_ClockConfig+0x1c4>)
 8005e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e46:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <HAL_RCC_ClockConfig+0x1c8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fd f88a 	bl	8002f64 <HAL_InitTick>

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40023c00 	.word	0x40023c00
 8005e60:	40023800 	.word	0x40023800
 8005e64:	08013228 	.word	0x08013228
 8005e68:	20000004 	.word	0x20000004
 8005e6c:	20000008 	.word	0x20000008

08005e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	2300      	movs	r3, #0
 8005e82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e88:	4b67      	ldr	r3, [pc, #412]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d00d      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	f200 80bd 	bhi.w	8006014 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d003      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8005ea2:	e0b7      	b.n	8006014 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ea4:	4b61      	ldr	r3, [pc, #388]	; (800602c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ea6:	60bb      	str	r3, [r7, #8]
       break;
 8005ea8:	e0b7      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eaa:	4b61      	ldr	r3, [pc, #388]	; (8006030 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005eac:	60bb      	str	r3, [r7, #8]
      break;
 8005eae:	e0b4      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eb0:	4b5d      	ldr	r3, [pc, #372]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eba:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d04d      	beq.n	8005f62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec6:	4b58      	ldr	r3, [pc, #352]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	099b      	lsrs	r3, r3, #6
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ed6:	f04f 0100 	mov.w	r1, #0
 8005eda:	ea02 0800 	and.w	r8, r2, r0
 8005ede:	ea03 0901 	and.w	r9, r3, r1
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	014b      	lsls	r3, r1, #5
 8005ef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ef4:	0142      	lsls	r2, r0, #5
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	ebb0 0008 	subs.w	r0, r0, r8
 8005efe:	eb61 0109 	sbc.w	r1, r1, r9
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	018b      	lsls	r3, r1, #6
 8005f0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f10:	0182      	lsls	r2, r0, #6
 8005f12:	1a12      	subs	r2, r2, r0
 8005f14:	eb63 0301 	sbc.w	r3, r3, r1
 8005f18:	f04f 0000 	mov.w	r0, #0
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	00d9      	lsls	r1, r3, #3
 8005f22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f26:	00d0      	lsls	r0, r2, #3
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	eb12 0208 	adds.w	r2, r2, r8
 8005f30:	eb43 0309 	adc.w	r3, r3, r9
 8005f34:	f04f 0000 	mov.w	r0, #0
 8005f38:	f04f 0100 	mov.w	r1, #0
 8005f3c:	0259      	lsls	r1, r3, #9
 8005f3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f42:	0250      	lsls	r0, r2, #9
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	f7fa fea0 	bl	8000c98 <__aeabi_uldivmod>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e04a      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f62:	4b31      	ldr	r3, [pc, #196]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	099b      	lsrs	r3, r3, #6
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	ea02 0400 	and.w	r4, r2, r0
 8005f7a:	ea03 0501 	and.w	r5, r3, r1
 8005f7e:	4620      	mov	r0, r4
 8005f80:	4629      	mov	r1, r5
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	014b      	lsls	r3, r1, #5
 8005f8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f90:	0142      	lsls	r2, r0, #5
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	1b00      	subs	r0, r0, r4
 8005f98:	eb61 0105 	sbc.w	r1, r1, r5
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	018b      	lsls	r3, r1, #6
 8005fa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005faa:	0182      	lsls	r2, r0, #6
 8005fac:	1a12      	subs	r2, r2, r0
 8005fae:	eb63 0301 	sbc.w	r3, r3, r1
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f04f 0100 	mov.w	r1, #0
 8005fba:	00d9      	lsls	r1, r3, #3
 8005fbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fc0:	00d0      	lsls	r0, r2, #3
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	1912      	adds	r2, r2, r4
 8005fc8:	eb45 0303 	adc.w	r3, r5, r3
 8005fcc:	f04f 0000 	mov.w	r0, #0
 8005fd0:	f04f 0100 	mov.w	r1, #0
 8005fd4:	0299      	lsls	r1, r3, #10
 8005fd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fda:	0290      	lsls	r0, r2, #10
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	f7fa fe54 	bl	8000c98 <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	3301      	adds	r3, #1
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	60bb      	str	r3, [r7, #8]
      break;
 8006012:	e002      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006016:	60bb      	str	r3, [r7, #8]
      break;
 8006018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800601a:	68bb      	ldr	r3, [r7, #8]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800
 800602c:	00f42400 	.word	0x00f42400
 8006030:	007a1200 	.word	0x007a1200

08006034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006038:	4b03      	ldr	r3, [pc, #12]	; (8006048 <HAL_RCC_GetHCLKFreq+0x14>)
 800603a:	681b      	ldr	r3, [r3, #0]
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000004 	.word	0x20000004

0800604c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006050:	f7ff fff0 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 8006054:	4602      	mov	r2, r0
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	0a9b      	lsrs	r3, r3, #10
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	4903      	ldr	r1, [pc, #12]	; (8006070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40023800 	.word	0x40023800
 8006070:	08013238 	.word	0x08013238

08006074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006078:	f7ff ffdc 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 800607c:	4602      	mov	r2, r0
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	0b5b      	lsrs	r3, r3, #13
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	4903      	ldr	r1, [pc, #12]	; (8006098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800608a:	5ccb      	ldrb	r3, [r1, r3]
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006090:	4618      	mov	r0, r3
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40023800 	.word	0x40023800
 8006098:	08013238 	.word	0x08013238

0800609c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	220f      	movs	r2, #15
 80060aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060ac:	4b12      	ldr	r3, [pc, #72]	; (80060f8 <HAL_RCC_GetClockConfig+0x5c>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0203 	and.w	r2, r3, #3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060b8:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <HAL_RCC_GetClockConfig+0x5c>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060c4:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <HAL_RCC_GetClockConfig+0x5c>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060d0:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <HAL_RCC_GetClockConfig+0x5c>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	08db      	lsrs	r3, r3, #3
 80060d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060de:	4b07      	ldr	r3, [pc, #28]	; (80060fc <HAL_RCC_GetClockConfig+0x60>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0207 	and.w	r2, r3, #7
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	601a      	str	r2, [r3, #0]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40023c00 	.word	0x40023c00

08006100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e07b      	b.n	800620a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d108      	bne.n	800612c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006122:	d009      	beq.n	8006138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	61da      	str	r2, [r3, #28]
 800612a:	e005      	b.n	8006138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fc fe06 	bl	8002d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800616e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	ea42 0103 	orr.w	r1, r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	f003 0104 	and.w	r1, r3, #4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	f003 0210 	and.w	r2, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b088      	sub	sp, #32
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_SPI_Transmit+0x22>
 8006230:	2302      	movs	r3, #2
 8006232:	e126      	b.n	8006482 <HAL_SPI_Transmit+0x270>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800623c:	f7fd f860 	bl	8003300 <HAL_GetTick>
 8006240:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	d002      	beq.n	8006258 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006252:	2302      	movs	r3, #2
 8006254:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006256:	e10b      	b.n	8006470 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_SPI_Transmit+0x52>
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006268:	e102      	b.n	8006470 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2203      	movs	r2, #3
 800626e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	d10f      	bne.n	80062d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d007      	beq.n	80062f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f8:	d14b      	bne.n	8006392 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_Transmit+0xf6>
 8006302:	8afb      	ldrh	r3, [r7, #22]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d13e      	bne.n	8006386 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630c:	881a      	ldrh	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	1c9a      	adds	r2, r3, #2
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800632c:	e02b      	b.n	8006386 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d112      	bne.n	8006362 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	881a      	ldrh	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	1c9a      	adds	r2, r3, #2
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006360:	e011      	b.n	8006386 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006362:	f7fc ffcd 	bl	8003300 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d803      	bhi.n	800637a <HAL_SPI_Transmit+0x168>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d102      	bne.n	8006380 <HAL_SPI_Transmit+0x16e>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006384:	e074      	b.n	8006470 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1ce      	bne.n	800632e <HAL_SPI_Transmit+0x11c>
 8006390:	e04c      	b.n	800642c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_Transmit+0x18e>
 800639a:	8afb      	ldrh	r3, [r7, #22]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d140      	bne.n	8006422 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063c6:	e02c      	b.n	8006422 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d113      	bne.n	80063fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	7812      	ldrb	r2, [r2, #0]
 80063e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80063fc:	e011      	b.n	8006422 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063fe:	f7fc ff7f 	bl	8003300 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d803      	bhi.n	8006416 <HAL_SPI_Transmit+0x204>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d102      	bne.n	800641c <HAL_SPI_Transmit+0x20a>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006420:	e026      	b.n	8006470 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1cd      	bne.n	80063c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fbcb 	bl	8006bcc <SPI_EndRxTxTransaction>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800644a:	2300      	movs	r3, #0
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e000      	b.n	8006470 <HAL_SPI_Transmit+0x25e>
  }

error:
 800646e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006480:	7ffb      	ldrb	r3, [r7, #31]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b088      	sub	sp, #32
 800648e:	af02      	add	r7, sp, #8
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	4613      	mov	r3, r2
 8006498:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a6:	d112      	bne.n	80064ce <HAL_SPI_Receive+0x44>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10e      	bne.n	80064ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2204      	movs	r2, #4
 80064b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	4613      	mov	r3, r2
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f8f1 	bl	80066ac <HAL_SPI_TransmitReceive>
 80064ca:	4603      	mov	r3, r0
 80064cc:	e0ea      	b.n	80066a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_SPI_Receive+0x52>
 80064d8:	2302      	movs	r3, #2
 80064da:	e0e3      	b.n	80066a4 <HAL_SPI_Receive+0x21a>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064e4:	f7fc ff0c 	bl	8003300 <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d002      	beq.n	80064fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
 80064f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064fa:	e0ca      	b.n	8006692 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_SPI_Receive+0x7e>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800650c:	e0c1      	b.n	8006692 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2204      	movs	r2, #4
 8006512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006554:	d10f      	bne.n	8006576 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006574:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d007      	beq.n	8006594 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006592:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d162      	bne.n	8006662 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800659c:	e02e      	b.n	80065fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d115      	bne.n	80065d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f103 020c 	add.w	r2, r3, #12
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	7812      	ldrb	r2, [r2, #0]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d6:	e011      	b.n	80065fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d8:	f7fc fe92 	bl	8003300 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d803      	bhi.n	80065f0 <HAL_SPI_Receive+0x166>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d102      	bne.n	80065f6 <HAL_SPI_Receive+0x16c>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065fa:	e04a      	b.n	8006692 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1cb      	bne.n	800659e <HAL_SPI_Receive+0x114>
 8006606:	e031      	b.n	800666c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	d113      	bne.n	800663e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	b292      	uxth	r2, r2
 8006622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	1c9a      	adds	r2, r3, #2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800663c:	e011      	b.n	8006662 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800663e:	f7fc fe5f 	bl	8003300 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d803      	bhi.n	8006656 <HAL_SPI_Receive+0x1cc>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d102      	bne.n	800665c <HAL_SPI_Receive+0x1d2>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d102      	bne.n	8006662 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006660:	e017      	b.n	8006692 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1cd      	bne.n	8006608 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fa45 	bl	8006b00 <SPI_EndRxTransaction>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
 800668e:	e000      	b.n	8006692 <HAL_SPI_Receive+0x208>
  }

error :
 8006690:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066ba:	2301      	movs	r3, #1
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x26>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e18a      	b.n	80069e8 <HAL_SPI_TransmitReceive+0x33c>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066da:	f7fc fe11 	bl	8003300 <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066f0:	887b      	ldrh	r3, [r7, #2]
 80066f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d00f      	beq.n	800671c <HAL_SPI_TransmitReceive+0x70>
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006702:	d107      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x68>
 800670c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006710:	2b04      	cmp	r3, #4
 8006712:	d003      	beq.n	800671c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006714:	2302      	movs	r3, #2
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800671a:	e15b      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_SPI_TransmitReceive+0x82>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_SPI_TransmitReceive+0x82>
 8006728:	887b      	ldrh	r3, [r7, #2]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d103      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006734:	e14e      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b04      	cmp	r3, #4
 8006740:	d003      	beq.n	800674a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2205      	movs	r2, #5
 8006746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	887a      	ldrh	r2, [r7, #2]
 800675a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	887a      	ldrh	r2, [r7, #2]
 8006772:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d007      	beq.n	800679e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800679c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a6:	d178      	bne.n	800689a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_SPI_TransmitReceive+0x10a>
 80067b0:	8b7b      	ldrh	r3, [r7, #26]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d166      	bne.n	8006884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	881a      	ldrh	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	1c9a      	adds	r2, r3, #2
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067da:	e053      	b.n	8006884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d11b      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x176>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d016      	beq.n	8006822 <HAL_SPI_TransmitReceive+0x176>
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d113      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	1c9a      	adds	r2, r3, #2
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	d119      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x1b8>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	b292      	uxth	r2, r2
 8006846:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	1c9a      	adds	r2, r3, #2
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006860:	2301      	movs	r3, #1
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006864:	f7fc fd4c 	bl	8003300 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006870:	429a      	cmp	r2, r3
 8006872:	d807      	bhi.n	8006884 <HAL_SPI_TransmitReceive+0x1d8>
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d003      	beq.n	8006884 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006882:	e0a7      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1a6      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x130>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1a1      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x130>
 8006898:	e07c      	b.n	8006994 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x1fc>
 80068a2:	8b7b      	ldrh	r3, [r7, #26]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d16b      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	7812      	ldrb	r2, [r2, #0]
 80068b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ce:	e057      	b.n	8006980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d11c      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x26c>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d017      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x26c>
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d114      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d119      	bne.n	800695a <HAL_SPI_TransmitReceive+0x2ae>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d014      	beq.n	800695a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006956:	2301      	movs	r3, #1
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800695a:	f7fc fcd1 	bl	8003300 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006966:	429a      	cmp	r2, r3
 8006968:	d803      	bhi.n	8006972 <HAL_SPI_TransmitReceive+0x2c6>
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d102      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x2cc>
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800697e:	e029      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1a2      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x224>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d19d      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f917 	bl	8006bcc <SPI_EndRxTxTransaction>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80069b0:	e010      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	e000      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80069d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3730      	adds	r7, #48	; 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a00:	f7fc fc7e 	bl	8003300 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a10:	f7fc fc76 	bl	8003300 <HAL_GetTick>
 8006a14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a16:	4b39      	ldr	r3, [pc, #228]	; (8006afc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	015b      	lsls	r3, r3, #5
 8006a1c:	0d1b      	lsrs	r3, r3, #20
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	fb02 f303 	mul.w	r3, r2, r3
 8006a24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a26:	e054      	b.n	8006ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d050      	beq.n	8006ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a30:	f7fc fc66 	bl	8003300 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d902      	bls.n	8006a46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d13d      	bne.n	8006ac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a5e:	d111      	bne.n	8006a84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a68:	d004      	beq.n	8006a74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d107      	bne.n	8006a84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8c:	d10f      	bne.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e017      	b.n	8006af2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4013      	ands	r3, r2
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	bf0c      	ite	eq
 8006ae2:	2301      	moveq	r3, #1
 8006ae4:	2300      	movne	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d19b      	bne.n	8006a28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3720      	adds	r7, #32
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000004 	.word	0x20000004

08006b00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b14:	d111      	bne.n	8006b3a <SPI_EndRxTransaction+0x3a>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b1e:	d004      	beq.n	8006b2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b28:	d107      	bne.n	8006b3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b42:	d12a      	bne.n	8006b9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d012      	beq.n	8006b74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2200      	movs	r2, #0
 8006b56:	2180      	movs	r1, #128	; 0x80
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff ff49 	bl	80069f0 <SPI_WaitFlagStateUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02d      	beq.n	8006bc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e026      	b.n	8006bc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f7ff ff36 	bl	80069f0 <SPI_WaitFlagStateUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01a      	beq.n	8006bc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	f043 0220 	orr.w	r2, r3, #32
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e013      	b.n	8006bc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f7ff ff23 	bl	80069f0 <SPI_WaitFlagStateUntilTimeout>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb4:	f043 0220 	orr.w	r2, r3, #32
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e000      	b.n	8006bc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bd8:	4b1b      	ldr	r3, [pc, #108]	; (8006c48 <SPI_EndRxTxTransaction+0x7c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <SPI_EndRxTxTransaction+0x80>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	0d5b      	lsrs	r3, r3, #21
 8006be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be8:	fb02 f303 	mul.w	r3, r2, r3
 8006bec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf6:	d112      	bne.n	8006c1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7ff fef4 	bl	80069f0 <SPI_WaitFlagStateUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c12:	f043 0220 	orr.w	r2, r3, #32
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e00f      	b.n	8006c3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c34:	2b80      	cmp	r3, #128	; 0x80
 8006c36:	d0f2      	beq.n	8006c1e <SPI_EndRxTxTransaction+0x52>
 8006c38:	e000      	b.n	8006c3c <SPI_EndRxTxTransaction+0x70>
        break;
 8006c3a:	bf00      	nop
  }

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000004 	.word	0x20000004
 8006c4c:	165e9f81 	.word	0x165e9f81

08006c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e041      	b.n	8006ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f839 	bl	8006cee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f000 f9ca 	bl	8007028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d001      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e044      	b.n	8006da6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d46:	d013      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <HAL_TIM_Base_Start_IT+0xb8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x6c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a16      	ldr	r2, [pc, #88]	; (8006dc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d111      	bne.n	8006d94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d010      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0201 	orr.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	e007      	b.n	8006da4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	40014000 	.word	0x40014000

08006dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0202 	mvn.w	r2, #2
 8006df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8ee 	bl	8006fec <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f8e0 	bl	8006fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8f1 	bl	8007000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d122      	bne.n	8006e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d11b      	bne.n	8006e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0204 	mvn.w	r2, #4
 8006e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f8c4 	bl	8006fec <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f8b6 	bl	8006fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f8c7 	bl	8007000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d122      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d11b      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0208 	mvn.w	r2, #8
 8006e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f89a 	bl	8006fec <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f88c 	bl	8006fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f89d 	bl	8007000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0310 	and.w	r3, r3, #16
 8006ed6:	2b10      	cmp	r3, #16
 8006ed8:	d122      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b10      	cmp	r3, #16
 8006ee6:	d11b      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0210 	mvn.w	r2, #16
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f870 	bl	8006fec <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f862 	bl	8006fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f873 	bl	8007000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d10e      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d107      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0201 	mvn.w	r2, #1
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fb fcee 	bl	8002928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f56:	2b80      	cmp	r3, #128	; 0x80
 8006f58:	d10e      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f64:	2b80      	cmp	r3, #128	; 0x80
 8006f66:	d107      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f8e2 	bl	800713c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f82:	2b40      	cmp	r3, #64	; 0x40
 8006f84:	d10e      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	d107      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f838 	bl	8007014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d10e      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d107      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0220 	mvn.w	r2, #32
 8006fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f8ac 	bl	8007128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a34      	ldr	r2, [pc, #208]	; (800710c <TIM_Base_SetConfig+0xe4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00f      	beq.n	8007060 <TIM_Base_SetConfig+0x38>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007046:	d00b      	beq.n	8007060 <TIM_Base_SetConfig+0x38>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a31      	ldr	r2, [pc, #196]	; (8007110 <TIM_Base_SetConfig+0xe8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <TIM_Base_SetConfig+0x38>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a30      	ldr	r2, [pc, #192]	; (8007114 <TIM_Base_SetConfig+0xec>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_Base_SetConfig+0x38>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <TIM_Base_SetConfig+0xf0>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d108      	bne.n	8007072 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a25      	ldr	r2, [pc, #148]	; (800710c <TIM_Base_SetConfig+0xe4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d01b      	beq.n	80070b2 <TIM_Base_SetConfig+0x8a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007080:	d017      	beq.n	80070b2 <TIM_Base_SetConfig+0x8a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a22      	ldr	r2, [pc, #136]	; (8007110 <TIM_Base_SetConfig+0xe8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d013      	beq.n	80070b2 <TIM_Base_SetConfig+0x8a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a21      	ldr	r2, [pc, #132]	; (8007114 <TIM_Base_SetConfig+0xec>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00f      	beq.n	80070b2 <TIM_Base_SetConfig+0x8a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a20      	ldr	r2, [pc, #128]	; (8007118 <TIM_Base_SetConfig+0xf0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00b      	beq.n	80070b2 <TIM_Base_SetConfig+0x8a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a1f      	ldr	r2, [pc, #124]	; (800711c <TIM_Base_SetConfig+0xf4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d007      	beq.n	80070b2 <TIM_Base_SetConfig+0x8a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <TIM_Base_SetConfig+0xf8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d003      	beq.n	80070b2 <TIM_Base_SetConfig+0x8a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <TIM_Base_SetConfig+0xfc>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d108      	bne.n	80070c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a08      	ldr	r2, [pc, #32]	; (800710c <TIM_Base_SetConfig+0xe4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d103      	bne.n	80070f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	615a      	str	r2, [r3, #20]
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40010000 	.word	0x40010000
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40000c00 	.word	0x40000c00
 800711c:	40014000 	.word	0x40014000
 8007120:	40014400 	.word	0x40014400
 8007124:	40014800 	.word	0x40014800

08007128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e03f      	b.n	80071e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fb fe3c 	bl	8002df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2224      	movs	r2, #36	; 0x24
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fd7f 	bl	8007c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695a      	ldr	r2, [r3, #20]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b08a      	sub	sp, #40	; 0x28
 80071ee:	af02      	add	r7, sp, #8
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	603b      	str	r3, [r7, #0]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b20      	cmp	r3, #32
 8007208:	d17c      	bne.n	8007304 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_UART_Transmit+0x2c>
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e075      	b.n	8007306 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_UART_Transmit+0x3e>
 8007224:	2302      	movs	r3, #2
 8007226:	e06e      	b.n	8007306 <HAL_UART_Transmit+0x11c>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2221      	movs	r2, #33	; 0x21
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800723e:	f7fc f85f 	bl	8003300 <HAL_GetTick>
 8007242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	88fa      	ldrh	r2, [r7, #6]
 800724e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007258:	d108      	bne.n	800726c <HAL_UART_Transmit+0x82>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	e003      	b.n	8007274 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007270:	2300      	movs	r3, #0
 8007272:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800727c:	e02a      	b.n	80072d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	2180      	movs	r1, #128	; 0x80
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fb01 	bl	8007890 <UART_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e036      	b.n	8007306 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10b      	bne.n	80072b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	3302      	adds	r3, #2
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	e007      	b.n	80072c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	3301      	adds	r3, #1
 80072c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1cf      	bne.n	800727e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2200      	movs	r2, #0
 80072e6:	2140      	movs	r1, #64	; 0x40
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 fad1 	bl	8007890 <UART_WaitOnFlagUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e006      	b.n	8007306 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007304:	2302      	movs	r3, #2
  }
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	4613      	mov	r3, r2
 800731a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b20      	cmp	r3, #32
 8007326:	d11d      	bne.n	8007364 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_UART_Receive_DMA+0x26>
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e016      	b.n	8007366 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_UART_Receive_DMA+0x38>
 8007342:	2302      	movs	r3, #2
 8007344:	e00f      	b.n	8007366 <HAL_UART_Receive_DMA+0x58>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	461a      	mov	r2, r3
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fae2 	bl	8007924 <UART_Start_Receive_DMA>
 8007360:	4603      	mov	r3, r0
 8007362:	e000      	b.n	8007366 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007364:	2302      	movs	r3, #2
  }
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	; 0x28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007390:	2300      	movs	r3, #0
 8007392:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10d      	bne.n	80073c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <HAL_UART_IRQHandler+0x52>
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fbd5 	bl	8007b6a <UART_Receive_IT>
      return;
 80073c0:	e17c      	b.n	80076bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 80b1 	beq.w	800752c <HAL_UART_IRQHandler+0x1bc>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <HAL_UART_IRQHandler+0x70>
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 80a6 	beq.w	800752c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <HAL_UART_IRQHandler+0x90>
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	f043 0201 	orr.w	r2, r3, #1
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <HAL_UART_IRQHandler+0xb0>
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	f043 0202 	orr.w	r2, r3, #2
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <HAL_UART_IRQHandler+0xd0>
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	f043 0204 	orr.w	r2, r3, #4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00f      	beq.n	800746a <HAL_UART_IRQHandler+0xfa>
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b00      	cmp	r3, #0
 8007452:	d104      	bne.n	800745e <HAL_UART_IRQHandler+0xee>
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f043 0208 	orr.w	r2, r3, #8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 811f 	beq.w	80076b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <HAL_UART_IRQHandler+0x11e>
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb6e 	bl	8007b6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b40      	cmp	r3, #64	; 0x40
 800749a:	bf0c      	ite	eq
 800749c:	2301      	moveq	r3, #1
 800749e:	2300      	movne	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <HAL_UART_IRQHandler+0x146>
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d031      	beq.n	800751a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 faae 	bl	8007a18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d123      	bne.n	8007512 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	695a      	ldr	r2, [r3, #20]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d013      	beq.n	800750a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	4a77      	ldr	r2, [pc, #476]	; (80076c4 <HAL_UART_IRQHandler+0x354>)
 80074e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fc fd76 	bl	8003fe0 <HAL_DMA_Abort_IT>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d016      	beq.n	8007528 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007508:	e00e      	b.n	8007528 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f8fa 	bl	8007704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007510:	e00a      	b.n	8007528 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f8f6 	bl	8007704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007518:	e006      	b.n	8007528 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8f2 	bl	8007704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007526:	e0c4      	b.n	80076b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007528:	bf00      	nop
    return;
 800752a:	e0c2      	b.n	80076b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	2b01      	cmp	r3, #1
 8007532:	f040 80a2 	bne.w	800767a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 809c 	beq.w	800767a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8096 	beq.w	800767a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d14f      	bne.n	8007612 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800757c:	8a3b      	ldrh	r3, [r7, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 8099 	beq.w	80076b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007588:	8a3a      	ldrh	r2, [r7, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	f080 8093 	bcs.w	80076b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8a3a      	ldrh	r2, [r7, #16]
 8007594:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a0:	d02b      	beq.n	80075fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695a      	ldr	r2, [r3, #20]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695a      	ldr	r2, [r3, #20]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0210 	bic.w	r2, r2, #16
 80075ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fc fc83 	bl	8003f00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007602:	b29b      	uxth	r3, r3
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	b29b      	uxth	r3, r3
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f884 	bl	8007718 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007610:	e051      	b.n	80076b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800761a:	b29b      	uxth	r3, r3
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d047      	beq.n	80076ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800762a:	8a7b      	ldrh	r3, [r7, #18]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d044      	beq.n	80076ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800763e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	695a      	ldr	r2, [r3, #20]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0201 	bic.w	r2, r2, #1
 800764e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0210 	bic.w	r2, r2, #16
 800766c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800766e:	8a7b      	ldrh	r3, [r7, #18]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f850 	bl	8007718 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007678:	e01f      	b.n	80076ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_UART_IRQHandler+0x326>
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa03 	bl	8007a9a <UART_Transmit_IT>
    return;
 8007694:	e012      	b.n	80076bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00d      	beq.n	80076bc <HAL_UART_IRQHandler+0x34c>
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa45 	bl	8007b3a <UART_EndTransmit_IT>
    return;
 80076b0:	e004      	b.n	80076bc <HAL_UART_IRQHandler+0x34c>
    return;
 80076b2:	bf00      	nop
 80076b4:	e002      	b.n	80076bc <HAL_UART_IRQHandler+0x34c>
      return;
 80076b6:	bf00      	nop
 80076b8:	e000      	b.n	80076bc <HAL_UART_IRQHandler+0x34c>
      return;
 80076ba:	bf00      	nop
  }
}
 80076bc:	3728      	adds	r7, #40	; 0x28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	08007a73 	.word	0x08007a73

080076c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007748:	2b00      	cmp	r3, #0
 800774a:	d12a      	bne.n	80077a2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007760:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695a      	ldr	r2, [r3, #20]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0201 	bic.w	r2, r2, #1
 8007770:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695a      	ldr	r2, [r3, #20]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007780:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2220      	movs	r2, #32
 8007786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778e:	2b01      	cmp	r3, #1
 8007790:	d107      	bne.n	80077a2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0210 	bic.w	r2, r2, #16
 80077a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d106      	bne.n	80077b8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077ae:	4619      	mov	r1, r3
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7ff ffb1 	bl	8007718 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077b6:	e002      	b.n	80077be <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f7ff ff8f 	bl	80076dc <HAL_UART_RxCpltCallback>
}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d108      	bne.n	80077ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4619      	mov	r1, r3
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff ff96 	bl	8007718 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077ec:	e002      	b.n	80077f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff ff7e 	bl	80076f0 <HAL_UART_RxHalfCpltCallback>
}
 80077f4:	bf00      	nop
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007818:	2b80      	cmp	r3, #128	; 0x80
 800781a:	bf0c      	ite	eq
 800781c:	2301      	moveq	r3, #1
 800781e:	2300      	movne	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b21      	cmp	r3, #33	; 0x21
 800782e:	d108      	bne.n	8007842 <UART_DMAError+0x46>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2200      	movs	r2, #0
 800783a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800783c:	68b8      	ldr	r0, [r7, #8]
 800783e:	f000 f8d5 	bl	80079ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b40      	cmp	r3, #64	; 0x40
 800784e:	bf0c      	ite	eq
 8007850:	2301      	moveq	r3, #1
 8007852:	2300      	movne	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b22      	cmp	r3, #34	; 0x22
 8007862:	d108      	bne.n	8007876 <UART_DMAError+0x7a>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007870:	68b8      	ldr	r0, [r7, #8]
 8007872:	f000 f8d1 	bl	8007a18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	f043 0210 	orr.w	r2, r3, #16
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007882:	68b8      	ldr	r0, [r7, #8]
 8007884:	f7ff ff3e 	bl	8007704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a0:	e02c      	b.n	80078fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d028      	beq.n	80078fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d007      	beq.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078b0:	f7fb fd26 	bl	8003300 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d21d      	bcs.n	80078fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695a      	ldr	r2, [r3, #20]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e00f      	b.n	800791c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4013      	ands	r3, r2
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	429a      	cmp	r2, r3
 800790a:	bf0c      	ite	eq
 800790c:	2301      	moveq	r3, #1
 800790e:	2300      	movne	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	461a      	mov	r2, r3
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	429a      	cmp	r2, r3
 8007918:	d0c3      	beq.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2222      	movs	r2, #34	; 0x22
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	4a23      	ldr	r2, [pc, #140]	; (80079e0 <UART_Start_Receive_DMA+0xbc>)
 8007952:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	4a22      	ldr	r2, [pc, #136]	; (80079e4 <UART_Start_Receive_DMA+0xc0>)
 800795a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	4a21      	ldr	r2, [pc, #132]	; (80079e8 <UART_Start_Receive_DMA+0xc4>)
 8007962:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	2200      	movs	r2, #0
 800796a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800796c:	f107 0308 	add.w	r3, r7, #8
 8007970:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	f7fc fa64 	bl	8003e50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007988:	2300      	movs	r3, #0
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	613b      	str	r3, [r7, #16]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	613b      	str	r3, [r7, #16]
 800799c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695a      	ldr	r2, [r3, #20]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	695a      	ldr	r2, [r3, #20]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	08007731 	.word	0x08007731
 80079e4:	080077c7 	.word	0x080077c7
 80079e8:	080077fd 	.word	0x080077fd

080079ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007a02:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695a      	ldr	r2, [r3, #20]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d107      	bne.n	8007a58 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0210 	bic.w	r2, r2, #16
 8007a56:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7ff fe39 	bl	8007704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a92:	bf00      	nop
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b21      	cmp	r3, #33	; 0x21
 8007aac:	d13e      	bne.n	8007b2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab6:	d114      	bne.n	8007ae2 <UART_Transmit_IT+0x48>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d110      	bne.n	8007ae2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ad4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	1c9a      	adds	r2, r3, #2
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	621a      	str	r2, [r3, #32]
 8007ae0:	e008      	b.n	8007af4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	1c59      	adds	r1, r3, #1
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6211      	str	r1, [r2, #32]
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	4619      	mov	r1, r3
 8007b02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10f      	bne.n	8007b28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e000      	b.n	8007b2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b2c:	2302      	movs	r3, #2
  }
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff fdb4 	bl	80076c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b22      	cmp	r3, #34	; 0x22
 8007b7c:	f040 8087 	bne.w	8007c8e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b88:	d117      	bne.n	8007bba <UART_Receive_IT+0x50>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d113      	bne.n	8007bba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	1c9a      	adds	r2, r3, #2
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8007bb8:	e026      	b.n	8007c08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bcc:	d007      	beq.n	8007bde <UART_Receive_IT+0x74>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <UART_Receive_IT+0x82>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e008      	b.n	8007bfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	4619      	mov	r1, r3
 8007c16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d136      	bne.n	8007c8a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0220 	bic.w	r2, r2, #32
 8007c2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695a      	ldr	r2, [r3, #20]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0201 	bic.w	r2, r2, #1
 8007c4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d10e      	bne.n	8007c7a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0210 	bic.w	r2, r2, #16
 8007c6a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fd50 	bl	8007718 <HAL_UARTEx_RxEventCallback>
 8007c78:	e002      	b.n	8007c80 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff fd2e 	bl	80076dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e002      	b.n	8007c90 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e000      	b.n	8007c90 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007c8e:	2302      	movs	r3, #2
  }
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	b09f      	sub	sp, #124	; 0x7c
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cae:	68d9      	ldr	r1, [r3, #12]
 8007cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	ea40 0301 	orr.w	r3, r0, r1
 8007cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cdc:	f021 010c 	bic.w	r1, r1, #12
 8007ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce6:	430b      	orrs	r3, r1
 8007ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf6:	6999      	ldr	r1, [r3, #24]
 8007cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	ea40 0301 	orr.w	r3, r0, r1
 8007d00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4bc5      	ldr	r3, [pc, #788]	; (800801c <UART_SetConfig+0x384>)
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d004      	beq.n	8007d16 <UART_SetConfig+0x7e>
 8007d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4bc3      	ldr	r3, [pc, #780]	; (8008020 <UART_SetConfig+0x388>)
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d103      	bne.n	8007d1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d16:	f7fe f9ad 	bl	8006074 <HAL_RCC_GetPCLK2Freq>
 8007d1a:	6778      	str	r0, [r7, #116]	; 0x74
 8007d1c:	e002      	b.n	8007d24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d1e:	f7fe f995 	bl	800604c <HAL_RCC_GetPCLK1Freq>
 8007d22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d2c:	f040 80b6 	bne.w	8007e9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d32:	461c      	mov	r4, r3
 8007d34:	f04f 0500 	mov.w	r5, #0
 8007d38:	4622      	mov	r2, r4
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	1891      	adds	r1, r2, r2
 8007d3e:	6439      	str	r1, [r7, #64]	; 0x40
 8007d40:	415b      	adcs	r3, r3
 8007d42:	647b      	str	r3, [r7, #68]	; 0x44
 8007d44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d48:	1912      	adds	r2, r2, r4
 8007d4a:	eb45 0303 	adc.w	r3, r5, r3
 8007d4e:	f04f 0000 	mov.w	r0, #0
 8007d52:	f04f 0100 	mov.w	r1, #0
 8007d56:	00d9      	lsls	r1, r3, #3
 8007d58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d5c:	00d0      	lsls	r0, r2, #3
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	1911      	adds	r1, r2, r4
 8007d64:	6639      	str	r1, [r7, #96]	; 0x60
 8007d66:	416b      	adcs	r3, r5
 8007d68:	667b      	str	r3, [r7, #100]	; 0x64
 8007d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	1891      	adds	r1, r2, r2
 8007d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d78:	415b      	adcs	r3, r3
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007d84:	f7f8 ff88 	bl	8000c98 <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4ba5      	ldr	r3, [pc, #660]	; (8008024 <UART_SetConfig+0x38c>)
 8007d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	011e      	lsls	r6, r3, #4
 8007d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d98:	461c      	mov	r4, r3
 8007d9a:	f04f 0500 	mov.w	r5, #0
 8007d9e:	4622      	mov	r2, r4
 8007da0:	462b      	mov	r3, r5
 8007da2:	1891      	adds	r1, r2, r2
 8007da4:	6339      	str	r1, [r7, #48]	; 0x30
 8007da6:	415b      	adcs	r3, r3
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
 8007daa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007dae:	1912      	adds	r2, r2, r4
 8007db0:	eb45 0303 	adc.w	r3, r5, r3
 8007db4:	f04f 0000 	mov.w	r0, #0
 8007db8:	f04f 0100 	mov.w	r1, #0
 8007dbc:	00d9      	lsls	r1, r3, #3
 8007dbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dc2:	00d0      	lsls	r0, r2, #3
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	1911      	adds	r1, r2, r4
 8007dca:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dcc:	416b      	adcs	r3, r5
 8007dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f04f 0300 	mov.w	r3, #0
 8007dda:	1891      	adds	r1, r2, r2
 8007ddc:	62b9      	str	r1, [r7, #40]	; 0x28
 8007dde:	415b      	adcs	r3, r3
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007de6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007dea:	f7f8 ff55 	bl	8000c98 <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4b8c      	ldr	r3, [pc, #560]	; (8008024 <UART_SetConfig+0x38c>)
 8007df4:	fba3 1302 	umull	r1, r3, r3, r2
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	2164      	movs	r1, #100	; 0x64
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	3332      	adds	r3, #50	; 0x32
 8007e06:	4a87      	ldr	r2, [pc, #540]	; (8008024 <UART_SetConfig+0x38c>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e14:	441e      	add	r6, r3
 8007e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	1894      	adds	r4, r2, r2
 8007e24:	623c      	str	r4, [r7, #32]
 8007e26:	415b      	adcs	r3, r3
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
 8007e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e2e:	1812      	adds	r2, r2, r0
 8007e30:	eb41 0303 	adc.w	r3, r1, r3
 8007e34:	f04f 0400 	mov.w	r4, #0
 8007e38:	f04f 0500 	mov.w	r5, #0
 8007e3c:	00dd      	lsls	r5, r3, #3
 8007e3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e42:	00d4      	lsls	r4, r2, #3
 8007e44:	4622      	mov	r2, r4
 8007e46:	462b      	mov	r3, r5
 8007e48:	1814      	adds	r4, r2, r0
 8007e4a:	653c      	str	r4, [r7, #80]	; 0x50
 8007e4c:	414b      	adcs	r3, r1
 8007e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	461a      	mov	r2, r3
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	1891      	adds	r1, r2, r2
 8007e5c:	61b9      	str	r1, [r7, #24]
 8007e5e:	415b      	adcs	r3, r3
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e6a:	f7f8 ff15 	bl	8000c98 <__aeabi_uldivmod>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4b6c      	ldr	r3, [pc, #432]	; (8008024 <UART_SetConfig+0x38c>)
 8007e74:	fba3 1302 	umull	r1, r3, r3, r2
 8007e78:	095b      	lsrs	r3, r3, #5
 8007e7a:	2164      	movs	r1, #100	; 0x64
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	3332      	adds	r3, #50	; 0x32
 8007e86:	4a67      	ldr	r2, [pc, #412]	; (8008024 <UART_SetConfig+0x38c>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	f003 0207 	and.w	r2, r3, #7
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4432      	add	r2, r6
 8007e98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e9a:	e0b9      	b.n	8008010 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e9e:	461c      	mov	r4, r3
 8007ea0:	f04f 0500 	mov.w	r5, #0
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	1891      	adds	r1, r2, r2
 8007eaa:	6139      	str	r1, [r7, #16]
 8007eac:	415b      	adcs	r3, r3
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007eb4:	1912      	adds	r2, r2, r4
 8007eb6:	eb45 0303 	adc.w	r3, r5, r3
 8007eba:	f04f 0000 	mov.w	r0, #0
 8007ebe:	f04f 0100 	mov.w	r1, #0
 8007ec2:	00d9      	lsls	r1, r3, #3
 8007ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ec8:	00d0      	lsls	r0, r2, #3
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	eb12 0804 	adds.w	r8, r2, r4
 8007ed2:	eb43 0905 	adc.w	r9, r3, r5
 8007ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f04f 0100 	mov.w	r1, #0
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	008b      	lsls	r3, r1, #2
 8007eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007eee:	0082      	lsls	r2, r0, #2
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 fed0 	bl	8000c98 <__aeabi_uldivmod>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4b49      	ldr	r3, [pc, #292]	; (8008024 <UART_SetConfig+0x38c>)
 8007efe:	fba3 2302 	umull	r2, r3, r3, r2
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	011e      	lsls	r6, r3, #4
 8007f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f04f 0100 	mov.w	r1, #0
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	1894      	adds	r4, r2, r2
 8007f14:	60bc      	str	r4, [r7, #8]
 8007f16:	415b      	adcs	r3, r3
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f1e:	1812      	adds	r2, r2, r0
 8007f20:	eb41 0303 	adc.w	r3, r1, r3
 8007f24:	f04f 0400 	mov.w	r4, #0
 8007f28:	f04f 0500 	mov.w	r5, #0
 8007f2c:	00dd      	lsls	r5, r3, #3
 8007f2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f32:	00d4      	lsls	r4, r2, #3
 8007f34:	4622      	mov	r2, r4
 8007f36:	462b      	mov	r3, r5
 8007f38:	1814      	adds	r4, r2, r0
 8007f3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f3c:	414b      	adcs	r3, r1
 8007f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f04f 0100 	mov.w	r1, #0
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	008b      	lsls	r3, r1, #2
 8007f54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f58:	0082      	lsls	r2, r0, #2
 8007f5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f5e:	f7f8 fe9b 	bl	8000c98 <__aeabi_uldivmod>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4b2f      	ldr	r3, [pc, #188]	; (8008024 <UART_SetConfig+0x38c>)
 8007f68:	fba3 1302 	umull	r1, r3, r3, r2
 8007f6c:	095b      	lsrs	r3, r3, #5
 8007f6e:	2164      	movs	r1, #100	; 0x64
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	3332      	adds	r3, #50	; 0x32
 8007f7a:	4a2a      	ldr	r2, [pc, #168]	; (8008024 <UART_SetConfig+0x38c>)
 8007f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f86:	441e      	add	r6, r3
 8007f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f04f 0100 	mov.w	r1, #0
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	1894      	adds	r4, r2, r2
 8007f96:	603c      	str	r4, [r7, #0]
 8007f98:	415b      	adcs	r3, r3
 8007f9a:	607b      	str	r3, [r7, #4]
 8007f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa0:	1812      	adds	r2, r2, r0
 8007fa2:	eb41 0303 	adc.w	r3, r1, r3
 8007fa6:	f04f 0400 	mov.w	r4, #0
 8007faa:	f04f 0500 	mov.w	r5, #0
 8007fae:	00dd      	lsls	r5, r3, #3
 8007fb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fb4:	00d4      	lsls	r4, r2, #3
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	462b      	mov	r3, r5
 8007fba:	eb12 0a00 	adds.w	sl, r2, r0
 8007fbe:	eb43 0b01 	adc.w	fp, r3, r1
 8007fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f04f 0100 	mov.w	r1, #0
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	008b      	lsls	r3, r1, #2
 8007fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007fda:	0082      	lsls	r2, r0, #2
 8007fdc:	4650      	mov	r0, sl
 8007fde:	4659      	mov	r1, fp
 8007fe0:	f7f8 fe5a 	bl	8000c98 <__aeabi_uldivmod>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <UART_SetConfig+0x38c>)
 8007fea:	fba3 1302 	umull	r1, r3, r3, r2
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	2164      	movs	r1, #100	; 0x64
 8007ff2:	fb01 f303 	mul.w	r3, r1, r3
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	3332      	adds	r3, #50	; 0x32
 8007ffc:	4a09      	ldr	r2, [pc, #36]	; (8008024 <UART_SetConfig+0x38c>)
 8007ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	f003 020f 	and.w	r2, r3, #15
 8008008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4432      	add	r2, r6
 800800e:	609a      	str	r2, [r3, #8]
}
 8008010:	bf00      	nop
 8008012:	377c      	adds	r7, #124	; 0x7c
 8008014:	46bd      	mov	sp, r7
 8008016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801a:	bf00      	nop
 800801c:	40011000 	.word	0x40011000
 8008020:	40011400 	.word	0x40011400
 8008024:	51eb851f 	.word	0x51eb851f

08008028 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800802c:	4904      	ldr	r1, [pc, #16]	; (8008040 <MX_FATFS_Init+0x18>)
 800802e:	4805      	ldr	r0, [pc, #20]	; (8008044 <MX_FATFS_Init+0x1c>)
 8008030:	f002 fd2e 	bl	800aa90 <FATFS_LinkDriver>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	4b03      	ldr	r3, [pc, #12]	; (8008048 <MX_FATFS_Init+0x20>)
 800803a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800803c:	bf00      	nop
 800803e:	bd80      	pop	{r7, pc}
 8008040:	2000569c 	.word	0x2000569c
 8008044:	20000010 	.word	0x20000010
 8008048:	200056a0 	.word	0x200056a0

0800804c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008050:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008052:	4618      	mov	r0, r3
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008066:	4b06      	ldr	r3, [pc, #24]	; (8008080 <USER_initialize+0x24>)
 8008068:	2201      	movs	r2, #1
 800806a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800806c:	4b04      	ldr	r3, [pc, #16]	; (8008080 <USER_initialize+0x24>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	2000000d 	.word	0x2000000d

08008084 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800808e:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <USER_status+0x24>)
 8008090:	2201      	movs	r2, #1
 8008092:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008094:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <USER_status+0x24>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	2000000d 	.word	0x2000000d

080080ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	607a      	str	r2, [r7, #4]
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80080bc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4603      	mov	r3, r0
 80080d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80080da:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	603a      	str	r2, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
 80080f4:	460b      	mov	r3, r1
 80080f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
    return res;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	4a08      	ldr	r2, [pc, #32]	; (800813c <disk_status+0x30>)
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	79fa      	ldrb	r2, [r7, #7]
 8008124:	4905      	ldr	r1, [pc, #20]	; (800813c <disk_status+0x30>)
 8008126:	440a      	add	r2, r1
 8008128:	7a12      	ldrb	r2, [r2, #8]
 800812a:	4610      	mov	r0, r2
 800812c:	4798      	blx	r3
 800812e:	4603      	mov	r3, r0
 8008130:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008132:	7bfb      	ldrb	r3, [r7, #15]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20000360 	.word	0x20000360

08008140 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	4a0d      	ldr	r2, [pc, #52]	; (8008188 <disk_initialize+0x48>)
 8008152:	5cd3      	ldrb	r3, [r2, r3]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d111      	bne.n	800817c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	4a0b      	ldr	r2, [pc, #44]	; (8008188 <disk_initialize+0x48>)
 800815c:	2101      	movs	r1, #1
 800815e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	4a09      	ldr	r2, [pc, #36]	; (8008188 <disk_initialize+0x48>)
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	79fa      	ldrb	r2, [r7, #7]
 800816e:	4906      	ldr	r1, [pc, #24]	; (8008188 <disk_initialize+0x48>)
 8008170:	440a      	add	r2, r1
 8008172:	7a12      	ldrb	r2, [r2, #8]
 8008174:	4610      	mov	r0, r2
 8008176:	4798      	blx	r3
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000360 	.word	0x20000360

0800818c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800818c:	b590      	push	{r4, r7, lr}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4a0a      	ldr	r2, [pc, #40]	; (80081c8 <disk_read+0x3c>)
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	689c      	ldr	r4, [r3, #8]
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	4a07      	ldr	r2, [pc, #28]	; (80081c8 <disk_read+0x3c>)
 80081ac:	4413      	add	r3, r2
 80081ae:	7a18      	ldrb	r0, [r3, #8]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	47a0      	blx	r4
 80081b8:	4603      	mov	r3, r0
 80081ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd90      	pop	{r4, r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000360 	.word	0x20000360

080081cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80081cc:	b590      	push	{r4, r7, lr}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	4a0a      	ldr	r2, [pc, #40]	; (8008208 <disk_write+0x3c>)
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	68dc      	ldr	r4, [r3, #12]
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	4a07      	ldr	r2, [pc, #28]	; (8008208 <disk_write+0x3c>)
 80081ec:	4413      	add	r3, r2
 80081ee:	7a18      	ldrb	r0, [r3, #8]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	47a0      	blx	r4
 80081f8:	4603      	mov	r3, r0
 80081fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	bd90      	pop	{r4, r7, pc}
 8008206:	bf00      	nop
 8008208:	20000360 	.word	0x20000360

0800820c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	603a      	str	r2, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
 8008218:	460b      	mov	r3, r1
 800821a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <disk_ioctl+0x38>)
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	79fa      	ldrb	r2, [r7, #7]
 800822a:	4906      	ldr	r1, [pc, #24]	; (8008244 <disk_ioctl+0x38>)
 800822c:	440a      	add	r2, r1
 800822e:	7a10      	ldrb	r0, [r2, #8]
 8008230:	79b9      	ldrb	r1, [r7, #6]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4798      	blx	r3
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]
  return res;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20000360 	.word	0x20000360

08008248 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3301      	adds	r3, #1
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008258:	89fb      	ldrh	r3, [r7, #14]
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	b21a      	sxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b21b      	sxth	r3, r3
 8008264:	4313      	orrs	r3, r2
 8008266:	b21b      	sxth	r3, r3
 8008268:	81fb      	strh	r3, [r7, #14]
	return rv;
 800826a:	89fb      	ldrh	r3, [r7, #14]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3303      	adds	r3, #3
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	3202      	adds	r2, #2
 8008290:	7812      	ldrb	r2, [r2, #0]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	3201      	adds	r2, #1
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80082b0:	68fb      	ldr	r3, [r7, #12]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	887a      	ldrh	r2, [r7, #2]
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	887b      	ldrh	r3, [r7, #2]
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	887a      	ldrh	r2, [r7, #2]
 80082e4:	b2d2      	uxtb	r2, r2
 80082e6:	701a      	strb	r2, [r3, #0]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	0a1b      	lsrs	r3, r3, #8
 800830e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	607a      	str	r2, [r7, #4]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	b2d2      	uxtb	r2, r2
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	b2d2      	uxtb	r2, r2
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	0a1b      	lsrs	r3, r3, #8
 8008332:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	701a      	strb	r2, [r3, #0]
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00d      	beq.n	8008382 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	1c53      	adds	r3, r2, #1
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	1c59      	adds	r1, r3, #1
 8008370:	6179      	str	r1, [r7, #20]
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3b01      	subs	r3, #1
 800837a:	607b      	str	r3, [r7, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f1      	bne.n	8008366 <mem_cpy+0x1a>
	}
}
 8008382:	bf00      	nop
 8008384:	371c      	adds	r7, #28
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800838e:	b480      	push	{r7}
 8008390:	b087      	sub	sp, #28
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	617a      	str	r2, [r7, #20]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	607b      	str	r3, [r7, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f3      	bne.n	800839e <mem_set+0x10>
}
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80083c4:	b480      	push	{r7}
 80083c6:	b089      	sub	sp, #36	; 0x24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	61fa      	str	r2, [r7, #28]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	4619      	mov	r1, r3
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	61ba      	str	r2, [r7, #24]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	1acb      	subs	r3, r1, r3
 80083f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	607b      	str	r3, [r7, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <mem_cmp+0x40>
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0eb      	beq.n	80083dc <mem_cmp+0x18>

	return r;
 8008404:	697b      	ldr	r3, [r7, #20]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3724      	adds	r7, #36	; 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800841c:	e002      	b.n	8008424 <chk_chr+0x12>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3301      	adds	r3, #1
 8008422:	607b      	str	r3, [r7, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <chk_chr+0x26>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	4293      	cmp	r3, r2
 8008436:	d1f2      	bne.n	800841e <chk_chr+0xc>
	return *str;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	781b      	ldrb	r3, [r3, #0]
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d009      	beq.n	800846a <lock_fs+0x22>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	4618      	mov	r0, r3
 800845c:	f002 fb4e 	bl	800aafc <ff_req_grant>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <lock_fs+0x22>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <lock_fs+0x24>
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00d      	beq.n	80084a2 <unlock_fs+0x2e>
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	2b0c      	cmp	r3, #12
 800848a:	d00a      	beq.n	80084a2 <unlock_fs+0x2e>
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	2b0b      	cmp	r3, #11
 8008490:	d007      	beq.n	80084a2 <unlock_fs+0x2e>
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	2b0f      	cmp	r3, #15
 8008496:	d004      	beq.n	80084a2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	4618      	mov	r0, r3
 800849e:	f002 fb42 	bl	800ab26 <ff_rel_grant>
	}
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80084b6:	2300      	movs	r3, #0
 80084b8:	60bb      	str	r3, [r7, #8]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	60fb      	str	r3, [r7, #12]
 80084be:	e029      	b.n	8008514 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80084c0:	4a27      	ldr	r2, [pc, #156]	; (8008560 <chk_lock+0xb4>)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	4413      	add	r3, r2
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d01d      	beq.n	800850a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084ce:	4a24      	ldr	r2, [pc, #144]	; (8008560 <chk_lock+0xb4>)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	4413      	add	r3, r2
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d116      	bne.n	800850e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80084e0:	4a1f      	ldr	r2, [pc, #124]	; (8008560 <chk_lock+0xb4>)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	4413      	add	r3, r2
 80084e8:	3304      	adds	r3, #4
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d10c      	bne.n	800850e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084f4:	4a1a      	ldr	r2, [pc, #104]	; (8008560 <chk_lock+0xb4>)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	4413      	add	r3, r2
 80084fc:	3308      	adds	r3, #8
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008504:	429a      	cmp	r2, r3
 8008506:	d102      	bne.n	800850e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008508:	e007      	b.n	800851a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d9d2      	bls.n	80084c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d109      	bne.n	8008534 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <chk_lock+0x80>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d101      	bne.n	8008530 <chk_lock+0x84>
 800852c:	2300      	movs	r3, #0
 800852e:	e010      	b.n	8008552 <chk_lock+0xa6>
 8008530:	2312      	movs	r3, #18
 8008532:	e00e      	b.n	8008552 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d108      	bne.n	800854c <chk_lock+0xa0>
 800853a:	4a09      	ldr	r2, [pc, #36]	; (8008560 <chk_lock+0xb4>)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	4413      	add	r3, r2
 8008542:	330c      	adds	r3, #12
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d101      	bne.n	8008550 <chk_lock+0xa4>
 800854c:	2310      	movs	r3, #16
 800854e:	e000      	b.n	8008552 <chk_lock+0xa6>
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000340 	.word	0x20000340

08008564 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800856a:	2300      	movs	r3, #0
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	e002      	b.n	8008576 <enq_lock+0x12>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	607b      	str	r3, [r7, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d806      	bhi.n	800858a <enq_lock+0x26>
 800857c:	4a09      	ldr	r2, [pc, #36]	; (80085a4 <enq_lock+0x40>)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	4413      	add	r3, r2
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1f2      	bne.n	8008570 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b02      	cmp	r3, #2
 800858e:	bf14      	ite	ne
 8008590:	2301      	movne	r3, #1
 8008592:	2300      	moveq	r3, #0
 8008594:	b2db      	uxtb	r3, r3
}
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	20000340 	.word	0x20000340

080085a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	e01f      	b.n	80085f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80085b8:	4a41      	ldr	r2, [pc, #260]	; (80086c0 <inc_lock+0x118>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	4413      	add	r3, r2
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d113      	bne.n	80085f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80085ca:	4a3d      	ldr	r2, [pc, #244]	; (80086c0 <inc_lock+0x118>)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	4413      	add	r3, r2
 80085d2:	3304      	adds	r3, #4
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80085da:	429a      	cmp	r2, r3
 80085dc:	d109      	bne.n	80085f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80085de:	4a38      	ldr	r2, [pc, #224]	; (80086c0 <inc_lock+0x118>)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	4413      	add	r3, r2
 80085e6:	3308      	adds	r3, #8
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d006      	beq.n	8008600 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3301      	adds	r3, #1
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d9dc      	bls.n	80085b8 <inc_lock+0x10>
 80085fe:	e000      	b.n	8008602 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008600:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d132      	bne.n	800866e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	e002      	b.n	8008614 <inc_lock+0x6c>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3301      	adds	r3, #1
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d806      	bhi.n	8008628 <inc_lock+0x80>
 800861a:	4a29      	ldr	r2, [pc, #164]	; (80086c0 <inc_lock+0x118>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	4413      	add	r3, r2
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1f2      	bne.n	800860e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d101      	bne.n	8008632 <inc_lock+0x8a>
 800862e:	2300      	movs	r3, #0
 8008630:	e040      	b.n	80086b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	4922      	ldr	r1, [pc, #136]	; (80086c0 <inc_lock+0x118>)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	440b      	add	r3, r1
 800863e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	491e      	ldr	r1, [pc, #120]	; (80086c0 <inc_lock+0x118>)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	440b      	add	r3, r1
 800864c:	3304      	adds	r3, #4
 800864e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	695a      	ldr	r2, [r3, #20]
 8008654:	491a      	ldr	r1, [pc, #104]	; (80086c0 <inc_lock+0x118>)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	440b      	add	r3, r1
 800865c:	3308      	adds	r3, #8
 800865e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008660:	4a17      	ldr	r2, [pc, #92]	; (80086c0 <inc_lock+0x118>)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	4413      	add	r3, r2
 8008668:	330c      	adds	r3, #12
 800866a:	2200      	movs	r2, #0
 800866c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d009      	beq.n	8008688 <inc_lock+0xe0>
 8008674:	4a12      	ldr	r2, [pc, #72]	; (80086c0 <inc_lock+0x118>)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	4413      	add	r3, r2
 800867c:	330c      	adds	r3, #12
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <inc_lock+0xe0>
 8008684:	2300      	movs	r3, #0
 8008686:	e015      	b.n	80086b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d108      	bne.n	80086a0 <inc_lock+0xf8>
 800868e:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <inc_lock+0x118>)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	4413      	add	r3, r2
 8008696:	330c      	adds	r3, #12
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	3301      	adds	r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	e001      	b.n	80086a4 <inc_lock+0xfc>
 80086a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086a4:	4906      	ldr	r1, [pc, #24]	; (80086c0 <inc_lock+0x118>)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	440b      	add	r3, r1
 80086ac:	330c      	adds	r3, #12
 80086ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20000340 	.word	0x20000340

080086c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	607b      	str	r3, [r7, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d825      	bhi.n	8008724 <dec_lock+0x60>
		n = Files[i].ctr;
 80086d8:	4a17      	ldr	r2, [pc, #92]	; (8008738 <dec_lock+0x74>)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	4413      	add	r3, r2
 80086e0:	330c      	adds	r3, #12
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80086e6:	89fb      	ldrh	r3, [r7, #14]
 80086e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ec:	d101      	bne.n	80086f2 <dec_lock+0x2e>
 80086ee:	2300      	movs	r3, #0
 80086f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80086f2:	89fb      	ldrh	r3, [r7, #14]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <dec_lock+0x3a>
 80086f8:	89fb      	ldrh	r3, [r7, #14]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80086fe:	4a0e      	ldr	r2, [pc, #56]	; (8008738 <dec_lock+0x74>)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	4413      	add	r3, r2
 8008706:	330c      	adds	r3, #12
 8008708:	89fa      	ldrh	r2, [r7, #14]
 800870a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800870c:	89fb      	ldrh	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d105      	bne.n	800871e <dec_lock+0x5a>
 8008712:	4a09      	ldr	r2, [pc, #36]	; (8008738 <dec_lock+0x74>)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	4413      	add	r3, r2
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	737b      	strb	r3, [r7, #13]
 8008722:	e001      	b.n	8008728 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008724:	2302      	movs	r3, #2
 8008726:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008728:	7b7b      	ldrb	r3, [r7, #13]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000340 	.word	0x20000340

0800873c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	e010      	b.n	800876c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800874a:	4a0d      	ldr	r2, [pc, #52]	; (8008780 <clear_lock+0x44>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	4413      	add	r3, r2
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	d105      	bne.n	8008766 <clear_lock+0x2a>
 800875a:	4a09      	ldr	r2, [pc, #36]	; (8008780 <clear_lock+0x44>)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	4413      	add	r3, r2
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3301      	adds	r3, #1
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d9eb      	bls.n	800874a <clear_lock+0xe>
	}
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	20000340 	.word	0x20000340

08008784 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	78db      	ldrb	r3, [r3, #3]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d034      	beq.n	8008802 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7858      	ldrb	r0, [r3, #1]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087a8:	2301      	movs	r3, #1
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	f7ff fd0e 	bl	80081cc <disk_write>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	73fb      	strb	r3, [r7, #15]
 80087ba:	e022      	b.n	8008802 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	1ad2      	subs	r2, r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d217      	bcs.n	8008802 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	789b      	ldrb	r3, [r3, #2]
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	e010      	b.n	80087fc <sync_window+0x78>
					wsect += fs->fsize;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	4413      	add	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	7858      	ldrb	r0, [r3, #1]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087ee:	2301      	movs	r3, #1
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	f7ff fceb 	bl	80081cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	613b      	str	r3, [r7, #16]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d8eb      	bhi.n	80087da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	429a      	cmp	r2, r3
 8008822:	d01b      	beq.n	800885c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ffad 	bl	8008784 <sync_window>
 800882a:	4603      	mov	r3, r0
 800882c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d113      	bne.n	800885c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7858      	ldrb	r0, [r3, #1]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800883e:	2301      	movs	r3, #1
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	f7ff fca3 	bl	800818c <disk_read>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800884c:	f04f 33ff 	mov.w	r3, #4294967295
 8008850:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008852:	2301      	movs	r3, #1
 8008854:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff ff87 	bl	8008784 <sync_window>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d158      	bne.n	8008932 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d148      	bne.n	800891a <sync_fs+0xb2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	791b      	ldrb	r3, [r3, #4]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d144      	bne.n	800891a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3334      	adds	r3, #52	; 0x34
 8008894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff fd77 	bl	800838e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3334      	adds	r3, #52	; 0x34
 80088a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80088a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff fd06 	bl	80082be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3334      	adds	r3, #52	; 0x34
 80088b6:	4921      	ldr	r1, [pc, #132]	; (800893c <sync_fs+0xd4>)
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff fd1b 	bl	80082f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3334      	adds	r3, #52	; 0x34
 80088c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80088c6:	491e      	ldr	r1, [pc, #120]	; (8008940 <sync_fs+0xd8>)
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fd13 	bl	80082f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3334      	adds	r3, #52	; 0x34
 80088d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	4619      	mov	r1, r3
 80088dc:	4610      	mov	r0, r2
 80088de:	f7ff fd09 	bl	80082f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3334      	adds	r3, #52	; 0x34
 80088e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	4619      	mov	r1, r3
 80088f0:	4610      	mov	r0, r2
 80088f2:	f7ff fcff 	bl	80082f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7858      	ldrb	r0, [r3, #1]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800890e:	2301      	movs	r3, #1
 8008910:	f7ff fc5c 	bl	80081cc <disk_write>
			fs->fsi_flag = 0;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	785b      	ldrb	r3, [r3, #1]
 800891e:	2200      	movs	r2, #0
 8008920:	2100      	movs	r1, #0
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff fc72 	bl	800820c <disk_ioctl>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <sync_fs+0xca>
 800892e:	2301      	movs	r3, #1
 8008930:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	41615252 	.word	0x41615252
 8008940:	61417272 	.word	0x61417272

08008944 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	3b02      	subs	r3, #2
 8008952:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	3b02      	subs	r3, #2
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d301      	bcc.n	8008964 <clust2sect+0x20>
 8008960:	2300      	movs	r3, #0
 8008962:	e008      	b.n	8008976 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	895b      	ldrh	r3, [r3, #10]
 8008968:	461a      	mov	r2, r3
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	fb03 f202 	mul.w	r2, r3, r2
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	4413      	add	r3, r2
}
 8008976:	4618      	mov	r0, r3
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b086      	sub	sp, #24
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d904      	bls.n	80089a2 <get_fat+0x20>
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d302      	bcc.n	80089a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80089a2:	2301      	movs	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	e08f      	b.n	8008ac8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80089a8:	f04f 33ff 	mov.w	r3, #4294967295
 80089ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d062      	beq.n	8008a7c <get_fat+0xfa>
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	dc7c      	bgt.n	8008ab4 <get_fat+0x132>
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d002      	beq.n	80089c4 <get_fat+0x42>
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d042      	beq.n	8008a48 <get_fat+0xc6>
 80089c2:	e077      	b.n	8008ab4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	0a5b      	lsrs	r3, r3, #9
 80089da:	4413      	add	r3, r2
 80089dc:	4619      	mov	r1, r3
 80089de:	6938      	ldr	r0, [r7, #16]
 80089e0:	f7ff ff14 	bl	800880c <move_window>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d167      	bne.n	8008aba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	60fa      	str	r2, [r7, #12]
 80089f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	4413      	add	r3, r2
 80089f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	0a5b      	lsrs	r3, r3, #9
 8008a06:	4413      	add	r3, r2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6938      	ldr	r0, [r7, #16]
 8008a0c:	f7ff fefe 	bl	800880c <move_window>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d153      	bne.n	8008abe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a24:	021b      	lsls	r3, r3, #8
 8008a26:	461a      	mov	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <get_fat+0xbc>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	091b      	lsrs	r3, r3, #4
 8008a3c:	e002      	b.n	8008a44 <get_fat+0xc2>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a44:	617b      	str	r3, [r7, #20]
			break;
 8008a46:	e03f      	b.n	8008ac8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	0a1b      	lsrs	r3, r3, #8
 8008a50:	4413      	add	r3, r2
 8008a52:	4619      	mov	r1, r3
 8008a54:	6938      	ldr	r0, [r7, #16]
 8008a56:	f7ff fed9 	bl	800880c <move_window>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d130      	bne.n	8008ac2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008a6e:	4413      	add	r3, r2
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fbe9 	bl	8008248 <ld_word>
 8008a76:	4603      	mov	r3, r0
 8008a78:	617b      	str	r3, [r7, #20]
			break;
 8008a7a:	e025      	b.n	8008ac8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	09db      	lsrs	r3, r3, #7
 8008a84:	4413      	add	r3, r2
 8008a86:	4619      	mov	r1, r3
 8008a88:	6938      	ldr	r0, [r7, #16]
 8008a8a:	f7ff febf 	bl	800880c <move_window>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d118      	bne.n	8008ac6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008aa2:	4413      	add	r3, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fbe7 	bl	8008278 <ld_dword>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ab0:	617b      	str	r3, [r7, #20]
			break;
 8008ab2:	e009      	b.n	8008ac8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	e006      	b.n	8008ac8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008aba:	bf00      	nop
 8008abc:	e004      	b.n	8008ac8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008abe:	bf00      	nop
 8008ac0:	e002      	b.n	8008ac8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ac2:	bf00      	nop
 8008ac4:	e000      	b.n	8008ac8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ac6:	bf00      	nop
		}
	}

	return val;
 8008ac8:	697b      	ldr	r3, [r7, #20]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008ad2:	b590      	push	{r4, r7, lr}
 8008ad4:	b089      	sub	sp, #36	; 0x24
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	f240 80d2 	bls.w	8008c8e <put_fat+0x1bc>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	f080 80cc 	bcs.w	8008c8e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	f000 8096 	beq.w	8008c2c <put_fat+0x15a>
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	f300 80cd 	bgt.w	8008ca0 <put_fat+0x1ce>
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d002      	beq.n	8008b10 <put_fat+0x3e>
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d06e      	beq.n	8008bec <put_fat+0x11a>
 8008b0e:	e0c7      	b.n	8008ca0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	0a5b      	lsrs	r3, r3, #9
 8008b26:	4413      	add	r3, r2
 8008b28:	4619      	mov	r1, r3
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f7ff fe6e 	bl	800880c <move_window>
 8008b30:	4603      	mov	r3, r0
 8008b32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b34:	7ffb      	ldrb	r3, [r7, #31]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f040 80ab 	bne.w	8008c92 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	1c59      	adds	r1, r3, #1
 8008b46:	61b9      	str	r1, [r7, #24]
 8008b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4c:	4413      	add	r3, r2
 8008b4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00d      	beq.n	8008b76 <put_fat+0xa4>
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	b25b      	sxtb	r3, r3
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	b25a      	sxtb	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	011b      	lsls	r3, r3, #4
 8008b6c:	b25b      	sxtb	r3, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b25b      	sxtb	r3, r3
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	e001      	b.n	8008b7a <put_fat+0xa8>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	0a5b      	lsrs	r3, r3, #9
 8008b8c:	4413      	add	r3, r2
 8008b8e:	4619      	mov	r1, r3
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f7ff fe3b 	bl	800880c <move_window>
 8008b96:	4603      	mov	r3, r0
 8008b98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b9a:	7ffb      	ldrb	r3, [r7, #31]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d17a      	bne.n	8008c96 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bac:	4413      	add	r3, r2
 8008bae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <put_fat+0xf0>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	091b      	lsrs	r3, r3, #4
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	e00e      	b.n	8008be0 <put_fat+0x10e>
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	b25b      	sxtb	r3, r3
 8008bc8:	f023 030f 	bic.w	r3, r3, #15
 8008bcc:	b25a      	sxtb	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	0a1b      	lsrs	r3, r3, #8
 8008bd2:	b25b      	sxtb	r3, r3
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	b25b      	sxtb	r3, r3
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	b25b      	sxtb	r3, r3
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	697a      	ldr	r2, [r7, #20]
 8008be2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	70da      	strb	r2, [r3, #3]
			break;
 8008bea:	e059      	b.n	8008ca0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fe07 	bl	800880c <move_window>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c02:	7ffb      	ldrb	r3, [r7, #31]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d148      	bne.n	8008c9a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008c16:	4413      	add	r3, r2
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	b292      	uxth	r2, r2
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fb4d 	bl	80082be <st_word>
			fs->wflag = 1;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	70da      	strb	r2, [r3, #3]
			break;
 8008c2a:	e039      	b.n	8008ca0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	09db      	lsrs	r3, r3, #7
 8008c34:	4413      	add	r3, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f7ff fde7 	bl	800880c <move_window>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c42:	7ffb      	ldrb	r3, [r7, #31]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d12a      	bne.n	8008c9e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c5c:	4413      	add	r3, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff fb0a 	bl	8008278 <ld_dword>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c6a:	4323      	orrs	r3, r4
 8008c6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c7c:	4413      	add	r3, r2
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fb37 	bl	80082f4 <st_dword>
			fs->wflag = 1;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	70da      	strb	r2, [r3, #3]
			break;
 8008c8c:	e008      	b.n	8008ca0 <put_fat+0x1ce>
		}
	}
 8008c8e:	bf00      	nop
 8008c90:	e006      	b.n	8008ca0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c92:	bf00      	nop
 8008c94:	e004      	b.n	8008ca0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c96:	bf00      	nop
 8008c98:	e002      	b.n	8008ca0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c9a:	bf00      	nop
 8008c9c:	e000      	b.n	8008ca0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c9e:	bf00      	nop
	return res;
 8008ca0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3724      	adds	r7, #36	; 0x24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd90      	pop	{r4, r7, pc}

08008caa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b088      	sub	sp, #32
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d904      	bls.n	8008cd0 <remove_chain+0x26>
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d301      	bcc.n	8008cd4 <remove_chain+0x2a>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e04b      	b.n	8008d6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00c      	beq.n	8008cf4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	69b8      	ldr	r0, [r7, #24]
 8008ce2:	f7ff fef6 	bl	8008ad2 <put_fat>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008cea:	7ffb      	ldrb	r3, [r7, #31]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <remove_chain+0x4a>
 8008cf0:	7ffb      	ldrb	r3, [r7, #31]
 8008cf2:	e03b      	b.n	8008d6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7ff fe43 	bl	8008982 <get_fat>
 8008cfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d031      	beq.n	8008d68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <remove_chain+0x64>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e02e      	b.n	8008d6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d101      	bne.n	8008d1a <remove_chain+0x70>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e028      	b.n	8008d6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	69b8      	ldr	r0, [r7, #24]
 8008d20:	f7ff fed7 	bl	8008ad2 <put_fat>
 8008d24:	4603      	mov	r3, r0
 8008d26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008d28:	7ffb      	ldrb	r3, [r7, #31]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <remove_chain+0x88>
 8008d2e:	7ffb      	ldrb	r3, [r7, #31]
 8008d30:	e01c      	b.n	8008d6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	3b02      	subs	r3, #2
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d20b      	bcs.n	8008d58 <remove_chain+0xae>
			fs->free_clst++;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	791b      	ldrb	r3, [r3, #4]
 8008d4e:	f043 0301 	orr.w	r3, r3, #1
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d3c6      	bcc.n	8008cf4 <remove_chain+0x4a>
 8008d66:	e000      	b.n	8008d6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008d68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3720      	adds	r7, #32
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10d      	bne.n	8008da6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <create_chain+0x2c>
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d31b      	bcc.n	8008dd8 <create_chain+0x64>
 8008da0:	2301      	movs	r3, #1
 8008da2:	61bb      	str	r3, [r7, #24]
 8008da4:	e018      	b.n	8008dd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff fdea 	bl	8008982 <get_fat>
 8008dae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d801      	bhi.n	8008dba <create_chain+0x46>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e070      	b.n	8008e9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d101      	bne.n	8008dc6 <create_chain+0x52>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	e06a      	b.n	8008e9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d201      	bcs.n	8008dd4 <create_chain+0x60>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	e063      	b.n	8008e9c <create_chain+0x128>
		scl = clst;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	3301      	adds	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d307      	bcc.n	8008dfc <create_chain+0x88>
				ncl = 2;
 8008dec:	2302      	movs	r3, #2
 8008dee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d901      	bls.n	8008dfc <create_chain+0x88>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e04f      	b.n	8008e9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008dfc:	69f9      	ldr	r1, [r7, #28]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff fdbf 	bl	8008982 <get_fat>
 8008e04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00e      	beq.n	8008e2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d003      	beq.n	8008e1a <create_chain+0xa6>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e18:	d101      	bne.n	8008e1e <create_chain+0xaa>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	e03e      	b.n	8008e9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008e1e:	69fa      	ldr	r2, [r7, #28]
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d1da      	bne.n	8008ddc <create_chain+0x68>
 8008e26:	2300      	movs	r3, #0
 8008e28:	e038      	b.n	8008e9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008e2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e30:	69f9      	ldr	r1, [r7, #28]
 8008e32:	6938      	ldr	r0, [r7, #16]
 8008e34:	f7ff fe4d 	bl	8008ad2 <put_fat>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <create_chain+0xe2>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6938      	ldr	r0, [r7, #16]
 8008e4e:	f7ff fe40 	bl	8008ad2 <put_fat>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d116      	bne.n	8008e8a <create_chain+0x116>
		fs->last_clst = ncl;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	695a      	ldr	r2, [r3, #20]
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	3b02      	subs	r3, #2
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d804      	bhi.n	8008e7a <create_chain+0x106>
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	1e5a      	subs	r2, r3, #1
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	791b      	ldrb	r3, [r3, #4]
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	711a      	strb	r2, [r3, #4]
 8008e88:	e007      	b.n	8008e9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d102      	bne.n	8008e96 <create_chain+0x122>
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295
 8008e94:	e000      	b.n	8008e98 <create_chain+0x124>
 8008e96:	2301      	movs	r3, #1
 8008e98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e9a:	69fb      	ldr	r3, [r7, #28]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb8:	3304      	adds	r3, #4
 8008eba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	0a5b      	lsrs	r3, r3, #9
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	8952      	ldrh	r2, [r2, #10]
 8008ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	1d1a      	adds	r2, r3, #4
 8008ece:	613a      	str	r2, [r7, #16]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <clmt_clust+0x3a>
 8008eda:	2300      	movs	r3, #0
 8008edc:	e010      	b.n	8008f00 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d307      	bcc.n	8008ef6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ef4:	e7e9      	b.n	8008eca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008ef6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	4413      	add	r3, r2
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f22:	d204      	bcs.n	8008f2e <dir_sdi+0x22>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	f003 031f 	and.w	r3, r3, #31
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e063      	b.n	8008ffa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d106      	bne.n	8008f52 <dir_sdi+0x46>
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d902      	bls.n	8008f52 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10c      	bne.n	8008f72 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	095b      	lsrs	r3, r3, #5
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	8912      	ldrh	r2, [r2, #8]
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d301      	bcc.n	8008f68 <dir_sdi+0x5c>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e048      	b.n	8008ffa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	61da      	str	r2, [r3, #28]
 8008f70:	e029      	b.n	8008fc6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	895b      	ldrh	r3, [r3, #10]
 8008f76:	025b      	lsls	r3, r3, #9
 8008f78:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f7a:	e019      	b.n	8008fb0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6979      	ldr	r1, [r7, #20]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7ff fcfe 	bl	8008982 <get_fat>
 8008f86:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8e:	d101      	bne.n	8008f94 <dir_sdi+0x88>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e032      	b.n	8008ffa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d904      	bls.n	8008fa4 <dir_sdi+0x98>
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d301      	bcc.n	8008fa8 <dir_sdi+0x9c>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e028      	b.n	8008ffa <dir_sdi+0xee>
			ofs -= csz;
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d2e1      	bcs.n	8008f7c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008fb8:	6979      	ldr	r1, [r7, #20]
 8008fba:	6938      	ldr	r0, [r7, #16]
 8008fbc:	f7ff fcc2 	bl	8008944 <clust2sect>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <dir_sdi+0xcc>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	e010      	b.n	8008ffa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	69da      	ldr	r2, [r3, #28]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	0a5b      	lsrs	r3, r3, #9
 8008fe0:	441a      	add	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff2:	441a      	add	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b086      	sub	sp, #24
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	3320      	adds	r3, #32
 8009018:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <dir_next+0x28>
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009028:	d301      	bcc.n	800902e <dir_next+0x2c>
 800902a:	2304      	movs	r3, #4
 800902c:	e0aa      	b.n	8009184 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009034:	2b00      	cmp	r3, #0
 8009036:	f040 8098 	bne.w	800916a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10b      	bne.n	8009064 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	8912      	ldrh	r2, [r2, #8]
 8009054:	4293      	cmp	r3, r2
 8009056:	f0c0 8088 	bcc.w	800916a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	61da      	str	r2, [r3, #28]
 8009060:	2304      	movs	r3, #4
 8009062:	e08f      	b.n	8009184 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	0a5b      	lsrs	r3, r3, #9
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	8952      	ldrh	r2, [r2, #10]
 800906c:	3a01      	subs	r2, #1
 800906e:	4013      	ands	r3, r2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d17a      	bne.n	800916a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	4619      	mov	r1, r3
 800907c:	4610      	mov	r0, r2
 800907e:	f7ff fc80 	bl	8008982 <get_fat>
 8009082:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d801      	bhi.n	800908e <dir_next+0x8c>
 800908a:	2302      	movs	r3, #2
 800908c:	e07a      	b.n	8009184 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d101      	bne.n	800909a <dir_next+0x98>
 8009096:	2301      	movs	r3, #1
 8009098:	e074      	b.n	8009184 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d358      	bcc.n	8009156 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d104      	bne.n	80090b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	61da      	str	r2, [r3, #28]
 80090b0:	2304      	movs	r3, #4
 80090b2:	e067      	b.n	8009184 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f7ff fe59 	bl	8008d74 <create_chain>
 80090c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <dir_next+0xcc>
 80090ca:	2307      	movs	r3, #7
 80090cc:	e05a      	b.n	8009184 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d101      	bne.n	80090d8 <dir_next+0xd6>
 80090d4:	2302      	movs	r3, #2
 80090d6:	e055      	b.n	8009184 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090de:	d101      	bne.n	80090e4 <dir_next+0xe2>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e04f      	b.n	8009184 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f7ff fb4d 	bl	8008784 <sync_window>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <dir_next+0xf2>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e047      	b.n	8009184 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3334      	adds	r3, #52	; 0x34
 80090f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090fc:	2100      	movs	r1, #0
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff f945 	bl	800838e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]
 8009108:	6979      	ldr	r1, [r7, #20]
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff fc1a 	bl	8008944 <clust2sect>
 8009110:	4602      	mov	r2, r0
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	631a      	str	r2, [r3, #48]	; 0x30
 8009116:	e012      	b.n	800913e <dir_next+0x13c>
						fs->wflag = 1;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2201      	movs	r2, #1
 800911c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7ff fb30 	bl	8008784 <sync_window>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <dir_next+0x12c>
 800912a:	2301      	movs	r3, #1
 800912c:	e02a      	b.n	8009184 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3301      	adds	r3, #1
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	631a      	str	r2, [r3, #48]	; 0x30
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	895b      	ldrh	r3, [r3, #10]
 8009142:	461a      	mov	r2, r3
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	4293      	cmp	r3, r2
 8009148:	d3e6      	bcc.n	8009118 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	1ad2      	subs	r2, r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800915c:	6979      	ldr	r1, [r7, #20]
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f7ff fbf0 	bl	8008944 <clust2sect>
 8009164:	4602      	mov	r2, r0
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917c:	441a      	add	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800919c:	2100      	movs	r1, #0
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff feb4 	bl	8008f0c <dir_sdi>
 80091a4:	4603      	mov	r3, r0
 80091a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d12b      	bne.n	8009206 <dir_alloc+0x7a>
		n = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	4619      	mov	r1, r3
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f7ff fb27 	bl	800880c <move_window>
 80091be:	4603      	mov	r3, r0
 80091c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d11d      	bne.n	8009204 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2be5      	cmp	r3, #229	; 0xe5
 80091d0:	d004      	beq.n	80091dc <dir_alloc+0x50>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d107      	bne.n	80091ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	3301      	adds	r3, #1
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d102      	bne.n	80091f0 <dir_alloc+0x64>
 80091ea:	e00c      	b.n	8009206 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091f0:	2101      	movs	r1, #1
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7ff ff05 	bl	8009002 <dir_next>
 80091f8:	4603      	mov	r3, r0
 80091fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0d7      	beq.n	80091b2 <dir_alloc+0x26>
 8009202:	e000      	b.n	8009206 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009204:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	2b04      	cmp	r3, #4
 800920a:	d101      	bne.n	8009210 <dir_alloc+0x84>
 800920c:	2307      	movs	r3, #7
 800920e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3718      	adds	r7, #24
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	331a      	adds	r3, #26
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff f80d 	bl	8008248 <ld_word>
 800922e:	4603      	mov	r3, r0
 8009230:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d109      	bne.n	800924e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	3314      	adds	r3, #20
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff f802 	bl	8008248 <ld_word>
 8009244:	4603      	mov	r3, r0
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800924e:	68fb      	ldr	r3, [r7, #12]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	331a      	adds	r3, #26
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	b292      	uxth	r2, r2
 800926c:	4611      	mov	r1, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff f825 	bl	80082be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b03      	cmp	r3, #3
 800927a:	d109      	bne.n	8009290 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f103 0214 	add.w	r2, r3, #20
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	0c1b      	lsrs	r3, r3, #16
 8009286:	b29b      	uxth	r3, r3
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7ff f817 	bl	80082be <st_word>
	}
}
 8009290:	bf00      	nop
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80092a6:	2100      	movs	r1, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff fe2f 	bl	8008f0c <dir_sdi>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <dir_find+0x24>
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	e03e      	b.n	800933a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6938      	ldr	r0, [r7, #16]
 80092c4:	f7ff faa2 	bl	800880c <move_window>
 80092c8:	4603      	mov	r3, r0
 80092ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d12f      	bne.n	8009332 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <dir_find+0x4e>
 80092e0:	2304      	movs	r3, #4
 80092e2:	75fb      	strb	r3, [r7, #23]
 80092e4:	e028      	b.n	8009338 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	330b      	adds	r3, #11
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	330b      	adds	r3, #11
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	f003 0308 	and.w	r3, r3, #8
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <dir_find+0x86>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a18      	ldr	r0, [r3, #32]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3324      	adds	r3, #36	; 0x24
 8009310:	220b      	movs	r2, #11
 8009312:	4619      	mov	r1, r3
 8009314:	f7ff f856 	bl	80083c4 <mem_cmp>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00b      	beq.n	8009336 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800931e:	2100      	movs	r1, #0
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff fe6e 	bl	8009002 <dir_next>
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0c5      	beq.n	80092bc <dir_find+0x24>
 8009330:	e002      	b.n	8009338 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009332:	bf00      	nop
 8009334:	e000      	b.n	8009338 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009336:	bf00      	nop

	return res;
 8009338:	7dfb      	ldrb	r3, [r7, #23]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009350:	2101      	movs	r1, #1
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff ff1a 	bl	800918c <dir_alloc>
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d11c      	bne.n	800939c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	4619      	mov	r1, r3
 8009368:	68b8      	ldr	r0, [r7, #8]
 800936a:	f7ff fa4f 	bl	800880c <move_window>
 800936e:	4603      	mov	r3, r0
 8009370:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d111      	bne.n	800939c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	2220      	movs	r2, #32
 800937e:	2100      	movs	r1, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff f804 	bl	800838e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a18      	ldr	r0, [r3, #32]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3324      	adds	r3, #36	; 0x24
 800938e:	220b      	movs	r2, #11
 8009390:	4619      	mov	r1, r3
 8009392:	f7fe ffdb 	bl	800834c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2201      	movs	r2, #1
 800939a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3324      	adds	r3, #36	; 0x24
 80093bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80093be:	220b      	movs	r2, #11
 80093c0:	2120      	movs	r1, #32
 80093c2:	68b8      	ldr	r0, [r7, #8]
 80093c4:	f7fe ffe3 	bl	800838e <mem_set>
	si = i = 0; ni = 8;
 80093c8:	2300      	movs	r3, #0
 80093ca:	613b      	str	r3, [r7, #16]
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	2308      	movs	r3, #8
 80093d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	61fa      	str	r2, [r7, #28]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	4413      	add	r3, r2
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093e2:	7efb      	ldrb	r3, [r7, #27]
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d94e      	bls.n	8009486 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80093e8:	7efb      	ldrb	r3, [r7, #27]
 80093ea:	2b2f      	cmp	r3, #47	; 0x2f
 80093ec:	d006      	beq.n	80093fc <create_name+0x54>
 80093ee:	7efb      	ldrb	r3, [r7, #27]
 80093f0:	2b5c      	cmp	r3, #92	; 0x5c
 80093f2:	d110      	bne.n	8009416 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80093f4:	e002      	b.n	80093fc <create_name+0x54>
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	3301      	adds	r3, #1
 80093fa:	61fb      	str	r3, [r7, #28]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4413      	add	r3, r2
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b2f      	cmp	r3, #47	; 0x2f
 8009406:	d0f6      	beq.n	80093f6 <create_name+0x4e>
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	4413      	add	r3, r2
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b5c      	cmp	r3, #92	; 0x5c
 8009412:	d0f0      	beq.n	80093f6 <create_name+0x4e>
			break;
 8009414:	e038      	b.n	8009488 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009416:	7efb      	ldrb	r3, [r7, #27]
 8009418:	2b2e      	cmp	r3, #46	; 0x2e
 800941a:	d003      	beq.n	8009424 <create_name+0x7c>
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	429a      	cmp	r2, r3
 8009422:	d30c      	bcc.n	800943e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b0b      	cmp	r3, #11
 8009428:	d002      	beq.n	8009430 <create_name+0x88>
 800942a:	7efb      	ldrb	r3, [r7, #27]
 800942c:	2b2e      	cmp	r3, #46	; 0x2e
 800942e:	d001      	beq.n	8009434 <create_name+0x8c>
 8009430:	2306      	movs	r3, #6
 8009432:	e044      	b.n	80094be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009434:	2308      	movs	r3, #8
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	230b      	movs	r3, #11
 800943a:	617b      	str	r3, [r7, #20]
			continue;
 800943c:	e022      	b.n	8009484 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800943e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009442:	2b00      	cmp	r3, #0
 8009444:	da04      	bge.n	8009450 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009446:	7efb      	ldrb	r3, [r7, #27]
 8009448:	3b80      	subs	r3, #128	; 0x80
 800944a:	4a1f      	ldr	r2, [pc, #124]	; (80094c8 <create_name+0x120>)
 800944c:	5cd3      	ldrb	r3, [r2, r3]
 800944e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009450:	7efb      	ldrb	r3, [r7, #27]
 8009452:	4619      	mov	r1, r3
 8009454:	481d      	ldr	r0, [pc, #116]	; (80094cc <create_name+0x124>)
 8009456:	f7fe ffdc 	bl	8008412 <chk_chr>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <create_name+0xbc>
 8009460:	2306      	movs	r3, #6
 8009462:	e02c      	b.n	80094be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009464:	7efb      	ldrb	r3, [r7, #27]
 8009466:	2b60      	cmp	r3, #96	; 0x60
 8009468:	d905      	bls.n	8009476 <create_name+0xce>
 800946a:	7efb      	ldrb	r3, [r7, #27]
 800946c:	2b7a      	cmp	r3, #122	; 0x7a
 800946e:	d802      	bhi.n	8009476 <create_name+0xce>
 8009470:	7efb      	ldrb	r3, [r7, #27]
 8009472:	3b20      	subs	r3, #32
 8009474:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	613a      	str	r2, [r7, #16]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	4413      	add	r3, r2
 8009480:	7efa      	ldrb	r2, [r7, #27]
 8009482:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009484:	e7a6      	b.n	80093d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009486:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	441a      	add	r2, r3
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <create_name+0xf4>
 8009498:	2306      	movs	r3, #6
 800949a:	e010      	b.n	80094be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2be5      	cmp	r3, #229	; 0xe5
 80094a2:	d102      	bne.n	80094aa <create_name+0x102>
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2205      	movs	r2, #5
 80094a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80094aa:	7efb      	ldrb	r3, [r7, #27]
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	d801      	bhi.n	80094b4 <create_name+0x10c>
 80094b0:	2204      	movs	r2, #4
 80094b2:	e000      	b.n	80094b6 <create_name+0x10e>
 80094b4:	2200      	movs	r2, #0
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	330b      	adds	r3, #11
 80094ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80094bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	08013248 	.word	0x08013248
 80094cc:	080130c0 	.word	0x080130c0

080094d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80094e4:	e002      	b.n	80094ec <follow_path+0x1c>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	3301      	adds	r3, #1
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	2b2f      	cmp	r3, #47	; 0x2f
 80094f2:	d0f8      	beq.n	80094e6 <follow_path+0x16>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b5c      	cmp	r3, #92	; 0x5c
 80094fa:	d0f4      	beq.n	80094e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2200      	movs	r2, #0
 8009500:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b1f      	cmp	r3, #31
 8009508:	d80a      	bhi.n	8009520 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2280      	movs	r2, #128	; 0x80
 800950e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009512:	2100      	movs	r1, #0
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff fcf9 	bl	8008f0c <dir_sdi>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]
 800951e:	e043      	b.n	80095a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009520:	463b      	mov	r3, r7
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff ff3f 	bl	80093a8 <create_name>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d134      	bne.n	800959e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff feaf 	bl	8009298 <dir_find>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009544:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	2b04      	cmp	r3, #4
 8009550:	d127      	bne.n	80095a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009552:	7afb      	ldrb	r3, [r7, #11]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b00      	cmp	r3, #0
 800955a:	d122      	bne.n	80095a2 <follow_path+0xd2>
 800955c:	2305      	movs	r3, #5
 800955e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009560:	e01f      	b.n	80095a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009562:	7afb      	ldrb	r3, [r7, #11]
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11c      	bne.n	80095a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	799b      	ldrb	r3, [r3, #6]
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009578:	2305      	movs	r3, #5
 800957a:	75fb      	strb	r3, [r7, #23]
 800957c:	e014      	b.n	80095a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958c:	4413      	add	r3, r2
 800958e:	4619      	mov	r1, r3
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f7ff fe42 	bl	800921a <ld_clust>
 8009596:	4602      	mov	r2, r0
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800959c:	e7c0      	b.n	8009520 <follow_path+0x50>
			if (res != FR_OK) break;
 800959e:	bf00      	nop
 80095a0:	e002      	b.n	80095a8 <follow_path+0xd8>
				break;
 80095a2:	bf00      	nop
 80095a4:	e000      	b.n	80095a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80095a6:	bf00      	nop
			}
		}
	}

	return res;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b087      	sub	sp, #28
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295
 80095be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d031      	beq.n	800962c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	e002      	b.n	80095d6 <get_ldnumber+0x24>
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	3301      	adds	r3, #1
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d903      	bls.n	80095e6 <get_ldnumber+0x34>
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b3a      	cmp	r3, #58	; 0x3a
 80095e4:	d1f4      	bne.n	80095d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2b3a      	cmp	r3, #58	; 0x3a
 80095ec:	d11c      	bne.n	8009628 <get_ldnumber+0x76>
			tp = *path;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	60fa      	str	r2, [r7, #12]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	3b30      	subs	r3, #48	; 0x30
 80095fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b09      	cmp	r3, #9
 8009604:	d80e      	bhi.n	8009624 <get_ldnumber+0x72>
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	429a      	cmp	r2, r3
 800960c:	d10a      	bne.n	8009624 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d107      	bne.n	8009624 <get_ldnumber+0x72>
					vol = (int)i;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	3301      	adds	r3, #1
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	e002      	b.n	800962e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009628:	2300      	movs	r3, #0
 800962a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800962c:	693b      	ldr	r3, [r7, #16]
}
 800962e:	4618      	mov	r0, r3
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
	...

0800963c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	70da      	strb	r2, [r3, #3]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f04f 32ff 	mov.w	r2, #4294967295
 8009652:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff f8d8 	bl	800880c <move_window>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <check_fs+0x2a>
 8009662:	2304      	movs	r3, #4
 8009664:	e038      	b.n	80096d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3334      	adds	r3, #52	; 0x34
 800966a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fdea 	bl	8008248 <ld_word>
 8009674:	4603      	mov	r3, r0
 8009676:	461a      	mov	r2, r3
 8009678:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800967c:	429a      	cmp	r2, r3
 800967e:	d001      	beq.n	8009684 <check_fs+0x48>
 8009680:	2303      	movs	r3, #3
 8009682:	e029      	b.n	80096d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800968a:	2be9      	cmp	r3, #233	; 0xe9
 800968c:	d009      	beq.n	80096a2 <check_fs+0x66>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009694:	2beb      	cmp	r3, #235	; 0xeb
 8009696:	d11e      	bne.n	80096d6 <check_fs+0x9a>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800969e:	2b90      	cmp	r3, #144	; 0x90
 80096a0:	d119      	bne.n	80096d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3334      	adds	r3, #52	; 0x34
 80096a6:	3336      	adds	r3, #54	; 0x36
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe fde5 	bl	8008278 <ld_dword>
 80096ae:	4603      	mov	r3, r0
 80096b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80096b4:	4a0a      	ldr	r2, [pc, #40]	; (80096e0 <check_fs+0xa4>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d101      	bne.n	80096be <check_fs+0x82>
 80096ba:	2300      	movs	r3, #0
 80096bc:	e00c      	b.n	80096d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3334      	adds	r3, #52	; 0x34
 80096c2:	3352      	adds	r3, #82	; 0x52
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe fdd7 	bl	8008278 <ld_dword>
 80096ca:	4603      	mov	r3, r0
 80096cc:	4a05      	ldr	r2, [pc, #20]	; (80096e4 <check_fs+0xa8>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d101      	bne.n	80096d6 <check_fs+0x9a>
 80096d2:	2300      	movs	r3, #0
 80096d4:	e000      	b.n	80096d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80096d6:	2302      	movs	r3, #2
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	00544146 	.word	0x00544146
 80096e4:	33544146 	.word	0x33544146

080096e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b096      	sub	sp, #88	; 0x58
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	4613      	mov	r3, r2
 80096f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff ff58 	bl	80095b2 <get_ldnumber>
 8009702:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009706:	2b00      	cmp	r3, #0
 8009708:	da01      	bge.n	800970e <find_volume+0x26>
 800970a:	230b      	movs	r3, #11
 800970c:	e236      	b.n	8009b7c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800970e:	4aac      	ldr	r2, [pc, #688]	; (80099c0 <find_volume+0x2d8>)
 8009710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009716:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <find_volume+0x3a>
 800971e:	230c      	movs	r3, #12
 8009720:	e22c      	b.n	8009b7c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8009722:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009724:	f7fe fe90 	bl	8008448 <lock_fs>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <find_volume+0x4a>
 800972e:	230f      	movs	r3, #15
 8009730:	e224      	b.n	8009b7c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009736:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	f023 0301 	bic.w	r3, r3, #1
 800973e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01a      	beq.n	800977e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe fcdd 	bl	800810c <disk_status>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10c      	bne.n	800977e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <find_volume+0x92>
 800976a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800976e:	f003 0304 	and.w	r3, r3, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009776:	230a      	movs	r3, #10
 8009778:	e200      	b.n	8009b7c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800977a:	2300      	movs	r3, #0
 800977c:	e1fe      	b.n	8009b7c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009786:	b2da      	uxtb	r2, r3
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	785b      	ldrb	r3, [r3, #1]
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe fcd5 	bl	8008140 <disk_initialize>
 8009796:	4603      	mov	r3, r0
 8009798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800979c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80097a8:	2303      	movs	r3, #3
 80097aa:	e1e7      	b.n	8009b7c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <find_volume+0xda>
 80097b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80097be:	230a      	movs	r3, #10
 80097c0:	e1dc      	b.n	8009b7c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80097c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ca:	f7ff ff37 	bl	800963c <check_fs>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80097d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d14b      	bne.n	8009874 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097dc:	2300      	movs	r3, #0
 80097de:	643b      	str	r3, [r7, #64]	; 0x40
 80097e0:	e01f      	b.n	8009822 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80097e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ea:	011b      	lsls	r3, r3, #4
 80097ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80097f0:	4413      	add	r3, r2
 80097f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	3304      	adds	r3, #4
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d006      	beq.n	800980c <find_volume+0x124>
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	3308      	adds	r3, #8
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fd38 	bl	8008278 <ld_dword>
 8009808:	4602      	mov	r2, r0
 800980a:	e000      	b.n	800980e <find_volume+0x126>
 800980c:	2200      	movs	r2, #0
 800980e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009816:	440b      	add	r3, r1
 8009818:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800981c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800981e:	3301      	adds	r3, #1
 8009820:	643b      	str	r3, [r7, #64]	; 0x40
 8009822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009824:	2b03      	cmp	r3, #3
 8009826:	d9dc      	bls.n	80097e2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009828:	2300      	movs	r3, #0
 800982a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800982c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <find_volume+0x150>
 8009832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009834:	3b01      	subs	r3, #1
 8009836:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009840:	4413      	add	r3, r2
 8009842:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009846:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <find_volume+0x172>
 800984e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009852:	f7ff fef3 	bl	800963c <check_fs>
 8009856:	4603      	mov	r3, r0
 8009858:	e000      	b.n	800985c <find_volume+0x174>
 800985a:	2303      	movs	r3, #3
 800985c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009864:	2b01      	cmp	r3, #1
 8009866:	d905      	bls.n	8009874 <find_volume+0x18c>
 8009868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800986a:	3301      	adds	r3, #1
 800986c:	643b      	str	r3, [r7, #64]	; 0x40
 800986e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009870:	2b03      	cmp	r3, #3
 8009872:	d9e1      	bls.n	8009838 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009878:	2b04      	cmp	r3, #4
 800987a:	d101      	bne.n	8009880 <find_volume+0x198>
 800987c:	2301      	movs	r3, #1
 800987e:	e17d      	b.n	8009b7c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009884:	2b01      	cmp	r3, #1
 8009886:	d901      	bls.n	800988c <find_volume+0x1a4>
 8009888:	230d      	movs	r3, #13
 800988a:	e177      	b.n	8009b7c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	3334      	adds	r3, #52	; 0x34
 8009890:	330b      	adds	r3, #11
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe fcd8 	bl	8008248 <ld_word>
 8009898:	4603      	mov	r3, r0
 800989a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800989e:	d001      	beq.n	80098a4 <find_volume+0x1bc>
 80098a0:	230d      	movs	r3, #13
 80098a2:	e16b      	b.n	8009b7c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	3334      	adds	r3, #52	; 0x34
 80098a8:	3316      	adds	r3, #22
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fccc 	bl	8008248 <ld_word>
 80098b0:	4603      	mov	r3, r0
 80098b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80098b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <find_volume+0x1e0>
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	3334      	adds	r3, #52	; 0x34
 80098be:	3324      	adds	r3, #36	; 0x24
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe fcd9 	bl	8008278 <ld_dword>
 80098c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80098c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098cc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80098ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	789b      	ldrb	r3, [r3, #2]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d005      	beq.n	80098ec <find_volume+0x204>
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	789b      	ldrb	r3, [r3, #2]
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d001      	beq.n	80098ec <find_volume+0x204>
 80098e8:	230d      	movs	r3, #13
 80098ea:	e147      	b.n	8009b7c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	789b      	ldrb	r3, [r3, #2]
 80098f0:	461a      	mov	r2, r3
 80098f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f4:	fb02 f303 	mul.w	r3, r2, r3
 80098f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009900:	b29a      	uxth	r2, r3
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	895b      	ldrh	r3, [r3, #10]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d008      	beq.n	8009920 <find_volume+0x238>
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	895b      	ldrh	r3, [r3, #10]
 8009912:	461a      	mov	r2, r3
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	895b      	ldrh	r3, [r3, #10]
 8009918:	3b01      	subs	r3, #1
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <find_volume+0x23c>
 8009920:	230d      	movs	r3, #13
 8009922:	e12b      	b.n	8009b7c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	3334      	adds	r3, #52	; 0x34
 8009928:	3311      	adds	r3, #17
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fc8c 	bl	8008248 <ld_word>
 8009930:	4603      	mov	r3, r0
 8009932:	461a      	mov	r2, r3
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	891b      	ldrh	r3, [r3, #8]
 800993c:	f003 030f 	and.w	r3, r3, #15
 8009940:	b29b      	uxth	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <find_volume+0x262>
 8009946:	230d      	movs	r3, #13
 8009948:	e118      	b.n	8009b7c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	3334      	adds	r3, #52	; 0x34
 800994e:	3313      	adds	r3, #19
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe fc79 	bl	8008248 <ld_word>
 8009956:	4603      	mov	r3, r0
 8009958:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800995a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800995c:	2b00      	cmp	r3, #0
 800995e:	d106      	bne.n	800996e <find_volume+0x286>
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	3334      	adds	r3, #52	; 0x34
 8009964:	3320      	adds	r3, #32
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fc86 	bl	8008278 <ld_dword>
 800996c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	3334      	adds	r3, #52	; 0x34
 8009972:	330e      	adds	r3, #14
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe fc67 	bl	8008248 <ld_word>
 800997a:	4603      	mov	r3, r0
 800997c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800997e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <find_volume+0x2a0>
 8009984:	230d      	movs	r3, #13
 8009986:	e0f9      	b.n	8009b7c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009988:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800998a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998c:	4413      	add	r3, r2
 800998e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009990:	8912      	ldrh	r2, [r2, #8]
 8009992:	0912      	lsrs	r2, r2, #4
 8009994:	b292      	uxth	r2, r2
 8009996:	4413      	add	r3, r2
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800999a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	429a      	cmp	r2, r3
 80099a0:	d201      	bcs.n	80099a6 <find_volume+0x2be>
 80099a2:	230d      	movs	r3, #13
 80099a4:	e0ea      	b.n	8009b7c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80099a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ae:	8952      	ldrh	r2, [r2, #10]
 80099b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d103      	bne.n	80099c4 <find_volume+0x2dc>
 80099bc:	230d      	movs	r3, #13
 80099be:	e0dd      	b.n	8009b7c <find_volume+0x494>
 80099c0:	20000338 	.word	0x20000338
		fmt = FS_FAT32;
 80099c4:	2303      	movs	r3, #3
 80099c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d802      	bhi.n	80099da <find_volume+0x2f2>
 80099d4:	2302      	movs	r3, #2
 80099d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d802      	bhi.n	80099ea <find_volume+0x302>
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	1c9a      	adds	r2, r3, #2
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099f6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80099f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099fc:	441a      	add	r2, r3
 80099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	441a      	add	r2, r3
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d11e      	bne.n	8009a52 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	3334      	adds	r3, #52	; 0x34
 8009a18:	332a      	adds	r3, #42	; 0x2a
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fc14 	bl	8008248 <ld_word>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <find_volume+0x342>
 8009a26:	230d      	movs	r3, #13
 8009a28:	e0a8      	b.n	8009b7c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2c:	891b      	ldrh	r3, [r3, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <find_volume+0x34e>
 8009a32:	230d      	movs	r3, #13
 8009a34:	e0a2      	b.n	8009b7c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	3334      	adds	r3, #52	; 0x34
 8009a3a:	332c      	adds	r3, #44	; 0x2c
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fc1b 	bl	8008278 <ld_dword>
 8009a42:	4602      	mov	r2, r0
 8009a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a46:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a50:	e01f      	b.n	8009a92 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	891b      	ldrh	r3, [r3, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <find_volume+0x376>
 8009a5a:	230d      	movs	r3, #13
 8009a5c:	e08e      	b.n	8009b7c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a64:	441a      	add	r2, r3
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d103      	bne.n	8009a7a <find_volume+0x392>
 8009a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	e00a      	b.n	8009a90 <find_volume+0x3a8>
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7c:	699a      	ldr	r2, [r3, #24]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	4413      	add	r3, r2
 8009a84:	085a      	lsrs	r2, r3, #1
 8009a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009a90:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	69da      	ldr	r2, [r3, #28]
 8009a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a9c:	0a5b      	lsrs	r3, r3, #9
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d201      	bcs.n	8009aa6 <find_volume+0x3be>
 8009aa2:	230d      	movs	r3, #13
 8009aa4:	e06a      	b.n	8009b7c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009aac:	615a      	str	r2, [r3, #20]
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	695a      	ldr	r2, [r3, #20]
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab8:	2280      	movs	r2, #128	; 0x80
 8009aba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d149      	bne.n	8009b58 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac6:	3334      	adds	r3, #52	; 0x34
 8009ac8:	3330      	adds	r3, #48	; 0x30
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fbbc 	bl	8008248 <ld_word>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d140      	bne.n	8009b58 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ad8:	3301      	adds	r3, #1
 8009ada:	4619      	mov	r1, r3
 8009adc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ade:	f7fe fe95 	bl	800880c <move_window>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d137      	bne.n	8009b58 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	2200      	movs	r2, #0
 8009aec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	3334      	adds	r3, #52	; 0x34
 8009af2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fba6 	bl	8008248 <ld_word>
 8009afc:	4603      	mov	r3, r0
 8009afe:	461a      	mov	r2, r3
 8009b00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d127      	bne.n	8009b58 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	3334      	adds	r3, #52	; 0x34
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe fbb3 	bl	8008278 <ld_dword>
 8009b12:	4603      	mov	r3, r0
 8009b14:	4a1b      	ldr	r2, [pc, #108]	; (8009b84 <find_volume+0x49c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d11e      	bne.n	8009b58 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	3334      	adds	r3, #52	; 0x34
 8009b1e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fba8 	bl	8008278 <ld_dword>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	4a17      	ldr	r2, [pc, #92]	; (8009b88 <find_volume+0x4a0>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d113      	bne.n	8009b58 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	3334      	adds	r3, #52	; 0x34
 8009b34:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fe fb9d 	bl	8008278 <ld_dword>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	3334      	adds	r3, #52	; 0x34
 8009b48:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fb93 	bl	8008278 <ld_dword>
 8009b52:	4602      	mov	r2, r0
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009b5e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009b60:	4b0a      	ldr	r3, [pc, #40]	; (8009b8c <find_volume+0x4a4>)
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <find_volume+0x4a4>)
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	4b07      	ldr	r3, [pc, #28]	; (8009b8c <find_volume+0x4a4>)
 8009b6e:	881a      	ldrh	r2, [r3, #0]
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009b74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b76:	f7fe fde1 	bl	800873c <clear_lock>
#endif
	return FR_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3758      	adds	r7, #88	; 0x58
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	41615252 	.word	0x41615252
 8009b88:	61417272 	.word	0x61417272
 8009b8c:	2000033c 	.word	0x2000033c

08009b90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009b9a:	2309      	movs	r3, #9
 8009b9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d02e      	beq.n	8009c02 <validate+0x72>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d02a      	beq.n	8009c02 <validate+0x72>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d025      	beq.n	8009c02 <validate+0x72>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	889a      	ldrh	r2, [r3, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	88db      	ldrh	r3, [r3, #6]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d11e      	bne.n	8009c02 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fe fc3d 	bl	8008448 <lock_fs>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d014      	beq.n	8009bfe <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe fa96 	bl	800810c <disk_status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <validate+0x60>
				res = FR_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]
 8009bee:	e008      	b.n	8009c02 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fc3c 	bl	8008474 <unlock_fs>
 8009bfc:	e001      	b.n	8009c02 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009bfe:	230f      	movs	r3, #15
 8009c00:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <validate+0x7e>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	e000      	b.n	8009c10 <validate+0x80>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	6013      	str	r3, [r2, #0]
	return res;
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009c32:	f107 0310 	add.w	r3, r7, #16
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fcbb 	bl	80095b2 <get_ldnumber>
 8009c3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	da01      	bge.n	8009c48 <f_mount+0x28>
 8009c44:	230b      	movs	r3, #11
 8009c46:	e048      	b.n	8009cda <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c48:	4a26      	ldr	r2, [pc, #152]	; (8009ce4 <f_mount+0xc4>)
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00f      	beq.n	8009c78 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f7fe fd6f 	bl	800873c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 ff3e 	bl	800aae4 <ff_del_syncobj>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <f_mount+0x52>
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e033      	b.n	8009cda <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00f      	beq.n	8009c9e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	330c      	adds	r3, #12
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	4610      	mov	r0, r2
 8009c90:	f000 ff0d 	bl	800aaae <ff_cre_syncobj>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <f_mount+0x7e>
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	e01d      	b.n	8009cda <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	4910      	ldr	r1, [pc, #64]	; (8009ce4 <f_mount+0xc4>)
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <f_mount+0x94>
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d001      	beq.n	8009cb8 <f_mount+0x98>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e010      	b.n	8009cda <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009cb8:	f107 010c 	add.w	r1, r7, #12
 8009cbc:	f107 0308 	add.w	r3, r7, #8
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7ff fd10 	bl	80096e8 <find_volume>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	7dfa      	ldrb	r2, [r7, #23]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fe fbce 	bl	8008474 <unlock_fs>
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3720      	adds	r7, #32
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000338 	.word	0x20000338

08009ce8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b098      	sub	sp, #96	; 0x60
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <f_open+0x18>
 8009cfc:	2309      	movs	r3, #9
 8009cfe:	e1b4      	b.n	800a06a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009d08:	79fa      	ldrb	r2, [r7, #7]
 8009d0a:	f107 0110 	add.w	r1, r7, #16
 8009d0e:	f107 0308 	add.w	r3, r7, #8
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff fce8 	bl	80096e8 <find_volume>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f040 8191 	bne.w	800a04a <f_open+0x362>
		dj.obj.fs = fs;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	f107 0314 	add.w	r3, r7, #20
 8009d32:	4611      	mov	r1, r2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7ff fbcb 	bl	80094d0 <follow_path>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009d40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11a      	bne.n	8009d7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009d48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d4c:	b25b      	sxtb	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	da03      	bge.n	8009d5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009d52:	2306      	movs	r3, #6
 8009d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d58:	e011      	b.n	8009d7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bf14      	ite	ne
 8009d64:	2301      	movne	r3, #1
 8009d66:	2300      	moveq	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f107 0314 	add.w	r3, r7, #20
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fb9a 	bl	80084ac <chk_lock>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	f003 031c 	and.w	r3, r3, #28
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d07f      	beq.n	8009e88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009d88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d017      	beq.n	8009dc0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d94:	2b04      	cmp	r3, #4
 8009d96:	d10e      	bne.n	8009db6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d98:	f7fe fbe4 	bl	8008564 <enq_lock>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d006      	beq.n	8009db0 <f_open+0xc8>
 8009da2:	f107 0314 	add.w	r3, r7, #20
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff facb 	bl	8009342 <dir_register>
 8009dac:	4603      	mov	r3, r0
 8009dae:	e000      	b.n	8009db2 <f_open+0xca>
 8009db0:	2312      	movs	r3, #18
 8009db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	f043 0308 	orr.w	r3, r3, #8
 8009dbc:	71fb      	strb	r3, [r7, #7]
 8009dbe:	e010      	b.n	8009de2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009dc0:	7ebb      	ldrb	r3, [r7, #26]
 8009dc2:	f003 0311 	and.w	r3, r3, #17
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <f_open+0xea>
					res = FR_DENIED;
 8009dca:	2307      	movs	r3, #7
 8009dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009dd0:	e007      	b.n	8009de2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009dd2:	79fb      	ldrb	r3, [r7, #7]
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <f_open+0xfa>
 8009ddc:	2308      	movs	r3, #8
 8009dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d168      	bne.n	8009ebc <f_open+0x1d4>
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	f003 0308 	and.w	r3, r3, #8
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d063      	beq.n	8009ebc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009df4:	f7fe f92a 	bl	800804c <get_fattime>
 8009df8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfc:	330e      	adds	r3, #14
 8009dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fa77 	bl	80082f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	3316      	adds	r3, #22
 8009e0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe fa71 	bl	80082f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e14:	330b      	adds	r3, #11
 8009e16:	2220      	movs	r2, #32
 8009e18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e1e:	4611      	mov	r1, r2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff f9fa 	bl	800921a <ld_clust>
 8009e26:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7ff fa12 	bl	8009258 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e36:	331c      	adds	r3, #28
 8009e38:	2100      	movs	r1, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fa5a 	bl	80082f4 <st_dword>
					fs->wflag = 1;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2201      	movs	r2, #1
 8009e44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d037      	beq.n	8009ebc <f_open+0x1d4>
						dw = fs->winsect;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009e52:	f107 0314 	add.w	r3, r7, #20
 8009e56:	2200      	movs	r2, #0
 8009e58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe ff25 	bl	8008caa <remove_chain>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d126      	bne.n	8009ebc <f_open+0x1d4>
							res = move_window(fs, dw);
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fe fcca 	bl	800880c <move_window>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e82:	3a01      	subs	r2, #1
 8009e84:	611a      	str	r2, [r3, #16]
 8009e86:	e019      	b.n	8009ebc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d115      	bne.n	8009ebc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009e90:	7ebb      	ldrb	r3, [r7, #26]
 8009e92:	f003 0310 	and.w	r3, r3, #16
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009e9a:	2304      	movs	r3, #4
 8009e9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ea0:	e00c      	b.n	8009ebc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009ea2:	79fb      	ldrb	r3, [r7, #7]
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d007      	beq.n	8009ebc <f_open+0x1d4>
 8009eac:	7ebb      	ldrb	r3, [r7, #26]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <f_open+0x1d4>
						res = FR_DENIED;
 8009eb6:	2307      	movs	r3, #7
 8009eb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d128      	bne.n	8009f16 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ec4:	79fb      	ldrb	r3, [r7, #7]
 8009ec6:	f003 0308 	and.w	r3, r3, #8
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	f023 0301 	bic.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bf14      	ite	ne
 8009eee:	2301      	movne	r3, #1
 8009ef0:	2300      	moveq	r3, #0
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	f107 0314 	add.w	r3, r7, #20
 8009efa:	4611      	mov	r1, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fb53 	bl	80085a8 <inc_lock>
 8009f02:	4602      	mov	r2, r0
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d102      	bne.n	8009f16 <f_open+0x22e>
 8009f10:	2302      	movs	r3, #2
 8009f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f040 8095 	bne.w	800a04a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff f977 	bl	800921a <ld_clust>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f34:	331c      	adds	r3, #28
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe f99e 	bl	8008278 <ld_dword>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	88da      	ldrh	r2, [r3, #6]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	79fa      	ldrb	r2, [r7, #7]
 8009f5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3330      	adds	r3, #48	; 0x30
 8009f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f76:	2100      	movs	r1, #0
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fa08 	bl	800838e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	f003 0320 	and.w	r3, r3, #32
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d060      	beq.n	800a04a <f_open+0x362>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05c      	beq.n	800a04a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	895b      	ldrh	r3, [r3, #10]
 8009f9c:	025b      	lsls	r3, r3, #9
 8009f9e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	657b      	str	r3, [r7, #84]	; 0x54
 8009fac:	e016      	b.n	8009fdc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fce5 	bl	8008982 <get_fat>
 8009fb8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d802      	bhi.n	8009fc6 <f_open+0x2de>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fcc:	d102      	bne.n	8009fd4 <f_open+0x2ec>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	657b      	str	r3, [r7, #84]	; 0x54
 8009fdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d103      	bne.n	8009fec <f_open+0x304>
 8009fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d8e0      	bhi.n	8009fae <f_open+0x2c6>
				}
				fp->clust = clst;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ff0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d127      	bne.n	800a04a <f_open+0x362>
 8009ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a000:	2b00      	cmp	r3, #0
 800a002:	d022      	beq.n	800a04a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fe fc9b 	bl	8008944 <clust2sect>
 800a00e:	6478      	str	r0, [r7, #68]	; 0x44
 800a010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a012:	2b00      	cmp	r3, #0
 800a014:	d103      	bne.n	800a01e <f_open+0x336>
						res = FR_INT_ERR;
 800a016:	2302      	movs	r3, #2
 800a018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a01c:	e015      	b.n	800a04a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a01e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a020:	0a5a      	lsrs	r2, r3, #9
 800a022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a024:	441a      	add	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	7858      	ldrb	r0, [r3, #1]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6a1a      	ldr	r2, [r3, #32]
 800a038:	2301      	movs	r3, #1
 800a03a:	f7fe f8a7 	bl	800818c <disk_read>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <f_open+0x362>
 800a044:	2301      	movs	r3, #1
 800a046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a04a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <f_open+0x370>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a05e:	4611      	mov	r1, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f7fe fa07 	bl	8008474 <unlock_fs>
 800a066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3760      	adds	r7, #96	; 0x60
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b08e      	sub	sp, #56	; 0x38
 800a076:	af00      	add	r7, sp, #0
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	607a      	str	r2, [r7, #4]
 800a07e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f107 0214 	add.w	r2, r7, #20
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7ff fd7c 	bl	8009b90 <validate>
 800a098:	4603      	mov	r3, r0
 800a09a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a09e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <f_read+0x44>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	7d5b      	ldrb	r3, [r3, #21]
 800a0aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a0ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d009      	beq.n	800a0ca <f_read+0x58>
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a0bc:	4611      	mov	r1, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe f9d8 	bl	8008474 <unlock_fs>
 800a0c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0c8:	e13d      	b.n	800a346 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	7d1b      	ldrb	r3, [r3, #20]
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d106      	bne.n	800a0e4 <f_read+0x72>
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2107      	movs	r1, #7
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe f9ca 	bl	8008474 <unlock_fs>
 800a0e0:	2307      	movs	r3, #7
 800a0e2:	e130      	b.n	800a346 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	68da      	ldr	r2, [r3, #12]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	f240 811c 	bls.w	800a332 <f_read+0x2c0>
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a0fe:	e118      	b.n	800a332 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f040 80e4 	bne.w	800a2d6 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	0a5b      	lsrs	r3, r3, #9
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	8952      	ldrh	r2, [r2, #10]
 800a118:	3a01      	subs	r2, #1
 800a11a:	4013      	ands	r3, r2
 800a11c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d139      	bne.n	800a198 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d103      	bne.n	800a134 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	633b      	str	r3, [r7, #48]	; 0x30
 800a132:	e013      	b.n	800a15c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	4619      	mov	r1, r3
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7fe feae 	bl	8008ea4 <clmt_clust>
 800a148:	6338      	str	r0, [r7, #48]	; 0x30
 800a14a:	e007      	b.n	800a15c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	4619      	mov	r1, r3
 800a154:	4610      	mov	r0, r2
 800a156:	f7fe fc14 	bl	8008982 <get_fat>
 800a15a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d809      	bhi.n	800a176 <f_read+0x104>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2202      	movs	r2, #2
 800a166:	755a      	strb	r2, [r3, #21]
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2102      	movs	r1, #2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe f981 	bl	8008474 <unlock_fs>
 800a172:	2302      	movs	r3, #2
 800a174:	e0e7      	b.n	800a346 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17c:	d109      	bne.n	800a192 <f_read+0x120>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2201      	movs	r2, #1
 800a182:	755a      	strb	r2, [r3, #21]
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2101      	movs	r1, #1
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fe f973 	bl	8008474 <unlock_fs>
 800a18e:	2301      	movs	r3, #1
 800a190:	e0d9      	b.n	800a346 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a196:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7fe fbcf 	bl	8008944 <clust2sect>
 800a1a6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d109      	bne.n	800a1c2 <f_read+0x150>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	755a      	strb	r2, [r3, #21]
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2102      	movs	r1, #2
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fe f95b 	bl	8008474 <unlock_fs>
 800a1be:	2302      	movs	r3, #2
 800a1c0:	e0c1      	b.n	800a346 <f_read+0x2d4>
			sect += csect;
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	0a5b      	lsrs	r3, r3, #9
 800a1ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d03e      	beq.n	800a254 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	4413      	add	r3, r2
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	8952      	ldrh	r2, [r2, #10]
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d905      	bls.n	800a1f0 <f_read+0x17e>
					cc = fs->csize - csect;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	895b      	ldrh	r3, [r3, #10]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	7858      	ldrb	r0, [r3, #1]
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	69ba      	ldr	r2, [r7, #24]
 800a1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1fa:	f7fd ffc7 	bl	800818c <disk_read>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d009      	beq.n	800a218 <f_read+0x1a6>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2201      	movs	r2, #1
 800a208:	755a      	strb	r2, [r3, #21]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2101      	movs	r1, #1
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe f930 	bl	8008474 <unlock_fs>
 800a214:	2301      	movs	r3, #1
 800a216:	e096      	b.n	800a346 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	7d1b      	ldrb	r3, [r3, #20]
 800a21c:	b25b      	sxtb	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	da14      	bge.n	800a24c <f_read+0x1da>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a1a      	ldr	r2, [r3, #32]
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d90d      	bls.n	800a24c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6a1a      	ldr	r2, [r3, #32]
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	025b      	lsls	r3, r3, #9
 800a23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23c:	18d0      	adds	r0, r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3330      	adds	r3, #48	; 0x30
 800a242:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a246:	4619      	mov	r1, r3
 800a248:	f7fe f880 	bl	800834c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	025b      	lsls	r3, r3, #9
 800a250:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a252:	e05a      	b.n	800a30a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d038      	beq.n	800a2d0 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	7d1b      	ldrb	r3, [r3, #20]
 800a262:	b25b      	sxtb	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	da1d      	bge.n	800a2a4 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	7858      	ldrb	r0, [r3, #1]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a1a      	ldr	r2, [r3, #32]
 800a276:	2301      	movs	r3, #1
 800a278:	f7fd ffa8 	bl	80081cc <disk_write>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d009      	beq.n	800a296 <f_read+0x224>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	755a      	strb	r2, [r3, #21]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2101      	movs	r1, #1
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe f8f1 	bl	8008474 <unlock_fs>
 800a292:	2301      	movs	r3, #1
 800a294:	e057      	b.n	800a346 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	7d1b      	ldrb	r3, [r3, #20]
 800a29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	7858      	ldrb	r0, [r3, #1]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	69ba      	ldr	r2, [r7, #24]
 800a2b2:	f7fd ff6b 	bl	800818c <disk_read>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d009      	beq.n	800a2d0 <f_read+0x25e>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	755a      	strb	r2, [r3, #21]
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe f8d4 	bl	8008474 <unlock_fs>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e03a      	b.n	800a346 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2de:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d901      	bls.n	800a2f0 <f_read+0x27e>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fe:	4413      	add	r3, r2
 800a300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a302:	4619      	mov	r1, r3
 800a304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a306:	f7fe f821 	bl	800834c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a30a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	4413      	add	r3, r2
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	699a      	ldr	r2, [r3, #24]
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	441a      	add	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	619a      	str	r2, [r3, #24]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	441a      	add	r2, r3
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	f47f aee3 	bne.w	800a100 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2100      	movs	r1, #0
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe f898 	bl	8008474 <unlock_fs>
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3738      	adds	r7, #56	; 0x38
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b08c      	sub	sp, #48	; 0x30
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f107 0210 	add.w	r2, r7, #16
 800a36c:	4611      	mov	r1, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fc0e 	bl	8009b90 <validate>
 800a374:	4603      	mov	r3, r0
 800a376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a37a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d107      	bne.n	800a392 <f_write+0x44>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	7d5b      	ldrb	r3, [r3, #21]
 800a386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a38a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d009      	beq.n	800a3a6 <f_write+0x58>
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a398:	4611      	mov	r1, r2
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe f86a 	bl	8008474 <unlock_fs>
 800a3a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3a4:	e173      	b.n	800a68e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	7d1b      	ldrb	r3, [r3, #20]
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d106      	bne.n	800a3c0 <f_write+0x72>
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	2107      	movs	r1, #7
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe f85c 	bl	8008474 <unlock_fs>
 800a3bc:	2307      	movs	r3, #7
 800a3be:	e166      	b.n	800a68e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	441a      	add	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	f080 814b 	bcs.w	800a668 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	43db      	mvns	r3, r3
 800a3d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a3da:	e145      	b.n	800a668 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f040 8101 	bne.w	800a5ec <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	0a5b      	lsrs	r3, r3, #9
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	8952      	ldrh	r2, [r2, #10]
 800a3f4:	3a01      	subs	r2, #1
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d14d      	bne.n	800a49c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10c      	bne.n	800a422 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a410:	2b00      	cmp	r3, #0
 800a412:	d11a      	bne.n	800a44a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2100      	movs	r1, #0
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fe fcab 	bl	8008d74 <create_chain>
 800a41e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a420:	e013      	b.n	800a44a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d007      	beq.n	800a43a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	4619      	mov	r1, r3
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7fe fd37 	bl	8008ea4 <clmt_clust>
 800a436:	62b8      	str	r0, [r7, #40]	; 0x28
 800a438:	e007      	b.n	800a44a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	4619      	mov	r1, r3
 800a442:	4610      	mov	r0, r2
 800a444:	f7fe fc96 	bl	8008d74 <create_chain>
 800a448:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 8110 	beq.w	800a672 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2b01      	cmp	r3, #1
 800a456:	d109      	bne.n	800a46c <f_write+0x11e>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2202      	movs	r2, #2
 800a45c:	755a      	strb	r2, [r3, #21]
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2102      	movs	r1, #2
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe f806 	bl	8008474 <unlock_fs>
 800a468:	2302      	movs	r3, #2
 800a46a:	e110      	b.n	800a68e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a472:	d109      	bne.n	800a488 <f_write+0x13a>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	755a      	strb	r2, [r3, #21]
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2101      	movs	r1, #1
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fd fff8 	bl	8008474 <unlock_fs>
 800a484:	2301      	movs	r3, #1
 800a486:	e102      	b.n	800a68e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a48c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <f_write+0x14e>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a49a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	7d1b      	ldrb	r3, [r3, #20]
 800a4a0:	b25b      	sxtb	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	da1d      	bge.n	800a4e2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	7858      	ldrb	r0, [r3, #1]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6a1a      	ldr	r2, [r3, #32]
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f7fd fe89 	bl	80081cc <disk_write>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d009      	beq.n	800a4d4 <f_write+0x186>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	755a      	strb	r2, [r3, #21]
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fd ffd2 	bl	8008474 <unlock_fs>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e0dc      	b.n	800a68e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	7d1b      	ldrb	r3, [r3, #20]
 800a4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	69db      	ldr	r3, [r3, #28]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	f7fe fa2a 	bl	8008944 <clust2sect>
 800a4f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d109      	bne.n	800a50c <f_write+0x1be>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	755a      	strb	r2, [r3, #21]
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	2102      	movs	r1, #2
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd ffb6 	bl	8008474 <unlock_fs>
 800a508:	2302      	movs	r3, #2
 800a50a:	e0c0      	b.n	800a68e <f_write+0x340>
			sect += csect;
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	4413      	add	r3, r2
 800a512:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	0a5b      	lsrs	r3, r3, #9
 800a518:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d041      	beq.n	800a5a4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a520:	69ba      	ldr	r2, [r7, #24]
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	4413      	add	r3, r2
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	8952      	ldrh	r2, [r2, #10]
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d905      	bls.n	800a53a <f_write+0x1ec>
					cc = fs->csize - csect;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	895b      	ldrh	r3, [r3, #10]
 800a532:	461a      	mov	r2, r3
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	7858      	ldrb	r0, [r3, #1]
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	69f9      	ldr	r1, [r7, #28]
 800a544:	f7fd fe42 	bl	80081cc <disk_write>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d009      	beq.n	800a562 <f_write+0x214>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2201      	movs	r2, #1
 800a552:	755a      	strb	r2, [r3, #21]
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	2101      	movs	r1, #1
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fd ff8b 	bl	8008474 <unlock_fs>
 800a55e:	2301      	movs	r3, #1
 800a560:	e095      	b.n	800a68e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a1a      	ldr	r2, [r3, #32]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	6a3a      	ldr	r2, [r7, #32]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d915      	bls.n	800a59c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6a1a      	ldr	r2, [r3, #32]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	025b      	lsls	r3, r3, #9
 800a580:	69fa      	ldr	r2, [r7, #28]
 800a582:	4413      	add	r3, r2
 800a584:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a588:	4619      	mov	r1, r3
 800a58a:	f7fd fedf 	bl	800834c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	7d1b      	ldrb	r3, [r3, #20]
 800a592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a596:	b2da      	uxtb	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	025b      	lsls	r3, r3, #9
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a5a2:	e044      	b.n	800a62e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d01b      	beq.n	800a5e6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	699a      	ldr	r2, [r3, #24]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d215      	bcs.n	800a5e6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	7858      	ldrb	r0, [r3, #1]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	f7fd fde0 	bl	800818c <disk_read>
 800a5cc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d009      	beq.n	800a5e6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	755a      	strb	r2, [r3, #21]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2101      	movs	r1, #1
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fd ff49 	bl	8008474 <unlock_fs>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e053      	b.n	800a68e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a5fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d901      	bls.n	800a606 <f_write+0x2b8>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a614:	4413      	add	r3, r2
 800a616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a618:	69f9      	ldr	r1, [r7, #28]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fd fe96 	bl	800834c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	7d1b      	ldrb	r3, [r3, #20]
 800a624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a62e:	69fa      	ldr	r2, [r7, #28]
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	4413      	add	r3, r2
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	441a      	add	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	619a      	str	r2, [r3, #24]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	68da      	ldr	r2, [r3, #12]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	bf38      	it	cc
 800a64e:	461a      	movcc	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	60da      	str	r2, [r3, #12]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	441a      	add	r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f47f aeb6 	bne.w	800a3dc <f_write+0x8e>
 800a670:	e000      	b.n	800a674 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a672:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	7d1b      	ldrb	r3, [r3, #20]
 800a678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f7fd fef4 	bl	8008474 <unlock_fs>
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3730      	adds	r7, #48	; 0x30
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b086      	sub	sp, #24
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f107 0208 	add.w	r2, r7, #8
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff fa72 	bl	8009b90 <validate>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d16d      	bne.n	800a792 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	7d1b      	ldrb	r3, [r3, #20]
 800a6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d067      	beq.n	800a792 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	7d1b      	ldrb	r3, [r3, #20]
 800a6c6:	b25b      	sxtb	r3, r3
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da1a      	bge.n	800a702 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	7858      	ldrb	r0, [r3, #1]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a1a      	ldr	r2, [r3, #32]
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f7fd fd76 	bl	80081cc <disk_write>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d006      	beq.n	800a6f4 <f_sync+0x5e>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fd fec2 	bl	8008474 <unlock_fs>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e055      	b.n	800a7a0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	7d1b      	ldrb	r3, [r3, #20]
 800a6f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a702:	f7fd fca3 	bl	800804c <get_fattime>
 800a706:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	4619      	mov	r1, r3
 800a710:	4610      	mov	r0, r2
 800a712:	f7fe f87b 	bl	800880c <move_window>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d138      	bne.n	800a792 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a724:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	330b      	adds	r3, #11
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	330b      	adds	r3, #11
 800a730:	f042 0220 	orr.w	r2, r2, #32
 800a734:	b2d2      	uxtb	r2, r2
 800a736:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6818      	ldr	r0, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	461a      	mov	r2, r3
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	f7fe fd88 	bl	8009258 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f103 021c 	add.w	r2, r3, #28
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	4619      	mov	r1, r3
 800a754:	4610      	mov	r0, r2
 800a756:	f7fd fdcd 	bl	80082f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3316      	adds	r3, #22
 800a75e:	6939      	ldr	r1, [r7, #16]
 800a760:	4618      	mov	r0, r3
 800a762:	f7fd fdc7 	bl	80082f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3312      	adds	r3, #18
 800a76a:	2100      	movs	r1, #0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fd fda6 	bl	80082be <st_word>
					fs->wflag = 1;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2201      	movs	r2, #1
 800a776:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe f874 	bl	8008868 <sync_fs>
 800a780:	4603      	mov	r3, r0
 800a782:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	7d1b      	ldrb	r3, [r3, #20]
 800a788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	7dfa      	ldrb	r2, [r7, #23]
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fd fe6b 	bl	8008474 <unlock_fs>
 800a79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ff70 	bl	800a696 <f_sync>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d11d      	bne.n	800a7fc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f107 0208 	add.w	r2, r7, #8
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7ff f9e1 	bl	8009b90 <validate>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d111      	bne.n	800a7fc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fd ff71 	bl	80086c4 <dec_lock>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fd fe3c 	bl	8008474 <unlock_fs>
#endif
		}
	}
	return res;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b092      	sub	sp, #72	; 0x48
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a812:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a816:	f107 030c 	add.w	r3, r7, #12
 800a81a:	2200      	movs	r2, #0
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe ff63 	bl	80096e8 <find_volume>
 800a822:	4603      	mov	r3, r0
 800a824:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a828:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f040 8099 	bne.w	800a964 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	695a      	ldr	r2, [r3, #20]
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	3b02      	subs	r3, #2
 800a842:	429a      	cmp	r2, r3
 800a844:	d804      	bhi.n	800a850 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a848:	695a      	ldr	r2, [r3, #20]
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e089      	b.n	800a964 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d128      	bne.n	800a8ae <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a85c:	2302      	movs	r3, #2
 800a85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a864:	f107 0314 	add.w	r3, r7, #20
 800a868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe f889 	bl	8008982 <get_fat>
 800a870:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a878:	d103      	bne.n	800a882 <f_getfree+0x7c>
 800a87a:	2301      	movs	r3, #1
 800a87c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a880:	e063      	b.n	800a94a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	2b01      	cmp	r3, #1
 800a886:	d103      	bne.n	800a890 <f_getfree+0x8a>
 800a888:	2302      	movs	r3, #2
 800a88a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a88e:	e05c      	b.n	800a94a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d102      	bne.n	800a89c <f_getfree+0x96>
 800a896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a898:	3301      	adds	r3, #1
 800a89a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89e:	3301      	adds	r3, #1
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d3db      	bcc.n	800a864 <f_getfree+0x5e>
 800a8ac:	e04d      	b.n	800a94a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a8be:	2300      	movs	r3, #0
 800a8c0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d113      	bne.n	800a8f0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	63ba      	str	r2, [r7, #56]	; 0x38
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f7fd ff9b 	bl	800880c <move_window>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a8dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d131      	bne.n	800a948 <f_getfree+0x142>
							p = fs->win;
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	3334      	adds	r3, #52	; 0x34
 800a8e8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a8ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ee:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d10f      	bne.n	800a918 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a8f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8fa:	f7fd fca5 	bl	8008248 <ld_word>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d102      	bne.n	800a90a <f_getfree+0x104>
 800a904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a906:	3301      	adds	r3, #1
 800a908:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	3302      	adds	r3, #2
 800a90e:	633b      	str	r3, [r7, #48]	; 0x30
 800a910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a912:	3b02      	subs	r3, #2
 800a914:	637b      	str	r3, [r7, #52]	; 0x34
 800a916:	e010      	b.n	800a93a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a91a:	f7fd fcad 	bl	8008278 <ld_dword>
 800a91e:	4603      	mov	r3, r0
 800a920:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <f_getfree+0x128>
 800a928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92a:	3301      	adds	r3, #1
 800a92c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	3304      	adds	r3, #4
 800a932:	633b      	str	r3, [r7, #48]	; 0x30
 800a934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a936:	3b04      	subs	r3, #4
 800a938:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93c:	3b01      	subs	r3, #1
 800a93e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1bd      	bne.n	800a8c2 <f_getfree+0xbc>
 800a946:	e000      	b.n	800a94a <f_getfree+0x144>
							if (res != FR_OK) break;
 800a948:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a94e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a954:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	791a      	ldrb	r2, [r3, #4]
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	f042 0201 	orr.w	r2, r2, #1
 800a960:	b2d2      	uxtb	r2, r2
 800a962:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fd fd81 	bl	8008474 <unlock_fs>
 800a972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a976:	4618      	mov	r0, r3
 800a978:	3748      	adds	r7, #72	; 0x48
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b088      	sub	sp, #32
 800a982:	af00      	add	r7, sp, #0
 800a984:	60f8      	str	r0, [r7, #12]
 800a986:	60b9      	str	r1, [r7, #8]
 800a988:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a98a:	2300      	movs	r3, #0
 800a98c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a992:	e01b      	b.n	800a9cc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a994:	f107 0310 	add.w	r3, r7, #16
 800a998:	f107 0114 	add.w	r1, r7, #20
 800a99c:	2201      	movs	r2, #1
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff fb67 	bl	800a072 <f_read>
		if (rc != 1) break;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d116      	bne.n	800a9d8 <f_gets+0x5a>
		c = s[0];
 800a9aa:	7d3b      	ldrb	r3, [r7, #20]
 800a9ac:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	2b0d      	cmp	r3, #13
 800a9b2:	d100      	bne.n	800a9b6 <f_gets+0x38>
 800a9b4:	e00a      	b.n	800a9cc <f_gets+0x4e>
		*p++ = c;
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	61ba      	str	r2, [r7, #24]
 800a9bc:	7dfa      	ldrb	r2, [r7, #23]
 800a9be:	701a      	strb	r2, [r3, #0]
		n++;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	2b0a      	cmp	r3, #10
 800a9ca:	d007      	beq.n	800a9dc <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	dbde      	blt.n	800a994 <f_gets+0x16>
 800a9d6:	e002      	b.n	800a9de <f_gets+0x60>
		if (rc != 1) break;
 800a9d8:	bf00      	nop
 800a9da:	e000      	b.n	800a9de <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a9dc:	bf00      	nop
	}
	*p = 0;
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <f_gets+0x70>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	e000      	b.n	800a9f0 <f_gets+0x72>
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3720      	adds	r7, #32
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	4613      	mov	r3, r2
 800aa04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa06:	2301      	movs	r3, #1
 800aa08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aa0e:	4b1f      	ldr	r3, [pc, #124]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa10:	7a5b      	ldrb	r3, [r3, #9]
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d131      	bne.n	800aa7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa18:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa1a:	7a5b      	ldrb	r3, [r3, #9]
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	461a      	mov	r2, r3
 800aa20:	4b1a      	ldr	r3, [pc, #104]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa22:	2100      	movs	r1, #0
 800aa24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aa26:	4b19      	ldr	r3, [pc, #100]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa28:	7a5b      	ldrb	r3, [r3, #9]
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	4a17      	ldr	r2, [pc, #92]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aa36:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa38:	7a5b      	ldrb	r3, [r3, #9]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa40:	4413      	add	r3, r2
 800aa42:	79fa      	ldrb	r2, [r7, #7]
 800aa44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aa46:	4b11      	ldr	r3, [pc, #68]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa48:	7a5b      	ldrb	r3, [r3, #9]
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	b2d1      	uxtb	r1, r2
 800aa50:	4a0e      	ldr	r2, [pc, #56]	; (800aa8c <FATFS_LinkDriverEx+0x94>)
 800aa52:	7251      	strb	r1, [r2, #9]
 800aa54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aa56:	7dbb      	ldrb	r3, [r7, #22]
 800aa58:	3330      	adds	r3, #48	; 0x30
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	3301      	adds	r3, #1
 800aa64:	223a      	movs	r2, #58	; 0x3a
 800aa66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	3302      	adds	r3, #2
 800aa6c:	222f      	movs	r2, #47	; 0x2f
 800aa6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	3303      	adds	r3, #3
 800aa74:	2200      	movs	r2, #0
 800aa76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	371c      	adds	r7, #28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20000360 	.word	0x20000360

0800aa90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff ffaa 	bl	800a9f8 <FATFS_LinkDriverEx>
 800aaa4:	4603      	mov	r3, r0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	4603      	mov	r3, r0
 800aab6:	6039      	str	r1, [r7, #0]
 800aab8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800aaba:	2200      	movs	r2, #0
 800aabc:	2101      	movs	r1, #1
 800aabe:	2001      	movs	r0, #1
 800aac0:	f000 fa85 	bl	800afce <osSemaphoreNew>
 800aac4:	4602      	mov	r2, r0
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bf14      	ite	ne
 800aad2:	2301      	movne	r3, #1
 800aad4:	2300      	moveq	r3, #0
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	60fb      	str	r3, [r7, #12]

    return ret;
 800aada:	68fb      	ldr	r3, [r7, #12]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fb8d 	bl	800b20c <osSemaphoreDelete>
#endif
    return 1;
 800aaf2:	2301      	movs	r3, #1
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800ab08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fae7 	bl	800b0e0 <osSemaphoreAcquire>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fb28 	bl	800b184 <osSemaphoreRelease>
#endif
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <__NVIC_SetPriority>:
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	6039      	str	r1, [r7, #0]
 800ab46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	db0a      	blt.n	800ab66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	490c      	ldr	r1, [pc, #48]	; (800ab88 <__NVIC_SetPriority+0x4c>)
 800ab56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab5a:	0112      	lsls	r2, r2, #4
 800ab5c:	b2d2      	uxtb	r2, r2
 800ab5e:	440b      	add	r3, r1
 800ab60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ab64:	e00a      	b.n	800ab7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	4908      	ldr	r1, [pc, #32]	; (800ab8c <__NVIC_SetPriority+0x50>)
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	f003 030f 	and.w	r3, r3, #15
 800ab72:	3b04      	subs	r3, #4
 800ab74:	0112      	lsls	r2, r2, #4
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	440b      	add	r3, r1
 800ab7a:	761a      	strb	r2, [r3, #24]
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	e000e100 	.word	0xe000e100
 800ab8c:	e000ed00 	.word	0xe000ed00

0800ab90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ab90:	b580      	push	{r7, lr}
 800ab92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <SysTick_Handler+0x1c>)
 800ab96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ab98:	f002 fb36 	bl	800d208 <xTaskGetSchedulerState>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d001      	beq.n	800aba6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aba2:	f003 fb19 	bl	800e1d8 <xPortSysTickHandler>
  }
}
 800aba6:	bf00      	nop
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	e000e010 	.word	0xe000e010

0800abb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800abb4:	2100      	movs	r1, #0
 800abb6:	f06f 0004 	mvn.w	r0, #4
 800abba:	f7ff ffbf 	bl	800ab3c <__NVIC_SetPriority>
#endif
}
 800abbe:	bf00      	nop
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abca:	f3ef 8305 	mrs	r3, IPSR
 800abce:	603b      	str	r3, [r7, #0]
  return(result);
 800abd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800abd6:	f06f 0305 	mvn.w	r3, #5
 800abda:	607b      	str	r3, [r7, #4]
 800abdc:	e00c      	b.n	800abf8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800abde:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <osKernelInitialize+0x44>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d105      	bne.n	800abf2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800abe6:	4b08      	ldr	r3, [pc, #32]	; (800ac08 <osKernelInitialize+0x44>)
 800abe8:	2201      	movs	r2, #1
 800abea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800abec:	2300      	movs	r3, #0
 800abee:	607b      	str	r3, [r7, #4]
 800abf0:	e002      	b.n	800abf8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800abf2:	f04f 33ff 	mov.w	r3, #4294967295
 800abf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800abf8:	687b      	ldr	r3, [r7, #4]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	2000036c 	.word	0x2000036c

0800ac0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac12:	f3ef 8305 	mrs	r3, IPSR
 800ac16:	603b      	str	r3, [r7, #0]
  return(result);
 800ac18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ac1e:	f06f 0305 	mvn.w	r3, #5
 800ac22:	607b      	str	r3, [r7, #4]
 800ac24:	e010      	b.n	800ac48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ac26:	4b0b      	ldr	r3, [pc, #44]	; (800ac54 <osKernelStart+0x48>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d109      	bne.n	800ac42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ac2e:	f7ff ffbf 	bl	800abb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ac32:	4b08      	ldr	r3, [pc, #32]	; (800ac54 <osKernelStart+0x48>)
 800ac34:	2202      	movs	r2, #2
 800ac36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ac38:	f001 fe8e 	bl	800c958 <vTaskStartScheduler>
      stat = osOK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	607b      	str	r3, [r7, #4]
 800ac40:	e002      	b.n	800ac48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ac42:	f04f 33ff 	mov.w	r3, #4294967295
 800ac46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac48:	687b      	ldr	r3, [r7, #4]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	2000036c 	.word	0x2000036c

0800ac58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08e      	sub	sp, #56	; 0x38
 800ac5c:	af04      	add	r7, sp, #16
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ac64:	2300      	movs	r3, #0
 800ac66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac68:	f3ef 8305 	mrs	r3, IPSR
 800ac6c:	617b      	str	r3, [r7, #20]
  return(result);
 800ac6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d17e      	bne.n	800ad72 <osThreadNew+0x11a>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d07b      	beq.n	800ad72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ac7a:	2380      	movs	r3, #128	; 0x80
 800ac7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ac7e:	2318      	movs	r3, #24
 800ac80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ac86:	f04f 33ff 	mov.w	r3, #4294967295
 800ac8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d045      	beq.n	800ad1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d002      	beq.n	800aca0 <osThreadNew+0x48>
        name = attr->name;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d008      	beq.n	800acc6 <osThreadNew+0x6e>
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	2b38      	cmp	r3, #56	; 0x38
 800acb8:	d805      	bhi.n	800acc6 <osThreadNew+0x6e>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <osThreadNew+0x72>
        return (NULL);
 800acc6:	2300      	movs	r3, #0
 800acc8:	e054      	b.n	800ad74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	089b      	lsrs	r3, r3, #2
 800acd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00e      	beq.n	800ad00 <osThreadNew+0xa8>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	2b5b      	cmp	r3, #91	; 0x5b
 800ace8:	d90a      	bls.n	800ad00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d006      	beq.n	800ad00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <osThreadNew+0xa8>
        mem = 1;
 800acfa:	2301      	movs	r3, #1
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	e010      	b.n	800ad22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10c      	bne.n	800ad22 <osThreadNew+0xca>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d108      	bne.n	800ad22 <osThreadNew+0xca>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d104      	bne.n	800ad22 <osThreadNew+0xca>
          mem = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	61bb      	str	r3, [r7, #24]
 800ad1c:	e001      	b.n	800ad22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d110      	bne.n	800ad4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad30:	9202      	str	r2, [sp, #8]
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	6a3a      	ldr	r2, [r7, #32]
 800ad3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f001 fc34 	bl	800c5ac <xTaskCreateStatic>
 800ad44:	4603      	mov	r3, r0
 800ad46:	613b      	str	r3, [r7, #16]
 800ad48:	e013      	b.n	800ad72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d110      	bne.n	800ad72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	f107 0310 	add.w	r3, r7, #16
 800ad58:	9301      	str	r3, [sp, #4]
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f001 fc7f 	bl	800c666 <xTaskCreate>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d001      	beq.n	800ad72 <osThreadNew+0x11a>
            hTask = NULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ad72:	693b      	ldr	r3, [r7, #16]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3728      	adds	r7, #40	; 0x28
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad84:	f3ef 8305 	mrs	r3, IPSR
 800ad88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d003      	beq.n	800ad98 <osDelay+0x1c>
    stat = osErrorISR;
 800ad90:	f06f 0305 	mvn.w	r3, #5
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	e007      	b.n	800ada8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 fda4 	bl	800c8f0 <vTaskDelay>
    }
  }

  return (stat);
 800ada8:	68fb      	ldr	r3, [r7, #12]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b088      	sub	sp, #32
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adbe:	f3ef 8305 	mrs	r3, IPSR
 800adc2:	60bb      	str	r3, [r7, #8]
  return(result);
 800adc4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d174      	bne.n	800aeb4 <osMutexNew+0x102>
    if (attr != NULL) {
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	61bb      	str	r3, [r7, #24]
 800add6:	e001      	b.n	800addc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <osMutexNew+0x3a>
      rmtx = 1U;
 800ade6:	2301      	movs	r3, #1
 800ade8:	617b      	str	r3, [r7, #20]
 800adea:	e001      	b.n	800adf0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	f003 0308 	and.w	r3, r3, #8
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d15c      	bne.n	800aeb4 <osMutexNew+0x102>
      mem = -1;
 800adfa:	f04f 33ff 	mov.w	r3, #4294967295
 800adfe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d015      	beq.n	800ae32 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d006      	beq.n	800ae1c <osMutexNew+0x6a>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	2b4f      	cmp	r3, #79	; 0x4f
 800ae14:	d902      	bls.n	800ae1c <osMutexNew+0x6a>
          mem = 1;
 800ae16:	2301      	movs	r3, #1
 800ae18:	613b      	str	r3, [r7, #16]
 800ae1a:	e00c      	b.n	800ae36 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d108      	bne.n	800ae36 <osMutexNew+0x84>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d104      	bne.n	800ae36 <osMutexNew+0x84>
            mem = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	e001      	b.n	800ae36 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d112      	bne.n	800ae62 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d007      	beq.n	800ae52 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	4619      	mov	r1, r3
 800ae48:	2004      	movs	r0, #4
 800ae4a:	f000 fc5a 	bl	800b702 <xQueueCreateMutexStatic>
 800ae4e:	61f8      	str	r0, [r7, #28]
 800ae50:	e016      	b.n	800ae80 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	4619      	mov	r1, r3
 800ae58:	2001      	movs	r0, #1
 800ae5a:	f000 fc52 	bl	800b702 <xQueueCreateMutexStatic>
 800ae5e:	61f8      	str	r0, [r7, #28]
 800ae60:	e00e      	b.n	800ae80 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10b      	bne.n	800ae80 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d004      	beq.n	800ae78 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ae6e:	2004      	movs	r0, #4
 800ae70:	f000 fc2f 	bl	800b6d2 <xQueueCreateMutex>
 800ae74:	61f8      	str	r0, [r7, #28]
 800ae76:	e003      	b.n	800ae80 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ae78:	2001      	movs	r0, #1
 800ae7a:	f000 fc2a 	bl	800b6d2 <xQueueCreateMutex>
 800ae7e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00c      	beq.n	800aea0 <osMutexNew+0xee>
        if (attr != NULL) {
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d003      	beq.n	800ae94 <osMutexNew+0xe2>
          name = attr->name;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	e001      	b.n	800ae98 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ae98:	68f9      	ldr	r1, [r7, #12]
 800ae9a:	69f8      	ldr	r0, [r7, #28]
 800ae9c:	f001 fafe 	bl	800c49c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d006      	beq.n	800aeb4 <osMutexNew+0x102>
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	f043 0301 	orr.w	r3, r3, #1
 800aeb2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800aeb4:	69fb      	ldr	r3, [r7, #28]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b086      	sub	sp, #24
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f023 0301 	bic.w	r3, r3, #1
 800aece:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aedc:	f3ef 8305 	mrs	r3, IPSR
 800aee0:	60bb      	str	r3, [r7, #8]
  return(result);
 800aee2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d003      	beq.n	800aef0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800aee8:	f06f 0305 	mvn.w	r3, #5
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	e02c      	b.n	800af4a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d103      	bne.n	800aefe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800aef6:	f06f 0303 	mvn.w	r3, #3
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	e025      	b.n	800af4a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d011      	beq.n	800af28 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6938      	ldr	r0, [r7, #16]
 800af08:	f000 fc4a 	bl	800b7a0 <xQueueTakeMutexRecursive>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d01b      	beq.n	800af4a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800af18:	f06f 0301 	mvn.w	r3, #1
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	e014      	b.n	800af4a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800af20:	f06f 0302 	mvn.w	r3, #2
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	e010      	b.n	800af4a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6938      	ldr	r0, [r7, #16]
 800af2c:	f000 ffde 	bl	800beec <xQueueSemaphoreTake>
 800af30:	4603      	mov	r3, r0
 800af32:	2b01      	cmp	r3, #1
 800af34:	d009      	beq.n	800af4a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800af3c:	f06f 0301 	mvn.w	r3, #1
 800af40:	617b      	str	r3, [r7, #20]
 800af42:	e002      	b.n	800af4a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800af44:	f06f 0302 	mvn.w	r3, #2
 800af48:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800af4a:	697b      	ldr	r3, [r7, #20]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3718      	adds	r7, #24
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f023 0301 	bic.w	r3, r3, #1
 800af62:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af70:	f3ef 8305 	mrs	r3, IPSR
 800af74:	60bb      	str	r3, [r7, #8]
  return(result);
 800af76:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <osMutexRelease+0x30>
    stat = osErrorISR;
 800af7c:	f06f 0305 	mvn.w	r3, #5
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	e01f      	b.n	800afc4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d103      	bne.n	800af92 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800af8a:	f06f 0303 	mvn.w	r3, #3
 800af8e:	617b      	str	r3, [r7, #20]
 800af90:	e018      	b.n	800afc4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d009      	beq.n	800afac <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800af98:	6938      	ldr	r0, [r7, #16]
 800af9a:	f000 fbcd 	bl	800b738 <xQueueGiveMutexRecursive>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d00f      	beq.n	800afc4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800afa4:	f06f 0302 	mvn.w	r3, #2
 800afa8:	617b      	str	r3, [r7, #20]
 800afaa:	e00b      	b.n	800afc4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800afac:	2300      	movs	r3, #0
 800afae:	2200      	movs	r2, #0
 800afb0:	2100      	movs	r1, #0
 800afb2:	6938      	ldr	r0, [r7, #16]
 800afb4:	f000 fc94 	bl	800b8e0 <xQueueGenericSend>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d002      	beq.n	800afc4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800afbe:	f06f 0302 	mvn.w	r3, #2
 800afc2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800afc4:	697b      	ldr	r3, [r7, #20]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800afce:	b580      	push	{r7, lr}
 800afd0:	b08a      	sub	sp, #40	; 0x28
 800afd2:	af02      	add	r7, sp, #8
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afde:	f3ef 8305 	mrs	r3, IPSR
 800afe2:	613b      	str	r3, [r7, #16]
  return(result);
 800afe4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d175      	bne.n	800b0d6 <osSemaphoreNew+0x108>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d072      	beq.n	800b0d6 <osSemaphoreNew+0x108>
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d86e      	bhi.n	800b0d6 <osSemaphoreNew+0x108>
    mem = -1;
 800aff8:	f04f 33ff 	mov.w	r3, #4294967295
 800affc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d015      	beq.n	800b030 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d006      	beq.n	800b01a <osSemaphoreNew+0x4c>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	2b4f      	cmp	r3, #79	; 0x4f
 800b012:	d902      	bls.n	800b01a <osSemaphoreNew+0x4c>
        mem = 1;
 800b014:	2301      	movs	r3, #1
 800b016:	61bb      	str	r3, [r7, #24]
 800b018:	e00c      	b.n	800b034 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d108      	bne.n	800b034 <osSemaphoreNew+0x66>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d104      	bne.n	800b034 <osSemaphoreNew+0x66>
          mem = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	e001      	b.n	800b034 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03a:	d04c      	beq.n	800b0d6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d128      	bne.n	800b094 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d10a      	bne.n	800b05e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	2203      	movs	r2, #3
 800b04e:	9200      	str	r2, [sp, #0]
 800b050:	2200      	movs	r2, #0
 800b052:	2100      	movs	r1, #0
 800b054:	2001      	movs	r0, #1
 800b056:	f000 fa4d 	bl	800b4f4 <xQueueGenericCreateStatic>
 800b05a:	61f8      	str	r0, [r7, #28]
 800b05c:	e005      	b.n	800b06a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b05e:	2203      	movs	r2, #3
 800b060:	2100      	movs	r1, #0
 800b062:	2001      	movs	r0, #1
 800b064:	f000 fabe 	bl	800b5e4 <xQueueGenericCreate>
 800b068:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d022      	beq.n	800b0b6 <osSemaphoreNew+0xe8>
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d01f      	beq.n	800b0b6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b076:	2300      	movs	r3, #0
 800b078:	2200      	movs	r2, #0
 800b07a:	2100      	movs	r1, #0
 800b07c:	69f8      	ldr	r0, [r7, #28]
 800b07e:	f000 fc2f 	bl	800b8e0 <xQueueGenericSend>
 800b082:	4603      	mov	r3, r0
 800b084:	2b01      	cmp	r3, #1
 800b086:	d016      	beq.n	800b0b6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b088:	69f8      	ldr	r0, [r7, #28]
 800b08a:	f001 f8bb 	bl	800c204 <vQueueDelete>
            hSemaphore = NULL;
 800b08e:	2300      	movs	r3, #0
 800b090:	61fb      	str	r3, [r7, #28]
 800b092:	e010      	b.n	800b0b6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d108      	bne.n	800b0ac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 fbb2 	bl	800b80c <xQueueCreateCountingSemaphoreStatic>
 800b0a8:	61f8      	str	r0, [r7, #28]
 800b0aa:	e004      	b.n	800b0b6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f000 fbe3 	bl	800b87a <xQueueCreateCountingSemaphore>
 800b0b4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00c      	beq.n	800b0d6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <osSemaphoreNew+0xfc>
          name = attr->name;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	e001      	b.n	800b0ce <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b0ce:	6979      	ldr	r1, [r7, #20]
 800b0d0:	69f8      	ldr	r0, [r7, #28]
 800b0d2:	f001 f9e3 	bl	800c49c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b0d6:	69fb      	ldr	r3, [r7, #28]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3720      	adds	r7, #32
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d103      	bne.n	800b100 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b0f8:	f06f 0303 	mvn.w	r3, #3
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	e039      	b.n	800b174 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b100:	f3ef 8305 	mrs	r3, IPSR
 800b104:	60fb      	str	r3, [r7, #12]
  return(result);
 800b106:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d022      	beq.n	800b152 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b112:	f06f 0303 	mvn.w	r3, #3
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	e02c      	b.n	800b174 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b11e:	f107 0308 	add.w	r3, r7, #8
 800b122:	461a      	mov	r2, r3
 800b124:	2100      	movs	r1, #0
 800b126:	6938      	ldr	r0, [r7, #16]
 800b128:	f000 ffec 	bl	800c104 <xQueueReceiveFromISR>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d003      	beq.n	800b13a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b132:	f06f 0302 	mvn.w	r3, #2
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e01c      	b.n	800b174 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d019      	beq.n	800b174 <osSemaphoreAcquire+0x94>
 800b140:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <osSemaphoreAcquire+0xa0>)
 800b142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	e010      	b.n	800b174 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6938      	ldr	r0, [r7, #16]
 800b156:	f000 fec9 	bl	800beec <xQueueSemaphoreTake>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d009      	beq.n	800b174 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b166:	f06f 0301 	mvn.w	r3, #1
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	e002      	b.n	800b174 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b16e:	f06f 0302 	mvn.w	r3, #2
 800b172:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b174:	697b      	ldr	r3, [r7, #20]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d103      	bne.n	800b1a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b19a:	f06f 0303 	mvn.w	r3, #3
 800b19e:	617b      	str	r3, [r7, #20]
 800b1a0:	e02c      	b.n	800b1fc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1a2:	f3ef 8305 	mrs	r3, IPSR
 800b1a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01a      	beq.n	800b1e4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b1b2:	f107 0308 	add.w	r3, r7, #8
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6938      	ldr	r0, [r7, #16]
 800b1ba:	f000 fd2a 	bl	800bc12 <xQueueGiveFromISR>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d003      	beq.n	800b1cc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b1c4:	f06f 0302 	mvn.w	r3, #2
 800b1c8:	617b      	str	r3, [r7, #20]
 800b1ca:	e017      	b.n	800b1fc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d014      	beq.n	800b1fc <osSemaphoreRelease+0x78>
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <osSemaphoreRelease+0x84>)
 800b1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	e00b      	b.n	800b1fc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f000 fb78 	bl	800b8e0 <xQueueGenericSend>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d002      	beq.n	800b1fc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b1f6:	f06f 0302 	mvn.w	r3, #2
 800b1fa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b1fc:	697b      	ldr	r3, [r7, #20]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	e000ed04 	.word	0xe000ed04

0800b20c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b218:	f3ef 8305 	mrs	r3, IPSR
 800b21c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b21e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b224:	f06f 0305 	mvn.w	r3, #5
 800b228:	617b      	str	r3, [r7, #20]
 800b22a:	e00e      	b.n	800b24a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d103      	bne.n	800b23a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b232:	f06f 0303 	mvn.w	r3, #3
 800b236:	617b      	str	r3, [r7, #20]
 800b238:	e007      	b.n	800b24a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b23a:	6938      	ldr	r0, [r7, #16]
 800b23c:	f001 f958 	bl	800c4f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b240:	2300      	movs	r3, #0
 800b242:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b244:	6938      	ldr	r0, [r7, #16]
 800b246:	f000 ffdd 	bl	800c204 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b24a:	697b      	ldr	r3, [r7, #20]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	4a07      	ldr	r2, [pc, #28]	; (800b280 <vApplicationGetIdleTaskMemory+0x2c>)
 800b264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	4a06      	ldr	r2, [pc, #24]	; (800b284 <vApplicationGetIdleTaskMemory+0x30>)
 800b26a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2280      	movs	r2, #128	; 0x80
 800b270:	601a      	str	r2, [r3, #0]
}
 800b272:	bf00      	nop
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20000370 	.word	0x20000370
 800b284:	200003cc 	.word	0x200003cc

0800b288 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	4a07      	ldr	r2, [pc, #28]	; (800b2b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b298:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	4a06      	ldr	r2, [pc, #24]	; (800b2b8 <vApplicationGetTimerTaskMemory+0x30>)
 800b29e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2a6:	601a      	str	r2, [r3, #0]
}
 800b2a8:	bf00      	nop
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr
 800b2b4:	200005cc 	.word	0x200005cc
 800b2b8:	20000628 	.word	0x20000628

0800b2bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f103 0208 	add.w	r2, r3, #8
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f103 0208 	add.w	r2, r3, #8
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f103 0208 	add.w	r2, r3, #8
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b30a:	bf00      	nop
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	689a      	ldr	r2, [r3, #8]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	1c5a      	adds	r2, r3, #1
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	601a      	str	r2, [r3, #0]
}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b35e:	b480      	push	{r7}
 800b360:	b085      	sub	sp, #20
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b374:	d103      	bne.n	800b37e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	e00c      	b.n	800b398 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	3308      	adds	r3, #8
 800b382:	60fb      	str	r3, [r7, #12]
 800b384:	e002      	b.n	800b38c <vListInsert+0x2e>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	429a      	cmp	r2, r3
 800b396:	d2f6      	bcs.n	800b386 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	6892      	ldr	r2, [r2, #8]
 800b3e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	6852      	ldr	r2, [r2, #4]
 800b3f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d103      	bne.n	800b404 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689a      	ldr	r2, [r3, #8]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	1e5a      	subs	r2, r3, #1
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b44e:	f002 fe31 	bl	800e0b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45a:	68f9      	ldr	r1, [r7, #12]
 800b45c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b45e:	fb01 f303 	mul.w	r3, r1, r3
 800b462:	441a      	add	r2, r3
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47e:	3b01      	subs	r3, #1
 800b480:	68f9      	ldr	r1, [r7, #12]
 800b482:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	441a      	add	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	22ff      	movs	r2, #255	; 0xff
 800b492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	22ff      	movs	r2, #255	; 0xff
 800b49a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d114      	bne.n	800b4ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01a      	beq.n	800b4e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3310      	adds	r3, #16
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f001 fcdb 	bl	800ce6c <xTaskRemoveFromEventList>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d012      	beq.n	800b4e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4bc:	4b0c      	ldr	r3, [pc, #48]	; (800b4f0 <xQueueGenericReset+0xcc>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	e009      	b.n	800b4e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3310      	adds	r3, #16
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fef2 	bl	800b2bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3324      	adds	r3, #36	; 0x24
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff feed 	bl	800b2bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b4e2:	f002 fe17 	bl	800e114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4e6:	2301      	movs	r3, #1
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	e000ed04 	.word	0xe000ed04

0800b4f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08e      	sub	sp, #56	; 0x38
 800b4f8:	af02      	add	r7, sp, #8
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <xQueueGenericCreateStatic+0x52>
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d001      	beq.n	800b54a <xQueueGenericCreateStatic+0x56>
 800b546:	2301      	movs	r3, #1
 800b548:	e000      	b.n	800b54c <xQueueGenericCreateStatic+0x58>
 800b54a:	2300      	movs	r3, #0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	623b      	str	r3, [r7, #32]
}
 800b562:	bf00      	nop
 800b564:	e7fe      	b.n	800b564 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <xQueueGenericCreateStatic+0x7e>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <xQueueGenericCreateStatic+0x82>
 800b572:	2301      	movs	r3, #1
 800b574:	e000      	b.n	800b578 <xQueueGenericCreateStatic+0x84>
 800b576:	2300      	movs	r3, #0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	61fb      	str	r3, [r7, #28]
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b592:	2350      	movs	r3, #80	; 0x50
 800b594:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b50      	cmp	r3, #80	; 0x50
 800b59a:	d00a      	beq.n	800b5b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	61bb      	str	r3, [r7, #24]
}
 800b5ae:	bf00      	nop
 800b5b0:	e7fe      	b.n	800b5b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00d      	beq.n	800b5da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	68b9      	ldr	r1, [r7, #8]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f83f 	bl	800b658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3730      	adds	r7, #48	; 0x30
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08a      	sub	sp, #40	; 0x28
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10a      	bne.n	800b60e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	613b      	str	r3, [r7, #16]
}
 800b60a:	bf00      	nop
 800b60c:	e7fe      	b.n	800b60c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	fb02 f303 	mul.w	r3, r2, r3
 800b616:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	3350      	adds	r3, #80	; 0x50
 800b61c:	4618      	mov	r0, r3
 800b61e:	f002 fe6b 	bl	800e2f8 <pvPortMalloc>
 800b622:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d011      	beq.n	800b64e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	3350      	adds	r3, #80	; 0x50
 800b632:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b63c:	79fa      	ldrb	r2, [r7, #7]
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	4613      	mov	r3, r2
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	68b9      	ldr	r1, [r7, #8]
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f000 f805 	bl	800b658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b64e:	69bb      	ldr	r3, [r7, #24]
	}
 800b650:	4618      	mov	r0, r3
 800b652:	3720      	adds	r7, #32
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d103      	bne.n	800b674 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	e002      	b.n	800b67a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b686:	2101      	movs	r1, #1
 800b688:	69b8      	ldr	r0, [r7, #24]
 800b68a:	f7ff fecb 	bl	800b424 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	78fa      	ldrb	r2, [r7, #3]
 800b692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b696:	bf00      	nop
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b082      	sub	sp, #8
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00e      	beq.n	800b6ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b6be:	2300      	movs	r3, #0
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f90b 	bl	800b8e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b086      	sub	sp, #24
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	4603      	mov	r3, r0
 800b6da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	617b      	str	r3, [r7, #20]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	6939      	ldr	r1, [r7, #16]
 800b6ea:	6978      	ldr	r0, [r7, #20]
 800b6ec:	f7ff ff7a 	bl	800b5e4 <xQueueGenericCreate>
 800b6f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff ffd3 	bl	800b69e <prvInitialiseMutex>

		return xNewQueue;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
	}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b702:	b580      	push	{r7, lr}
 800b704:	b088      	sub	sp, #32
 800b706:	af02      	add	r7, sp, #8
 800b708:	4603      	mov	r3, r0
 800b70a:	6039      	str	r1, [r7, #0]
 800b70c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b70e:	2301      	movs	r3, #1
 800b710:	617b      	str	r3, [r7, #20]
 800b712:	2300      	movs	r3, #0
 800b714:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2200      	movs	r2, #0
 800b71e:	6939      	ldr	r1, [r7, #16]
 800b720:	6978      	ldr	r0, [r7, #20]
 800b722:	f7ff fee7 	bl	800b4f4 <xQueueGenericCreateStatic>
 800b726:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f7ff ffb8 	bl	800b69e <prvInitialiseMutex>

		return xNewQueue;
 800b72e:	68fb      	ldr	r3, [r7, #12]
	}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b738:	b590      	push	{r4, r7, lr}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10a      	bne.n	800b760 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	60fb      	str	r3, [r7, #12]
}
 800b75c:	bf00      	nop
 800b75e:	e7fe      	b.n	800b75e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	689c      	ldr	r4, [r3, #8]
 800b764:	f001 fd40 	bl	800d1e8 <xTaskGetCurrentTaskHandle>
 800b768:	4603      	mov	r3, r0
 800b76a:	429c      	cmp	r4, r3
 800b76c:	d111      	bne.n	800b792 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	1e5a      	subs	r2, r3, #1
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d105      	bne.n	800b78c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b780:	2300      	movs	r3, #0
 800b782:	2200      	movs	r2, #0
 800b784:	2100      	movs	r1, #0
 800b786:	6938      	ldr	r0, [r7, #16]
 800b788:	f000 f8aa 	bl	800b8e0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b78c:	2301      	movs	r3, #1
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	e001      	b.n	800b796 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b796:	697b      	ldr	r3, [r7, #20]
	}
 800b798:	4618      	mov	r0, r3
 800b79a:	371c      	adds	r7, #28
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd90      	pop	{r4, r7, pc}

0800b7a0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b7a0:	b590      	push	{r4, r7, lr}
 800b7a2:	b087      	sub	sp, #28
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	60fb      	str	r3, [r7, #12]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	689c      	ldr	r4, [r3, #8]
 800b7ce:	f001 fd0b 	bl	800d1e8 <xTaskGetCurrentTaskHandle>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	429c      	cmp	r4, r3
 800b7d6:	d107      	bne.n	800b7e8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	1c5a      	adds	r2, r3, #1
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	617b      	str	r3, [r7, #20]
 800b7e6:	e00c      	b.n	800b802 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6938      	ldr	r0, [r7, #16]
 800b7ec:	f000 fb7e 	bl	800beec <xQueueSemaphoreTake>
 800b7f0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d004      	beq.n	800b802 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b802:	697b      	ldr	r3, [r7, #20]
	}
 800b804:	4618      	mov	r0, r3
 800b806:	371c      	adds	r7, #28
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd90      	pop	{r4, r7, pc}

0800b80c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08a      	sub	sp, #40	; 0x28
 800b810:	af02      	add	r7, sp, #8
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10a      	bne.n	800b834 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	61bb      	str	r3, [r7, #24]
}
 800b830:	bf00      	nop
 800b832:	e7fe      	b.n	800b832 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d90a      	bls.n	800b852 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	617b      	str	r3, [r7, #20]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b852:	2302      	movs	r3, #2
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	2100      	movs	r1, #0
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f7ff fe49 	bl	800b4f4 <xQueueGenericCreateStatic>
 800b862:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b870:	69fb      	ldr	r3, [r7, #28]
	}
 800b872:	4618      	mov	r0, r3
 800b874:	3720      	adds	r7, #32
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b086      	sub	sp, #24
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10a      	bne.n	800b8a0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	613b      	str	r3, [r7, #16]
}
 800b89c:	bf00      	nop
 800b89e:	e7fe      	b.n	800b89e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d90a      	bls.n	800b8be <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	60fb      	str	r3, [r7, #12]
}
 800b8ba:	bf00      	nop
 800b8bc:	e7fe      	b.n	800b8bc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b8be:	2202      	movs	r2, #2
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff fe8e 	bl	800b5e4 <xQueueGenericCreate>
 800b8c8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b8d6:	697b      	ldr	r3, [r7, #20]
	}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08e      	sub	sp, #56	; 0x38
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10a      	bne.n	800b912 <xQueueGenericSend+0x32>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d103      	bne.n	800b920 <xQueueGenericSend+0x40>
 800b918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <xQueueGenericSend+0x44>
 800b920:	2301      	movs	r3, #1
 800b922:	e000      	b.n	800b926 <xQueueGenericSend+0x46>
 800b924:	2300      	movs	r3, #0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10a      	bne.n	800b940 <xQueueGenericSend+0x60>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b93c:	bf00      	nop
 800b93e:	e7fe      	b.n	800b93e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b02      	cmp	r3, #2
 800b944:	d103      	bne.n	800b94e <xQueueGenericSend+0x6e>
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d101      	bne.n	800b952 <xQueueGenericSend+0x72>
 800b94e:	2301      	movs	r3, #1
 800b950:	e000      	b.n	800b954 <xQueueGenericSend+0x74>
 800b952:	2300      	movs	r3, #0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <xQueueGenericSend+0x8e>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	623b      	str	r3, [r7, #32]
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b96e:	f001 fc4b 	bl	800d208 <xTaskGetSchedulerState>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d102      	bne.n	800b97e <xQueueGenericSend+0x9e>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <xQueueGenericSend+0xa2>
 800b97e:	2301      	movs	r3, #1
 800b980:	e000      	b.n	800b984 <xQueueGenericSend+0xa4>
 800b982:	2300      	movs	r3, #0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <xQueueGenericSend+0xbe>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	61fb      	str	r3, [r7, #28]
}
 800b99a:	bf00      	nop
 800b99c:	e7fe      	b.n	800b99c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b99e:	f002 fb89 	bl	800e0b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d302      	bcc.n	800b9b4 <xQueueGenericSend+0xd4>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d129      	bne.n	800ba08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	68b9      	ldr	r1, [r7, #8]
 800b9b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ba:	f000 fc5e 	bl	800c27a <prvCopyDataToQueue>
 800b9be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d010      	beq.n	800b9ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ca:	3324      	adds	r3, #36	; 0x24
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 fa4d 	bl	800ce6c <xTaskRemoveFromEventList>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d013      	beq.n	800ba00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9d8:	4b3f      	ldr	r3, [pc, #252]	; (800bad8 <xQueueGenericSend+0x1f8>)
 800b9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	e00a      	b.n	800ba00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d007      	beq.n	800ba00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b9f0:	4b39      	ldr	r3, [pc, #228]	; (800bad8 <xQueueGenericSend+0x1f8>)
 800b9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba00:	f002 fb88 	bl	800e114 <vPortExitCritical>
				return pdPASS;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e063      	b.n	800bad0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d103      	bne.n	800ba16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba0e:	f002 fb81 	bl	800e114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	e05c      	b.n	800bad0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba1c:	f107 0314 	add.w	r3, r7, #20
 800ba20:	4618      	mov	r0, r3
 800ba22:	f001 fa87 	bl	800cf34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba26:	2301      	movs	r3, #1
 800ba28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba2a:	f002 fb73 	bl	800e114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba2e:	f000 fff9 	bl	800ca24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba32:	f002 fb3f 	bl	800e0b4 <vPortEnterCritical>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba3c:	b25b      	sxtb	r3, r3
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba42:	d103      	bne.n	800ba4c <xQueueGenericSend+0x16c>
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba52:	b25b      	sxtb	r3, r3
 800ba54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba58:	d103      	bne.n	800ba62 <xQueueGenericSend+0x182>
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba62:	f002 fb57 	bl	800e114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba66:	1d3a      	adds	r2, r7, #4
 800ba68:	f107 0314 	add.w	r3, r7, #20
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 fa76 	bl	800cf60 <xTaskCheckForTimeOut>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d124      	bne.n	800bac4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba7c:	f000 fcf5 	bl	800c46a <prvIsQueueFull>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d018      	beq.n	800bab8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	3310      	adds	r3, #16
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f001 f99c 	bl	800cdcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba96:	f000 fc80 	bl	800c39a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba9a:	f000 ffd1 	bl	800ca40 <xTaskResumeAll>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f47f af7c 	bne.w	800b99e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800baa6:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <xQueueGenericSend+0x1f8>)
 800baa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	e772      	b.n	800b99e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baba:	f000 fc6e 	bl	800c39a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800babe:	f000 ffbf 	bl	800ca40 <xTaskResumeAll>
 800bac2:	e76c      	b.n	800b99e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bac6:	f000 fc68 	bl	800c39a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800baca:	f000 ffb9 	bl	800ca40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3738      	adds	r7, #56	; 0x38
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	e000ed04 	.word	0xe000ed04

0800badc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b090      	sub	sp, #64	; 0x40
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10a      	bne.n	800bb0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d103      	bne.n	800bb18 <xQueueGenericSendFromISR+0x3c>
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <xQueueGenericSendFromISR+0x40>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e000      	b.n	800bb1e <xQueueGenericSendFromISR+0x42>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10a      	bne.n	800bb38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb34:	bf00      	nop
 800bb36:	e7fe      	b.n	800bb36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d103      	bne.n	800bb46 <xQueueGenericSendFromISR+0x6a>
 800bb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d101      	bne.n	800bb4a <xQueueGenericSendFromISR+0x6e>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e000      	b.n	800bb4c <xQueueGenericSendFromISR+0x70>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10a      	bne.n	800bb66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	623b      	str	r3, [r7, #32]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb66:	f002 fb87 	bl	800e278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb6a:	f3ef 8211 	mrs	r2, BASEPRI
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	61fa      	str	r2, [r7, #28]
 800bb80:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bb82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d302      	bcc.n	800bb98 <xQueueGenericSendFromISR+0xbc>
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d12f      	bne.n	800bbf8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbae:	f000 fb64 	bl	800c27a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbba:	d112      	bne.n	800bbe2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d016      	beq.n	800bbf2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc6:	3324      	adds	r3, #36	; 0x24
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f001 f94f 	bl	800ce6c <xTaskRemoveFromEventList>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00e      	beq.n	800bbf2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00b      	beq.n	800bbf2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	601a      	str	r2, [r3, #0]
 800bbe0:	e007      	b.n	800bbf2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	b25a      	sxtb	r2, r3
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bbf6:	e001      	b.n	800bbfc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3740      	adds	r7, #64	; 0x40
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b08e      	sub	sp, #56	; 0x38
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	623b      	str	r3, [r7, #32]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00a      	beq.n	800bc5a <xQueueGiveFromISR+0x48>
	__asm volatile
 800bc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	61fb      	str	r3, [r7, #28]
}
 800bc56:	bf00      	nop
 800bc58:	e7fe      	b.n	800bc58 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d103      	bne.n	800bc6a <xQueueGiveFromISR+0x58>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <xQueueGiveFromISR+0x5c>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e000      	b.n	800bc70 <xQueueGiveFromISR+0x5e>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <xQueueGiveFromISR+0x78>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	61bb      	str	r3, [r7, #24]
}
 800bc86:	bf00      	nop
 800bc88:	e7fe      	b.n	800bc88 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc8a:	f002 faf5 	bl	800e278 <vPortValidateInterruptPriority>
	__asm volatile
 800bc8e:	f3ef 8211 	mrs	r2, BASEPRI
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	617a      	str	r2, [r7, #20]
 800bca4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bca6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d22b      	bcs.n	800bd12 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bccc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd4:	d112      	bne.n	800bcfc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d016      	beq.n	800bd0c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce0:	3324      	adds	r3, #36	; 0x24
 800bce2:	4618      	mov	r0, r3
 800bce4:	f001 f8c2 	bl	800ce6c <xTaskRemoveFromEventList>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00e      	beq.n	800bd0c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	e007      	b.n	800bd0c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd00:	3301      	adds	r3, #1
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	b25a      	sxtb	r2, r3
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd10:	e001      	b.n	800bd16 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	637b      	str	r3, [r7, #52]	; 0x34
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f383 8811 	msr	BASEPRI, r3
}
 800bd20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3738      	adds	r7, #56	; 0x38
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08c      	sub	sp, #48	; 0x30
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10a      	bne.n	800bd5c <xQueueReceive+0x30>
	__asm volatile
 800bd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4a:	f383 8811 	msr	BASEPRI, r3
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	623b      	str	r3, [r7, #32]
}
 800bd58:	bf00      	nop
 800bd5a:	e7fe      	b.n	800bd5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d103      	bne.n	800bd6a <xQueueReceive+0x3e>
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <xQueueReceive+0x42>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <xQueueReceive+0x44>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <xQueueReceive+0x5e>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	61fb      	str	r3, [r7, #28]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd8a:	f001 fa3d 	bl	800d208 <xTaskGetSchedulerState>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d102      	bne.n	800bd9a <xQueueReceive+0x6e>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <xQueueReceive+0x72>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e000      	b.n	800bda0 <xQueueReceive+0x74>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueReceive+0x8e>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	61bb      	str	r3, [r7, #24]
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdba:	f002 f97b 	bl	800e0b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01f      	beq.n	800be0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdce:	f000 fabe 	bl	800c34e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	1e5a      	subs	r2, r3, #1
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00f      	beq.n	800be02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	3310      	adds	r3, #16
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 f840 	bl	800ce6c <xTaskRemoveFromEventList>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d007      	beq.n	800be02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdf2:	4b3d      	ldr	r3, [pc, #244]	; (800bee8 <xQueueReceive+0x1bc>)
 800bdf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf8:	601a      	str	r2, [r3, #0]
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be02:	f002 f987 	bl	800e114 <vPortExitCritical>
				return pdPASS;
 800be06:	2301      	movs	r3, #1
 800be08:	e069      	b.n	800bede <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d103      	bne.n	800be18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be10:	f002 f980 	bl	800e114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be14:	2300      	movs	r3, #0
 800be16:	e062      	b.n	800bede <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d106      	bne.n	800be2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be1e:	f107 0310 	add.w	r3, r7, #16
 800be22:	4618      	mov	r0, r3
 800be24:	f001 f886 	bl	800cf34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be28:	2301      	movs	r3, #1
 800be2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be2c:	f002 f972 	bl	800e114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be30:	f000 fdf8 	bl	800ca24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be34:	f002 f93e 	bl	800e0b4 <vPortEnterCritical>
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be3e:	b25b      	sxtb	r3, r3
 800be40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be44:	d103      	bne.n	800be4e <xQueueReceive+0x122>
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be54:	b25b      	sxtb	r3, r3
 800be56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5a:	d103      	bne.n	800be64 <xQueueReceive+0x138>
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be64:	f002 f956 	bl	800e114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be68:	1d3a      	adds	r2, r7, #4
 800be6a:	f107 0310 	add.w	r3, r7, #16
 800be6e:	4611      	mov	r1, r2
 800be70:	4618      	mov	r0, r3
 800be72:	f001 f875 	bl	800cf60 <xTaskCheckForTimeOut>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d123      	bne.n	800bec4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be7e:	f000 fade 	bl	800c43e <prvIsQueueEmpty>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d017      	beq.n	800beb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	3324      	adds	r3, #36	; 0x24
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	4611      	mov	r1, r2
 800be90:	4618      	mov	r0, r3
 800be92:	f000 ff9b 	bl	800cdcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be98:	f000 fa7f 	bl	800c39a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be9c:	f000 fdd0 	bl	800ca40 <xTaskResumeAll>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d189      	bne.n	800bdba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bea6:	4b10      	ldr	r3, [pc, #64]	; (800bee8 <xQueueReceive+0x1bc>)
 800bea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	e780      	b.n	800bdba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800beb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beba:	f000 fa6e 	bl	800c39a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bebe:	f000 fdbf 	bl	800ca40 <xTaskResumeAll>
 800bec2:	e77a      	b.n	800bdba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec6:	f000 fa68 	bl	800c39a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beca:	f000 fdb9 	bl	800ca40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed0:	f000 fab5 	bl	800c43e <prvIsQueueEmpty>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f43f af6f 	beq.w	800bdba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bedc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3730      	adds	r7, #48	; 0x30
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08e      	sub	sp, #56	; 0x38
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bef6:	2300      	movs	r3, #0
 800bef8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800befe:	2300      	movs	r3, #0
 800bf00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	623b      	str	r3, [r7, #32]
}
 800bf1a:	bf00      	nop
 800bf1c:	e7fe      	b.n	800bf1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	61fb      	str	r3, [r7, #28]
}
 800bf38:	bf00      	nop
 800bf3a:	e7fe      	b.n	800bf3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf3c:	f001 f964 	bl	800d208 <xTaskGetSchedulerState>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d102      	bne.n	800bf4c <xQueueSemaphoreTake+0x60>
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <xQueueSemaphoreTake+0x64>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <xQueueSemaphoreTake+0x66>
 800bf50:	2300      	movs	r3, #0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10a      	bne.n	800bf6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	61bb      	str	r3, [r7, #24]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf6c:	f002 f8a2 	bl	800e0b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d024      	beq.n	800bfc6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7e:	1e5a      	subs	r2, r3, #1
 800bf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d104      	bne.n	800bf96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf8c:	f001 fab2 	bl	800d4f4 <pvTaskIncrementMutexHeldCount>
 800bf90:	4602      	mov	r2, r0
 800bf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf94:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00f      	beq.n	800bfbe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa0:	3310      	adds	r3, #16
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 ff62 	bl	800ce6c <xTaskRemoveFromEventList>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d007      	beq.n	800bfbe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfae:	4b54      	ldr	r3, [pc, #336]	; (800c100 <xQueueSemaphoreTake+0x214>)
 800bfb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfbe:	f002 f8a9 	bl	800e114 <vPortExitCritical>
				return pdPASS;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e097      	b.n	800c0f6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d111      	bne.n	800bff0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00a      	beq.n	800bfe8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	617b      	str	r3, [r7, #20]
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bfe8:	f002 f894 	bl	800e114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfec:	2300      	movs	r3, #0
 800bfee:	e082      	b.n	800c0f6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bff6:	f107 030c 	add.w	r3, r7, #12
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 ff9a 	bl	800cf34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c000:	2301      	movs	r3, #1
 800c002:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c004:	f002 f886 	bl	800e114 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c008:	f000 fd0c 	bl	800ca24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c00c:	f002 f852 	bl	800e0b4 <vPortEnterCritical>
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c016:	b25b      	sxtb	r3, r3
 800c018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01c:	d103      	bne.n	800c026 <xQueueSemaphoreTake+0x13a>
 800c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c020:	2200      	movs	r2, #0
 800c022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c02c:	b25b      	sxtb	r3, r3
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d103      	bne.n	800c03c <xQueueSemaphoreTake+0x150>
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c03c:	f002 f86a 	bl	800e114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c040:	463a      	mov	r2, r7
 800c042:	f107 030c 	add.w	r3, r7, #12
 800c046:	4611      	mov	r1, r2
 800c048:	4618      	mov	r0, r3
 800c04a:	f000 ff89 	bl	800cf60 <xTaskCheckForTimeOut>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d132      	bne.n	800c0ba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c056:	f000 f9f2 	bl	800c43e <prvIsQueueEmpty>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d026      	beq.n	800c0ae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d109      	bne.n	800c07c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c068:	f002 f824 	bl	800e0b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	4618      	mov	r0, r3
 800c072:	f001 f8e7 	bl	800d244 <xTaskPriorityInherit>
 800c076:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c078:	f002 f84c 	bl	800e114 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	3324      	adds	r3, #36	; 0x24
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	4611      	mov	r1, r2
 800c084:	4618      	mov	r0, r3
 800c086:	f000 fea1 	bl	800cdcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c08c:	f000 f985 	bl	800c39a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c090:	f000 fcd6 	bl	800ca40 <xTaskResumeAll>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	f47f af68 	bne.w	800bf6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c09c:	4b18      	ldr	r3, [pc, #96]	; (800c100 <xQueueSemaphoreTake+0x214>)
 800c09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	e75e      	b.n	800bf6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c0ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0b0:	f000 f973 	bl	800c39a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0b4:	f000 fcc4 	bl	800ca40 <xTaskResumeAll>
 800c0b8:	e758      	b.n	800bf6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0bc:	f000 f96d 	bl	800c39a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0c0:	f000 fcbe 	bl	800ca40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0c6:	f000 f9ba 	bl	800c43e <prvIsQueueEmpty>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f43f af4d 	beq.w	800bf6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00d      	beq.n	800c0f4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c0d8:	f001 ffec 	bl	800e0b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c0dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0de:	f000 f8b4 	bl	800c24a <prvGetDisinheritPriorityAfterTimeout>
 800c0e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f001 f980 	bl	800d3f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c0f0:	f002 f810 	bl	800e114 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3738      	adds	r7, #56	; 0x38
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	e000ed04 	.word	0xe000ed04

0800c104 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b08e      	sub	sp, #56	; 0x38
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	623b      	str	r3, [r7, #32]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d103      	bne.n	800c13e <xQueueReceiveFromISR+0x3a>
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <xQueueReceiveFromISR+0x3e>
 800c13e:	2301      	movs	r3, #1
 800c140:	e000      	b.n	800c144 <xQueueReceiveFromISR+0x40>
 800c142:	2300      	movs	r3, #0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	61fb      	str	r3, [r7, #28]
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c15e:	f002 f88b 	bl	800e278 <vPortValidateInterruptPriority>
	__asm volatile
 800c162:	f3ef 8211 	mrs	r2, BASEPRI
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	61ba      	str	r2, [r7, #24]
 800c178:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c17a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c17c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c182:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	2b00      	cmp	r3, #0
 800c188:	d02f      	beq.n	800c1ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c198:	f000 f8d9 	bl	800c34e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19e:	1e5a      	subs	r2, r3, #1
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c1a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ac:	d112      	bne.n	800c1d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d016      	beq.n	800c1e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	3310      	adds	r3, #16
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fe56 	bl	800ce6c <xTaskRemoveFromEventList>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00e      	beq.n	800c1e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00b      	beq.n	800c1e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	e007      	b.n	800c1e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1d8:	3301      	adds	r3, #1
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	b25a      	sxtb	r2, r3
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1e8:	e001      	b.n	800c1ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	f383 8811 	msr	BASEPRI, r3
}
 800c1f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3738      	adds	r7, #56	; 0x38
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <vQueueDelete+0x28>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	60bb      	str	r3, [r7, #8]
}
 800c228:	bf00      	nop
 800c22a:	e7fe      	b.n	800c22a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f000 f95f 	bl	800c4f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d102      	bne.n	800c242 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f002 f927 	bl	800e490 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c242:	bf00      	nop
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c24a:	b480      	push	{r7}
 800c24c:	b085      	sub	sp, #20
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	2b00      	cmp	r3, #0
 800c258:	d006      	beq.n	800c268 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	e001      	b.n	800c26c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c268:	2300      	movs	r3, #0
 800c26a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c26c:	68fb      	ldr	r3, [r7, #12]
	}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c286:	2300      	movs	r3, #0
 800c288:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10d      	bne.n	800c2b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d14d      	bne.n	800c33c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f001 f835 	bl	800d314 <xTaskPriorityDisinherit>
 800c2aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	609a      	str	r2, [r3, #8]
 800c2b2:	e043      	b.n	800c33c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d119      	bne.n	800c2ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6858      	ldr	r0, [r3, #4]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	f002 fa2f 	bl	800e728 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d2:	441a      	add	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d32b      	bcc.n	800c33c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	605a      	str	r2, [r3, #4]
 800c2ec:	e026      	b.n	800c33c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	68d8      	ldr	r0, [r3, #12]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	f002 fa15 	bl	800e728 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c306:	425b      	negs	r3, r3
 800c308:	441a      	add	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	68da      	ldr	r2, [r3, #12]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	429a      	cmp	r2, r3
 800c318:	d207      	bcs.n	800c32a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c322:	425b      	negs	r3, r3
 800c324:	441a      	add	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d105      	bne.n	800c33c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	3b01      	subs	r3, #1
 800c33a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	1c5a      	adds	r2, r3, #1
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c344:	697b      	ldr	r3, [r7, #20]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b082      	sub	sp, #8
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d018      	beq.n	800c392 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c368:	441a      	add	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68da      	ldr	r2, [r3, #12]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	429a      	cmp	r2, r3
 800c378:	d303      	bcc.n	800c382 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68d9      	ldr	r1, [r3, #12]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38a:	461a      	mov	r2, r3
 800c38c:	6838      	ldr	r0, [r7, #0]
 800c38e:	f002 f9cb 	bl	800e728 <memcpy>
	}
}
 800c392:	bf00      	nop
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c3a2:	f001 fe87 	bl	800e0b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3ae:	e011      	b.n	800c3d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d012      	beq.n	800c3de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3324      	adds	r3, #36	; 0x24
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f000 fd55 	bl	800ce6c <xTaskRemoveFromEventList>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d001      	beq.n	800c3cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c3c8:	f000 fe2c 	bl	800d024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	dce9      	bgt.n	800c3b0 <prvUnlockQueue+0x16>
 800c3dc:	e000      	b.n	800c3e0 <prvUnlockQueue+0x46>
					break;
 800c3de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	22ff      	movs	r2, #255	; 0xff
 800c3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c3e8:	f001 fe94 	bl	800e114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c3ec:	f001 fe62 	bl	800e0b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3f8:	e011      	b.n	800c41e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d012      	beq.n	800c428 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	3310      	adds	r3, #16
 800c406:	4618      	mov	r0, r3
 800c408:	f000 fd30 	bl	800ce6c <xTaskRemoveFromEventList>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c412:	f000 fe07 	bl	800d024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c416:	7bbb      	ldrb	r3, [r7, #14]
 800c418:	3b01      	subs	r3, #1
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c41e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c422:	2b00      	cmp	r3, #0
 800c424:	dce9      	bgt.n	800c3fa <prvUnlockQueue+0x60>
 800c426:	e000      	b.n	800c42a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c428:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	22ff      	movs	r2, #255	; 0xff
 800c42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c432:	f001 fe6f 	bl	800e114 <vPortExitCritical>
}
 800c436:	bf00      	nop
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b084      	sub	sp, #16
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c446:	f001 fe35 	bl	800e0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d102      	bne.n	800c458 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c452:	2301      	movs	r3, #1
 800c454:	60fb      	str	r3, [r7, #12]
 800c456:	e001      	b.n	800c45c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c458:	2300      	movs	r3, #0
 800c45a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c45c:	f001 fe5a 	bl	800e114 <vPortExitCritical>

	return xReturn;
 800c460:	68fb      	ldr	r3, [r7, #12]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c472:	f001 fe1f 	bl	800e0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47e:	429a      	cmp	r2, r3
 800c480:	d102      	bne.n	800c488 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c482:	2301      	movs	r3, #1
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	e001      	b.n	800c48c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c488:	2300      	movs	r3, #0
 800c48a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c48c:	f001 fe42 	bl	800e114 <vPortExitCritical>

	return xReturn;
 800c490:	68fb      	ldr	r3, [r7, #12]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	e014      	b.n	800c4d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c4ac:	4a0f      	ldr	r2, [pc, #60]	; (800c4ec <vQueueAddToRegistry+0x50>)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10b      	bne.n	800c4d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c4b8:	490c      	ldr	r1, [pc, #48]	; (800c4ec <vQueueAddToRegistry+0x50>)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c4c2:	4a0a      	ldr	r2, [pc, #40]	; (800c4ec <vQueueAddToRegistry+0x50>)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	4413      	add	r3, r2
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c4ce:	e006      	b.n	800c4de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	60fb      	str	r3, [r7, #12]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b07      	cmp	r3, #7
 800c4da:	d9e7      	bls.n	800c4ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c4dc:	bf00      	nop
 800c4de:	bf00      	nop
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	20005b08 	.word	0x20005b08

0800c4f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	60fb      	str	r3, [r7, #12]
 800c4fc:	e016      	b.n	800c52c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c4fe:	4a10      	ldr	r2, [pc, #64]	; (800c540 <vQueueUnregisterQueue+0x50>)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4413      	add	r3, r2
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d10b      	bne.n	800c526 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c50e:	4a0c      	ldr	r2, [pc, #48]	; (800c540 <vQueueUnregisterQueue+0x50>)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2100      	movs	r1, #0
 800c514:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c518:	4a09      	ldr	r2, [pc, #36]	; (800c540 <vQueueUnregisterQueue+0x50>)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	4413      	add	r3, r2
 800c520:	2200      	movs	r2, #0
 800c522:	605a      	str	r2, [r3, #4]
				break;
 800c524:	e006      	b.n	800c534 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	3301      	adds	r3, #1
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b07      	cmp	r3, #7
 800c530:	d9e5      	bls.n	800c4fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c532:	bf00      	nop
 800c534:	bf00      	nop
 800c536:	3714      	adds	r7, #20
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	20005b08 	.word	0x20005b08

0800c544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c554:	f001 fdae 	bl	800e0b4 <vPortEnterCritical>
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c55e:	b25b      	sxtb	r3, r3
 800c560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c564:	d103      	bne.n	800c56e <vQueueWaitForMessageRestricted+0x2a>
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c574:	b25b      	sxtb	r3, r3
 800c576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57a:	d103      	bne.n	800c584 <vQueueWaitForMessageRestricted+0x40>
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c584:	f001 fdc6 	bl	800e114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d106      	bne.n	800c59e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	3324      	adds	r3, #36	; 0x24
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	68b9      	ldr	r1, [r7, #8]
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 fc3b 	bl	800ce14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c59e:	6978      	ldr	r0, [r7, #20]
 800c5a0:	f7ff fefb 	bl	800c39a <prvUnlockQueue>
	}
 800c5a4:	bf00      	nop
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08e      	sub	sp, #56	; 0x38
 800c5b0:	af04      	add	r7, sp, #16
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	623b      	str	r3, [r7, #32]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <xTaskCreateStatic+0x46>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	61fb      	str	r3, [r7, #28]
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5f2:	235c      	movs	r3, #92	; 0x5c
 800c5f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	2b5c      	cmp	r3, #92	; 0x5c
 800c5fa:	d00a      	beq.n	800c612 <xTaskCreateStatic+0x66>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	61bb      	str	r3, [r7, #24]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c612:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	2b00      	cmp	r3, #0
 800c618:	d01e      	beq.n	800c658 <xTaskCreateStatic+0xac>
 800c61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01b      	beq.n	800c658 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c628:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62c:	2202      	movs	r2, #2
 800c62e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c632:	2300      	movs	r3, #0
 800c634:	9303      	str	r3, [sp, #12]
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	f107 0314 	add.w	r3, r7, #20
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f000 f850 	bl	800c6f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c652:	f000 f8dd 	bl	800c810 <prvAddNewTaskToReadyList>
 800c656:	e001      	b.n	800c65c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c658:	2300      	movs	r3, #0
 800c65a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c65c:	697b      	ldr	r3, [r7, #20]
	}
 800c65e:	4618      	mov	r0, r3
 800c660:	3728      	adds	r7, #40	; 0x28
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c666:	b580      	push	{r7, lr}
 800c668:	b08c      	sub	sp, #48	; 0x30
 800c66a:	af04      	add	r7, sp, #16
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	603b      	str	r3, [r7, #0]
 800c672:	4613      	mov	r3, r2
 800c674:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c676:	88fb      	ldrh	r3, [r7, #6]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4618      	mov	r0, r3
 800c67c:	f001 fe3c 	bl	800e2f8 <pvPortMalloc>
 800c680:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00e      	beq.n	800c6a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c688:	205c      	movs	r0, #92	; 0x5c
 800c68a:	f001 fe35 	bl	800e2f8 <pvPortMalloc>
 800c68e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	631a      	str	r2, [r3, #48]	; 0x30
 800c69c:	e005      	b.n	800c6aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c69e:	6978      	ldr	r0, [r7, #20]
 800c6a0:	f001 fef6 	bl	800e490 <vPortFree>
 800c6a4:	e001      	b.n	800c6aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d017      	beq.n	800c6e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6b8:	88fa      	ldrh	r2, [r7, #6]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9303      	str	r3, [sp, #12]
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	9302      	str	r3, [sp, #8]
 800c6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68b9      	ldr	r1, [r7, #8]
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f000 f80e 	bl	800c6f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6d4:	69f8      	ldr	r0, [r7, #28]
 800c6d6:	f000 f89b 	bl	800c810 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	61bb      	str	r3, [r7, #24]
 800c6de:	e002      	b.n	800c6e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6e6:	69bb      	ldr	r3, [r7, #24]
	}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3720      	adds	r7, #32
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b088      	sub	sp, #32
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c700:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	461a      	mov	r2, r3
 800c708:	21a5      	movs	r1, #165	; 0xa5
 800c70a:	f002 f81b 	bl	800e744 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c718:	3b01      	subs	r3, #1
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	f023 0307 	bic.w	r3, r3, #7
 800c726:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	f003 0307 	and.w	r3, r3, #7
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00a      	beq.n	800c748 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	617b      	str	r3, [r7, #20]
}
 800c744:	bf00      	nop
 800c746:	e7fe      	b.n	800c746 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d01f      	beq.n	800c78e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c74e:	2300      	movs	r3, #0
 800c750:	61fb      	str	r3, [r7, #28]
 800c752:	e012      	b.n	800c77a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	4413      	add	r3, r2
 800c75a:	7819      	ldrb	r1, [r3, #0]
 800c75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	4413      	add	r3, r2
 800c762:	3334      	adds	r3, #52	; 0x34
 800c764:	460a      	mov	r2, r1
 800c766:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	4413      	add	r3, r2
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d006      	beq.n	800c782 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	3301      	adds	r3, #1
 800c778:	61fb      	str	r3, [r7, #28]
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	2b0f      	cmp	r3, #15
 800c77e:	d9e9      	bls.n	800c754 <prvInitialiseNewTask+0x64>
 800c780:	e000      	b.n	800c784 <prvInitialiseNewTask+0x94>
			{
				break;
 800c782:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	2200      	movs	r2, #0
 800c788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c78c:	e003      	b.n	800c796 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c798:	2b37      	cmp	r3, #55	; 0x37
 800c79a:	d901      	bls.n	800c7a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c79c:	2337      	movs	r3, #55	; 0x37
 800c79e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fe fda0 	bl	800b2fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7be:	3318      	adds	r3, #24
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fe fd9b 	bl	800b2fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	2200      	movs	r2, #0
 800c7e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	68f9      	ldr	r1, [r7, #12]
 800c7ee:	69b8      	ldr	r0, [r7, #24]
 800c7f0:	f001 fb36 	bl	800de60 <pxPortInitialiseStack>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c806:	bf00      	nop
 800c808:	3720      	adds	r7, #32
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c818:	f001 fc4c 	bl	800e0b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c81c:	4b2d      	ldr	r3, [pc, #180]	; (800c8d4 <prvAddNewTaskToReadyList+0xc4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3301      	adds	r3, #1
 800c822:	4a2c      	ldr	r2, [pc, #176]	; (800c8d4 <prvAddNewTaskToReadyList+0xc4>)
 800c824:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c826:	4b2c      	ldr	r3, [pc, #176]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c82e:	4a2a      	ldr	r2, [pc, #168]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c834:	4b27      	ldr	r3, [pc, #156]	; (800c8d4 <prvAddNewTaskToReadyList+0xc4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d110      	bne.n	800c85e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c83c:	f000 fc16 	bl	800d06c <prvInitialiseTaskLists>
 800c840:	e00d      	b.n	800c85e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c842:	4b26      	ldr	r3, [pc, #152]	; (800c8dc <prvAddNewTaskToReadyList+0xcc>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d109      	bne.n	800c85e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c84a:	4b23      	ldr	r3, [pc, #140]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c854:	429a      	cmp	r2, r3
 800c856:	d802      	bhi.n	800c85e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c858:	4a1f      	ldr	r2, [pc, #124]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c85e:	4b20      	ldr	r3, [pc, #128]	; (800c8e0 <prvAddNewTaskToReadyList+0xd0>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3301      	adds	r3, #1
 800c864:	4a1e      	ldr	r2, [pc, #120]	; (800c8e0 <prvAddNewTaskToReadyList+0xd0>)
 800c866:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c868:	4b1d      	ldr	r3, [pc, #116]	; (800c8e0 <prvAddNewTaskToReadyList+0xd0>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c874:	4b1b      	ldr	r3, [pc, #108]	; (800c8e4 <prvAddNewTaskToReadyList+0xd4>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d903      	bls.n	800c884 <prvAddNewTaskToReadyList+0x74>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <prvAddNewTaskToReadyList+0xd4>)
 800c882:	6013      	str	r3, [r2, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c888:	4613      	mov	r3, r2
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4413      	add	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4a15      	ldr	r2, [pc, #84]	; (800c8e8 <prvAddNewTaskToReadyList+0xd8>)
 800c892:	441a      	add	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3304      	adds	r3, #4
 800c898:	4619      	mov	r1, r3
 800c89a:	4610      	mov	r0, r2
 800c89c:	f7fe fd3b 	bl	800b316 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8a0:	f001 fc38 	bl	800e114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8a4:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <prvAddNewTaskToReadyList+0xcc>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00e      	beq.n	800c8ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <prvAddNewTaskToReadyList+0xc8>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d207      	bcs.n	800c8ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8ba:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <prvAddNewTaskToReadyList+0xdc>)
 800c8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8c0:	601a      	str	r2, [r3, #0]
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8ca:	bf00      	nop
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	20000efc 	.word	0x20000efc
 800c8d8:	20000a28 	.word	0x20000a28
 800c8dc:	20000f08 	.word	0x20000f08
 800c8e0:	20000f18 	.word	0x20000f18
 800c8e4:	20000f04 	.word	0x20000f04
 800c8e8:	20000a2c 	.word	0x20000a2c
 800c8ec:	e000ed04 	.word	0xe000ed04

0800c8f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d017      	beq.n	800c932 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c902:	4b13      	ldr	r3, [pc, #76]	; (800c950 <vTaskDelay+0x60>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00a      	beq.n	800c920 <vTaskDelay+0x30>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	60bb      	str	r3, [r7, #8]
}
 800c91c:	bf00      	nop
 800c91e:	e7fe      	b.n	800c91e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c920:	f000 f880 	bl	800ca24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c924:	2100      	movs	r1, #0
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fef8 	bl	800d71c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c92c:	f000 f888 	bl	800ca40 <xTaskResumeAll>
 800c930:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d107      	bne.n	800c948 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c938:	4b06      	ldr	r3, [pc, #24]	; (800c954 <vTaskDelay+0x64>)
 800c93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c948:	bf00      	nop
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	20000f24 	.word	0x20000f24
 800c954:	e000ed04 	.word	0xe000ed04

0800c958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08a      	sub	sp, #40	; 0x28
 800c95c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c962:	2300      	movs	r3, #0
 800c964:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c966:	463a      	mov	r2, r7
 800c968:	1d39      	adds	r1, r7, #4
 800c96a:	f107 0308 	add.w	r3, r7, #8
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fc70 	bl	800b254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	9202      	str	r2, [sp, #8]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	2300      	movs	r3, #0
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	2300      	movs	r3, #0
 800c984:	460a      	mov	r2, r1
 800c986:	4921      	ldr	r1, [pc, #132]	; (800ca0c <vTaskStartScheduler+0xb4>)
 800c988:	4821      	ldr	r0, [pc, #132]	; (800ca10 <vTaskStartScheduler+0xb8>)
 800c98a:	f7ff fe0f 	bl	800c5ac <xTaskCreateStatic>
 800c98e:	4603      	mov	r3, r0
 800c990:	4a20      	ldr	r2, [pc, #128]	; (800ca14 <vTaskStartScheduler+0xbc>)
 800c992:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c994:	4b1f      	ldr	r3, [pc, #124]	; (800ca14 <vTaskStartScheduler+0xbc>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c99c:	2301      	movs	r3, #1
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	e001      	b.n	800c9a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d102      	bne.n	800c9b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c9ac:	f000 ff0a 	bl	800d7c4 <xTimerCreateTimerTask>
 800c9b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d116      	bne.n	800c9e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	613b      	str	r3, [r7, #16]
}
 800c9ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9cc:	4b12      	ldr	r3, [pc, #72]	; (800ca18 <vTaskStartScheduler+0xc0>)
 800c9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9d4:	4b11      	ldr	r3, [pc, #68]	; (800ca1c <vTaskStartScheduler+0xc4>)
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9da:	4b11      	ldr	r3, [pc, #68]	; (800ca20 <vTaskStartScheduler+0xc8>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9e0:	f001 fac6 	bl	800df70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9e4:	e00e      	b.n	800ca04 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ec:	d10a      	bne.n	800ca04 <vTaskStartScheduler+0xac>
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	60fb      	str	r3, [r7, #12]
}
 800ca00:	bf00      	nop
 800ca02:	e7fe      	b.n	800ca02 <vTaskStartScheduler+0xaa>
}
 800ca04:	bf00      	nop
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	08013104 	.word	0x08013104
 800ca10:	0800d03d 	.word	0x0800d03d
 800ca14:	20000f20 	.word	0x20000f20
 800ca18:	20000f1c 	.word	0x20000f1c
 800ca1c:	20000f08 	.word	0x20000f08
 800ca20:	20000f00 	.word	0x20000f00

0800ca24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca24:	b480      	push	{r7}
 800ca26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca28:	4b04      	ldr	r3, [pc, #16]	; (800ca3c <vTaskSuspendAll+0x18>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	4a03      	ldr	r2, [pc, #12]	; (800ca3c <vTaskSuspendAll+0x18>)
 800ca30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca32:	bf00      	nop
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	20000f24 	.word	0x20000f24

0800ca40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca4e:	4b42      	ldr	r3, [pc, #264]	; (800cb58 <xTaskResumeAll+0x118>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10a      	bne.n	800ca6c <xTaskResumeAll+0x2c>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	603b      	str	r3, [r7, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	e7fe      	b.n	800ca6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca6c:	f001 fb22 	bl	800e0b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca70:	4b39      	ldr	r3, [pc, #228]	; (800cb58 <xTaskResumeAll+0x118>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	4a38      	ldr	r2, [pc, #224]	; (800cb58 <xTaskResumeAll+0x118>)
 800ca78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca7a:	4b37      	ldr	r3, [pc, #220]	; (800cb58 <xTaskResumeAll+0x118>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d162      	bne.n	800cb48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca82:	4b36      	ldr	r3, [pc, #216]	; (800cb5c <xTaskResumeAll+0x11c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d05e      	beq.n	800cb48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca8a:	e02f      	b.n	800caec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca8c:	4b34      	ldr	r3, [pc, #208]	; (800cb60 <xTaskResumeAll+0x120>)
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	3318      	adds	r3, #24
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7fe fc99 	bl	800b3d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3304      	adds	r3, #4
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe fc94 	bl	800b3d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caac:	4b2d      	ldr	r3, [pc, #180]	; (800cb64 <xTaskResumeAll+0x124>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d903      	bls.n	800cabc <xTaskResumeAll+0x7c>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab8:	4a2a      	ldr	r2, [pc, #168]	; (800cb64 <xTaskResumeAll+0x124>)
 800caba:	6013      	str	r3, [r2, #0]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac0:	4613      	mov	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4a27      	ldr	r2, [pc, #156]	; (800cb68 <xTaskResumeAll+0x128>)
 800caca:	441a      	add	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3304      	adds	r3, #4
 800cad0:	4619      	mov	r1, r3
 800cad2:	4610      	mov	r0, r2
 800cad4:	f7fe fc1f 	bl	800b316 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cadc:	4b23      	ldr	r3, [pc, #140]	; (800cb6c <xTaskResumeAll+0x12c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d302      	bcc.n	800caec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cae6:	4b22      	ldr	r3, [pc, #136]	; (800cb70 <xTaskResumeAll+0x130>)
 800cae8:	2201      	movs	r2, #1
 800caea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caec:	4b1c      	ldr	r3, [pc, #112]	; (800cb60 <xTaskResumeAll+0x120>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1cb      	bne.n	800ca8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cafa:	f000 fb55 	bl	800d1a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cafe:	4b1d      	ldr	r3, [pc, #116]	; (800cb74 <xTaskResumeAll+0x134>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d010      	beq.n	800cb2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb0a:	f000 f847 	bl	800cb9c <xTaskIncrementTick>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb14:	4b16      	ldr	r3, [pc, #88]	; (800cb70 <xTaskResumeAll+0x130>)
 800cb16:	2201      	movs	r2, #1
 800cb18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1f1      	bne.n	800cb0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb26:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <xTaskResumeAll+0x134>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb2c:	4b10      	ldr	r3, [pc, #64]	; (800cb70 <xTaskResumeAll+0x130>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d009      	beq.n	800cb48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb34:	2301      	movs	r3, #1
 800cb36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb38:	4b0f      	ldr	r3, [pc, #60]	; (800cb78 <xTaskResumeAll+0x138>)
 800cb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb48:	f001 fae4 	bl	800e114 <vPortExitCritical>

	return xAlreadyYielded;
 800cb4c:	68bb      	ldr	r3, [r7, #8]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20000f24 	.word	0x20000f24
 800cb5c:	20000efc 	.word	0x20000efc
 800cb60:	20000ebc 	.word	0x20000ebc
 800cb64:	20000f04 	.word	0x20000f04
 800cb68:	20000a2c 	.word	0x20000a2c
 800cb6c:	20000a28 	.word	0x20000a28
 800cb70:	20000f10 	.word	0x20000f10
 800cb74:	20000f0c 	.word	0x20000f0c
 800cb78:	e000ed04 	.word	0xe000ed04

0800cb7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb82:	4b05      	ldr	r3, [pc, #20]	; (800cb98 <xTaskGetTickCount+0x1c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb88:	687b      	ldr	r3, [r7, #4]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	370c      	adds	r7, #12
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	20000f00 	.word	0x20000f00

0800cb9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cba2:	2300      	movs	r3, #0
 800cba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cba6:	4b4f      	ldr	r3, [pc, #316]	; (800cce4 <xTaskIncrementTick+0x148>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f040 808f 	bne.w	800ccce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbb0:	4b4d      	ldr	r3, [pc, #308]	; (800cce8 <xTaskIncrementTick+0x14c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbb8:	4a4b      	ldr	r2, [pc, #300]	; (800cce8 <xTaskIncrementTick+0x14c>)
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d120      	bne.n	800cc06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cbc4:	4b49      	ldr	r3, [pc, #292]	; (800ccec <xTaskIncrementTick+0x150>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00a      	beq.n	800cbe4 <xTaskIncrementTick+0x48>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	603b      	str	r3, [r7, #0]
}
 800cbe0:	bf00      	nop
 800cbe2:	e7fe      	b.n	800cbe2 <xTaskIncrementTick+0x46>
 800cbe4:	4b41      	ldr	r3, [pc, #260]	; (800ccec <xTaskIncrementTick+0x150>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	60fb      	str	r3, [r7, #12]
 800cbea:	4b41      	ldr	r3, [pc, #260]	; (800ccf0 <xTaskIncrementTick+0x154>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a3f      	ldr	r2, [pc, #252]	; (800ccec <xTaskIncrementTick+0x150>)
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	4a3f      	ldr	r2, [pc, #252]	; (800ccf0 <xTaskIncrementTick+0x154>)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6013      	str	r3, [r2, #0]
 800cbf8:	4b3e      	ldr	r3, [pc, #248]	; (800ccf4 <xTaskIncrementTick+0x158>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	4a3d      	ldr	r2, [pc, #244]	; (800ccf4 <xTaskIncrementTick+0x158>)
 800cc00:	6013      	str	r3, [r2, #0]
 800cc02:	f000 fad1 	bl	800d1a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc06:	4b3c      	ldr	r3, [pc, #240]	; (800ccf8 <xTaskIncrementTick+0x15c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d349      	bcc.n	800cca4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc10:	4b36      	ldr	r3, [pc, #216]	; (800ccec <xTaskIncrementTick+0x150>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d104      	bne.n	800cc24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc1a:	4b37      	ldr	r3, [pc, #220]	; (800ccf8 <xTaskIncrementTick+0x15c>)
 800cc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc20:	601a      	str	r2, [r3, #0]
					break;
 800cc22:	e03f      	b.n	800cca4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc24:	4b31      	ldr	r3, [pc, #196]	; (800ccec <xTaskIncrementTick+0x150>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d203      	bcs.n	800cc44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc3c:	4a2e      	ldr	r2, [pc, #184]	; (800ccf8 <xTaskIncrementTick+0x15c>)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc42:	e02f      	b.n	800cca4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	3304      	adds	r3, #4
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fe fbc1 	bl	800b3d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d004      	beq.n	800cc60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	3318      	adds	r3, #24
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe fbb8 	bl	800b3d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc64:	4b25      	ldr	r3, [pc, #148]	; (800ccfc <xTaskIncrementTick+0x160>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d903      	bls.n	800cc74 <xTaskIncrementTick+0xd8>
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc70:	4a22      	ldr	r2, [pc, #136]	; (800ccfc <xTaskIncrementTick+0x160>)
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc78:	4613      	mov	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4a1f      	ldr	r2, [pc, #124]	; (800cd00 <xTaskIncrementTick+0x164>)
 800cc82:	441a      	add	r2, r3
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	3304      	adds	r3, #4
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	f7fe fb43 	bl	800b316 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc94:	4b1b      	ldr	r3, [pc, #108]	; (800cd04 <xTaskIncrementTick+0x168>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d3b8      	bcc.n	800cc10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cca2:	e7b5      	b.n	800cc10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cca4:	4b17      	ldr	r3, [pc, #92]	; (800cd04 <xTaskIncrementTick+0x168>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccaa:	4915      	ldr	r1, [pc, #84]	; (800cd00 <xTaskIncrementTick+0x164>)
 800ccac:	4613      	mov	r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	4413      	add	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	440b      	add	r3, r1
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d901      	bls.n	800ccc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ccc0:	4b11      	ldr	r3, [pc, #68]	; (800cd08 <xTaskIncrementTick+0x16c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d007      	beq.n	800ccd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	617b      	str	r3, [r7, #20]
 800cccc:	e004      	b.n	800ccd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccce:	4b0f      	ldr	r3, [pc, #60]	; (800cd0c <xTaskIncrementTick+0x170>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	4a0d      	ldr	r2, [pc, #52]	; (800cd0c <xTaskIncrementTick+0x170>)
 800ccd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ccd8:	697b      	ldr	r3, [r7, #20]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3718      	adds	r7, #24
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	20000f24 	.word	0x20000f24
 800cce8:	20000f00 	.word	0x20000f00
 800ccec:	20000eb4 	.word	0x20000eb4
 800ccf0:	20000eb8 	.word	0x20000eb8
 800ccf4:	20000f14 	.word	0x20000f14
 800ccf8:	20000f1c 	.word	0x20000f1c
 800ccfc:	20000f04 	.word	0x20000f04
 800cd00:	20000a2c 	.word	0x20000a2c
 800cd04:	20000a28 	.word	0x20000a28
 800cd08:	20000f10 	.word	0x20000f10
 800cd0c:	20000f0c 	.word	0x20000f0c

0800cd10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd16:	4b28      	ldr	r3, [pc, #160]	; (800cdb8 <vTaskSwitchContext+0xa8>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d003      	beq.n	800cd26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd1e:	4b27      	ldr	r3, [pc, #156]	; (800cdbc <vTaskSwitchContext+0xac>)
 800cd20:	2201      	movs	r2, #1
 800cd22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd24:	e041      	b.n	800cdaa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800cd26:	4b25      	ldr	r3, [pc, #148]	; (800cdbc <vTaskSwitchContext+0xac>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd2c:	4b24      	ldr	r3, [pc, #144]	; (800cdc0 <vTaskSwitchContext+0xb0>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	e010      	b.n	800cd56 <vTaskSwitchContext+0x46>
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10a      	bne.n	800cd50 <vTaskSwitchContext+0x40>
	__asm volatile
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	607b      	str	r3, [r7, #4]
}
 800cd4c:	bf00      	nop
 800cd4e:	e7fe      	b.n	800cd4e <vTaskSwitchContext+0x3e>
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	60fb      	str	r3, [r7, #12]
 800cd56:	491b      	ldr	r1, [pc, #108]	; (800cdc4 <vTaskSwitchContext+0xb4>)
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	440b      	add	r3, r1
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0e4      	beq.n	800cd34 <vTaskSwitchContext+0x24>
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4a13      	ldr	r2, [pc, #76]	; (800cdc4 <vTaskSwitchContext+0xb4>)
 800cd76:	4413      	add	r3, r2
 800cd78:	60bb      	str	r3, [r7, #8]
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	605a      	str	r2, [r3, #4]
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d104      	bne.n	800cd9a <vTaskSwitchContext+0x8a>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	605a      	str	r2, [r3, #4]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	4a09      	ldr	r2, [pc, #36]	; (800cdc8 <vTaskSwitchContext+0xb8>)
 800cda2:	6013      	str	r3, [r2, #0]
 800cda4:	4a06      	ldr	r2, [pc, #24]	; (800cdc0 <vTaskSwitchContext+0xb0>)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6013      	str	r3, [r2, #0]
}
 800cdaa:	bf00      	nop
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	20000f24 	.word	0x20000f24
 800cdbc:	20000f10 	.word	0x20000f10
 800cdc0:	20000f04 	.word	0x20000f04
 800cdc4:	20000a2c 	.word	0x20000a2c
 800cdc8:	20000a28 	.word	0x20000a28

0800cdcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10a      	bne.n	800cdf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	60fb      	str	r3, [r7, #12]
}
 800cdee:	bf00      	nop
 800cdf0:	e7fe      	b.n	800cdf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdf2:	4b07      	ldr	r3, [pc, #28]	; (800ce10 <vTaskPlaceOnEventList+0x44>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3318      	adds	r3, #24
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7fe faaf 	bl	800b35e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce00:	2101      	movs	r1, #1
 800ce02:	6838      	ldr	r0, [r7, #0]
 800ce04:	f000 fc8a 	bl	800d71c <prvAddCurrentTaskToDelayedList>
}
 800ce08:	bf00      	nop
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20000a28 	.word	0x20000a28

0800ce14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d10a      	bne.n	800ce3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	617b      	str	r3, [r7, #20]
}
 800ce38:	bf00      	nop
 800ce3a:	e7fe      	b.n	800ce3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <vTaskPlaceOnEventListRestricted+0x54>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	3318      	adds	r3, #24
 800ce42:	4619      	mov	r1, r3
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f7fe fa66 	bl	800b316 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce50:	f04f 33ff 	mov.w	r3, #4294967295
 800ce54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce56:	6879      	ldr	r1, [r7, #4]
 800ce58:	68b8      	ldr	r0, [r7, #8]
 800ce5a:	f000 fc5f 	bl	800d71c <prvAddCurrentTaskToDelayedList>
	}
 800ce5e:	bf00      	nop
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20000a28 	.word	0x20000a28

0800ce6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10a      	bne.n	800ce98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	60fb      	str	r3, [r7, #12]
}
 800ce94:	bf00      	nop
 800ce96:	e7fe      	b.n	800ce96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	3318      	adds	r3, #24
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fa97 	bl	800b3d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cea2:	4b1e      	ldr	r3, [pc, #120]	; (800cf1c <xTaskRemoveFromEventList+0xb0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d11d      	bne.n	800cee6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	3304      	adds	r3, #4
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe fa8e 	bl	800b3d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb8:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <xTaskRemoveFromEventList+0xb4>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d903      	bls.n	800cec8 <xTaskRemoveFromEventList+0x5c>
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec4:	4a16      	ldr	r2, [pc, #88]	; (800cf20 <xTaskRemoveFromEventList+0xb4>)
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cecc:	4613      	mov	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4a13      	ldr	r2, [pc, #76]	; (800cf24 <xTaskRemoveFromEventList+0xb8>)
 800ced6:	441a      	add	r2, r3
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	3304      	adds	r3, #4
 800cedc:	4619      	mov	r1, r3
 800cede:	4610      	mov	r0, r2
 800cee0:	f7fe fa19 	bl	800b316 <vListInsertEnd>
 800cee4:	e005      	b.n	800cef2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	3318      	adds	r3, #24
 800ceea:	4619      	mov	r1, r3
 800ceec:	480e      	ldr	r0, [pc, #56]	; (800cf28 <xTaskRemoveFromEventList+0xbc>)
 800ceee:	f7fe fa12 	bl	800b316 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef6:	4b0d      	ldr	r3, [pc, #52]	; (800cf2c <xTaskRemoveFromEventList+0xc0>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d905      	bls.n	800cf0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf00:	2301      	movs	r3, #1
 800cf02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf04:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <xTaskRemoveFromEventList+0xc4>)
 800cf06:	2201      	movs	r2, #1
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	e001      	b.n	800cf10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf10:	697b      	ldr	r3, [r7, #20]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20000f24 	.word	0x20000f24
 800cf20:	20000f04 	.word	0x20000f04
 800cf24:	20000a2c 	.word	0x20000a2c
 800cf28:	20000ebc 	.word	0x20000ebc
 800cf2c:	20000a28 	.word	0x20000a28
 800cf30:	20000f10 	.word	0x20000f10

0800cf34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf3c:	4b06      	ldr	r3, [pc, #24]	; (800cf58 <vTaskInternalSetTimeOutState+0x24>)
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf44:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <vTaskInternalSetTimeOutState+0x28>)
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	605a      	str	r2, [r3, #4]
}
 800cf4c:	bf00      	nop
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr
 800cf58:	20000f14 	.word	0x20000f14
 800cf5c:	20000f00 	.word	0x20000f00

0800cf60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b088      	sub	sp, #32
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10a      	bne.n	800cf86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	613b      	str	r3, [r7, #16]
}
 800cf82:	bf00      	nop
 800cf84:	e7fe      	b.n	800cf84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10a      	bne.n	800cfa2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	60fb      	str	r3, [r7, #12]
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cfa2:	f001 f887 	bl	800e0b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfa6:	4b1d      	ldr	r3, [pc, #116]	; (800d01c <xTaskCheckForTimeOut+0xbc>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	69ba      	ldr	r2, [r7, #24]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfbe:	d102      	bne.n	800cfc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	61fb      	str	r3, [r7, #28]
 800cfc4:	e023      	b.n	800d00e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	4b15      	ldr	r3, [pc, #84]	; (800d020 <xTaskCheckForTimeOut+0xc0>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d007      	beq.n	800cfe2 <xTaskCheckForTimeOut+0x82>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	69ba      	ldr	r2, [r7, #24]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d302      	bcc.n	800cfe2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	61fb      	str	r3, [r7, #28]
 800cfe0:	e015      	b.n	800d00e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d20b      	bcs.n	800d004 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	1ad2      	subs	r2, r2, r3
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7ff ff9b 	bl	800cf34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cffe:	2300      	movs	r3, #0
 800d000:	61fb      	str	r3, [r7, #28]
 800d002:	e004      	b.n	800d00e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	2200      	movs	r2, #0
 800d008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d00a:	2301      	movs	r3, #1
 800d00c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d00e:	f001 f881 	bl	800e114 <vPortExitCritical>

	return xReturn;
 800d012:	69fb      	ldr	r3, [r7, #28]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3720      	adds	r7, #32
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	20000f00 	.word	0x20000f00
 800d020:	20000f14 	.word	0x20000f14

0800d024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d024:	b480      	push	{r7}
 800d026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d028:	4b03      	ldr	r3, [pc, #12]	; (800d038 <vTaskMissedYield+0x14>)
 800d02a:	2201      	movs	r2, #1
 800d02c:	601a      	str	r2, [r3, #0]
}
 800d02e:	bf00      	nop
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	20000f10 	.word	0x20000f10

0800d03c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d044:	f000 f852 	bl	800d0ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d048:	4b06      	ldr	r3, [pc, #24]	; (800d064 <prvIdleTask+0x28>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d9f9      	bls.n	800d044 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d050:	4b05      	ldr	r3, [pc, #20]	; (800d068 <prvIdleTask+0x2c>)
 800d052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d056:	601a      	str	r2, [r3, #0]
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d060:	e7f0      	b.n	800d044 <prvIdleTask+0x8>
 800d062:	bf00      	nop
 800d064:	20000a2c 	.word	0x20000a2c
 800d068:	e000ed04 	.word	0xe000ed04

0800d06c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d072:	2300      	movs	r3, #0
 800d074:	607b      	str	r3, [r7, #4]
 800d076:	e00c      	b.n	800d092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	4613      	mov	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	4a12      	ldr	r2, [pc, #72]	; (800d0cc <prvInitialiseTaskLists+0x60>)
 800d084:	4413      	add	r3, r2
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe f918 	bl	800b2bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	3301      	adds	r3, #1
 800d090:	607b      	str	r3, [r7, #4]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b37      	cmp	r3, #55	; 0x37
 800d096:	d9ef      	bls.n	800d078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d098:	480d      	ldr	r0, [pc, #52]	; (800d0d0 <prvInitialiseTaskLists+0x64>)
 800d09a:	f7fe f90f 	bl	800b2bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d09e:	480d      	ldr	r0, [pc, #52]	; (800d0d4 <prvInitialiseTaskLists+0x68>)
 800d0a0:	f7fe f90c 	bl	800b2bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0a4:	480c      	ldr	r0, [pc, #48]	; (800d0d8 <prvInitialiseTaskLists+0x6c>)
 800d0a6:	f7fe f909 	bl	800b2bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0aa:	480c      	ldr	r0, [pc, #48]	; (800d0dc <prvInitialiseTaskLists+0x70>)
 800d0ac:	f7fe f906 	bl	800b2bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0b0:	480b      	ldr	r0, [pc, #44]	; (800d0e0 <prvInitialiseTaskLists+0x74>)
 800d0b2:	f7fe f903 	bl	800b2bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0b6:	4b0b      	ldr	r3, [pc, #44]	; (800d0e4 <prvInitialiseTaskLists+0x78>)
 800d0b8:	4a05      	ldr	r2, [pc, #20]	; (800d0d0 <prvInitialiseTaskLists+0x64>)
 800d0ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0bc:	4b0a      	ldr	r3, [pc, #40]	; (800d0e8 <prvInitialiseTaskLists+0x7c>)
 800d0be:	4a05      	ldr	r2, [pc, #20]	; (800d0d4 <prvInitialiseTaskLists+0x68>)
 800d0c0:	601a      	str	r2, [r3, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20000a2c 	.word	0x20000a2c
 800d0d0:	20000e8c 	.word	0x20000e8c
 800d0d4:	20000ea0 	.word	0x20000ea0
 800d0d8:	20000ebc 	.word	0x20000ebc
 800d0dc:	20000ed0 	.word	0x20000ed0
 800d0e0:	20000ee8 	.word	0x20000ee8
 800d0e4:	20000eb4 	.word	0x20000eb4
 800d0e8:	20000eb8 	.word	0x20000eb8

0800d0ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0f2:	e019      	b.n	800d128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0f4:	f000 ffde 	bl	800e0b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f8:	4b10      	ldr	r3, [pc, #64]	; (800d13c <prvCheckTasksWaitingTermination+0x50>)
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	3304      	adds	r3, #4
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe f963 	bl	800b3d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d10a:	4b0d      	ldr	r3, [pc, #52]	; (800d140 <prvCheckTasksWaitingTermination+0x54>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3b01      	subs	r3, #1
 800d110:	4a0b      	ldr	r2, [pc, #44]	; (800d140 <prvCheckTasksWaitingTermination+0x54>)
 800d112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d114:	4b0b      	ldr	r3, [pc, #44]	; (800d144 <prvCheckTasksWaitingTermination+0x58>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3b01      	subs	r3, #1
 800d11a:	4a0a      	ldr	r2, [pc, #40]	; (800d144 <prvCheckTasksWaitingTermination+0x58>)
 800d11c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d11e:	f000 fff9 	bl	800e114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f810 	bl	800d148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d128:	4b06      	ldr	r3, [pc, #24]	; (800d144 <prvCheckTasksWaitingTermination+0x58>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1e1      	bne.n	800d0f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d130:	bf00      	nop
 800d132:	bf00      	nop
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20000ed0 	.word	0x20000ed0
 800d140:	20000efc 	.word	0x20000efc
 800d144:	20000ee4 	.word	0x20000ee4

0800d148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d156:	2b00      	cmp	r3, #0
 800d158:	d108      	bne.n	800d16c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d15e:	4618      	mov	r0, r3
 800d160:	f001 f996 	bl	800e490 <vPortFree>
				vPortFree( pxTCB );
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f001 f993 	bl	800e490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d16a:	e018      	b.n	800d19e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d172:	2b01      	cmp	r3, #1
 800d174:	d103      	bne.n	800d17e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f001 f98a 	bl	800e490 <vPortFree>
	}
 800d17c:	e00f      	b.n	800d19e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d184:	2b02      	cmp	r3, #2
 800d186:	d00a      	beq.n	800d19e <prvDeleteTCB+0x56>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	60fb      	str	r3, [r7, #12]
}
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <prvDeleteTCB+0x54>
	}
 800d19e:	bf00      	nop
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
	...

0800d1a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ae:	4b0c      	ldr	r3, [pc, #48]	; (800d1e0 <prvResetNextTaskUnblockTime+0x38>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d104      	bne.n	800d1c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <prvResetNextTaskUnblockTime+0x3c>)
 800d1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d1be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1c0:	e008      	b.n	800d1d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1c2:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <prvResetNextTaskUnblockTime+0x38>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	4a04      	ldr	r2, [pc, #16]	; (800d1e4 <prvResetNextTaskUnblockTime+0x3c>)
 800d1d2:	6013      	str	r3, [r2, #0]
}
 800d1d4:	bf00      	nop
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	20000eb4 	.word	0x20000eb4
 800d1e4:	20000f1c 	.word	0x20000f1c

0800d1e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d1ee:	4b05      	ldr	r3, [pc, #20]	; (800d204 <xTaskGetCurrentTaskHandle+0x1c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d1f4:	687b      	ldr	r3, [r7, #4]
	}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	20000a28 	.word	0x20000a28

0800d208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d20e:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <xTaskGetSchedulerState+0x34>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d102      	bne.n	800d21c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d216:	2301      	movs	r3, #1
 800d218:	607b      	str	r3, [r7, #4]
 800d21a:	e008      	b.n	800d22e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d21c:	4b08      	ldr	r3, [pc, #32]	; (800d240 <xTaskGetSchedulerState+0x38>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d102      	bne.n	800d22a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d224:	2302      	movs	r3, #2
 800d226:	607b      	str	r3, [r7, #4]
 800d228:	e001      	b.n	800d22e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d22a:	2300      	movs	r3, #0
 800d22c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d22e:	687b      	ldr	r3, [r7, #4]
	}
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	20000f08 	.word	0x20000f08
 800d240:	20000f24 	.word	0x20000f24

0800d244 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d250:	2300      	movs	r3, #0
 800d252:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d051      	beq.n	800d2fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d25e:	4b2a      	ldr	r3, [pc, #168]	; (800d308 <xTaskPriorityInherit+0xc4>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d264:	429a      	cmp	r2, r3
 800d266:	d241      	bcs.n	800d2ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	db06      	blt.n	800d27e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d270:	4b25      	ldr	r3, [pc, #148]	; (800d308 <xTaskPriorityInherit+0xc4>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d276:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	6959      	ldr	r1, [r3, #20]
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d286:	4613      	mov	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4a1f      	ldr	r2, [pc, #124]	; (800d30c <xTaskPriorityInherit+0xc8>)
 800d290:	4413      	add	r3, r2
 800d292:	4299      	cmp	r1, r3
 800d294:	d122      	bne.n	800d2dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	3304      	adds	r3, #4
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe f898 	bl	800b3d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2a0:	4b19      	ldr	r3, [pc, #100]	; (800d308 <xTaskPriorityInherit+0xc4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ae:	4b18      	ldr	r3, [pc, #96]	; (800d310 <xTaskPriorityInherit+0xcc>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d903      	bls.n	800d2be <xTaskPriorityInherit+0x7a>
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ba:	4a15      	ldr	r2, [pc, #84]	; (800d310 <xTaskPriorityInherit+0xcc>)
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4a10      	ldr	r2, [pc, #64]	; (800d30c <xTaskPriorityInherit+0xc8>)
 800d2cc:	441a      	add	r2, r3
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f7fe f81e 	bl	800b316 <vListInsertEnd>
 800d2da:	e004      	b.n	800d2e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2dc:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <xTaskPriorityInherit+0xc4>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	60fb      	str	r3, [r7, #12]
 800d2ea:	e008      	b.n	800d2fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2f0:	4b05      	ldr	r3, [pc, #20]	; (800d308 <xTaskPriorityInherit+0xc4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d201      	bcs.n	800d2fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	20000a28 	.word	0x20000a28
 800d30c:	20000a2c 	.word	0x20000a2c
 800d310:	20000f04 	.word	0x20000f04

0800d314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d320:	2300      	movs	r3, #0
 800d322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d056      	beq.n	800d3d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d32a:	4b2e      	ldr	r3, [pc, #184]	; (800d3e4 <xTaskPriorityDisinherit+0xd0>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	693a      	ldr	r2, [r7, #16]
 800d330:	429a      	cmp	r2, r3
 800d332:	d00a      	beq.n	800d34a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	60fb      	str	r3, [r7, #12]
}
 800d346:	bf00      	nop
 800d348:	e7fe      	b.n	800d348 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d10a      	bne.n	800d368 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d356:	f383 8811 	msr	BASEPRI, r3
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	f3bf 8f4f 	dsb	sy
 800d362:	60bb      	str	r3, [r7, #8]
}
 800d364:	bf00      	nop
 800d366:	e7fe      	b.n	800d366 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d36c:	1e5a      	subs	r2, r3, #1
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d02c      	beq.n	800d3d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d382:	2b00      	cmp	r3, #0
 800d384:	d128      	bne.n	800d3d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	3304      	adds	r3, #4
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fe f820 	bl	800b3d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a8:	4b0f      	ldr	r3, [pc, #60]	; (800d3e8 <xTaskPriorityDisinherit+0xd4>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d903      	bls.n	800d3b8 <xTaskPriorityDisinherit+0xa4>
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	4a0c      	ldr	r2, [pc, #48]	; (800d3e8 <xTaskPriorityDisinherit+0xd4>)
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3bc:	4613      	mov	r3, r2
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	4413      	add	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4a09      	ldr	r2, [pc, #36]	; (800d3ec <xTaskPriorityDisinherit+0xd8>)
 800d3c6:	441a      	add	r2, r3
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	3304      	adds	r3, #4
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	f7fd ffa1 	bl	800b316 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3d8:	697b      	ldr	r3, [r7, #20]
	}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000a28 	.word	0x20000a28
 800d3e8:	20000f04 	.word	0x20000f04
 800d3ec:	20000a2c 	.word	0x20000a2c

0800d3f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b088      	sub	sp, #32
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3fe:	2301      	movs	r3, #1
 800d400:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d06a      	beq.n	800d4de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10a      	bne.n	800d426 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	60fb      	str	r3, [r7, #12]
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d42a:	683a      	ldr	r2, [r7, #0]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d902      	bls.n	800d436 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	61fb      	str	r3, [r7, #28]
 800d434:	e002      	b.n	800d43c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d43a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d440:	69fa      	ldr	r2, [r7, #28]
 800d442:	429a      	cmp	r2, r3
 800d444:	d04b      	beq.n	800d4de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d146      	bne.n	800d4de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d450:	4b25      	ldr	r3, [pc, #148]	; (800d4e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	69ba      	ldr	r2, [r7, #24]
 800d456:	429a      	cmp	r2, r3
 800d458:	d10a      	bne.n	800d470 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	60bb      	str	r3, [r7, #8]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d474:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	69fa      	ldr	r2, [r7, #28]
 800d47a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	699b      	ldr	r3, [r3, #24]
 800d480:	2b00      	cmp	r3, #0
 800d482:	db04      	blt.n	800d48e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	6959      	ldr	r1, [r3, #20]
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	4613      	mov	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	4413      	add	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4a13      	ldr	r2, [pc, #76]	; (800d4ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d49e:	4413      	add	r3, r2
 800d4a0:	4299      	cmp	r1, r3
 800d4a2:	d11c      	bne.n	800d4de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fd ff91 	bl	800b3d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b2:	4b0f      	ldr	r3, [pc, #60]	; (800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d903      	bls.n	800d4c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4be:	4a0c      	ldr	r2, [pc, #48]	; (800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4c0:	6013      	str	r3, [r2, #0]
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	4413      	add	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4a07      	ldr	r2, [pc, #28]	; (800d4ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d4d0:	441a      	add	r2, r3
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	4610      	mov	r0, r2
 800d4da:	f7fd ff1c 	bl	800b316 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4de:	bf00      	nop
 800d4e0:	3720      	adds	r7, #32
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20000a28 	.word	0x20000a28
 800d4ec:	20000a2c 	.word	0x20000a2c
 800d4f0:	20000f04 	.word	0x20000f04

0800d4f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d4f4:	b480      	push	{r7}
 800d4f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d4f8:	4b07      	ldr	r3, [pc, #28]	; (800d518 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d004      	beq.n	800d50a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d500:	4b05      	ldr	r3, [pc, #20]	; (800d518 <pvTaskIncrementMutexHeldCount+0x24>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d506:	3201      	adds	r2, #1
 800d508:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d50a:	4b03      	ldr	r3, [pc, #12]	; (800d518 <pvTaskIncrementMutexHeldCount+0x24>)
 800d50c:	681b      	ldr	r3, [r3, #0]
	}
 800d50e:	4618      	mov	r0, r3
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	20000a28 	.word	0x20000a28

0800d51c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d526:	f000 fdc5 	bl	800e0b4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d52a:	4b1e      	ldr	r3, [pc, #120]	; (800d5a4 <ulTaskNotifyTake+0x88>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d530:	2b00      	cmp	r3, #0
 800d532:	d113      	bne.n	800d55c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d534:	4b1b      	ldr	r3, [pc, #108]	; (800d5a4 <ulTaskNotifyTake+0x88>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00b      	beq.n	800d55c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d544:	2101      	movs	r1, #1
 800d546:	6838      	ldr	r0, [r7, #0]
 800d548:	f000 f8e8 	bl	800d71c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d54c:	4b16      	ldr	r3, [pc, #88]	; (800d5a8 <ulTaskNotifyTake+0x8c>)
 800d54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d55c:	f000 fdda 	bl	800e114 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d560:	f000 fda8 	bl	800e0b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d564:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <ulTaskNotifyTake+0x88>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d56a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00c      	beq.n	800d58c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d004      	beq.n	800d582 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d578:	4b0a      	ldr	r3, [pc, #40]	; (800d5a4 <ulTaskNotifyTake+0x88>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2200      	movs	r2, #0
 800d57e:	655a      	str	r2, [r3, #84]	; 0x54
 800d580:	e004      	b.n	800d58c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d582:	4b08      	ldr	r3, [pc, #32]	; (800d5a4 <ulTaskNotifyTake+0x88>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	3a01      	subs	r2, #1
 800d58a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d58c:	4b05      	ldr	r3, [pc, #20]	; (800d5a4 <ulTaskNotifyTake+0x88>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2200      	movs	r2, #0
 800d592:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d596:	f000 fdbd 	bl	800e114 <vPortExitCritical>

		return ulReturn;
 800d59a:	68fb      	ldr	r3, [r7, #12]
	}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	20000a28 	.word	0x20000a28
 800d5a8:	e000ed04 	.word	0xe000ed04

0800d5ac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b08a      	sub	sp, #40	; 0x28
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	603b      	str	r3, [r7, #0]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10a      	bne.n	800d5dc <xTaskGenericNotify+0x30>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	61bb      	str	r3, [r7, #24]
}
 800d5d8:	bf00      	nop
 800d5da:	e7fe      	b.n	800d5da <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d5e0:	f000 fd68 	bl	800e0b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d5f8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	2202      	movs	r2, #2
 800d5fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800d602:	79fb      	ldrb	r3, [r7, #7]
 800d604:	2b04      	cmp	r3, #4
 800d606:	d828      	bhi.n	800d65a <xTaskGenericNotify+0xae>
 800d608:	a201      	add	r2, pc, #4	; (adr r2, 800d610 <xTaskGenericNotify+0x64>)
 800d60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60e:	bf00      	nop
 800d610:	0800d67b 	.word	0x0800d67b
 800d614:	0800d625 	.word	0x0800d625
 800d618:	0800d633 	.word	0x0800d633
 800d61c:	0800d63f 	.word	0x0800d63f
 800d620:	0800d647 	.word	0x0800d647
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	431a      	orrs	r2, r3
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d630:	e026      	b.n	800d680 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d632:	6a3b      	ldr	r3, [r7, #32]
 800d634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	6a3b      	ldr	r3, [r7, #32]
 800d63a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d63c:	e020      	b.n	800d680 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d63e:	6a3b      	ldr	r3, [r7, #32]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d644:	e01c      	b.n	800d680 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d646:	7ffb      	ldrb	r3, [r7, #31]
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d003      	beq.n	800d654 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d64c:	6a3b      	ldr	r3, [r7, #32]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d652:	e015      	b.n	800d680 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800d654:	2300      	movs	r3, #0
 800d656:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d658:	e012      	b.n	800d680 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d65a:	6a3b      	ldr	r3, [r7, #32]
 800d65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d662:	d00c      	beq.n	800d67e <xTaskGenericNotify+0xd2>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	617b      	str	r3, [r7, #20]
}
 800d676:	bf00      	nop
 800d678:	e7fe      	b.n	800d678 <xTaskGenericNotify+0xcc>
					break;
 800d67a:	bf00      	nop
 800d67c:	e000      	b.n	800d680 <xTaskGenericNotify+0xd4>

					break;
 800d67e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d680:	7ffb      	ldrb	r3, [r7, #31]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d13a      	bne.n	800d6fc <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d686:	6a3b      	ldr	r3, [r7, #32]
 800d688:	3304      	adds	r3, #4
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fd fea0 	bl	800b3d0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d690:	6a3b      	ldr	r3, [r7, #32]
 800d692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d694:	4b1d      	ldr	r3, [pc, #116]	; (800d70c <xTaskGenericNotify+0x160>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d903      	bls.n	800d6a4 <xTaskGenericNotify+0xf8>
 800d69c:	6a3b      	ldr	r3, [r7, #32]
 800d69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a0:	4a1a      	ldr	r2, [pc, #104]	; (800d70c <xTaskGenericNotify+0x160>)
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	6a3b      	ldr	r3, [r7, #32]
 800d6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4a17      	ldr	r2, [pc, #92]	; (800d710 <xTaskGenericNotify+0x164>)
 800d6b2:	441a      	add	r2, r3
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	4610      	mov	r0, r2
 800d6bc:	f7fd fe2b 	bl	800b316 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d6c0:	6a3b      	ldr	r3, [r7, #32]
 800d6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00a      	beq.n	800d6de <xTaskGenericNotify+0x132>
	__asm volatile
 800d6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6cc:	f383 8811 	msr	BASEPRI, r3
 800d6d0:	f3bf 8f6f 	isb	sy
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	613b      	str	r3, [r7, #16]
}
 800d6da:	bf00      	nop
 800d6dc:	e7fe      	b.n	800d6dc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6de:	6a3b      	ldr	r3, [r7, #32]
 800d6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e2:	4b0c      	ldr	r3, [pc, #48]	; (800d714 <xTaskGenericNotify+0x168>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d907      	bls.n	800d6fc <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d6ec:	4b0a      	ldr	r3, [pc, #40]	; (800d718 <xTaskGenericNotify+0x16c>)
 800d6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d6fc:	f000 fd0a 	bl	800e114 <vPortExitCritical>

		return xReturn;
 800d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d702:	4618      	mov	r0, r3
 800d704:	3728      	adds	r7, #40	; 0x28
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20000f04 	.word	0x20000f04
 800d710:	20000a2c 	.word	0x20000a2c
 800d714:	20000a28 	.word	0x20000a28
 800d718:	e000ed04 	.word	0xe000ed04

0800d71c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d726:	4b21      	ldr	r3, [pc, #132]	; (800d7ac <prvAddCurrentTaskToDelayedList+0x90>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d72c:	4b20      	ldr	r3, [pc, #128]	; (800d7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3304      	adds	r3, #4
 800d732:	4618      	mov	r0, r3
 800d734:	f7fd fe4c 	bl	800b3d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73e:	d10a      	bne.n	800d756 <prvAddCurrentTaskToDelayedList+0x3a>
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d007      	beq.n	800d756 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d746:	4b1a      	ldr	r3, [pc, #104]	; (800d7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3304      	adds	r3, #4
 800d74c:	4619      	mov	r1, r3
 800d74e:	4819      	ldr	r0, [pc, #100]	; (800d7b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d750:	f7fd fde1 	bl	800b316 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d754:	e026      	b.n	800d7a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4413      	add	r3, r2
 800d75c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d75e:	4b14      	ldr	r3, [pc, #80]	; (800d7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	68ba      	ldr	r2, [r7, #8]
 800d764:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d209      	bcs.n	800d782 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d76e:	4b12      	ldr	r3, [pc, #72]	; (800d7b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	4b0f      	ldr	r3, [pc, #60]	; (800d7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	3304      	adds	r3, #4
 800d778:	4619      	mov	r1, r3
 800d77a:	4610      	mov	r0, r2
 800d77c:	f7fd fdef 	bl	800b35e <vListInsert>
}
 800d780:	e010      	b.n	800d7a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d782:	4b0e      	ldr	r3, [pc, #56]	; (800d7bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	4b0a      	ldr	r3, [pc, #40]	; (800d7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3304      	adds	r3, #4
 800d78c:	4619      	mov	r1, r3
 800d78e:	4610      	mov	r0, r2
 800d790:	f7fd fde5 	bl	800b35e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d794:	4b0a      	ldr	r3, [pc, #40]	; (800d7c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68ba      	ldr	r2, [r7, #8]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d202      	bcs.n	800d7a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d79e:	4a08      	ldr	r2, [pc, #32]	; (800d7c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	6013      	str	r3, [r2, #0]
}
 800d7a4:	bf00      	nop
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	20000f00 	.word	0x20000f00
 800d7b0:	20000a28 	.word	0x20000a28
 800d7b4:	20000ee8 	.word	0x20000ee8
 800d7b8:	20000eb8 	.word	0x20000eb8
 800d7bc:	20000eb4 	.word	0x20000eb4
 800d7c0:	20000f1c 	.word	0x20000f1c

0800d7c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b08a      	sub	sp, #40	; 0x28
 800d7c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d7ce:	f000 fb07 	bl	800dde0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d7d2:	4b1c      	ldr	r3, [pc, #112]	; (800d844 <xTimerCreateTimerTask+0x80>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d021      	beq.n	800d81e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d7e2:	1d3a      	adds	r2, r7, #4
 800d7e4:	f107 0108 	add.w	r1, r7, #8
 800d7e8:	f107 030c 	add.w	r3, r7, #12
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fd fd4b 	bl	800b288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d7f2:	6879      	ldr	r1, [r7, #4]
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	9202      	str	r2, [sp, #8]
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	2300      	movs	r3, #0
 800d802:	460a      	mov	r2, r1
 800d804:	4910      	ldr	r1, [pc, #64]	; (800d848 <xTimerCreateTimerTask+0x84>)
 800d806:	4811      	ldr	r0, [pc, #68]	; (800d84c <xTimerCreateTimerTask+0x88>)
 800d808:	f7fe fed0 	bl	800c5ac <xTaskCreateStatic>
 800d80c:	4603      	mov	r3, r0
 800d80e:	4a10      	ldr	r2, [pc, #64]	; (800d850 <xTimerCreateTimerTask+0x8c>)
 800d810:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d812:	4b0f      	ldr	r3, [pc, #60]	; (800d850 <xTimerCreateTimerTask+0x8c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d81a:	2301      	movs	r3, #1
 800d81c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	613b      	str	r3, [r7, #16]
}
 800d836:	bf00      	nop
 800d838:	e7fe      	b.n	800d838 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d83a:	697b      	ldr	r3, [r7, #20]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20000f58 	.word	0x20000f58
 800d848:	0801310c 	.word	0x0801310c
 800d84c:	0800d989 	.word	0x0800d989
 800d850:	20000f5c 	.word	0x20000f5c

0800d854 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b08a      	sub	sp, #40	; 0x28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
 800d860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d862:	2300      	movs	r3, #0
 800d864:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10a      	bne.n	800d882 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	623b      	str	r3, [r7, #32]
}
 800d87e:	bf00      	nop
 800d880:	e7fe      	b.n	800d880 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d882:	4b1a      	ldr	r3, [pc, #104]	; (800d8ec <xTimerGenericCommand+0x98>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d02a      	beq.n	800d8e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	2b05      	cmp	r3, #5
 800d89a:	dc18      	bgt.n	800d8ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d89c:	f7ff fcb4 	bl	800d208 <xTaskGetSchedulerState>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d109      	bne.n	800d8ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d8a6:	4b11      	ldr	r3, [pc, #68]	; (800d8ec <xTimerGenericCommand+0x98>)
 800d8a8:	6818      	ldr	r0, [r3, #0]
 800d8aa:	f107 0110 	add.w	r1, r7, #16
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8b2:	f7fe f815 	bl	800b8e0 <xQueueGenericSend>
 800d8b6:	6278      	str	r0, [r7, #36]	; 0x24
 800d8b8:	e012      	b.n	800d8e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d8ba:	4b0c      	ldr	r3, [pc, #48]	; (800d8ec <xTimerGenericCommand+0x98>)
 800d8bc:	6818      	ldr	r0, [r3, #0]
 800d8be:	f107 0110 	add.w	r1, r7, #16
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f7fe f80b 	bl	800b8e0 <xQueueGenericSend>
 800d8ca:	6278      	str	r0, [r7, #36]	; 0x24
 800d8cc:	e008      	b.n	800d8e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d8ce:	4b07      	ldr	r3, [pc, #28]	; (800d8ec <xTimerGenericCommand+0x98>)
 800d8d0:	6818      	ldr	r0, [r3, #0]
 800d8d2:	f107 0110 	add.w	r1, r7, #16
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	f7fe f8ff 	bl	800badc <xQueueGenericSendFromISR>
 800d8de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3728      	adds	r7, #40	; 0x28
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	20000f58 	.word	0x20000f58

0800d8f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b088      	sub	sp, #32
 800d8f4:	af02      	add	r7, sp, #8
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8fa:	4b22      	ldr	r3, [pc, #136]	; (800d984 <prvProcessExpiredTimer+0x94>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	3304      	adds	r3, #4
 800d908:	4618      	mov	r0, r3
 800d90a:	f7fd fd61 	bl	800b3d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d914:	f003 0304 	and.w	r3, r3, #4
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d022      	beq.n	800d962 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	699a      	ldr	r2, [r3, #24]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	18d1      	adds	r1, r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	6978      	ldr	r0, [r7, #20]
 800d92a:	f000 f8d1 	bl	800dad0 <prvInsertTimerInActiveList>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d01f      	beq.n	800d974 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d934:	2300      	movs	r3, #0
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	2300      	movs	r3, #0
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	2100      	movs	r1, #0
 800d93e:	6978      	ldr	r0, [r7, #20]
 800d940:	f7ff ff88 	bl	800d854 <xTimerGenericCommand>
 800d944:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d113      	bne.n	800d974 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	60fb      	str	r3, [r7, #12]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d968:	f023 0301 	bic.w	r3, r3, #1
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	6a1b      	ldr	r3, [r3, #32]
 800d978:	6978      	ldr	r0, [r7, #20]
 800d97a:	4798      	blx	r3
}
 800d97c:	bf00      	nop
 800d97e:	3718      	adds	r7, #24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	20000f50 	.word	0x20000f50

0800d988 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d990:	f107 0308 	add.w	r3, r7, #8
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f857 	bl	800da48 <prvGetNextExpireTime>
 800d99a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	4619      	mov	r1, r3
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 f803 	bl	800d9ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d9a6:	f000 f8d5 	bl	800db54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9aa:	e7f1      	b.n	800d990 <prvTimerTask+0x8>

0800d9ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d9b6:	f7ff f835 	bl	800ca24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9ba:	f107 0308 	add.w	r3, r7, #8
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 f866 	bl	800da90 <prvSampleTimeNow>
 800d9c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d130      	bne.n	800da2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d10a      	bne.n	800d9e8 <prvProcessTimerOrBlockTask+0x3c>
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d806      	bhi.n	800d9e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d9da:	f7ff f831 	bl	800ca40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d9de:	68f9      	ldr	r1, [r7, #12]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff ff85 	bl	800d8f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d9e6:	e024      	b.n	800da32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d008      	beq.n	800da00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d9ee:	4b13      	ldr	r3, [pc, #76]	; (800da3c <prvProcessTimerOrBlockTask+0x90>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <prvProcessTimerOrBlockTask+0x50>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e000      	b.n	800d9fe <prvProcessTimerOrBlockTask+0x52>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da00:	4b0f      	ldr	r3, [pc, #60]	; (800da40 <prvProcessTimerOrBlockTask+0x94>)
 800da02:	6818      	ldr	r0, [r3, #0]
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	4619      	mov	r1, r3
 800da0e:	f7fe fd99 	bl	800c544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da12:	f7ff f815 	bl	800ca40 <xTaskResumeAll>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d10a      	bne.n	800da32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da1c:	4b09      	ldr	r3, [pc, #36]	; (800da44 <prvProcessTimerOrBlockTask+0x98>)
 800da1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	f3bf 8f6f 	isb	sy
}
 800da2c:	e001      	b.n	800da32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da2e:	f7ff f807 	bl	800ca40 <xTaskResumeAll>
}
 800da32:	bf00      	nop
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20000f54 	.word	0x20000f54
 800da40:	20000f58 	.word	0x20000f58
 800da44:	e000ed04 	.word	0xe000ed04

0800da48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da50:	4b0e      	ldr	r3, [pc, #56]	; (800da8c <prvGetNextExpireTime+0x44>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <prvGetNextExpireTime+0x16>
 800da5a:	2201      	movs	r2, #1
 800da5c:	e000      	b.n	800da60 <prvGetNextExpireTime+0x18>
 800da5e:	2200      	movs	r2, #0
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da6c:	4b07      	ldr	r3, [pc, #28]	; (800da8c <prvGetNextExpireTime+0x44>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	60fb      	str	r3, [r7, #12]
 800da76:	e001      	b.n	800da7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da78:	2300      	movs	r3, #0
 800da7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da7c:	68fb      	ldr	r3, [r7, #12]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	20000f50 	.word	0x20000f50

0800da90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da98:	f7ff f870 	bl	800cb7c <xTaskGetTickCount>
 800da9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da9e:	4b0b      	ldr	r3, [pc, #44]	; (800dacc <prvSampleTimeNow+0x3c>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d205      	bcs.n	800dab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800daa8:	f000 f936 	bl	800dd18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	e002      	b.n	800daba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800daba:	4a04      	ldr	r2, [pc, #16]	; (800dacc <prvSampleTimeNow+0x3c>)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dac0:	68fb      	ldr	r3, [r7, #12]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	20000f60 	.word	0x20000f60

0800dad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d812      	bhi.n	800db1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	1ad2      	subs	r2, r2, r3
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	429a      	cmp	r2, r3
 800db02:	d302      	bcc.n	800db0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db04:	2301      	movs	r3, #1
 800db06:	617b      	str	r3, [r7, #20]
 800db08:	e01b      	b.n	800db42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db0a:	4b10      	ldr	r3, [pc, #64]	; (800db4c <prvInsertTimerInActiveList+0x7c>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	3304      	adds	r3, #4
 800db12:	4619      	mov	r1, r3
 800db14:	4610      	mov	r0, r2
 800db16:	f7fd fc22 	bl	800b35e <vListInsert>
 800db1a:	e012      	b.n	800db42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	429a      	cmp	r2, r3
 800db22:	d206      	bcs.n	800db32 <prvInsertTimerInActiveList+0x62>
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d302      	bcc.n	800db32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db2c:	2301      	movs	r3, #1
 800db2e:	617b      	str	r3, [r7, #20]
 800db30:	e007      	b.n	800db42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db32:	4b07      	ldr	r3, [pc, #28]	; (800db50 <prvInsertTimerInActiveList+0x80>)
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	3304      	adds	r3, #4
 800db3a:	4619      	mov	r1, r3
 800db3c:	4610      	mov	r0, r2
 800db3e:	f7fd fc0e 	bl	800b35e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db42:	697b      	ldr	r3, [r7, #20]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	20000f54 	.word	0x20000f54
 800db50:	20000f50 	.word	0x20000f50

0800db54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b08e      	sub	sp, #56	; 0x38
 800db58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db5a:	e0ca      	b.n	800dcf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	da18      	bge.n	800db94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800db62:	1d3b      	adds	r3, r7, #4
 800db64:	3304      	adds	r3, #4
 800db66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800db68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10a      	bne.n	800db84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	61fb      	str	r3, [r7, #28]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db8a:	6850      	ldr	r0, [r2, #4]
 800db8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db8e:	6892      	ldr	r2, [r2, #8]
 800db90:	4611      	mov	r1, r2
 800db92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	f2c0 80aa 	blt.w	800dcf0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba2:	695b      	ldr	r3, [r3, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d004      	beq.n	800dbb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fd fc0f 	bl	800b3d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbb2:	463b      	mov	r3, r7
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7ff ff6b 	bl	800da90 <prvSampleTimeNow>
 800dbba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b09      	cmp	r3, #9
 800dbc0:	f200 8097 	bhi.w	800dcf2 <prvProcessReceivedCommands+0x19e>
 800dbc4:	a201      	add	r2, pc, #4	; (adr r2, 800dbcc <prvProcessReceivedCommands+0x78>)
 800dbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbca:	bf00      	nop
 800dbcc:	0800dbf5 	.word	0x0800dbf5
 800dbd0:	0800dbf5 	.word	0x0800dbf5
 800dbd4:	0800dbf5 	.word	0x0800dbf5
 800dbd8:	0800dc69 	.word	0x0800dc69
 800dbdc:	0800dc7d 	.word	0x0800dc7d
 800dbe0:	0800dcc7 	.word	0x0800dcc7
 800dbe4:	0800dbf5 	.word	0x0800dbf5
 800dbe8:	0800dbf5 	.word	0x0800dbf5
 800dbec:	0800dc69 	.word	0x0800dc69
 800dbf0:	0800dc7d 	.word	0x0800dc7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbfa:	f043 0301 	orr.w	r3, r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0a:	699b      	ldr	r3, [r3, #24]
 800dc0c:	18d1      	adds	r1, r2, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc14:	f7ff ff5c 	bl	800dad0 <prvInsertTimerInActiveList>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d069      	beq.n	800dcf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc2c:	f003 0304 	and.w	r3, r3, #4
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d05e      	beq.n	800dcf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	441a      	add	r2, r3
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	2300      	movs	r3, #0
 800dc42:	2100      	movs	r1, #0
 800dc44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc46:	f7ff fe05 	bl	800d854 <xTimerGenericCommand>
 800dc4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d14f      	bne.n	800dcf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	61bb      	str	r3, [r7, #24]
}
 800dc64:	bf00      	nop
 800dc66:	e7fe      	b.n	800dc66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc6e:	f023 0301 	bic.w	r3, r3, #1
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dc7a:	e03a      	b.n	800dcf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc82:	f043 0301 	orr.w	r3, r3, #1
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dc8e:	68ba      	ldr	r2, [r7, #8]
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	699b      	ldr	r3, [r3, #24]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d10a      	bne.n	800dcb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca0:	f383 8811 	msr	BASEPRI, r3
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	617b      	str	r3, [r7, #20]
}
 800dcae:	bf00      	nop
 800dcb0:	e7fe      	b.n	800dcb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	699a      	ldr	r2, [r3, #24]
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	18d1      	adds	r1, r2, r3
 800dcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc0:	f7ff ff06 	bl	800dad0 <prvInsertTimerInActiveList>
					break;
 800dcc4:	e015      	b.n	800dcf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dccc:	f003 0302 	and.w	r3, r3, #2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d103      	bne.n	800dcdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dcd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd6:	f000 fbdb 	bl	800e490 <vPortFree>
 800dcda:	e00a      	b.n	800dcf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dce2:	f023 0301 	bic.w	r3, r3, #1
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dcee:	e000      	b.n	800dcf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dcf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcf2:	4b08      	ldr	r3, [pc, #32]	; (800dd14 <prvProcessReceivedCommands+0x1c0>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	1d39      	adds	r1, r7, #4
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fe f816 	bl	800bd2c <xQueueReceive>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f47f af2a 	bne.w	800db5c <prvProcessReceivedCommands+0x8>
	}
}
 800dd08:	bf00      	nop
 800dd0a:	bf00      	nop
 800dd0c:	3730      	adds	r7, #48	; 0x30
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20000f58 	.word	0x20000f58

0800dd18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd1e:	e048      	b.n	800ddb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd20:	4b2d      	ldr	r3, [pc, #180]	; (800ddd8 <prvSwitchTimerLists+0xc0>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd2a:	4b2b      	ldr	r3, [pc, #172]	; (800ddd8 <prvSwitchTimerLists+0xc0>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3304      	adds	r3, #4
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fd fb49 	bl	800b3d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd4c:	f003 0304 	and.w	r3, r3, #4
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d02e      	beq.n	800ddb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	699b      	ldr	r3, [r3, #24]
 800dd58:	693a      	ldr	r2, [r7, #16]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d90e      	bls.n	800dd84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd72:	4b19      	ldr	r3, [pc, #100]	; (800ddd8 <prvSwitchTimerLists+0xc0>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	3304      	adds	r3, #4
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	4610      	mov	r0, r2
 800dd7e:	f7fd faee 	bl	800b35e <vListInsert>
 800dd82:	e016      	b.n	800ddb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd84:	2300      	movs	r3, #0
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	2300      	movs	r3, #0
 800dd8a:	693a      	ldr	r2, [r7, #16]
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f7ff fd60 	bl	800d854 <xTimerGenericCommand>
 800dd94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10a      	bne.n	800ddb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	603b      	str	r3, [r7, #0]
}
 800ddae:	bf00      	nop
 800ddb0:	e7fe      	b.n	800ddb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddb2:	4b09      	ldr	r3, [pc, #36]	; (800ddd8 <prvSwitchTimerLists+0xc0>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1b1      	bne.n	800dd20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ddbc:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <prvSwitchTimerLists+0xc0>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ddc2:	4b06      	ldr	r3, [pc, #24]	; (800dddc <prvSwitchTimerLists+0xc4>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a04      	ldr	r2, [pc, #16]	; (800ddd8 <prvSwitchTimerLists+0xc0>)
 800ddc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ddca:	4a04      	ldr	r2, [pc, #16]	; (800dddc <prvSwitchTimerLists+0xc4>)
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	6013      	str	r3, [r2, #0]
}
 800ddd0:	bf00      	nop
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	20000f50 	.word	0x20000f50
 800dddc:	20000f54 	.word	0x20000f54

0800dde0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dde6:	f000 f965 	bl	800e0b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ddea:	4b15      	ldr	r3, [pc, #84]	; (800de40 <prvCheckForValidListAndQueue+0x60>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d120      	bne.n	800de34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ddf2:	4814      	ldr	r0, [pc, #80]	; (800de44 <prvCheckForValidListAndQueue+0x64>)
 800ddf4:	f7fd fa62 	bl	800b2bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ddf8:	4813      	ldr	r0, [pc, #76]	; (800de48 <prvCheckForValidListAndQueue+0x68>)
 800ddfa:	f7fd fa5f 	bl	800b2bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ddfe:	4b13      	ldr	r3, [pc, #76]	; (800de4c <prvCheckForValidListAndQueue+0x6c>)
 800de00:	4a10      	ldr	r2, [pc, #64]	; (800de44 <prvCheckForValidListAndQueue+0x64>)
 800de02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de04:	4b12      	ldr	r3, [pc, #72]	; (800de50 <prvCheckForValidListAndQueue+0x70>)
 800de06:	4a10      	ldr	r2, [pc, #64]	; (800de48 <prvCheckForValidListAndQueue+0x68>)
 800de08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de0a:	2300      	movs	r3, #0
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	4b11      	ldr	r3, [pc, #68]	; (800de54 <prvCheckForValidListAndQueue+0x74>)
 800de10:	4a11      	ldr	r2, [pc, #68]	; (800de58 <prvCheckForValidListAndQueue+0x78>)
 800de12:	2110      	movs	r1, #16
 800de14:	200a      	movs	r0, #10
 800de16:	f7fd fb6d 	bl	800b4f4 <xQueueGenericCreateStatic>
 800de1a:	4603      	mov	r3, r0
 800de1c:	4a08      	ldr	r2, [pc, #32]	; (800de40 <prvCheckForValidListAndQueue+0x60>)
 800de1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de20:	4b07      	ldr	r3, [pc, #28]	; (800de40 <prvCheckForValidListAndQueue+0x60>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d005      	beq.n	800de34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de28:	4b05      	ldr	r3, [pc, #20]	; (800de40 <prvCheckForValidListAndQueue+0x60>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	490b      	ldr	r1, [pc, #44]	; (800de5c <prvCheckForValidListAndQueue+0x7c>)
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe fb34 	bl	800c49c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de34:	f000 f96e 	bl	800e114 <vPortExitCritical>
}
 800de38:	bf00      	nop
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	20000f58 	.word	0x20000f58
 800de44:	20000f28 	.word	0x20000f28
 800de48:	20000f3c 	.word	0x20000f3c
 800de4c:	20000f50 	.word	0x20000f50
 800de50:	20000f54 	.word	0x20000f54
 800de54:	20001004 	.word	0x20001004
 800de58:	20000f64 	.word	0x20000f64
 800de5c:	08013114 	.word	0x08013114

0800de60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	3b04      	subs	r3, #4
 800de70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800de78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	3b04      	subs	r3, #4
 800de7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	f023 0201 	bic.w	r2, r3, #1
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3b04      	subs	r3, #4
 800de8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800de90:	4a0c      	ldr	r2, [pc, #48]	; (800dec4 <pxPortInitialiseStack+0x64>)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3b14      	subs	r3, #20
 800de9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	3b04      	subs	r3, #4
 800dea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f06f 0202 	mvn.w	r2, #2
 800deae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3b20      	subs	r3, #32
 800deb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800deb6:	68fb      	ldr	r3, [r7, #12]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3714      	adds	r7, #20
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	0800dec9 	.word	0x0800dec9

0800dec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ded2:	4b12      	ldr	r3, [pc, #72]	; (800df1c <prvTaskExitError+0x54>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deda:	d00a      	beq.n	800def2 <prvTaskExitError+0x2a>
	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	60fb      	str	r3, [r7, #12]
}
 800deee:	bf00      	nop
 800def0:	e7fe      	b.n	800def0 <prvTaskExitError+0x28>
	__asm volatile
 800def2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	60bb      	str	r3, [r7, #8]
}
 800df04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df06:	bf00      	nop
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d0fc      	beq.n	800df08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df0e:	bf00      	nop
 800df10:	bf00      	nop
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	20000024 	.word	0x20000024

0800df20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df20:	4b07      	ldr	r3, [pc, #28]	; (800df40 <pxCurrentTCBConst2>)
 800df22:	6819      	ldr	r1, [r3, #0]
 800df24:	6808      	ldr	r0, [r1, #0]
 800df26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2a:	f380 8809 	msr	PSP, r0
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	f04f 0000 	mov.w	r0, #0
 800df36:	f380 8811 	msr	BASEPRI, r0
 800df3a:	4770      	bx	lr
 800df3c:	f3af 8000 	nop.w

0800df40 <pxCurrentTCBConst2>:
 800df40:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800df44:	bf00      	nop
 800df46:	bf00      	nop

0800df48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df48:	4808      	ldr	r0, [pc, #32]	; (800df6c <prvPortStartFirstTask+0x24>)
 800df4a:	6800      	ldr	r0, [r0, #0]
 800df4c:	6800      	ldr	r0, [r0, #0]
 800df4e:	f380 8808 	msr	MSP, r0
 800df52:	f04f 0000 	mov.w	r0, #0
 800df56:	f380 8814 	msr	CONTROL, r0
 800df5a:	b662      	cpsie	i
 800df5c:	b661      	cpsie	f
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	df00      	svc	0
 800df68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df6a:	bf00      	nop
 800df6c:	e000ed08 	.word	0xe000ed08

0800df70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800df76:	4b46      	ldr	r3, [pc, #280]	; (800e090 <xPortStartScheduler+0x120>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a46      	ldr	r2, [pc, #280]	; (800e094 <xPortStartScheduler+0x124>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d10a      	bne.n	800df96 <xPortStartScheduler+0x26>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	613b      	str	r3, [r7, #16]
}
 800df92:	bf00      	nop
 800df94:	e7fe      	b.n	800df94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800df96:	4b3e      	ldr	r3, [pc, #248]	; (800e090 <xPortStartScheduler+0x120>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a3f      	ldr	r2, [pc, #252]	; (800e098 <xPortStartScheduler+0x128>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d10a      	bne.n	800dfb6 <xPortStartScheduler+0x46>
	__asm volatile
 800dfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa4:	f383 8811 	msr	BASEPRI, r3
 800dfa8:	f3bf 8f6f 	isb	sy
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	60fb      	str	r3, [r7, #12]
}
 800dfb2:	bf00      	nop
 800dfb4:	e7fe      	b.n	800dfb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dfb6:	4b39      	ldr	r3, [pc, #228]	; (800e09c <xPortStartScheduler+0x12c>)
 800dfb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	22ff      	movs	r2, #255	; 0xff
 800dfc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dfd0:	78fb      	ldrb	r3, [r7, #3]
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	4b31      	ldr	r3, [pc, #196]	; (800e0a0 <xPortStartScheduler+0x130>)
 800dfdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dfde:	4b31      	ldr	r3, [pc, #196]	; (800e0a4 <xPortStartScheduler+0x134>)
 800dfe0:	2207      	movs	r2, #7
 800dfe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dfe4:	e009      	b.n	800dffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dfe6:	4b2f      	ldr	r3, [pc, #188]	; (800e0a4 <xPortStartScheduler+0x134>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	3b01      	subs	r3, #1
 800dfec:	4a2d      	ldr	r2, [pc, #180]	; (800e0a4 <xPortStartScheduler+0x134>)
 800dfee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dff0:	78fb      	ldrb	r3, [r7, #3]
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	005b      	lsls	r3, r3, #1
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dffa:	78fb      	ldrb	r3, [r7, #3]
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e002:	2b80      	cmp	r3, #128	; 0x80
 800e004:	d0ef      	beq.n	800dfe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e006:	4b27      	ldr	r3, [pc, #156]	; (800e0a4 <xPortStartScheduler+0x134>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f1c3 0307 	rsb	r3, r3, #7
 800e00e:	2b04      	cmp	r3, #4
 800e010:	d00a      	beq.n	800e028 <xPortStartScheduler+0xb8>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	60bb      	str	r3, [r7, #8]
}
 800e024:	bf00      	nop
 800e026:	e7fe      	b.n	800e026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e028:	4b1e      	ldr	r3, [pc, #120]	; (800e0a4 <xPortStartScheduler+0x134>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	021b      	lsls	r3, r3, #8
 800e02e:	4a1d      	ldr	r2, [pc, #116]	; (800e0a4 <xPortStartScheduler+0x134>)
 800e030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e032:	4b1c      	ldr	r3, [pc, #112]	; (800e0a4 <xPortStartScheduler+0x134>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e03a:	4a1a      	ldr	r2, [pc, #104]	; (800e0a4 <xPortStartScheduler+0x134>)
 800e03c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	b2da      	uxtb	r2, r3
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e046:	4b18      	ldr	r3, [pc, #96]	; (800e0a8 <xPortStartScheduler+0x138>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4a17      	ldr	r2, [pc, #92]	; (800e0a8 <xPortStartScheduler+0x138>)
 800e04c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e052:	4b15      	ldr	r3, [pc, #84]	; (800e0a8 <xPortStartScheduler+0x138>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a14      	ldr	r2, [pc, #80]	; (800e0a8 <xPortStartScheduler+0x138>)
 800e058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e05c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e05e:	f000 f8dd 	bl	800e21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e062:	4b12      	ldr	r3, [pc, #72]	; (800e0ac <xPortStartScheduler+0x13c>)
 800e064:	2200      	movs	r2, #0
 800e066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e068:	f000 f8fc 	bl	800e264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e06c:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <xPortStartScheduler+0x140>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a0f      	ldr	r2, [pc, #60]	; (800e0b0 <xPortStartScheduler+0x140>)
 800e072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e078:	f7ff ff66 	bl	800df48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e07c:	f7fe fe48 	bl	800cd10 <vTaskSwitchContext>
	prvTaskExitError();
 800e080:	f7ff ff22 	bl	800dec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	e000ed00 	.word	0xe000ed00
 800e094:	410fc271 	.word	0x410fc271
 800e098:	410fc270 	.word	0x410fc270
 800e09c:	e000e400 	.word	0xe000e400
 800e0a0:	20001054 	.word	0x20001054
 800e0a4:	20001058 	.word	0x20001058
 800e0a8:	e000ed20 	.word	0xe000ed20
 800e0ac:	20000024 	.word	0x20000024
 800e0b0:	e000ef34 	.word	0xe000ef34

0800e0b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	607b      	str	r3, [r7, #4]
}
 800e0cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e0ce:	4b0f      	ldr	r3, [pc, #60]	; (800e10c <vPortEnterCritical+0x58>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	4a0d      	ldr	r2, [pc, #52]	; (800e10c <vPortEnterCritical+0x58>)
 800e0d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e0d8:	4b0c      	ldr	r3, [pc, #48]	; (800e10c <vPortEnterCritical+0x58>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d10f      	bne.n	800e100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e0e0:	4b0b      	ldr	r3, [pc, #44]	; (800e110 <vPortEnterCritical+0x5c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00a      	beq.n	800e100 <vPortEnterCritical+0x4c>
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	603b      	str	r3, [r7, #0]
}
 800e0fc:	bf00      	nop
 800e0fe:	e7fe      	b.n	800e0fe <vPortEnterCritical+0x4a>
	}
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	20000024 	.word	0x20000024
 800e110:	e000ed04 	.word	0xe000ed04

0800e114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e11a:	4b12      	ldr	r3, [pc, #72]	; (800e164 <vPortExitCritical+0x50>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10a      	bne.n	800e138 <vPortExitCritical+0x24>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	607b      	str	r3, [r7, #4]
}
 800e134:	bf00      	nop
 800e136:	e7fe      	b.n	800e136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e138:	4b0a      	ldr	r3, [pc, #40]	; (800e164 <vPortExitCritical+0x50>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3b01      	subs	r3, #1
 800e13e:	4a09      	ldr	r2, [pc, #36]	; (800e164 <vPortExitCritical+0x50>)
 800e140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e142:	4b08      	ldr	r3, [pc, #32]	; (800e164 <vPortExitCritical+0x50>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d105      	bne.n	800e156 <vPortExitCritical+0x42>
 800e14a:	2300      	movs	r3, #0
 800e14c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	f383 8811 	msr	BASEPRI, r3
}
 800e154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e156:	bf00      	nop
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop
 800e164:	20000024 	.word	0x20000024
	...

0800e170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e170:	f3ef 8009 	mrs	r0, PSP
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	4b15      	ldr	r3, [pc, #84]	; (800e1d0 <pxCurrentTCBConst>)
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	f01e 0f10 	tst.w	lr, #16
 800e180:	bf08      	it	eq
 800e182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18a:	6010      	str	r0, [r2, #0]
 800e18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e190:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e194:	f380 8811 	msr	BASEPRI, r0
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f7fe fdb6 	bl	800cd10 <vTaskSwitchContext>
 800e1a4:	f04f 0000 	mov.w	r0, #0
 800e1a8:	f380 8811 	msr	BASEPRI, r0
 800e1ac:	bc09      	pop	{r0, r3}
 800e1ae:	6819      	ldr	r1, [r3, #0]
 800e1b0:	6808      	ldr	r0, [r1, #0]
 800e1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b6:	f01e 0f10 	tst.w	lr, #16
 800e1ba:	bf08      	it	eq
 800e1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e1c0:	f380 8809 	msr	PSP, r0
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	f3af 8000 	nop.w

0800e1d0 <pxCurrentTCBConst>:
 800e1d0:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e1d4:	bf00      	nop
 800e1d6:	bf00      	nop

0800e1d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	607b      	str	r3, [r7, #4]
}
 800e1f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e1f2:	f7fe fcd3 	bl	800cb9c <xTaskIncrementTick>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d003      	beq.n	800e204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e1fc:	4b06      	ldr	r3, [pc, #24]	; (800e218 <xPortSysTickHandler+0x40>)
 800e1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	2300      	movs	r3, #0
 800e206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	f383 8811 	msr	BASEPRI, r3
}
 800e20e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e210:	bf00      	nop
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	e000ed04 	.word	0xe000ed04

0800e21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e21c:	b480      	push	{r7}
 800e21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e220:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <vPortSetupTimerInterrupt+0x34>)
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e226:	4b0b      	ldr	r3, [pc, #44]	; (800e254 <vPortSetupTimerInterrupt+0x38>)
 800e228:	2200      	movs	r2, #0
 800e22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e22c:	4b0a      	ldr	r3, [pc, #40]	; (800e258 <vPortSetupTimerInterrupt+0x3c>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a0a      	ldr	r2, [pc, #40]	; (800e25c <vPortSetupTimerInterrupt+0x40>)
 800e232:	fba2 2303 	umull	r2, r3, r2, r3
 800e236:	099b      	lsrs	r3, r3, #6
 800e238:	4a09      	ldr	r2, [pc, #36]	; (800e260 <vPortSetupTimerInterrupt+0x44>)
 800e23a:	3b01      	subs	r3, #1
 800e23c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e23e:	4b04      	ldr	r3, [pc, #16]	; (800e250 <vPortSetupTimerInterrupt+0x34>)
 800e240:	2207      	movs	r2, #7
 800e242:	601a      	str	r2, [r3, #0]
}
 800e244:	bf00      	nop
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	e000e010 	.word	0xe000e010
 800e254:	e000e018 	.word	0xe000e018
 800e258:	20000004 	.word	0x20000004
 800e25c:	10624dd3 	.word	0x10624dd3
 800e260:	e000e014 	.word	0xe000e014

0800e264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e274 <vPortEnableVFP+0x10>
 800e268:	6801      	ldr	r1, [r0, #0]
 800e26a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e26e:	6001      	str	r1, [r0, #0]
 800e270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e272:	bf00      	nop
 800e274:	e000ed88 	.word	0xe000ed88

0800e278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e27e:	f3ef 8305 	mrs	r3, IPSR
 800e282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2b0f      	cmp	r3, #15
 800e288:	d914      	bls.n	800e2b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e28a:	4a17      	ldr	r2, [pc, #92]	; (800e2e8 <vPortValidateInterruptPriority+0x70>)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	4413      	add	r3, r2
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e294:	4b15      	ldr	r3, [pc, #84]	; (800e2ec <vPortValidateInterruptPriority+0x74>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	7afa      	ldrb	r2, [r7, #11]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d20a      	bcs.n	800e2b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	607b      	str	r3, [r7, #4]
}
 800e2b0:	bf00      	nop
 800e2b2:	e7fe      	b.n	800e2b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e2b4:	4b0e      	ldr	r3, [pc, #56]	; (800e2f0 <vPortValidateInterruptPriority+0x78>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e2bc:	4b0d      	ldr	r3, [pc, #52]	; (800e2f4 <vPortValidateInterruptPriority+0x7c>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d90a      	bls.n	800e2da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	603b      	str	r3, [r7, #0]
}
 800e2d6:	bf00      	nop
 800e2d8:	e7fe      	b.n	800e2d8 <vPortValidateInterruptPriority+0x60>
	}
 800e2da:	bf00      	nop
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	e000e3f0 	.word	0xe000e3f0
 800e2ec:	20001054 	.word	0x20001054
 800e2f0:	e000ed0c 	.word	0xe000ed0c
 800e2f4:	20001058 	.word	0x20001058

0800e2f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08a      	sub	sp, #40	; 0x28
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e300:	2300      	movs	r3, #0
 800e302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e304:	f7fe fb8e 	bl	800ca24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e308:	4b5b      	ldr	r3, [pc, #364]	; (800e478 <pvPortMalloc+0x180>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e310:	f000 f920 	bl	800e554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e314:	4b59      	ldr	r3, [pc, #356]	; (800e47c <pvPortMalloc+0x184>)
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4013      	ands	r3, r2
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f040 8093 	bne.w	800e448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d01d      	beq.n	800e364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e328:	2208      	movs	r2, #8
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4413      	add	r3, r2
 800e32e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f003 0307 	and.w	r3, r3, #7
 800e336:	2b00      	cmp	r3, #0
 800e338:	d014      	beq.n	800e364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f023 0307 	bic.w	r3, r3, #7
 800e340:	3308      	adds	r3, #8
 800e342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f003 0307 	and.w	r3, r3, #7
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00a      	beq.n	800e364 <pvPortMalloc+0x6c>
	__asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	617b      	str	r3, [r7, #20]
}
 800e360:	bf00      	nop
 800e362:	e7fe      	b.n	800e362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d06e      	beq.n	800e448 <pvPortMalloc+0x150>
 800e36a:	4b45      	ldr	r3, [pc, #276]	; (800e480 <pvPortMalloc+0x188>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	429a      	cmp	r2, r3
 800e372:	d869      	bhi.n	800e448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e374:	4b43      	ldr	r3, [pc, #268]	; (800e484 <pvPortMalloc+0x18c>)
 800e376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e378:	4b42      	ldr	r3, [pc, #264]	; (800e484 <pvPortMalloc+0x18c>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e37e:	e004      	b.n	800e38a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	429a      	cmp	r2, r3
 800e392:	d903      	bls.n	800e39c <pvPortMalloc+0xa4>
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d1f1      	bne.n	800e380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e39c:	4b36      	ldr	r3, [pc, #216]	; (800e478 <pvPortMalloc+0x180>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d050      	beq.n	800e448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2208      	movs	r2, #8
 800e3ac:	4413      	add	r3, r2
 800e3ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ba:	685a      	ldr	r2, [r3, #4]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	1ad2      	subs	r2, r2, r3
 800e3c0:	2308      	movs	r3, #8
 800e3c2:	005b      	lsls	r3, r3, #1
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d91f      	bls.n	800e408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	f003 0307 	and.w	r3, r3, #7
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00a      	beq.n	800e3f0 <pvPortMalloc+0xf8>
	__asm volatile
 800e3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	613b      	str	r3, [r7, #16]
}
 800e3ec:	bf00      	nop
 800e3ee:	e7fe      	b.n	800e3ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	685a      	ldr	r2, [r3, #4]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	1ad2      	subs	r2, r2, r3
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e402:	69b8      	ldr	r0, [r7, #24]
 800e404:	f000 f908 	bl	800e618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e408:	4b1d      	ldr	r3, [pc, #116]	; (800e480 <pvPortMalloc+0x188>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	4a1b      	ldr	r2, [pc, #108]	; (800e480 <pvPortMalloc+0x188>)
 800e414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e416:	4b1a      	ldr	r3, [pc, #104]	; (800e480 <pvPortMalloc+0x188>)
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	4b1b      	ldr	r3, [pc, #108]	; (800e488 <pvPortMalloc+0x190>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d203      	bcs.n	800e42a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e422:	4b17      	ldr	r3, [pc, #92]	; (800e480 <pvPortMalloc+0x188>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a18      	ldr	r2, [pc, #96]	; (800e488 <pvPortMalloc+0x190>)
 800e428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	4b13      	ldr	r3, [pc, #76]	; (800e47c <pvPortMalloc+0x184>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	431a      	orrs	r2, r3
 800e434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	2200      	movs	r2, #0
 800e43c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e43e:	4b13      	ldr	r3, [pc, #76]	; (800e48c <pvPortMalloc+0x194>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3301      	adds	r3, #1
 800e444:	4a11      	ldr	r2, [pc, #68]	; (800e48c <pvPortMalloc+0x194>)
 800e446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e448:	f7fe fafa 	bl	800ca40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	f003 0307 	and.w	r3, r3, #7
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00a      	beq.n	800e46c <pvPortMalloc+0x174>
	__asm volatile
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	60fb      	str	r3, [r7, #12]
}
 800e468:	bf00      	nop
 800e46a:	e7fe      	b.n	800e46a <pvPortMalloc+0x172>
	return pvReturn;
 800e46c:	69fb      	ldr	r3, [r7, #28]
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3728      	adds	r7, #40	; 0x28
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20004c64 	.word	0x20004c64
 800e47c:	20004c78 	.word	0x20004c78
 800e480:	20004c68 	.word	0x20004c68
 800e484:	20004c5c 	.word	0x20004c5c
 800e488:	20004c6c 	.word	0x20004c6c
 800e48c:	20004c70 	.word	0x20004c70

0800e490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d04d      	beq.n	800e53e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e4a2:	2308      	movs	r3, #8
 800e4a4:	425b      	negs	r3, r3
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	4b24      	ldr	r3, [pc, #144]	; (800e548 <vPortFree+0xb8>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d10a      	bne.n	800e4d4 <vPortFree+0x44>
	__asm volatile
 800e4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c2:	f383 8811 	msr	BASEPRI, r3
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	60fb      	str	r3, [r7, #12]
}
 800e4d0:	bf00      	nop
 800e4d2:	e7fe      	b.n	800e4d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00a      	beq.n	800e4f2 <vPortFree+0x62>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	60bb      	str	r3, [r7, #8]
}
 800e4ee:	bf00      	nop
 800e4f0:	e7fe      	b.n	800e4f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	685a      	ldr	r2, [r3, #4]
 800e4f6:	4b14      	ldr	r3, [pc, #80]	; (800e548 <vPortFree+0xb8>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4013      	ands	r3, r2
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d01e      	beq.n	800e53e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d11a      	bne.n	800e53e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	685a      	ldr	r2, [r3, #4]
 800e50c:	4b0e      	ldr	r3, [pc, #56]	; (800e548 <vPortFree+0xb8>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	43db      	mvns	r3, r3
 800e512:	401a      	ands	r2, r3
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e518:	f7fe fa84 	bl	800ca24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	685a      	ldr	r2, [r3, #4]
 800e520:	4b0a      	ldr	r3, [pc, #40]	; (800e54c <vPortFree+0xbc>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4413      	add	r3, r2
 800e526:	4a09      	ldr	r2, [pc, #36]	; (800e54c <vPortFree+0xbc>)
 800e528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e52a:	6938      	ldr	r0, [r7, #16]
 800e52c:	f000 f874 	bl	800e618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e530:	4b07      	ldr	r3, [pc, #28]	; (800e550 <vPortFree+0xc0>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	3301      	adds	r3, #1
 800e536:	4a06      	ldr	r2, [pc, #24]	; (800e550 <vPortFree+0xc0>)
 800e538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e53a:	f7fe fa81 	bl	800ca40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e53e:	bf00      	nop
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	20004c78 	.word	0x20004c78
 800e54c:	20004c68 	.word	0x20004c68
 800e550:	20004c74 	.word	0x20004c74

0800e554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e55a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e55e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e560:	4b27      	ldr	r3, [pc, #156]	; (800e600 <prvHeapInit+0xac>)
 800e562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f003 0307 	and.w	r3, r3, #7
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00c      	beq.n	800e588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	3307      	adds	r3, #7
 800e572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f023 0307 	bic.w	r3, r3, #7
 800e57a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	4a1f      	ldr	r2, [pc, #124]	; (800e600 <prvHeapInit+0xac>)
 800e584:	4413      	add	r3, r2
 800e586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e58c:	4a1d      	ldr	r2, [pc, #116]	; (800e604 <prvHeapInit+0xb0>)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e592:	4b1c      	ldr	r3, [pc, #112]	; (800e604 <prvHeapInit+0xb0>)
 800e594:	2200      	movs	r2, #0
 800e596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	4413      	add	r3, r2
 800e59e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e5a0:	2208      	movs	r2, #8
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	1a9b      	subs	r3, r3, r2
 800e5a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f023 0307 	bic.w	r3, r3, #7
 800e5ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	4a15      	ldr	r2, [pc, #84]	; (800e608 <prvHeapInit+0xb4>)
 800e5b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e5b6:	4b14      	ldr	r3, [pc, #80]	; (800e608 <prvHeapInit+0xb4>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e5be:	4b12      	ldr	r3, [pc, #72]	; (800e608 <prvHeapInit+0xb4>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	68fa      	ldr	r2, [r7, #12]
 800e5ce:	1ad2      	subs	r2, r2, r3
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e5d4:	4b0c      	ldr	r3, [pc, #48]	; (800e608 <prvHeapInit+0xb4>)
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	4a0a      	ldr	r2, [pc, #40]	; (800e60c <prvHeapInit+0xb8>)
 800e5e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	4a09      	ldr	r2, [pc, #36]	; (800e610 <prvHeapInit+0xbc>)
 800e5ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e5ec:	4b09      	ldr	r3, [pc, #36]	; (800e614 <prvHeapInit+0xc0>)
 800e5ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e5f2:	601a      	str	r2, [r3, #0]
}
 800e5f4:	bf00      	nop
 800e5f6:	3714      	adds	r7, #20
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr
 800e600:	2000105c 	.word	0x2000105c
 800e604:	20004c5c 	.word	0x20004c5c
 800e608:	20004c64 	.word	0x20004c64
 800e60c:	20004c6c 	.word	0x20004c6c
 800e610:	20004c68 	.word	0x20004c68
 800e614:	20004c78 	.word	0x20004c78

0800e618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e618:	b480      	push	{r7}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e620:	4b28      	ldr	r3, [pc, #160]	; (800e6c4 <prvInsertBlockIntoFreeList+0xac>)
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	e002      	b.n	800e62c <prvInsertBlockIntoFreeList+0x14>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	429a      	cmp	r2, r3
 800e634:	d8f7      	bhi.n	800e626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	4413      	add	r3, r2
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	429a      	cmp	r2, r3
 800e646:	d108      	bne.n	800e65a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	441a      	add	r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	441a      	add	r2, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d118      	bne.n	800e6a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	4b15      	ldr	r3, [pc, #84]	; (800e6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	429a      	cmp	r2, r3
 800e678:	d00d      	beq.n	800e696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	685a      	ldr	r2, [r3, #4]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	441a      	add	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	601a      	str	r2, [r3, #0]
 800e694:	e008      	b.n	800e6a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e696:	4b0c      	ldr	r3, [pc, #48]	; (800e6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	e003      	b.n	800e6a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d002      	beq.n	800e6b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6b6:	bf00      	nop
 800e6b8:	3714      	adds	r7, #20
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	20004c5c 	.word	0x20004c5c
 800e6c8:	20004c64 	.word	0x20004c64

0800e6cc <atof>:
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	f001 bb61 	b.w	800fd94 <strtod>
	...

0800e6d4 <__errno>:
 800e6d4:	4b01      	ldr	r3, [pc, #4]	; (800e6dc <__errno+0x8>)
 800e6d6:	6818      	ldr	r0, [r3, #0]
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	20000028 	.word	0x20000028

0800e6e0 <__libc_init_array>:
 800e6e0:	b570      	push	{r4, r5, r6, lr}
 800e6e2:	4d0d      	ldr	r5, [pc, #52]	; (800e718 <__libc_init_array+0x38>)
 800e6e4:	4c0d      	ldr	r4, [pc, #52]	; (800e71c <__libc_init_array+0x3c>)
 800e6e6:	1b64      	subs	r4, r4, r5
 800e6e8:	10a4      	asrs	r4, r4, #2
 800e6ea:	2600      	movs	r6, #0
 800e6ec:	42a6      	cmp	r6, r4
 800e6ee:	d109      	bne.n	800e704 <__libc_init_array+0x24>
 800e6f0:	4d0b      	ldr	r5, [pc, #44]	; (800e720 <__libc_init_array+0x40>)
 800e6f2:	4c0c      	ldr	r4, [pc, #48]	; (800e724 <__libc_init_array+0x44>)
 800e6f4:	f004 fae8 	bl	8012cc8 <_init>
 800e6f8:	1b64      	subs	r4, r4, r5
 800e6fa:	10a4      	asrs	r4, r4, #2
 800e6fc:	2600      	movs	r6, #0
 800e6fe:	42a6      	cmp	r6, r4
 800e700:	d105      	bne.n	800e70e <__libc_init_array+0x2e>
 800e702:	bd70      	pop	{r4, r5, r6, pc}
 800e704:	f855 3b04 	ldr.w	r3, [r5], #4
 800e708:	4798      	blx	r3
 800e70a:	3601      	adds	r6, #1
 800e70c:	e7ee      	b.n	800e6ec <__libc_init_array+0xc>
 800e70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e712:	4798      	blx	r3
 800e714:	3601      	adds	r6, #1
 800e716:	e7f2      	b.n	800e6fe <__libc_init_array+0x1e>
 800e718:	080137d8 	.word	0x080137d8
 800e71c:	080137d8 	.word	0x080137d8
 800e720:	080137d8 	.word	0x080137d8
 800e724:	080137dc 	.word	0x080137dc

0800e728 <memcpy>:
 800e728:	440a      	add	r2, r1
 800e72a:	4291      	cmp	r1, r2
 800e72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e730:	d100      	bne.n	800e734 <memcpy+0xc>
 800e732:	4770      	bx	lr
 800e734:	b510      	push	{r4, lr}
 800e736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e73e:	4291      	cmp	r1, r2
 800e740:	d1f9      	bne.n	800e736 <memcpy+0xe>
 800e742:	bd10      	pop	{r4, pc}

0800e744 <memset>:
 800e744:	4402      	add	r2, r0
 800e746:	4603      	mov	r3, r0
 800e748:	4293      	cmp	r3, r2
 800e74a:	d100      	bne.n	800e74e <memset+0xa>
 800e74c:	4770      	bx	lr
 800e74e:	f803 1b01 	strb.w	r1, [r3], #1
 800e752:	e7f9      	b.n	800e748 <memset+0x4>

0800e754 <__cvt>:
 800e754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e758:	ec55 4b10 	vmov	r4, r5, d0
 800e75c:	2d00      	cmp	r5, #0
 800e75e:	460e      	mov	r6, r1
 800e760:	4619      	mov	r1, r3
 800e762:	462b      	mov	r3, r5
 800e764:	bfbb      	ittet	lt
 800e766:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e76a:	461d      	movlt	r5, r3
 800e76c:	2300      	movge	r3, #0
 800e76e:	232d      	movlt	r3, #45	; 0x2d
 800e770:	700b      	strb	r3, [r1, #0]
 800e772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e774:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e778:	4691      	mov	r9, r2
 800e77a:	f023 0820 	bic.w	r8, r3, #32
 800e77e:	bfbc      	itt	lt
 800e780:	4622      	movlt	r2, r4
 800e782:	4614      	movlt	r4, r2
 800e784:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e788:	d005      	beq.n	800e796 <__cvt+0x42>
 800e78a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e78e:	d100      	bne.n	800e792 <__cvt+0x3e>
 800e790:	3601      	adds	r6, #1
 800e792:	2102      	movs	r1, #2
 800e794:	e000      	b.n	800e798 <__cvt+0x44>
 800e796:	2103      	movs	r1, #3
 800e798:	ab03      	add	r3, sp, #12
 800e79a:	9301      	str	r3, [sp, #4]
 800e79c:	ab02      	add	r3, sp, #8
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	ec45 4b10 	vmov	d0, r4, r5
 800e7a4:	4653      	mov	r3, sl
 800e7a6:	4632      	mov	r2, r6
 800e7a8:	f001 fc42 	bl	8010030 <_dtoa_r>
 800e7ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e7b0:	4607      	mov	r7, r0
 800e7b2:	d102      	bne.n	800e7ba <__cvt+0x66>
 800e7b4:	f019 0f01 	tst.w	r9, #1
 800e7b8:	d022      	beq.n	800e800 <__cvt+0xac>
 800e7ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e7be:	eb07 0906 	add.w	r9, r7, r6
 800e7c2:	d110      	bne.n	800e7e6 <__cvt+0x92>
 800e7c4:	783b      	ldrb	r3, [r7, #0]
 800e7c6:	2b30      	cmp	r3, #48	; 0x30
 800e7c8:	d10a      	bne.n	800e7e0 <__cvt+0x8c>
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	f7f2 f981 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7d6:	b918      	cbnz	r0, 800e7e0 <__cvt+0x8c>
 800e7d8:	f1c6 0601 	rsb	r6, r6, #1
 800e7dc:	f8ca 6000 	str.w	r6, [sl]
 800e7e0:	f8da 3000 	ldr.w	r3, [sl]
 800e7e4:	4499      	add	r9, r3
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	f7f2 f973 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7f2:	b108      	cbz	r0, 800e7f8 <__cvt+0xa4>
 800e7f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7f8:	2230      	movs	r2, #48	; 0x30
 800e7fa:	9b03      	ldr	r3, [sp, #12]
 800e7fc:	454b      	cmp	r3, r9
 800e7fe:	d307      	bcc.n	800e810 <__cvt+0xbc>
 800e800:	9b03      	ldr	r3, [sp, #12]
 800e802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e804:	1bdb      	subs	r3, r3, r7
 800e806:	4638      	mov	r0, r7
 800e808:	6013      	str	r3, [r2, #0]
 800e80a:	b004      	add	sp, #16
 800e80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e810:	1c59      	adds	r1, r3, #1
 800e812:	9103      	str	r1, [sp, #12]
 800e814:	701a      	strb	r2, [r3, #0]
 800e816:	e7f0      	b.n	800e7fa <__cvt+0xa6>

0800e818 <__exponent>:
 800e818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e81a:	4603      	mov	r3, r0
 800e81c:	2900      	cmp	r1, #0
 800e81e:	bfb8      	it	lt
 800e820:	4249      	neglt	r1, r1
 800e822:	f803 2b02 	strb.w	r2, [r3], #2
 800e826:	bfb4      	ite	lt
 800e828:	222d      	movlt	r2, #45	; 0x2d
 800e82a:	222b      	movge	r2, #43	; 0x2b
 800e82c:	2909      	cmp	r1, #9
 800e82e:	7042      	strb	r2, [r0, #1]
 800e830:	dd2a      	ble.n	800e888 <__exponent+0x70>
 800e832:	f10d 0407 	add.w	r4, sp, #7
 800e836:	46a4      	mov	ip, r4
 800e838:	270a      	movs	r7, #10
 800e83a:	46a6      	mov	lr, r4
 800e83c:	460a      	mov	r2, r1
 800e83e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e842:	fb07 1516 	mls	r5, r7, r6, r1
 800e846:	3530      	adds	r5, #48	; 0x30
 800e848:	2a63      	cmp	r2, #99	; 0x63
 800e84a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e84e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e852:	4631      	mov	r1, r6
 800e854:	dcf1      	bgt.n	800e83a <__exponent+0x22>
 800e856:	3130      	adds	r1, #48	; 0x30
 800e858:	f1ae 0502 	sub.w	r5, lr, #2
 800e85c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e860:	1c44      	adds	r4, r0, #1
 800e862:	4629      	mov	r1, r5
 800e864:	4561      	cmp	r1, ip
 800e866:	d30a      	bcc.n	800e87e <__exponent+0x66>
 800e868:	f10d 0209 	add.w	r2, sp, #9
 800e86c:	eba2 020e 	sub.w	r2, r2, lr
 800e870:	4565      	cmp	r5, ip
 800e872:	bf88      	it	hi
 800e874:	2200      	movhi	r2, #0
 800e876:	4413      	add	r3, r2
 800e878:	1a18      	subs	r0, r3, r0
 800e87a:	b003      	add	sp, #12
 800e87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e87e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e882:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e886:	e7ed      	b.n	800e864 <__exponent+0x4c>
 800e888:	2330      	movs	r3, #48	; 0x30
 800e88a:	3130      	adds	r1, #48	; 0x30
 800e88c:	7083      	strb	r3, [r0, #2]
 800e88e:	70c1      	strb	r1, [r0, #3]
 800e890:	1d03      	adds	r3, r0, #4
 800e892:	e7f1      	b.n	800e878 <__exponent+0x60>

0800e894 <_printf_float>:
 800e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e898:	ed2d 8b02 	vpush	{d8}
 800e89c:	b08d      	sub	sp, #52	; 0x34
 800e89e:	460c      	mov	r4, r1
 800e8a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e8a4:	4616      	mov	r6, r2
 800e8a6:	461f      	mov	r7, r3
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	f002 fd2f 	bl	801130c <_localeconv_r>
 800e8ae:	f8d0 a000 	ldr.w	sl, [r0]
 800e8b2:	4650      	mov	r0, sl
 800e8b4:	f7f1 fc94 	bl	80001e0 <strlen>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	930a      	str	r3, [sp, #40]	; 0x28
 800e8bc:	6823      	ldr	r3, [r4, #0]
 800e8be:	9305      	str	r3, [sp, #20]
 800e8c0:	f8d8 3000 	ldr.w	r3, [r8]
 800e8c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e8c8:	3307      	adds	r3, #7
 800e8ca:	f023 0307 	bic.w	r3, r3, #7
 800e8ce:	f103 0208 	add.w	r2, r3, #8
 800e8d2:	f8c8 2000 	str.w	r2, [r8]
 800e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e8de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e8e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e8e6:	9307      	str	r3, [sp, #28]
 800e8e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8ec:	ee08 0a10 	vmov	s16, r0
 800e8f0:	4b9f      	ldr	r3, [pc, #636]	; (800eb70 <_printf_float+0x2dc>)
 800e8f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8fa:	f7f2 f91f 	bl	8000b3c <__aeabi_dcmpun>
 800e8fe:	bb88      	cbnz	r0, 800e964 <_printf_float+0xd0>
 800e900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e904:	4b9a      	ldr	r3, [pc, #616]	; (800eb70 <_printf_float+0x2dc>)
 800e906:	f04f 32ff 	mov.w	r2, #4294967295
 800e90a:	f7f2 f8f9 	bl	8000b00 <__aeabi_dcmple>
 800e90e:	bb48      	cbnz	r0, 800e964 <_printf_float+0xd0>
 800e910:	2200      	movs	r2, #0
 800e912:	2300      	movs	r3, #0
 800e914:	4640      	mov	r0, r8
 800e916:	4649      	mov	r1, r9
 800e918:	f7f2 f8e8 	bl	8000aec <__aeabi_dcmplt>
 800e91c:	b110      	cbz	r0, 800e924 <_printf_float+0x90>
 800e91e:	232d      	movs	r3, #45	; 0x2d
 800e920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e924:	4b93      	ldr	r3, [pc, #588]	; (800eb74 <_printf_float+0x2e0>)
 800e926:	4894      	ldr	r0, [pc, #592]	; (800eb78 <_printf_float+0x2e4>)
 800e928:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e92c:	bf94      	ite	ls
 800e92e:	4698      	movls	r8, r3
 800e930:	4680      	movhi	r8, r0
 800e932:	2303      	movs	r3, #3
 800e934:	6123      	str	r3, [r4, #16]
 800e936:	9b05      	ldr	r3, [sp, #20]
 800e938:	f023 0204 	bic.w	r2, r3, #4
 800e93c:	6022      	str	r2, [r4, #0]
 800e93e:	f04f 0900 	mov.w	r9, #0
 800e942:	9700      	str	r7, [sp, #0]
 800e944:	4633      	mov	r3, r6
 800e946:	aa0b      	add	r2, sp, #44	; 0x2c
 800e948:	4621      	mov	r1, r4
 800e94a:	4628      	mov	r0, r5
 800e94c:	f000 f9d8 	bl	800ed00 <_printf_common>
 800e950:	3001      	adds	r0, #1
 800e952:	f040 8090 	bne.w	800ea76 <_printf_float+0x1e2>
 800e956:	f04f 30ff 	mov.w	r0, #4294967295
 800e95a:	b00d      	add	sp, #52	; 0x34
 800e95c:	ecbd 8b02 	vpop	{d8}
 800e960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e964:	4642      	mov	r2, r8
 800e966:	464b      	mov	r3, r9
 800e968:	4640      	mov	r0, r8
 800e96a:	4649      	mov	r1, r9
 800e96c:	f7f2 f8e6 	bl	8000b3c <__aeabi_dcmpun>
 800e970:	b140      	cbz	r0, 800e984 <_printf_float+0xf0>
 800e972:	464b      	mov	r3, r9
 800e974:	2b00      	cmp	r3, #0
 800e976:	bfbc      	itt	lt
 800e978:	232d      	movlt	r3, #45	; 0x2d
 800e97a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e97e:	487f      	ldr	r0, [pc, #508]	; (800eb7c <_printf_float+0x2e8>)
 800e980:	4b7f      	ldr	r3, [pc, #508]	; (800eb80 <_printf_float+0x2ec>)
 800e982:	e7d1      	b.n	800e928 <_printf_float+0x94>
 800e984:	6863      	ldr	r3, [r4, #4]
 800e986:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e98a:	9206      	str	r2, [sp, #24]
 800e98c:	1c5a      	adds	r2, r3, #1
 800e98e:	d13f      	bne.n	800ea10 <_printf_float+0x17c>
 800e990:	2306      	movs	r3, #6
 800e992:	6063      	str	r3, [r4, #4]
 800e994:	9b05      	ldr	r3, [sp, #20]
 800e996:	6861      	ldr	r1, [r4, #4]
 800e998:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e99c:	2300      	movs	r3, #0
 800e99e:	9303      	str	r3, [sp, #12]
 800e9a0:	ab0a      	add	r3, sp, #40	; 0x28
 800e9a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e9a6:	ab09      	add	r3, sp, #36	; 0x24
 800e9a8:	ec49 8b10 	vmov	d0, r8, r9
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	6022      	str	r2, [r4, #0]
 800e9b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	f7ff fecd 	bl	800e754 <__cvt>
 800e9ba:	9b06      	ldr	r3, [sp, #24]
 800e9bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9be:	2b47      	cmp	r3, #71	; 0x47
 800e9c0:	4680      	mov	r8, r0
 800e9c2:	d108      	bne.n	800e9d6 <_printf_float+0x142>
 800e9c4:	1cc8      	adds	r0, r1, #3
 800e9c6:	db02      	blt.n	800e9ce <_printf_float+0x13a>
 800e9c8:	6863      	ldr	r3, [r4, #4]
 800e9ca:	4299      	cmp	r1, r3
 800e9cc:	dd41      	ble.n	800ea52 <_printf_float+0x1be>
 800e9ce:	f1ab 0b02 	sub.w	fp, fp, #2
 800e9d2:	fa5f fb8b 	uxtb.w	fp, fp
 800e9d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e9da:	d820      	bhi.n	800ea1e <_printf_float+0x18a>
 800e9dc:	3901      	subs	r1, #1
 800e9de:	465a      	mov	r2, fp
 800e9e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e9e4:	9109      	str	r1, [sp, #36]	; 0x24
 800e9e6:	f7ff ff17 	bl	800e818 <__exponent>
 800e9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ec:	1813      	adds	r3, r2, r0
 800e9ee:	2a01      	cmp	r2, #1
 800e9f0:	4681      	mov	r9, r0
 800e9f2:	6123      	str	r3, [r4, #16]
 800e9f4:	dc02      	bgt.n	800e9fc <_printf_float+0x168>
 800e9f6:	6822      	ldr	r2, [r4, #0]
 800e9f8:	07d2      	lsls	r2, r2, #31
 800e9fa:	d501      	bpl.n	800ea00 <_printf_float+0x16c>
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	6123      	str	r3, [r4, #16]
 800ea00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d09c      	beq.n	800e942 <_printf_float+0xae>
 800ea08:	232d      	movs	r3, #45	; 0x2d
 800ea0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea0e:	e798      	b.n	800e942 <_printf_float+0xae>
 800ea10:	9a06      	ldr	r2, [sp, #24]
 800ea12:	2a47      	cmp	r2, #71	; 0x47
 800ea14:	d1be      	bne.n	800e994 <_printf_float+0x100>
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1bc      	bne.n	800e994 <_printf_float+0x100>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e7b9      	b.n	800e992 <_printf_float+0xfe>
 800ea1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ea22:	d118      	bne.n	800ea56 <_printf_float+0x1c2>
 800ea24:	2900      	cmp	r1, #0
 800ea26:	6863      	ldr	r3, [r4, #4]
 800ea28:	dd0b      	ble.n	800ea42 <_printf_float+0x1ae>
 800ea2a:	6121      	str	r1, [r4, #16]
 800ea2c:	b913      	cbnz	r3, 800ea34 <_printf_float+0x1a0>
 800ea2e:	6822      	ldr	r2, [r4, #0]
 800ea30:	07d0      	lsls	r0, r2, #31
 800ea32:	d502      	bpl.n	800ea3a <_printf_float+0x1a6>
 800ea34:	3301      	adds	r3, #1
 800ea36:	440b      	add	r3, r1
 800ea38:	6123      	str	r3, [r4, #16]
 800ea3a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ea3c:	f04f 0900 	mov.w	r9, #0
 800ea40:	e7de      	b.n	800ea00 <_printf_float+0x16c>
 800ea42:	b913      	cbnz	r3, 800ea4a <_printf_float+0x1b6>
 800ea44:	6822      	ldr	r2, [r4, #0]
 800ea46:	07d2      	lsls	r2, r2, #31
 800ea48:	d501      	bpl.n	800ea4e <_printf_float+0x1ba>
 800ea4a:	3302      	adds	r3, #2
 800ea4c:	e7f4      	b.n	800ea38 <_printf_float+0x1a4>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e7f2      	b.n	800ea38 <_printf_float+0x1a4>
 800ea52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ea56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea58:	4299      	cmp	r1, r3
 800ea5a:	db05      	blt.n	800ea68 <_printf_float+0x1d4>
 800ea5c:	6823      	ldr	r3, [r4, #0]
 800ea5e:	6121      	str	r1, [r4, #16]
 800ea60:	07d8      	lsls	r0, r3, #31
 800ea62:	d5ea      	bpl.n	800ea3a <_printf_float+0x1a6>
 800ea64:	1c4b      	adds	r3, r1, #1
 800ea66:	e7e7      	b.n	800ea38 <_printf_float+0x1a4>
 800ea68:	2900      	cmp	r1, #0
 800ea6a:	bfd4      	ite	le
 800ea6c:	f1c1 0202 	rsble	r2, r1, #2
 800ea70:	2201      	movgt	r2, #1
 800ea72:	4413      	add	r3, r2
 800ea74:	e7e0      	b.n	800ea38 <_printf_float+0x1a4>
 800ea76:	6823      	ldr	r3, [r4, #0]
 800ea78:	055a      	lsls	r2, r3, #21
 800ea7a:	d407      	bmi.n	800ea8c <_printf_float+0x1f8>
 800ea7c:	6923      	ldr	r3, [r4, #16]
 800ea7e:	4642      	mov	r2, r8
 800ea80:	4631      	mov	r1, r6
 800ea82:	4628      	mov	r0, r5
 800ea84:	47b8      	blx	r7
 800ea86:	3001      	adds	r0, #1
 800ea88:	d12c      	bne.n	800eae4 <_printf_float+0x250>
 800ea8a:	e764      	b.n	800e956 <_printf_float+0xc2>
 800ea8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea90:	f240 80e0 	bls.w	800ec54 <_printf_float+0x3c0>
 800ea94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea98:	2200      	movs	r2, #0
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f7f2 f81c 	bl	8000ad8 <__aeabi_dcmpeq>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d034      	beq.n	800eb0e <_printf_float+0x27a>
 800eaa4:	4a37      	ldr	r2, [pc, #220]	; (800eb84 <_printf_float+0x2f0>)
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	4631      	mov	r1, r6
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b8      	blx	r7
 800eaae:	3001      	adds	r0, #1
 800eab0:	f43f af51 	beq.w	800e956 <_printf_float+0xc2>
 800eab4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eab8:	429a      	cmp	r2, r3
 800eaba:	db02      	blt.n	800eac2 <_printf_float+0x22e>
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	07d8      	lsls	r0, r3, #31
 800eac0:	d510      	bpl.n	800eae4 <_printf_float+0x250>
 800eac2:	ee18 3a10 	vmov	r3, s16
 800eac6:	4652      	mov	r2, sl
 800eac8:	4631      	mov	r1, r6
 800eaca:	4628      	mov	r0, r5
 800eacc:	47b8      	blx	r7
 800eace:	3001      	adds	r0, #1
 800ead0:	f43f af41 	beq.w	800e956 <_printf_float+0xc2>
 800ead4:	f04f 0800 	mov.w	r8, #0
 800ead8:	f104 091a 	add.w	r9, r4, #26
 800eadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eade:	3b01      	subs	r3, #1
 800eae0:	4543      	cmp	r3, r8
 800eae2:	dc09      	bgt.n	800eaf8 <_printf_float+0x264>
 800eae4:	6823      	ldr	r3, [r4, #0]
 800eae6:	079b      	lsls	r3, r3, #30
 800eae8:	f100 8105 	bmi.w	800ecf6 <_printf_float+0x462>
 800eaec:	68e0      	ldr	r0, [r4, #12]
 800eaee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaf0:	4298      	cmp	r0, r3
 800eaf2:	bfb8      	it	lt
 800eaf4:	4618      	movlt	r0, r3
 800eaf6:	e730      	b.n	800e95a <_printf_float+0xc6>
 800eaf8:	2301      	movs	r3, #1
 800eafa:	464a      	mov	r2, r9
 800eafc:	4631      	mov	r1, r6
 800eafe:	4628      	mov	r0, r5
 800eb00:	47b8      	blx	r7
 800eb02:	3001      	adds	r0, #1
 800eb04:	f43f af27 	beq.w	800e956 <_printf_float+0xc2>
 800eb08:	f108 0801 	add.w	r8, r8, #1
 800eb0c:	e7e6      	b.n	800eadc <_printf_float+0x248>
 800eb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	dc39      	bgt.n	800eb88 <_printf_float+0x2f4>
 800eb14:	4a1b      	ldr	r2, [pc, #108]	; (800eb84 <_printf_float+0x2f0>)
 800eb16:	2301      	movs	r3, #1
 800eb18:	4631      	mov	r1, r6
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	47b8      	blx	r7
 800eb1e:	3001      	adds	r0, #1
 800eb20:	f43f af19 	beq.w	800e956 <_printf_float+0xc2>
 800eb24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	d102      	bne.n	800eb32 <_printf_float+0x29e>
 800eb2c:	6823      	ldr	r3, [r4, #0]
 800eb2e:	07d9      	lsls	r1, r3, #31
 800eb30:	d5d8      	bpl.n	800eae4 <_printf_float+0x250>
 800eb32:	ee18 3a10 	vmov	r3, s16
 800eb36:	4652      	mov	r2, sl
 800eb38:	4631      	mov	r1, r6
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	47b8      	blx	r7
 800eb3e:	3001      	adds	r0, #1
 800eb40:	f43f af09 	beq.w	800e956 <_printf_float+0xc2>
 800eb44:	f04f 0900 	mov.w	r9, #0
 800eb48:	f104 0a1a 	add.w	sl, r4, #26
 800eb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb4e:	425b      	negs	r3, r3
 800eb50:	454b      	cmp	r3, r9
 800eb52:	dc01      	bgt.n	800eb58 <_printf_float+0x2c4>
 800eb54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb56:	e792      	b.n	800ea7e <_printf_float+0x1ea>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	4652      	mov	r2, sl
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	4628      	mov	r0, r5
 800eb60:	47b8      	blx	r7
 800eb62:	3001      	adds	r0, #1
 800eb64:	f43f aef7 	beq.w	800e956 <_printf_float+0xc2>
 800eb68:	f109 0901 	add.w	r9, r9, #1
 800eb6c:	e7ee      	b.n	800eb4c <_printf_float+0x2b8>
 800eb6e:	bf00      	nop
 800eb70:	7fefffff 	.word	0x7fefffff
 800eb74:	080132cc 	.word	0x080132cc
 800eb78:	080132d0 	.word	0x080132d0
 800eb7c:	080132d8 	.word	0x080132d8
 800eb80:	080132d4 	.word	0x080132d4
 800eb84:	080132dc 	.word	0x080132dc
 800eb88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	bfa8      	it	ge
 800eb90:	461a      	movge	r2, r3
 800eb92:	2a00      	cmp	r2, #0
 800eb94:	4691      	mov	r9, r2
 800eb96:	dc37      	bgt.n	800ec08 <_printf_float+0x374>
 800eb98:	f04f 0b00 	mov.w	fp, #0
 800eb9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eba0:	f104 021a 	add.w	r2, r4, #26
 800eba4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eba6:	9305      	str	r3, [sp, #20]
 800eba8:	eba3 0309 	sub.w	r3, r3, r9
 800ebac:	455b      	cmp	r3, fp
 800ebae:	dc33      	bgt.n	800ec18 <_printf_float+0x384>
 800ebb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	db3b      	blt.n	800ec30 <_printf_float+0x39c>
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	07da      	lsls	r2, r3, #31
 800ebbc:	d438      	bmi.n	800ec30 <_printf_float+0x39c>
 800ebbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebc0:	9b05      	ldr	r3, [sp, #20]
 800ebc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	eba2 0901 	sub.w	r9, r2, r1
 800ebca:	4599      	cmp	r9, r3
 800ebcc:	bfa8      	it	ge
 800ebce:	4699      	movge	r9, r3
 800ebd0:	f1b9 0f00 	cmp.w	r9, #0
 800ebd4:	dc35      	bgt.n	800ec42 <_printf_float+0x3ae>
 800ebd6:	f04f 0800 	mov.w	r8, #0
 800ebda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebde:	f104 0a1a 	add.w	sl, r4, #26
 800ebe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebe6:	1a9b      	subs	r3, r3, r2
 800ebe8:	eba3 0309 	sub.w	r3, r3, r9
 800ebec:	4543      	cmp	r3, r8
 800ebee:	f77f af79 	ble.w	800eae4 <_printf_float+0x250>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	4652      	mov	r2, sl
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b8      	blx	r7
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	f43f aeaa 	beq.w	800e956 <_printf_float+0xc2>
 800ec02:	f108 0801 	add.w	r8, r8, #1
 800ec06:	e7ec      	b.n	800ebe2 <_printf_float+0x34e>
 800ec08:	4613      	mov	r3, r2
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	4642      	mov	r2, r8
 800ec0e:	4628      	mov	r0, r5
 800ec10:	47b8      	blx	r7
 800ec12:	3001      	adds	r0, #1
 800ec14:	d1c0      	bne.n	800eb98 <_printf_float+0x304>
 800ec16:	e69e      	b.n	800e956 <_printf_float+0xc2>
 800ec18:	2301      	movs	r3, #1
 800ec1a:	4631      	mov	r1, r6
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	9205      	str	r2, [sp, #20]
 800ec20:	47b8      	blx	r7
 800ec22:	3001      	adds	r0, #1
 800ec24:	f43f ae97 	beq.w	800e956 <_printf_float+0xc2>
 800ec28:	9a05      	ldr	r2, [sp, #20]
 800ec2a:	f10b 0b01 	add.w	fp, fp, #1
 800ec2e:	e7b9      	b.n	800eba4 <_printf_float+0x310>
 800ec30:	ee18 3a10 	vmov	r3, s16
 800ec34:	4652      	mov	r2, sl
 800ec36:	4631      	mov	r1, r6
 800ec38:	4628      	mov	r0, r5
 800ec3a:	47b8      	blx	r7
 800ec3c:	3001      	adds	r0, #1
 800ec3e:	d1be      	bne.n	800ebbe <_printf_float+0x32a>
 800ec40:	e689      	b.n	800e956 <_printf_float+0xc2>
 800ec42:	9a05      	ldr	r2, [sp, #20]
 800ec44:	464b      	mov	r3, r9
 800ec46:	4442      	add	r2, r8
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	47b8      	blx	r7
 800ec4e:	3001      	adds	r0, #1
 800ec50:	d1c1      	bne.n	800ebd6 <_printf_float+0x342>
 800ec52:	e680      	b.n	800e956 <_printf_float+0xc2>
 800ec54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec56:	2a01      	cmp	r2, #1
 800ec58:	dc01      	bgt.n	800ec5e <_printf_float+0x3ca>
 800ec5a:	07db      	lsls	r3, r3, #31
 800ec5c:	d538      	bpl.n	800ecd0 <_printf_float+0x43c>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	4642      	mov	r2, r8
 800ec62:	4631      	mov	r1, r6
 800ec64:	4628      	mov	r0, r5
 800ec66:	47b8      	blx	r7
 800ec68:	3001      	adds	r0, #1
 800ec6a:	f43f ae74 	beq.w	800e956 <_printf_float+0xc2>
 800ec6e:	ee18 3a10 	vmov	r3, s16
 800ec72:	4652      	mov	r2, sl
 800ec74:	4631      	mov	r1, r6
 800ec76:	4628      	mov	r0, r5
 800ec78:	47b8      	blx	r7
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	f43f ae6b 	beq.w	800e956 <_printf_float+0xc2>
 800ec80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec84:	2200      	movs	r2, #0
 800ec86:	2300      	movs	r3, #0
 800ec88:	f7f1 ff26 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec8c:	b9d8      	cbnz	r0, 800ecc6 <_printf_float+0x432>
 800ec8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec90:	f108 0201 	add.w	r2, r8, #1
 800ec94:	3b01      	subs	r3, #1
 800ec96:	4631      	mov	r1, r6
 800ec98:	4628      	mov	r0, r5
 800ec9a:	47b8      	blx	r7
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	d10e      	bne.n	800ecbe <_printf_float+0x42a>
 800eca0:	e659      	b.n	800e956 <_printf_float+0xc2>
 800eca2:	2301      	movs	r3, #1
 800eca4:	4652      	mov	r2, sl
 800eca6:	4631      	mov	r1, r6
 800eca8:	4628      	mov	r0, r5
 800ecaa:	47b8      	blx	r7
 800ecac:	3001      	adds	r0, #1
 800ecae:	f43f ae52 	beq.w	800e956 <_printf_float+0xc2>
 800ecb2:	f108 0801 	add.w	r8, r8, #1
 800ecb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	4543      	cmp	r3, r8
 800ecbc:	dcf1      	bgt.n	800eca2 <_printf_float+0x40e>
 800ecbe:	464b      	mov	r3, r9
 800ecc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ecc4:	e6dc      	b.n	800ea80 <_printf_float+0x1ec>
 800ecc6:	f04f 0800 	mov.w	r8, #0
 800ecca:	f104 0a1a 	add.w	sl, r4, #26
 800ecce:	e7f2      	b.n	800ecb6 <_printf_float+0x422>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	4642      	mov	r2, r8
 800ecd4:	e7df      	b.n	800ec96 <_printf_float+0x402>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	464a      	mov	r2, r9
 800ecda:	4631      	mov	r1, r6
 800ecdc:	4628      	mov	r0, r5
 800ecde:	47b8      	blx	r7
 800ece0:	3001      	adds	r0, #1
 800ece2:	f43f ae38 	beq.w	800e956 <_printf_float+0xc2>
 800ece6:	f108 0801 	add.w	r8, r8, #1
 800ecea:	68e3      	ldr	r3, [r4, #12]
 800ecec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ecee:	1a5b      	subs	r3, r3, r1
 800ecf0:	4543      	cmp	r3, r8
 800ecf2:	dcf0      	bgt.n	800ecd6 <_printf_float+0x442>
 800ecf4:	e6fa      	b.n	800eaec <_printf_float+0x258>
 800ecf6:	f04f 0800 	mov.w	r8, #0
 800ecfa:	f104 0919 	add.w	r9, r4, #25
 800ecfe:	e7f4      	b.n	800ecea <_printf_float+0x456>

0800ed00 <_printf_common>:
 800ed00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed04:	4616      	mov	r6, r2
 800ed06:	4699      	mov	r9, r3
 800ed08:	688a      	ldr	r2, [r1, #8]
 800ed0a:	690b      	ldr	r3, [r1, #16]
 800ed0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed10:	4293      	cmp	r3, r2
 800ed12:	bfb8      	it	lt
 800ed14:	4613      	movlt	r3, r2
 800ed16:	6033      	str	r3, [r6, #0]
 800ed18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed1c:	4607      	mov	r7, r0
 800ed1e:	460c      	mov	r4, r1
 800ed20:	b10a      	cbz	r2, 800ed26 <_printf_common+0x26>
 800ed22:	3301      	adds	r3, #1
 800ed24:	6033      	str	r3, [r6, #0]
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	0699      	lsls	r1, r3, #26
 800ed2a:	bf42      	ittt	mi
 800ed2c:	6833      	ldrmi	r3, [r6, #0]
 800ed2e:	3302      	addmi	r3, #2
 800ed30:	6033      	strmi	r3, [r6, #0]
 800ed32:	6825      	ldr	r5, [r4, #0]
 800ed34:	f015 0506 	ands.w	r5, r5, #6
 800ed38:	d106      	bne.n	800ed48 <_printf_common+0x48>
 800ed3a:	f104 0a19 	add.w	sl, r4, #25
 800ed3e:	68e3      	ldr	r3, [r4, #12]
 800ed40:	6832      	ldr	r2, [r6, #0]
 800ed42:	1a9b      	subs	r3, r3, r2
 800ed44:	42ab      	cmp	r3, r5
 800ed46:	dc26      	bgt.n	800ed96 <_printf_common+0x96>
 800ed48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed4c:	1e13      	subs	r3, r2, #0
 800ed4e:	6822      	ldr	r2, [r4, #0]
 800ed50:	bf18      	it	ne
 800ed52:	2301      	movne	r3, #1
 800ed54:	0692      	lsls	r2, r2, #26
 800ed56:	d42b      	bmi.n	800edb0 <_printf_common+0xb0>
 800ed58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed5c:	4649      	mov	r1, r9
 800ed5e:	4638      	mov	r0, r7
 800ed60:	47c0      	blx	r8
 800ed62:	3001      	adds	r0, #1
 800ed64:	d01e      	beq.n	800eda4 <_printf_common+0xa4>
 800ed66:	6823      	ldr	r3, [r4, #0]
 800ed68:	68e5      	ldr	r5, [r4, #12]
 800ed6a:	6832      	ldr	r2, [r6, #0]
 800ed6c:	f003 0306 	and.w	r3, r3, #6
 800ed70:	2b04      	cmp	r3, #4
 800ed72:	bf08      	it	eq
 800ed74:	1aad      	subeq	r5, r5, r2
 800ed76:	68a3      	ldr	r3, [r4, #8]
 800ed78:	6922      	ldr	r2, [r4, #16]
 800ed7a:	bf0c      	ite	eq
 800ed7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed80:	2500      	movne	r5, #0
 800ed82:	4293      	cmp	r3, r2
 800ed84:	bfc4      	itt	gt
 800ed86:	1a9b      	subgt	r3, r3, r2
 800ed88:	18ed      	addgt	r5, r5, r3
 800ed8a:	2600      	movs	r6, #0
 800ed8c:	341a      	adds	r4, #26
 800ed8e:	42b5      	cmp	r5, r6
 800ed90:	d11a      	bne.n	800edc8 <_printf_common+0xc8>
 800ed92:	2000      	movs	r0, #0
 800ed94:	e008      	b.n	800eda8 <_printf_common+0xa8>
 800ed96:	2301      	movs	r3, #1
 800ed98:	4652      	mov	r2, sl
 800ed9a:	4649      	mov	r1, r9
 800ed9c:	4638      	mov	r0, r7
 800ed9e:	47c0      	blx	r8
 800eda0:	3001      	adds	r0, #1
 800eda2:	d103      	bne.n	800edac <_printf_common+0xac>
 800eda4:	f04f 30ff 	mov.w	r0, #4294967295
 800eda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edac:	3501      	adds	r5, #1
 800edae:	e7c6      	b.n	800ed3e <_printf_common+0x3e>
 800edb0:	18e1      	adds	r1, r4, r3
 800edb2:	1c5a      	adds	r2, r3, #1
 800edb4:	2030      	movs	r0, #48	; 0x30
 800edb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800edba:	4422      	add	r2, r4
 800edbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800edc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800edc4:	3302      	adds	r3, #2
 800edc6:	e7c7      	b.n	800ed58 <_printf_common+0x58>
 800edc8:	2301      	movs	r3, #1
 800edca:	4622      	mov	r2, r4
 800edcc:	4649      	mov	r1, r9
 800edce:	4638      	mov	r0, r7
 800edd0:	47c0      	blx	r8
 800edd2:	3001      	adds	r0, #1
 800edd4:	d0e6      	beq.n	800eda4 <_printf_common+0xa4>
 800edd6:	3601      	adds	r6, #1
 800edd8:	e7d9      	b.n	800ed8e <_printf_common+0x8e>
	...

0800eddc <_printf_i>:
 800eddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ede0:	460c      	mov	r4, r1
 800ede2:	4691      	mov	r9, r2
 800ede4:	7e27      	ldrb	r7, [r4, #24]
 800ede6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ede8:	2f78      	cmp	r7, #120	; 0x78
 800edea:	4680      	mov	r8, r0
 800edec:	469a      	mov	sl, r3
 800edee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edf2:	d807      	bhi.n	800ee04 <_printf_i+0x28>
 800edf4:	2f62      	cmp	r7, #98	; 0x62
 800edf6:	d80a      	bhi.n	800ee0e <_printf_i+0x32>
 800edf8:	2f00      	cmp	r7, #0
 800edfa:	f000 80d8 	beq.w	800efae <_printf_i+0x1d2>
 800edfe:	2f58      	cmp	r7, #88	; 0x58
 800ee00:	f000 80a3 	beq.w	800ef4a <_printf_i+0x16e>
 800ee04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee0c:	e03a      	b.n	800ee84 <_printf_i+0xa8>
 800ee0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee12:	2b15      	cmp	r3, #21
 800ee14:	d8f6      	bhi.n	800ee04 <_printf_i+0x28>
 800ee16:	a001      	add	r0, pc, #4	; (adr r0, 800ee1c <_printf_i+0x40>)
 800ee18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ee1c:	0800ee75 	.word	0x0800ee75
 800ee20:	0800ee89 	.word	0x0800ee89
 800ee24:	0800ee05 	.word	0x0800ee05
 800ee28:	0800ee05 	.word	0x0800ee05
 800ee2c:	0800ee05 	.word	0x0800ee05
 800ee30:	0800ee05 	.word	0x0800ee05
 800ee34:	0800ee89 	.word	0x0800ee89
 800ee38:	0800ee05 	.word	0x0800ee05
 800ee3c:	0800ee05 	.word	0x0800ee05
 800ee40:	0800ee05 	.word	0x0800ee05
 800ee44:	0800ee05 	.word	0x0800ee05
 800ee48:	0800ef95 	.word	0x0800ef95
 800ee4c:	0800eeb9 	.word	0x0800eeb9
 800ee50:	0800ef77 	.word	0x0800ef77
 800ee54:	0800ee05 	.word	0x0800ee05
 800ee58:	0800ee05 	.word	0x0800ee05
 800ee5c:	0800efb7 	.word	0x0800efb7
 800ee60:	0800ee05 	.word	0x0800ee05
 800ee64:	0800eeb9 	.word	0x0800eeb9
 800ee68:	0800ee05 	.word	0x0800ee05
 800ee6c:	0800ee05 	.word	0x0800ee05
 800ee70:	0800ef7f 	.word	0x0800ef7f
 800ee74:	680b      	ldr	r3, [r1, #0]
 800ee76:	1d1a      	adds	r2, r3, #4
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	600a      	str	r2, [r1, #0]
 800ee7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee84:	2301      	movs	r3, #1
 800ee86:	e0a3      	b.n	800efd0 <_printf_i+0x1f4>
 800ee88:	6825      	ldr	r5, [r4, #0]
 800ee8a:	6808      	ldr	r0, [r1, #0]
 800ee8c:	062e      	lsls	r6, r5, #24
 800ee8e:	f100 0304 	add.w	r3, r0, #4
 800ee92:	d50a      	bpl.n	800eeaa <_printf_i+0xce>
 800ee94:	6805      	ldr	r5, [r0, #0]
 800ee96:	600b      	str	r3, [r1, #0]
 800ee98:	2d00      	cmp	r5, #0
 800ee9a:	da03      	bge.n	800eea4 <_printf_i+0xc8>
 800ee9c:	232d      	movs	r3, #45	; 0x2d
 800ee9e:	426d      	negs	r5, r5
 800eea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eea4:	485e      	ldr	r0, [pc, #376]	; (800f020 <_printf_i+0x244>)
 800eea6:	230a      	movs	r3, #10
 800eea8:	e019      	b.n	800eede <_printf_i+0x102>
 800eeaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eeae:	6805      	ldr	r5, [r0, #0]
 800eeb0:	600b      	str	r3, [r1, #0]
 800eeb2:	bf18      	it	ne
 800eeb4:	b22d      	sxthne	r5, r5
 800eeb6:	e7ef      	b.n	800ee98 <_printf_i+0xbc>
 800eeb8:	680b      	ldr	r3, [r1, #0]
 800eeba:	6825      	ldr	r5, [r4, #0]
 800eebc:	1d18      	adds	r0, r3, #4
 800eebe:	6008      	str	r0, [r1, #0]
 800eec0:	0628      	lsls	r0, r5, #24
 800eec2:	d501      	bpl.n	800eec8 <_printf_i+0xec>
 800eec4:	681d      	ldr	r5, [r3, #0]
 800eec6:	e002      	b.n	800eece <_printf_i+0xf2>
 800eec8:	0669      	lsls	r1, r5, #25
 800eeca:	d5fb      	bpl.n	800eec4 <_printf_i+0xe8>
 800eecc:	881d      	ldrh	r5, [r3, #0]
 800eece:	4854      	ldr	r0, [pc, #336]	; (800f020 <_printf_i+0x244>)
 800eed0:	2f6f      	cmp	r7, #111	; 0x6f
 800eed2:	bf0c      	ite	eq
 800eed4:	2308      	moveq	r3, #8
 800eed6:	230a      	movne	r3, #10
 800eed8:	2100      	movs	r1, #0
 800eeda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eede:	6866      	ldr	r6, [r4, #4]
 800eee0:	60a6      	str	r6, [r4, #8]
 800eee2:	2e00      	cmp	r6, #0
 800eee4:	bfa2      	ittt	ge
 800eee6:	6821      	ldrge	r1, [r4, #0]
 800eee8:	f021 0104 	bicge.w	r1, r1, #4
 800eeec:	6021      	strge	r1, [r4, #0]
 800eeee:	b90d      	cbnz	r5, 800eef4 <_printf_i+0x118>
 800eef0:	2e00      	cmp	r6, #0
 800eef2:	d04d      	beq.n	800ef90 <_printf_i+0x1b4>
 800eef4:	4616      	mov	r6, r2
 800eef6:	fbb5 f1f3 	udiv	r1, r5, r3
 800eefa:	fb03 5711 	mls	r7, r3, r1, r5
 800eefe:	5dc7      	ldrb	r7, [r0, r7]
 800ef00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef04:	462f      	mov	r7, r5
 800ef06:	42bb      	cmp	r3, r7
 800ef08:	460d      	mov	r5, r1
 800ef0a:	d9f4      	bls.n	800eef6 <_printf_i+0x11a>
 800ef0c:	2b08      	cmp	r3, #8
 800ef0e:	d10b      	bne.n	800ef28 <_printf_i+0x14c>
 800ef10:	6823      	ldr	r3, [r4, #0]
 800ef12:	07df      	lsls	r7, r3, #31
 800ef14:	d508      	bpl.n	800ef28 <_printf_i+0x14c>
 800ef16:	6923      	ldr	r3, [r4, #16]
 800ef18:	6861      	ldr	r1, [r4, #4]
 800ef1a:	4299      	cmp	r1, r3
 800ef1c:	bfde      	ittt	le
 800ef1e:	2330      	movle	r3, #48	; 0x30
 800ef20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef24:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef28:	1b92      	subs	r2, r2, r6
 800ef2a:	6122      	str	r2, [r4, #16]
 800ef2c:	f8cd a000 	str.w	sl, [sp]
 800ef30:	464b      	mov	r3, r9
 800ef32:	aa03      	add	r2, sp, #12
 800ef34:	4621      	mov	r1, r4
 800ef36:	4640      	mov	r0, r8
 800ef38:	f7ff fee2 	bl	800ed00 <_printf_common>
 800ef3c:	3001      	adds	r0, #1
 800ef3e:	d14c      	bne.n	800efda <_printf_i+0x1fe>
 800ef40:	f04f 30ff 	mov.w	r0, #4294967295
 800ef44:	b004      	add	sp, #16
 800ef46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef4a:	4835      	ldr	r0, [pc, #212]	; (800f020 <_printf_i+0x244>)
 800ef4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	680e      	ldr	r6, [r1, #0]
 800ef54:	061f      	lsls	r7, r3, #24
 800ef56:	f856 5b04 	ldr.w	r5, [r6], #4
 800ef5a:	600e      	str	r6, [r1, #0]
 800ef5c:	d514      	bpl.n	800ef88 <_printf_i+0x1ac>
 800ef5e:	07d9      	lsls	r1, r3, #31
 800ef60:	bf44      	itt	mi
 800ef62:	f043 0320 	orrmi.w	r3, r3, #32
 800ef66:	6023      	strmi	r3, [r4, #0]
 800ef68:	b91d      	cbnz	r5, 800ef72 <_printf_i+0x196>
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	f023 0320 	bic.w	r3, r3, #32
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	2310      	movs	r3, #16
 800ef74:	e7b0      	b.n	800eed8 <_printf_i+0xfc>
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	f043 0320 	orr.w	r3, r3, #32
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	2378      	movs	r3, #120	; 0x78
 800ef80:	4828      	ldr	r0, [pc, #160]	; (800f024 <_printf_i+0x248>)
 800ef82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef86:	e7e3      	b.n	800ef50 <_printf_i+0x174>
 800ef88:	065e      	lsls	r6, r3, #25
 800ef8a:	bf48      	it	mi
 800ef8c:	b2ad      	uxthmi	r5, r5
 800ef8e:	e7e6      	b.n	800ef5e <_printf_i+0x182>
 800ef90:	4616      	mov	r6, r2
 800ef92:	e7bb      	b.n	800ef0c <_printf_i+0x130>
 800ef94:	680b      	ldr	r3, [r1, #0]
 800ef96:	6826      	ldr	r6, [r4, #0]
 800ef98:	6960      	ldr	r0, [r4, #20]
 800ef9a:	1d1d      	adds	r5, r3, #4
 800ef9c:	600d      	str	r5, [r1, #0]
 800ef9e:	0635      	lsls	r5, r6, #24
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	d501      	bpl.n	800efa8 <_printf_i+0x1cc>
 800efa4:	6018      	str	r0, [r3, #0]
 800efa6:	e002      	b.n	800efae <_printf_i+0x1d2>
 800efa8:	0671      	lsls	r1, r6, #25
 800efaa:	d5fb      	bpl.n	800efa4 <_printf_i+0x1c8>
 800efac:	8018      	strh	r0, [r3, #0]
 800efae:	2300      	movs	r3, #0
 800efb0:	6123      	str	r3, [r4, #16]
 800efb2:	4616      	mov	r6, r2
 800efb4:	e7ba      	b.n	800ef2c <_printf_i+0x150>
 800efb6:	680b      	ldr	r3, [r1, #0]
 800efb8:	1d1a      	adds	r2, r3, #4
 800efba:	600a      	str	r2, [r1, #0]
 800efbc:	681e      	ldr	r6, [r3, #0]
 800efbe:	6862      	ldr	r2, [r4, #4]
 800efc0:	2100      	movs	r1, #0
 800efc2:	4630      	mov	r0, r6
 800efc4:	f7f1 f914 	bl	80001f0 <memchr>
 800efc8:	b108      	cbz	r0, 800efce <_printf_i+0x1f2>
 800efca:	1b80      	subs	r0, r0, r6
 800efcc:	6060      	str	r0, [r4, #4]
 800efce:	6863      	ldr	r3, [r4, #4]
 800efd0:	6123      	str	r3, [r4, #16]
 800efd2:	2300      	movs	r3, #0
 800efd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efd8:	e7a8      	b.n	800ef2c <_printf_i+0x150>
 800efda:	6923      	ldr	r3, [r4, #16]
 800efdc:	4632      	mov	r2, r6
 800efde:	4649      	mov	r1, r9
 800efe0:	4640      	mov	r0, r8
 800efe2:	47d0      	blx	sl
 800efe4:	3001      	adds	r0, #1
 800efe6:	d0ab      	beq.n	800ef40 <_printf_i+0x164>
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	079b      	lsls	r3, r3, #30
 800efec:	d413      	bmi.n	800f016 <_printf_i+0x23a>
 800efee:	68e0      	ldr	r0, [r4, #12]
 800eff0:	9b03      	ldr	r3, [sp, #12]
 800eff2:	4298      	cmp	r0, r3
 800eff4:	bfb8      	it	lt
 800eff6:	4618      	movlt	r0, r3
 800eff8:	e7a4      	b.n	800ef44 <_printf_i+0x168>
 800effa:	2301      	movs	r3, #1
 800effc:	4632      	mov	r2, r6
 800effe:	4649      	mov	r1, r9
 800f000:	4640      	mov	r0, r8
 800f002:	47d0      	blx	sl
 800f004:	3001      	adds	r0, #1
 800f006:	d09b      	beq.n	800ef40 <_printf_i+0x164>
 800f008:	3501      	adds	r5, #1
 800f00a:	68e3      	ldr	r3, [r4, #12]
 800f00c:	9903      	ldr	r1, [sp, #12]
 800f00e:	1a5b      	subs	r3, r3, r1
 800f010:	42ab      	cmp	r3, r5
 800f012:	dcf2      	bgt.n	800effa <_printf_i+0x21e>
 800f014:	e7eb      	b.n	800efee <_printf_i+0x212>
 800f016:	2500      	movs	r5, #0
 800f018:	f104 0619 	add.w	r6, r4, #25
 800f01c:	e7f5      	b.n	800f00a <_printf_i+0x22e>
 800f01e:	bf00      	nop
 800f020:	080132de 	.word	0x080132de
 800f024:	080132ef 	.word	0x080132ef

0800f028 <siprintf>:
 800f028:	b40e      	push	{r1, r2, r3}
 800f02a:	b500      	push	{lr}
 800f02c:	b09c      	sub	sp, #112	; 0x70
 800f02e:	ab1d      	add	r3, sp, #116	; 0x74
 800f030:	9002      	str	r0, [sp, #8]
 800f032:	9006      	str	r0, [sp, #24]
 800f034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f038:	4809      	ldr	r0, [pc, #36]	; (800f060 <siprintf+0x38>)
 800f03a:	9107      	str	r1, [sp, #28]
 800f03c:	9104      	str	r1, [sp, #16]
 800f03e:	4909      	ldr	r1, [pc, #36]	; (800f064 <siprintf+0x3c>)
 800f040:	f853 2b04 	ldr.w	r2, [r3], #4
 800f044:	9105      	str	r1, [sp, #20]
 800f046:	6800      	ldr	r0, [r0, #0]
 800f048:	9301      	str	r3, [sp, #4]
 800f04a:	a902      	add	r1, sp, #8
 800f04c:	f002 ff4c 	bl	8011ee8 <_svfiprintf_r>
 800f050:	9b02      	ldr	r3, [sp, #8]
 800f052:	2200      	movs	r2, #0
 800f054:	701a      	strb	r2, [r3, #0]
 800f056:	b01c      	add	sp, #112	; 0x70
 800f058:	f85d eb04 	ldr.w	lr, [sp], #4
 800f05c:	b003      	add	sp, #12
 800f05e:	4770      	bx	lr
 800f060:	20000028 	.word	0x20000028
 800f064:	ffff0208 	.word	0xffff0208

0800f068 <strcat>:
 800f068:	b510      	push	{r4, lr}
 800f06a:	4602      	mov	r2, r0
 800f06c:	7814      	ldrb	r4, [r2, #0]
 800f06e:	4613      	mov	r3, r2
 800f070:	3201      	adds	r2, #1
 800f072:	2c00      	cmp	r4, #0
 800f074:	d1fa      	bne.n	800f06c <strcat+0x4>
 800f076:	3b01      	subs	r3, #1
 800f078:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f07c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f080:	2a00      	cmp	r2, #0
 800f082:	d1f9      	bne.n	800f078 <strcat+0x10>
 800f084:	bd10      	pop	{r4, pc}

0800f086 <strchr>:
 800f086:	b2c9      	uxtb	r1, r1
 800f088:	4603      	mov	r3, r0
 800f08a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f08e:	b11a      	cbz	r2, 800f098 <strchr+0x12>
 800f090:	428a      	cmp	r2, r1
 800f092:	d1f9      	bne.n	800f088 <strchr+0x2>
 800f094:	4618      	mov	r0, r3
 800f096:	4770      	bx	lr
 800f098:	2900      	cmp	r1, #0
 800f09a:	bf18      	it	ne
 800f09c:	2300      	movne	r3, #0
 800f09e:	e7f9      	b.n	800f094 <strchr+0xe>

0800f0a0 <strcpy>:
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0a6:	f803 2b01 	strb.w	r2, [r3], #1
 800f0aa:	2a00      	cmp	r2, #0
 800f0ac:	d1f9      	bne.n	800f0a2 <strcpy+0x2>
 800f0ae:	4770      	bx	lr

0800f0b0 <strdup>:
 800f0b0:	4b02      	ldr	r3, [pc, #8]	; (800f0bc <strdup+0xc>)
 800f0b2:	4601      	mov	r1, r0
 800f0b4:	6818      	ldr	r0, [r3, #0]
 800f0b6:	f000 b803 	b.w	800f0c0 <_strdup_r>
 800f0ba:	bf00      	nop
 800f0bc:	20000028 	.word	0x20000028

0800f0c0 <_strdup_r>:
 800f0c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	4608      	mov	r0, r1
 800f0c6:	460d      	mov	r5, r1
 800f0c8:	f7f1 f88a 	bl	80001e0 <strlen>
 800f0cc:	1c42      	adds	r2, r0, #1
 800f0ce:	4611      	mov	r1, r2
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	9201      	str	r2, [sp, #4]
 800f0d4:	f002 fe52 	bl	8011d7c <_malloc_r>
 800f0d8:	4604      	mov	r4, r0
 800f0da:	b118      	cbz	r0, 800f0e4 <_strdup_r+0x24>
 800f0dc:	9a01      	ldr	r2, [sp, #4]
 800f0de:	4629      	mov	r1, r5
 800f0e0:	f7ff fb22 	bl	800e728 <memcpy>
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	b003      	add	sp, #12
 800f0e8:	bd30      	pop	{r4, r5, pc}

0800f0ea <strncpy>:
 800f0ea:	b510      	push	{r4, lr}
 800f0ec:	3901      	subs	r1, #1
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	b132      	cbz	r2, 800f100 <strncpy+0x16>
 800f0f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f0f6:	f803 4b01 	strb.w	r4, [r3], #1
 800f0fa:	3a01      	subs	r2, #1
 800f0fc:	2c00      	cmp	r4, #0
 800f0fe:	d1f7      	bne.n	800f0f0 <strncpy+0x6>
 800f100:	441a      	add	r2, r3
 800f102:	2100      	movs	r1, #0
 800f104:	4293      	cmp	r3, r2
 800f106:	d100      	bne.n	800f10a <strncpy+0x20>
 800f108:	bd10      	pop	{r4, pc}
 800f10a:	f803 1b01 	strb.w	r1, [r3], #1
 800f10e:	e7f9      	b.n	800f104 <strncpy+0x1a>

0800f110 <strsep>:
 800f110:	4602      	mov	r2, r0
 800f112:	2300      	movs	r3, #0
 800f114:	6800      	ldr	r0, [r0, #0]
 800f116:	f000 be7d 	b.w	800fe14 <__strtok_r>

0800f11a <strstr>:
 800f11a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f11c:	780c      	ldrb	r4, [r1, #0]
 800f11e:	b164      	cbz	r4, 800f13a <strstr+0x20>
 800f120:	4603      	mov	r3, r0
 800f122:	781a      	ldrb	r2, [r3, #0]
 800f124:	4618      	mov	r0, r3
 800f126:	1c5e      	adds	r6, r3, #1
 800f128:	b90a      	cbnz	r2, 800f12e <strstr+0x14>
 800f12a:	4610      	mov	r0, r2
 800f12c:	e005      	b.n	800f13a <strstr+0x20>
 800f12e:	4294      	cmp	r4, r2
 800f130:	d108      	bne.n	800f144 <strstr+0x2a>
 800f132:	460d      	mov	r5, r1
 800f134:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800f138:	b902      	cbnz	r2, 800f13c <strstr+0x22>
 800f13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f13c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800f140:	4297      	cmp	r7, r2
 800f142:	d0f7      	beq.n	800f134 <strstr+0x1a>
 800f144:	4633      	mov	r3, r6
 800f146:	e7ec      	b.n	800f122 <strstr+0x8>

0800f148 <sulp>:
 800f148:	b570      	push	{r4, r5, r6, lr}
 800f14a:	4604      	mov	r4, r0
 800f14c:	460d      	mov	r5, r1
 800f14e:	ec45 4b10 	vmov	d0, r4, r5
 800f152:	4616      	mov	r6, r2
 800f154:	f002 fc64 	bl	8011a20 <__ulp>
 800f158:	ec51 0b10 	vmov	r0, r1, d0
 800f15c:	b17e      	cbz	r6, 800f17e <sulp+0x36>
 800f15e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f162:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f166:	2b00      	cmp	r3, #0
 800f168:	dd09      	ble.n	800f17e <sulp+0x36>
 800f16a:	051b      	lsls	r3, r3, #20
 800f16c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f170:	2400      	movs	r4, #0
 800f172:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f176:	4622      	mov	r2, r4
 800f178:	462b      	mov	r3, r5
 800f17a:	f7f1 fa45 	bl	8000608 <__aeabi_dmul>
 800f17e:	bd70      	pop	{r4, r5, r6, pc}

0800f180 <_strtod_l>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	b0a3      	sub	sp, #140	; 0x8c
 800f186:	461f      	mov	r7, r3
 800f188:	2300      	movs	r3, #0
 800f18a:	931e      	str	r3, [sp, #120]	; 0x78
 800f18c:	4ba4      	ldr	r3, [pc, #656]	; (800f420 <_strtod_l+0x2a0>)
 800f18e:	9219      	str	r2, [sp, #100]	; 0x64
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	9307      	str	r3, [sp, #28]
 800f194:	4604      	mov	r4, r0
 800f196:	4618      	mov	r0, r3
 800f198:	4688      	mov	r8, r1
 800f19a:	f7f1 f821 	bl	80001e0 <strlen>
 800f19e:	f04f 0a00 	mov.w	sl, #0
 800f1a2:	4605      	mov	r5, r0
 800f1a4:	f04f 0b00 	mov.w	fp, #0
 800f1a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f1ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1ae:	781a      	ldrb	r2, [r3, #0]
 800f1b0:	2a2b      	cmp	r2, #43	; 0x2b
 800f1b2:	d04c      	beq.n	800f24e <_strtod_l+0xce>
 800f1b4:	d839      	bhi.n	800f22a <_strtod_l+0xaa>
 800f1b6:	2a0d      	cmp	r2, #13
 800f1b8:	d832      	bhi.n	800f220 <_strtod_l+0xa0>
 800f1ba:	2a08      	cmp	r2, #8
 800f1bc:	d832      	bhi.n	800f224 <_strtod_l+0xa4>
 800f1be:	2a00      	cmp	r2, #0
 800f1c0:	d03c      	beq.n	800f23c <_strtod_l+0xbc>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	930e      	str	r3, [sp, #56]	; 0x38
 800f1c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f1c8:	7833      	ldrb	r3, [r6, #0]
 800f1ca:	2b30      	cmp	r3, #48	; 0x30
 800f1cc:	f040 80b4 	bne.w	800f338 <_strtod_l+0x1b8>
 800f1d0:	7873      	ldrb	r3, [r6, #1]
 800f1d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f1d6:	2b58      	cmp	r3, #88	; 0x58
 800f1d8:	d16c      	bne.n	800f2b4 <_strtod_l+0x134>
 800f1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1dc:	9301      	str	r3, [sp, #4]
 800f1de:	ab1e      	add	r3, sp, #120	; 0x78
 800f1e0:	9702      	str	r7, [sp, #8]
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	4a8f      	ldr	r2, [pc, #572]	; (800f424 <_strtod_l+0x2a4>)
 800f1e6:	ab1f      	add	r3, sp, #124	; 0x7c
 800f1e8:	a91d      	add	r1, sp, #116	; 0x74
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f001 fd86 	bl	8010cfc <__gethex>
 800f1f0:	f010 0707 	ands.w	r7, r0, #7
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	d005      	beq.n	800f204 <_strtod_l+0x84>
 800f1f8:	2f06      	cmp	r7, #6
 800f1fa:	d12a      	bne.n	800f252 <_strtod_l+0xd2>
 800f1fc:	3601      	adds	r6, #1
 800f1fe:	2300      	movs	r3, #0
 800f200:	961d      	str	r6, [sp, #116]	; 0x74
 800f202:	930e      	str	r3, [sp, #56]	; 0x38
 800f204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f206:	2b00      	cmp	r3, #0
 800f208:	f040 8596 	bne.w	800fd38 <_strtod_l+0xbb8>
 800f20c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f20e:	b1db      	cbz	r3, 800f248 <_strtod_l+0xc8>
 800f210:	4652      	mov	r2, sl
 800f212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f216:	ec43 2b10 	vmov	d0, r2, r3
 800f21a:	b023      	add	sp, #140	; 0x8c
 800f21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f220:	2a20      	cmp	r2, #32
 800f222:	d1ce      	bne.n	800f1c2 <_strtod_l+0x42>
 800f224:	3301      	adds	r3, #1
 800f226:	931d      	str	r3, [sp, #116]	; 0x74
 800f228:	e7c0      	b.n	800f1ac <_strtod_l+0x2c>
 800f22a:	2a2d      	cmp	r2, #45	; 0x2d
 800f22c:	d1c9      	bne.n	800f1c2 <_strtod_l+0x42>
 800f22e:	2201      	movs	r2, #1
 800f230:	920e      	str	r2, [sp, #56]	; 0x38
 800f232:	1c5a      	adds	r2, r3, #1
 800f234:	921d      	str	r2, [sp, #116]	; 0x74
 800f236:	785b      	ldrb	r3, [r3, #1]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1c4      	bne.n	800f1c6 <_strtod_l+0x46>
 800f23c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f23e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f242:	2b00      	cmp	r3, #0
 800f244:	f040 8576 	bne.w	800fd34 <_strtod_l+0xbb4>
 800f248:	4652      	mov	r2, sl
 800f24a:	465b      	mov	r3, fp
 800f24c:	e7e3      	b.n	800f216 <_strtod_l+0x96>
 800f24e:	2200      	movs	r2, #0
 800f250:	e7ee      	b.n	800f230 <_strtod_l+0xb0>
 800f252:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f254:	b13a      	cbz	r2, 800f266 <_strtod_l+0xe6>
 800f256:	2135      	movs	r1, #53	; 0x35
 800f258:	a820      	add	r0, sp, #128	; 0x80
 800f25a:	f002 fcec 	bl	8011c36 <__copybits>
 800f25e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f260:	4620      	mov	r0, r4
 800f262:	f002 f8b1 	bl	80113c8 <_Bfree>
 800f266:	3f01      	subs	r7, #1
 800f268:	2f05      	cmp	r7, #5
 800f26a:	d807      	bhi.n	800f27c <_strtod_l+0xfc>
 800f26c:	e8df f007 	tbb	[pc, r7]
 800f270:	1d180b0e 	.word	0x1d180b0e
 800f274:	030e      	.short	0x030e
 800f276:	f04f 0b00 	mov.w	fp, #0
 800f27a:	46da      	mov	sl, fp
 800f27c:	0728      	lsls	r0, r5, #28
 800f27e:	d5c1      	bpl.n	800f204 <_strtod_l+0x84>
 800f280:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f284:	e7be      	b.n	800f204 <_strtod_l+0x84>
 800f286:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f28a:	e7f7      	b.n	800f27c <_strtod_l+0xfc>
 800f28c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f290:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f292:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f296:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f29a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f29e:	e7ed      	b.n	800f27c <_strtod_l+0xfc>
 800f2a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f428 <_strtod_l+0x2a8>
 800f2a4:	f04f 0a00 	mov.w	sl, #0
 800f2a8:	e7e8      	b.n	800f27c <_strtod_l+0xfc>
 800f2aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f2ae:	f04f 3aff 	mov.w	sl, #4294967295
 800f2b2:	e7e3      	b.n	800f27c <_strtod_l+0xfc>
 800f2b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2b6:	1c5a      	adds	r2, r3, #1
 800f2b8:	921d      	str	r2, [sp, #116]	; 0x74
 800f2ba:	785b      	ldrb	r3, [r3, #1]
 800f2bc:	2b30      	cmp	r3, #48	; 0x30
 800f2be:	d0f9      	beq.n	800f2b4 <_strtod_l+0x134>
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d09f      	beq.n	800f204 <_strtod_l+0x84>
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	f04f 0900 	mov.w	r9, #0
 800f2ca:	9304      	str	r3, [sp, #16]
 800f2cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f2d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f2d4:	464f      	mov	r7, r9
 800f2d6:	220a      	movs	r2, #10
 800f2d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f2da:	7806      	ldrb	r6, [r0, #0]
 800f2dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f2e0:	b2d9      	uxtb	r1, r3
 800f2e2:	2909      	cmp	r1, #9
 800f2e4:	d92a      	bls.n	800f33c <_strtod_l+0x1bc>
 800f2e6:	9907      	ldr	r1, [sp, #28]
 800f2e8:	462a      	mov	r2, r5
 800f2ea:	f003 f871 	bl	80123d0 <strncmp>
 800f2ee:	b398      	cbz	r0, 800f358 <_strtod_l+0x1d8>
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	4633      	mov	r3, r6
 800f2f4:	463d      	mov	r5, r7
 800f2f6:	9007      	str	r0, [sp, #28]
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	2b65      	cmp	r3, #101	; 0x65
 800f2fc:	d001      	beq.n	800f302 <_strtod_l+0x182>
 800f2fe:	2b45      	cmp	r3, #69	; 0x45
 800f300:	d118      	bne.n	800f334 <_strtod_l+0x1b4>
 800f302:	b91d      	cbnz	r5, 800f30c <_strtod_l+0x18c>
 800f304:	9b04      	ldr	r3, [sp, #16]
 800f306:	4303      	orrs	r3, r0
 800f308:	d098      	beq.n	800f23c <_strtod_l+0xbc>
 800f30a:	2500      	movs	r5, #0
 800f30c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f310:	f108 0301 	add.w	r3, r8, #1
 800f314:	931d      	str	r3, [sp, #116]	; 0x74
 800f316:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f31a:	2b2b      	cmp	r3, #43	; 0x2b
 800f31c:	d075      	beq.n	800f40a <_strtod_l+0x28a>
 800f31e:	2b2d      	cmp	r3, #45	; 0x2d
 800f320:	d07b      	beq.n	800f41a <_strtod_l+0x29a>
 800f322:	f04f 0c00 	mov.w	ip, #0
 800f326:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f32a:	2909      	cmp	r1, #9
 800f32c:	f240 8082 	bls.w	800f434 <_strtod_l+0x2b4>
 800f330:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f334:	2600      	movs	r6, #0
 800f336:	e09d      	b.n	800f474 <_strtod_l+0x2f4>
 800f338:	2300      	movs	r3, #0
 800f33a:	e7c4      	b.n	800f2c6 <_strtod_l+0x146>
 800f33c:	2f08      	cmp	r7, #8
 800f33e:	bfd8      	it	le
 800f340:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f342:	f100 0001 	add.w	r0, r0, #1
 800f346:	bfda      	itte	le
 800f348:	fb02 3301 	mlale	r3, r2, r1, r3
 800f34c:	9309      	strle	r3, [sp, #36]	; 0x24
 800f34e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f352:	3701      	adds	r7, #1
 800f354:	901d      	str	r0, [sp, #116]	; 0x74
 800f356:	e7bf      	b.n	800f2d8 <_strtod_l+0x158>
 800f358:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f35a:	195a      	adds	r2, r3, r5
 800f35c:	921d      	str	r2, [sp, #116]	; 0x74
 800f35e:	5d5b      	ldrb	r3, [r3, r5]
 800f360:	2f00      	cmp	r7, #0
 800f362:	d037      	beq.n	800f3d4 <_strtod_l+0x254>
 800f364:	9007      	str	r0, [sp, #28]
 800f366:	463d      	mov	r5, r7
 800f368:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f36c:	2a09      	cmp	r2, #9
 800f36e:	d912      	bls.n	800f396 <_strtod_l+0x216>
 800f370:	2201      	movs	r2, #1
 800f372:	e7c2      	b.n	800f2fa <_strtod_l+0x17a>
 800f374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f376:	1c5a      	adds	r2, r3, #1
 800f378:	921d      	str	r2, [sp, #116]	; 0x74
 800f37a:	785b      	ldrb	r3, [r3, #1]
 800f37c:	3001      	adds	r0, #1
 800f37e:	2b30      	cmp	r3, #48	; 0x30
 800f380:	d0f8      	beq.n	800f374 <_strtod_l+0x1f4>
 800f382:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f386:	2a08      	cmp	r2, #8
 800f388:	f200 84db 	bhi.w	800fd42 <_strtod_l+0xbc2>
 800f38c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f38e:	9007      	str	r0, [sp, #28]
 800f390:	2000      	movs	r0, #0
 800f392:	920a      	str	r2, [sp, #40]	; 0x28
 800f394:	4605      	mov	r5, r0
 800f396:	3b30      	subs	r3, #48	; 0x30
 800f398:	f100 0201 	add.w	r2, r0, #1
 800f39c:	d014      	beq.n	800f3c8 <_strtod_l+0x248>
 800f39e:	9907      	ldr	r1, [sp, #28]
 800f3a0:	4411      	add	r1, r2
 800f3a2:	9107      	str	r1, [sp, #28]
 800f3a4:	462a      	mov	r2, r5
 800f3a6:	eb00 0e05 	add.w	lr, r0, r5
 800f3aa:	210a      	movs	r1, #10
 800f3ac:	4572      	cmp	r2, lr
 800f3ae:	d113      	bne.n	800f3d8 <_strtod_l+0x258>
 800f3b0:	182a      	adds	r2, r5, r0
 800f3b2:	2a08      	cmp	r2, #8
 800f3b4:	f105 0501 	add.w	r5, r5, #1
 800f3b8:	4405      	add	r5, r0
 800f3ba:	dc1c      	bgt.n	800f3f6 <_strtod_l+0x276>
 800f3bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3be:	220a      	movs	r2, #10
 800f3c0:	fb02 3301 	mla	r3, r2, r1, r3
 800f3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f3ca:	1c59      	adds	r1, r3, #1
 800f3cc:	911d      	str	r1, [sp, #116]	; 0x74
 800f3ce:	785b      	ldrb	r3, [r3, #1]
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	e7c9      	b.n	800f368 <_strtod_l+0x1e8>
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	e7d2      	b.n	800f37e <_strtod_l+0x1fe>
 800f3d8:	2a08      	cmp	r2, #8
 800f3da:	dc04      	bgt.n	800f3e6 <_strtod_l+0x266>
 800f3dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f3de:	434e      	muls	r6, r1
 800f3e0:	9609      	str	r6, [sp, #36]	; 0x24
 800f3e2:	3201      	adds	r2, #1
 800f3e4:	e7e2      	b.n	800f3ac <_strtod_l+0x22c>
 800f3e6:	f102 0c01 	add.w	ip, r2, #1
 800f3ea:	f1bc 0f10 	cmp.w	ip, #16
 800f3ee:	bfd8      	it	le
 800f3f0:	fb01 f909 	mulle.w	r9, r1, r9
 800f3f4:	e7f5      	b.n	800f3e2 <_strtod_l+0x262>
 800f3f6:	2d10      	cmp	r5, #16
 800f3f8:	bfdc      	itt	le
 800f3fa:	220a      	movle	r2, #10
 800f3fc:	fb02 3909 	mlale	r9, r2, r9, r3
 800f400:	e7e1      	b.n	800f3c6 <_strtod_l+0x246>
 800f402:	2300      	movs	r3, #0
 800f404:	9307      	str	r3, [sp, #28]
 800f406:	2201      	movs	r2, #1
 800f408:	e77c      	b.n	800f304 <_strtod_l+0x184>
 800f40a:	f04f 0c00 	mov.w	ip, #0
 800f40e:	f108 0302 	add.w	r3, r8, #2
 800f412:	931d      	str	r3, [sp, #116]	; 0x74
 800f414:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f418:	e785      	b.n	800f326 <_strtod_l+0x1a6>
 800f41a:	f04f 0c01 	mov.w	ip, #1
 800f41e:	e7f6      	b.n	800f40e <_strtod_l+0x28e>
 800f420:	080134ec 	.word	0x080134ec
 800f424:	08013300 	.word	0x08013300
 800f428:	7ff00000 	.word	0x7ff00000
 800f42c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f42e:	1c59      	adds	r1, r3, #1
 800f430:	911d      	str	r1, [sp, #116]	; 0x74
 800f432:	785b      	ldrb	r3, [r3, #1]
 800f434:	2b30      	cmp	r3, #48	; 0x30
 800f436:	d0f9      	beq.n	800f42c <_strtod_l+0x2ac>
 800f438:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f43c:	2908      	cmp	r1, #8
 800f43e:	f63f af79 	bhi.w	800f334 <_strtod_l+0x1b4>
 800f442:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f448:	9308      	str	r3, [sp, #32]
 800f44a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f44c:	1c59      	adds	r1, r3, #1
 800f44e:	911d      	str	r1, [sp, #116]	; 0x74
 800f450:	785b      	ldrb	r3, [r3, #1]
 800f452:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f456:	2e09      	cmp	r6, #9
 800f458:	d937      	bls.n	800f4ca <_strtod_l+0x34a>
 800f45a:	9e08      	ldr	r6, [sp, #32]
 800f45c:	1b89      	subs	r1, r1, r6
 800f45e:	2908      	cmp	r1, #8
 800f460:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f464:	dc02      	bgt.n	800f46c <_strtod_l+0x2ec>
 800f466:	4576      	cmp	r6, lr
 800f468:	bfa8      	it	ge
 800f46a:	4676      	movge	r6, lr
 800f46c:	f1bc 0f00 	cmp.w	ip, #0
 800f470:	d000      	beq.n	800f474 <_strtod_l+0x2f4>
 800f472:	4276      	negs	r6, r6
 800f474:	2d00      	cmp	r5, #0
 800f476:	d14f      	bne.n	800f518 <_strtod_l+0x398>
 800f478:	9904      	ldr	r1, [sp, #16]
 800f47a:	4301      	orrs	r1, r0
 800f47c:	f47f aec2 	bne.w	800f204 <_strtod_l+0x84>
 800f480:	2a00      	cmp	r2, #0
 800f482:	f47f aedb 	bne.w	800f23c <_strtod_l+0xbc>
 800f486:	2b69      	cmp	r3, #105	; 0x69
 800f488:	d027      	beq.n	800f4da <_strtod_l+0x35a>
 800f48a:	dc24      	bgt.n	800f4d6 <_strtod_l+0x356>
 800f48c:	2b49      	cmp	r3, #73	; 0x49
 800f48e:	d024      	beq.n	800f4da <_strtod_l+0x35a>
 800f490:	2b4e      	cmp	r3, #78	; 0x4e
 800f492:	f47f aed3 	bne.w	800f23c <_strtod_l+0xbc>
 800f496:	499e      	ldr	r1, [pc, #632]	; (800f710 <_strtod_l+0x590>)
 800f498:	a81d      	add	r0, sp, #116	; 0x74
 800f49a:	f001 fe87 	bl	80111ac <__match>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	f43f aecc 	beq.w	800f23c <_strtod_l+0xbc>
 800f4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b28      	cmp	r3, #40	; 0x28
 800f4aa:	d12d      	bne.n	800f508 <_strtod_l+0x388>
 800f4ac:	4999      	ldr	r1, [pc, #612]	; (800f714 <_strtod_l+0x594>)
 800f4ae:	aa20      	add	r2, sp, #128	; 0x80
 800f4b0:	a81d      	add	r0, sp, #116	; 0x74
 800f4b2:	f001 fe8f 	bl	80111d4 <__hexnan>
 800f4b6:	2805      	cmp	r0, #5
 800f4b8:	d126      	bne.n	800f508 <_strtod_l+0x388>
 800f4ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f4c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f4c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f4c8:	e69c      	b.n	800f204 <_strtod_l+0x84>
 800f4ca:	210a      	movs	r1, #10
 800f4cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f4d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f4d4:	e7b9      	b.n	800f44a <_strtod_l+0x2ca>
 800f4d6:	2b6e      	cmp	r3, #110	; 0x6e
 800f4d8:	e7db      	b.n	800f492 <_strtod_l+0x312>
 800f4da:	498f      	ldr	r1, [pc, #572]	; (800f718 <_strtod_l+0x598>)
 800f4dc:	a81d      	add	r0, sp, #116	; 0x74
 800f4de:	f001 fe65 	bl	80111ac <__match>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	f43f aeaa 	beq.w	800f23c <_strtod_l+0xbc>
 800f4e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4ea:	498c      	ldr	r1, [pc, #560]	; (800f71c <_strtod_l+0x59c>)
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	a81d      	add	r0, sp, #116	; 0x74
 800f4f0:	931d      	str	r3, [sp, #116]	; 0x74
 800f4f2:	f001 fe5b 	bl	80111ac <__match>
 800f4f6:	b910      	cbnz	r0, 800f4fe <_strtod_l+0x37e>
 800f4f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	931d      	str	r3, [sp, #116]	; 0x74
 800f4fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f72c <_strtod_l+0x5ac>
 800f502:	f04f 0a00 	mov.w	sl, #0
 800f506:	e67d      	b.n	800f204 <_strtod_l+0x84>
 800f508:	4885      	ldr	r0, [pc, #532]	; (800f720 <_strtod_l+0x5a0>)
 800f50a:	f002 ff49 	bl	80123a0 <nan>
 800f50e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f512:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f516:	e675      	b.n	800f204 <_strtod_l+0x84>
 800f518:	9b07      	ldr	r3, [sp, #28]
 800f51a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f51c:	1af3      	subs	r3, r6, r3
 800f51e:	2f00      	cmp	r7, #0
 800f520:	bf08      	it	eq
 800f522:	462f      	moveq	r7, r5
 800f524:	2d10      	cmp	r5, #16
 800f526:	9308      	str	r3, [sp, #32]
 800f528:	46a8      	mov	r8, r5
 800f52a:	bfa8      	it	ge
 800f52c:	f04f 0810 	movge.w	r8, #16
 800f530:	f7f0 fff0 	bl	8000514 <__aeabi_ui2d>
 800f534:	2d09      	cmp	r5, #9
 800f536:	4682      	mov	sl, r0
 800f538:	468b      	mov	fp, r1
 800f53a:	dd13      	ble.n	800f564 <_strtod_l+0x3e4>
 800f53c:	4b79      	ldr	r3, [pc, #484]	; (800f724 <_strtod_l+0x5a4>)
 800f53e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f542:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f546:	f7f1 f85f 	bl	8000608 <__aeabi_dmul>
 800f54a:	4682      	mov	sl, r0
 800f54c:	4648      	mov	r0, r9
 800f54e:	468b      	mov	fp, r1
 800f550:	f7f0 ffe0 	bl	8000514 <__aeabi_ui2d>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	4650      	mov	r0, sl
 800f55a:	4659      	mov	r1, fp
 800f55c:	f7f0 fe9e 	bl	800029c <__adddf3>
 800f560:	4682      	mov	sl, r0
 800f562:	468b      	mov	fp, r1
 800f564:	2d0f      	cmp	r5, #15
 800f566:	dc38      	bgt.n	800f5da <_strtod_l+0x45a>
 800f568:	9b08      	ldr	r3, [sp, #32]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f43f ae4a 	beq.w	800f204 <_strtod_l+0x84>
 800f570:	dd24      	ble.n	800f5bc <_strtod_l+0x43c>
 800f572:	2b16      	cmp	r3, #22
 800f574:	dc0b      	bgt.n	800f58e <_strtod_l+0x40e>
 800f576:	4d6b      	ldr	r5, [pc, #428]	; (800f724 <_strtod_l+0x5a4>)
 800f578:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f57c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f580:	4652      	mov	r2, sl
 800f582:	465b      	mov	r3, fp
 800f584:	f7f1 f840 	bl	8000608 <__aeabi_dmul>
 800f588:	4682      	mov	sl, r0
 800f58a:	468b      	mov	fp, r1
 800f58c:	e63a      	b.n	800f204 <_strtod_l+0x84>
 800f58e:	9a08      	ldr	r2, [sp, #32]
 800f590:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f594:	4293      	cmp	r3, r2
 800f596:	db20      	blt.n	800f5da <_strtod_l+0x45a>
 800f598:	4c62      	ldr	r4, [pc, #392]	; (800f724 <_strtod_l+0x5a4>)
 800f59a:	f1c5 050f 	rsb	r5, r5, #15
 800f59e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f5a2:	4652      	mov	r2, sl
 800f5a4:	465b      	mov	r3, fp
 800f5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5aa:	f7f1 f82d 	bl	8000608 <__aeabi_dmul>
 800f5ae:	9b08      	ldr	r3, [sp, #32]
 800f5b0:	1b5d      	subs	r5, r3, r5
 800f5b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f5b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f5ba:	e7e3      	b.n	800f584 <_strtod_l+0x404>
 800f5bc:	9b08      	ldr	r3, [sp, #32]
 800f5be:	3316      	adds	r3, #22
 800f5c0:	db0b      	blt.n	800f5da <_strtod_l+0x45a>
 800f5c2:	9b07      	ldr	r3, [sp, #28]
 800f5c4:	4a57      	ldr	r2, [pc, #348]	; (800f724 <_strtod_l+0x5a4>)
 800f5c6:	1b9e      	subs	r6, r3, r6
 800f5c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f5cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f5d0:	4650      	mov	r0, sl
 800f5d2:	4659      	mov	r1, fp
 800f5d4:	f7f1 f942 	bl	800085c <__aeabi_ddiv>
 800f5d8:	e7d6      	b.n	800f588 <_strtod_l+0x408>
 800f5da:	9b08      	ldr	r3, [sp, #32]
 800f5dc:	eba5 0808 	sub.w	r8, r5, r8
 800f5e0:	4498      	add	r8, r3
 800f5e2:	f1b8 0f00 	cmp.w	r8, #0
 800f5e6:	dd71      	ble.n	800f6cc <_strtod_l+0x54c>
 800f5e8:	f018 030f 	ands.w	r3, r8, #15
 800f5ec:	d00a      	beq.n	800f604 <_strtod_l+0x484>
 800f5ee:	494d      	ldr	r1, [pc, #308]	; (800f724 <_strtod_l+0x5a4>)
 800f5f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f5f4:	4652      	mov	r2, sl
 800f5f6:	465b      	mov	r3, fp
 800f5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5fc:	f7f1 f804 	bl	8000608 <__aeabi_dmul>
 800f600:	4682      	mov	sl, r0
 800f602:	468b      	mov	fp, r1
 800f604:	f038 080f 	bics.w	r8, r8, #15
 800f608:	d04d      	beq.n	800f6a6 <_strtod_l+0x526>
 800f60a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f60e:	dd22      	ble.n	800f656 <_strtod_l+0x4d6>
 800f610:	2500      	movs	r5, #0
 800f612:	462e      	mov	r6, r5
 800f614:	9509      	str	r5, [sp, #36]	; 0x24
 800f616:	9507      	str	r5, [sp, #28]
 800f618:	2322      	movs	r3, #34	; 0x22
 800f61a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f72c <_strtod_l+0x5ac>
 800f61e:	6023      	str	r3, [r4, #0]
 800f620:	f04f 0a00 	mov.w	sl, #0
 800f624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f626:	2b00      	cmp	r3, #0
 800f628:	f43f adec 	beq.w	800f204 <_strtod_l+0x84>
 800f62c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f62e:	4620      	mov	r0, r4
 800f630:	f001 feca 	bl	80113c8 <_Bfree>
 800f634:	9907      	ldr	r1, [sp, #28]
 800f636:	4620      	mov	r0, r4
 800f638:	f001 fec6 	bl	80113c8 <_Bfree>
 800f63c:	4631      	mov	r1, r6
 800f63e:	4620      	mov	r0, r4
 800f640:	f001 fec2 	bl	80113c8 <_Bfree>
 800f644:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f646:	4620      	mov	r0, r4
 800f648:	f001 febe 	bl	80113c8 <_Bfree>
 800f64c:	4629      	mov	r1, r5
 800f64e:	4620      	mov	r0, r4
 800f650:	f001 feba 	bl	80113c8 <_Bfree>
 800f654:	e5d6      	b.n	800f204 <_strtod_l+0x84>
 800f656:	2300      	movs	r3, #0
 800f658:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f65c:	4650      	mov	r0, sl
 800f65e:	4659      	mov	r1, fp
 800f660:	4699      	mov	r9, r3
 800f662:	f1b8 0f01 	cmp.w	r8, #1
 800f666:	dc21      	bgt.n	800f6ac <_strtod_l+0x52c>
 800f668:	b10b      	cbz	r3, 800f66e <_strtod_l+0x4ee>
 800f66a:	4682      	mov	sl, r0
 800f66c:	468b      	mov	fp, r1
 800f66e:	4b2e      	ldr	r3, [pc, #184]	; (800f728 <_strtod_l+0x5a8>)
 800f670:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f674:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f678:	4652      	mov	r2, sl
 800f67a:	465b      	mov	r3, fp
 800f67c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f680:	f7f0 ffc2 	bl	8000608 <__aeabi_dmul>
 800f684:	4b29      	ldr	r3, [pc, #164]	; (800f72c <_strtod_l+0x5ac>)
 800f686:	460a      	mov	r2, r1
 800f688:	400b      	ands	r3, r1
 800f68a:	4929      	ldr	r1, [pc, #164]	; (800f730 <_strtod_l+0x5b0>)
 800f68c:	428b      	cmp	r3, r1
 800f68e:	4682      	mov	sl, r0
 800f690:	d8be      	bhi.n	800f610 <_strtod_l+0x490>
 800f692:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f696:	428b      	cmp	r3, r1
 800f698:	bf86      	itte	hi
 800f69a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f734 <_strtod_l+0x5b4>
 800f69e:	f04f 3aff 	movhi.w	sl, #4294967295
 800f6a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	9304      	str	r3, [sp, #16]
 800f6aa:	e081      	b.n	800f7b0 <_strtod_l+0x630>
 800f6ac:	f018 0f01 	tst.w	r8, #1
 800f6b0:	d007      	beq.n	800f6c2 <_strtod_l+0x542>
 800f6b2:	4b1d      	ldr	r3, [pc, #116]	; (800f728 <_strtod_l+0x5a8>)
 800f6b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	f7f0 ffa4 	bl	8000608 <__aeabi_dmul>
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	f109 0901 	add.w	r9, r9, #1
 800f6c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f6ca:	e7ca      	b.n	800f662 <_strtod_l+0x4e2>
 800f6cc:	d0eb      	beq.n	800f6a6 <_strtod_l+0x526>
 800f6ce:	f1c8 0800 	rsb	r8, r8, #0
 800f6d2:	f018 020f 	ands.w	r2, r8, #15
 800f6d6:	d00a      	beq.n	800f6ee <_strtod_l+0x56e>
 800f6d8:	4b12      	ldr	r3, [pc, #72]	; (800f724 <_strtod_l+0x5a4>)
 800f6da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6de:	4650      	mov	r0, sl
 800f6e0:	4659      	mov	r1, fp
 800f6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e6:	f7f1 f8b9 	bl	800085c <__aeabi_ddiv>
 800f6ea:	4682      	mov	sl, r0
 800f6ec:	468b      	mov	fp, r1
 800f6ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f6f2:	d0d8      	beq.n	800f6a6 <_strtod_l+0x526>
 800f6f4:	f1b8 0f1f 	cmp.w	r8, #31
 800f6f8:	dd1e      	ble.n	800f738 <_strtod_l+0x5b8>
 800f6fa:	2500      	movs	r5, #0
 800f6fc:	462e      	mov	r6, r5
 800f6fe:	9509      	str	r5, [sp, #36]	; 0x24
 800f700:	9507      	str	r5, [sp, #28]
 800f702:	2322      	movs	r3, #34	; 0x22
 800f704:	f04f 0a00 	mov.w	sl, #0
 800f708:	f04f 0b00 	mov.w	fp, #0
 800f70c:	6023      	str	r3, [r4, #0]
 800f70e:	e789      	b.n	800f624 <_strtod_l+0x4a4>
 800f710:	080132d9 	.word	0x080132d9
 800f714:	08013314 	.word	0x08013314
 800f718:	080132d1 	.word	0x080132d1
 800f71c:	08013407 	.word	0x08013407
 800f720:	08013403 	.word	0x08013403
 800f724:	08013588 	.word	0x08013588
 800f728:	08013560 	.word	0x08013560
 800f72c:	7ff00000 	.word	0x7ff00000
 800f730:	7ca00000 	.word	0x7ca00000
 800f734:	7fefffff 	.word	0x7fefffff
 800f738:	f018 0310 	ands.w	r3, r8, #16
 800f73c:	bf18      	it	ne
 800f73e:	236a      	movne	r3, #106	; 0x6a
 800f740:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800faf8 <_strtod_l+0x978>
 800f744:	9304      	str	r3, [sp, #16]
 800f746:	4650      	mov	r0, sl
 800f748:	4659      	mov	r1, fp
 800f74a:	2300      	movs	r3, #0
 800f74c:	f018 0f01 	tst.w	r8, #1
 800f750:	d004      	beq.n	800f75c <_strtod_l+0x5dc>
 800f752:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f756:	f7f0 ff57 	bl	8000608 <__aeabi_dmul>
 800f75a:	2301      	movs	r3, #1
 800f75c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f760:	f109 0908 	add.w	r9, r9, #8
 800f764:	d1f2      	bne.n	800f74c <_strtod_l+0x5cc>
 800f766:	b10b      	cbz	r3, 800f76c <_strtod_l+0x5ec>
 800f768:	4682      	mov	sl, r0
 800f76a:	468b      	mov	fp, r1
 800f76c:	9b04      	ldr	r3, [sp, #16]
 800f76e:	b1bb      	cbz	r3, 800f7a0 <_strtod_l+0x620>
 800f770:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f774:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f778:	2b00      	cmp	r3, #0
 800f77a:	4659      	mov	r1, fp
 800f77c:	dd10      	ble.n	800f7a0 <_strtod_l+0x620>
 800f77e:	2b1f      	cmp	r3, #31
 800f780:	f340 8128 	ble.w	800f9d4 <_strtod_l+0x854>
 800f784:	2b34      	cmp	r3, #52	; 0x34
 800f786:	bfde      	ittt	le
 800f788:	3b20      	suble	r3, #32
 800f78a:	f04f 32ff 	movle.w	r2, #4294967295
 800f78e:	fa02 f303 	lslle.w	r3, r2, r3
 800f792:	f04f 0a00 	mov.w	sl, #0
 800f796:	bfcc      	ite	gt
 800f798:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f79c:	ea03 0b01 	andle.w	fp, r3, r1
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	4650      	mov	r0, sl
 800f7a6:	4659      	mov	r1, fp
 800f7a8:	f7f1 f996 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d1a4      	bne.n	800f6fa <_strtod_l+0x57a>
 800f7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7b2:	9300      	str	r3, [sp, #0]
 800f7b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f7b6:	462b      	mov	r3, r5
 800f7b8:	463a      	mov	r2, r7
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f001 fe70 	bl	80114a0 <__s2b>
 800f7c0:	9009      	str	r0, [sp, #36]	; 0x24
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	f43f af24 	beq.w	800f610 <_strtod_l+0x490>
 800f7c8:	9b07      	ldr	r3, [sp, #28]
 800f7ca:	1b9e      	subs	r6, r3, r6
 800f7cc:	9b08      	ldr	r3, [sp, #32]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	bfb4      	ite	lt
 800f7d2:	4633      	movlt	r3, r6
 800f7d4:	2300      	movge	r3, #0
 800f7d6:	9310      	str	r3, [sp, #64]	; 0x40
 800f7d8:	9b08      	ldr	r3, [sp, #32]
 800f7da:	2500      	movs	r5, #0
 800f7dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f7e0:	9318      	str	r3, [sp, #96]	; 0x60
 800f7e2:	462e      	mov	r6, r5
 800f7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	6859      	ldr	r1, [r3, #4]
 800f7ea:	f001 fdad 	bl	8011348 <_Balloc>
 800f7ee:	9007      	str	r0, [sp, #28]
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	f43f af11 	beq.w	800f618 <_strtod_l+0x498>
 800f7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f8:	691a      	ldr	r2, [r3, #16]
 800f7fa:	3202      	adds	r2, #2
 800f7fc:	f103 010c 	add.w	r1, r3, #12
 800f800:	0092      	lsls	r2, r2, #2
 800f802:	300c      	adds	r0, #12
 800f804:	f7fe ff90 	bl	800e728 <memcpy>
 800f808:	ec4b ab10 	vmov	d0, sl, fp
 800f80c:	aa20      	add	r2, sp, #128	; 0x80
 800f80e:	a91f      	add	r1, sp, #124	; 0x7c
 800f810:	4620      	mov	r0, r4
 800f812:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f816:	f002 f97f 	bl	8011b18 <__d2b>
 800f81a:	901e      	str	r0, [sp, #120]	; 0x78
 800f81c:	2800      	cmp	r0, #0
 800f81e:	f43f aefb 	beq.w	800f618 <_strtod_l+0x498>
 800f822:	2101      	movs	r1, #1
 800f824:	4620      	mov	r0, r4
 800f826:	f001 fed5 	bl	80115d4 <__i2b>
 800f82a:	4606      	mov	r6, r0
 800f82c:	2800      	cmp	r0, #0
 800f82e:	f43f aef3 	beq.w	800f618 <_strtod_l+0x498>
 800f832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f834:	9904      	ldr	r1, [sp, #16]
 800f836:	2b00      	cmp	r3, #0
 800f838:	bfab      	itete	ge
 800f83a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f83c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f83e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f840:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f844:	bfac      	ite	ge
 800f846:	eb03 0902 	addge.w	r9, r3, r2
 800f84a:	1ad7      	sublt	r7, r2, r3
 800f84c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f84e:	eba3 0801 	sub.w	r8, r3, r1
 800f852:	4490      	add	r8, r2
 800f854:	4ba3      	ldr	r3, [pc, #652]	; (800fae4 <_strtod_l+0x964>)
 800f856:	f108 38ff 	add.w	r8, r8, #4294967295
 800f85a:	4598      	cmp	r8, r3
 800f85c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f860:	f280 80cc 	bge.w	800f9fc <_strtod_l+0x87c>
 800f864:	eba3 0308 	sub.w	r3, r3, r8
 800f868:	2b1f      	cmp	r3, #31
 800f86a:	eba2 0203 	sub.w	r2, r2, r3
 800f86e:	f04f 0101 	mov.w	r1, #1
 800f872:	f300 80b6 	bgt.w	800f9e2 <_strtod_l+0x862>
 800f876:	fa01 f303 	lsl.w	r3, r1, r3
 800f87a:	9311      	str	r3, [sp, #68]	; 0x44
 800f87c:	2300      	movs	r3, #0
 800f87e:	930c      	str	r3, [sp, #48]	; 0x30
 800f880:	eb09 0802 	add.w	r8, r9, r2
 800f884:	9b04      	ldr	r3, [sp, #16]
 800f886:	45c1      	cmp	r9, r8
 800f888:	4417      	add	r7, r2
 800f88a:	441f      	add	r7, r3
 800f88c:	464b      	mov	r3, r9
 800f88e:	bfa8      	it	ge
 800f890:	4643      	movge	r3, r8
 800f892:	42bb      	cmp	r3, r7
 800f894:	bfa8      	it	ge
 800f896:	463b      	movge	r3, r7
 800f898:	2b00      	cmp	r3, #0
 800f89a:	bfc2      	ittt	gt
 800f89c:	eba8 0803 	subgt.w	r8, r8, r3
 800f8a0:	1aff      	subgt	r7, r7, r3
 800f8a2:	eba9 0903 	subgt.w	r9, r9, r3
 800f8a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	dd17      	ble.n	800f8dc <_strtod_l+0x75c>
 800f8ac:	4631      	mov	r1, r6
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f001 ff4b 	bl	801174c <__pow5mult>
 800f8b6:	4606      	mov	r6, r0
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	f43f aead 	beq.w	800f618 <_strtod_l+0x498>
 800f8be:	4601      	mov	r1, r0
 800f8c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f001 fe9c 	bl	8011600 <__multiply>
 800f8c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	f43f aea4 	beq.w	800f618 <_strtod_l+0x498>
 800f8d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f001 fd78 	bl	80113c8 <_Bfree>
 800f8d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8da:	931e      	str	r3, [sp, #120]	; 0x78
 800f8dc:	f1b8 0f00 	cmp.w	r8, #0
 800f8e0:	f300 8091 	bgt.w	800fa06 <_strtod_l+0x886>
 800f8e4:	9b08      	ldr	r3, [sp, #32]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	dd08      	ble.n	800f8fc <_strtod_l+0x77c>
 800f8ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f8ec:	9907      	ldr	r1, [sp, #28]
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f001 ff2c 	bl	801174c <__pow5mult>
 800f8f4:	9007      	str	r0, [sp, #28]
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	f43f ae8e 	beq.w	800f618 <_strtod_l+0x498>
 800f8fc:	2f00      	cmp	r7, #0
 800f8fe:	dd08      	ble.n	800f912 <_strtod_l+0x792>
 800f900:	9907      	ldr	r1, [sp, #28]
 800f902:	463a      	mov	r2, r7
 800f904:	4620      	mov	r0, r4
 800f906:	f001 ff7b 	bl	8011800 <__lshift>
 800f90a:	9007      	str	r0, [sp, #28]
 800f90c:	2800      	cmp	r0, #0
 800f90e:	f43f ae83 	beq.w	800f618 <_strtod_l+0x498>
 800f912:	f1b9 0f00 	cmp.w	r9, #0
 800f916:	dd08      	ble.n	800f92a <_strtod_l+0x7aa>
 800f918:	4631      	mov	r1, r6
 800f91a:	464a      	mov	r2, r9
 800f91c:	4620      	mov	r0, r4
 800f91e:	f001 ff6f 	bl	8011800 <__lshift>
 800f922:	4606      	mov	r6, r0
 800f924:	2800      	cmp	r0, #0
 800f926:	f43f ae77 	beq.w	800f618 <_strtod_l+0x498>
 800f92a:	9a07      	ldr	r2, [sp, #28]
 800f92c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f92e:	4620      	mov	r0, r4
 800f930:	f001 ffee 	bl	8011910 <__mdiff>
 800f934:	4605      	mov	r5, r0
 800f936:	2800      	cmp	r0, #0
 800f938:	f43f ae6e 	beq.w	800f618 <_strtod_l+0x498>
 800f93c:	68c3      	ldr	r3, [r0, #12]
 800f93e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f940:	2300      	movs	r3, #0
 800f942:	60c3      	str	r3, [r0, #12]
 800f944:	4631      	mov	r1, r6
 800f946:	f001 ffc7 	bl	80118d8 <__mcmp>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	da65      	bge.n	800fa1a <_strtod_l+0x89a>
 800f94e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f950:	ea53 030a 	orrs.w	r3, r3, sl
 800f954:	f040 8087 	bne.w	800fa66 <_strtod_l+0x8e6>
 800f958:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f040 8082 	bne.w	800fa66 <_strtod_l+0x8e6>
 800f962:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f966:	0d1b      	lsrs	r3, r3, #20
 800f968:	051b      	lsls	r3, r3, #20
 800f96a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f96e:	d97a      	bls.n	800fa66 <_strtod_l+0x8e6>
 800f970:	696b      	ldr	r3, [r5, #20]
 800f972:	b913      	cbnz	r3, 800f97a <_strtod_l+0x7fa>
 800f974:	692b      	ldr	r3, [r5, #16]
 800f976:	2b01      	cmp	r3, #1
 800f978:	dd75      	ble.n	800fa66 <_strtod_l+0x8e6>
 800f97a:	4629      	mov	r1, r5
 800f97c:	2201      	movs	r2, #1
 800f97e:	4620      	mov	r0, r4
 800f980:	f001 ff3e 	bl	8011800 <__lshift>
 800f984:	4631      	mov	r1, r6
 800f986:	4605      	mov	r5, r0
 800f988:	f001 ffa6 	bl	80118d8 <__mcmp>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	dd6a      	ble.n	800fa66 <_strtod_l+0x8e6>
 800f990:	9904      	ldr	r1, [sp, #16]
 800f992:	4a55      	ldr	r2, [pc, #340]	; (800fae8 <_strtod_l+0x968>)
 800f994:	465b      	mov	r3, fp
 800f996:	2900      	cmp	r1, #0
 800f998:	f000 8085 	beq.w	800faa6 <_strtod_l+0x926>
 800f99c:	ea02 010b 	and.w	r1, r2, fp
 800f9a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f9a4:	dc7f      	bgt.n	800faa6 <_strtod_l+0x926>
 800f9a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f9aa:	f77f aeaa 	ble.w	800f702 <_strtod_l+0x582>
 800f9ae:	4a4f      	ldr	r2, [pc, #316]	; (800faec <_strtod_l+0x96c>)
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f9b6:	4650      	mov	r0, sl
 800f9b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f9bc:	4659      	mov	r1, fp
 800f9be:	f7f0 fe23 	bl	8000608 <__aeabi_dmul>
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4303      	orrs	r3, r0
 800f9c6:	bf08      	it	eq
 800f9c8:	2322      	moveq	r3, #34	; 0x22
 800f9ca:	4682      	mov	sl, r0
 800f9cc:	468b      	mov	fp, r1
 800f9ce:	bf08      	it	eq
 800f9d0:	6023      	streq	r3, [r4, #0]
 800f9d2:	e62b      	b.n	800f62c <_strtod_l+0x4ac>
 800f9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f9dc:	ea03 0a0a 	and.w	sl, r3, sl
 800f9e0:	e6de      	b.n	800f7a0 <_strtod_l+0x620>
 800f9e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f9e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f9ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f9ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f9f2:	fa01 f308 	lsl.w	r3, r1, r8
 800f9f6:	930c      	str	r3, [sp, #48]	; 0x30
 800f9f8:	9111      	str	r1, [sp, #68]	; 0x44
 800f9fa:	e741      	b.n	800f880 <_strtod_l+0x700>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	930c      	str	r3, [sp, #48]	; 0x30
 800fa00:	2301      	movs	r3, #1
 800fa02:	9311      	str	r3, [sp, #68]	; 0x44
 800fa04:	e73c      	b.n	800f880 <_strtod_l+0x700>
 800fa06:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fa08:	4642      	mov	r2, r8
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f001 fef8 	bl	8011800 <__lshift>
 800fa10:	901e      	str	r0, [sp, #120]	; 0x78
 800fa12:	2800      	cmp	r0, #0
 800fa14:	f47f af66 	bne.w	800f8e4 <_strtod_l+0x764>
 800fa18:	e5fe      	b.n	800f618 <_strtod_l+0x498>
 800fa1a:	465f      	mov	r7, fp
 800fa1c:	d16e      	bne.n	800fafc <_strtod_l+0x97c>
 800fa1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa24:	b342      	cbz	r2, 800fa78 <_strtod_l+0x8f8>
 800fa26:	4a32      	ldr	r2, [pc, #200]	; (800faf0 <_strtod_l+0x970>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d128      	bne.n	800fa7e <_strtod_l+0x8fe>
 800fa2c:	9b04      	ldr	r3, [sp, #16]
 800fa2e:	4650      	mov	r0, sl
 800fa30:	b1eb      	cbz	r3, 800fa6e <_strtod_l+0x8ee>
 800fa32:	4a2d      	ldr	r2, [pc, #180]	; (800fae8 <_strtod_l+0x968>)
 800fa34:	403a      	ands	r2, r7
 800fa36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fa3a:	f04f 31ff 	mov.w	r1, #4294967295
 800fa3e:	d819      	bhi.n	800fa74 <_strtod_l+0x8f4>
 800fa40:	0d12      	lsrs	r2, r2, #20
 800fa42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fa46:	fa01 f303 	lsl.w	r3, r1, r3
 800fa4a:	4298      	cmp	r0, r3
 800fa4c:	d117      	bne.n	800fa7e <_strtod_l+0x8fe>
 800fa4e:	4b29      	ldr	r3, [pc, #164]	; (800faf4 <_strtod_l+0x974>)
 800fa50:	429f      	cmp	r7, r3
 800fa52:	d102      	bne.n	800fa5a <_strtod_l+0x8da>
 800fa54:	3001      	adds	r0, #1
 800fa56:	f43f addf 	beq.w	800f618 <_strtod_l+0x498>
 800fa5a:	4b23      	ldr	r3, [pc, #140]	; (800fae8 <_strtod_l+0x968>)
 800fa5c:	403b      	ands	r3, r7
 800fa5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fa62:	f04f 0a00 	mov.w	sl, #0
 800fa66:	9b04      	ldr	r3, [sp, #16]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1a0      	bne.n	800f9ae <_strtod_l+0x82e>
 800fa6c:	e5de      	b.n	800f62c <_strtod_l+0x4ac>
 800fa6e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa72:	e7ea      	b.n	800fa4a <_strtod_l+0x8ca>
 800fa74:	460b      	mov	r3, r1
 800fa76:	e7e8      	b.n	800fa4a <_strtod_l+0x8ca>
 800fa78:	ea53 030a 	orrs.w	r3, r3, sl
 800fa7c:	d088      	beq.n	800f990 <_strtod_l+0x810>
 800fa7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa80:	b1db      	cbz	r3, 800faba <_strtod_l+0x93a>
 800fa82:	423b      	tst	r3, r7
 800fa84:	d0ef      	beq.n	800fa66 <_strtod_l+0x8e6>
 800fa86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa88:	9a04      	ldr	r2, [sp, #16]
 800fa8a:	4650      	mov	r0, sl
 800fa8c:	4659      	mov	r1, fp
 800fa8e:	b1c3      	cbz	r3, 800fac2 <_strtod_l+0x942>
 800fa90:	f7ff fb5a 	bl	800f148 <sulp>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fa9c:	f7f0 fbfe 	bl	800029c <__adddf3>
 800faa0:	4682      	mov	sl, r0
 800faa2:	468b      	mov	fp, r1
 800faa4:	e7df      	b.n	800fa66 <_strtod_l+0x8e6>
 800faa6:	4013      	ands	r3, r2
 800faa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800faac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fab0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fab4:	f04f 3aff 	mov.w	sl, #4294967295
 800fab8:	e7d5      	b.n	800fa66 <_strtod_l+0x8e6>
 800faba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fabc:	ea13 0f0a 	tst.w	r3, sl
 800fac0:	e7e0      	b.n	800fa84 <_strtod_l+0x904>
 800fac2:	f7ff fb41 	bl	800f148 <sulp>
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800face:	f7f0 fbe3 	bl	8000298 <__aeabi_dsub>
 800fad2:	2200      	movs	r2, #0
 800fad4:	2300      	movs	r3, #0
 800fad6:	4682      	mov	sl, r0
 800fad8:	468b      	mov	fp, r1
 800fada:	f7f0 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 800fade:	2800      	cmp	r0, #0
 800fae0:	d0c1      	beq.n	800fa66 <_strtod_l+0x8e6>
 800fae2:	e60e      	b.n	800f702 <_strtod_l+0x582>
 800fae4:	fffffc02 	.word	0xfffffc02
 800fae8:	7ff00000 	.word	0x7ff00000
 800faec:	39500000 	.word	0x39500000
 800faf0:	000fffff 	.word	0x000fffff
 800faf4:	7fefffff 	.word	0x7fefffff
 800faf8:	08013328 	.word	0x08013328
 800fafc:	4631      	mov	r1, r6
 800fafe:	4628      	mov	r0, r5
 800fb00:	f002 f866 	bl	8011bd0 <__ratio>
 800fb04:	ec59 8b10 	vmov	r8, r9, d0
 800fb08:	ee10 0a10 	vmov	r0, s0
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb12:	4649      	mov	r1, r9
 800fb14:	f7f0 fff4 	bl	8000b00 <__aeabi_dcmple>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d07c      	beq.n	800fc16 <_strtod_l+0xa96>
 800fb1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d04c      	beq.n	800fbbc <_strtod_l+0xa3c>
 800fb22:	4b95      	ldr	r3, [pc, #596]	; (800fd78 <_strtod_l+0xbf8>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fb2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fd78 <_strtod_l+0xbf8>
 800fb2e:	f04f 0800 	mov.w	r8, #0
 800fb32:	4b92      	ldr	r3, [pc, #584]	; (800fd7c <_strtod_l+0xbfc>)
 800fb34:	403b      	ands	r3, r7
 800fb36:	9311      	str	r3, [sp, #68]	; 0x44
 800fb38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fb3a:	4b91      	ldr	r3, [pc, #580]	; (800fd80 <_strtod_l+0xc00>)
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	f040 80b2 	bne.w	800fca6 <_strtod_l+0xb26>
 800fb42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fb46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fb4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fb4e:	ec4b ab10 	vmov	d0, sl, fp
 800fb52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800fb56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fb5a:	f001 ff61 	bl	8011a20 <__ulp>
 800fb5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fb62:	ec53 2b10 	vmov	r2, r3, d0
 800fb66:	f7f0 fd4f 	bl	8000608 <__aeabi_dmul>
 800fb6a:	4652      	mov	r2, sl
 800fb6c:	465b      	mov	r3, fp
 800fb6e:	f7f0 fb95 	bl	800029c <__adddf3>
 800fb72:	460b      	mov	r3, r1
 800fb74:	4981      	ldr	r1, [pc, #516]	; (800fd7c <_strtod_l+0xbfc>)
 800fb76:	4a83      	ldr	r2, [pc, #524]	; (800fd84 <_strtod_l+0xc04>)
 800fb78:	4019      	ands	r1, r3
 800fb7a:	4291      	cmp	r1, r2
 800fb7c:	4682      	mov	sl, r0
 800fb7e:	d95e      	bls.n	800fc3e <_strtod_l+0xabe>
 800fb80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d103      	bne.n	800fb92 <_strtod_l+0xa12>
 800fb8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	f43f ad43 	beq.w	800f618 <_strtod_l+0x498>
 800fb92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800fd90 <_strtod_l+0xc10>
 800fb96:	f04f 3aff 	mov.w	sl, #4294967295
 800fb9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f001 fc13 	bl	80113c8 <_Bfree>
 800fba2:	9907      	ldr	r1, [sp, #28]
 800fba4:	4620      	mov	r0, r4
 800fba6:	f001 fc0f 	bl	80113c8 <_Bfree>
 800fbaa:	4631      	mov	r1, r6
 800fbac:	4620      	mov	r0, r4
 800fbae:	f001 fc0b 	bl	80113c8 <_Bfree>
 800fbb2:	4629      	mov	r1, r5
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	f001 fc07 	bl	80113c8 <_Bfree>
 800fbba:	e613      	b.n	800f7e4 <_strtod_l+0x664>
 800fbbc:	f1ba 0f00 	cmp.w	sl, #0
 800fbc0:	d11b      	bne.n	800fbfa <_strtod_l+0xa7a>
 800fbc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbc6:	b9f3      	cbnz	r3, 800fc06 <_strtod_l+0xa86>
 800fbc8:	4b6b      	ldr	r3, [pc, #428]	; (800fd78 <_strtod_l+0xbf8>)
 800fbca:	2200      	movs	r2, #0
 800fbcc:	4640      	mov	r0, r8
 800fbce:	4649      	mov	r1, r9
 800fbd0:	f7f0 ff8c 	bl	8000aec <__aeabi_dcmplt>
 800fbd4:	b9d0      	cbnz	r0, 800fc0c <_strtod_l+0xa8c>
 800fbd6:	4640      	mov	r0, r8
 800fbd8:	4649      	mov	r1, r9
 800fbda:	4b6b      	ldr	r3, [pc, #428]	; (800fd88 <_strtod_l+0xc08>)
 800fbdc:	2200      	movs	r2, #0
 800fbde:	f7f0 fd13 	bl	8000608 <__aeabi_dmul>
 800fbe2:	4680      	mov	r8, r0
 800fbe4:	4689      	mov	r9, r1
 800fbe6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fbea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800fbee:	931b      	str	r3, [sp, #108]	; 0x6c
 800fbf0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800fbf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fbf8:	e79b      	b.n	800fb32 <_strtod_l+0x9b2>
 800fbfa:	f1ba 0f01 	cmp.w	sl, #1
 800fbfe:	d102      	bne.n	800fc06 <_strtod_l+0xa86>
 800fc00:	2f00      	cmp	r7, #0
 800fc02:	f43f ad7e 	beq.w	800f702 <_strtod_l+0x582>
 800fc06:	4b61      	ldr	r3, [pc, #388]	; (800fd8c <_strtod_l+0xc0c>)
 800fc08:	2200      	movs	r2, #0
 800fc0a:	e78c      	b.n	800fb26 <_strtod_l+0x9a6>
 800fc0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fd88 <_strtod_l+0xc08>
 800fc10:	f04f 0800 	mov.w	r8, #0
 800fc14:	e7e7      	b.n	800fbe6 <_strtod_l+0xa66>
 800fc16:	4b5c      	ldr	r3, [pc, #368]	; (800fd88 <_strtod_l+0xc08>)
 800fc18:	4640      	mov	r0, r8
 800fc1a:	4649      	mov	r1, r9
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f7f0 fcf3 	bl	8000608 <__aeabi_dmul>
 800fc22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc24:	4680      	mov	r8, r0
 800fc26:	4689      	mov	r9, r1
 800fc28:	b933      	cbnz	r3, 800fc38 <_strtod_l+0xab8>
 800fc2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc2e:	9012      	str	r0, [sp, #72]	; 0x48
 800fc30:	9313      	str	r3, [sp, #76]	; 0x4c
 800fc32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fc36:	e7dd      	b.n	800fbf4 <_strtod_l+0xa74>
 800fc38:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800fc3c:	e7f9      	b.n	800fc32 <_strtod_l+0xab2>
 800fc3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fc42:	9b04      	ldr	r3, [sp, #16]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d1a8      	bne.n	800fb9a <_strtod_l+0xa1a>
 800fc48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fc4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fc4e:	0d1b      	lsrs	r3, r3, #20
 800fc50:	051b      	lsls	r3, r3, #20
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d1a1      	bne.n	800fb9a <_strtod_l+0xa1a>
 800fc56:	4640      	mov	r0, r8
 800fc58:	4649      	mov	r1, r9
 800fc5a:	f7f1 f835 	bl	8000cc8 <__aeabi_d2lz>
 800fc5e:	f7f0 fca5 	bl	80005ac <__aeabi_l2d>
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	4640      	mov	r0, r8
 800fc68:	4649      	mov	r1, r9
 800fc6a:	f7f0 fb15 	bl	8000298 <__aeabi_dsub>
 800fc6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc74:	ea43 030a 	orr.w	r3, r3, sl
 800fc78:	4313      	orrs	r3, r2
 800fc7a:	4680      	mov	r8, r0
 800fc7c:	4689      	mov	r9, r1
 800fc7e:	d053      	beq.n	800fd28 <_strtod_l+0xba8>
 800fc80:	a335      	add	r3, pc, #212	; (adr r3, 800fd58 <_strtod_l+0xbd8>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	f7f0 ff31 	bl	8000aec <__aeabi_dcmplt>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	f47f acce 	bne.w	800f62c <_strtod_l+0x4ac>
 800fc90:	a333      	add	r3, pc, #204	; (adr r3, 800fd60 <_strtod_l+0xbe0>)
 800fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc96:	4640      	mov	r0, r8
 800fc98:	4649      	mov	r1, r9
 800fc9a:	f7f0 ff45 	bl	8000b28 <__aeabi_dcmpgt>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	f43f af7b 	beq.w	800fb9a <_strtod_l+0xa1a>
 800fca4:	e4c2      	b.n	800f62c <_strtod_l+0x4ac>
 800fca6:	9b04      	ldr	r3, [sp, #16]
 800fca8:	b333      	cbz	r3, 800fcf8 <_strtod_l+0xb78>
 800fcaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fcac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fcb0:	d822      	bhi.n	800fcf8 <_strtod_l+0xb78>
 800fcb2:	a32d      	add	r3, pc, #180	; (adr r3, 800fd68 <_strtod_l+0xbe8>)
 800fcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb8:	4640      	mov	r0, r8
 800fcba:	4649      	mov	r1, r9
 800fcbc:	f7f0 ff20 	bl	8000b00 <__aeabi_dcmple>
 800fcc0:	b1a0      	cbz	r0, 800fcec <_strtod_l+0xb6c>
 800fcc2:	4649      	mov	r1, r9
 800fcc4:	4640      	mov	r0, r8
 800fcc6:	f7f0 ff77 	bl	8000bb8 <__aeabi_d2uiz>
 800fcca:	2801      	cmp	r0, #1
 800fccc:	bf38      	it	cc
 800fcce:	2001      	movcc	r0, #1
 800fcd0:	f7f0 fc20 	bl	8000514 <__aeabi_ui2d>
 800fcd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcd6:	4680      	mov	r8, r0
 800fcd8:	4689      	mov	r9, r1
 800fcda:	bb13      	cbnz	r3, 800fd22 <_strtod_l+0xba2>
 800fcdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fce0:	9014      	str	r0, [sp, #80]	; 0x50
 800fce2:	9315      	str	r3, [sp, #84]	; 0x54
 800fce4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fce8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fcec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fcf0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fcf4:	1a9b      	subs	r3, r3, r2
 800fcf6:	930d      	str	r3, [sp, #52]	; 0x34
 800fcf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fcfc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fd00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fd04:	f001 fe8c 	bl	8011a20 <__ulp>
 800fd08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fd0c:	ec53 2b10 	vmov	r2, r3, d0
 800fd10:	f7f0 fc7a 	bl	8000608 <__aeabi_dmul>
 800fd14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fd18:	f7f0 fac0 	bl	800029c <__adddf3>
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	468b      	mov	fp, r1
 800fd20:	e78f      	b.n	800fc42 <_strtod_l+0xac2>
 800fd22:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800fd26:	e7dd      	b.n	800fce4 <_strtod_l+0xb64>
 800fd28:	a311      	add	r3, pc, #68	; (adr r3, 800fd70 <_strtod_l+0xbf0>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f7f0 fedd 	bl	8000aec <__aeabi_dcmplt>
 800fd32:	e7b4      	b.n	800fc9e <_strtod_l+0xb1e>
 800fd34:	2300      	movs	r3, #0
 800fd36:	930e      	str	r3, [sp, #56]	; 0x38
 800fd38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fd3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd3c:	6013      	str	r3, [r2, #0]
 800fd3e:	f7ff ba65 	b.w	800f20c <_strtod_l+0x8c>
 800fd42:	2b65      	cmp	r3, #101	; 0x65
 800fd44:	f43f ab5d 	beq.w	800f402 <_strtod_l+0x282>
 800fd48:	2b45      	cmp	r3, #69	; 0x45
 800fd4a:	f43f ab5a 	beq.w	800f402 <_strtod_l+0x282>
 800fd4e:	2201      	movs	r2, #1
 800fd50:	f7ff bb92 	b.w	800f478 <_strtod_l+0x2f8>
 800fd54:	f3af 8000 	nop.w
 800fd58:	94a03595 	.word	0x94a03595
 800fd5c:	3fdfffff 	.word	0x3fdfffff
 800fd60:	35afe535 	.word	0x35afe535
 800fd64:	3fe00000 	.word	0x3fe00000
 800fd68:	ffc00000 	.word	0xffc00000
 800fd6c:	41dfffff 	.word	0x41dfffff
 800fd70:	94a03595 	.word	0x94a03595
 800fd74:	3fcfffff 	.word	0x3fcfffff
 800fd78:	3ff00000 	.word	0x3ff00000
 800fd7c:	7ff00000 	.word	0x7ff00000
 800fd80:	7fe00000 	.word	0x7fe00000
 800fd84:	7c9fffff 	.word	0x7c9fffff
 800fd88:	3fe00000 	.word	0x3fe00000
 800fd8c:	bff00000 	.word	0xbff00000
 800fd90:	7fefffff 	.word	0x7fefffff

0800fd94 <strtod>:
 800fd94:	460a      	mov	r2, r1
 800fd96:	4601      	mov	r1, r0
 800fd98:	4802      	ldr	r0, [pc, #8]	; (800fda4 <strtod+0x10>)
 800fd9a:	4b03      	ldr	r3, [pc, #12]	; (800fda8 <strtod+0x14>)
 800fd9c:	6800      	ldr	r0, [r0, #0]
 800fd9e:	f7ff b9ef 	b.w	800f180 <_strtod_l>
 800fda2:	bf00      	nop
 800fda4:	20000028 	.word	0x20000028
 800fda8:	20000090 	.word	0x20000090

0800fdac <strtok>:
 800fdac:	4b16      	ldr	r3, [pc, #88]	; (800fe08 <strtok+0x5c>)
 800fdae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fdb0:	681e      	ldr	r6, [r3, #0]
 800fdb2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800fdb4:	4605      	mov	r5, r0
 800fdb6:	b9fc      	cbnz	r4, 800fdf8 <strtok+0x4c>
 800fdb8:	2050      	movs	r0, #80	; 0x50
 800fdba:	9101      	str	r1, [sp, #4]
 800fdbc:	f001 faaa 	bl	8011314 <malloc>
 800fdc0:	9901      	ldr	r1, [sp, #4]
 800fdc2:	65b0      	str	r0, [r6, #88]	; 0x58
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	b920      	cbnz	r0, 800fdd2 <strtok+0x26>
 800fdc8:	4b10      	ldr	r3, [pc, #64]	; (800fe0c <strtok+0x60>)
 800fdca:	4811      	ldr	r0, [pc, #68]	; (800fe10 <strtok+0x64>)
 800fdcc:	2157      	movs	r1, #87	; 0x57
 800fdce:	f000 f883 	bl	800fed8 <__assert_func>
 800fdd2:	e9c0 4400 	strd	r4, r4, [r0]
 800fdd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fdda:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fdde:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800fde2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800fde6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800fdea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800fdee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800fdf2:	6184      	str	r4, [r0, #24]
 800fdf4:	7704      	strb	r4, [r0, #28]
 800fdf6:	6244      	str	r4, [r0, #36]	; 0x24
 800fdf8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	b002      	add	sp, #8
 800fe00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe04:	f000 b806 	b.w	800fe14 <__strtok_r>
 800fe08:	20000028 	.word	0x20000028
 800fe0c:	08013350 	.word	0x08013350
 800fe10:	08013367 	.word	0x08013367

0800fe14 <__strtok_r>:
 800fe14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe16:	b908      	cbnz	r0, 800fe1c <__strtok_r+0x8>
 800fe18:	6810      	ldr	r0, [r2, #0]
 800fe1a:	b188      	cbz	r0, 800fe40 <__strtok_r+0x2c>
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fe24:	460f      	mov	r7, r1
 800fe26:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fe2a:	b91e      	cbnz	r6, 800fe34 <__strtok_r+0x20>
 800fe2c:	b965      	cbnz	r5, 800fe48 <__strtok_r+0x34>
 800fe2e:	6015      	str	r5, [r2, #0]
 800fe30:	4628      	mov	r0, r5
 800fe32:	e005      	b.n	800fe40 <__strtok_r+0x2c>
 800fe34:	42b5      	cmp	r5, r6
 800fe36:	d1f6      	bne.n	800fe26 <__strtok_r+0x12>
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1f0      	bne.n	800fe1e <__strtok_r+0xa>
 800fe3c:	6014      	str	r4, [r2, #0]
 800fe3e:	7003      	strb	r3, [r0, #0]
 800fe40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe42:	461c      	mov	r4, r3
 800fe44:	e00c      	b.n	800fe60 <__strtok_r+0x4c>
 800fe46:	b915      	cbnz	r5, 800fe4e <__strtok_r+0x3a>
 800fe48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe4c:	460e      	mov	r6, r1
 800fe4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fe52:	42ab      	cmp	r3, r5
 800fe54:	d1f7      	bne.n	800fe46 <__strtok_r+0x32>
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d0f3      	beq.n	800fe42 <__strtok_r+0x2e>
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fe60:	6014      	str	r4, [r2, #0]
 800fe62:	e7ed      	b.n	800fe40 <__strtok_r+0x2c>

0800fe64 <_vsniprintf_r>:
 800fe64:	b530      	push	{r4, r5, lr}
 800fe66:	1e14      	subs	r4, r2, #0
 800fe68:	4605      	mov	r5, r0
 800fe6a:	b09b      	sub	sp, #108	; 0x6c
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	da05      	bge.n	800fe7c <_vsniprintf_r+0x18>
 800fe70:	238b      	movs	r3, #139	; 0x8b
 800fe72:	602b      	str	r3, [r5, #0]
 800fe74:	f04f 30ff 	mov.w	r0, #4294967295
 800fe78:	b01b      	add	sp, #108	; 0x6c
 800fe7a:	bd30      	pop	{r4, r5, pc}
 800fe7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fe80:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fe84:	bf14      	ite	ne
 800fe86:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fe8a:	4623      	moveq	r3, r4
 800fe8c:	9302      	str	r3, [sp, #8]
 800fe8e:	9305      	str	r3, [sp, #20]
 800fe90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe94:	9100      	str	r1, [sp, #0]
 800fe96:	9104      	str	r1, [sp, #16]
 800fe98:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fea0:	4669      	mov	r1, sp
 800fea2:	4628      	mov	r0, r5
 800fea4:	f002 f820 	bl	8011ee8 <_svfiprintf_r>
 800fea8:	1c43      	adds	r3, r0, #1
 800feaa:	bfbc      	itt	lt
 800feac:	238b      	movlt	r3, #139	; 0x8b
 800feae:	602b      	strlt	r3, [r5, #0]
 800feb0:	2c00      	cmp	r4, #0
 800feb2:	d0e1      	beq.n	800fe78 <_vsniprintf_r+0x14>
 800feb4:	9b00      	ldr	r3, [sp, #0]
 800feb6:	2200      	movs	r2, #0
 800feb8:	701a      	strb	r2, [r3, #0]
 800feba:	e7dd      	b.n	800fe78 <_vsniprintf_r+0x14>

0800febc <vsniprintf>:
 800febc:	b507      	push	{r0, r1, r2, lr}
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	4613      	mov	r3, r2
 800fec2:	460a      	mov	r2, r1
 800fec4:	4601      	mov	r1, r0
 800fec6:	4803      	ldr	r0, [pc, #12]	; (800fed4 <vsniprintf+0x18>)
 800fec8:	6800      	ldr	r0, [r0, #0]
 800feca:	f7ff ffcb 	bl	800fe64 <_vsniprintf_r>
 800fece:	b003      	add	sp, #12
 800fed0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fed4:	20000028 	.word	0x20000028

0800fed8 <__assert_func>:
 800fed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800feda:	4614      	mov	r4, r2
 800fedc:	461a      	mov	r2, r3
 800fede:	4b09      	ldr	r3, [pc, #36]	; (800ff04 <__assert_func+0x2c>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	4605      	mov	r5, r0
 800fee4:	68d8      	ldr	r0, [r3, #12]
 800fee6:	b14c      	cbz	r4, 800fefc <__assert_func+0x24>
 800fee8:	4b07      	ldr	r3, [pc, #28]	; (800ff08 <__assert_func+0x30>)
 800feea:	9100      	str	r1, [sp, #0]
 800feec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fef0:	4906      	ldr	r1, [pc, #24]	; (800ff0c <__assert_func+0x34>)
 800fef2:	462b      	mov	r3, r5
 800fef4:	f000 fe88 	bl	8010c08 <fiprintf>
 800fef8:	f002 fb4a 	bl	8012590 <abort>
 800fefc:	4b04      	ldr	r3, [pc, #16]	; (800ff10 <__assert_func+0x38>)
 800fefe:	461c      	mov	r4, r3
 800ff00:	e7f3      	b.n	800feea <__assert_func+0x12>
 800ff02:	bf00      	nop
 800ff04:	20000028 	.word	0x20000028
 800ff08:	080133c8 	.word	0x080133c8
 800ff0c:	080133d5 	.word	0x080133d5
 800ff10:	08013403 	.word	0x08013403

0800ff14 <quorem>:
 800ff14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff18:	6903      	ldr	r3, [r0, #16]
 800ff1a:	690c      	ldr	r4, [r1, #16]
 800ff1c:	42a3      	cmp	r3, r4
 800ff1e:	4607      	mov	r7, r0
 800ff20:	f2c0 8081 	blt.w	8010026 <quorem+0x112>
 800ff24:	3c01      	subs	r4, #1
 800ff26:	f101 0814 	add.w	r8, r1, #20
 800ff2a:	f100 0514 	add.w	r5, r0, #20
 800ff2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff32:	9301      	str	r3, [sp, #4]
 800ff34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ff38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ff44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ff48:	fbb2 f6f3 	udiv	r6, r2, r3
 800ff4c:	d331      	bcc.n	800ffb2 <quorem+0x9e>
 800ff4e:	f04f 0e00 	mov.w	lr, #0
 800ff52:	4640      	mov	r0, r8
 800ff54:	46ac      	mov	ip, r5
 800ff56:	46f2      	mov	sl, lr
 800ff58:	f850 2b04 	ldr.w	r2, [r0], #4
 800ff5c:	b293      	uxth	r3, r2
 800ff5e:	fb06 e303 	mla	r3, r6, r3, lr
 800ff62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	ebaa 0303 	sub.w	r3, sl, r3
 800ff6c:	0c12      	lsrs	r2, r2, #16
 800ff6e:	f8dc a000 	ldr.w	sl, [ip]
 800ff72:	fb06 e202 	mla	r2, r6, r2, lr
 800ff76:	fa13 f38a 	uxtah	r3, r3, sl
 800ff7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ff7e:	fa1f fa82 	uxth.w	sl, r2
 800ff82:	f8dc 2000 	ldr.w	r2, [ip]
 800ff86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ff8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff94:	4581      	cmp	r9, r0
 800ff96:	f84c 3b04 	str.w	r3, [ip], #4
 800ff9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ff9e:	d2db      	bcs.n	800ff58 <quorem+0x44>
 800ffa0:	f855 300b 	ldr.w	r3, [r5, fp]
 800ffa4:	b92b      	cbnz	r3, 800ffb2 <quorem+0x9e>
 800ffa6:	9b01      	ldr	r3, [sp, #4]
 800ffa8:	3b04      	subs	r3, #4
 800ffaa:	429d      	cmp	r5, r3
 800ffac:	461a      	mov	r2, r3
 800ffae:	d32e      	bcc.n	801000e <quorem+0xfa>
 800ffb0:	613c      	str	r4, [r7, #16]
 800ffb2:	4638      	mov	r0, r7
 800ffb4:	f001 fc90 	bl	80118d8 <__mcmp>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	db24      	blt.n	8010006 <quorem+0xf2>
 800ffbc:	3601      	adds	r6, #1
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	f04f 0c00 	mov.w	ip, #0
 800ffc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ffc8:	f8d0 e000 	ldr.w	lr, [r0]
 800ffcc:	b293      	uxth	r3, r2
 800ffce:	ebac 0303 	sub.w	r3, ip, r3
 800ffd2:	0c12      	lsrs	r2, r2, #16
 800ffd4:	fa13 f38e 	uxtah	r3, r3, lr
 800ffd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ffdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffe6:	45c1      	cmp	r9, r8
 800ffe8:	f840 3b04 	str.w	r3, [r0], #4
 800ffec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fff0:	d2e8      	bcs.n	800ffc4 <quorem+0xb0>
 800fff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fffa:	b922      	cbnz	r2, 8010006 <quorem+0xf2>
 800fffc:	3b04      	subs	r3, #4
 800fffe:	429d      	cmp	r5, r3
 8010000:	461a      	mov	r2, r3
 8010002:	d30a      	bcc.n	801001a <quorem+0x106>
 8010004:	613c      	str	r4, [r7, #16]
 8010006:	4630      	mov	r0, r6
 8010008:	b003      	add	sp, #12
 801000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000e:	6812      	ldr	r2, [r2, #0]
 8010010:	3b04      	subs	r3, #4
 8010012:	2a00      	cmp	r2, #0
 8010014:	d1cc      	bne.n	800ffb0 <quorem+0x9c>
 8010016:	3c01      	subs	r4, #1
 8010018:	e7c7      	b.n	800ffaa <quorem+0x96>
 801001a:	6812      	ldr	r2, [r2, #0]
 801001c:	3b04      	subs	r3, #4
 801001e:	2a00      	cmp	r2, #0
 8010020:	d1f0      	bne.n	8010004 <quorem+0xf0>
 8010022:	3c01      	subs	r4, #1
 8010024:	e7eb      	b.n	800fffe <quorem+0xea>
 8010026:	2000      	movs	r0, #0
 8010028:	e7ee      	b.n	8010008 <quorem+0xf4>
 801002a:	0000      	movs	r0, r0
 801002c:	0000      	movs	r0, r0
	...

08010030 <_dtoa_r>:
 8010030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010034:	ed2d 8b02 	vpush	{d8}
 8010038:	ec57 6b10 	vmov	r6, r7, d0
 801003c:	b095      	sub	sp, #84	; 0x54
 801003e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010044:	9105      	str	r1, [sp, #20]
 8010046:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801004a:	4604      	mov	r4, r0
 801004c:	9209      	str	r2, [sp, #36]	; 0x24
 801004e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010050:	b975      	cbnz	r5, 8010070 <_dtoa_r+0x40>
 8010052:	2010      	movs	r0, #16
 8010054:	f001 f95e 	bl	8011314 <malloc>
 8010058:	4602      	mov	r2, r0
 801005a:	6260      	str	r0, [r4, #36]	; 0x24
 801005c:	b920      	cbnz	r0, 8010068 <_dtoa_r+0x38>
 801005e:	4bb2      	ldr	r3, [pc, #712]	; (8010328 <_dtoa_r+0x2f8>)
 8010060:	21ea      	movs	r1, #234	; 0xea
 8010062:	48b2      	ldr	r0, [pc, #712]	; (801032c <_dtoa_r+0x2fc>)
 8010064:	f7ff ff38 	bl	800fed8 <__assert_func>
 8010068:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801006c:	6005      	str	r5, [r0, #0]
 801006e:	60c5      	str	r5, [r0, #12]
 8010070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010072:	6819      	ldr	r1, [r3, #0]
 8010074:	b151      	cbz	r1, 801008c <_dtoa_r+0x5c>
 8010076:	685a      	ldr	r2, [r3, #4]
 8010078:	604a      	str	r2, [r1, #4]
 801007a:	2301      	movs	r3, #1
 801007c:	4093      	lsls	r3, r2
 801007e:	608b      	str	r3, [r1, #8]
 8010080:	4620      	mov	r0, r4
 8010082:	f001 f9a1 	bl	80113c8 <_Bfree>
 8010086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]
 801008c:	1e3b      	subs	r3, r7, #0
 801008e:	bfb9      	ittee	lt
 8010090:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010094:	9303      	strlt	r3, [sp, #12]
 8010096:	2300      	movge	r3, #0
 8010098:	f8c8 3000 	strge.w	r3, [r8]
 801009c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80100a0:	4ba3      	ldr	r3, [pc, #652]	; (8010330 <_dtoa_r+0x300>)
 80100a2:	bfbc      	itt	lt
 80100a4:	2201      	movlt	r2, #1
 80100a6:	f8c8 2000 	strlt.w	r2, [r8]
 80100aa:	ea33 0309 	bics.w	r3, r3, r9
 80100ae:	d11b      	bne.n	80100e8 <_dtoa_r+0xb8>
 80100b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80100b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80100b6:	6013      	str	r3, [r2, #0]
 80100b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80100bc:	4333      	orrs	r3, r6
 80100be:	f000 857a 	beq.w	8010bb6 <_dtoa_r+0xb86>
 80100c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100c4:	b963      	cbnz	r3, 80100e0 <_dtoa_r+0xb0>
 80100c6:	4b9b      	ldr	r3, [pc, #620]	; (8010334 <_dtoa_r+0x304>)
 80100c8:	e024      	b.n	8010114 <_dtoa_r+0xe4>
 80100ca:	4b9b      	ldr	r3, [pc, #620]	; (8010338 <_dtoa_r+0x308>)
 80100cc:	9300      	str	r3, [sp, #0]
 80100ce:	3308      	adds	r3, #8
 80100d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80100d2:	6013      	str	r3, [r2, #0]
 80100d4:	9800      	ldr	r0, [sp, #0]
 80100d6:	b015      	add	sp, #84	; 0x54
 80100d8:	ecbd 8b02 	vpop	{d8}
 80100dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e0:	4b94      	ldr	r3, [pc, #592]	; (8010334 <_dtoa_r+0x304>)
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	3303      	adds	r3, #3
 80100e6:	e7f3      	b.n	80100d0 <_dtoa_r+0xa0>
 80100e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100ec:	2200      	movs	r2, #0
 80100ee:	ec51 0b17 	vmov	r0, r1, d7
 80100f2:	2300      	movs	r3, #0
 80100f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80100f8:	f7f0 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 80100fc:	4680      	mov	r8, r0
 80100fe:	b158      	cbz	r0, 8010118 <_dtoa_r+0xe8>
 8010100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010102:	2301      	movs	r3, #1
 8010104:	6013      	str	r3, [r2, #0]
 8010106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010108:	2b00      	cmp	r3, #0
 801010a:	f000 8551 	beq.w	8010bb0 <_dtoa_r+0xb80>
 801010e:	488b      	ldr	r0, [pc, #556]	; (801033c <_dtoa_r+0x30c>)
 8010110:	6018      	str	r0, [r3, #0]
 8010112:	1e43      	subs	r3, r0, #1
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	e7dd      	b.n	80100d4 <_dtoa_r+0xa4>
 8010118:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801011c:	aa12      	add	r2, sp, #72	; 0x48
 801011e:	a913      	add	r1, sp, #76	; 0x4c
 8010120:	4620      	mov	r0, r4
 8010122:	f001 fcf9 	bl	8011b18 <__d2b>
 8010126:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801012a:	4683      	mov	fp, r0
 801012c:	2d00      	cmp	r5, #0
 801012e:	d07c      	beq.n	801022a <_dtoa_r+0x1fa>
 8010130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010132:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801013a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801013e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010142:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801014a:	4b7d      	ldr	r3, [pc, #500]	; (8010340 <_dtoa_r+0x310>)
 801014c:	2200      	movs	r2, #0
 801014e:	4630      	mov	r0, r6
 8010150:	4639      	mov	r1, r7
 8010152:	f7f0 f8a1 	bl	8000298 <__aeabi_dsub>
 8010156:	a36e      	add	r3, pc, #440	; (adr r3, 8010310 <_dtoa_r+0x2e0>)
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	f7f0 fa54 	bl	8000608 <__aeabi_dmul>
 8010160:	a36d      	add	r3, pc, #436	; (adr r3, 8010318 <_dtoa_r+0x2e8>)
 8010162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010166:	f7f0 f899 	bl	800029c <__adddf3>
 801016a:	4606      	mov	r6, r0
 801016c:	4628      	mov	r0, r5
 801016e:	460f      	mov	r7, r1
 8010170:	f7f0 f9e0 	bl	8000534 <__aeabi_i2d>
 8010174:	a36a      	add	r3, pc, #424	; (adr r3, 8010320 <_dtoa_r+0x2f0>)
 8010176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017a:	f7f0 fa45 	bl	8000608 <__aeabi_dmul>
 801017e:	4602      	mov	r2, r0
 8010180:	460b      	mov	r3, r1
 8010182:	4630      	mov	r0, r6
 8010184:	4639      	mov	r1, r7
 8010186:	f7f0 f889 	bl	800029c <__adddf3>
 801018a:	4606      	mov	r6, r0
 801018c:	460f      	mov	r7, r1
 801018e:	f7f0 fceb 	bl	8000b68 <__aeabi_d2iz>
 8010192:	2200      	movs	r2, #0
 8010194:	4682      	mov	sl, r0
 8010196:	2300      	movs	r3, #0
 8010198:	4630      	mov	r0, r6
 801019a:	4639      	mov	r1, r7
 801019c:	f7f0 fca6 	bl	8000aec <__aeabi_dcmplt>
 80101a0:	b148      	cbz	r0, 80101b6 <_dtoa_r+0x186>
 80101a2:	4650      	mov	r0, sl
 80101a4:	f7f0 f9c6 	bl	8000534 <__aeabi_i2d>
 80101a8:	4632      	mov	r2, r6
 80101aa:	463b      	mov	r3, r7
 80101ac:	f7f0 fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 80101b0:	b908      	cbnz	r0, 80101b6 <_dtoa_r+0x186>
 80101b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101b6:	f1ba 0f16 	cmp.w	sl, #22
 80101ba:	d854      	bhi.n	8010266 <_dtoa_r+0x236>
 80101bc:	4b61      	ldr	r3, [pc, #388]	; (8010344 <_dtoa_r+0x314>)
 80101be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80101c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80101ca:	f7f0 fc8f 	bl	8000aec <__aeabi_dcmplt>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	d04b      	beq.n	801026a <_dtoa_r+0x23a>
 80101d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101d6:	2300      	movs	r3, #0
 80101d8:	930e      	str	r3, [sp, #56]	; 0x38
 80101da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101dc:	1b5d      	subs	r5, r3, r5
 80101de:	1e6b      	subs	r3, r5, #1
 80101e0:	9304      	str	r3, [sp, #16]
 80101e2:	bf43      	ittte	mi
 80101e4:	2300      	movmi	r3, #0
 80101e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80101ea:	9304      	strmi	r3, [sp, #16]
 80101ec:	f04f 0800 	movpl.w	r8, #0
 80101f0:	f1ba 0f00 	cmp.w	sl, #0
 80101f4:	db3b      	blt.n	801026e <_dtoa_r+0x23e>
 80101f6:	9b04      	ldr	r3, [sp, #16]
 80101f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80101fc:	4453      	add	r3, sl
 80101fe:	9304      	str	r3, [sp, #16]
 8010200:	2300      	movs	r3, #0
 8010202:	9306      	str	r3, [sp, #24]
 8010204:	9b05      	ldr	r3, [sp, #20]
 8010206:	2b09      	cmp	r3, #9
 8010208:	d869      	bhi.n	80102de <_dtoa_r+0x2ae>
 801020a:	2b05      	cmp	r3, #5
 801020c:	bfc4      	itt	gt
 801020e:	3b04      	subgt	r3, #4
 8010210:	9305      	strgt	r3, [sp, #20]
 8010212:	9b05      	ldr	r3, [sp, #20]
 8010214:	f1a3 0302 	sub.w	r3, r3, #2
 8010218:	bfcc      	ite	gt
 801021a:	2500      	movgt	r5, #0
 801021c:	2501      	movle	r5, #1
 801021e:	2b03      	cmp	r3, #3
 8010220:	d869      	bhi.n	80102f6 <_dtoa_r+0x2c6>
 8010222:	e8df f003 	tbb	[pc, r3]
 8010226:	4e2c      	.short	0x4e2c
 8010228:	5a4c      	.short	0x5a4c
 801022a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801022e:	441d      	add	r5, r3
 8010230:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010234:	2b20      	cmp	r3, #32
 8010236:	bfc1      	itttt	gt
 8010238:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801023c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010240:	fa09 f303 	lslgt.w	r3, r9, r3
 8010244:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010248:	bfda      	itte	le
 801024a:	f1c3 0320 	rsble	r3, r3, #32
 801024e:	fa06 f003 	lslle.w	r0, r6, r3
 8010252:	4318      	orrgt	r0, r3
 8010254:	f7f0 f95e 	bl	8000514 <__aeabi_ui2d>
 8010258:	2301      	movs	r3, #1
 801025a:	4606      	mov	r6, r0
 801025c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010260:	3d01      	subs	r5, #1
 8010262:	9310      	str	r3, [sp, #64]	; 0x40
 8010264:	e771      	b.n	801014a <_dtoa_r+0x11a>
 8010266:	2301      	movs	r3, #1
 8010268:	e7b6      	b.n	80101d8 <_dtoa_r+0x1a8>
 801026a:	900e      	str	r0, [sp, #56]	; 0x38
 801026c:	e7b5      	b.n	80101da <_dtoa_r+0x1aa>
 801026e:	f1ca 0300 	rsb	r3, sl, #0
 8010272:	9306      	str	r3, [sp, #24]
 8010274:	2300      	movs	r3, #0
 8010276:	eba8 080a 	sub.w	r8, r8, sl
 801027a:	930d      	str	r3, [sp, #52]	; 0x34
 801027c:	e7c2      	b.n	8010204 <_dtoa_r+0x1d4>
 801027e:	2300      	movs	r3, #0
 8010280:	9308      	str	r3, [sp, #32]
 8010282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010284:	2b00      	cmp	r3, #0
 8010286:	dc39      	bgt.n	80102fc <_dtoa_r+0x2cc>
 8010288:	f04f 0901 	mov.w	r9, #1
 801028c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010290:	464b      	mov	r3, r9
 8010292:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010296:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010298:	2200      	movs	r2, #0
 801029a:	6042      	str	r2, [r0, #4]
 801029c:	2204      	movs	r2, #4
 801029e:	f102 0614 	add.w	r6, r2, #20
 80102a2:	429e      	cmp	r6, r3
 80102a4:	6841      	ldr	r1, [r0, #4]
 80102a6:	d92f      	bls.n	8010308 <_dtoa_r+0x2d8>
 80102a8:	4620      	mov	r0, r4
 80102aa:	f001 f84d 	bl	8011348 <_Balloc>
 80102ae:	9000      	str	r0, [sp, #0]
 80102b0:	2800      	cmp	r0, #0
 80102b2:	d14b      	bne.n	801034c <_dtoa_r+0x31c>
 80102b4:	4b24      	ldr	r3, [pc, #144]	; (8010348 <_dtoa_r+0x318>)
 80102b6:	4602      	mov	r2, r0
 80102b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80102bc:	e6d1      	b.n	8010062 <_dtoa_r+0x32>
 80102be:	2301      	movs	r3, #1
 80102c0:	e7de      	b.n	8010280 <_dtoa_r+0x250>
 80102c2:	2300      	movs	r3, #0
 80102c4:	9308      	str	r3, [sp, #32]
 80102c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c8:	eb0a 0903 	add.w	r9, sl, r3
 80102cc:	f109 0301 	add.w	r3, r9, #1
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	9301      	str	r3, [sp, #4]
 80102d4:	bfb8      	it	lt
 80102d6:	2301      	movlt	r3, #1
 80102d8:	e7dd      	b.n	8010296 <_dtoa_r+0x266>
 80102da:	2301      	movs	r3, #1
 80102dc:	e7f2      	b.n	80102c4 <_dtoa_r+0x294>
 80102de:	2501      	movs	r5, #1
 80102e0:	2300      	movs	r3, #0
 80102e2:	9305      	str	r3, [sp, #20]
 80102e4:	9508      	str	r5, [sp, #32]
 80102e6:	f04f 39ff 	mov.w	r9, #4294967295
 80102ea:	2200      	movs	r2, #0
 80102ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80102f0:	2312      	movs	r3, #18
 80102f2:	9209      	str	r2, [sp, #36]	; 0x24
 80102f4:	e7cf      	b.n	8010296 <_dtoa_r+0x266>
 80102f6:	2301      	movs	r3, #1
 80102f8:	9308      	str	r3, [sp, #32]
 80102fa:	e7f4      	b.n	80102e6 <_dtoa_r+0x2b6>
 80102fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010300:	f8cd 9004 	str.w	r9, [sp, #4]
 8010304:	464b      	mov	r3, r9
 8010306:	e7c6      	b.n	8010296 <_dtoa_r+0x266>
 8010308:	3101      	adds	r1, #1
 801030a:	6041      	str	r1, [r0, #4]
 801030c:	0052      	lsls	r2, r2, #1
 801030e:	e7c6      	b.n	801029e <_dtoa_r+0x26e>
 8010310:	636f4361 	.word	0x636f4361
 8010314:	3fd287a7 	.word	0x3fd287a7
 8010318:	8b60c8b3 	.word	0x8b60c8b3
 801031c:	3fc68a28 	.word	0x3fc68a28
 8010320:	509f79fb 	.word	0x509f79fb
 8010324:	3fd34413 	.word	0x3fd34413
 8010328:	08013350 	.word	0x08013350
 801032c:	08013411 	.word	0x08013411
 8010330:	7ff00000 	.word	0x7ff00000
 8010334:	0801340d 	.word	0x0801340d
 8010338:	08013404 	.word	0x08013404
 801033c:	080132dd 	.word	0x080132dd
 8010340:	3ff80000 	.word	0x3ff80000
 8010344:	08013588 	.word	0x08013588
 8010348:	08013470 	.word	0x08013470
 801034c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801034e:	9a00      	ldr	r2, [sp, #0]
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	9b01      	ldr	r3, [sp, #4]
 8010354:	2b0e      	cmp	r3, #14
 8010356:	f200 80ad 	bhi.w	80104b4 <_dtoa_r+0x484>
 801035a:	2d00      	cmp	r5, #0
 801035c:	f000 80aa 	beq.w	80104b4 <_dtoa_r+0x484>
 8010360:	f1ba 0f00 	cmp.w	sl, #0
 8010364:	dd36      	ble.n	80103d4 <_dtoa_r+0x3a4>
 8010366:	4ac3      	ldr	r2, [pc, #780]	; (8010674 <_dtoa_r+0x644>)
 8010368:	f00a 030f 	and.w	r3, sl, #15
 801036c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010370:	ed93 7b00 	vldr	d7, [r3]
 8010374:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010378:	ea4f 172a 	mov.w	r7, sl, asr #4
 801037c:	eeb0 8a47 	vmov.f32	s16, s14
 8010380:	eef0 8a67 	vmov.f32	s17, s15
 8010384:	d016      	beq.n	80103b4 <_dtoa_r+0x384>
 8010386:	4bbc      	ldr	r3, [pc, #752]	; (8010678 <_dtoa_r+0x648>)
 8010388:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801038c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010390:	f7f0 fa64 	bl	800085c <__aeabi_ddiv>
 8010394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010398:	f007 070f 	and.w	r7, r7, #15
 801039c:	2503      	movs	r5, #3
 801039e:	4eb6      	ldr	r6, [pc, #728]	; (8010678 <_dtoa_r+0x648>)
 80103a0:	b957      	cbnz	r7, 80103b8 <_dtoa_r+0x388>
 80103a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103a6:	ec53 2b18 	vmov	r2, r3, d8
 80103aa:	f7f0 fa57 	bl	800085c <__aeabi_ddiv>
 80103ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103b2:	e029      	b.n	8010408 <_dtoa_r+0x3d8>
 80103b4:	2502      	movs	r5, #2
 80103b6:	e7f2      	b.n	801039e <_dtoa_r+0x36e>
 80103b8:	07f9      	lsls	r1, r7, #31
 80103ba:	d508      	bpl.n	80103ce <_dtoa_r+0x39e>
 80103bc:	ec51 0b18 	vmov	r0, r1, d8
 80103c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80103c4:	f7f0 f920 	bl	8000608 <__aeabi_dmul>
 80103c8:	ec41 0b18 	vmov	d8, r0, r1
 80103cc:	3501      	adds	r5, #1
 80103ce:	107f      	asrs	r7, r7, #1
 80103d0:	3608      	adds	r6, #8
 80103d2:	e7e5      	b.n	80103a0 <_dtoa_r+0x370>
 80103d4:	f000 80a6 	beq.w	8010524 <_dtoa_r+0x4f4>
 80103d8:	f1ca 0600 	rsb	r6, sl, #0
 80103dc:	4ba5      	ldr	r3, [pc, #660]	; (8010674 <_dtoa_r+0x644>)
 80103de:	4fa6      	ldr	r7, [pc, #664]	; (8010678 <_dtoa_r+0x648>)
 80103e0:	f006 020f 	and.w	r2, r6, #15
 80103e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80103f0:	f7f0 f90a 	bl	8000608 <__aeabi_dmul>
 80103f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103f8:	1136      	asrs	r6, r6, #4
 80103fa:	2300      	movs	r3, #0
 80103fc:	2502      	movs	r5, #2
 80103fe:	2e00      	cmp	r6, #0
 8010400:	f040 8085 	bne.w	801050e <_dtoa_r+0x4de>
 8010404:	2b00      	cmp	r3, #0
 8010406:	d1d2      	bne.n	80103ae <_dtoa_r+0x37e>
 8010408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801040a:	2b00      	cmp	r3, #0
 801040c:	f000 808c 	beq.w	8010528 <_dtoa_r+0x4f8>
 8010410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010414:	4b99      	ldr	r3, [pc, #612]	; (801067c <_dtoa_r+0x64c>)
 8010416:	2200      	movs	r2, #0
 8010418:	4630      	mov	r0, r6
 801041a:	4639      	mov	r1, r7
 801041c:	f7f0 fb66 	bl	8000aec <__aeabi_dcmplt>
 8010420:	2800      	cmp	r0, #0
 8010422:	f000 8081 	beq.w	8010528 <_dtoa_r+0x4f8>
 8010426:	9b01      	ldr	r3, [sp, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d07d      	beq.n	8010528 <_dtoa_r+0x4f8>
 801042c:	f1b9 0f00 	cmp.w	r9, #0
 8010430:	dd3c      	ble.n	80104ac <_dtoa_r+0x47c>
 8010432:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010436:	9307      	str	r3, [sp, #28]
 8010438:	2200      	movs	r2, #0
 801043a:	4b91      	ldr	r3, [pc, #580]	; (8010680 <_dtoa_r+0x650>)
 801043c:	4630      	mov	r0, r6
 801043e:	4639      	mov	r1, r7
 8010440:	f7f0 f8e2 	bl	8000608 <__aeabi_dmul>
 8010444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010448:	3501      	adds	r5, #1
 801044a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801044e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010452:	4628      	mov	r0, r5
 8010454:	f7f0 f86e 	bl	8000534 <__aeabi_i2d>
 8010458:	4632      	mov	r2, r6
 801045a:	463b      	mov	r3, r7
 801045c:	f7f0 f8d4 	bl	8000608 <__aeabi_dmul>
 8010460:	4b88      	ldr	r3, [pc, #544]	; (8010684 <_dtoa_r+0x654>)
 8010462:	2200      	movs	r2, #0
 8010464:	f7ef ff1a 	bl	800029c <__adddf3>
 8010468:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801046c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010470:	9303      	str	r3, [sp, #12]
 8010472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010474:	2b00      	cmp	r3, #0
 8010476:	d15c      	bne.n	8010532 <_dtoa_r+0x502>
 8010478:	4b83      	ldr	r3, [pc, #524]	; (8010688 <_dtoa_r+0x658>)
 801047a:	2200      	movs	r2, #0
 801047c:	4630      	mov	r0, r6
 801047e:	4639      	mov	r1, r7
 8010480:	f7ef ff0a 	bl	8000298 <__aeabi_dsub>
 8010484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010488:	4606      	mov	r6, r0
 801048a:	460f      	mov	r7, r1
 801048c:	f7f0 fb4c 	bl	8000b28 <__aeabi_dcmpgt>
 8010490:	2800      	cmp	r0, #0
 8010492:	f040 8296 	bne.w	80109c2 <_dtoa_r+0x992>
 8010496:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801049a:	4630      	mov	r0, r6
 801049c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104a0:	4639      	mov	r1, r7
 80104a2:	f7f0 fb23 	bl	8000aec <__aeabi_dcmplt>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	f040 8288 	bne.w	80109bc <_dtoa_r+0x98c>
 80104ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80104b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f2c0 8158 	blt.w	801076c <_dtoa_r+0x73c>
 80104bc:	f1ba 0f0e 	cmp.w	sl, #14
 80104c0:	f300 8154 	bgt.w	801076c <_dtoa_r+0x73c>
 80104c4:	4b6b      	ldr	r3, [pc, #428]	; (8010674 <_dtoa_r+0x644>)
 80104c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80104ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80104ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	f280 80e3 	bge.w	801069c <_dtoa_r+0x66c>
 80104d6:	9b01      	ldr	r3, [sp, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	f300 80df 	bgt.w	801069c <_dtoa_r+0x66c>
 80104de:	f040 826d 	bne.w	80109bc <_dtoa_r+0x98c>
 80104e2:	4b69      	ldr	r3, [pc, #420]	; (8010688 <_dtoa_r+0x658>)
 80104e4:	2200      	movs	r2, #0
 80104e6:	4640      	mov	r0, r8
 80104e8:	4649      	mov	r1, r9
 80104ea:	f7f0 f88d 	bl	8000608 <__aeabi_dmul>
 80104ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104f2:	f7f0 fb0f 	bl	8000b14 <__aeabi_dcmpge>
 80104f6:	9e01      	ldr	r6, [sp, #4]
 80104f8:	4637      	mov	r7, r6
 80104fa:	2800      	cmp	r0, #0
 80104fc:	f040 8243 	bne.w	8010986 <_dtoa_r+0x956>
 8010500:	9d00      	ldr	r5, [sp, #0]
 8010502:	2331      	movs	r3, #49	; 0x31
 8010504:	f805 3b01 	strb.w	r3, [r5], #1
 8010508:	f10a 0a01 	add.w	sl, sl, #1
 801050c:	e23f      	b.n	801098e <_dtoa_r+0x95e>
 801050e:	07f2      	lsls	r2, r6, #31
 8010510:	d505      	bpl.n	801051e <_dtoa_r+0x4ee>
 8010512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010516:	f7f0 f877 	bl	8000608 <__aeabi_dmul>
 801051a:	3501      	adds	r5, #1
 801051c:	2301      	movs	r3, #1
 801051e:	1076      	asrs	r6, r6, #1
 8010520:	3708      	adds	r7, #8
 8010522:	e76c      	b.n	80103fe <_dtoa_r+0x3ce>
 8010524:	2502      	movs	r5, #2
 8010526:	e76f      	b.n	8010408 <_dtoa_r+0x3d8>
 8010528:	9b01      	ldr	r3, [sp, #4]
 801052a:	f8cd a01c 	str.w	sl, [sp, #28]
 801052e:	930c      	str	r3, [sp, #48]	; 0x30
 8010530:	e78d      	b.n	801044e <_dtoa_r+0x41e>
 8010532:	9900      	ldr	r1, [sp, #0]
 8010534:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010538:	4b4e      	ldr	r3, [pc, #312]	; (8010674 <_dtoa_r+0x644>)
 801053a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801053e:	4401      	add	r1, r0
 8010540:	9102      	str	r1, [sp, #8]
 8010542:	9908      	ldr	r1, [sp, #32]
 8010544:	eeb0 8a47 	vmov.f32	s16, s14
 8010548:	eef0 8a67 	vmov.f32	s17, s15
 801054c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010550:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010554:	2900      	cmp	r1, #0
 8010556:	d045      	beq.n	80105e4 <_dtoa_r+0x5b4>
 8010558:	494c      	ldr	r1, [pc, #304]	; (801068c <_dtoa_r+0x65c>)
 801055a:	2000      	movs	r0, #0
 801055c:	f7f0 f97e 	bl	800085c <__aeabi_ddiv>
 8010560:	ec53 2b18 	vmov	r2, r3, d8
 8010564:	f7ef fe98 	bl	8000298 <__aeabi_dsub>
 8010568:	9d00      	ldr	r5, [sp, #0]
 801056a:	ec41 0b18 	vmov	d8, r0, r1
 801056e:	4639      	mov	r1, r7
 8010570:	4630      	mov	r0, r6
 8010572:	f7f0 faf9 	bl	8000b68 <__aeabi_d2iz>
 8010576:	900c      	str	r0, [sp, #48]	; 0x30
 8010578:	f7ef ffdc 	bl	8000534 <__aeabi_i2d>
 801057c:	4602      	mov	r2, r0
 801057e:	460b      	mov	r3, r1
 8010580:	4630      	mov	r0, r6
 8010582:	4639      	mov	r1, r7
 8010584:	f7ef fe88 	bl	8000298 <__aeabi_dsub>
 8010588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801058a:	3330      	adds	r3, #48	; 0x30
 801058c:	f805 3b01 	strb.w	r3, [r5], #1
 8010590:	ec53 2b18 	vmov	r2, r3, d8
 8010594:	4606      	mov	r6, r0
 8010596:	460f      	mov	r7, r1
 8010598:	f7f0 faa8 	bl	8000aec <__aeabi_dcmplt>
 801059c:	2800      	cmp	r0, #0
 801059e:	d165      	bne.n	801066c <_dtoa_r+0x63c>
 80105a0:	4632      	mov	r2, r6
 80105a2:	463b      	mov	r3, r7
 80105a4:	4935      	ldr	r1, [pc, #212]	; (801067c <_dtoa_r+0x64c>)
 80105a6:	2000      	movs	r0, #0
 80105a8:	f7ef fe76 	bl	8000298 <__aeabi_dsub>
 80105ac:	ec53 2b18 	vmov	r2, r3, d8
 80105b0:	f7f0 fa9c 	bl	8000aec <__aeabi_dcmplt>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	f040 80b9 	bne.w	801072c <_dtoa_r+0x6fc>
 80105ba:	9b02      	ldr	r3, [sp, #8]
 80105bc:	429d      	cmp	r5, r3
 80105be:	f43f af75 	beq.w	80104ac <_dtoa_r+0x47c>
 80105c2:	4b2f      	ldr	r3, [pc, #188]	; (8010680 <_dtoa_r+0x650>)
 80105c4:	ec51 0b18 	vmov	r0, r1, d8
 80105c8:	2200      	movs	r2, #0
 80105ca:	f7f0 f81d 	bl	8000608 <__aeabi_dmul>
 80105ce:	4b2c      	ldr	r3, [pc, #176]	; (8010680 <_dtoa_r+0x650>)
 80105d0:	ec41 0b18 	vmov	d8, r0, r1
 80105d4:	2200      	movs	r2, #0
 80105d6:	4630      	mov	r0, r6
 80105d8:	4639      	mov	r1, r7
 80105da:	f7f0 f815 	bl	8000608 <__aeabi_dmul>
 80105de:	4606      	mov	r6, r0
 80105e0:	460f      	mov	r7, r1
 80105e2:	e7c4      	b.n	801056e <_dtoa_r+0x53e>
 80105e4:	ec51 0b17 	vmov	r0, r1, d7
 80105e8:	f7f0 f80e 	bl	8000608 <__aeabi_dmul>
 80105ec:	9b02      	ldr	r3, [sp, #8]
 80105ee:	9d00      	ldr	r5, [sp, #0]
 80105f0:	930c      	str	r3, [sp, #48]	; 0x30
 80105f2:	ec41 0b18 	vmov	d8, r0, r1
 80105f6:	4639      	mov	r1, r7
 80105f8:	4630      	mov	r0, r6
 80105fa:	f7f0 fab5 	bl	8000b68 <__aeabi_d2iz>
 80105fe:	9011      	str	r0, [sp, #68]	; 0x44
 8010600:	f7ef ff98 	bl	8000534 <__aeabi_i2d>
 8010604:	4602      	mov	r2, r0
 8010606:	460b      	mov	r3, r1
 8010608:	4630      	mov	r0, r6
 801060a:	4639      	mov	r1, r7
 801060c:	f7ef fe44 	bl	8000298 <__aeabi_dsub>
 8010610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010612:	3330      	adds	r3, #48	; 0x30
 8010614:	f805 3b01 	strb.w	r3, [r5], #1
 8010618:	9b02      	ldr	r3, [sp, #8]
 801061a:	429d      	cmp	r5, r3
 801061c:	4606      	mov	r6, r0
 801061e:	460f      	mov	r7, r1
 8010620:	f04f 0200 	mov.w	r2, #0
 8010624:	d134      	bne.n	8010690 <_dtoa_r+0x660>
 8010626:	4b19      	ldr	r3, [pc, #100]	; (801068c <_dtoa_r+0x65c>)
 8010628:	ec51 0b18 	vmov	r0, r1, d8
 801062c:	f7ef fe36 	bl	800029c <__adddf3>
 8010630:	4602      	mov	r2, r0
 8010632:	460b      	mov	r3, r1
 8010634:	4630      	mov	r0, r6
 8010636:	4639      	mov	r1, r7
 8010638:	f7f0 fa76 	bl	8000b28 <__aeabi_dcmpgt>
 801063c:	2800      	cmp	r0, #0
 801063e:	d175      	bne.n	801072c <_dtoa_r+0x6fc>
 8010640:	ec53 2b18 	vmov	r2, r3, d8
 8010644:	4911      	ldr	r1, [pc, #68]	; (801068c <_dtoa_r+0x65c>)
 8010646:	2000      	movs	r0, #0
 8010648:	f7ef fe26 	bl	8000298 <__aeabi_dsub>
 801064c:	4602      	mov	r2, r0
 801064e:	460b      	mov	r3, r1
 8010650:	4630      	mov	r0, r6
 8010652:	4639      	mov	r1, r7
 8010654:	f7f0 fa4a 	bl	8000aec <__aeabi_dcmplt>
 8010658:	2800      	cmp	r0, #0
 801065a:	f43f af27 	beq.w	80104ac <_dtoa_r+0x47c>
 801065e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010660:	1e6b      	subs	r3, r5, #1
 8010662:	930c      	str	r3, [sp, #48]	; 0x30
 8010664:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010668:	2b30      	cmp	r3, #48	; 0x30
 801066a:	d0f8      	beq.n	801065e <_dtoa_r+0x62e>
 801066c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010670:	e04a      	b.n	8010708 <_dtoa_r+0x6d8>
 8010672:	bf00      	nop
 8010674:	08013588 	.word	0x08013588
 8010678:	08013560 	.word	0x08013560
 801067c:	3ff00000 	.word	0x3ff00000
 8010680:	40240000 	.word	0x40240000
 8010684:	401c0000 	.word	0x401c0000
 8010688:	40140000 	.word	0x40140000
 801068c:	3fe00000 	.word	0x3fe00000
 8010690:	4baf      	ldr	r3, [pc, #700]	; (8010950 <_dtoa_r+0x920>)
 8010692:	f7ef ffb9 	bl	8000608 <__aeabi_dmul>
 8010696:	4606      	mov	r6, r0
 8010698:	460f      	mov	r7, r1
 801069a:	e7ac      	b.n	80105f6 <_dtoa_r+0x5c6>
 801069c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80106a0:	9d00      	ldr	r5, [sp, #0]
 80106a2:	4642      	mov	r2, r8
 80106a4:	464b      	mov	r3, r9
 80106a6:	4630      	mov	r0, r6
 80106a8:	4639      	mov	r1, r7
 80106aa:	f7f0 f8d7 	bl	800085c <__aeabi_ddiv>
 80106ae:	f7f0 fa5b 	bl	8000b68 <__aeabi_d2iz>
 80106b2:	9002      	str	r0, [sp, #8]
 80106b4:	f7ef ff3e 	bl	8000534 <__aeabi_i2d>
 80106b8:	4642      	mov	r2, r8
 80106ba:	464b      	mov	r3, r9
 80106bc:	f7ef ffa4 	bl	8000608 <__aeabi_dmul>
 80106c0:	4602      	mov	r2, r0
 80106c2:	460b      	mov	r3, r1
 80106c4:	4630      	mov	r0, r6
 80106c6:	4639      	mov	r1, r7
 80106c8:	f7ef fde6 	bl	8000298 <__aeabi_dsub>
 80106cc:	9e02      	ldr	r6, [sp, #8]
 80106ce:	9f01      	ldr	r7, [sp, #4]
 80106d0:	3630      	adds	r6, #48	; 0x30
 80106d2:	f805 6b01 	strb.w	r6, [r5], #1
 80106d6:	9e00      	ldr	r6, [sp, #0]
 80106d8:	1bae      	subs	r6, r5, r6
 80106da:	42b7      	cmp	r7, r6
 80106dc:	4602      	mov	r2, r0
 80106de:	460b      	mov	r3, r1
 80106e0:	d137      	bne.n	8010752 <_dtoa_r+0x722>
 80106e2:	f7ef fddb 	bl	800029c <__adddf3>
 80106e6:	4642      	mov	r2, r8
 80106e8:	464b      	mov	r3, r9
 80106ea:	4606      	mov	r6, r0
 80106ec:	460f      	mov	r7, r1
 80106ee:	f7f0 fa1b 	bl	8000b28 <__aeabi_dcmpgt>
 80106f2:	b9c8      	cbnz	r0, 8010728 <_dtoa_r+0x6f8>
 80106f4:	4642      	mov	r2, r8
 80106f6:	464b      	mov	r3, r9
 80106f8:	4630      	mov	r0, r6
 80106fa:	4639      	mov	r1, r7
 80106fc:	f7f0 f9ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8010700:	b110      	cbz	r0, 8010708 <_dtoa_r+0x6d8>
 8010702:	9b02      	ldr	r3, [sp, #8]
 8010704:	07d9      	lsls	r1, r3, #31
 8010706:	d40f      	bmi.n	8010728 <_dtoa_r+0x6f8>
 8010708:	4620      	mov	r0, r4
 801070a:	4659      	mov	r1, fp
 801070c:	f000 fe5c 	bl	80113c8 <_Bfree>
 8010710:	2300      	movs	r3, #0
 8010712:	702b      	strb	r3, [r5, #0]
 8010714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010716:	f10a 0001 	add.w	r0, sl, #1
 801071a:	6018      	str	r0, [r3, #0]
 801071c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801071e:	2b00      	cmp	r3, #0
 8010720:	f43f acd8 	beq.w	80100d4 <_dtoa_r+0xa4>
 8010724:	601d      	str	r5, [r3, #0]
 8010726:	e4d5      	b.n	80100d4 <_dtoa_r+0xa4>
 8010728:	f8cd a01c 	str.w	sl, [sp, #28]
 801072c:	462b      	mov	r3, r5
 801072e:	461d      	mov	r5, r3
 8010730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010734:	2a39      	cmp	r2, #57	; 0x39
 8010736:	d108      	bne.n	801074a <_dtoa_r+0x71a>
 8010738:	9a00      	ldr	r2, [sp, #0]
 801073a:	429a      	cmp	r2, r3
 801073c:	d1f7      	bne.n	801072e <_dtoa_r+0x6fe>
 801073e:	9a07      	ldr	r2, [sp, #28]
 8010740:	9900      	ldr	r1, [sp, #0]
 8010742:	3201      	adds	r2, #1
 8010744:	9207      	str	r2, [sp, #28]
 8010746:	2230      	movs	r2, #48	; 0x30
 8010748:	700a      	strb	r2, [r1, #0]
 801074a:	781a      	ldrb	r2, [r3, #0]
 801074c:	3201      	adds	r2, #1
 801074e:	701a      	strb	r2, [r3, #0]
 8010750:	e78c      	b.n	801066c <_dtoa_r+0x63c>
 8010752:	4b7f      	ldr	r3, [pc, #508]	; (8010950 <_dtoa_r+0x920>)
 8010754:	2200      	movs	r2, #0
 8010756:	f7ef ff57 	bl	8000608 <__aeabi_dmul>
 801075a:	2200      	movs	r2, #0
 801075c:	2300      	movs	r3, #0
 801075e:	4606      	mov	r6, r0
 8010760:	460f      	mov	r7, r1
 8010762:	f7f0 f9b9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010766:	2800      	cmp	r0, #0
 8010768:	d09b      	beq.n	80106a2 <_dtoa_r+0x672>
 801076a:	e7cd      	b.n	8010708 <_dtoa_r+0x6d8>
 801076c:	9a08      	ldr	r2, [sp, #32]
 801076e:	2a00      	cmp	r2, #0
 8010770:	f000 80c4 	beq.w	80108fc <_dtoa_r+0x8cc>
 8010774:	9a05      	ldr	r2, [sp, #20]
 8010776:	2a01      	cmp	r2, #1
 8010778:	f300 80a8 	bgt.w	80108cc <_dtoa_r+0x89c>
 801077c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801077e:	2a00      	cmp	r2, #0
 8010780:	f000 80a0 	beq.w	80108c4 <_dtoa_r+0x894>
 8010784:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010788:	9e06      	ldr	r6, [sp, #24]
 801078a:	4645      	mov	r5, r8
 801078c:	9a04      	ldr	r2, [sp, #16]
 801078e:	2101      	movs	r1, #1
 8010790:	441a      	add	r2, r3
 8010792:	4620      	mov	r0, r4
 8010794:	4498      	add	r8, r3
 8010796:	9204      	str	r2, [sp, #16]
 8010798:	f000 ff1c 	bl	80115d4 <__i2b>
 801079c:	4607      	mov	r7, r0
 801079e:	2d00      	cmp	r5, #0
 80107a0:	dd0b      	ble.n	80107ba <_dtoa_r+0x78a>
 80107a2:	9b04      	ldr	r3, [sp, #16]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	dd08      	ble.n	80107ba <_dtoa_r+0x78a>
 80107a8:	42ab      	cmp	r3, r5
 80107aa:	9a04      	ldr	r2, [sp, #16]
 80107ac:	bfa8      	it	ge
 80107ae:	462b      	movge	r3, r5
 80107b0:	eba8 0803 	sub.w	r8, r8, r3
 80107b4:	1aed      	subs	r5, r5, r3
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	9304      	str	r3, [sp, #16]
 80107ba:	9b06      	ldr	r3, [sp, #24]
 80107bc:	b1fb      	cbz	r3, 80107fe <_dtoa_r+0x7ce>
 80107be:	9b08      	ldr	r3, [sp, #32]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f000 809f 	beq.w	8010904 <_dtoa_r+0x8d4>
 80107c6:	2e00      	cmp	r6, #0
 80107c8:	dd11      	ble.n	80107ee <_dtoa_r+0x7be>
 80107ca:	4639      	mov	r1, r7
 80107cc:	4632      	mov	r2, r6
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 ffbc 	bl	801174c <__pow5mult>
 80107d4:	465a      	mov	r2, fp
 80107d6:	4601      	mov	r1, r0
 80107d8:	4607      	mov	r7, r0
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 ff10 	bl	8011600 <__multiply>
 80107e0:	4659      	mov	r1, fp
 80107e2:	9007      	str	r0, [sp, #28]
 80107e4:	4620      	mov	r0, r4
 80107e6:	f000 fdef 	bl	80113c8 <_Bfree>
 80107ea:	9b07      	ldr	r3, [sp, #28]
 80107ec:	469b      	mov	fp, r3
 80107ee:	9b06      	ldr	r3, [sp, #24]
 80107f0:	1b9a      	subs	r2, r3, r6
 80107f2:	d004      	beq.n	80107fe <_dtoa_r+0x7ce>
 80107f4:	4659      	mov	r1, fp
 80107f6:	4620      	mov	r0, r4
 80107f8:	f000 ffa8 	bl	801174c <__pow5mult>
 80107fc:	4683      	mov	fp, r0
 80107fe:	2101      	movs	r1, #1
 8010800:	4620      	mov	r0, r4
 8010802:	f000 fee7 	bl	80115d4 <__i2b>
 8010806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010808:	2b00      	cmp	r3, #0
 801080a:	4606      	mov	r6, r0
 801080c:	dd7c      	ble.n	8010908 <_dtoa_r+0x8d8>
 801080e:	461a      	mov	r2, r3
 8010810:	4601      	mov	r1, r0
 8010812:	4620      	mov	r0, r4
 8010814:	f000 ff9a 	bl	801174c <__pow5mult>
 8010818:	9b05      	ldr	r3, [sp, #20]
 801081a:	2b01      	cmp	r3, #1
 801081c:	4606      	mov	r6, r0
 801081e:	dd76      	ble.n	801090e <_dtoa_r+0x8de>
 8010820:	2300      	movs	r3, #0
 8010822:	9306      	str	r3, [sp, #24]
 8010824:	6933      	ldr	r3, [r6, #16]
 8010826:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801082a:	6918      	ldr	r0, [r3, #16]
 801082c:	f000 fe82 	bl	8011534 <__hi0bits>
 8010830:	f1c0 0020 	rsb	r0, r0, #32
 8010834:	9b04      	ldr	r3, [sp, #16]
 8010836:	4418      	add	r0, r3
 8010838:	f010 001f 	ands.w	r0, r0, #31
 801083c:	f000 8086 	beq.w	801094c <_dtoa_r+0x91c>
 8010840:	f1c0 0320 	rsb	r3, r0, #32
 8010844:	2b04      	cmp	r3, #4
 8010846:	dd7f      	ble.n	8010948 <_dtoa_r+0x918>
 8010848:	f1c0 001c 	rsb	r0, r0, #28
 801084c:	9b04      	ldr	r3, [sp, #16]
 801084e:	4403      	add	r3, r0
 8010850:	4480      	add	r8, r0
 8010852:	4405      	add	r5, r0
 8010854:	9304      	str	r3, [sp, #16]
 8010856:	f1b8 0f00 	cmp.w	r8, #0
 801085a:	dd05      	ble.n	8010868 <_dtoa_r+0x838>
 801085c:	4659      	mov	r1, fp
 801085e:	4642      	mov	r2, r8
 8010860:	4620      	mov	r0, r4
 8010862:	f000 ffcd 	bl	8011800 <__lshift>
 8010866:	4683      	mov	fp, r0
 8010868:	9b04      	ldr	r3, [sp, #16]
 801086a:	2b00      	cmp	r3, #0
 801086c:	dd05      	ble.n	801087a <_dtoa_r+0x84a>
 801086e:	4631      	mov	r1, r6
 8010870:	461a      	mov	r2, r3
 8010872:	4620      	mov	r0, r4
 8010874:	f000 ffc4 	bl	8011800 <__lshift>
 8010878:	4606      	mov	r6, r0
 801087a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801087c:	2b00      	cmp	r3, #0
 801087e:	d069      	beq.n	8010954 <_dtoa_r+0x924>
 8010880:	4631      	mov	r1, r6
 8010882:	4658      	mov	r0, fp
 8010884:	f001 f828 	bl	80118d8 <__mcmp>
 8010888:	2800      	cmp	r0, #0
 801088a:	da63      	bge.n	8010954 <_dtoa_r+0x924>
 801088c:	2300      	movs	r3, #0
 801088e:	4659      	mov	r1, fp
 8010890:	220a      	movs	r2, #10
 8010892:	4620      	mov	r0, r4
 8010894:	f000 fdba 	bl	801140c <__multadd>
 8010898:	9b08      	ldr	r3, [sp, #32]
 801089a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801089e:	4683      	mov	fp, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f000 818f 	beq.w	8010bc4 <_dtoa_r+0xb94>
 80108a6:	4639      	mov	r1, r7
 80108a8:	2300      	movs	r3, #0
 80108aa:	220a      	movs	r2, #10
 80108ac:	4620      	mov	r0, r4
 80108ae:	f000 fdad 	bl	801140c <__multadd>
 80108b2:	f1b9 0f00 	cmp.w	r9, #0
 80108b6:	4607      	mov	r7, r0
 80108b8:	f300 808e 	bgt.w	80109d8 <_dtoa_r+0x9a8>
 80108bc:	9b05      	ldr	r3, [sp, #20]
 80108be:	2b02      	cmp	r3, #2
 80108c0:	dc50      	bgt.n	8010964 <_dtoa_r+0x934>
 80108c2:	e089      	b.n	80109d8 <_dtoa_r+0x9a8>
 80108c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80108ca:	e75d      	b.n	8010788 <_dtoa_r+0x758>
 80108cc:	9b01      	ldr	r3, [sp, #4]
 80108ce:	1e5e      	subs	r6, r3, #1
 80108d0:	9b06      	ldr	r3, [sp, #24]
 80108d2:	42b3      	cmp	r3, r6
 80108d4:	bfbf      	itttt	lt
 80108d6:	9b06      	ldrlt	r3, [sp, #24]
 80108d8:	9606      	strlt	r6, [sp, #24]
 80108da:	1af2      	sublt	r2, r6, r3
 80108dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80108de:	bfb6      	itet	lt
 80108e0:	189b      	addlt	r3, r3, r2
 80108e2:	1b9e      	subge	r6, r3, r6
 80108e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80108e6:	9b01      	ldr	r3, [sp, #4]
 80108e8:	bfb8      	it	lt
 80108ea:	2600      	movlt	r6, #0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	bfb5      	itete	lt
 80108f0:	eba8 0503 	sublt.w	r5, r8, r3
 80108f4:	9b01      	ldrge	r3, [sp, #4]
 80108f6:	2300      	movlt	r3, #0
 80108f8:	4645      	movge	r5, r8
 80108fa:	e747      	b.n	801078c <_dtoa_r+0x75c>
 80108fc:	9e06      	ldr	r6, [sp, #24]
 80108fe:	9f08      	ldr	r7, [sp, #32]
 8010900:	4645      	mov	r5, r8
 8010902:	e74c      	b.n	801079e <_dtoa_r+0x76e>
 8010904:	9a06      	ldr	r2, [sp, #24]
 8010906:	e775      	b.n	80107f4 <_dtoa_r+0x7c4>
 8010908:	9b05      	ldr	r3, [sp, #20]
 801090a:	2b01      	cmp	r3, #1
 801090c:	dc18      	bgt.n	8010940 <_dtoa_r+0x910>
 801090e:	9b02      	ldr	r3, [sp, #8]
 8010910:	b9b3      	cbnz	r3, 8010940 <_dtoa_r+0x910>
 8010912:	9b03      	ldr	r3, [sp, #12]
 8010914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010918:	b9a3      	cbnz	r3, 8010944 <_dtoa_r+0x914>
 801091a:	9b03      	ldr	r3, [sp, #12]
 801091c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010920:	0d1b      	lsrs	r3, r3, #20
 8010922:	051b      	lsls	r3, r3, #20
 8010924:	b12b      	cbz	r3, 8010932 <_dtoa_r+0x902>
 8010926:	9b04      	ldr	r3, [sp, #16]
 8010928:	3301      	adds	r3, #1
 801092a:	9304      	str	r3, [sp, #16]
 801092c:	f108 0801 	add.w	r8, r8, #1
 8010930:	2301      	movs	r3, #1
 8010932:	9306      	str	r3, [sp, #24]
 8010934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010936:	2b00      	cmp	r3, #0
 8010938:	f47f af74 	bne.w	8010824 <_dtoa_r+0x7f4>
 801093c:	2001      	movs	r0, #1
 801093e:	e779      	b.n	8010834 <_dtoa_r+0x804>
 8010940:	2300      	movs	r3, #0
 8010942:	e7f6      	b.n	8010932 <_dtoa_r+0x902>
 8010944:	9b02      	ldr	r3, [sp, #8]
 8010946:	e7f4      	b.n	8010932 <_dtoa_r+0x902>
 8010948:	d085      	beq.n	8010856 <_dtoa_r+0x826>
 801094a:	4618      	mov	r0, r3
 801094c:	301c      	adds	r0, #28
 801094e:	e77d      	b.n	801084c <_dtoa_r+0x81c>
 8010950:	40240000 	.word	0x40240000
 8010954:	9b01      	ldr	r3, [sp, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	dc38      	bgt.n	80109cc <_dtoa_r+0x99c>
 801095a:	9b05      	ldr	r3, [sp, #20]
 801095c:	2b02      	cmp	r3, #2
 801095e:	dd35      	ble.n	80109cc <_dtoa_r+0x99c>
 8010960:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010964:	f1b9 0f00 	cmp.w	r9, #0
 8010968:	d10d      	bne.n	8010986 <_dtoa_r+0x956>
 801096a:	4631      	mov	r1, r6
 801096c:	464b      	mov	r3, r9
 801096e:	2205      	movs	r2, #5
 8010970:	4620      	mov	r0, r4
 8010972:	f000 fd4b 	bl	801140c <__multadd>
 8010976:	4601      	mov	r1, r0
 8010978:	4606      	mov	r6, r0
 801097a:	4658      	mov	r0, fp
 801097c:	f000 ffac 	bl	80118d8 <__mcmp>
 8010980:	2800      	cmp	r0, #0
 8010982:	f73f adbd 	bgt.w	8010500 <_dtoa_r+0x4d0>
 8010986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010988:	9d00      	ldr	r5, [sp, #0]
 801098a:	ea6f 0a03 	mvn.w	sl, r3
 801098e:	f04f 0800 	mov.w	r8, #0
 8010992:	4631      	mov	r1, r6
 8010994:	4620      	mov	r0, r4
 8010996:	f000 fd17 	bl	80113c8 <_Bfree>
 801099a:	2f00      	cmp	r7, #0
 801099c:	f43f aeb4 	beq.w	8010708 <_dtoa_r+0x6d8>
 80109a0:	f1b8 0f00 	cmp.w	r8, #0
 80109a4:	d005      	beq.n	80109b2 <_dtoa_r+0x982>
 80109a6:	45b8      	cmp	r8, r7
 80109a8:	d003      	beq.n	80109b2 <_dtoa_r+0x982>
 80109aa:	4641      	mov	r1, r8
 80109ac:	4620      	mov	r0, r4
 80109ae:	f000 fd0b 	bl	80113c8 <_Bfree>
 80109b2:	4639      	mov	r1, r7
 80109b4:	4620      	mov	r0, r4
 80109b6:	f000 fd07 	bl	80113c8 <_Bfree>
 80109ba:	e6a5      	b.n	8010708 <_dtoa_r+0x6d8>
 80109bc:	2600      	movs	r6, #0
 80109be:	4637      	mov	r7, r6
 80109c0:	e7e1      	b.n	8010986 <_dtoa_r+0x956>
 80109c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80109c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80109c8:	4637      	mov	r7, r6
 80109ca:	e599      	b.n	8010500 <_dtoa_r+0x4d0>
 80109cc:	9b08      	ldr	r3, [sp, #32]
 80109ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f000 80fd 	beq.w	8010bd2 <_dtoa_r+0xba2>
 80109d8:	2d00      	cmp	r5, #0
 80109da:	dd05      	ble.n	80109e8 <_dtoa_r+0x9b8>
 80109dc:	4639      	mov	r1, r7
 80109de:	462a      	mov	r2, r5
 80109e0:	4620      	mov	r0, r4
 80109e2:	f000 ff0d 	bl	8011800 <__lshift>
 80109e6:	4607      	mov	r7, r0
 80109e8:	9b06      	ldr	r3, [sp, #24]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d05c      	beq.n	8010aa8 <_dtoa_r+0xa78>
 80109ee:	6879      	ldr	r1, [r7, #4]
 80109f0:	4620      	mov	r0, r4
 80109f2:	f000 fca9 	bl	8011348 <_Balloc>
 80109f6:	4605      	mov	r5, r0
 80109f8:	b928      	cbnz	r0, 8010a06 <_dtoa_r+0x9d6>
 80109fa:	4b80      	ldr	r3, [pc, #512]	; (8010bfc <_dtoa_r+0xbcc>)
 80109fc:	4602      	mov	r2, r0
 80109fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010a02:	f7ff bb2e 	b.w	8010062 <_dtoa_r+0x32>
 8010a06:	693a      	ldr	r2, [r7, #16]
 8010a08:	3202      	adds	r2, #2
 8010a0a:	0092      	lsls	r2, r2, #2
 8010a0c:	f107 010c 	add.w	r1, r7, #12
 8010a10:	300c      	adds	r0, #12
 8010a12:	f7fd fe89 	bl	800e728 <memcpy>
 8010a16:	2201      	movs	r2, #1
 8010a18:	4629      	mov	r1, r5
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	f000 fef0 	bl	8011800 <__lshift>
 8010a20:	9b00      	ldr	r3, [sp, #0]
 8010a22:	3301      	adds	r3, #1
 8010a24:	9301      	str	r3, [sp, #4]
 8010a26:	9b00      	ldr	r3, [sp, #0]
 8010a28:	444b      	add	r3, r9
 8010a2a:	9307      	str	r3, [sp, #28]
 8010a2c:	9b02      	ldr	r3, [sp, #8]
 8010a2e:	f003 0301 	and.w	r3, r3, #1
 8010a32:	46b8      	mov	r8, r7
 8010a34:	9306      	str	r3, [sp, #24]
 8010a36:	4607      	mov	r7, r0
 8010a38:	9b01      	ldr	r3, [sp, #4]
 8010a3a:	4631      	mov	r1, r6
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	4658      	mov	r0, fp
 8010a40:	9302      	str	r3, [sp, #8]
 8010a42:	f7ff fa67 	bl	800ff14 <quorem>
 8010a46:	4603      	mov	r3, r0
 8010a48:	3330      	adds	r3, #48	; 0x30
 8010a4a:	9004      	str	r0, [sp, #16]
 8010a4c:	4641      	mov	r1, r8
 8010a4e:	4658      	mov	r0, fp
 8010a50:	9308      	str	r3, [sp, #32]
 8010a52:	f000 ff41 	bl	80118d8 <__mcmp>
 8010a56:	463a      	mov	r2, r7
 8010a58:	4681      	mov	r9, r0
 8010a5a:	4631      	mov	r1, r6
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f000 ff57 	bl	8011910 <__mdiff>
 8010a62:	68c2      	ldr	r2, [r0, #12]
 8010a64:	9b08      	ldr	r3, [sp, #32]
 8010a66:	4605      	mov	r5, r0
 8010a68:	bb02      	cbnz	r2, 8010aac <_dtoa_r+0xa7c>
 8010a6a:	4601      	mov	r1, r0
 8010a6c:	4658      	mov	r0, fp
 8010a6e:	f000 ff33 	bl	80118d8 <__mcmp>
 8010a72:	9b08      	ldr	r3, [sp, #32]
 8010a74:	4602      	mov	r2, r0
 8010a76:	4629      	mov	r1, r5
 8010a78:	4620      	mov	r0, r4
 8010a7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010a7e:	f000 fca3 	bl	80113c8 <_Bfree>
 8010a82:	9b05      	ldr	r3, [sp, #20]
 8010a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a86:	9d01      	ldr	r5, [sp, #4]
 8010a88:	ea43 0102 	orr.w	r1, r3, r2
 8010a8c:	9b06      	ldr	r3, [sp, #24]
 8010a8e:	430b      	orrs	r3, r1
 8010a90:	9b08      	ldr	r3, [sp, #32]
 8010a92:	d10d      	bne.n	8010ab0 <_dtoa_r+0xa80>
 8010a94:	2b39      	cmp	r3, #57	; 0x39
 8010a96:	d029      	beq.n	8010aec <_dtoa_r+0xabc>
 8010a98:	f1b9 0f00 	cmp.w	r9, #0
 8010a9c:	dd01      	ble.n	8010aa2 <_dtoa_r+0xa72>
 8010a9e:	9b04      	ldr	r3, [sp, #16]
 8010aa0:	3331      	adds	r3, #49	; 0x31
 8010aa2:	9a02      	ldr	r2, [sp, #8]
 8010aa4:	7013      	strb	r3, [r2, #0]
 8010aa6:	e774      	b.n	8010992 <_dtoa_r+0x962>
 8010aa8:	4638      	mov	r0, r7
 8010aaa:	e7b9      	b.n	8010a20 <_dtoa_r+0x9f0>
 8010aac:	2201      	movs	r2, #1
 8010aae:	e7e2      	b.n	8010a76 <_dtoa_r+0xa46>
 8010ab0:	f1b9 0f00 	cmp.w	r9, #0
 8010ab4:	db06      	blt.n	8010ac4 <_dtoa_r+0xa94>
 8010ab6:	9905      	ldr	r1, [sp, #20]
 8010ab8:	ea41 0909 	orr.w	r9, r1, r9
 8010abc:	9906      	ldr	r1, [sp, #24]
 8010abe:	ea59 0101 	orrs.w	r1, r9, r1
 8010ac2:	d120      	bne.n	8010b06 <_dtoa_r+0xad6>
 8010ac4:	2a00      	cmp	r2, #0
 8010ac6:	ddec      	ble.n	8010aa2 <_dtoa_r+0xa72>
 8010ac8:	4659      	mov	r1, fp
 8010aca:	2201      	movs	r2, #1
 8010acc:	4620      	mov	r0, r4
 8010ace:	9301      	str	r3, [sp, #4]
 8010ad0:	f000 fe96 	bl	8011800 <__lshift>
 8010ad4:	4631      	mov	r1, r6
 8010ad6:	4683      	mov	fp, r0
 8010ad8:	f000 fefe 	bl	80118d8 <__mcmp>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	9b01      	ldr	r3, [sp, #4]
 8010ae0:	dc02      	bgt.n	8010ae8 <_dtoa_r+0xab8>
 8010ae2:	d1de      	bne.n	8010aa2 <_dtoa_r+0xa72>
 8010ae4:	07da      	lsls	r2, r3, #31
 8010ae6:	d5dc      	bpl.n	8010aa2 <_dtoa_r+0xa72>
 8010ae8:	2b39      	cmp	r3, #57	; 0x39
 8010aea:	d1d8      	bne.n	8010a9e <_dtoa_r+0xa6e>
 8010aec:	9a02      	ldr	r2, [sp, #8]
 8010aee:	2339      	movs	r3, #57	; 0x39
 8010af0:	7013      	strb	r3, [r2, #0]
 8010af2:	462b      	mov	r3, r5
 8010af4:	461d      	mov	r5, r3
 8010af6:	3b01      	subs	r3, #1
 8010af8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010afc:	2a39      	cmp	r2, #57	; 0x39
 8010afe:	d050      	beq.n	8010ba2 <_dtoa_r+0xb72>
 8010b00:	3201      	adds	r2, #1
 8010b02:	701a      	strb	r2, [r3, #0]
 8010b04:	e745      	b.n	8010992 <_dtoa_r+0x962>
 8010b06:	2a00      	cmp	r2, #0
 8010b08:	dd03      	ble.n	8010b12 <_dtoa_r+0xae2>
 8010b0a:	2b39      	cmp	r3, #57	; 0x39
 8010b0c:	d0ee      	beq.n	8010aec <_dtoa_r+0xabc>
 8010b0e:	3301      	adds	r3, #1
 8010b10:	e7c7      	b.n	8010aa2 <_dtoa_r+0xa72>
 8010b12:	9a01      	ldr	r2, [sp, #4]
 8010b14:	9907      	ldr	r1, [sp, #28]
 8010b16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010b1a:	428a      	cmp	r2, r1
 8010b1c:	d02a      	beq.n	8010b74 <_dtoa_r+0xb44>
 8010b1e:	4659      	mov	r1, fp
 8010b20:	2300      	movs	r3, #0
 8010b22:	220a      	movs	r2, #10
 8010b24:	4620      	mov	r0, r4
 8010b26:	f000 fc71 	bl	801140c <__multadd>
 8010b2a:	45b8      	cmp	r8, r7
 8010b2c:	4683      	mov	fp, r0
 8010b2e:	f04f 0300 	mov.w	r3, #0
 8010b32:	f04f 020a 	mov.w	r2, #10
 8010b36:	4641      	mov	r1, r8
 8010b38:	4620      	mov	r0, r4
 8010b3a:	d107      	bne.n	8010b4c <_dtoa_r+0xb1c>
 8010b3c:	f000 fc66 	bl	801140c <__multadd>
 8010b40:	4680      	mov	r8, r0
 8010b42:	4607      	mov	r7, r0
 8010b44:	9b01      	ldr	r3, [sp, #4]
 8010b46:	3301      	adds	r3, #1
 8010b48:	9301      	str	r3, [sp, #4]
 8010b4a:	e775      	b.n	8010a38 <_dtoa_r+0xa08>
 8010b4c:	f000 fc5e 	bl	801140c <__multadd>
 8010b50:	4639      	mov	r1, r7
 8010b52:	4680      	mov	r8, r0
 8010b54:	2300      	movs	r3, #0
 8010b56:	220a      	movs	r2, #10
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f000 fc57 	bl	801140c <__multadd>
 8010b5e:	4607      	mov	r7, r0
 8010b60:	e7f0      	b.n	8010b44 <_dtoa_r+0xb14>
 8010b62:	f1b9 0f00 	cmp.w	r9, #0
 8010b66:	9a00      	ldr	r2, [sp, #0]
 8010b68:	bfcc      	ite	gt
 8010b6a:	464d      	movgt	r5, r9
 8010b6c:	2501      	movle	r5, #1
 8010b6e:	4415      	add	r5, r2
 8010b70:	f04f 0800 	mov.w	r8, #0
 8010b74:	4659      	mov	r1, fp
 8010b76:	2201      	movs	r2, #1
 8010b78:	4620      	mov	r0, r4
 8010b7a:	9301      	str	r3, [sp, #4]
 8010b7c:	f000 fe40 	bl	8011800 <__lshift>
 8010b80:	4631      	mov	r1, r6
 8010b82:	4683      	mov	fp, r0
 8010b84:	f000 fea8 	bl	80118d8 <__mcmp>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	dcb2      	bgt.n	8010af2 <_dtoa_r+0xac2>
 8010b8c:	d102      	bne.n	8010b94 <_dtoa_r+0xb64>
 8010b8e:	9b01      	ldr	r3, [sp, #4]
 8010b90:	07db      	lsls	r3, r3, #31
 8010b92:	d4ae      	bmi.n	8010af2 <_dtoa_r+0xac2>
 8010b94:	462b      	mov	r3, r5
 8010b96:	461d      	mov	r5, r3
 8010b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b9c:	2a30      	cmp	r2, #48	; 0x30
 8010b9e:	d0fa      	beq.n	8010b96 <_dtoa_r+0xb66>
 8010ba0:	e6f7      	b.n	8010992 <_dtoa_r+0x962>
 8010ba2:	9a00      	ldr	r2, [sp, #0]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d1a5      	bne.n	8010af4 <_dtoa_r+0xac4>
 8010ba8:	f10a 0a01 	add.w	sl, sl, #1
 8010bac:	2331      	movs	r3, #49	; 0x31
 8010bae:	e779      	b.n	8010aa4 <_dtoa_r+0xa74>
 8010bb0:	4b13      	ldr	r3, [pc, #76]	; (8010c00 <_dtoa_r+0xbd0>)
 8010bb2:	f7ff baaf 	b.w	8010114 <_dtoa_r+0xe4>
 8010bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f47f aa86 	bne.w	80100ca <_dtoa_r+0x9a>
 8010bbe:	4b11      	ldr	r3, [pc, #68]	; (8010c04 <_dtoa_r+0xbd4>)
 8010bc0:	f7ff baa8 	b.w	8010114 <_dtoa_r+0xe4>
 8010bc4:	f1b9 0f00 	cmp.w	r9, #0
 8010bc8:	dc03      	bgt.n	8010bd2 <_dtoa_r+0xba2>
 8010bca:	9b05      	ldr	r3, [sp, #20]
 8010bcc:	2b02      	cmp	r3, #2
 8010bce:	f73f aec9 	bgt.w	8010964 <_dtoa_r+0x934>
 8010bd2:	9d00      	ldr	r5, [sp, #0]
 8010bd4:	4631      	mov	r1, r6
 8010bd6:	4658      	mov	r0, fp
 8010bd8:	f7ff f99c 	bl	800ff14 <quorem>
 8010bdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010be0:	f805 3b01 	strb.w	r3, [r5], #1
 8010be4:	9a00      	ldr	r2, [sp, #0]
 8010be6:	1aaa      	subs	r2, r5, r2
 8010be8:	4591      	cmp	r9, r2
 8010bea:	ddba      	ble.n	8010b62 <_dtoa_r+0xb32>
 8010bec:	4659      	mov	r1, fp
 8010bee:	2300      	movs	r3, #0
 8010bf0:	220a      	movs	r2, #10
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f000 fc0a 	bl	801140c <__multadd>
 8010bf8:	4683      	mov	fp, r0
 8010bfa:	e7eb      	b.n	8010bd4 <_dtoa_r+0xba4>
 8010bfc:	08013470 	.word	0x08013470
 8010c00:	080132dc 	.word	0x080132dc
 8010c04:	08013404 	.word	0x08013404

08010c08 <fiprintf>:
 8010c08:	b40e      	push	{r1, r2, r3}
 8010c0a:	b503      	push	{r0, r1, lr}
 8010c0c:	4601      	mov	r1, r0
 8010c0e:	ab03      	add	r3, sp, #12
 8010c10:	4805      	ldr	r0, [pc, #20]	; (8010c28 <fiprintf+0x20>)
 8010c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c16:	6800      	ldr	r0, [r0, #0]
 8010c18:	9301      	str	r3, [sp, #4]
 8010c1a:	f001 fa8f 	bl	801213c <_vfiprintf_r>
 8010c1e:	b002      	add	sp, #8
 8010c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c24:	b003      	add	sp, #12
 8010c26:	4770      	bx	lr
 8010c28:	20000028 	.word	0x20000028

08010c2c <rshift>:
 8010c2c:	6903      	ldr	r3, [r0, #16]
 8010c2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c3a:	f100 0414 	add.w	r4, r0, #20
 8010c3e:	dd45      	ble.n	8010ccc <rshift+0xa0>
 8010c40:	f011 011f 	ands.w	r1, r1, #31
 8010c44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010c48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010c4c:	d10c      	bne.n	8010c68 <rshift+0x3c>
 8010c4e:	f100 0710 	add.w	r7, r0, #16
 8010c52:	4629      	mov	r1, r5
 8010c54:	42b1      	cmp	r1, r6
 8010c56:	d334      	bcc.n	8010cc2 <rshift+0x96>
 8010c58:	1a9b      	subs	r3, r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	1eea      	subs	r2, r5, #3
 8010c5e:	4296      	cmp	r6, r2
 8010c60:	bf38      	it	cc
 8010c62:	2300      	movcc	r3, #0
 8010c64:	4423      	add	r3, r4
 8010c66:	e015      	b.n	8010c94 <rshift+0x68>
 8010c68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010c6c:	f1c1 0820 	rsb	r8, r1, #32
 8010c70:	40cf      	lsrs	r7, r1
 8010c72:	f105 0e04 	add.w	lr, r5, #4
 8010c76:	46a1      	mov	r9, r4
 8010c78:	4576      	cmp	r6, lr
 8010c7a:	46f4      	mov	ip, lr
 8010c7c:	d815      	bhi.n	8010caa <rshift+0x7e>
 8010c7e:	1a9b      	subs	r3, r3, r2
 8010c80:	009a      	lsls	r2, r3, #2
 8010c82:	3a04      	subs	r2, #4
 8010c84:	3501      	adds	r5, #1
 8010c86:	42ae      	cmp	r6, r5
 8010c88:	bf38      	it	cc
 8010c8a:	2200      	movcc	r2, #0
 8010c8c:	18a3      	adds	r3, r4, r2
 8010c8e:	50a7      	str	r7, [r4, r2]
 8010c90:	b107      	cbz	r7, 8010c94 <rshift+0x68>
 8010c92:	3304      	adds	r3, #4
 8010c94:	1b1a      	subs	r2, r3, r4
 8010c96:	42a3      	cmp	r3, r4
 8010c98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010c9c:	bf08      	it	eq
 8010c9e:	2300      	moveq	r3, #0
 8010ca0:	6102      	str	r2, [r0, #16]
 8010ca2:	bf08      	it	eq
 8010ca4:	6143      	streq	r3, [r0, #20]
 8010ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010caa:	f8dc c000 	ldr.w	ip, [ip]
 8010cae:	fa0c fc08 	lsl.w	ip, ip, r8
 8010cb2:	ea4c 0707 	orr.w	r7, ip, r7
 8010cb6:	f849 7b04 	str.w	r7, [r9], #4
 8010cba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010cbe:	40cf      	lsrs	r7, r1
 8010cc0:	e7da      	b.n	8010c78 <rshift+0x4c>
 8010cc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8010cc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8010cca:	e7c3      	b.n	8010c54 <rshift+0x28>
 8010ccc:	4623      	mov	r3, r4
 8010cce:	e7e1      	b.n	8010c94 <rshift+0x68>

08010cd0 <__hexdig_fun>:
 8010cd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010cd4:	2b09      	cmp	r3, #9
 8010cd6:	d802      	bhi.n	8010cde <__hexdig_fun+0xe>
 8010cd8:	3820      	subs	r0, #32
 8010cda:	b2c0      	uxtb	r0, r0
 8010cdc:	4770      	bx	lr
 8010cde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010ce2:	2b05      	cmp	r3, #5
 8010ce4:	d801      	bhi.n	8010cea <__hexdig_fun+0x1a>
 8010ce6:	3847      	subs	r0, #71	; 0x47
 8010ce8:	e7f7      	b.n	8010cda <__hexdig_fun+0xa>
 8010cea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010cee:	2b05      	cmp	r3, #5
 8010cf0:	d801      	bhi.n	8010cf6 <__hexdig_fun+0x26>
 8010cf2:	3827      	subs	r0, #39	; 0x27
 8010cf4:	e7f1      	b.n	8010cda <__hexdig_fun+0xa>
 8010cf6:	2000      	movs	r0, #0
 8010cf8:	4770      	bx	lr
	...

08010cfc <__gethex>:
 8010cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d00:	ed2d 8b02 	vpush	{d8}
 8010d04:	b089      	sub	sp, #36	; 0x24
 8010d06:	ee08 0a10 	vmov	s16, r0
 8010d0a:	9304      	str	r3, [sp, #16]
 8010d0c:	4bbc      	ldr	r3, [pc, #752]	; (8011000 <__gethex+0x304>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	9301      	str	r3, [sp, #4]
 8010d12:	4618      	mov	r0, r3
 8010d14:	468b      	mov	fp, r1
 8010d16:	4690      	mov	r8, r2
 8010d18:	f7ef fa62 	bl	80001e0 <strlen>
 8010d1c:	9b01      	ldr	r3, [sp, #4]
 8010d1e:	f8db 2000 	ldr.w	r2, [fp]
 8010d22:	4403      	add	r3, r0
 8010d24:	4682      	mov	sl, r0
 8010d26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010d2a:	9305      	str	r3, [sp, #20]
 8010d2c:	1c93      	adds	r3, r2, #2
 8010d2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010d32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010d36:	32fe      	adds	r2, #254	; 0xfe
 8010d38:	18d1      	adds	r1, r2, r3
 8010d3a:	461f      	mov	r7, r3
 8010d3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d40:	9100      	str	r1, [sp, #0]
 8010d42:	2830      	cmp	r0, #48	; 0x30
 8010d44:	d0f8      	beq.n	8010d38 <__gethex+0x3c>
 8010d46:	f7ff ffc3 	bl	8010cd0 <__hexdig_fun>
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	d13a      	bne.n	8010dc6 <__gethex+0xca>
 8010d50:	9901      	ldr	r1, [sp, #4]
 8010d52:	4652      	mov	r2, sl
 8010d54:	4638      	mov	r0, r7
 8010d56:	f001 fb3b 	bl	80123d0 <strncmp>
 8010d5a:	4605      	mov	r5, r0
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	d168      	bne.n	8010e32 <__gethex+0x136>
 8010d60:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010d64:	eb07 060a 	add.w	r6, r7, sl
 8010d68:	f7ff ffb2 	bl	8010cd0 <__hexdig_fun>
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	d062      	beq.n	8010e36 <__gethex+0x13a>
 8010d70:	4633      	mov	r3, r6
 8010d72:	7818      	ldrb	r0, [r3, #0]
 8010d74:	2830      	cmp	r0, #48	; 0x30
 8010d76:	461f      	mov	r7, r3
 8010d78:	f103 0301 	add.w	r3, r3, #1
 8010d7c:	d0f9      	beq.n	8010d72 <__gethex+0x76>
 8010d7e:	f7ff ffa7 	bl	8010cd0 <__hexdig_fun>
 8010d82:	2301      	movs	r3, #1
 8010d84:	fab0 f480 	clz	r4, r0
 8010d88:	0964      	lsrs	r4, r4, #5
 8010d8a:	4635      	mov	r5, r6
 8010d8c:	9300      	str	r3, [sp, #0]
 8010d8e:	463a      	mov	r2, r7
 8010d90:	4616      	mov	r6, r2
 8010d92:	3201      	adds	r2, #1
 8010d94:	7830      	ldrb	r0, [r6, #0]
 8010d96:	f7ff ff9b 	bl	8010cd0 <__hexdig_fun>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d1f8      	bne.n	8010d90 <__gethex+0x94>
 8010d9e:	9901      	ldr	r1, [sp, #4]
 8010da0:	4652      	mov	r2, sl
 8010da2:	4630      	mov	r0, r6
 8010da4:	f001 fb14 	bl	80123d0 <strncmp>
 8010da8:	b980      	cbnz	r0, 8010dcc <__gethex+0xd0>
 8010daa:	b94d      	cbnz	r5, 8010dc0 <__gethex+0xc4>
 8010dac:	eb06 050a 	add.w	r5, r6, sl
 8010db0:	462a      	mov	r2, r5
 8010db2:	4616      	mov	r6, r2
 8010db4:	3201      	adds	r2, #1
 8010db6:	7830      	ldrb	r0, [r6, #0]
 8010db8:	f7ff ff8a 	bl	8010cd0 <__hexdig_fun>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	d1f8      	bne.n	8010db2 <__gethex+0xb6>
 8010dc0:	1bad      	subs	r5, r5, r6
 8010dc2:	00ad      	lsls	r5, r5, #2
 8010dc4:	e004      	b.n	8010dd0 <__gethex+0xd4>
 8010dc6:	2400      	movs	r4, #0
 8010dc8:	4625      	mov	r5, r4
 8010dca:	e7e0      	b.n	8010d8e <__gethex+0x92>
 8010dcc:	2d00      	cmp	r5, #0
 8010dce:	d1f7      	bne.n	8010dc0 <__gethex+0xc4>
 8010dd0:	7833      	ldrb	r3, [r6, #0]
 8010dd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010dd6:	2b50      	cmp	r3, #80	; 0x50
 8010dd8:	d13b      	bne.n	8010e52 <__gethex+0x156>
 8010dda:	7873      	ldrb	r3, [r6, #1]
 8010ddc:	2b2b      	cmp	r3, #43	; 0x2b
 8010dde:	d02c      	beq.n	8010e3a <__gethex+0x13e>
 8010de0:	2b2d      	cmp	r3, #45	; 0x2d
 8010de2:	d02e      	beq.n	8010e42 <__gethex+0x146>
 8010de4:	1c71      	adds	r1, r6, #1
 8010de6:	f04f 0900 	mov.w	r9, #0
 8010dea:	7808      	ldrb	r0, [r1, #0]
 8010dec:	f7ff ff70 	bl	8010cd0 <__hexdig_fun>
 8010df0:	1e43      	subs	r3, r0, #1
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	2b18      	cmp	r3, #24
 8010df6:	d82c      	bhi.n	8010e52 <__gethex+0x156>
 8010df8:	f1a0 0210 	sub.w	r2, r0, #16
 8010dfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e00:	f7ff ff66 	bl	8010cd0 <__hexdig_fun>
 8010e04:	1e43      	subs	r3, r0, #1
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	2b18      	cmp	r3, #24
 8010e0a:	d91d      	bls.n	8010e48 <__gethex+0x14c>
 8010e0c:	f1b9 0f00 	cmp.w	r9, #0
 8010e10:	d000      	beq.n	8010e14 <__gethex+0x118>
 8010e12:	4252      	negs	r2, r2
 8010e14:	4415      	add	r5, r2
 8010e16:	f8cb 1000 	str.w	r1, [fp]
 8010e1a:	b1e4      	cbz	r4, 8010e56 <__gethex+0x15a>
 8010e1c:	9b00      	ldr	r3, [sp, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	bf14      	ite	ne
 8010e22:	2700      	movne	r7, #0
 8010e24:	2706      	moveq	r7, #6
 8010e26:	4638      	mov	r0, r7
 8010e28:	b009      	add	sp, #36	; 0x24
 8010e2a:	ecbd 8b02 	vpop	{d8}
 8010e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e32:	463e      	mov	r6, r7
 8010e34:	4625      	mov	r5, r4
 8010e36:	2401      	movs	r4, #1
 8010e38:	e7ca      	b.n	8010dd0 <__gethex+0xd4>
 8010e3a:	f04f 0900 	mov.w	r9, #0
 8010e3e:	1cb1      	adds	r1, r6, #2
 8010e40:	e7d3      	b.n	8010dea <__gethex+0xee>
 8010e42:	f04f 0901 	mov.w	r9, #1
 8010e46:	e7fa      	b.n	8010e3e <__gethex+0x142>
 8010e48:	230a      	movs	r3, #10
 8010e4a:	fb03 0202 	mla	r2, r3, r2, r0
 8010e4e:	3a10      	subs	r2, #16
 8010e50:	e7d4      	b.n	8010dfc <__gethex+0x100>
 8010e52:	4631      	mov	r1, r6
 8010e54:	e7df      	b.n	8010e16 <__gethex+0x11a>
 8010e56:	1bf3      	subs	r3, r6, r7
 8010e58:	3b01      	subs	r3, #1
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	2b07      	cmp	r3, #7
 8010e5e:	dc0b      	bgt.n	8010e78 <__gethex+0x17c>
 8010e60:	ee18 0a10 	vmov	r0, s16
 8010e64:	f000 fa70 	bl	8011348 <_Balloc>
 8010e68:	4604      	mov	r4, r0
 8010e6a:	b940      	cbnz	r0, 8010e7e <__gethex+0x182>
 8010e6c:	4b65      	ldr	r3, [pc, #404]	; (8011004 <__gethex+0x308>)
 8010e6e:	4602      	mov	r2, r0
 8010e70:	21de      	movs	r1, #222	; 0xde
 8010e72:	4865      	ldr	r0, [pc, #404]	; (8011008 <__gethex+0x30c>)
 8010e74:	f7ff f830 	bl	800fed8 <__assert_func>
 8010e78:	3101      	adds	r1, #1
 8010e7a:	105b      	asrs	r3, r3, #1
 8010e7c:	e7ee      	b.n	8010e5c <__gethex+0x160>
 8010e7e:	f100 0914 	add.w	r9, r0, #20
 8010e82:	f04f 0b00 	mov.w	fp, #0
 8010e86:	f1ca 0301 	rsb	r3, sl, #1
 8010e8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8010e8e:	f8cd b000 	str.w	fp, [sp]
 8010e92:	9306      	str	r3, [sp, #24]
 8010e94:	42b7      	cmp	r7, r6
 8010e96:	d340      	bcc.n	8010f1a <__gethex+0x21e>
 8010e98:	9802      	ldr	r0, [sp, #8]
 8010e9a:	9b00      	ldr	r3, [sp, #0]
 8010e9c:	f840 3b04 	str.w	r3, [r0], #4
 8010ea0:	eba0 0009 	sub.w	r0, r0, r9
 8010ea4:	1080      	asrs	r0, r0, #2
 8010ea6:	0146      	lsls	r6, r0, #5
 8010ea8:	6120      	str	r0, [r4, #16]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f000 fb42 	bl	8011534 <__hi0bits>
 8010eb0:	1a30      	subs	r0, r6, r0
 8010eb2:	f8d8 6000 	ldr.w	r6, [r8]
 8010eb6:	42b0      	cmp	r0, r6
 8010eb8:	dd63      	ble.n	8010f82 <__gethex+0x286>
 8010eba:	1b87      	subs	r7, r0, r6
 8010ebc:	4639      	mov	r1, r7
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f000 fedc 	bl	8011c7c <__any_on>
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	b1a8      	cbz	r0, 8010ef4 <__gethex+0x1f8>
 8010ec8:	1e7b      	subs	r3, r7, #1
 8010eca:	1159      	asrs	r1, r3, #5
 8010ecc:	f003 021f 	and.w	r2, r3, #31
 8010ed0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010ed4:	f04f 0a01 	mov.w	sl, #1
 8010ed8:	fa0a f202 	lsl.w	r2, sl, r2
 8010edc:	420a      	tst	r2, r1
 8010ede:	d009      	beq.n	8010ef4 <__gethex+0x1f8>
 8010ee0:	4553      	cmp	r3, sl
 8010ee2:	dd05      	ble.n	8010ef0 <__gethex+0x1f4>
 8010ee4:	1eb9      	subs	r1, r7, #2
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f000 fec8 	bl	8011c7c <__any_on>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d145      	bne.n	8010f7c <__gethex+0x280>
 8010ef0:	f04f 0a02 	mov.w	sl, #2
 8010ef4:	4639      	mov	r1, r7
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f7ff fe98 	bl	8010c2c <rshift>
 8010efc:	443d      	add	r5, r7
 8010efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f02:	42ab      	cmp	r3, r5
 8010f04:	da4c      	bge.n	8010fa0 <__gethex+0x2a4>
 8010f06:	ee18 0a10 	vmov	r0, s16
 8010f0a:	4621      	mov	r1, r4
 8010f0c:	f000 fa5c 	bl	80113c8 <_Bfree>
 8010f10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f12:	2300      	movs	r3, #0
 8010f14:	6013      	str	r3, [r2, #0]
 8010f16:	27a3      	movs	r7, #163	; 0xa3
 8010f18:	e785      	b.n	8010e26 <__gethex+0x12a>
 8010f1a:	1e73      	subs	r3, r6, #1
 8010f1c:	9a05      	ldr	r2, [sp, #20]
 8010f1e:	9303      	str	r3, [sp, #12]
 8010f20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d019      	beq.n	8010f5c <__gethex+0x260>
 8010f28:	f1bb 0f20 	cmp.w	fp, #32
 8010f2c:	d107      	bne.n	8010f3e <__gethex+0x242>
 8010f2e:	9b02      	ldr	r3, [sp, #8]
 8010f30:	9a00      	ldr	r2, [sp, #0]
 8010f32:	f843 2b04 	str.w	r2, [r3], #4
 8010f36:	9302      	str	r3, [sp, #8]
 8010f38:	2300      	movs	r3, #0
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	469b      	mov	fp, r3
 8010f3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010f42:	f7ff fec5 	bl	8010cd0 <__hexdig_fun>
 8010f46:	9b00      	ldr	r3, [sp, #0]
 8010f48:	f000 000f 	and.w	r0, r0, #15
 8010f4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8010f50:	4303      	orrs	r3, r0
 8010f52:	9300      	str	r3, [sp, #0]
 8010f54:	f10b 0b04 	add.w	fp, fp, #4
 8010f58:	9b03      	ldr	r3, [sp, #12]
 8010f5a:	e00d      	b.n	8010f78 <__gethex+0x27c>
 8010f5c:	9b03      	ldr	r3, [sp, #12]
 8010f5e:	9a06      	ldr	r2, [sp, #24]
 8010f60:	4413      	add	r3, r2
 8010f62:	42bb      	cmp	r3, r7
 8010f64:	d3e0      	bcc.n	8010f28 <__gethex+0x22c>
 8010f66:	4618      	mov	r0, r3
 8010f68:	9901      	ldr	r1, [sp, #4]
 8010f6a:	9307      	str	r3, [sp, #28]
 8010f6c:	4652      	mov	r2, sl
 8010f6e:	f001 fa2f 	bl	80123d0 <strncmp>
 8010f72:	9b07      	ldr	r3, [sp, #28]
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d1d7      	bne.n	8010f28 <__gethex+0x22c>
 8010f78:	461e      	mov	r6, r3
 8010f7a:	e78b      	b.n	8010e94 <__gethex+0x198>
 8010f7c:	f04f 0a03 	mov.w	sl, #3
 8010f80:	e7b8      	b.n	8010ef4 <__gethex+0x1f8>
 8010f82:	da0a      	bge.n	8010f9a <__gethex+0x29e>
 8010f84:	1a37      	subs	r7, r6, r0
 8010f86:	4621      	mov	r1, r4
 8010f88:	ee18 0a10 	vmov	r0, s16
 8010f8c:	463a      	mov	r2, r7
 8010f8e:	f000 fc37 	bl	8011800 <__lshift>
 8010f92:	1bed      	subs	r5, r5, r7
 8010f94:	4604      	mov	r4, r0
 8010f96:	f100 0914 	add.w	r9, r0, #20
 8010f9a:	f04f 0a00 	mov.w	sl, #0
 8010f9e:	e7ae      	b.n	8010efe <__gethex+0x202>
 8010fa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010fa4:	42a8      	cmp	r0, r5
 8010fa6:	dd72      	ble.n	801108e <__gethex+0x392>
 8010fa8:	1b45      	subs	r5, r0, r5
 8010faa:	42ae      	cmp	r6, r5
 8010fac:	dc36      	bgt.n	801101c <__gethex+0x320>
 8010fae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010fb2:	2b02      	cmp	r3, #2
 8010fb4:	d02a      	beq.n	801100c <__gethex+0x310>
 8010fb6:	2b03      	cmp	r3, #3
 8010fb8:	d02c      	beq.n	8011014 <__gethex+0x318>
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d115      	bne.n	8010fea <__gethex+0x2ee>
 8010fbe:	42ae      	cmp	r6, r5
 8010fc0:	d113      	bne.n	8010fea <__gethex+0x2ee>
 8010fc2:	2e01      	cmp	r6, #1
 8010fc4:	d10b      	bne.n	8010fde <__gethex+0x2e2>
 8010fc6:	9a04      	ldr	r2, [sp, #16]
 8010fc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010fcc:	6013      	str	r3, [r2, #0]
 8010fce:	2301      	movs	r3, #1
 8010fd0:	6123      	str	r3, [r4, #16]
 8010fd2:	f8c9 3000 	str.w	r3, [r9]
 8010fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010fd8:	2762      	movs	r7, #98	; 0x62
 8010fda:	601c      	str	r4, [r3, #0]
 8010fdc:	e723      	b.n	8010e26 <__gethex+0x12a>
 8010fde:	1e71      	subs	r1, r6, #1
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	f000 fe4b 	bl	8011c7c <__any_on>
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d1ed      	bne.n	8010fc6 <__gethex+0x2ca>
 8010fea:	ee18 0a10 	vmov	r0, s16
 8010fee:	4621      	mov	r1, r4
 8010ff0:	f000 f9ea 	bl	80113c8 <_Bfree>
 8010ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	6013      	str	r3, [r2, #0]
 8010ffa:	2750      	movs	r7, #80	; 0x50
 8010ffc:	e713      	b.n	8010e26 <__gethex+0x12a>
 8010ffe:	bf00      	nop
 8011000:	080134ec 	.word	0x080134ec
 8011004:	08013470 	.word	0x08013470
 8011008:	08013481 	.word	0x08013481
 801100c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1eb      	bne.n	8010fea <__gethex+0x2ee>
 8011012:	e7d8      	b.n	8010fc6 <__gethex+0x2ca>
 8011014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1d5      	bne.n	8010fc6 <__gethex+0x2ca>
 801101a:	e7e6      	b.n	8010fea <__gethex+0x2ee>
 801101c:	1e6f      	subs	r7, r5, #1
 801101e:	f1ba 0f00 	cmp.w	sl, #0
 8011022:	d131      	bne.n	8011088 <__gethex+0x38c>
 8011024:	b127      	cbz	r7, 8011030 <__gethex+0x334>
 8011026:	4639      	mov	r1, r7
 8011028:	4620      	mov	r0, r4
 801102a:	f000 fe27 	bl	8011c7c <__any_on>
 801102e:	4682      	mov	sl, r0
 8011030:	117b      	asrs	r3, r7, #5
 8011032:	2101      	movs	r1, #1
 8011034:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011038:	f007 071f 	and.w	r7, r7, #31
 801103c:	fa01 f707 	lsl.w	r7, r1, r7
 8011040:	421f      	tst	r7, r3
 8011042:	4629      	mov	r1, r5
 8011044:	4620      	mov	r0, r4
 8011046:	bf18      	it	ne
 8011048:	f04a 0a02 	orrne.w	sl, sl, #2
 801104c:	1b76      	subs	r6, r6, r5
 801104e:	f7ff fded 	bl	8010c2c <rshift>
 8011052:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011056:	2702      	movs	r7, #2
 8011058:	f1ba 0f00 	cmp.w	sl, #0
 801105c:	d048      	beq.n	80110f0 <__gethex+0x3f4>
 801105e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011062:	2b02      	cmp	r3, #2
 8011064:	d015      	beq.n	8011092 <__gethex+0x396>
 8011066:	2b03      	cmp	r3, #3
 8011068:	d017      	beq.n	801109a <__gethex+0x39e>
 801106a:	2b01      	cmp	r3, #1
 801106c:	d109      	bne.n	8011082 <__gethex+0x386>
 801106e:	f01a 0f02 	tst.w	sl, #2
 8011072:	d006      	beq.n	8011082 <__gethex+0x386>
 8011074:	f8d9 0000 	ldr.w	r0, [r9]
 8011078:	ea4a 0a00 	orr.w	sl, sl, r0
 801107c:	f01a 0f01 	tst.w	sl, #1
 8011080:	d10e      	bne.n	80110a0 <__gethex+0x3a4>
 8011082:	f047 0710 	orr.w	r7, r7, #16
 8011086:	e033      	b.n	80110f0 <__gethex+0x3f4>
 8011088:	f04f 0a01 	mov.w	sl, #1
 801108c:	e7d0      	b.n	8011030 <__gethex+0x334>
 801108e:	2701      	movs	r7, #1
 8011090:	e7e2      	b.n	8011058 <__gethex+0x35c>
 8011092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011094:	f1c3 0301 	rsb	r3, r3, #1
 8011098:	9315      	str	r3, [sp, #84]	; 0x54
 801109a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801109c:	2b00      	cmp	r3, #0
 801109e:	d0f0      	beq.n	8011082 <__gethex+0x386>
 80110a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110a4:	f104 0314 	add.w	r3, r4, #20
 80110a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80110ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80110b0:	f04f 0c00 	mov.w	ip, #0
 80110b4:	4618      	mov	r0, r3
 80110b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 80110be:	d01c      	beq.n	80110fa <__gethex+0x3fe>
 80110c0:	3201      	adds	r2, #1
 80110c2:	6002      	str	r2, [r0, #0]
 80110c4:	2f02      	cmp	r7, #2
 80110c6:	f104 0314 	add.w	r3, r4, #20
 80110ca:	d13f      	bne.n	801114c <__gethex+0x450>
 80110cc:	f8d8 2000 	ldr.w	r2, [r8]
 80110d0:	3a01      	subs	r2, #1
 80110d2:	42b2      	cmp	r2, r6
 80110d4:	d10a      	bne.n	80110ec <__gethex+0x3f0>
 80110d6:	1171      	asrs	r1, r6, #5
 80110d8:	2201      	movs	r2, #1
 80110da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110de:	f006 061f 	and.w	r6, r6, #31
 80110e2:	fa02 f606 	lsl.w	r6, r2, r6
 80110e6:	421e      	tst	r6, r3
 80110e8:	bf18      	it	ne
 80110ea:	4617      	movne	r7, r2
 80110ec:	f047 0720 	orr.w	r7, r7, #32
 80110f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110f2:	601c      	str	r4, [r3, #0]
 80110f4:	9b04      	ldr	r3, [sp, #16]
 80110f6:	601d      	str	r5, [r3, #0]
 80110f8:	e695      	b.n	8010e26 <__gethex+0x12a>
 80110fa:	4299      	cmp	r1, r3
 80110fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8011100:	d8d8      	bhi.n	80110b4 <__gethex+0x3b8>
 8011102:	68a3      	ldr	r3, [r4, #8]
 8011104:	459b      	cmp	fp, r3
 8011106:	db19      	blt.n	801113c <__gethex+0x440>
 8011108:	6861      	ldr	r1, [r4, #4]
 801110a:	ee18 0a10 	vmov	r0, s16
 801110e:	3101      	adds	r1, #1
 8011110:	f000 f91a 	bl	8011348 <_Balloc>
 8011114:	4681      	mov	r9, r0
 8011116:	b918      	cbnz	r0, 8011120 <__gethex+0x424>
 8011118:	4b1a      	ldr	r3, [pc, #104]	; (8011184 <__gethex+0x488>)
 801111a:	4602      	mov	r2, r0
 801111c:	2184      	movs	r1, #132	; 0x84
 801111e:	e6a8      	b.n	8010e72 <__gethex+0x176>
 8011120:	6922      	ldr	r2, [r4, #16]
 8011122:	3202      	adds	r2, #2
 8011124:	f104 010c 	add.w	r1, r4, #12
 8011128:	0092      	lsls	r2, r2, #2
 801112a:	300c      	adds	r0, #12
 801112c:	f7fd fafc 	bl	800e728 <memcpy>
 8011130:	4621      	mov	r1, r4
 8011132:	ee18 0a10 	vmov	r0, s16
 8011136:	f000 f947 	bl	80113c8 <_Bfree>
 801113a:	464c      	mov	r4, r9
 801113c:	6923      	ldr	r3, [r4, #16]
 801113e:	1c5a      	adds	r2, r3, #1
 8011140:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011144:	6122      	str	r2, [r4, #16]
 8011146:	2201      	movs	r2, #1
 8011148:	615a      	str	r2, [r3, #20]
 801114a:	e7bb      	b.n	80110c4 <__gethex+0x3c8>
 801114c:	6922      	ldr	r2, [r4, #16]
 801114e:	455a      	cmp	r2, fp
 8011150:	dd0b      	ble.n	801116a <__gethex+0x46e>
 8011152:	2101      	movs	r1, #1
 8011154:	4620      	mov	r0, r4
 8011156:	f7ff fd69 	bl	8010c2c <rshift>
 801115a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801115e:	3501      	adds	r5, #1
 8011160:	42ab      	cmp	r3, r5
 8011162:	f6ff aed0 	blt.w	8010f06 <__gethex+0x20a>
 8011166:	2701      	movs	r7, #1
 8011168:	e7c0      	b.n	80110ec <__gethex+0x3f0>
 801116a:	f016 061f 	ands.w	r6, r6, #31
 801116e:	d0fa      	beq.n	8011166 <__gethex+0x46a>
 8011170:	449a      	add	sl, r3
 8011172:	f1c6 0620 	rsb	r6, r6, #32
 8011176:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801117a:	f000 f9db 	bl	8011534 <__hi0bits>
 801117e:	42b0      	cmp	r0, r6
 8011180:	dbe7      	blt.n	8011152 <__gethex+0x456>
 8011182:	e7f0      	b.n	8011166 <__gethex+0x46a>
 8011184:	08013470 	.word	0x08013470

08011188 <L_shift>:
 8011188:	f1c2 0208 	rsb	r2, r2, #8
 801118c:	0092      	lsls	r2, r2, #2
 801118e:	b570      	push	{r4, r5, r6, lr}
 8011190:	f1c2 0620 	rsb	r6, r2, #32
 8011194:	6843      	ldr	r3, [r0, #4]
 8011196:	6804      	ldr	r4, [r0, #0]
 8011198:	fa03 f506 	lsl.w	r5, r3, r6
 801119c:	432c      	orrs	r4, r5
 801119e:	40d3      	lsrs	r3, r2
 80111a0:	6004      	str	r4, [r0, #0]
 80111a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80111a6:	4288      	cmp	r0, r1
 80111a8:	d3f4      	bcc.n	8011194 <L_shift+0xc>
 80111aa:	bd70      	pop	{r4, r5, r6, pc}

080111ac <__match>:
 80111ac:	b530      	push	{r4, r5, lr}
 80111ae:	6803      	ldr	r3, [r0, #0]
 80111b0:	3301      	adds	r3, #1
 80111b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111b6:	b914      	cbnz	r4, 80111be <__match+0x12>
 80111b8:	6003      	str	r3, [r0, #0]
 80111ba:	2001      	movs	r0, #1
 80111bc:	bd30      	pop	{r4, r5, pc}
 80111be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80111c6:	2d19      	cmp	r5, #25
 80111c8:	bf98      	it	ls
 80111ca:	3220      	addls	r2, #32
 80111cc:	42a2      	cmp	r2, r4
 80111ce:	d0f0      	beq.n	80111b2 <__match+0x6>
 80111d0:	2000      	movs	r0, #0
 80111d2:	e7f3      	b.n	80111bc <__match+0x10>

080111d4 <__hexnan>:
 80111d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d8:	680b      	ldr	r3, [r1, #0]
 80111da:	6801      	ldr	r1, [r0, #0]
 80111dc:	115e      	asrs	r6, r3, #5
 80111de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80111e2:	f013 031f 	ands.w	r3, r3, #31
 80111e6:	b087      	sub	sp, #28
 80111e8:	bf18      	it	ne
 80111ea:	3604      	addne	r6, #4
 80111ec:	2500      	movs	r5, #0
 80111ee:	1f37      	subs	r7, r6, #4
 80111f0:	4682      	mov	sl, r0
 80111f2:	4690      	mov	r8, r2
 80111f4:	9301      	str	r3, [sp, #4]
 80111f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80111fa:	46b9      	mov	r9, r7
 80111fc:	463c      	mov	r4, r7
 80111fe:	9502      	str	r5, [sp, #8]
 8011200:	46ab      	mov	fp, r5
 8011202:	784a      	ldrb	r2, [r1, #1]
 8011204:	1c4b      	adds	r3, r1, #1
 8011206:	9303      	str	r3, [sp, #12]
 8011208:	b342      	cbz	r2, 801125c <__hexnan+0x88>
 801120a:	4610      	mov	r0, r2
 801120c:	9105      	str	r1, [sp, #20]
 801120e:	9204      	str	r2, [sp, #16]
 8011210:	f7ff fd5e 	bl	8010cd0 <__hexdig_fun>
 8011214:	2800      	cmp	r0, #0
 8011216:	d14f      	bne.n	80112b8 <__hexnan+0xe4>
 8011218:	9a04      	ldr	r2, [sp, #16]
 801121a:	9905      	ldr	r1, [sp, #20]
 801121c:	2a20      	cmp	r2, #32
 801121e:	d818      	bhi.n	8011252 <__hexnan+0x7e>
 8011220:	9b02      	ldr	r3, [sp, #8]
 8011222:	459b      	cmp	fp, r3
 8011224:	dd13      	ble.n	801124e <__hexnan+0x7a>
 8011226:	454c      	cmp	r4, r9
 8011228:	d206      	bcs.n	8011238 <__hexnan+0x64>
 801122a:	2d07      	cmp	r5, #7
 801122c:	dc04      	bgt.n	8011238 <__hexnan+0x64>
 801122e:	462a      	mov	r2, r5
 8011230:	4649      	mov	r1, r9
 8011232:	4620      	mov	r0, r4
 8011234:	f7ff ffa8 	bl	8011188 <L_shift>
 8011238:	4544      	cmp	r4, r8
 801123a:	d950      	bls.n	80112de <__hexnan+0x10a>
 801123c:	2300      	movs	r3, #0
 801123e:	f1a4 0904 	sub.w	r9, r4, #4
 8011242:	f844 3c04 	str.w	r3, [r4, #-4]
 8011246:	f8cd b008 	str.w	fp, [sp, #8]
 801124a:	464c      	mov	r4, r9
 801124c:	461d      	mov	r5, r3
 801124e:	9903      	ldr	r1, [sp, #12]
 8011250:	e7d7      	b.n	8011202 <__hexnan+0x2e>
 8011252:	2a29      	cmp	r2, #41	; 0x29
 8011254:	d156      	bne.n	8011304 <__hexnan+0x130>
 8011256:	3102      	adds	r1, #2
 8011258:	f8ca 1000 	str.w	r1, [sl]
 801125c:	f1bb 0f00 	cmp.w	fp, #0
 8011260:	d050      	beq.n	8011304 <__hexnan+0x130>
 8011262:	454c      	cmp	r4, r9
 8011264:	d206      	bcs.n	8011274 <__hexnan+0xa0>
 8011266:	2d07      	cmp	r5, #7
 8011268:	dc04      	bgt.n	8011274 <__hexnan+0xa0>
 801126a:	462a      	mov	r2, r5
 801126c:	4649      	mov	r1, r9
 801126e:	4620      	mov	r0, r4
 8011270:	f7ff ff8a 	bl	8011188 <L_shift>
 8011274:	4544      	cmp	r4, r8
 8011276:	d934      	bls.n	80112e2 <__hexnan+0x10e>
 8011278:	f1a8 0204 	sub.w	r2, r8, #4
 801127c:	4623      	mov	r3, r4
 801127e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011282:	f842 1f04 	str.w	r1, [r2, #4]!
 8011286:	429f      	cmp	r7, r3
 8011288:	d2f9      	bcs.n	801127e <__hexnan+0xaa>
 801128a:	1b3b      	subs	r3, r7, r4
 801128c:	f023 0303 	bic.w	r3, r3, #3
 8011290:	3304      	adds	r3, #4
 8011292:	3401      	adds	r4, #1
 8011294:	3e03      	subs	r6, #3
 8011296:	42b4      	cmp	r4, r6
 8011298:	bf88      	it	hi
 801129a:	2304      	movhi	r3, #4
 801129c:	4443      	add	r3, r8
 801129e:	2200      	movs	r2, #0
 80112a0:	f843 2b04 	str.w	r2, [r3], #4
 80112a4:	429f      	cmp	r7, r3
 80112a6:	d2fb      	bcs.n	80112a0 <__hexnan+0xcc>
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	b91b      	cbnz	r3, 80112b4 <__hexnan+0xe0>
 80112ac:	4547      	cmp	r7, r8
 80112ae:	d127      	bne.n	8011300 <__hexnan+0x12c>
 80112b0:	2301      	movs	r3, #1
 80112b2:	603b      	str	r3, [r7, #0]
 80112b4:	2005      	movs	r0, #5
 80112b6:	e026      	b.n	8011306 <__hexnan+0x132>
 80112b8:	3501      	adds	r5, #1
 80112ba:	2d08      	cmp	r5, #8
 80112bc:	f10b 0b01 	add.w	fp, fp, #1
 80112c0:	dd06      	ble.n	80112d0 <__hexnan+0xfc>
 80112c2:	4544      	cmp	r4, r8
 80112c4:	d9c3      	bls.n	801124e <__hexnan+0x7a>
 80112c6:	2300      	movs	r3, #0
 80112c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80112cc:	2501      	movs	r5, #1
 80112ce:	3c04      	subs	r4, #4
 80112d0:	6822      	ldr	r2, [r4, #0]
 80112d2:	f000 000f 	and.w	r0, r0, #15
 80112d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80112da:	6022      	str	r2, [r4, #0]
 80112dc:	e7b7      	b.n	801124e <__hexnan+0x7a>
 80112de:	2508      	movs	r5, #8
 80112e0:	e7b5      	b.n	801124e <__hexnan+0x7a>
 80112e2:	9b01      	ldr	r3, [sp, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d0df      	beq.n	80112a8 <__hexnan+0xd4>
 80112e8:	f04f 32ff 	mov.w	r2, #4294967295
 80112ec:	f1c3 0320 	rsb	r3, r3, #32
 80112f0:	fa22 f303 	lsr.w	r3, r2, r3
 80112f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80112f8:	401a      	ands	r2, r3
 80112fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80112fe:	e7d3      	b.n	80112a8 <__hexnan+0xd4>
 8011300:	3f04      	subs	r7, #4
 8011302:	e7d1      	b.n	80112a8 <__hexnan+0xd4>
 8011304:	2004      	movs	r0, #4
 8011306:	b007      	add	sp, #28
 8011308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801130c <_localeconv_r>:
 801130c:	4800      	ldr	r0, [pc, #0]	; (8011310 <_localeconv_r+0x4>)
 801130e:	4770      	bx	lr
 8011310:	20000180 	.word	0x20000180

08011314 <malloc>:
 8011314:	4b02      	ldr	r3, [pc, #8]	; (8011320 <malloc+0xc>)
 8011316:	4601      	mov	r1, r0
 8011318:	6818      	ldr	r0, [r3, #0]
 801131a:	f000 bd2f 	b.w	8011d7c <_malloc_r>
 801131e:	bf00      	nop
 8011320:	20000028 	.word	0x20000028

08011324 <__ascii_mbtowc>:
 8011324:	b082      	sub	sp, #8
 8011326:	b901      	cbnz	r1, 801132a <__ascii_mbtowc+0x6>
 8011328:	a901      	add	r1, sp, #4
 801132a:	b142      	cbz	r2, 801133e <__ascii_mbtowc+0x1a>
 801132c:	b14b      	cbz	r3, 8011342 <__ascii_mbtowc+0x1e>
 801132e:	7813      	ldrb	r3, [r2, #0]
 8011330:	600b      	str	r3, [r1, #0]
 8011332:	7812      	ldrb	r2, [r2, #0]
 8011334:	1e10      	subs	r0, r2, #0
 8011336:	bf18      	it	ne
 8011338:	2001      	movne	r0, #1
 801133a:	b002      	add	sp, #8
 801133c:	4770      	bx	lr
 801133e:	4610      	mov	r0, r2
 8011340:	e7fb      	b.n	801133a <__ascii_mbtowc+0x16>
 8011342:	f06f 0001 	mvn.w	r0, #1
 8011346:	e7f8      	b.n	801133a <__ascii_mbtowc+0x16>

08011348 <_Balloc>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801134c:	4604      	mov	r4, r0
 801134e:	460d      	mov	r5, r1
 8011350:	b976      	cbnz	r6, 8011370 <_Balloc+0x28>
 8011352:	2010      	movs	r0, #16
 8011354:	f7ff ffde 	bl	8011314 <malloc>
 8011358:	4602      	mov	r2, r0
 801135a:	6260      	str	r0, [r4, #36]	; 0x24
 801135c:	b920      	cbnz	r0, 8011368 <_Balloc+0x20>
 801135e:	4b18      	ldr	r3, [pc, #96]	; (80113c0 <_Balloc+0x78>)
 8011360:	4818      	ldr	r0, [pc, #96]	; (80113c4 <_Balloc+0x7c>)
 8011362:	2166      	movs	r1, #102	; 0x66
 8011364:	f7fe fdb8 	bl	800fed8 <__assert_func>
 8011368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801136c:	6006      	str	r6, [r0, #0]
 801136e:	60c6      	str	r6, [r0, #12]
 8011370:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011372:	68f3      	ldr	r3, [r6, #12]
 8011374:	b183      	cbz	r3, 8011398 <_Balloc+0x50>
 8011376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801137e:	b9b8      	cbnz	r0, 80113b0 <_Balloc+0x68>
 8011380:	2101      	movs	r1, #1
 8011382:	fa01 f605 	lsl.w	r6, r1, r5
 8011386:	1d72      	adds	r2, r6, #5
 8011388:	0092      	lsls	r2, r2, #2
 801138a:	4620      	mov	r0, r4
 801138c:	f000 fc97 	bl	8011cbe <_calloc_r>
 8011390:	b160      	cbz	r0, 80113ac <_Balloc+0x64>
 8011392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011396:	e00e      	b.n	80113b6 <_Balloc+0x6e>
 8011398:	2221      	movs	r2, #33	; 0x21
 801139a:	2104      	movs	r1, #4
 801139c:	4620      	mov	r0, r4
 801139e:	f000 fc8e 	bl	8011cbe <_calloc_r>
 80113a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113a4:	60f0      	str	r0, [r6, #12]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d1e4      	bne.n	8011376 <_Balloc+0x2e>
 80113ac:	2000      	movs	r0, #0
 80113ae:	bd70      	pop	{r4, r5, r6, pc}
 80113b0:	6802      	ldr	r2, [r0, #0]
 80113b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113b6:	2300      	movs	r3, #0
 80113b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113bc:	e7f7      	b.n	80113ae <_Balloc+0x66>
 80113be:	bf00      	nop
 80113c0:	08013350 	.word	0x08013350
 80113c4:	08013500 	.word	0x08013500

080113c8 <_Bfree>:
 80113c8:	b570      	push	{r4, r5, r6, lr}
 80113ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80113cc:	4605      	mov	r5, r0
 80113ce:	460c      	mov	r4, r1
 80113d0:	b976      	cbnz	r6, 80113f0 <_Bfree+0x28>
 80113d2:	2010      	movs	r0, #16
 80113d4:	f7ff ff9e 	bl	8011314 <malloc>
 80113d8:	4602      	mov	r2, r0
 80113da:	6268      	str	r0, [r5, #36]	; 0x24
 80113dc:	b920      	cbnz	r0, 80113e8 <_Bfree+0x20>
 80113de:	4b09      	ldr	r3, [pc, #36]	; (8011404 <_Bfree+0x3c>)
 80113e0:	4809      	ldr	r0, [pc, #36]	; (8011408 <_Bfree+0x40>)
 80113e2:	218a      	movs	r1, #138	; 0x8a
 80113e4:	f7fe fd78 	bl	800fed8 <__assert_func>
 80113e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113ec:	6006      	str	r6, [r0, #0]
 80113ee:	60c6      	str	r6, [r0, #12]
 80113f0:	b13c      	cbz	r4, 8011402 <_Bfree+0x3a>
 80113f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80113f4:	6862      	ldr	r2, [r4, #4]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113fc:	6021      	str	r1, [r4, #0]
 80113fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011402:	bd70      	pop	{r4, r5, r6, pc}
 8011404:	08013350 	.word	0x08013350
 8011408:	08013500 	.word	0x08013500

0801140c <__multadd>:
 801140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011410:	690e      	ldr	r6, [r1, #16]
 8011412:	4607      	mov	r7, r0
 8011414:	4698      	mov	r8, r3
 8011416:	460c      	mov	r4, r1
 8011418:	f101 0014 	add.w	r0, r1, #20
 801141c:	2300      	movs	r3, #0
 801141e:	6805      	ldr	r5, [r0, #0]
 8011420:	b2a9      	uxth	r1, r5
 8011422:	fb02 8101 	mla	r1, r2, r1, r8
 8011426:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801142a:	0c2d      	lsrs	r5, r5, #16
 801142c:	fb02 c505 	mla	r5, r2, r5, ip
 8011430:	b289      	uxth	r1, r1
 8011432:	3301      	adds	r3, #1
 8011434:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011438:	429e      	cmp	r6, r3
 801143a:	f840 1b04 	str.w	r1, [r0], #4
 801143e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011442:	dcec      	bgt.n	801141e <__multadd+0x12>
 8011444:	f1b8 0f00 	cmp.w	r8, #0
 8011448:	d022      	beq.n	8011490 <__multadd+0x84>
 801144a:	68a3      	ldr	r3, [r4, #8]
 801144c:	42b3      	cmp	r3, r6
 801144e:	dc19      	bgt.n	8011484 <__multadd+0x78>
 8011450:	6861      	ldr	r1, [r4, #4]
 8011452:	4638      	mov	r0, r7
 8011454:	3101      	adds	r1, #1
 8011456:	f7ff ff77 	bl	8011348 <_Balloc>
 801145a:	4605      	mov	r5, r0
 801145c:	b928      	cbnz	r0, 801146a <__multadd+0x5e>
 801145e:	4602      	mov	r2, r0
 8011460:	4b0d      	ldr	r3, [pc, #52]	; (8011498 <__multadd+0x8c>)
 8011462:	480e      	ldr	r0, [pc, #56]	; (801149c <__multadd+0x90>)
 8011464:	21b5      	movs	r1, #181	; 0xb5
 8011466:	f7fe fd37 	bl	800fed8 <__assert_func>
 801146a:	6922      	ldr	r2, [r4, #16]
 801146c:	3202      	adds	r2, #2
 801146e:	f104 010c 	add.w	r1, r4, #12
 8011472:	0092      	lsls	r2, r2, #2
 8011474:	300c      	adds	r0, #12
 8011476:	f7fd f957 	bl	800e728 <memcpy>
 801147a:	4621      	mov	r1, r4
 801147c:	4638      	mov	r0, r7
 801147e:	f7ff ffa3 	bl	80113c8 <_Bfree>
 8011482:	462c      	mov	r4, r5
 8011484:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011488:	3601      	adds	r6, #1
 801148a:	f8c3 8014 	str.w	r8, [r3, #20]
 801148e:	6126      	str	r6, [r4, #16]
 8011490:	4620      	mov	r0, r4
 8011492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011496:	bf00      	nop
 8011498:	08013470 	.word	0x08013470
 801149c:	08013500 	.word	0x08013500

080114a0 <__s2b>:
 80114a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a4:	460c      	mov	r4, r1
 80114a6:	4615      	mov	r5, r2
 80114a8:	461f      	mov	r7, r3
 80114aa:	2209      	movs	r2, #9
 80114ac:	3308      	adds	r3, #8
 80114ae:	4606      	mov	r6, r0
 80114b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80114b4:	2100      	movs	r1, #0
 80114b6:	2201      	movs	r2, #1
 80114b8:	429a      	cmp	r2, r3
 80114ba:	db09      	blt.n	80114d0 <__s2b+0x30>
 80114bc:	4630      	mov	r0, r6
 80114be:	f7ff ff43 	bl	8011348 <_Balloc>
 80114c2:	b940      	cbnz	r0, 80114d6 <__s2b+0x36>
 80114c4:	4602      	mov	r2, r0
 80114c6:	4b19      	ldr	r3, [pc, #100]	; (801152c <__s2b+0x8c>)
 80114c8:	4819      	ldr	r0, [pc, #100]	; (8011530 <__s2b+0x90>)
 80114ca:	21ce      	movs	r1, #206	; 0xce
 80114cc:	f7fe fd04 	bl	800fed8 <__assert_func>
 80114d0:	0052      	lsls	r2, r2, #1
 80114d2:	3101      	adds	r1, #1
 80114d4:	e7f0      	b.n	80114b8 <__s2b+0x18>
 80114d6:	9b08      	ldr	r3, [sp, #32]
 80114d8:	6143      	str	r3, [r0, #20]
 80114da:	2d09      	cmp	r5, #9
 80114dc:	f04f 0301 	mov.w	r3, #1
 80114e0:	6103      	str	r3, [r0, #16]
 80114e2:	dd16      	ble.n	8011512 <__s2b+0x72>
 80114e4:	f104 0909 	add.w	r9, r4, #9
 80114e8:	46c8      	mov	r8, r9
 80114ea:	442c      	add	r4, r5
 80114ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80114f0:	4601      	mov	r1, r0
 80114f2:	3b30      	subs	r3, #48	; 0x30
 80114f4:	220a      	movs	r2, #10
 80114f6:	4630      	mov	r0, r6
 80114f8:	f7ff ff88 	bl	801140c <__multadd>
 80114fc:	45a0      	cmp	r8, r4
 80114fe:	d1f5      	bne.n	80114ec <__s2b+0x4c>
 8011500:	f1a5 0408 	sub.w	r4, r5, #8
 8011504:	444c      	add	r4, r9
 8011506:	1b2d      	subs	r5, r5, r4
 8011508:	1963      	adds	r3, r4, r5
 801150a:	42bb      	cmp	r3, r7
 801150c:	db04      	blt.n	8011518 <__s2b+0x78>
 801150e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011512:	340a      	adds	r4, #10
 8011514:	2509      	movs	r5, #9
 8011516:	e7f6      	b.n	8011506 <__s2b+0x66>
 8011518:	f814 3b01 	ldrb.w	r3, [r4], #1
 801151c:	4601      	mov	r1, r0
 801151e:	3b30      	subs	r3, #48	; 0x30
 8011520:	220a      	movs	r2, #10
 8011522:	4630      	mov	r0, r6
 8011524:	f7ff ff72 	bl	801140c <__multadd>
 8011528:	e7ee      	b.n	8011508 <__s2b+0x68>
 801152a:	bf00      	nop
 801152c:	08013470 	.word	0x08013470
 8011530:	08013500 	.word	0x08013500

08011534 <__hi0bits>:
 8011534:	0c03      	lsrs	r3, r0, #16
 8011536:	041b      	lsls	r3, r3, #16
 8011538:	b9d3      	cbnz	r3, 8011570 <__hi0bits+0x3c>
 801153a:	0400      	lsls	r0, r0, #16
 801153c:	2310      	movs	r3, #16
 801153e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011542:	bf04      	itt	eq
 8011544:	0200      	lsleq	r0, r0, #8
 8011546:	3308      	addeq	r3, #8
 8011548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801154c:	bf04      	itt	eq
 801154e:	0100      	lsleq	r0, r0, #4
 8011550:	3304      	addeq	r3, #4
 8011552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011556:	bf04      	itt	eq
 8011558:	0080      	lsleq	r0, r0, #2
 801155a:	3302      	addeq	r3, #2
 801155c:	2800      	cmp	r0, #0
 801155e:	db05      	blt.n	801156c <__hi0bits+0x38>
 8011560:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011564:	f103 0301 	add.w	r3, r3, #1
 8011568:	bf08      	it	eq
 801156a:	2320      	moveq	r3, #32
 801156c:	4618      	mov	r0, r3
 801156e:	4770      	bx	lr
 8011570:	2300      	movs	r3, #0
 8011572:	e7e4      	b.n	801153e <__hi0bits+0xa>

08011574 <__lo0bits>:
 8011574:	6803      	ldr	r3, [r0, #0]
 8011576:	f013 0207 	ands.w	r2, r3, #7
 801157a:	4601      	mov	r1, r0
 801157c:	d00b      	beq.n	8011596 <__lo0bits+0x22>
 801157e:	07da      	lsls	r2, r3, #31
 8011580:	d424      	bmi.n	80115cc <__lo0bits+0x58>
 8011582:	0798      	lsls	r0, r3, #30
 8011584:	bf49      	itett	mi
 8011586:	085b      	lsrmi	r3, r3, #1
 8011588:	089b      	lsrpl	r3, r3, #2
 801158a:	2001      	movmi	r0, #1
 801158c:	600b      	strmi	r3, [r1, #0]
 801158e:	bf5c      	itt	pl
 8011590:	600b      	strpl	r3, [r1, #0]
 8011592:	2002      	movpl	r0, #2
 8011594:	4770      	bx	lr
 8011596:	b298      	uxth	r0, r3
 8011598:	b9b0      	cbnz	r0, 80115c8 <__lo0bits+0x54>
 801159a:	0c1b      	lsrs	r3, r3, #16
 801159c:	2010      	movs	r0, #16
 801159e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80115a2:	bf04      	itt	eq
 80115a4:	0a1b      	lsreq	r3, r3, #8
 80115a6:	3008      	addeq	r0, #8
 80115a8:	071a      	lsls	r2, r3, #28
 80115aa:	bf04      	itt	eq
 80115ac:	091b      	lsreq	r3, r3, #4
 80115ae:	3004      	addeq	r0, #4
 80115b0:	079a      	lsls	r2, r3, #30
 80115b2:	bf04      	itt	eq
 80115b4:	089b      	lsreq	r3, r3, #2
 80115b6:	3002      	addeq	r0, #2
 80115b8:	07da      	lsls	r2, r3, #31
 80115ba:	d403      	bmi.n	80115c4 <__lo0bits+0x50>
 80115bc:	085b      	lsrs	r3, r3, #1
 80115be:	f100 0001 	add.w	r0, r0, #1
 80115c2:	d005      	beq.n	80115d0 <__lo0bits+0x5c>
 80115c4:	600b      	str	r3, [r1, #0]
 80115c6:	4770      	bx	lr
 80115c8:	4610      	mov	r0, r2
 80115ca:	e7e8      	b.n	801159e <__lo0bits+0x2a>
 80115cc:	2000      	movs	r0, #0
 80115ce:	4770      	bx	lr
 80115d0:	2020      	movs	r0, #32
 80115d2:	4770      	bx	lr

080115d4 <__i2b>:
 80115d4:	b510      	push	{r4, lr}
 80115d6:	460c      	mov	r4, r1
 80115d8:	2101      	movs	r1, #1
 80115da:	f7ff feb5 	bl	8011348 <_Balloc>
 80115de:	4602      	mov	r2, r0
 80115e0:	b928      	cbnz	r0, 80115ee <__i2b+0x1a>
 80115e2:	4b05      	ldr	r3, [pc, #20]	; (80115f8 <__i2b+0x24>)
 80115e4:	4805      	ldr	r0, [pc, #20]	; (80115fc <__i2b+0x28>)
 80115e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80115ea:	f7fe fc75 	bl	800fed8 <__assert_func>
 80115ee:	2301      	movs	r3, #1
 80115f0:	6144      	str	r4, [r0, #20]
 80115f2:	6103      	str	r3, [r0, #16]
 80115f4:	bd10      	pop	{r4, pc}
 80115f6:	bf00      	nop
 80115f8:	08013470 	.word	0x08013470
 80115fc:	08013500 	.word	0x08013500

08011600 <__multiply>:
 8011600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011604:	4614      	mov	r4, r2
 8011606:	690a      	ldr	r2, [r1, #16]
 8011608:	6923      	ldr	r3, [r4, #16]
 801160a:	429a      	cmp	r2, r3
 801160c:	bfb8      	it	lt
 801160e:	460b      	movlt	r3, r1
 8011610:	460d      	mov	r5, r1
 8011612:	bfbc      	itt	lt
 8011614:	4625      	movlt	r5, r4
 8011616:	461c      	movlt	r4, r3
 8011618:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801161c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011620:	68ab      	ldr	r3, [r5, #8]
 8011622:	6869      	ldr	r1, [r5, #4]
 8011624:	eb0a 0709 	add.w	r7, sl, r9
 8011628:	42bb      	cmp	r3, r7
 801162a:	b085      	sub	sp, #20
 801162c:	bfb8      	it	lt
 801162e:	3101      	addlt	r1, #1
 8011630:	f7ff fe8a 	bl	8011348 <_Balloc>
 8011634:	b930      	cbnz	r0, 8011644 <__multiply+0x44>
 8011636:	4602      	mov	r2, r0
 8011638:	4b42      	ldr	r3, [pc, #264]	; (8011744 <__multiply+0x144>)
 801163a:	4843      	ldr	r0, [pc, #268]	; (8011748 <__multiply+0x148>)
 801163c:	f240 115d 	movw	r1, #349	; 0x15d
 8011640:	f7fe fc4a 	bl	800fed8 <__assert_func>
 8011644:	f100 0614 	add.w	r6, r0, #20
 8011648:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801164c:	4633      	mov	r3, r6
 801164e:	2200      	movs	r2, #0
 8011650:	4543      	cmp	r3, r8
 8011652:	d31e      	bcc.n	8011692 <__multiply+0x92>
 8011654:	f105 0c14 	add.w	ip, r5, #20
 8011658:	f104 0314 	add.w	r3, r4, #20
 801165c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011660:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011664:	9202      	str	r2, [sp, #8]
 8011666:	ebac 0205 	sub.w	r2, ip, r5
 801166a:	3a15      	subs	r2, #21
 801166c:	f022 0203 	bic.w	r2, r2, #3
 8011670:	3204      	adds	r2, #4
 8011672:	f105 0115 	add.w	r1, r5, #21
 8011676:	458c      	cmp	ip, r1
 8011678:	bf38      	it	cc
 801167a:	2204      	movcc	r2, #4
 801167c:	9201      	str	r2, [sp, #4]
 801167e:	9a02      	ldr	r2, [sp, #8]
 8011680:	9303      	str	r3, [sp, #12]
 8011682:	429a      	cmp	r2, r3
 8011684:	d808      	bhi.n	8011698 <__multiply+0x98>
 8011686:	2f00      	cmp	r7, #0
 8011688:	dc55      	bgt.n	8011736 <__multiply+0x136>
 801168a:	6107      	str	r7, [r0, #16]
 801168c:	b005      	add	sp, #20
 801168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011692:	f843 2b04 	str.w	r2, [r3], #4
 8011696:	e7db      	b.n	8011650 <__multiply+0x50>
 8011698:	f8b3 a000 	ldrh.w	sl, [r3]
 801169c:	f1ba 0f00 	cmp.w	sl, #0
 80116a0:	d020      	beq.n	80116e4 <__multiply+0xe4>
 80116a2:	f105 0e14 	add.w	lr, r5, #20
 80116a6:	46b1      	mov	r9, r6
 80116a8:	2200      	movs	r2, #0
 80116aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80116ae:	f8d9 b000 	ldr.w	fp, [r9]
 80116b2:	b2a1      	uxth	r1, r4
 80116b4:	fa1f fb8b 	uxth.w	fp, fp
 80116b8:	fb0a b101 	mla	r1, sl, r1, fp
 80116bc:	4411      	add	r1, r2
 80116be:	f8d9 2000 	ldr.w	r2, [r9]
 80116c2:	0c24      	lsrs	r4, r4, #16
 80116c4:	0c12      	lsrs	r2, r2, #16
 80116c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80116ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80116ce:	b289      	uxth	r1, r1
 80116d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80116d4:	45f4      	cmp	ip, lr
 80116d6:	f849 1b04 	str.w	r1, [r9], #4
 80116da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80116de:	d8e4      	bhi.n	80116aa <__multiply+0xaa>
 80116e0:	9901      	ldr	r1, [sp, #4]
 80116e2:	5072      	str	r2, [r6, r1]
 80116e4:	9a03      	ldr	r2, [sp, #12]
 80116e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80116ea:	3304      	adds	r3, #4
 80116ec:	f1b9 0f00 	cmp.w	r9, #0
 80116f0:	d01f      	beq.n	8011732 <__multiply+0x132>
 80116f2:	6834      	ldr	r4, [r6, #0]
 80116f4:	f105 0114 	add.w	r1, r5, #20
 80116f8:	46b6      	mov	lr, r6
 80116fa:	f04f 0a00 	mov.w	sl, #0
 80116fe:	880a      	ldrh	r2, [r1, #0]
 8011700:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011704:	fb09 b202 	mla	r2, r9, r2, fp
 8011708:	4492      	add	sl, r2
 801170a:	b2a4      	uxth	r4, r4
 801170c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011710:	f84e 4b04 	str.w	r4, [lr], #4
 8011714:	f851 4b04 	ldr.w	r4, [r1], #4
 8011718:	f8be 2000 	ldrh.w	r2, [lr]
 801171c:	0c24      	lsrs	r4, r4, #16
 801171e:	fb09 2404 	mla	r4, r9, r4, r2
 8011722:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011726:	458c      	cmp	ip, r1
 8011728:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801172c:	d8e7      	bhi.n	80116fe <__multiply+0xfe>
 801172e:	9a01      	ldr	r2, [sp, #4]
 8011730:	50b4      	str	r4, [r6, r2]
 8011732:	3604      	adds	r6, #4
 8011734:	e7a3      	b.n	801167e <__multiply+0x7e>
 8011736:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1a5      	bne.n	801168a <__multiply+0x8a>
 801173e:	3f01      	subs	r7, #1
 8011740:	e7a1      	b.n	8011686 <__multiply+0x86>
 8011742:	bf00      	nop
 8011744:	08013470 	.word	0x08013470
 8011748:	08013500 	.word	0x08013500

0801174c <__pow5mult>:
 801174c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011750:	4615      	mov	r5, r2
 8011752:	f012 0203 	ands.w	r2, r2, #3
 8011756:	4606      	mov	r6, r0
 8011758:	460f      	mov	r7, r1
 801175a:	d007      	beq.n	801176c <__pow5mult+0x20>
 801175c:	4c25      	ldr	r4, [pc, #148]	; (80117f4 <__pow5mult+0xa8>)
 801175e:	3a01      	subs	r2, #1
 8011760:	2300      	movs	r3, #0
 8011762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011766:	f7ff fe51 	bl	801140c <__multadd>
 801176a:	4607      	mov	r7, r0
 801176c:	10ad      	asrs	r5, r5, #2
 801176e:	d03d      	beq.n	80117ec <__pow5mult+0xa0>
 8011770:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011772:	b97c      	cbnz	r4, 8011794 <__pow5mult+0x48>
 8011774:	2010      	movs	r0, #16
 8011776:	f7ff fdcd 	bl	8011314 <malloc>
 801177a:	4602      	mov	r2, r0
 801177c:	6270      	str	r0, [r6, #36]	; 0x24
 801177e:	b928      	cbnz	r0, 801178c <__pow5mult+0x40>
 8011780:	4b1d      	ldr	r3, [pc, #116]	; (80117f8 <__pow5mult+0xac>)
 8011782:	481e      	ldr	r0, [pc, #120]	; (80117fc <__pow5mult+0xb0>)
 8011784:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011788:	f7fe fba6 	bl	800fed8 <__assert_func>
 801178c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011790:	6004      	str	r4, [r0, #0]
 8011792:	60c4      	str	r4, [r0, #12]
 8011794:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801179c:	b94c      	cbnz	r4, 80117b2 <__pow5mult+0x66>
 801179e:	f240 2171 	movw	r1, #625	; 0x271
 80117a2:	4630      	mov	r0, r6
 80117a4:	f7ff ff16 	bl	80115d4 <__i2b>
 80117a8:	2300      	movs	r3, #0
 80117aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80117ae:	4604      	mov	r4, r0
 80117b0:	6003      	str	r3, [r0, #0]
 80117b2:	f04f 0900 	mov.w	r9, #0
 80117b6:	07eb      	lsls	r3, r5, #31
 80117b8:	d50a      	bpl.n	80117d0 <__pow5mult+0x84>
 80117ba:	4639      	mov	r1, r7
 80117bc:	4622      	mov	r2, r4
 80117be:	4630      	mov	r0, r6
 80117c0:	f7ff ff1e 	bl	8011600 <__multiply>
 80117c4:	4639      	mov	r1, r7
 80117c6:	4680      	mov	r8, r0
 80117c8:	4630      	mov	r0, r6
 80117ca:	f7ff fdfd 	bl	80113c8 <_Bfree>
 80117ce:	4647      	mov	r7, r8
 80117d0:	106d      	asrs	r5, r5, #1
 80117d2:	d00b      	beq.n	80117ec <__pow5mult+0xa0>
 80117d4:	6820      	ldr	r0, [r4, #0]
 80117d6:	b938      	cbnz	r0, 80117e8 <__pow5mult+0x9c>
 80117d8:	4622      	mov	r2, r4
 80117da:	4621      	mov	r1, r4
 80117dc:	4630      	mov	r0, r6
 80117de:	f7ff ff0f 	bl	8011600 <__multiply>
 80117e2:	6020      	str	r0, [r4, #0]
 80117e4:	f8c0 9000 	str.w	r9, [r0]
 80117e8:	4604      	mov	r4, r0
 80117ea:	e7e4      	b.n	80117b6 <__pow5mult+0x6a>
 80117ec:	4638      	mov	r0, r7
 80117ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117f2:	bf00      	nop
 80117f4:	08013650 	.word	0x08013650
 80117f8:	08013350 	.word	0x08013350
 80117fc:	08013500 	.word	0x08013500

08011800 <__lshift>:
 8011800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011804:	460c      	mov	r4, r1
 8011806:	6849      	ldr	r1, [r1, #4]
 8011808:	6923      	ldr	r3, [r4, #16]
 801180a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801180e:	68a3      	ldr	r3, [r4, #8]
 8011810:	4607      	mov	r7, r0
 8011812:	4691      	mov	r9, r2
 8011814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011818:	f108 0601 	add.w	r6, r8, #1
 801181c:	42b3      	cmp	r3, r6
 801181e:	db0b      	blt.n	8011838 <__lshift+0x38>
 8011820:	4638      	mov	r0, r7
 8011822:	f7ff fd91 	bl	8011348 <_Balloc>
 8011826:	4605      	mov	r5, r0
 8011828:	b948      	cbnz	r0, 801183e <__lshift+0x3e>
 801182a:	4602      	mov	r2, r0
 801182c:	4b28      	ldr	r3, [pc, #160]	; (80118d0 <__lshift+0xd0>)
 801182e:	4829      	ldr	r0, [pc, #164]	; (80118d4 <__lshift+0xd4>)
 8011830:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011834:	f7fe fb50 	bl	800fed8 <__assert_func>
 8011838:	3101      	adds	r1, #1
 801183a:	005b      	lsls	r3, r3, #1
 801183c:	e7ee      	b.n	801181c <__lshift+0x1c>
 801183e:	2300      	movs	r3, #0
 8011840:	f100 0114 	add.w	r1, r0, #20
 8011844:	f100 0210 	add.w	r2, r0, #16
 8011848:	4618      	mov	r0, r3
 801184a:	4553      	cmp	r3, sl
 801184c:	db33      	blt.n	80118b6 <__lshift+0xb6>
 801184e:	6920      	ldr	r0, [r4, #16]
 8011850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011854:	f104 0314 	add.w	r3, r4, #20
 8011858:	f019 091f 	ands.w	r9, r9, #31
 801185c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011864:	d02b      	beq.n	80118be <__lshift+0xbe>
 8011866:	f1c9 0e20 	rsb	lr, r9, #32
 801186a:	468a      	mov	sl, r1
 801186c:	2200      	movs	r2, #0
 801186e:	6818      	ldr	r0, [r3, #0]
 8011870:	fa00 f009 	lsl.w	r0, r0, r9
 8011874:	4302      	orrs	r2, r0
 8011876:	f84a 2b04 	str.w	r2, [sl], #4
 801187a:	f853 2b04 	ldr.w	r2, [r3], #4
 801187e:	459c      	cmp	ip, r3
 8011880:	fa22 f20e 	lsr.w	r2, r2, lr
 8011884:	d8f3      	bhi.n	801186e <__lshift+0x6e>
 8011886:	ebac 0304 	sub.w	r3, ip, r4
 801188a:	3b15      	subs	r3, #21
 801188c:	f023 0303 	bic.w	r3, r3, #3
 8011890:	3304      	adds	r3, #4
 8011892:	f104 0015 	add.w	r0, r4, #21
 8011896:	4584      	cmp	ip, r0
 8011898:	bf38      	it	cc
 801189a:	2304      	movcc	r3, #4
 801189c:	50ca      	str	r2, [r1, r3]
 801189e:	b10a      	cbz	r2, 80118a4 <__lshift+0xa4>
 80118a0:	f108 0602 	add.w	r6, r8, #2
 80118a4:	3e01      	subs	r6, #1
 80118a6:	4638      	mov	r0, r7
 80118a8:	612e      	str	r6, [r5, #16]
 80118aa:	4621      	mov	r1, r4
 80118ac:	f7ff fd8c 	bl	80113c8 <_Bfree>
 80118b0:	4628      	mov	r0, r5
 80118b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80118ba:	3301      	adds	r3, #1
 80118bc:	e7c5      	b.n	801184a <__lshift+0x4a>
 80118be:	3904      	subs	r1, #4
 80118c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80118c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80118c8:	459c      	cmp	ip, r3
 80118ca:	d8f9      	bhi.n	80118c0 <__lshift+0xc0>
 80118cc:	e7ea      	b.n	80118a4 <__lshift+0xa4>
 80118ce:	bf00      	nop
 80118d0:	08013470 	.word	0x08013470
 80118d4:	08013500 	.word	0x08013500

080118d8 <__mcmp>:
 80118d8:	b530      	push	{r4, r5, lr}
 80118da:	6902      	ldr	r2, [r0, #16]
 80118dc:	690c      	ldr	r4, [r1, #16]
 80118de:	1b12      	subs	r2, r2, r4
 80118e0:	d10e      	bne.n	8011900 <__mcmp+0x28>
 80118e2:	f100 0314 	add.w	r3, r0, #20
 80118e6:	3114      	adds	r1, #20
 80118e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80118ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80118f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80118f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80118f8:	42a5      	cmp	r5, r4
 80118fa:	d003      	beq.n	8011904 <__mcmp+0x2c>
 80118fc:	d305      	bcc.n	801190a <__mcmp+0x32>
 80118fe:	2201      	movs	r2, #1
 8011900:	4610      	mov	r0, r2
 8011902:	bd30      	pop	{r4, r5, pc}
 8011904:	4283      	cmp	r3, r0
 8011906:	d3f3      	bcc.n	80118f0 <__mcmp+0x18>
 8011908:	e7fa      	b.n	8011900 <__mcmp+0x28>
 801190a:	f04f 32ff 	mov.w	r2, #4294967295
 801190e:	e7f7      	b.n	8011900 <__mcmp+0x28>

08011910 <__mdiff>:
 8011910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011914:	460c      	mov	r4, r1
 8011916:	4606      	mov	r6, r0
 8011918:	4611      	mov	r1, r2
 801191a:	4620      	mov	r0, r4
 801191c:	4617      	mov	r7, r2
 801191e:	f7ff ffdb 	bl	80118d8 <__mcmp>
 8011922:	1e05      	subs	r5, r0, #0
 8011924:	d110      	bne.n	8011948 <__mdiff+0x38>
 8011926:	4629      	mov	r1, r5
 8011928:	4630      	mov	r0, r6
 801192a:	f7ff fd0d 	bl	8011348 <_Balloc>
 801192e:	b930      	cbnz	r0, 801193e <__mdiff+0x2e>
 8011930:	4b39      	ldr	r3, [pc, #228]	; (8011a18 <__mdiff+0x108>)
 8011932:	4602      	mov	r2, r0
 8011934:	f240 2132 	movw	r1, #562	; 0x232
 8011938:	4838      	ldr	r0, [pc, #224]	; (8011a1c <__mdiff+0x10c>)
 801193a:	f7fe facd 	bl	800fed8 <__assert_func>
 801193e:	2301      	movs	r3, #1
 8011940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011948:	bfa4      	itt	ge
 801194a:	463b      	movge	r3, r7
 801194c:	4627      	movge	r7, r4
 801194e:	4630      	mov	r0, r6
 8011950:	6879      	ldr	r1, [r7, #4]
 8011952:	bfa6      	itte	ge
 8011954:	461c      	movge	r4, r3
 8011956:	2500      	movge	r5, #0
 8011958:	2501      	movlt	r5, #1
 801195a:	f7ff fcf5 	bl	8011348 <_Balloc>
 801195e:	b920      	cbnz	r0, 801196a <__mdiff+0x5a>
 8011960:	4b2d      	ldr	r3, [pc, #180]	; (8011a18 <__mdiff+0x108>)
 8011962:	4602      	mov	r2, r0
 8011964:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011968:	e7e6      	b.n	8011938 <__mdiff+0x28>
 801196a:	693e      	ldr	r6, [r7, #16]
 801196c:	60c5      	str	r5, [r0, #12]
 801196e:	6925      	ldr	r5, [r4, #16]
 8011970:	f107 0114 	add.w	r1, r7, #20
 8011974:	f104 0914 	add.w	r9, r4, #20
 8011978:	f100 0e14 	add.w	lr, r0, #20
 801197c:	f107 0210 	add.w	r2, r7, #16
 8011980:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011984:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011988:	46f2      	mov	sl, lr
 801198a:	2700      	movs	r7, #0
 801198c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011990:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011994:	fa1f f883 	uxth.w	r8, r3
 8011998:	fa17 f78b 	uxtah	r7, r7, fp
 801199c:	0c1b      	lsrs	r3, r3, #16
 801199e:	eba7 0808 	sub.w	r8, r7, r8
 80119a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80119a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80119aa:	fa1f f888 	uxth.w	r8, r8
 80119ae:	141f      	asrs	r7, r3, #16
 80119b0:	454d      	cmp	r5, r9
 80119b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80119b6:	f84a 3b04 	str.w	r3, [sl], #4
 80119ba:	d8e7      	bhi.n	801198c <__mdiff+0x7c>
 80119bc:	1b2b      	subs	r3, r5, r4
 80119be:	3b15      	subs	r3, #21
 80119c0:	f023 0303 	bic.w	r3, r3, #3
 80119c4:	3304      	adds	r3, #4
 80119c6:	3415      	adds	r4, #21
 80119c8:	42a5      	cmp	r5, r4
 80119ca:	bf38      	it	cc
 80119cc:	2304      	movcc	r3, #4
 80119ce:	4419      	add	r1, r3
 80119d0:	4473      	add	r3, lr
 80119d2:	469e      	mov	lr, r3
 80119d4:	460d      	mov	r5, r1
 80119d6:	4565      	cmp	r5, ip
 80119d8:	d30e      	bcc.n	80119f8 <__mdiff+0xe8>
 80119da:	f10c 0203 	add.w	r2, ip, #3
 80119de:	1a52      	subs	r2, r2, r1
 80119e0:	f022 0203 	bic.w	r2, r2, #3
 80119e4:	3903      	subs	r1, #3
 80119e6:	458c      	cmp	ip, r1
 80119e8:	bf38      	it	cc
 80119ea:	2200      	movcc	r2, #0
 80119ec:	441a      	add	r2, r3
 80119ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80119f2:	b17b      	cbz	r3, 8011a14 <__mdiff+0x104>
 80119f4:	6106      	str	r6, [r0, #16]
 80119f6:	e7a5      	b.n	8011944 <__mdiff+0x34>
 80119f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80119fc:	fa17 f488 	uxtah	r4, r7, r8
 8011a00:	1422      	asrs	r2, r4, #16
 8011a02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011a06:	b2a4      	uxth	r4, r4
 8011a08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011a0c:	f84e 4b04 	str.w	r4, [lr], #4
 8011a10:	1417      	asrs	r7, r2, #16
 8011a12:	e7e0      	b.n	80119d6 <__mdiff+0xc6>
 8011a14:	3e01      	subs	r6, #1
 8011a16:	e7ea      	b.n	80119ee <__mdiff+0xde>
 8011a18:	08013470 	.word	0x08013470
 8011a1c:	08013500 	.word	0x08013500

08011a20 <__ulp>:
 8011a20:	b082      	sub	sp, #8
 8011a22:	ed8d 0b00 	vstr	d0, [sp]
 8011a26:	9b01      	ldr	r3, [sp, #4]
 8011a28:	4912      	ldr	r1, [pc, #72]	; (8011a74 <__ulp+0x54>)
 8011a2a:	4019      	ands	r1, r3
 8011a2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011a30:	2900      	cmp	r1, #0
 8011a32:	dd05      	ble.n	8011a40 <__ulp+0x20>
 8011a34:	2200      	movs	r2, #0
 8011a36:	460b      	mov	r3, r1
 8011a38:	ec43 2b10 	vmov	d0, r2, r3
 8011a3c:	b002      	add	sp, #8
 8011a3e:	4770      	bx	lr
 8011a40:	4249      	negs	r1, r1
 8011a42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011a46:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011a4a:	f04f 0200 	mov.w	r2, #0
 8011a4e:	f04f 0300 	mov.w	r3, #0
 8011a52:	da04      	bge.n	8011a5e <__ulp+0x3e>
 8011a54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011a58:	fa41 f300 	asr.w	r3, r1, r0
 8011a5c:	e7ec      	b.n	8011a38 <__ulp+0x18>
 8011a5e:	f1a0 0114 	sub.w	r1, r0, #20
 8011a62:	291e      	cmp	r1, #30
 8011a64:	bfda      	itte	le
 8011a66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011a6a:	fa20 f101 	lsrle.w	r1, r0, r1
 8011a6e:	2101      	movgt	r1, #1
 8011a70:	460a      	mov	r2, r1
 8011a72:	e7e1      	b.n	8011a38 <__ulp+0x18>
 8011a74:	7ff00000 	.word	0x7ff00000

08011a78 <__b2d>:
 8011a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a7a:	6905      	ldr	r5, [r0, #16]
 8011a7c:	f100 0714 	add.w	r7, r0, #20
 8011a80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011a84:	1f2e      	subs	r6, r5, #4
 8011a86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	f7ff fd52 	bl	8011534 <__hi0bits>
 8011a90:	f1c0 0320 	rsb	r3, r0, #32
 8011a94:	280a      	cmp	r0, #10
 8011a96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011b14 <__b2d+0x9c>
 8011a9a:	600b      	str	r3, [r1, #0]
 8011a9c:	dc14      	bgt.n	8011ac8 <__b2d+0x50>
 8011a9e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011aa2:	fa24 f10e 	lsr.w	r1, r4, lr
 8011aa6:	42b7      	cmp	r7, r6
 8011aa8:	ea41 030c 	orr.w	r3, r1, ip
 8011aac:	bf34      	ite	cc
 8011aae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011ab2:	2100      	movcs	r1, #0
 8011ab4:	3015      	adds	r0, #21
 8011ab6:	fa04 f000 	lsl.w	r0, r4, r0
 8011aba:	fa21 f10e 	lsr.w	r1, r1, lr
 8011abe:	ea40 0201 	orr.w	r2, r0, r1
 8011ac2:	ec43 2b10 	vmov	d0, r2, r3
 8011ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ac8:	42b7      	cmp	r7, r6
 8011aca:	bf3a      	itte	cc
 8011acc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011ad0:	f1a5 0608 	subcc.w	r6, r5, #8
 8011ad4:	2100      	movcs	r1, #0
 8011ad6:	380b      	subs	r0, #11
 8011ad8:	d017      	beq.n	8011b0a <__b2d+0x92>
 8011ada:	f1c0 0c20 	rsb	ip, r0, #32
 8011ade:	fa04 f500 	lsl.w	r5, r4, r0
 8011ae2:	42be      	cmp	r6, r7
 8011ae4:	fa21 f40c 	lsr.w	r4, r1, ip
 8011ae8:	ea45 0504 	orr.w	r5, r5, r4
 8011aec:	bf8c      	ite	hi
 8011aee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011af2:	2400      	movls	r4, #0
 8011af4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011af8:	fa01 f000 	lsl.w	r0, r1, r0
 8011afc:	fa24 f40c 	lsr.w	r4, r4, ip
 8011b00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011b04:	ea40 0204 	orr.w	r2, r0, r4
 8011b08:	e7db      	b.n	8011ac2 <__b2d+0x4a>
 8011b0a:	ea44 030c 	orr.w	r3, r4, ip
 8011b0e:	460a      	mov	r2, r1
 8011b10:	e7d7      	b.n	8011ac2 <__b2d+0x4a>
 8011b12:	bf00      	nop
 8011b14:	3ff00000 	.word	0x3ff00000

08011b18 <__d2b>:
 8011b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b1c:	4689      	mov	r9, r1
 8011b1e:	2101      	movs	r1, #1
 8011b20:	ec57 6b10 	vmov	r6, r7, d0
 8011b24:	4690      	mov	r8, r2
 8011b26:	f7ff fc0f 	bl	8011348 <_Balloc>
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	b930      	cbnz	r0, 8011b3c <__d2b+0x24>
 8011b2e:	4602      	mov	r2, r0
 8011b30:	4b25      	ldr	r3, [pc, #148]	; (8011bc8 <__d2b+0xb0>)
 8011b32:	4826      	ldr	r0, [pc, #152]	; (8011bcc <__d2b+0xb4>)
 8011b34:	f240 310a 	movw	r1, #778	; 0x30a
 8011b38:	f7fe f9ce 	bl	800fed8 <__assert_func>
 8011b3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011b40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b44:	bb35      	cbnz	r5, 8011b94 <__d2b+0x7c>
 8011b46:	2e00      	cmp	r6, #0
 8011b48:	9301      	str	r3, [sp, #4]
 8011b4a:	d028      	beq.n	8011b9e <__d2b+0x86>
 8011b4c:	4668      	mov	r0, sp
 8011b4e:	9600      	str	r6, [sp, #0]
 8011b50:	f7ff fd10 	bl	8011574 <__lo0bits>
 8011b54:	9900      	ldr	r1, [sp, #0]
 8011b56:	b300      	cbz	r0, 8011b9a <__d2b+0x82>
 8011b58:	9a01      	ldr	r2, [sp, #4]
 8011b5a:	f1c0 0320 	rsb	r3, r0, #32
 8011b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b62:	430b      	orrs	r3, r1
 8011b64:	40c2      	lsrs	r2, r0
 8011b66:	6163      	str	r3, [r4, #20]
 8011b68:	9201      	str	r2, [sp, #4]
 8011b6a:	9b01      	ldr	r3, [sp, #4]
 8011b6c:	61a3      	str	r3, [r4, #24]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	bf14      	ite	ne
 8011b72:	2202      	movne	r2, #2
 8011b74:	2201      	moveq	r2, #1
 8011b76:	6122      	str	r2, [r4, #16]
 8011b78:	b1d5      	cbz	r5, 8011bb0 <__d2b+0x98>
 8011b7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b7e:	4405      	add	r5, r0
 8011b80:	f8c9 5000 	str.w	r5, [r9]
 8011b84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011b88:	f8c8 0000 	str.w	r0, [r8]
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	b003      	add	sp, #12
 8011b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011b98:	e7d5      	b.n	8011b46 <__d2b+0x2e>
 8011b9a:	6161      	str	r1, [r4, #20]
 8011b9c:	e7e5      	b.n	8011b6a <__d2b+0x52>
 8011b9e:	a801      	add	r0, sp, #4
 8011ba0:	f7ff fce8 	bl	8011574 <__lo0bits>
 8011ba4:	9b01      	ldr	r3, [sp, #4]
 8011ba6:	6163      	str	r3, [r4, #20]
 8011ba8:	2201      	movs	r2, #1
 8011baa:	6122      	str	r2, [r4, #16]
 8011bac:	3020      	adds	r0, #32
 8011bae:	e7e3      	b.n	8011b78 <__d2b+0x60>
 8011bb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011bb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011bb8:	f8c9 0000 	str.w	r0, [r9]
 8011bbc:	6918      	ldr	r0, [r3, #16]
 8011bbe:	f7ff fcb9 	bl	8011534 <__hi0bits>
 8011bc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011bc6:	e7df      	b.n	8011b88 <__d2b+0x70>
 8011bc8:	08013470 	.word	0x08013470
 8011bcc:	08013500 	.word	0x08013500

08011bd0 <__ratio>:
 8011bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd4:	4688      	mov	r8, r1
 8011bd6:	4669      	mov	r1, sp
 8011bd8:	4681      	mov	r9, r0
 8011bda:	f7ff ff4d 	bl	8011a78 <__b2d>
 8011bde:	a901      	add	r1, sp, #4
 8011be0:	4640      	mov	r0, r8
 8011be2:	ec55 4b10 	vmov	r4, r5, d0
 8011be6:	f7ff ff47 	bl	8011a78 <__b2d>
 8011bea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011bee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011bf2:	eba3 0c02 	sub.w	ip, r3, r2
 8011bf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011bfa:	1a9b      	subs	r3, r3, r2
 8011bfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011c00:	ec51 0b10 	vmov	r0, r1, d0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	bfd6      	itet	le
 8011c08:	460a      	movle	r2, r1
 8011c0a:	462a      	movgt	r2, r5
 8011c0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011c10:	468b      	mov	fp, r1
 8011c12:	462f      	mov	r7, r5
 8011c14:	bfd4      	ite	le
 8011c16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011c1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011c1e:	4620      	mov	r0, r4
 8011c20:	ee10 2a10 	vmov	r2, s0
 8011c24:	465b      	mov	r3, fp
 8011c26:	4639      	mov	r1, r7
 8011c28:	f7ee fe18 	bl	800085c <__aeabi_ddiv>
 8011c2c:	ec41 0b10 	vmov	d0, r0, r1
 8011c30:	b003      	add	sp, #12
 8011c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c36 <__copybits>:
 8011c36:	3901      	subs	r1, #1
 8011c38:	b570      	push	{r4, r5, r6, lr}
 8011c3a:	1149      	asrs	r1, r1, #5
 8011c3c:	6914      	ldr	r4, [r2, #16]
 8011c3e:	3101      	adds	r1, #1
 8011c40:	f102 0314 	add.w	r3, r2, #20
 8011c44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011c4c:	1f05      	subs	r5, r0, #4
 8011c4e:	42a3      	cmp	r3, r4
 8011c50:	d30c      	bcc.n	8011c6c <__copybits+0x36>
 8011c52:	1aa3      	subs	r3, r4, r2
 8011c54:	3b11      	subs	r3, #17
 8011c56:	f023 0303 	bic.w	r3, r3, #3
 8011c5a:	3211      	adds	r2, #17
 8011c5c:	42a2      	cmp	r2, r4
 8011c5e:	bf88      	it	hi
 8011c60:	2300      	movhi	r3, #0
 8011c62:	4418      	add	r0, r3
 8011c64:	2300      	movs	r3, #0
 8011c66:	4288      	cmp	r0, r1
 8011c68:	d305      	bcc.n	8011c76 <__copybits+0x40>
 8011c6a:	bd70      	pop	{r4, r5, r6, pc}
 8011c6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011c70:	f845 6f04 	str.w	r6, [r5, #4]!
 8011c74:	e7eb      	b.n	8011c4e <__copybits+0x18>
 8011c76:	f840 3b04 	str.w	r3, [r0], #4
 8011c7a:	e7f4      	b.n	8011c66 <__copybits+0x30>

08011c7c <__any_on>:
 8011c7c:	f100 0214 	add.w	r2, r0, #20
 8011c80:	6900      	ldr	r0, [r0, #16]
 8011c82:	114b      	asrs	r3, r1, #5
 8011c84:	4298      	cmp	r0, r3
 8011c86:	b510      	push	{r4, lr}
 8011c88:	db11      	blt.n	8011cae <__any_on+0x32>
 8011c8a:	dd0a      	ble.n	8011ca2 <__any_on+0x26>
 8011c8c:	f011 011f 	ands.w	r1, r1, #31
 8011c90:	d007      	beq.n	8011ca2 <__any_on+0x26>
 8011c92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011c96:	fa24 f001 	lsr.w	r0, r4, r1
 8011c9a:	fa00 f101 	lsl.w	r1, r0, r1
 8011c9e:	428c      	cmp	r4, r1
 8011ca0:	d10b      	bne.n	8011cba <__any_on+0x3e>
 8011ca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	d803      	bhi.n	8011cb2 <__any_on+0x36>
 8011caa:	2000      	movs	r0, #0
 8011cac:	bd10      	pop	{r4, pc}
 8011cae:	4603      	mov	r3, r0
 8011cb0:	e7f7      	b.n	8011ca2 <__any_on+0x26>
 8011cb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011cb6:	2900      	cmp	r1, #0
 8011cb8:	d0f5      	beq.n	8011ca6 <__any_on+0x2a>
 8011cba:	2001      	movs	r0, #1
 8011cbc:	e7f6      	b.n	8011cac <__any_on+0x30>

08011cbe <_calloc_r>:
 8011cbe:	b513      	push	{r0, r1, r4, lr}
 8011cc0:	434a      	muls	r2, r1
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	9201      	str	r2, [sp, #4]
 8011cc6:	f000 f859 	bl	8011d7c <_malloc_r>
 8011cca:	4604      	mov	r4, r0
 8011ccc:	b118      	cbz	r0, 8011cd6 <_calloc_r+0x18>
 8011cce:	9a01      	ldr	r2, [sp, #4]
 8011cd0:	2100      	movs	r1, #0
 8011cd2:	f7fc fd37 	bl	800e744 <memset>
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	b002      	add	sp, #8
 8011cda:	bd10      	pop	{r4, pc}

08011cdc <_free_r>:
 8011cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cde:	2900      	cmp	r1, #0
 8011ce0:	d048      	beq.n	8011d74 <_free_r+0x98>
 8011ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ce6:	9001      	str	r0, [sp, #4]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f1a1 0404 	sub.w	r4, r1, #4
 8011cee:	bfb8      	it	lt
 8011cf0:	18e4      	addlt	r4, r4, r3
 8011cf2:	f000 fe8d 	bl	8012a10 <__malloc_lock>
 8011cf6:	4a20      	ldr	r2, [pc, #128]	; (8011d78 <_free_r+0x9c>)
 8011cf8:	9801      	ldr	r0, [sp, #4]
 8011cfa:	6813      	ldr	r3, [r2, #0]
 8011cfc:	4615      	mov	r5, r2
 8011cfe:	b933      	cbnz	r3, 8011d0e <_free_r+0x32>
 8011d00:	6063      	str	r3, [r4, #4]
 8011d02:	6014      	str	r4, [r2, #0]
 8011d04:	b003      	add	sp, #12
 8011d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d0a:	f000 be87 	b.w	8012a1c <__malloc_unlock>
 8011d0e:	42a3      	cmp	r3, r4
 8011d10:	d90b      	bls.n	8011d2a <_free_r+0x4e>
 8011d12:	6821      	ldr	r1, [r4, #0]
 8011d14:	1862      	adds	r2, r4, r1
 8011d16:	4293      	cmp	r3, r2
 8011d18:	bf04      	itt	eq
 8011d1a:	681a      	ldreq	r2, [r3, #0]
 8011d1c:	685b      	ldreq	r3, [r3, #4]
 8011d1e:	6063      	str	r3, [r4, #4]
 8011d20:	bf04      	itt	eq
 8011d22:	1852      	addeq	r2, r2, r1
 8011d24:	6022      	streq	r2, [r4, #0]
 8011d26:	602c      	str	r4, [r5, #0]
 8011d28:	e7ec      	b.n	8011d04 <_free_r+0x28>
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	b10b      	cbz	r3, 8011d34 <_free_r+0x58>
 8011d30:	42a3      	cmp	r3, r4
 8011d32:	d9fa      	bls.n	8011d2a <_free_r+0x4e>
 8011d34:	6811      	ldr	r1, [r2, #0]
 8011d36:	1855      	adds	r5, r2, r1
 8011d38:	42a5      	cmp	r5, r4
 8011d3a:	d10b      	bne.n	8011d54 <_free_r+0x78>
 8011d3c:	6824      	ldr	r4, [r4, #0]
 8011d3e:	4421      	add	r1, r4
 8011d40:	1854      	adds	r4, r2, r1
 8011d42:	42a3      	cmp	r3, r4
 8011d44:	6011      	str	r1, [r2, #0]
 8011d46:	d1dd      	bne.n	8011d04 <_free_r+0x28>
 8011d48:	681c      	ldr	r4, [r3, #0]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	6053      	str	r3, [r2, #4]
 8011d4e:	4421      	add	r1, r4
 8011d50:	6011      	str	r1, [r2, #0]
 8011d52:	e7d7      	b.n	8011d04 <_free_r+0x28>
 8011d54:	d902      	bls.n	8011d5c <_free_r+0x80>
 8011d56:	230c      	movs	r3, #12
 8011d58:	6003      	str	r3, [r0, #0]
 8011d5a:	e7d3      	b.n	8011d04 <_free_r+0x28>
 8011d5c:	6825      	ldr	r5, [r4, #0]
 8011d5e:	1961      	adds	r1, r4, r5
 8011d60:	428b      	cmp	r3, r1
 8011d62:	bf04      	itt	eq
 8011d64:	6819      	ldreq	r1, [r3, #0]
 8011d66:	685b      	ldreq	r3, [r3, #4]
 8011d68:	6063      	str	r3, [r4, #4]
 8011d6a:	bf04      	itt	eq
 8011d6c:	1949      	addeq	r1, r1, r5
 8011d6e:	6021      	streq	r1, [r4, #0]
 8011d70:	6054      	str	r4, [r2, #4]
 8011d72:	e7c7      	b.n	8011d04 <_free_r+0x28>
 8011d74:	b003      	add	sp, #12
 8011d76:	bd30      	pop	{r4, r5, pc}
 8011d78:	20004c7c 	.word	0x20004c7c

08011d7c <_malloc_r>:
 8011d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d7e:	1ccd      	adds	r5, r1, #3
 8011d80:	f025 0503 	bic.w	r5, r5, #3
 8011d84:	3508      	adds	r5, #8
 8011d86:	2d0c      	cmp	r5, #12
 8011d88:	bf38      	it	cc
 8011d8a:	250c      	movcc	r5, #12
 8011d8c:	2d00      	cmp	r5, #0
 8011d8e:	4606      	mov	r6, r0
 8011d90:	db01      	blt.n	8011d96 <_malloc_r+0x1a>
 8011d92:	42a9      	cmp	r1, r5
 8011d94:	d903      	bls.n	8011d9e <_malloc_r+0x22>
 8011d96:	230c      	movs	r3, #12
 8011d98:	6033      	str	r3, [r6, #0]
 8011d9a:	2000      	movs	r0, #0
 8011d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d9e:	f000 fe37 	bl	8012a10 <__malloc_lock>
 8011da2:	4921      	ldr	r1, [pc, #132]	; (8011e28 <_malloc_r+0xac>)
 8011da4:	680a      	ldr	r2, [r1, #0]
 8011da6:	4614      	mov	r4, r2
 8011da8:	b99c      	cbnz	r4, 8011dd2 <_malloc_r+0x56>
 8011daa:	4f20      	ldr	r7, [pc, #128]	; (8011e2c <_malloc_r+0xb0>)
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	b923      	cbnz	r3, 8011dba <_malloc_r+0x3e>
 8011db0:	4621      	mov	r1, r4
 8011db2:	4630      	mov	r0, r6
 8011db4:	f000 fafc 	bl	80123b0 <_sbrk_r>
 8011db8:	6038      	str	r0, [r7, #0]
 8011dba:	4629      	mov	r1, r5
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f000 faf7 	bl	80123b0 <_sbrk_r>
 8011dc2:	1c43      	adds	r3, r0, #1
 8011dc4:	d123      	bne.n	8011e0e <_malloc_r+0x92>
 8011dc6:	230c      	movs	r3, #12
 8011dc8:	6033      	str	r3, [r6, #0]
 8011dca:	4630      	mov	r0, r6
 8011dcc:	f000 fe26 	bl	8012a1c <__malloc_unlock>
 8011dd0:	e7e3      	b.n	8011d9a <_malloc_r+0x1e>
 8011dd2:	6823      	ldr	r3, [r4, #0]
 8011dd4:	1b5b      	subs	r3, r3, r5
 8011dd6:	d417      	bmi.n	8011e08 <_malloc_r+0x8c>
 8011dd8:	2b0b      	cmp	r3, #11
 8011dda:	d903      	bls.n	8011de4 <_malloc_r+0x68>
 8011ddc:	6023      	str	r3, [r4, #0]
 8011dde:	441c      	add	r4, r3
 8011de0:	6025      	str	r5, [r4, #0]
 8011de2:	e004      	b.n	8011dee <_malloc_r+0x72>
 8011de4:	6863      	ldr	r3, [r4, #4]
 8011de6:	42a2      	cmp	r2, r4
 8011de8:	bf0c      	ite	eq
 8011dea:	600b      	streq	r3, [r1, #0]
 8011dec:	6053      	strne	r3, [r2, #4]
 8011dee:	4630      	mov	r0, r6
 8011df0:	f000 fe14 	bl	8012a1c <__malloc_unlock>
 8011df4:	f104 000b 	add.w	r0, r4, #11
 8011df8:	1d23      	adds	r3, r4, #4
 8011dfa:	f020 0007 	bic.w	r0, r0, #7
 8011dfe:	1ac2      	subs	r2, r0, r3
 8011e00:	d0cc      	beq.n	8011d9c <_malloc_r+0x20>
 8011e02:	1a1b      	subs	r3, r3, r0
 8011e04:	50a3      	str	r3, [r4, r2]
 8011e06:	e7c9      	b.n	8011d9c <_malloc_r+0x20>
 8011e08:	4622      	mov	r2, r4
 8011e0a:	6864      	ldr	r4, [r4, #4]
 8011e0c:	e7cc      	b.n	8011da8 <_malloc_r+0x2c>
 8011e0e:	1cc4      	adds	r4, r0, #3
 8011e10:	f024 0403 	bic.w	r4, r4, #3
 8011e14:	42a0      	cmp	r0, r4
 8011e16:	d0e3      	beq.n	8011de0 <_malloc_r+0x64>
 8011e18:	1a21      	subs	r1, r4, r0
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f000 fac8 	bl	80123b0 <_sbrk_r>
 8011e20:	3001      	adds	r0, #1
 8011e22:	d1dd      	bne.n	8011de0 <_malloc_r+0x64>
 8011e24:	e7cf      	b.n	8011dc6 <_malloc_r+0x4a>
 8011e26:	bf00      	nop
 8011e28:	20004c7c 	.word	0x20004c7c
 8011e2c:	20004c80 	.word	0x20004c80

08011e30 <__ssputs_r>:
 8011e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e34:	688e      	ldr	r6, [r1, #8]
 8011e36:	429e      	cmp	r6, r3
 8011e38:	4682      	mov	sl, r0
 8011e3a:	460c      	mov	r4, r1
 8011e3c:	4690      	mov	r8, r2
 8011e3e:	461f      	mov	r7, r3
 8011e40:	d838      	bhi.n	8011eb4 <__ssputs_r+0x84>
 8011e42:	898a      	ldrh	r2, [r1, #12]
 8011e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e48:	d032      	beq.n	8011eb0 <__ssputs_r+0x80>
 8011e4a:	6825      	ldr	r5, [r4, #0]
 8011e4c:	6909      	ldr	r1, [r1, #16]
 8011e4e:	eba5 0901 	sub.w	r9, r5, r1
 8011e52:	6965      	ldr	r5, [r4, #20]
 8011e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	444b      	add	r3, r9
 8011e60:	106d      	asrs	r5, r5, #1
 8011e62:	429d      	cmp	r5, r3
 8011e64:	bf38      	it	cc
 8011e66:	461d      	movcc	r5, r3
 8011e68:	0553      	lsls	r3, r2, #21
 8011e6a:	d531      	bpl.n	8011ed0 <__ssputs_r+0xa0>
 8011e6c:	4629      	mov	r1, r5
 8011e6e:	f7ff ff85 	bl	8011d7c <_malloc_r>
 8011e72:	4606      	mov	r6, r0
 8011e74:	b950      	cbnz	r0, 8011e8c <__ssputs_r+0x5c>
 8011e76:	230c      	movs	r3, #12
 8011e78:	f8ca 3000 	str.w	r3, [sl]
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e82:	81a3      	strh	r3, [r4, #12]
 8011e84:	f04f 30ff 	mov.w	r0, #4294967295
 8011e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e8c:	6921      	ldr	r1, [r4, #16]
 8011e8e:	464a      	mov	r2, r9
 8011e90:	f7fc fc4a 	bl	800e728 <memcpy>
 8011e94:	89a3      	ldrh	r3, [r4, #12]
 8011e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e9e:	81a3      	strh	r3, [r4, #12]
 8011ea0:	6126      	str	r6, [r4, #16]
 8011ea2:	6165      	str	r5, [r4, #20]
 8011ea4:	444e      	add	r6, r9
 8011ea6:	eba5 0509 	sub.w	r5, r5, r9
 8011eaa:	6026      	str	r6, [r4, #0]
 8011eac:	60a5      	str	r5, [r4, #8]
 8011eae:	463e      	mov	r6, r7
 8011eb0:	42be      	cmp	r6, r7
 8011eb2:	d900      	bls.n	8011eb6 <__ssputs_r+0x86>
 8011eb4:	463e      	mov	r6, r7
 8011eb6:	4632      	mov	r2, r6
 8011eb8:	6820      	ldr	r0, [r4, #0]
 8011eba:	4641      	mov	r1, r8
 8011ebc:	f000 fd8e 	bl	80129dc <memmove>
 8011ec0:	68a3      	ldr	r3, [r4, #8]
 8011ec2:	6822      	ldr	r2, [r4, #0]
 8011ec4:	1b9b      	subs	r3, r3, r6
 8011ec6:	4432      	add	r2, r6
 8011ec8:	60a3      	str	r3, [r4, #8]
 8011eca:	6022      	str	r2, [r4, #0]
 8011ecc:	2000      	movs	r0, #0
 8011ece:	e7db      	b.n	8011e88 <__ssputs_r+0x58>
 8011ed0:	462a      	mov	r2, r5
 8011ed2:	f000 fda9 	bl	8012a28 <_realloc_r>
 8011ed6:	4606      	mov	r6, r0
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d1e1      	bne.n	8011ea0 <__ssputs_r+0x70>
 8011edc:	6921      	ldr	r1, [r4, #16]
 8011ede:	4650      	mov	r0, sl
 8011ee0:	f7ff fefc 	bl	8011cdc <_free_r>
 8011ee4:	e7c7      	b.n	8011e76 <__ssputs_r+0x46>
	...

08011ee8 <_svfiprintf_r>:
 8011ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eec:	4698      	mov	r8, r3
 8011eee:	898b      	ldrh	r3, [r1, #12]
 8011ef0:	061b      	lsls	r3, r3, #24
 8011ef2:	b09d      	sub	sp, #116	; 0x74
 8011ef4:	4607      	mov	r7, r0
 8011ef6:	460d      	mov	r5, r1
 8011ef8:	4614      	mov	r4, r2
 8011efa:	d50e      	bpl.n	8011f1a <_svfiprintf_r+0x32>
 8011efc:	690b      	ldr	r3, [r1, #16]
 8011efe:	b963      	cbnz	r3, 8011f1a <_svfiprintf_r+0x32>
 8011f00:	2140      	movs	r1, #64	; 0x40
 8011f02:	f7ff ff3b 	bl	8011d7c <_malloc_r>
 8011f06:	6028      	str	r0, [r5, #0]
 8011f08:	6128      	str	r0, [r5, #16]
 8011f0a:	b920      	cbnz	r0, 8011f16 <_svfiprintf_r+0x2e>
 8011f0c:	230c      	movs	r3, #12
 8011f0e:	603b      	str	r3, [r7, #0]
 8011f10:	f04f 30ff 	mov.w	r0, #4294967295
 8011f14:	e0d1      	b.n	80120ba <_svfiprintf_r+0x1d2>
 8011f16:	2340      	movs	r3, #64	; 0x40
 8011f18:	616b      	str	r3, [r5, #20]
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8011f1e:	2320      	movs	r3, #32
 8011f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f28:	2330      	movs	r3, #48	; 0x30
 8011f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120d4 <_svfiprintf_r+0x1ec>
 8011f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f32:	f04f 0901 	mov.w	r9, #1
 8011f36:	4623      	mov	r3, r4
 8011f38:	469a      	mov	sl, r3
 8011f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f3e:	b10a      	cbz	r2, 8011f44 <_svfiprintf_r+0x5c>
 8011f40:	2a25      	cmp	r2, #37	; 0x25
 8011f42:	d1f9      	bne.n	8011f38 <_svfiprintf_r+0x50>
 8011f44:	ebba 0b04 	subs.w	fp, sl, r4
 8011f48:	d00b      	beq.n	8011f62 <_svfiprintf_r+0x7a>
 8011f4a:	465b      	mov	r3, fp
 8011f4c:	4622      	mov	r2, r4
 8011f4e:	4629      	mov	r1, r5
 8011f50:	4638      	mov	r0, r7
 8011f52:	f7ff ff6d 	bl	8011e30 <__ssputs_r>
 8011f56:	3001      	adds	r0, #1
 8011f58:	f000 80aa 	beq.w	80120b0 <_svfiprintf_r+0x1c8>
 8011f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f5e:	445a      	add	r2, fp
 8011f60:	9209      	str	r2, [sp, #36]	; 0x24
 8011f62:	f89a 3000 	ldrb.w	r3, [sl]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	f000 80a2 	beq.w	80120b0 <_svfiprintf_r+0x1c8>
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f76:	f10a 0a01 	add.w	sl, sl, #1
 8011f7a:	9304      	str	r3, [sp, #16]
 8011f7c:	9307      	str	r3, [sp, #28]
 8011f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f82:	931a      	str	r3, [sp, #104]	; 0x68
 8011f84:	4654      	mov	r4, sl
 8011f86:	2205      	movs	r2, #5
 8011f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f8c:	4851      	ldr	r0, [pc, #324]	; (80120d4 <_svfiprintf_r+0x1ec>)
 8011f8e:	f7ee f92f 	bl	80001f0 <memchr>
 8011f92:	9a04      	ldr	r2, [sp, #16]
 8011f94:	b9d8      	cbnz	r0, 8011fce <_svfiprintf_r+0xe6>
 8011f96:	06d0      	lsls	r0, r2, #27
 8011f98:	bf44      	itt	mi
 8011f9a:	2320      	movmi	r3, #32
 8011f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fa0:	0711      	lsls	r1, r2, #28
 8011fa2:	bf44      	itt	mi
 8011fa4:	232b      	movmi	r3, #43	; 0x2b
 8011fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011faa:	f89a 3000 	ldrb.w	r3, [sl]
 8011fae:	2b2a      	cmp	r3, #42	; 0x2a
 8011fb0:	d015      	beq.n	8011fde <_svfiprintf_r+0xf6>
 8011fb2:	9a07      	ldr	r2, [sp, #28]
 8011fb4:	4654      	mov	r4, sl
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	f04f 0c0a 	mov.w	ip, #10
 8011fbc:	4621      	mov	r1, r4
 8011fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fc2:	3b30      	subs	r3, #48	; 0x30
 8011fc4:	2b09      	cmp	r3, #9
 8011fc6:	d94e      	bls.n	8012066 <_svfiprintf_r+0x17e>
 8011fc8:	b1b0      	cbz	r0, 8011ff8 <_svfiprintf_r+0x110>
 8011fca:	9207      	str	r2, [sp, #28]
 8011fcc:	e014      	b.n	8011ff8 <_svfiprintf_r+0x110>
 8011fce:	eba0 0308 	sub.w	r3, r0, r8
 8011fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	9304      	str	r3, [sp, #16]
 8011fda:	46a2      	mov	sl, r4
 8011fdc:	e7d2      	b.n	8011f84 <_svfiprintf_r+0x9c>
 8011fde:	9b03      	ldr	r3, [sp, #12]
 8011fe0:	1d19      	adds	r1, r3, #4
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	9103      	str	r1, [sp, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	bfbb      	ittet	lt
 8011fea:	425b      	neglt	r3, r3
 8011fec:	f042 0202 	orrlt.w	r2, r2, #2
 8011ff0:	9307      	strge	r3, [sp, #28]
 8011ff2:	9307      	strlt	r3, [sp, #28]
 8011ff4:	bfb8      	it	lt
 8011ff6:	9204      	strlt	r2, [sp, #16]
 8011ff8:	7823      	ldrb	r3, [r4, #0]
 8011ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8011ffc:	d10c      	bne.n	8012018 <_svfiprintf_r+0x130>
 8011ffe:	7863      	ldrb	r3, [r4, #1]
 8012000:	2b2a      	cmp	r3, #42	; 0x2a
 8012002:	d135      	bne.n	8012070 <_svfiprintf_r+0x188>
 8012004:	9b03      	ldr	r3, [sp, #12]
 8012006:	1d1a      	adds	r2, r3, #4
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	9203      	str	r2, [sp, #12]
 801200c:	2b00      	cmp	r3, #0
 801200e:	bfb8      	it	lt
 8012010:	f04f 33ff 	movlt.w	r3, #4294967295
 8012014:	3402      	adds	r4, #2
 8012016:	9305      	str	r3, [sp, #20]
 8012018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80120e4 <_svfiprintf_r+0x1fc>
 801201c:	7821      	ldrb	r1, [r4, #0]
 801201e:	2203      	movs	r2, #3
 8012020:	4650      	mov	r0, sl
 8012022:	f7ee f8e5 	bl	80001f0 <memchr>
 8012026:	b140      	cbz	r0, 801203a <_svfiprintf_r+0x152>
 8012028:	2340      	movs	r3, #64	; 0x40
 801202a:	eba0 000a 	sub.w	r0, r0, sl
 801202e:	fa03 f000 	lsl.w	r0, r3, r0
 8012032:	9b04      	ldr	r3, [sp, #16]
 8012034:	4303      	orrs	r3, r0
 8012036:	3401      	adds	r4, #1
 8012038:	9304      	str	r3, [sp, #16]
 801203a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801203e:	4826      	ldr	r0, [pc, #152]	; (80120d8 <_svfiprintf_r+0x1f0>)
 8012040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012044:	2206      	movs	r2, #6
 8012046:	f7ee f8d3 	bl	80001f0 <memchr>
 801204a:	2800      	cmp	r0, #0
 801204c:	d038      	beq.n	80120c0 <_svfiprintf_r+0x1d8>
 801204e:	4b23      	ldr	r3, [pc, #140]	; (80120dc <_svfiprintf_r+0x1f4>)
 8012050:	bb1b      	cbnz	r3, 801209a <_svfiprintf_r+0x1b2>
 8012052:	9b03      	ldr	r3, [sp, #12]
 8012054:	3307      	adds	r3, #7
 8012056:	f023 0307 	bic.w	r3, r3, #7
 801205a:	3308      	adds	r3, #8
 801205c:	9303      	str	r3, [sp, #12]
 801205e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012060:	4433      	add	r3, r6
 8012062:	9309      	str	r3, [sp, #36]	; 0x24
 8012064:	e767      	b.n	8011f36 <_svfiprintf_r+0x4e>
 8012066:	fb0c 3202 	mla	r2, ip, r2, r3
 801206a:	460c      	mov	r4, r1
 801206c:	2001      	movs	r0, #1
 801206e:	e7a5      	b.n	8011fbc <_svfiprintf_r+0xd4>
 8012070:	2300      	movs	r3, #0
 8012072:	3401      	adds	r4, #1
 8012074:	9305      	str	r3, [sp, #20]
 8012076:	4619      	mov	r1, r3
 8012078:	f04f 0c0a 	mov.w	ip, #10
 801207c:	4620      	mov	r0, r4
 801207e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012082:	3a30      	subs	r2, #48	; 0x30
 8012084:	2a09      	cmp	r2, #9
 8012086:	d903      	bls.n	8012090 <_svfiprintf_r+0x1a8>
 8012088:	2b00      	cmp	r3, #0
 801208a:	d0c5      	beq.n	8012018 <_svfiprintf_r+0x130>
 801208c:	9105      	str	r1, [sp, #20]
 801208e:	e7c3      	b.n	8012018 <_svfiprintf_r+0x130>
 8012090:	fb0c 2101 	mla	r1, ip, r1, r2
 8012094:	4604      	mov	r4, r0
 8012096:	2301      	movs	r3, #1
 8012098:	e7f0      	b.n	801207c <_svfiprintf_r+0x194>
 801209a:	ab03      	add	r3, sp, #12
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	462a      	mov	r2, r5
 80120a0:	4b0f      	ldr	r3, [pc, #60]	; (80120e0 <_svfiprintf_r+0x1f8>)
 80120a2:	a904      	add	r1, sp, #16
 80120a4:	4638      	mov	r0, r7
 80120a6:	f7fc fbf5 	bl	800e894 <_printf_float>
 80120aa:	1c42      	adds	r2, r0, #1
 80120ac:	4606      	mov	r6, r0
 80120ae:	d1d6      	bne.n	801205e <_svfiprintf_r+0x176>
 80120b0:	89ab      	ldrh	r3, [r5, #12]
 80120b2:	065b      	lsls	r3, r3, #25
 80120b4:	f53f af2c 	bmi.w	8011f10 <_svfiprintf_r+0x28>
 80120b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120ba:	b01d      	add	sp, #116	; 0x74
 80120bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c0:	ab03      	add	r3, sp, #12
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	462a      	mov	r2, r5
 80120c6:	4b06      	ldr	r3, [pc, #24]	; (80120e0 <_svfiprintf_r+0x1f8>)
 80120c8:	a904      	add	r1, sp, #16
 80120ca:	4638      	mov	r0, r7
 80120cc:	f7fc fe86 	bl	800eddc <_printf_i>
 80120d0:	e7eb      	b.n	80120aa <_svfiprintf_r+0x1c2>
 80120d2:	bf00      	nop
 80120d4:	0801365c 	.word	0x0801365c
 80120d8:	08013666 	.word	0x08013666
 80120dc:	0800e895 	.word	0x0800e895
 80120e0:	08011e31 	.word	0x08011e31
 80120e4:	08013662 	.word	0x08013662

080120e8 <__sfputc_r>:
 80120e8:	6893      	ldr	r3, [r2, #8]
 80120ea:	3b01      	subs	r3, #1
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	b410      	push	{r4}
 80120f0:	6093      	str	r3, [r2, #8]
 80120f2:	da08      	bge.n	8012106 <__sfputc_r+0x1e>
 80120f4:	6994      	ldr	r4, [r2, #24]
 80120f6:	42a3      	cmp	r3, r4
 80120f8:	db01      	blt.n	80120fe <__sfputc_r+0x16>
 80120fa:	290a      	cmp	r1, #10
 80120fc:	d103      	bne.n	8012106 <__sfputc_r+0x1e>
 80120fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012102:	f000 b977 	b.w	80123f4 <__swbuf_r>
 8012106:	6813      	ldr	r3, [r2, #0]
 8012108:	1c58      	adds	r0, r3, #1
 801210a:	6010      	str	r0, [r2, #0]
 801210c:	7019      	strb	r1, [r3, #0]
 801210e:	4608      	mov	r0, r1
 8012110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012114:	4770      	bx	lr

08012116 <__sfputs_r>:
 8012116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012118:	4606      	mov	r6, r0
 801211a:	460f      	mov	r7, r1
 801211c:	4614      	mov	r4, r2
 801211e:	18d5      	adds	r5, r2, r3
 8012120:	42ac      	cmp	r4, r5
 8012122:	d101      	bne.n	8012128 <__sfputs_r+0x12>
 8012124:	2000      	movs	r0, #0
 8012126:	e007      	b.n	8012138 <__sfputs_r+0x22>
 8012128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801212c:	463a      	mov	r2, r7
 801212e:	4630      	mov	r0, r6
 8012130:	f7ff ffda 	bl	80120e8 <__sfputc_r>
 8012134:	1c43      	adds	r3, r0, #1
 8012136:	d1f3      	bne.n	8012120 <__sfputs_r+0xa>
 8012138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801213c <_vfiprintf_r>:
 801213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012140:	460d      	mov	r5, r1
 8012142:	b09d      	sub	sp, #116	; 0x74
 8012144:	4614      	mov	r4, r2
 8012146:	4698      	mov	r8, r3
 8012148:	4606      	mov	r6, r0
 801214a:	b118      	cbz	r0, 8012154 <_vfiprintf_r+0x18>
 801214c:	6983      	ldr	r3, [r0, #24]
 801214e:	b90b      	cbnz	r3, 8012154 <_vfiprintf_r+0x18>
 8012150:	f000 fb40 	bl	80127d4 <__sinit>
 8012154:	4b89      	ldr	r3, [pc, #548]	; (801237c <_vfiprintf_r+0x240>)
 8012156:	429d      	cmp	r5, r3
 8012158:	d11b      	bne.n	8012192 <_vfiprintf_r+0x56>
 801215a:	6875      	ldr	r5, [r6, #4]
 801215c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801215e:	07d9      	lsls	r1, r3, #31
 8012160:	d405      	bmi.n	801216e <_vfiprintf_r+0x32>
 8012162:	89ab      	ldrh	r3, [r5, #12]
 8012164:	059a      	lsls	r2, r3, #22
 8012166:	d402      	bmi.n	801216e <_vfiprintf_r+0x32>
 8012168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801216a:	f000 fbd1 	bl	8012910 <__retarget_lock_acquire_recursive>
 801216e:	89ab      	ldrh	r3, [r5, #12]
 8012170:	071b      	lsls	r3, r3, #28
 8012172:	d501      	bpl.n	8012178 <_vfiprintf_r+0x3c>
 8012174:	692b      	ldr	r3, [r5, #16]
 8012176:	b9eb      	cbnz	r3, 80121b4 <_vfiprintf_r+0x78>
 8012178:	4629      	mov	r1, r5
 801217a:	4630      	mov	r0, r6
 801217c:	f000 f99a 	bl	80124b4 <__swsetup_r>
 8012180:	b1c0      	cbz	r0, 80121b4 <_vfiprintf_r+0x78>
 8012182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012184:	07dc      	lsls	r4, r3, #31
 8012186:	d50e      	bpl.n	80121a6 <_vfiprintf_r+0x6a>
 8012188:	f04f 30ff 	mov.w	r0, #4294967295
 801218c:	b01d      	add	sp, #116	; 0x74
 801218e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012192:	4b7b      	ldr	r3, [pc, #492]	; (8012380 <_vfiprintf_r+0x244>)
 8012194:	429d      	cmp	r5, r3
 8012196:	d101      	bne.n	801219c <_vfiprintf_r+0x60>
 8012198:	68b5      	ldr	r5, [r6, #8]
 801219a:	e7df      	b.n	801215c <_vfiprintf_r+0x20>
 801219c:	4b79      	ldr	r3, [pc, #484]	; (8012384 <_vfiprintf_r+0x248>)
 801219e:	429d      	cmp	r5, r3
 80121a0:	bf08      	it	eq
 80121a2:	68f5      	ldreq	r5, [r6, #12]
 80121a4:	e7da      	b.n	801215c <_vfiprintf_r+0x20>
 80121a6:	89ab      	ldrh	r3, [r5, #12]
 80121a8:	0598      	lsls	r0, r3, #22
 80121aa:	d4ed      	bmi.n	8012188 <_vfiprintf_r+0x4c>
 80121ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121ae:	f000 fbb0 	bl	8012912 <__retarget_lock_release_recursive>
 80121b2:	e7e9      	b.n	8012188 <_vfiprintf_r+0x4c>
 80121b4:	2300      	movs	r3, #0
 80121b6:	9309      	str	r3, [sp, #36]	; 0x24
 80121b8:	2320      	movs	r3, #32
 80121ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80121be:	f8cd 800c 	str.w	r8, [sp, #12]
 80121c2:	2330      	movs	r3, #48	; 0x30
 80121c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012388 <_vfiprintf_r+0x24c>
 80121c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80121cc:	f04f 0901 	mov.w	r9, #1
 80121d0:	4623      	mov	r3, r4
 80121d2:	469a      	mov	sl, r3
 80121d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121d8:	b10a      	cbz	r2, 80121de <_vfiprintf_r+0xa2>
 80121da:	2a25      	cmp	r2, #37	; 0x25
 80121dc:	d1f9      	bne.n	80121d2 <_vfiprintf_r+0x96>
 80121de:	ebba 0b04 	subs.w	fp, sl, r4
 80121e2:	d00b      	beq.n	80121fc <_vfiprintf_r+0xc0>
 80121e4:	465b      	mov	r3, fp
 80121e6:	4622      	mov	r2, r4
 80121e8:	4629      	mov	r1, r5
 80121ea:	4630      	mov	r0, r6
 80121ec:	f7ff ff93 	bl	8012116 <__sfputs_r>
 80121f0:	3001      	adds	r0, #1
 80121f2:	f000 80aa 	beq.w	801234a <_vfiprintf_r+0x20e>
 80121f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121f8:	445a      	add	r2, fp
 80121fa:	9209      	str	r2, [sp, #36]	; 0x24
 80121fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012200:	2b00      	cmp	r3, #0
 8012202:	f000 80a2 	beq.w	801234a <_vfiprintf_r+0x20e>
 8012206:	2300      	movs	r3, #0
 8012208:	f04f 32ff 	mov.w	r2, #4294967295
 801220c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012210:	f10a 0a01 	add.w	sl, sl, #1
 8012214:	9304      	str	r3, [sp, #16]
 8012216:	9307      	str	r3, [sp, #28]
 8012218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801221c:	931a      	str	r3, [sp, #104]	; 0x68
 801221e:	4654      	mov	r4, sl
 8012220:	2205      	movs	r2, #5
 8012222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012226:	4858      	ldr	r0, [pc, #352]	; (8012388 <_vfiprintf_r+0x24c>)
 8012228:	f7ed ffe2 	bl	80001f0 <memchr>
 801222c:	9a04      	ldr	r2, [sp, #16]
 801222e:	b9d8      	cbnz	r0, 8012268 <_vfiprintf_r+0x12c>
 8012230:	06d1      	lsls	r1, r2, #27
 8012232:	bf44      	itt	mi
 8012234:	2320      	movmi	r3, #32
 8012236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801223a:	0713      	lsls	r3, r2, #28
 801223c:	bf44      	itt	mi
 801223e:	232b      	movmi	r3, #43	; 0x2b
 8012240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012244:	f89a 3000 	ldrb.w	r3, [sl]
 8012248:	2b2a      	cmp	r3, #42	; 0x2a
 801224a:	d015      	beq.n	8012278 <_vfiprintf_r+0x13c>
 801224c:	9a07      	ldr	r2, [sp, #28]
 801224e:	4654      	mov	r4, sl
 8012250:	2000      	movs	r0, #0
 8012252:	f04f 0c0a 	mov.w	ip, #10
 8012256:	4621      	mov	r1, r4
 8012258:	f811 3b01 	ldrb.w	r3, [r1], #1
 801225c:	3b30      	subs	r3, #48	; 0x30
 801225e:	2b09      	cmp	r3, #9
 8012260:	d94e      	bls.n	8012300 <_vfiprintf_r+0x1c4>
 8012262:	b1b0      	cbz	r0, 8012292 <_vfiprintf_r+0x156>
 8012264:	9207      	str	r2, [sp, #28]
 8012266:	e014      	b.n	8012292 <_vfiprintf_r+0x156>
 8012268:	eba0 0308 	sub.w	r3, r0, r8
 801226c:	fa09 f303 	lsl.w	r3, r9, r3
 8012270:	4313      	orrs	r3, r2
 8012272:	9304      	str	r3, [sp, #16]
 8012274:	46a2      	mov	sl, r4
 8012276:	e7d2      	b.n	801221e <_vfiprintf_r+0xe2>
 8012278:	9b03      	ldr	r3, [sp, #12]
 801227a:	1d19      	adds	r1, r3, #4
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	9103      	str	r1, [sp, #12]
 8012280:	2b00      	cmp	r3, #0
 8012282:	bfbb      	ittet	lt
 8012284:	425b      	neglt	r3, r3
 8012286:	f042 0202 	orrlt.w	r2, r2, #2
 801228a:	9307      	strge	r3, [sp, #28]
 801228c:	9307      	strlt	r3, [sp, #28]
 801228e:	bfb8      	it	lt
 8012290:	9204      	strlt	r2, [sp, #16]
 8012292:	7823      	ldrb	r3, [r4, #0]
 8012294:	2b2e      	cmp	r3, #46	; 0x2e
 8012296:	d10c      	bne.n	80122b2 <_vfiprintf_r+0x176>
 8012298:	7863      	ldrb	r3, [r4, #1]
 801229a:	2b2a      	cmp	r3, #42	; 0x2a
 801229c:	d135      	bne.n	801230a <_vfiprintf_r+0x1ce>
 801229e:	9b03      	ldr	r3, [sp, #12]
 80122a0:	1d1a      	adds	r2, r3, #4
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	9203      	str	r2, [sp, #12]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	bfb8      	it	lt
 80122aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80122ae:	3402      	adds	r4, #2
 80122b0:	9305      	str	r3, [sp, #20]
 80122b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012398 <_vfiprintf_r+0x25c>
 80122b6:	7821      	ldrb	r1, [r4, #0]
 80122b8:	2203      	movs	r2, #3
 80122ba:	4650      	mov	r0, sl
 80122bc:	f7ed ff98 	bl	80001f0 <memchr>
 80122c0:	b140      	cbz	r0, 80122d4 <_vfiprintf_r+0x198>
 80122c2:	2340      	movs	r3, #64	; 0x40
 80122c4:	eba0 000a 	sub.w	r0, r0, sl
 80122c8:	fa03 f000 	lsl.w	r0, r3, r0
 80122cc:	9b04      	ldr	r3, [sp, #16]
 80122ce:	4303      	orrs	r3, r0
 80122d0:	3401      	adds	r4, #1
 80122d2:	9304      	str	r3, [sp, #16]
 80122d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122d8:	482c      	ldr	r0, [pc, #176]	; (801238c <_vfiprintf_r+0x250>)
 80122da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122de:	2206      	movs	r2, #6
 80122e0:	f7ed ff86 	bl	80001f0 <memchr>
 80122e4:	2800      	cmp	r0, #0
 80122e6:	d03f      	beq.n	8012368 <_vfiprintf_r+0x22c>
 80122e8:	4b29      	ldr	r3, [pc, #164]	; (8012390 <_vfiprintf_r+0x254>)
 80122ea:	bb1b      	cbnz	r3, 8012334 <_vfiprintf_r+0x1f8>
 80122ec:	9b03      	ldr	r3, [sp, #12]
 80122ee:	3307      	adds	r3, #7
 80122f0:	f023 0307 	bic.w	r3, r3, #7
 80122f4:	3308      	adds	r3, #8
 80122f6:	9303      	str	r3, [sp, #12]
 80122f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122fa:	443b      	add	r3, r7
 80122fc:	9309      	str	r3, [sp, #36]	; 0x24
 80122fe:	e767      	b.n	80121d0 <_vfiprintf_r+0x94>
 8012300:	fb0c 3202 	mla	r2, ip, r2, r3
 8012304:	460c      	mov	r4, r1
 8012306:	2001      	movs	r0, #1
 8012308:	e7a5      	b.n	8012256 <_vfiprintf_r+0x11a>
 801230a:	2300      	movs	r3, #0
 801230c:	3401      	adds	r4, #1
 801230e:	9305      	str	r3, [sp, #20]
 8012310:	4619      	mov	r1, r3
 8012312:	f04f 0c0a 	mov.w	ip, #10
 8012316:	4620      	mov	r0, r4
 8012318:	f810 2b01 	ldrb.w	r2, [r0], #1
 801231c:	3a30      	subs	r2, #48	; 0x30
 801231e:	2a09      	cmp	r2, #9
 8012320:	d903      	bls.n	801232a <_vfiprintf_r+0x1ee>
 8012322:	2b00      	cmp	r3, #0
 8012324:	d0c5      	beq.n	80122b2 <_vfiprintf_r+0x176>
 8012326:	9105      	str	r1, [sp, #20]
 8012328:	e7c3      	b.n	80122b2 <_vfiprintf_r+0x176>
 801232a:	fb0c 2101 	mla	r1, ip, r1, r2
 801232e:	4604      	mov	r4, r0
 8012330:	2301      	movs	r3, #1
 8012332:	e7f0      	b.n	8012316 <_vfiprintf_r+0x1da>
 8012334:	ab03      	add	r3, sp, #12
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	462a      	mov	r2, r5
 801233a:	4b16      	ldr	r3, [pc, #88]	; (8012394 <_vfiprintf_r+0x258>)
 801233c:	a904      	add	r1, sp, #16
 801233e:	4630      	mov	r0, r6
 8012340:	f7fc faa8 	bl	800e894 <_printf_float>
 8012344:	4607      	mov	r7, r0
 8012346:	1c78      	adds	r0, r7, #1
 8012348:	d1d6      	bne.n	80122f8 <_vfiprintf_r+0x1bc>
 801234a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801234c:	07d9      	lsls	r1, r3, #31
 801234e:	d405      	bmi.n	801235c <_vfiprintf_r+0x220>
 8012350:	89ab      	ldrh	r3, [r5, #12]
 8012352:	059a      	lsls	r2, r3, #22
 8012354:	d402      	bmi.n	801235c <_vfiprintf_r+0x220>
 8012356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012358:	f000 fadb 	bl	8012912 <__retarget_lock_release_recursive>
 801235c:	89ab      	ldrh	r3, [r5, #12]
 801235e:	065b      	lsls	r3, r3, #25
 8012360:	f53f af12 	bmi.w	8012188 <_vfiprintf_r+0x4c>
 8012364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012366:	e711      	b.n	801218c <_vfiprintf_r+0x50>
 8012368:	ab03      	add	r3, sp, #12
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	462a      	mov	r2, r5
 801236e:	4b09      	ldr	r3, [pc, #36]	; (8012394 <_vfiprintf_r+0x258>)
 8012370:	a904      	add	r1, sp, #16
 8012372:	4630      	mov	r0, r6
 8012374:	f7fc fd32 	bl	800eddc <_printf_i>
 8012378:	e7e4      	b.n	8012344 <_vfiprintf_r+0x208>
 801237a:	bf00      	nop
 801237c:	08013790 	.word	0x08013790
 8012380:	080137b0 	.word	0x080137b0
 8012384:	08013770 	.word	0x08013770
 8012388:	0801365c 	.word	0x0801365c
 801238c:	08013666 	.word	0x08013666
 8012390:	0800e895 	.word	0x0800e895
 8012394:	08012117 	.word	0x08012117
 8012398:	08013662 	.word	0x08013662
 801239c:	00000000 	.word	0x00000000

080123a0 <nan>:
 80123a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80123a8 <nan+0x8>
 80123a4:	4770      	bx	lr
 80123a6:	bf00      	nop
 80123a8:	00000000 	.word	0x00000000
 80123ac:	7ff80000 	.word	0x7ff80000

080123b0 <_sbrk_r>:
 80123b0:	b538      	push	{r3, r4, r5, lr}
 80123b2:	4d06      	ldr	r5, [pc, #24]	; (80123cc <_sbrk_r+0x1c>)
 80123b4:	2300      	movs	r3, #0
 80123b6:	4604      	mov	r4, r0
 80123b8:	4608      	mov	r0, r1
 80123ba:	602b      	str	r3, [r5, #0]
 80123bc:	f7f0 fef8 	bl	80031b0 <_sbrk>
 80123c0:	1c43      	adds	r3, r0, #1
 80123c2:	d102      	bne.n	80123ca <_sbrk_r+0x1a>
 80123c4:	682b      	ldr	r3, [r5, #0]
 80123c6:	b103      	cbz	r3, 80123ca <_sbrk_r+0x1a>
 80123c8:	6023      	str	r3, [r4, #0]
 80123ca:	bd38      	pop	{r3, r4, r5, pc}
 80123cc:	20005b54 	.word	0x20005b54

080123d0 <strncmp>:
 80123d0:	b510      	push	{r4, lr}
 80123d2:	b16a      	cbz	r2, 80123f0 <strncmp+0x20>
 80123d4:	3901      	subs	r1, #1
 80123d6:	1884      	adds	r4, r0, r2
 80123d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80123dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d103      	bne.n	80123ec <strncmp+0x1c>
 80123e4:	42a0      	cmp	r0, r4
 80123e6:	d001      	beq.n	80123ec <strncmp+0x1c>
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d1f5      	bne.n	80123d8 <strncmp+0x8>
 80123ec:	1a98      	subs	r0, r3, r2
 80123ee:	bd10      	pop	{r4, pc}
 80123f0:	4610      	mov	r0, r2
 80123f2:	e7fc      	b.n	80123ee <strncmp+0x1e>

080123f4 <__swbuf_r>:
 80123f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123f6:	460e      	mov	r6, r1
 80123f8:	4614      	mov	r4, r2
 80123fa:	4605      	mov	r5, r0
 80123fc:	b118      	cbz	r0, 8012406 <__swbuf_r+0x12>
 80123fe:	6983      	ldr	r3, [r0, #24]
 8012400:	b90b      	cbnz	r3, 8012406 <__swbuf_r+0x12>
 8012402:	f000 f9e7 	bl	80127d4 <__sinit>
 8012406:	4b21      	ldr	r3, [pc, #132]	; (801248c <__swbuf_r+0x98>)
 8012408:	429c      	cmp	r4, r3
 801240a:	d12b      	bne.n	8012464 <__swbuf_r+0x70>
 801240c:	686c      	ldr	r4, [r5, #4]
 801240e:	69a3      	ldr	r3, [r4, #24]
 8012410:	60a3      	str	r3, [r4, #8]
 8012412:	89a3      	ldrh	r3, [r4, #12]
 8012414:	071a      	lsls	r2, r3, #28
 8012416:	d52f      	bpl.n	8012478 <__swbuf_r+0x84>
 8012418:	6923      	ldr	r3, [r4, #16]
 801241a:	b36b      	cbz	r3, 8012478 <__swbuf_r+0x84>
 801241c:	6923      	ldr	r3, [r4, #16]
 801241e:	6820      	ldr	r0, [r4, #0]
 8012420:	1ac0      	subs	r0, r0, r3
 8012422:	6963      	ldr	r3, [r4, #20]
 8012424:	b2f6      	uxtb	r6, r6
 8012426:	4283      	cmp	r3, r0
 8012428:	4637      	mov	r7, r6
 801242a:	dc04      	bgt.n	8012436 <__swbuf_r+0x42>
 801242c:	4621      	mov	r1, r4
 801242e:	4628      	mov	r0, r5
 8012430:	f000 f93c 	bl	80126ac <_fflush_r>
 8012434:	bb30      	cbnz	r0, 8012484 <__swbuf_r+0x90>
 8012436:	68a3      	ldr	r3, [r4, #8]
 8012438:	3b01      	subs	r3, #1
 801243a:	60a3      	str	r3, [r4, #8]
 801243c:	6823      	ldr	r3, [r4, #0]
 801243e:	1c5a      	adds	r2, r3, #1
 8012440:	6022      	str	r2, [r4, #0]
 8012442:	701e      	strb	r6, [r3, #0]
 8012444:	6963      	ldr	r3, [r4, #20]
 8012446:	3001      	adds	r0, #1
 8012448:	4283      	cmp	r3, r0
 801244a:	d004      	beq.n	8012456 <__swbuf_r+0x62>
 801244c:	89a3      	ldrh	r3, [r4, #12]
 801244e:	07db      	lsls	r3, r3, #31
 8012450:	d506      	bpl.n	8012460 <__swbuf_r+0x6c>
 8012452:	2e0a      	cmp	r6, #10
 8012454:	d104      	bne.n	8012460 <__swbuf_r+0x6c>
 8012456:	4621      	mov	r1, r4
 8012458:	4628      	mov	r0, r5
 801245a:	f000 f927 	bl	80126ac <_fflush_r>
 801245e:	b988      	cbnz	r0, 8012484 <__swbuf_r+0x90>
 8012460:	4638      	mov	r0, r7
 8012462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012464:	4b0a      	ldr	r3, [pc, #40]	; (8012490 <__swbuf_r+0x9c>)
 8012466:	429c      	cmp	r4, r3
 8012468:	d101      	bne.n	801246e <__swbuf_r+0x7a>
 801246a:	68ac      	ldr	r4, [r5, #8]
 801246c:	e7cf      	b.n	801240e <__swbuf_r+0x1a>
 801246e:	4b09      	ldr	r3, [pc, #36]	; (8012494 <__swbuf_r+0xa0>)
 8012470:	429c      	cmp	r4, r3
 8012472:	bf08      	it	eq
 8012474:	68ec      	ldreq	r4, [r5, #12]
 8012476:	e7ca      	b.n	801240e <__swbuf_r+0x1a>
 8012478:	4621      	mov	r1, r4
 801247a:	4628      	mov	r0, r5
 801247c:	f000 f81a 	bl	80124b4 <__swsetup_r>
 8012480:	2800      	cmp	r0, #0
 8012482:	d0cb      	beq.n	801241c <__swbuf_r+0x28>
 8012484:	f04f 37ff 	mov.w	r7, #4294967295
 8012488:	e7ea      	b.n	8012460 <__swbuf_r+0x6c>
 801248a:	bf00      	nop
 801248c:	08013790 	.word	0x08013790
 8012490:	080137b0 	.word	0x080137b0
 8012494:	08013770 	.word	0x08013770

08012498 <__ascii_wctomb>:
 8012498:	b149      	cbz	r1, 80124ae <__ascii_wctomb+0x16>
 801249a:	2aff      	cmp	r2, #255	; 0xff
 801249c:	bf85      	ittet	hi
 801249e:	238a      	movhi	r3, #138	; 0x8a
 80124a0:	6003      	strhi	r3, [r0, #0]
 80124a2:	700a      	strbls	r2, [r1, #0]
 80124a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80124a8:	bf98      	it	ls
 80124aa:	2001      	movls	r0, #1
 80124ac:	4770      	bx	lr
 80124ae:	4608      	mov	r0, r1
 80124b0:	4770      	bx	lr
	...

080124b4 <__swsetup_r>:
 80124b4:	4b32      	ldr	r3, [pc, #200]	; (8012580 <__swsetup_r+0xcc>)
 80124b6:	b570      	push	{r4, r5, r6, lr}
 80124b8:	681d      	ldr	r5, [r3, #0]
 80124ba:	4606      	mov	r6, r0
 80124bc:	460c      	mov	r4, r1
 80124be:	b125      	cbz	r5, 80124ca <__swsetup_r+0x16>
 80124c0:	69ab      	ldr	r3, [r5, #24]
 80124c2:	b913      	cbnz	r3, 80124ca <__swsetup_r+0x16>
 80124c4:	4628      	mov	r0, r5
 80124c6:	f000 f985 	bl	80127d4 <__sinit>
 80124ca:	4b2e      	ldr	r3, [pc, #184]	; (8012584 <__swsetup_r+0xd0>)
 80124cc:	429c      	cmp	r4, r3
 80124ce:	d10f      	bne.n	80124f0 <__swsetup_r+0x3c>
 80124d0:	686c      	ldr	r4, [r5, #4]
 80124d2:	89a3      	ldrh	r3, [r4, #12]
 80124d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124d8:	0719      	lsls	r1, r3, #28
 80124da:	d42c      	bmi.n	8012536 <__swsetup_r+0x82>
 80124dc:	06dd      	lsls	r5, r3, #27
 80124de:	d411      	bmi.n	8012504 <__swsetup_r+0x50>
 80124e0:	2309      	movs	r3, #9
 80124e2:	6033      	str	r3, [r6, #0]
 80124e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80124e8:	81a3      	strh	r3, [r4, #12]
 80124ea:	f04f 30ff 	mov.w	r0, #4294967295
 80124ee:	e03e      	b.n	801256e <__swsetup_r+0xba>
 80124f0:	4b25      	ldr	r3, [pc, #148]	; (8012588 <__swsetup_r+0xd4>)
 80124f2:	429c      	cmp	r4, r3
 80124f4:	d101      	bne.n	80124fa <__swsetup_r+0x46>
 80124f6:	68ac      	ldr	r4, [r5, #8]
 80124f8:	e7eb      	b.n	80124d2 <__swsetup_r+0x1e>
 80124fa:	4b24      	ldr	r3, [pc, #144]	; (801258c <__swsetup_r+0xd8>)
 80124fc:	429c      	cmp	r4, r3
 80124fe:	bf08      	it	eq
 8012500:	68ec      	ldreq	r4, [r5, #12]
 8012502:	e7e6      	b.n	80124d2 <__swsetup_r+0x1e>
 8012504:	0758      	lsls	r0, r3, #29
 8012506:	d512      	bpl.n	801252e <__swsetup_r+0x7a>
 8012508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801250a:	b141      	cbz	r1, 801251e <__swsetup_r+0x6a>
 801250c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012510:	4299      	cmp	r1, r3
 8012512:	d002      	beq.n	801251a <__swsetup_r+0x66>
 8012514:	4630      	mov	r0, r6
 8012516:	f7ff fbe1 	bl	8011cdc <_free_r>
 801251a:	2300      	movs	r3, #0
 801251c:	6363      	str	r3, [r4, #52]	; 0x34
 801251e:	89a3      	ldrh	r3, [r4, #12]
 8012520:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012524:	81a3      	strh	r3, [r4, #12]
 8012526:	2300      	movs	r3, #0
 8012528:	6063      	str	r3, [r4, #4]
 801252a:	6923      	ldr	r3, [r4, #16]
 801252c:	6023      	str	r3, [r4, #0]
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	f043 0308 	orr.w	r3, r3, #8
 8012534:	81a3      	strh	r3, [r4, #12]
 8012536:	6923      	ldr	r3, [r4, #16]
 8012538:	b94b      	cbnz	r3, 801254e <__swsetup_r+0x9a>
 801253a:	89a3      	ldrh	r3, [r4, #12]
 801253c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012544:	d003      	beq.n	801254e <__swsetup_r+0x9a>
 8012546:	4621      	mov	r1, r4
 8012548:	4630      	mov	r0, r6
 801254a:	f000 fa07 	bl	801295c <__smakebuf_r>
 801254e:	89a0      	ldrh	r0, [r4, #12]
 8012550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012554:	f010 0301 	ands.w	r3, r0, #1
 8012558:	d00a      	beq.n	8012570 <__swsetup_r+0xbc>
 801255a:	2300      	movs	r3, #0
 801255c:	60a3      	str	r3, [r4, #8]
 801255e:	6963      	ldr	r3, [r4, #20]
 8012560:	425b      	negs	r3, r3
 8012562:	61a3      	str	r3, [r4, #24]
 8012564:	6923      	ldr	r3, [r4, #16]
 8012566:	b943      	cbnz	r3, 801257a <__swsetup_r+0xc6>
 8012568:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801256c:	d1ba      	bne.n	80124e4 <__swsetup_r+0x30>
 801256e:	bd70      	pop	{r4, r5, r6, pc}
 8012570:	0781      	lsls	r1, r0, #30
 8012572:	bf58      	it	pl
 8012574:	6963      	ldrpl	r3, [r4, #20]
 8012576:	60a3      	str	r3, [r4, #8]
 8012578:	e7f4      	b.n	8012564 <__swsetup_r+0xb0>
 801257a:	2000      	movs	r0, #0
 801257c:	e7f7      	b.n	801256e <__swsetup_r+0xba>
 801257e:	bf00      	nop
 8012580:	20000028 	.word	0x20000028
 8012584:	08013790 	.word	0x08013790
 8012588:	080137b0 	.word	0x080137b0
 801258c:	08013770 	.word	0x08013770

08012590 <abort>:
 8012590:	b508      	push	{r3, lr}
 8012592:	2006      	movs	r0, #6
 8012594:	f000 fa96 	bl	8012ac4 <raise>
 8012598:	2001      	movs	r0, #1
 801259a:	f7f0 fd91 	bl	80030c0 <_exit>
	...

080125a0 <__sflush_r>:
 80125a0:	898a      	ldrh	r2, [r1, #12]
 80125a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125a6:	4605      	mov	r5, r0
 80125a8:	0710      	lsls	r0, r2, #28
 80125aa:	460c      	mov	r4, r1
 80125ac:	d458      	bmi.n	8012660 <__sflush_r+0xc0>
 80125ae:	684b      	ldr	r3, [r1, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	dc05      	bgt.n	80125c0 <__sflush_r+0x20>
 80125b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	dc02      	bgt.n	80125c0 <__sflush_r+0x20>
 80125ba:	2000      	movs	r0, #0
 80125bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125c2:	2e00      	cmp	r6, #0
 80125c4:	d0f9      	beq.n	80125ba <__sflush_r+0x1a>
 80125c6:	2300      	movs	r3, #0
 80125c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80125cc:	682f      	ldr	r7, [r5, #0]
 80125ce:	602b      	str	r3, [r5, #0]
 80125d0:	d032      	beq.n	8012638 <__sflush_r+0x98>
 80125d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80125d4:	89a3      	ldrh	r3, [r4, #12]
 80125d6:	075a      	lsls	r2, r3, #29
 80125d8:	d505      	bpl.n	80125e6 <__sflush_r+0x46>
 80125da:	6863      	ldr	r3, [r4, #4]
 80125dc:	1ac0      	subs	r0, r0, r3
 80125de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80125e0:	b10b      	cbz	r3, 80125e6 <__sflush_r+0x46>
 80125e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125e4:	1ac0      	subs	r0, r0, r3
 80125e6:	2300      	movs	r3, #0
 80125e8:	4602      	mov	r2, r0
 80125ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125ec:	6a21      	ldr	r1, [r4, #32]
 80125ee:	4628      	mov	r0, r5
 80125f0:	47b0      	blx	r6
 80125f2:	1c43      	adds	r3, r0, #1
 80125f4:	89a3      	ldrh	r3, [r4, #12]
 80125f6:	d106      	bne.n	8012606 <__sflush_r+0x66>
 80125f8:	6829      	ldr	r1, [r5, #0]
 80125fa:	291d      	cmp	r1, #29
 80125fc:	d82c      	bhi.n	8012658 <__sflush_r+0xb8>
 80125fe:	4a2a      	ldr	r2, [pc, #168]	; (80126a8 <__sflush_r+0x108>)
 8012600:	40ca      	lsrs	r2, r1
 8012602:	07d6      	lsls	r6, r2, #31
 8012604:	d528      	bpl.n	8012658 <__sflush_r+0xb8>
 8012606:	2200      	movs	r2, #0
 8012608:	6062      	str	r2, [r4, #4]
 801260a:	04d9      	lsls	r1, r3, #19
 801260c:	6922      	ldr	r2, [r4, #16]
 801260e:	6022      	str	r2, [r4, #0]
 8012610:	d504      	bpl.n	801261c <__sflush_r+0x7c>
 8012612:	1c42      	adds	r2, r0, #1
 8012614:	d101      	bne.n	801261a <__sflush_r+0x7a>
 8012616:	682b      	ldr	r3, [r5, #0]
 8012618:	b903      	cbnz	r3, 801261c <__sflush_r+0x7c>
 801261a:	6560      	str	r0, [r4, #84]	; 0x54
 801261c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801261e:	602f      	str	r7, [r5, #0]
 8012620:	2900      	cmp	r1, #0
 8012622:	d0ca      	beq.n	80125ba <__sflush_r+0x1a>
 8012624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012628:	4299      	cmp	r1, r3
 801262a:	d002      	beq.n	8012632 <__sflush_r+0x92>
 801262c:	4628      	mov	r0, r5
 801262e:	f7ff fb55 	bl	8011cdc <_free_r>
 8012632:	2000      	movs	r0, #0
 8012634:	6360      	str	r0, [r4, #52]	; 0x34
 8012636:	e7c1      	b.n	80125bc <__sflush_r+0x1c>
 8012638:	6a21      	ldr	r1, [r4, #32]
 801263a:	2301      	movs	r3, #1
 801263c:	4628      	mov	r0, r5
 801263e:	47b0      	blx	r6
 8012640:	1c41      	adds	r1, r0, #1
 8012642:	d1c7      	bne.n	80125d4 <__sflush_r+0x34>
 8012644:	682b      	ldr	r3, [r5, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d0c4      	beq.n	80125d4 <__sflush_r+0x34>
 801264a:	2b1d      	cmp	r3, #29
 801264c:	d001      	beq.n	8012652 <__sflush_r+0xb2>
 801264e:	2b16      	cmp	r3, #22
 8012650:	d101      	bne.n	8012656 <__sflush_r+0xb6>
 8012652:	602f      	str	r7, [r5, #0]
 8012654:	e7b1      	b.n	80125ba <__sflush_r+0x1a>
 8012656:	89a3      	ldrh	r3, [r4, #12]
 8012658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801265c:	81a3      	strh	r3, [r4, #12]
 801265e:	e7ad      	b.n	80125bc <__sflush_r+0x1c>
 8012660:	690f      	ldr	r7, [r1, #16]
 8012662:	2f00      	cmp	r7, #0
 8012664:	d0a9      	beq.n	80125ba <__sflush_r+0x1a>
 8012666:	0793      	lsls	r3, r2, #30
 8012668:	680e      	ldr	r6, [r1, #0]
 801266a:	bf08      	it	eq
 801266c:	694b      	ldreq	r3, [r1, #20]
 801266e:	600f      	str	r7, [r1, #0]
 8012670:	bf18      	it	ne
 8012672:	2300      	movne	r3, #0
 8012674:	eba6 0807 	sub.w	r8, r6, r7
 8012678:	608b      	str	r3, [r1, #8]
 801267a:	f1b8 0f00 	cmp.w	r8, #0
 801267e:	dd9c      	ble.n	80125ba <__sflush_r+0x1a>
 8012680:	6a21      	ldr	r1, [r4, #32]
 8012682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012684:	4643      	mov	r3, r8
 8012686:	463a      	mov	r2, r7
 8012688:	4628      	mov	r0, r5
 801268a:	47b0      	blx	r6
 801268c:	2800      	cmp	r0, #0
 801268e:	dc06      	bgt.n	801269e <__sflush_r+0xfe>
 8012690:	89a3      	ldrh	r3, [r4, #12]
 8012692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012696:	81a3      	strh	r3, [r4, #12]
 8012698:	f04f 30ff 	mov.w	r0, #4294967295
 801269c:	e78e      	b.n	80125bc <__sflush_r+0x1c>
 801269e:	4407      	add	r7, r0
 80126a0:	eba8 0800 	sub.w	r8, r8, r0
 80126a4:	e7e9      	b.n	801267a <__sflush_r+0xda>
 80126a6:	bf00      	nop
 80126a8:	20400001 	.word	0x20400001

080126ac <_fflush_r>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	690b      	ldr	r3, [r1, #16]
 80126b0:	4605      	mov	r5, r0
 80126b2:	460c      	mov	r4, r1
 80126b4:	b913      	cbnz	r3, 80126bc <_fflush_r+0x10>
 80126b6:	2500      	movs	r5, #0
 80126b8:	4628      	mov	r0, r5
 80126ba:	bd38      	pop	{r3, r4, r5, pc}
 80126bc:	b118      	cbz	r0, 80126c6 <_fflush_r+0x1a>
 80126be:	6983      	ldr	r3, [r0, #24]
 80126c0:	b90b      	cbnz	r3, 80126c6 <_fflush_r+0x1a>
 80126c2:	f000 f887 	bl	80127d4 <__sinit>
 80126c6:	4b14      	ldr	r3, [pc, #80]	; (8012718 <_fflush_r+0x6c>)
 80126c8:	429c      	cmp	r4, r3
 80126ca:	d11b      	bne.n	8012704 <_fflush_r+0x58>
 80126cc:	686c      	ldr	r4, [r5, #4]
 80126ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d0ef      	beq.n	80126b6 <_fflush_r+0xa>
 80126d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80126d8:	07d0      	lsls	r0, r2, #31
 80126da:	d404      	bmi.n	80126e6 <_fflush_r+0x3a>
 80126dc:	0599      	lsls	r1, r3, #22
 80126de:	d402      	bmi.n	80126e6 <_fflush_r+0x3a>
 80126e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126e2:	f000 f915 	bl	8012910 <__retarget_lock_acquire_recursive>
 80126e6:	4628      	mov	r0, r5
 80126e8:	4621      	mov	r1, r4
 80126ea:	f7ff ff59 	bl	80125a0 <__sflush_r>
 80126ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126f0:	07da      	lsls	r2, r3, #31
 80126f2:	4605      	mov	r5, r0
 80126f4:	d4e0      	bmi.n	80126b8 <_fflush_r+0xc>
 80126f6:	89a3      	ldrh	r3, [r4, #12]
 80126f8:	059b      	lsls	r3, r3, #22
 80126fa:	d4dd      	bmi.n	80126b8 <_fflush_r+0xc>
 80126fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126fe:	f000 f908 	bl	8012912 <__retarget_lock_release_recursive>
 8012702:	e7d9      	b.n	80126b8 <_fflush_r+0xc>
 8012704:	4b05      	ldr	r3, [pc, #20]	; (801271c <_fflush_r+0x70>)
 8012706:	429c      	cmp	r4, r3
 8012708:	d101      	bne.n	801270e <_fflush_r+0x62>
 801270a:	68ac      	ldr	r4, [r5, #8]
 801270c:	e7df      	b.n	80126ce <_fflush_r+0x22>
 801270e:	4b04      	ldr	r3, [pc, #16]	; (8012720 <_fflush_r+0x74>)
 8012710:	429c      	cmp	r4, r3
 8012712:	bf08      	it	eq
 8012714:	68ec      	ldreq	r4, [r5, #12]
 8012716:	e7da      	b.n	80126ce <_fflush_r+0x22>
 8012718:	08013790 	.word	0x08013790
 801271c:	080137b0 	.word	0x080137b0
 8012720:	08013770 	.word	0x08013770

08012724 <std>:
 8012724:	2300      	movs	r3, #0
 8012726:	b510      	push	{r4, lr}
 8012728:	4604      	mov	r4, r0
 801272a:	e9c0 3300 	strd	r3, r3, [r0]
 801272e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012732:	6083      	str	r3, [r0, #8]
 8012734:	8181      	strh	r1, [r0, #12]
 8012736:	6643      	str	r3, [r0, #100]	; 0x64
 8012738:	81c2      	strh	r2, [r0, #14]
 801273a:	6183      	str	r3, [r0, #24]
 801273c:	4619      	mov	r1, r3
 801273e:	2208      	movs	r2, #8
 8012740:	305c      	adds	r0, #92	; 0x5c
 8012742:	f7fb ffff 	bl	800e744 <memset>
 8012746:	4b05      	ldr	r3, [pc, #20]	; (801275c <std+0x38>)
 8012748:	6263      	str	r3, [r4, #36]	; 0x24
 801274a:	4b05      	ldr	r3, [pc, #20]	; (8012760 <std+0x3c>)
 801274c:	62a3      	str	r3, [r4, #40]	; 0x28
 801274e:	4b05      	ldr	r3, [pc, #20]	; (8012764 <std+0x40>)
 8012750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012752:	4b05      	ldr	r3, [pc, #20]	; (8012768 <std+0x44>)
 8012754:	6224      	str	r4, [r4, #32]
 8012756:	6323      	str	r3, [r4, #48]	; 0x30
 8012758:	bd10      	pop	{r4, pc}
 801275a:	bf00      	nop
 801275c:	08012afd 	.word	0x08012afd
 8012760:	08012b1f 	.word	0x08012b1f
 8012764:	08012b57 	.word	0x08012b57
 8012768:	08012b7b 	.word	0x08012b7b

0801276c <_cleanup_r>:
 801276c:	4901      	ldr	r1, [pc, #4]	; (8012774 <_cleanup_r+0x8>)
 801276e:	f000 b8af 	b.w	80128d0 <_fwalk_reent>
 8012772:	bf00      	nop
 8012774:	080126ad 	.word	0x080126ad

08012778 <__sfmoreglue>:
 8012778:	b570      	push	{r4, r5, r6, lr}
 801277a:	1e4a      	subs	r2, r1, #1
 801277c:	2568      	movs	r5, #104	; 0x68
 801277e:	4355      	muls	r5, r2
 8012780:	460e      	mov	r6, r1
 8012782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012786:	f7ff faf9 	bl	8011d7c <_malloc_r>
 801278a:	4604      	mov	r4, r0
 801278c:	b140      	cbz	r0, 80127a0 <__sfmoreglue+0x28>
 801278e:	2100      	movs	r1, #0
 8012790:	e9c0 1600 	strd	r1, r6, [r0]
 8012794:	300c      	adds	r0, #12
 8012796:	60a0      	str	r0, [r4, #8]
 8012798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801279c:	f7fb ffd2 	bl	800e744 <memset>
 80127a0:	4620      	mov	r0, r4
 80127a2:	bd70      	pop	{r4, r5, r6, pc}

080127a4 <__sfp_lock_acquire>:
 80127a4:	4801      	ldr	r0, [pc, #4]	; (80127ac <__sfp_lock_acquire+0x8>)
 80127a6:	f000 b8b3 	b.w	8012910 <__retarget_lock_acquire_recursive>
 80127aa:	bf00      	nop
 80127ac:	20005b50 	.word	0x20005b50

080127b0 <__sfp_lock_release>:
 80127b0:	4801      	ldr	r0, [pc, #4]	; (80127b8 <__sfp_lock_release+0x8>)
 80127b2:	f000 b8ae 	b.w	8012912 <__retarget_lock_release_recursive>
 80127b6:	bf00      	nop
 80127b8:	20005b50 	.word	0x20005b50

080127bc <__sinit_lock_acquire>:
 80127bc:	4801      	ldr	r0, [pc, #4]	; (80127c4 <__sinit_lock_acquire+0x8>)
 80127be:	f000 b8a7 	b.w	8012910 <__retarget_lock_acquire_recursive>
 80127c2:	bf00      	nop
 80127c4:	20005b4b 	.word	0x20005b4b

080127c8 <__sinit_lock_release>:
 80127c8:	4801      	ldr	r0, [pc, #4]	; (80127d0 <__sinit_lock_release+0x8>)
 80127ca:	f000 b8a2 	b.w	8012912 <__retarget_lock_release_recursive>
 80127ce:	bf00      	nop
 80127d0:	20005b4b 	.word	0x20005b4b

080127d4 <__sinit>:
 80127d4:	b510      	push	{r4, lr}
 80127d6:	4604      	mov	r4, r0
 80127d8:	f7ff fff0 	bl	80127bc <__sinit_lock_acquire>
 80127dc:	69a3      	ldr	r3, [r4, #24]
 80127de:	b11b      	cbz	r3, 80127e8 <__sinit+0x14>
 80127e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127e4:	f7ff bff0 	b.w	80127c8 <__sinit_lock_release>
 80127e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80127ec:	6523      	str	r3, [r4, #80]	; 0x50
 80127ee:	4b13      	ldr	r3, [pc, #76]	; (801283c <__sinit+0x68>)
 80127f0:	4a13      	ldr	r2, [pc, #76]	; (8012840 <__sinit+0x6c>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80127f6:	42a3      	cmp	r3, r4
 80127f8:	bf04      	itt	eq
 80127fa:	2301      	moveq	r3, #1
 80127fc:	61a3      	streq	r3, [r4, #24]
 80127fe:	4620      	mov	r0, r4
 8012800:	f000 f820 	bl	8012844 <__sfp>
 8012804:	6060      	str	r0, [r4, #4]
 8012806:	4620      	mov	r0, r4
 8012808:	f000 f81c 	bl	8012844 <__sfp>
 801280c:	60a0      	str	r0, [r4, #8]
 801280e:	4620      	mov	r0, r4
 8012810:	f000 f818 	bl	8012844 <__sfp>
 8012814:	2200      	movs	r2, #0
 8012816:	60e0      	str	r0, [r4, #12]
 8012818:	2104      	movs	r1, #4
 801281a:	6860      	ldr	r0, [r4, #4]
 801281c:	f7ff ff82 	bl	8012724 <std>
 8012820:	68a0      	ldr	r0, [r4, #8]
 8012822:	2201      	movs	r2, #1
 8012824:	2109      	movs	r1, #9
 8012826:	f7ff ff7d 	bl	8012724 <std>
 801282a:	68e0      	ldr	r0, [r4, #12]
 801282c:	2202      	movs	r2, #2
 801282e:	2112      	movs	r1, #18
 8012830:	f7ff ff78 	bl	8012724 <std>
 8012834:	2301      	movs	r3, #1
 8012836:	61a3      	str	r3, [r4, #24]
 8012838:	e7d2      	b.n	80127e0 <__sinit+0xc>
 801283a:	bf00      	nop
 801283c:	080132c8 	.word	0x080132c8
 8012840:	0801276d 	.word	0x0801276d

08012844 <__sfp>:
 8012844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012846:	4607      	mov	r7, r0
 8012848:	f7ff ffac 	bl	80127a4 <__sfp_lock_acquire>
 801284c:	4b1e      	ldr	r3, [pc, #120]	; (80128c8 <__sfp+0x84>)
 801284e:	681e      	ldr	r6, [r3, #0]
 8012850:	69b3      	ldr	r3, [r6, #24]
 8012852:	b913      	cbnz	r3, 801285a <__sfp+0x16>
 8012854:	4630      	mov	r0, r6
 8012856:	f7ff ffbd 	bl	80127d4 <__sinit>
 801285a:	3648      	adds	r6, #72	; 0x48
 801285c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012860:	3b01      	subs	r3, #1
 8012862:	d503      	bpl.n	801286c <__sfp+0x28>
 8012864:	6833      	ldr	r3, [r6, #0]
 8012866:	b30b      	cbz	r3, 80128ac <__sfp+0x68>
 8012868:	6836      	ldr	r6, [r6, #0]
 801286a:	e7f7      	b.n	801285c <__sfp+0x18>
 801286c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012870:	b9d5      	cbnz	r5, 80128a8 <__sfp+0x64>
 8012872:	4b16      	ldr	r3, [pc, #88]	; (80128cc <__sfp+0x88>)
 8012874:	60e3      	str	r3, [r4, #12]
 8012876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801287a:	6665      	str	r5, [r4, #100]	; 0x64
 801287c:	f000 f847 	bl	801290e <__retarget_lock_init_recursive>
 8012880:	f7ff ff96 	bl	80127b0 <__sfp_lock_release>
 8012884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801288c:	6025      	str	r5, [r4, #0]
 801288e:	61a5      	str	r5, [r4, #24]
 8012890:	2208      	movs	r2, #8
 8012892:	4629      	mov	r1, r5
 8012894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012898:	f7fb ff54 	bl	800e744 <memset>
 801289c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80128a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80128a4:	4620      	mov	r0, r4
 80128a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128a8:	3468      	adds	r4, #104	; 0x68
 80128aa:	e7d9      	b.n	8012860 <__sfp+0x1c>
 80128ac:	2104      	movs	r1, #4
 80128ae:	4638      	mov	r0, r7
 80128b0:	f7ff ff62 	bl	8012778 <__sfmoreglue>
 80128b4:	4604      	mov	r4, r0
 80128b6:	6030      	str	r0, [r6, #0]
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d1d5      	bne.n	8012868 <__sfp+0x24>
 80128bc:	f7ff ff78 	bl	80127b0 <__sfp_lock_release>
 80128c0:	230c      	movs	r3, #12
 80128c2:	603b      	str	r3, [r7, #0]
 80128c4:	e7ee      	b.n	80128a4 <__sfp+0x60>
 80128c6:	bf00      	nop
 80128c8:	080132c8 	.word	0x080132c8
 80128cc:	ffff0001 	.word	0xffff0001

080128d0 <_fwalk_reent>:
 80128d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128d4:	4606      	mov	r6, r0
 80128d6:	4688      	mov	r8, r1
 80128d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80128dc:	2700      	movs	r7, #0
 80128de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80128e2:	f1b9 0901 	subs.w	r9, r9, #1
 80128e6:	d505      	bpl.n	80128f4 <_fwalk_reent+0x24>
 80128e8:	6824      	ldr	r4, [r4, #0]
 80128ea:	2c00      	cmp	r4, #0
 80128ec:	d1f7      	bne.n	80128de <_fwalk_reent+0xe>
 80128ee:	4638      	mov	r0, r7
 80128f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128f4:	89ab      	ldrh	r3, [r5, #12]
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	d907      	bls.n	801290a <_fwalk_reent+0x3a>
 80128fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80128fe:	3301      	adds	r3, #1
 8012900:	d003      	beq.n	801290a <_fwalk_reent+0x3a>
 8012902:	4629      	mov	r1, r5
 8012904:	4630      	mov	r0, r6
 8012906:	47c0      	blx	r8
 8012908:	4307      	orrs	r7, r0
 801290a:	3568      	adds	r5, #104	; 0x68
 801290c:	e7e9      	b.n	80128e2 <_fwalk_reent+0x12>

0801290e <__retarget_lock_init_recursive>:
 801290e:	4770      	bx	lr

08012910 <__retarget_lock_acquire_recursive>:
 8012910:	4770      	bx	lr

08012912 <__retarget_lock_release_recursive>:
 8012912:	4770      	bx	lr

08012914 <__swhatbuf_r>:
 8012914:	b570      	push	{r4, r5, r6, lr}
 8012916:	460e      	mov	r6, r1
 8012918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801291c:	2900      	cmp	r1, #0
 801291e:	b096      	sub	sp, #88	; 0x58
 8012920:	4614      	mov	r4, r2
 8012922:	461d      	mov	r5, r3
 8012924:	da07      	bge.n	8012936 <__swhatbuf_r+0x22>
 8012926:	2300      	movs	r3, #0
 8012928:	602b      	str	r3, [r5, #0]
 801292a:	89b3      	ldrh	r3, [r6, #12]
 801292c:	061a      	lsls	r2, r3, #24
 801292e:	d410      	bmi.n	8012952 <__swhatbuf_r+0x3e>
 8012930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012934:	e00e      	b.n	8012954 <__swhatbuf_r+0x40>
 8012936:	466a      	mov	r2, sp
 8012938:	f000 f946 	bl	8012bc8 <_fstat_r>
 801293c:	2800      	cmp	r0, #0
 801293e:	dbf2      	blt.n	8012926 <__swhatbuf_r+0x12>
 8012940:	9a01      	ldr	r2, [sp, #4]
 8012942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801294a:	425a      	negs	r2, r3
 801294c:	415a      	adcs	r2, r3
 801294e:	602a      	str	r2, [r5, #0]
 8012950:	e7ee      	b.n	8012930 <__swhatbuf_r+0x1c>
 8012952:	2340      	movs	r3, #64	; 0x40
 8012954:	2000      	movs	r0, #0
 8012956:	6023      	str	r3, [r4, #0]
 8012958:	b016      	add	sp, #88	; 0x58
 801295a:	bd70      	pop	{r4, r5, r6, pc}

0801295c <__smakebuf_r>:
 801295c:	898b      	ldrh	r3, [r1, #12]
 801295e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012960:	079d      	lsls	r5, r3, #30
 8012962:	4606      	mov	r6, r0
 8012964:	460c      	mov	r4, r1
 8012966:	d507      	bpl.n	8012978 <__smakebuf_r+0x1c>
 8012968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801296c:	6023      	str	r3, [r4, #0]
 801296e:	6123      	str	r3, [r4, #16]
 8012970:	2301      	movs	r3, #1
 8012972:	6163      	str	r3, [r4, #20]
 8012974:	b002      	add	sp, #8
 8012976:	bd70      	pop	{r4, r5, r6, pc}
 8012978:	ab01      	add	r3, sp, #4
 801297a:	466a      	mov	r2, sp
 801297c:	f7ff ffca 	bl	8012914 <__swhatbuf_r>
 8012980:	9900      	ldr	r1, [sp, #0]
 8012982:	4605      	mov	r5, r0
 8012984:	4630      	mov	r0, r6
 8012986:	f7ff f9f9 	bl	8011d7c <_malloc_r>
 801298a:	b948      	cbnz	r0, 80129a0 <__smakebuf_r+0x44>
 801298c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012990:	059a      	lsls	r2, r3, #22
 8012992:	d4ef      	bmi.n	8012974 <__smakebuf_r+0x18>
 8012994:	f023 0303 	bic.w	r3, r3, #3
 8012998:	f043 0302 	orr.w	r3, r3, #2
 801299c:	81a3      	strh	r3, [r4, #12]
 801299e:	e7e3      	b.n	8012968 <__smakebuf_r+0xc>
 80129a0:	4b0d      	ldr	r3, [pc, #52]	; (80129d8 <__smakebuf_r+0x7c>)
 80129a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80129a4:	89a3      	ldrh	r3, [r4, #12]
 80129a6:	6020      	str	r0, [r4, #0]
 80129a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129ac:	81a3      	strh	r3, [r4, #12]
 80129ae:	9b00      	ldr	r3, [sp, #0]
 80129b0:	6163      	str	r3, [r4, #20]
 80129b2:	9b01      	ldr	r3, [sp, #4]
 80129b4:	6120      	str	r0, [r4, #16]
 80129b6:	b15b      	cbz	r3, 80129d0 <__smakebuf_r+0x74>
 80129b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129bc:	4630      	mov	r0, r6
 80129be:	f000 f915 	bl	8012bec <_isatty_r>
 80129c2:	b128      	cbz	r0, 80129d0 <__smakebuf_r+0x74>
 80129c4:	89a3      	ldrh	r3, [r4, #12]
 80129c6:	f023 0303 	bic.w	r3, r3, #3
 80129ca:	f043 0301 	orr.w	r3, r3, #1
 80129ce:	81a3      	strh	r3, [r4, #12]
 80129d0:	89a0      	ldrh	r0, [r4, #12]
 80129d2:	4305      	orrs	r5, r0
 80129d4:	81a5      	strh	r5, [r4, #12]
 80129d6:	e7cd      	b.n	8012974 <__smakebuf_r+0x18>
 80129d8:	0801276d 	.word	0x0801276d

080129dc <memmove>:
 80129dc:	4288      	cmp	r0, r1
 80129de:	b510      	push	{r4, lr}
 80129e0:	eb01 0402 	add.w	r4, r1, r2
 80129e4:	d902      	bls.n	80129ec <memmove+0x10>
 80129e6:	4284      	cmp	r4, r0
 80129e8:	4623      	mov	r3, r4
 80129ea:	d807      	bhi.n	80129fc <memmove+0x20>
 80129ec:	1e43      	subs	r3, r0, #1
 80129ee:	42a1      	cmp	r1, r4
 80129f0:	d008      	beq.n	8012a04 <memmove+0x28>
 80129f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129fa:	e7f8      	b.n	80129ee <memmove+0x12>
 80129fc:	4402      	add	r2, r0
 80129fe:	4601      	mov	r1, r0
 8012a00:	428a      	cmp	r2, r1
 8012a02:	d100      	bne.n	8012a06 <memmove+0x2a>
 8012a04:	bd10      	pop	{r4, pc}
 8012a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a0e:	e7f7      	b.n	8012a00 <memmove+0x24>

08012a10 <__malloc_lock>:
 8012a10:	4801      	ldr	r0, [pc, #4]	; (8012a18 <__malloc_lock+0x8>)
 8012a12:	f7ff bf7d 	b.w	8012910 <__retarget_lock_acquire_recursive>
 8012a16:	bf00      	nop
 8012a18:	20005b4c 	.word	0x20005b4c

08012a1c <__malloc_unlock>:
 8012a1c:	4801      	ldr	r0, [pc, #4]	; (8012a24 <__malloc_unlock+0x8>)
 8012a1e:	f7ff bf78 	b.w	8012912 <__retarget_lock_release_recursive>
 8012a22:	bf00      	nop
 8012a24:	20005b4c 	.word	0x20005b4c

08012a28 <_realloc_r>:
 8012a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a2a:	4607      	mov	r7, r0
 8012a2c:	4614      	mov	r4, r2
 8012a2e:	460e      	mov	r6, r1
 8012a30:	b921      	cbnz	r1, 8012a3c <_realloc_r+0x14>
 8012a32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012a36:	4611      	mov	r1, r2
 8012a38:	f7ff b9a0 	b.w	8011d7c <_malloc_r>
 8012a3c:	b922      	cbnz	r2, 8012a48 <_realloc_r+0x20>
 8012a3e:	f7ff f94d 	bl	8011cdc <_free_r>
 8012a42:	4625      	mov	r5, r4
 8012a44:	4628      	mov	r0, r5
 8012a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a48:	f000 f8f2 	bl	8012c30 <_malloc_usable_size_r>
 8012a4c:	42a0      	cmp	r0, r4
 8012a4e:	d20f      	bcs.n	8012a70 <_realloc_r+0x48>
 8012a50:	4621      	mov	r1, r4
 8012a52:	4638      	mov	r0, r7
 8012a54:	f7ff f992 	bl	8011d7c <_malloc_r>
 8012a58:	4605      	mov	r5, r0
 8012a5a:	2800      	cmp	r0, #0
 8012a5c:	d0f2      	beq.n	8012a44 <_realloc_r+0x1c>
 8012a5e:	4631      	mov	r1, r6
 8012a60:	4622      	mov	r2, r4
 8012a62:	f7fb fe61 	bl	800e728 <memcpy>
 8012a66:	4631      	mov	r1, r6
 8012a68:	4638      	mov	r0, r7
 8012a6a:	f7ff f937 	bl	8011cdc <_free_r>
 8012a6e:	e7e9      	b.n	8012a44 <_realloc_r+0x1c>
 8012a70:	4635      	mov	r5, r6
 8012a72:	e7e7      	b.n	8012a44 <_realloc_r+0x1c>

08012a74 <_raise_r>:
 8012a74:	291f      	cmp	r1, #31
 8012a76:	b538      	push	{r3, r4, r5, lr}
 8012a78:	4604      	mov	r4, r0
 8012a7a:	460d      	mov	r5, r1
 8012a7c:	d904      	bls.n	8012a88 <_raise_r+0x14>
 8012a7e:	2316      	movs	r3, #22
 8012a80:	6003      	str	r3, [r0, #0]
 8012a82:	f04f 30ff 	mov.w	r0, #4294967295
 8012a86:	bd38      	pop	{r3, r4, r5, pc}
 8012a88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012a8a:	b112      	cbz	r2, 8012a92 <_raise_r+0x1e>
 8012a8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a90:	b94b      	cbnz	r3, 8012aa6 <_raise_r+0x32>
 8012a92:	4620      	mov	r0, r4
 8012a94:	f000 f830 	bl	8012af8 <_getpid_r>
 8012a98:	462a      	mov	r2, r5
 8012a9a:	4601      	mov	r1, r0
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aa2:	f000 b817 	b.w	8012ad4 <_kill_r>
 8012aa6:	2b01      	cmp	r3, #1
 8012aa8:	d00a      	beq.n	8012ac0 <_raise_r+0x4c>
 8012aaa:	1c59      	adds	r1, r3, #1
 8012aac:	d103      	bne.n	8012ab6 <_raise_r+0x42>
 8012aae:	2316      	movs	r3, #22
 8012ab0:	6003      	str	r3, [r0, #0]
 8012ab2:	2001      	movs	r0, #1
 8012ab4:	e7e7      	b.n	8012a86 <_raise_r+0x12>
 8012ab6:	2400      	movs	r4, #0
 8012ab8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012abc:	4628      	mov	r0, r5
 8012abe:	4798      	blx	r3
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	e7e0      	b.n	8012a86 <_raise_r+0x12>

08012ac4 <raise>:
 8012ac4:	4b02      	ldr	r3, [pc, #8]	; (8012ad0 <raise+0xc>)
 8012ac6:	4601      	mov	r1, r0
 8012ac8:	6818      	ldr	r0, [r3, #0]
 8012aca:	f7ff bfd3 	b.w	8012a74 <_raise_r>
 8012ace:	bf00      	nop
 8012ad0:	20000028 	.word	0x20000028

08012ad4 <_kill_r>:
 8012ad4:	b538      	push	{r3, r4, r5, lr}
 8012ad6:	4d07      	ldr	r5, [pc, #28]	; (8012af4 <_kill_r+0x20>)
 8012ad8:	2300      	movs	r3, #0
 8012ada:	4604      	mov	r4, r0
 8012adc:	4608      	mov	r0, r1
 8012ade:	4611      	mov	r1, r2
 8012ae0:	602b      	str	r3, [r5, #0]
 8012ae2:	f7f0 fadd 	bl	80030a0 <_kill>
 8012ae6:	1c43      	adds	r3, r0, #1
 8012ae8:	d102      	bne.n	8012af0 <_kill_r+0x1c>
 8012aea:	682b      	ldr	r3, [r5, #0]
 8012aec:	b103      	cbz	r3, 8012af0 <_kill_r+0x1c>
 8012aee:	6023      	str	r3, [r4, #0]
 8012af0:	bd38      	pop	{r3, r4, r5, pc}
 8012af2:	bf00      	nop
 8012af4:	20005b54 	.word	0x20005b54

08012af8 <_getpid_r>:
 8012af8:	f7f0 baca 	b.w	8003090 <_getpid>

08012afc <__sread>:
 8012afc:	b510      	push	{r4, lr}
 8012afe:	460c      	mov	r4, r1
 8012b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b04:	f000 f89c 	bl	8012c40 <_read_r>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	bfab      	itete	ge
 8012b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8012b10:	181b      	addge	r3, r3, r0
 8012b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b16:	bfac      	ite	ge
 8012b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b1a:	81a3      	strhlt	r3, [r4, #12]
 8012b1c:	bd10      	pop	{r4, pc}

08012b1e <__swrite>:
 8012b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b22:	461f      	mov	r7, r3
 8012b24:	898b      	ldrh	r3, [r1, #12]
 8012b26:	05db      	lsls	r3, r3, #23
 8012b28:	4605      	mov	r5, r0
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	4616      	mov	r6, r2
 8012b2e:	d505      	bpl.n	8012b3c <__swrite+0x1e>
 8012b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b34:	2302      	movs	r3, #2
 8012b36:	2200      	movs	r2, #0
 8012b38:	f000 f868 	bl	8012c0c <_lseek_r>
 8012b3c:	89a3      	ldrh	r3, [r4, #12]
 8012b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b46:	81a3      	strh	r3, [r4, #12]
 8012b48:	4632      	mov	r2, r6
 8012b4a:	463b      	mov	r3, r7
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b52:	f000 b817 	b.w	8012b84 <_write_r>

08012b56 <__sseek>:
 8012b56:	b510      	push	{r4, lr}
 8012b58:	460c      	mov	r4, r1
 8012b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b5e:	f000 f855 	bl	8012c0c <_lseek_r>
 8012b62:	1c43      	adds	r3, r0, #1
 8012b64:	89a3      	ldrh	r3, [r4, #12]
 8012b66:	bf15      	itete	ne
 8012b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b72:	81a3      	strheq	r3, [r4, #12]
 8012b74:	bf18      	it	ne
 8012b76:	81a3      	strhne	r3, [r4, #12]
 8012b78:	bd10      	pop	{r4, pc}

08012b7a <__sclose>:
 8012b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b7e:	f000 b813 	b.w	8012ba8 <_close_r>
	...

08012b84 <_write_r>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	4d07      	ldr	r5, [pc, #28]	; (8012ba4 <_write_r+0x20>)
 8012b88:	4604      	mov	r4, r0
 8012b8a:	4608      	mov	r0, r1
 8012b8c:	4611      	mov	r1, r2
 8012b8e:	2200      	movs	r2, #0
 8012b90:	602a      	str	r2, [r5, #0]
 8012b92:	461a      	mov	r2, r3
 8012b94:	f7f0 fabb 	bl	800310e <_write>
 8012b98:	1c43      	adds	r3, r0, #1
 8012b9a:	d102      	bne.n	8012ba2 <_write_r+0x1e>
 8012b9c:	682b      	ldr	r3, [r5, #0]
 8012b9e:	b103      	cbz	r3, 8012ba2 <_write_r+0x1e>
 8012ba0:	6023      	str	r3, [r4, #0]
 8012ba2:	bd38      	pop	{r3, r4, r5, pc}
 8012ba4:	20005b54 	.word	0x20005b54

08012ba8 <_close_r>:
 8012ba8:	b538      	push	{r3, r4, r5, lr}
 8012baa:	4d06      	ldr	r5, [pc, #24]	; (8012bc4 <_close_r+0x1c>)
 8012bac:	2300      	movs	r3, #0
 8012bae:	4604      	mov	r4, r0
 8012bb0:	4608      	mov	r0, r1
 8012bb2:	602b      	str	r3, [r5, #0]
 8012bb4:	f7f0 fac7 	bl	8003146 <_close>
 8012bb8:	1c43      	adds	r3, r0, #1
 8012bba:	d102      	bne.n	8012bc2 <_close_r+0x1a>
 8012bbc:	682b      	ldr	r3, [r5, #0]
 8012bbe:	b103      	cbz	r3, 8012bc2 <_close_r+0x1a>
 8012bc0:	6023      	str	r3, [r4, #0]
 8012bc2:	bd38      	pop	{r3, r4, r5, pc}
 8012bc4:	20005b54 	.word	0x20005b54

08012bc8 <_fstat_r>:
 8012bc8:	b538      	push	{r3, r4, r5, lr}
 8012bca:	4d07      	ldr	r5, [pc, #28]	; (8012be8 <_fstat_r+0x20>)
 8012bcc:	2300      	movs	r3, #0
 8012bce:	4604      	mov	r4, r0
 8012bd0:	4608      	mov	r0, r1
 8012bd2:	4611      	mov	r1, r2
 8012bd4:	602b      	str	r3, [r5, #0]
 8012bd6:	f7f0 fac2 	bl	800315e <_fstat>
 8012bda:	1c43      	adds	r3, r0, #1
 8012bdc:	d102      	bne.n	8012be4 <_fstat_r+0x1c>
 8012bde:	682b      	ldr	r3, [r5, #0]
 8012be0:	b103      	cbz	r3, 8012be4 <_fstat_r+0x1c>
 8012be2:	6023      	str	r3, [r4, #0]
 8012be4:	bd38      	pop	{r3, r4, r5, pc}
 8012be6:	bf00      	nop
 8012be8:	20005b54 	.word	0x20005b54

08012bec <_isatty_r>:
 8012bec:	b538      	push	{r3, r4, r5, lr}
 8012bee:	4d06      	ldr	r5, [pc, #24]	; (8012c08 <_isatty_r+0x1c>)
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	4608      	mov	r0, r1
 8012bf6:	602b      	str	r3, [r5, #0]
 8012bf8:	f7f0 fac1 	bl	800317e <_isatty>
 8012bfc:	1c43      	adds	r3, r0, #1
 8012bfe:	d102      	bne.n	8012c06 <_isatty_r+0x1a>
 8012c00:	682b      	ldr	r3, [r5, #0]
 8012c02:	b103      	cbz	r3, 8012c06 <_isatty_r+0x1a>
 8012c04:	6023      	str	r3, [r4, #0]
 8012c06:	bd38      	pop	{r3, r4, r5, pc}
 8012c08:	20005b54 	.word	0x20005b54

08012c0c <_lseek_r>:
 8012c0c:	b538      	push	{r3, r4, r5, lr}
 8012c0e:	4d07      	ldr	r5, [pc, #28]	; (8012c2c <_lseek_r+0x20>)
 8012c10:	4604      	mov	r4, r0
 8012c12:	4608      	mov	r0, r1
 8012c14:	4611      	mov	r1, r2
 8012c16:	2200      	movs	r2, #0
 8012c18:	602a      	str	r2, [r5, #0]
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	f7f0 faba 	bl	8003194 <_lseek>
 8012c20:	1c43      	adds	r3, r0, #1
 8012c22:	d102      	bne.n	8012c2a <_lseek_r+0x1e>
 8012c24:	682b      	ldr	r3, [r5, #0]
 8012c26:	b103      	cbz	r3, 8012c2a <_lseek_r+0x1e>
 8012c28:	6023      	str	r3, [r4, #0]
 8012c2a:	bd38      	pop	{r3, r4, r5, pc}
 8012c2c:	20005b54 	.word	0x20005b54

08012c30 <_malloc_usable_size_r>:
 8012c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c34:	1f18      	subs	r0, r3, #4
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	bfbc      	itt	lt
 8012c3a:	580b      	ldrlt	r3, [r1, r0]
 8012c3c:	18c0      	addlt	r0, r0, r3
 8012c3e:	4770      	bx	lr

08012c40 <_read_r>:
 8012c40:	b538      	push	{r3, r4, r5, lr}
 8012c42:	4d07      	ldr	r5, [pc, #28]	; (8012c60 <_read_r+0x20>)
 8012c44:	4604      	mov	r4, r0
 8012c46:	4608      	mov	r0, r1
 8012c48:	4611      	mov	r1, r2
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	602a      	str	r2, [r5, #0]
 8012c4e:	461a      	mov	r2, r3
 8012c50:	f7f0 fa40 	bl	80030d4 <_read>
 8012c54:	1c43      	adds	r3, r0, #1
 8012c56:	d102      	bne.n	8012c5e <_read_r+0x1e>
 8012c58:	682b      	ldr	r3, [r5, #0]
 8012c5a:	b103      	cbz	r3, 8012c5e <_read_r+0x1e>
 8012c5c:	6023      	str	r3, [r4, #0]
 8012c5e:	bd38      	pop	{r3, r4, r5, pc}
 8012c60:	20005b54 	.word	0x20005b54

08012c64 <trunc>:
 8012c64:	ec51 0b10 	vmov	r0, r1, d0
 8012c68:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012c6c:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012c70:	2b13      	cmp	r3, #19
 8012c72:	b5d0      	push	{r4, r6, r7, lr}
 8012c74:	460c      	mov	r4, r1
 8012c76:	dc10      	bgt.n	8012c9a <trunc+0x36>
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	bfa5      	ittet	ge
 8012c7c:	4a11      	ldrge	r2, [pc, #68]	; (8012cc4 <trunc+0x60>)
 8012c7e:	fa42 f303 	asrge.w	r3, r2, r3
 8012c82:	2100      	movlt	r1, #0
 8012c84:	2100      	movge	r1, #0
 8012c86:	bfb9      	ittee	lt
 8012c88:	2000      	movlt	r0, #0
 8012c8a:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8012c8e:	2000      	movge	r0, #0
 8012c90:	ea24 0103 	bicge.w	r1, r4, r3
 8012c94:	ec41 0b10 	vmov	d0, r0, r1
 8012c98:	bdd0      	pop	{r4, r6, r7, pc}
 8012c9a:	2b33      	cmp	r3, #51	; 0x33
 8012c9c:	dd08      	ble.n	8012cb0 <trunc+0x4c>
 8012c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ca2:	d1f7      	bne.n	8012c94 <trunc+0x30>
 8012ca4:	ee10 2a10 	vmov	r2, s0
 8012ca8:	460b      	mov	r3, r1
 8012caa:	f7ed faf7 	bl	800029c <__adddf3>
 8012cae:	e7f1      	b.n	8012c94 <trunc+0x30>
 8012cb0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8012cb8:	fa23 f202 	lsr.w	r2, r3, r2
 8012cbc:	ea20 0602 	bic.w	r6, r0, r2
 8012cc0:	4630      	mov	r0, r6
 8012cc2:	e7e7      	b.n	8012c94 <trunc+0x30>
 8012cc4:	000fffff 	.word	0x000fffff

08012cc8 <_init>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	bf00      	nop
 8012ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cce:	bc08      	pop	{r3}
 8012cd0:	469e      	mov	lr, r3
 8012cd2:	4770      	bx	lr

08012cd4 <_fini>:
 8012cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd6:	bf00      	nop
 8012cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cda:	bc08      	pop	{r3}
 8012cdc:	469e      	mov	lr, r3
 8012cde:	4770      	bx	lr
