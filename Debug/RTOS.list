
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  08015a60  08015a60  00025a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080167e8  080167e8  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080167e8  080167e8  000267e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080167f0  080167f0  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080167f0  080167f0  000267f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080167f4  080167f4  000267f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080167f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b8c  20000200  080169f8  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005d8c  080169f8  00035d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000296e9  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ef  00000000  00000000  00059919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  0005ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d98  00000000  00000000  00060970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da9a  00000000  00000000  00062708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002573f  00000000  00000000  000801a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad5ee  00000000  00000000  000a58e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152ecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a044  00000000  00000000  00152f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015a44 	.word	0x08015a44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	08015a44 	.word	0x08015a44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <Write_MFRC522+0x58>)
 8001020:	f004 f83e 	bl	80050a0 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001024:	f107 010f 	add.w	r1, r7, #15
 8001028:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800102c:	2201      	movs	r2, #1
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <Write_MFRC522+0x5c>)
 8001030:	f005 fd3f 	bl	8006ab2 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8001034:	1db9      	adds	r1, r7, #6
 8001036:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103a:	2201      	movs	r2, #1
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <Write_MFRC522+0x5c>)
 800103e:	f005 fd38 	bl	8006ab2 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <Write_MFRC522+0x58>)
 8001048:	f004 f82a 	bl	80050a0 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020000 	.word	0x40020000
 8001058:	20005588 	.word	0x20005588

0800105c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	b25b      	sxtb	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <Read_MFRC522+0x60>)
 8001082:	f004 f80d 	bl	80050a0 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001086:	f107 010e 	add.w	r1, r7, #14
 800108a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <Read_MFRC522+0x64>)
 8001092:	f005 fd0e 	bl	8006ab2 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800109e:	2201      	movs	r2, #1
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <Read_MFRC522+0x64>)
 80010a2:	f005 fe42 	bl	8006d2a <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <Read_MFRC522+0x60>)
 80010ac:	f003 fff8 	bl	80050a0 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000
 80010c0:	20005588 	.word	0x20005588

080010c4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffc0 	bl	800105c <Read_MFRC522>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff85 	bl	8000ffc <Write_MFRC522>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	460a      	mov	r2, r1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4613      	mov	r3, r2
 8001108:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffa5 	bl	800105c <Read_MFRC522>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001116:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800111a:	43db      	mvns	r3, r3
 800111c:	b25a      	sxtb	r2, r3
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4013      	ands	r3, r2
 8001124:	b25b      	sxtb	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff65 	bl	8000ffc <Write_MFRC522>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2014      	movs	r0, #20
 8001142:	f7ff ffbf 	bl	80010c4 <SetBitMask>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800114e:	210f      	movs	r1, #15
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff53 	bl	8000ffc <Write_MFRC522>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <MFRC522_Init+0x54>)
 8001166:	f003 ff9b 	bl	80050a0 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 800116a:	f7ff ffee 	bl	800114a <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	202a      	movs	r0, #42	; 0x2a
 8001172:	f7ff ff43 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 8001176:	21a9      	movs	r1, #169	; 0xa9
 8001178:	202b      	movs	r0, #43	; 0x2b
 800117a:	f7ff ff3f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800117e:	2103      	movs	r1, #3
 8001180:	202d      	movs	r0, #45	; 0x2d
 8001182:	f7ff ff3b 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001186:	21e8      	movs	r1, #232	; 0xe8
 8001188:	202c      	movs	r0, #44	; 0x2c
 800118a:	f7ff ff37 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	2015      	movs	r0, #21
 8001192:	f7ff ff33 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 8001196:	213d      	movs	r1, #61	; 0x3d
 8001198:	2011      	movs	r0, #17
 800119a:	f7ff ff2f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 800119e:	2170      	movs	r1, #112	; 0x70
 80011a0:	2026      	movs	r0, #38	; 0x26
 80011a2:	f7ff ff2b 	bl	8000ffc <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80011a6:	f7ff ffc8 	bl	800113a <AntennaOn>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000

080011b4 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80011c0:	2107      	movs	r1, #7
 80011c2:	200d      	movs	r0, #13
 80011c4:	f7ff ff1a 	bl	8000ffc <Write_MFRC522>

  TagType[0] = reqMode;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	200c      	movs	r0, #12
 80011dc:	f000 f80f 	bl	80011fe <MFRC522_ToCard>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <MFRC522_Request+0x3c>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d001      	beq.n	80011f4 <MFRC522_Request+0x40>
    status = MI_ERR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	4613      	mov	r3, r2
 800120e:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8001210:	2302      	movs	r3, #2
 8001212:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b0c      	cmp	r3, #12
 8001220:	d006      	beq.n	8001230 <MFRC522_ToCard+0x32>
 8001222:	2b0e      	cmp	r3, #14
 8001224:	d109      	bne.n	800123a <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001226:	2312      	movs	r3, #18
 8001228:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 800122a:	2310      	movs	r3, #16
 800122c:	777b      	strb	r3, [r7, #29]
        break;
 800122e:	e005      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001230:	2377      	movs	r3, #119	; 0x77
 8001232:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001234:	2330      	movs	r3, #48	; 0x30
 8001236:	777b      	strb	r3, [r7, #29]
        break;
 8001238:	e000      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800123a:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800123c:	7fbb      	ldrb	r3, [r7, #30]
 800123e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff fed8 	bl	8000ffc <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff ff53 	bl	80010fa <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	200a      	movs	r0, #10
 8001258:	f7ff ff34 	bl	80010c4 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 800125c:	2100      	movs	r1, #0
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fecc 	bl	8000ffc <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e00a      	b.n	8001280 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	2009      	movs	r0, #9
 8001276:	f7ff fec1 	bl	8000ffc <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3301      	adds	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3f0      	bcc.n	800126a <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4619      	mov	r1, r3
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff feb5 	bl	8000ffc <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d103      	bne.n	80012a0 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	200d      	movs	r0, #13
 800129c:	f7ff ff12 	bl	80010c4 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80012a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a4:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80012a6:	2004      	movs	r0, #4
 80012a8:	f7ff fed8 	bl	800105c <Read_MFRC522>
 80012ac:	4603      	mov	r3, r0
 80012ae:	773b      	strb	r3, [r7, #28]
    i--;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <MFRC522_ToCard+0xd4>
 80012bc:	7f3b      	ldrb	r3, [r7, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <MFRC522_ToCard+0xd4>
 80012c6:	7f3a      	ldrb	r2, [r7, #28]
 80012c8:	7f7b      	ldrb	r3, [r7, #29]
 80012ca:	4013      	ands	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0e9      	beq.n	80012a6 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	200d      	movs	r0, #13
 80012d6:	f7ff ff10 	bl	80010fa <ClearBitMask>

  if (i != 0)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d052      	beq.n	8001386 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80012e0:	2006      	movs	r0, #6
 80012e2:	f7ff febb 	bl	800105c <Read_MFRC522>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 031b 	and.w	r3, r3, #27
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d148      	bne.n	8001382 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80012f4:	7f3a      	ldrb	r2, [r7, #28]
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8001304:	2301      	movs	r3, #1
 8001306:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d13b      	bne.n	8001386 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fea4 	bl	800105c <Read_MFRC522>
 8001314:	4603      	mov	r3, r0
 8001316:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001318:	200c      	movs	r0, #12
 800131a:	f7ff fe9f 	bl	800105c <Read_MFRC522>
 800131e:	4603      	mov	r3, r0
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 800132c:	7f3b      	ldrb	r3, [r7, #28]
 800132e:	3b01      	subs	r3, #1
 8001330:	00da      	lsls	r2, r3, #3
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4413      	add	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e004      	b.n	8001348 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 800133e:	7f3b      	ldrb	r3, [r7, #28]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	461a      	mov	r2, r3
 8001344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001346:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001348:	7f3b      	ldrb	r3, [r7, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <MFRC522_ToCard+0x154>
        {
          n = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	2b10      	cmp	r3, #16
 8001356:	d901      	bls.n	800135c <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8001358:	2310      	movs	r3, #16
 800135a:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e00a      	b.n	8001378 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	18d4      	adds	r4, r2, r3
 8001368:	2009      	movs	r0, #9
 800136a:	f7ff fe77 	bl	800105c <Read_MFRC522>
 800136e:	4603      	mov	r3, r0
 8001370:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3301      	adds	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	7f3b      	ldrb	r3, [r7, #28]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f0      	bcc.n	8001362 <MFRC522_ToCard+0x164>
 8001380:	e001      	b.n	8001386 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001382:	2302      	movs	r3, #2
 8001384:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001386:	7ffb      	ldrb	r3, [r7, #31]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8001398:	2300      	movs	r3, #0
 800139a:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800139c:	2100      	movs	r1, #0
 800139e:	200d      	movs	r0, #13
 80013a0:	f7ff fe2c 	bl	8000ffc <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2293      	movs	r2, #147	; 0x93
 80013a8:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	2220      	movs	r2, #32
 80013b0:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200c      	movs	r0, #12
 80013c0:	f7ff ff1d 	bl	80011fe <MFRC522_ToCard>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]
 80013d2:	e009      	b.n	80013e8 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	4053      	eors	r3, r2
 80013e0:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73bb      	strb	r3, [r7, #14]
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d9f2      	bls.n	80013d4 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	7b7a      	ldrb	r2, [r7, #13]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 80013fc:	2302      	movs	r3, #2
 80013fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	0000      	movs	r0, r0
 800140c:	0000      	movs	r0, r0
	...

08001410 <RCFilter_Init>:
#include "RCFilter.h"
#include <math.h>

void RCFilter_Init(RCFilter * filter, float cutoffFreqHz, float sampleFreq_Hz){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	ed87 0a02 	vstr	s0, [r7, #8]
 800141c:	edc7 0a01 	vstr	s1, [r7, #4]
	/*Clear output buffer*/
	filter->out[0] = 0.0f;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
	filter->out[1] = 0.0f;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
	float sampleTime_s = 1.0f/ sampleFreq_Hz;
 8001430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001434:	ed97 7a01 	vldr	s14, [r7, #4]
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	edc7 7a05 	vstr	s15, [r7, #20]
	/*Compute equivalent RC Constant from cutoff Frequency*/
	float RC = 1.0f/(2* M_PI * cutoffFreqHz);
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f889 	bl	8000558 <__aeabi_f2d>
 8001446:	a31b      	add	r3, pc, #108	; (adr r3, 80014b4 <RCFilter_Init+0xa4>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8dc 	bl	8000608 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	f04f 0000 	mov.w	r0, #0
 8001458:	4915      	ldr	r1, [pc, #84]	; (80014b0 <RCFilter_Init+0xa0>)
 800145a:	f7ff f9ff 	bl	800085c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbc7 	bl	8000bf8 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	613b      	str	r3, [r7, #16]
	/*Pre-compute filter coefficient for first order low-pass filter*/
	filter->coeff[0] = sampleTime_s/(sampleTime_s+ RC);
 800146e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001472:	edd7 7a04 	vldr	s15, [r7, #16]
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	edd7 6a05 	vldr	s13, [r7, #20]
 800147e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edc3 7a00 	vstr	s15, [r3]
	filter->coeff[1] = RC/(sampleTime_s+RC);
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 6a04 	vldr	s13, [r7, #16]
 8001498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	3ff00000 	.word	0x3ff00000
 80014b4:	54442d18 	.word	0x54442d18
 80014b8:	401921fb 	.word	0x401921fb

080014bc <RCFilter_Update>:

float RCFilter_Update(RCFilter *filter, float input){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	ed87 0a00 	vstr	s0, [r7]
	/* Shift output samples */
	filter->out[1] = filter->out[0];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

	/* Compute new ouput sample */
	filter->out[0] = filter->coeff[0] * input+filter->coeff[1] * filter->out[1];
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	edd7 7a00 	vldr	s15, [r7]
 80014da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return Filtered sample */
	return filter->out[0];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	ee07 3a90 	vmov	s15, r3
}
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <MovAvgFilter_init>:

void MovAvgFilter_init(MovAvgFilter * filter){
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	/*Clear output buffer*/
	filter->out = 0.0f;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/*clear value*/
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e009      	b.n	800153a <MovAvgFilter_init+0x2c>
		filter -> val[i]= 0;
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b31      	cmp	r3, #49	; 0x31
 800153e:	ddf2      	ble.n	8001526 <MovAvgFilter_init+0x18>
	}
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <MovAvgFilter_Update>:

float MovAvgFilter_Update(MovAvgFilter *filter, float input){
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	ed87 0a00 	vstr	s0, [r7]
	/*Shifting Value and calculate the cumulative sum*/
	float sum = 0;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e019      	b.n	800159c <MovAvgFilter_Update+0x4c>
		filter->val[i] = filter-> val[i+1];
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	601a      	str	r2, [r3, #0]
		sum += filter -> val[i];
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ed97 7a05 	vldr	s14, [r7, #20]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3301      	adds	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b31      	cmp	r3, #49	; 0x31
 80015a0:	dde2      	ble.n	8001568 <MovAvgFilter_Update+0x18>
	}
	(filter -> val[BUFF_LENGTH-1]) = input;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sum += input;
 80015aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80015ae:	edd7 7a00 	vldr	s15, [r7]
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	edc7 7a05 	vstr	s15, [r7, #20]

	/*Calculating the average*/
	float avg = sum/BUFF_LENGTH;
 80015ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80015be:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80015ec <MovAvgFilter_Update+0x9c>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	edc7 7a03 	vstr	s15, [r7, #12]
	filter -> out = avg;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	return filter -> out;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015d8:	ee07 3a90 	vmov	s15, r3
}
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	42480000 	.word	0x42480000

080015f0 <nmea0183_checksum>:
void LoggingData(void *argument);

/* USER CODE BEGIN PFP */
// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001600:	2301      	movs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e00a      	b.n	800161c <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4053      	eors	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3301      	adds	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe fddf 	bl	80001e0 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	1f1a      	subs	r2, r3, #4
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8ec      	bhi.n	8001606 <nmea0183_checksum+0x16>
	}
	return checksum;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	flag = 1;
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <HAL_UART_RxCpltCallback+0x1c>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000240 	.word	0x20000240

08001658 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i<3; i++){
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e010      	b.n	8001688 <HAL_ADC_ConvCpltCallback+0x30>
	  value[i] = buffer[i];
 8001666:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_ADC_ConvCpltCallback+0x44>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_ADC_ConvCpltCallback+0x48>)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i<3; i++){
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3301      	adds	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b02      	cmp	r3, #2
 800168c:	ddeb      	ble.n	8001666 <HAL_ADC_ConvCpltCallback+0xe>
  }
  //Filtering Analog reading
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	20005420 	.word	0x20005420
 80016a0:	20005878 	.word	0x20005878

080016a4 <myprintf>:

void myprintf(const char *fmt, ...) {
 80016a4:	b40f      	push	{r0, r1, r2, r3}
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	480b      	ldr	r0, [pc, #44]	; (80016e8 <myprintf+0x44>)
 80016bc:	f00f f846 	bl	801074c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80016c0:	4809      	ldr	r0, [pc, #36]	; (80016e8 <myprintf+0x44>)
 80016c2:	f7fe fd8d 	bl	80001e0 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	4905      	ldr	r1, [pc, #20]	; (80016e8 <myprintf+0x44>)
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <myprintf+0x48>)
 80016d6:	f006 f9d8 	bl	8007a8a <HAL_UART_Transmit>

}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016e4:	b004      	add	sp, #16
 80016e6:	4770      	bx	lr
 80016e8:	2000028c 	.word	0x2000028c
 80016ec:	200055e0 	.word	0x200055e0

080016f0 <distance_on_geoid>:

double distance_on_geoid(double lat1, double lon1, double lat2, double lon2) {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b0a0      	sub	sp, #128	; 0x80
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	ed87 0b06 	vstr	d0, [r7, #24]
 80016fa:	ed87 1b04 	vstr	d1, [r7, #16]
 80016fe:	ed87 2b02 	vstr	d2, [r7, #8]
 8001702:	ed87 3b00 	vstr	d3, [r7]

	// Convert degrees to radians
	lat1 = lat1 * M_PI / 180.0;
 8001706:	a38c      	add	r3, pc, #560	; (adr r3, 8001938 <distance_on_geoid+0x248>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001710:	f7fe ff7a 	bl	8000608 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b89      	ldr	r3, [pc, #548]	; (8001948 <distance_on_geoid+0x258>)
 8001722:	f7ff f89b 	bl	800085c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	lon1 = lon1 * M_PI / 180.0;
 800172e:	a382      	add	r3, pc, #520	; (adr r3, 8001938 <distance_on_geoid+0x248>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001738:	f7fe ff66 	bl	8000608 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <distance_on_geoid+0x258>)
 800174a:	f7ff f887 	bl	800085c <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	e9c7 2304 	strd	r2, r3, [r7, #16]

	lat2 = lat2 * M_PI / 180.0;
 8001756:	a378      	add	r3, pc, #480	; (adr r3, 8001938 <distance_on_geoid+0x248>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001760:	f7fe ff52 	bl	8000608 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b75      	ldr	r3, [pc, #468]	; (8001948 <distance_on_geoid+0x258>)
 8001772:	f7ff f873 	bl	800085c <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	lon2 = lon2 * M_PI / 180.0;
 800177e:	a36e      	add	r3, pc, #440	; (adr r3, 8001938 <distance_on_geoid+0x248>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001788:	f7fe ff3e 	bl	8000608 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b6b      	ldr	r3, [pc, #428]	; (8001948 <distance_on_geoid+0x258>)
 800179a:	f7ff f85f 	bl	800085c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	e9c7 2300 	strd	r2, r3, [r7]

	// radius of earth in metres
	double r = 6378100;
 80017a6:	a366      	add	r3, pc, #408	; (adr r3, 8001940 <distance_on_geoid+0x250>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	// P
	double rho1 = r * cos(lat1);
 80017b0:	ed97 0b06 	vldr	d0, [r7, #24]
 80017b4:	f011 fea0 	bl	80134f8 <cos>
 80017b8:	ec53 2b10 	vmov	r2, r3, d0
 80017bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017c0:	f7fe ff22 	bl	8000608 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double z1 = r * sin(lat1);
 80017cc:	ed97 0b06 	vldr	d0, [r7, #24]
 80017d0:	f011 fee2 	bl	8013598 <sin>
 80017d4:	ec53 2b10 	vmov	r2, r3, d0
 80017d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017dc:	f7fe ff14 	bl	8000608 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double x1 = rho1 * cos(lon1);
 80017e8:	ed97 0b04 	vldr	d0, [r7, #16]
 80017ec:	f011 fe84 	bl	80134f8 <cos>
 80017f0:	ec53 2b10 	vmov	r2, r3, d0
 80017f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017f8:	f7fe ff06 	bl	8000608 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double y1 = rho1 * sin(lon1);
 8001804:	ed97 0b04 	vldr	d0, [r7, #16]
 8001808:	f011 fec6 	bl	8013598 <sin>
 800180c:	ec53 2b10 	vmov	r2, r3, d0
 8001810:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001814:	f7fe fef8 	bl	8000608 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	// Q
	double rho2 = r * cos(lat2);
 8001820:	ed97 0b02 	vldr	d0, [r7, #8]
 8001824:	f011 fe68 	bl	80134f8 <cos>
 8001828:	ec53 2b10 	vmov	r2, r3, d0
 800182c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001830:	f7fe feea 	bl	8000608 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double z2 = r * sin(lat2);
 800183c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001840:	f011 feaa 	bl	8013598 <sin>
 8001844:	ec53 2b10 	vmov	r2, r3, d0
 8001848:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800184c:	f7fe fedc 	bl	8000608 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double x2 = rho2 * cos(lon2);
 8001858:	ed97 0b00 	vldr	d0, [r7]
 800185c:	f011 fe4c 	bl	80134f8 <cos>
 8001860:	ec53 2b10 	vmov	r2, r3, d0
 8001864:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001868:	f7fe fece 	bl	8000608 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double y2 = rho2 * sin(lon2);
 8001874:	ed97 0b00 	vldr	d0, [r7]
 8001878:	f011 fe8e 	bl	8013598 <sin>
 800187c:	ec53 2b10 	vmov	r2, r3, d0
 8001880:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001884:	f7fe fec0 	bl	8000608 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Dot product
	double dot = (x1 * x2 + y1 * y2 + z1 * z2);
 8001890:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001894:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001898:	f7fe feb6 	bl	8000608 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4614      	mov	r4, r2
 80018a2:	461d      	mov	r5, r3
 80018a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80018ac:	f7fe feac 	bl	8000608 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fcf0 	bl	800029c <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80018cc:	f7fe fe9c 	bl	8000608 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fce0 	bl	800029c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double cos_theta = dot / (r * r);
 80018e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80018e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80018ec:	f7fe fe8c 	bl	8000608 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80018f8:	f7fe ffb0 	bl	800085c <__aeabi_ddiv>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	double theta = acos(cos_theta);
 8001904:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001908:	f011 fecc 	bl	80136a4 <acos>
 800190c:	ed87 0b08 	vstr	d0, [r7, #32]

	// Distance in Metres
	return r * theta;
 8001910:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001914:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001918:	f7fe fe76 	bl	8000608 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	ec43 2b17 	vmov	d7, r2, r3
}
 8001924:	eeb0 0a47 	vmov.f32	s0, s14
 8001928:	eef0 0a67 	vmov.f32	s1, s15
 800192c:	3780      	adds	r7, #128	; 0x80
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	54442d18 	.word	0x54442d18
 800193c:	400921fb 	.word	0x400921fb
 8001940:	00000000 	.word	0x00000000
 8001944:	4158549d 	.word	0x4158549d
 8001948:	40668000 	.word	0x40668000

0800194c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b09a      	sub	sp, #104	; 0x68
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001952:	f002 f8d7 	bl	8003b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001956:	f000 f8c1 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195a:	f000 fa79 	bl	8001e50 <MX_GPIO_Init>
  MX_DMA_Init();
 800195e:	f000 fa4f 	bl	8001e00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001962:	f000 fa23 	bl	8001dac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001966:	f000 f993 	bl	8001c90 <MX_I2C1_Init>
  MX_SPI1_Init();
 800196a:	f000 f9bf 	bl	8001cec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800196e:	f000 f9f3 	bl	8001d58 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001972:	f000 f91f 	bl	8001bb4 <MX_ADC1_Init>
  MX_FATFS_Init();
 8001976:	f006 ff9d 	bl	80088b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	2260      	movs	r2, #96	; 0x60
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f00d fb24 	bl	800efd4 <memset>
  sprintf(txBuffer, "Bismillah..\n");
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4932      	ldr	r1, [pc, #200]	; (8001a58 <main+0x10c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f00d ff91 	bl	800f8b8 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8001996:	1d39      	adds	r1, r7, #4
 8001998:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800199c:	2264      	movs	r2, #100	; 0x64
 800199e:	482f      	ldr	r0, [pc, #188]	; (8001a5c <main+0x110>)
 80019a0:	f006 f873 	bl	8007a8a <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019a4:	f009 fd54 	bl	800b450 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSPI1 */
  MutexSPI1Handle = osMutexNew(&MutexSPI1_attributes);
 80019a8:	482d      	ldr	r0, [pc, #180]	; (8001a60 <main+0x114>)
 80019aa:	f009 fe48 	bl	800b63e <osMutexNew>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <main+0x118>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* creation of mutexIMU */
  mutexIMUHandle = osMutexNew(&mutexIMU_attributes);
 80019b4:	482c      	ldr	r0, [pc, #176]	; (8001a68 <main+0x11c>)
 80019b6:	f009 fe42 	bl	800b63e <osMutexNew>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <main+0x120>)
 80019be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainProcessTask */
  MainProcessTaskHandle = osThreadNew(MainProcess, NULL, &MainProcessTask_attributes);
 80019c0:	4a2b      	ldr	r2, [pc, #172]	; (8001a70 <main+0x124>)
 80019c2:	2100      	movs	r1, #0
 80019c4:	482b      	ldr	r0, [pc, #172]	; (8001a74 <main+0x128>)
 80019c6:	f009 fd8d 	bl	800b4e4 <osThreadNew>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a2a      	ldr	r2, [pc, #168]	; (8001a78 <main+0x12c>)
 80019ce:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 80019d0:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <main+0x130>)
 80019d2:	2100      	movs	r1, #0
 80019d4:	482a      	ldr	r0, [pc, #168]	; (8001a80 <main+0x134>)
 80019d6:	f009 fd85 	bl	800b4e4 <osThreadNew>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <main+0x138>)
 80019de:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);
 80019e0:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <main+0x13c>)
 80019e2:	2100      	movs	r1, #0
 80019e4:	4829      	ldr	r0, [pc, #164]	; (8001a8c <main+0x140>)
 80019e6:	f009 fd7d 	bl	800b4e4 <osThreadNew>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <main+0x144>)
 80019ee:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 80019f0:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <main+0x148>)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4828      	ldr	r0, [pc, #160]	; (8001a98 <main+0x14c>)
 80019f6:	f009 fd75 	bl	800b4e4 <osThreadNew>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <main+0x150>)
 80019fe:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
  SDCardTaskHandle = osThreadNew(SDCard, NULL, &SDCardTask_attributes);
 8001a00:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <main+0x154>)
 8001a02:	2100      	movs	r1, #0
 8001a04:	4827      	ldr	r0, [pc, #156]	; (8001aa4 <main+0x158>)
 8001a06:	f009 fd6d 	bl	800b4e4 <osThreadNew>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <main+0x15c>)
 8001a0e:	6013      	str	r3, [r2, #0]

  /* creation of ADCProcessingTa */
  ADCProcessingTaHandle = osThreadNew(ADCProcesing, NULL, &ADCProcessingTa_attributes);
 8001a10:	4a26      	ldr	r2, [pc, #152]	; (8001aac <main+0x160>)
 8001a12:	2100      	movs	r1, #0
 8001a14:	4826      	ldr	r0, [pc, #152]	; (8001ab0 <main+0x164>)
 8001a16:	f009 fd65 	bl	800b4e4 <osThreadNew>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <main+0x168>)
 8001a1e:	6013      	str	r3, [r2, #0]

  /* creation of PowerManagement */
  PowerManagementHandle = osThreadNew(PowManagement, NULL, &PowerManagement_attributes);
 8001a20:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <main+0x16c>)
 8001a22:	2100      	movs	r1, #0
 8001a24:	4825      	ldr	r0, [pc, #148]	; (8001abc <main+0x170>)
 8001a26:	f009 fd5d 	bl	800b4e4 <osThreadNew>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <main+0x174>)
 8001a2e:	6013      	str	r3, [r2, #0]

  /* creation of IgnitionTask */
  IgnitionTaskHandle = osThreadNew(Ignition, NULL, &IgnitionTask_attributes);
 8001a30:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <main+0x178>)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4824      	ldr	r0, [pc, #144]	; (8001ac8 <main+0x17c>)
 8001a36:	f009 fd55 	bl	800b4e4 <osThreadNew>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a23      	ldr	r2, [pc, #140]	; (8001acc <main+0x180>)
 8001a3e:	6013      	str	r3, [r2, #0]

  /* creation of LoggingDataTask */
  LoggingDataTaskHandle = osThreadNew(LoggingData, NULL, &LoggingDataTask_attributes);
 8001a40:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <main+0x184>)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4823      	ldr	r0, [pc, #140]	; (8001ad4 <main+0x188>)
 8001a46:	f009 fd4d 	bl	800b4e4 <osThreadNew>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <main+0x18c>)
 8001a4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a50:	f009 fd22 	bl	800b498 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 8001a54:	e7fe      	b.n	8001a54 <main+0x108>
 8001a56:	bf00      	nop
 8001a58:	08015af0 	.word	0x08015af0
 8001a5c:	200055e0 	.word	0x200055e0
 8001a60:	08016004 	.word	0x08016004
 8001a64:	20005188 	.word	0x20005188
 8001a68:	08016014 	.word	0x08016014
 8001a6c:	20005118 	.word	0x20005118
 8001a70:	08015ec0 	.word	0x08015ec0
 8001a74:	08001f91 	.word	0x08001f91
 8001a78:	20005580 	.word	0x20005580
 8001a7c:	08015ee4 	.word	0x08015ee4
 8001a80:	08002149 	.word	0x08002149
 8001a84:	20005120 	.word	0x20005120
 8001a88:	08015f08 	.word	0x08015f08
 8001a8c:	08002451 	.word	0x08002451
 8001a90:	20005628 	.word	0x20005628
 8001a94:	08015f2c 	.word	0x08015f2c
 8001a98:	08002ab9 	.word	0x08002ab9
 8001a9c:	20005498 	.word	0x20005498
 8001aa0:	08015f50 	.word	0x08015f50
 8001aa4:	08002c31 	.word	0x08002c31
 8001aa8:	20004e74 	.word	0x20004e74
 8001aac:	08015f74 	.word	0x08015f74
 8001ab0:	08002e39 	.word	0x08002e39
 8001ab4:	2000541c 	.word	0x2000541c
 8001ab8:	08015f98 	.word	0x08015f98
 8001abc:	08002fb1 	.word	0x08002fb1
 8001ac0:	20005624 	.word	0x20005624
 8001ac4:	08015fbc 	.word	0x08015fbc
 8001ac8:	08003085 	.word	0x08003085
 8001acc:	20005870 	.word	0x20005870
 8001ad0:	08015fe0 	.word	0x08015fe0
 8001ad4:	080030d9 	.word	0x080030d9
 8001ad8:	20005260 	.word	0x20005260

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00d fa72 	bl	800efd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <SystemClock_Config+0xd0>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a28      	ldr	r2, [pc, #160]	; (8001bac <SystemClock_Config+0xd0>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b26      	ldr	r3, [pc, #152]	; (8001bac <SystemClock_Config+0xd0>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <SystemClock_Config+0xd4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <SystemClock_Config+0xd4>)
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <SystemClock_Config+0xd4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b44:	2310      	movs	r3, #16
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b50:	2310      	movs	r3, #16
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 fa74 	bl	8006054 <HAL_RCC_OscConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b72:	f001 fb23 	bl	80031bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b76:	230f      	movs	r3, #15
 8001b78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2102      	movs	r1, #2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 fcd6 	bl	8006544 <HAL_RCC_ClockConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b9e:	f001 fb0d 	bl	80031bc <Error_Handler>
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	3750      	adds	r7, #80	; 0x50
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001bc8:	4a2f      	ldr	r2, [pc, #188]	; (8001c88 <MX_ADC1_Init+0xd4>)
 8001bca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001bce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001bf6:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <MX_ADC1_Init+0xd8>)
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001c02:	2203      	movs	r2, #3
 8001c04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c14:	481b      	ldr	r0, [pc, #108]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001c16:	f001 ffdb 	bl	8003bd0 <HAL_ADC_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c20:	f001 facc 	bl	80031bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001c24:	230f      	movs	r3, #15
 8001c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	4813      	ldr	r0, [pc, #76]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001c36:	f002 f913 	bl	8003e60 <HAL_ADC_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c40:	f001 fabc 	bl	80031bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001c44:	2308      	movs	r3, #8
 8001c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001c52:	f002 f905 	bl	8003e60 <HAL_ADC_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c5c:	f001 faae 	bl	80031bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c60:	2309      	movs	r3, #9
 8001c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c64:	2303      	movs	r3, #3
 8001c66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c68:	463b      	mov	r3, r7
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_ADC1_Init+0xd0>)
 8001c6e:	f002 f8f7 	bl	8003e60 <HAL_ADC_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001c78:	f001 faa0 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20005330 	.word	0x20005330
 8001c88:	40012000 	.word	0x40012000
 8001c8c:	0f000001 	.word	0x0f000001

08001c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <MX_I2C1_Init+0x54>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <MX_I2C1_Init+0x58>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_I2C1_Init+0x50>)
 8001cce:	f003 fa01 	bl	80050d4 <HAL_I2C_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd8:	f001 fa70 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200050c4 	.word	0x200050c4
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	000186a0 	.word	0x000186a0

08001cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <MX_SPI1_Init+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d20:	2230      	movs	r2, #48	; 0x30
 8001d22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d38:	220a      	movs	r2, #10
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d3e:	f004 fe2f 	bl	80069a0 <HAL_SPI_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d48:	f001 fa38 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20005588 	.word	0x20005588
 8001d54:	40013000 	.word	0x40013000

08001d58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <MX_USART1_UART_Init+0x50>)
 8001d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d90:	f005 fe2e 	bl	80079f0 <HAL_UART_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d9a:	f001 fa0f 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200053d8 	.word	0x200053d8
 8001da8:	40011000 	.word	0x40011000

08001dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <MX_USART2_UART_Init+0x50>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001de4:	f005 fe04 	bl	80079f0 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dee:	f001 f9e5 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200055e0 	.word	0x200055e0
 8001dfc:	40004400 	.word	0x40004400

08001e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_DMA_Init+0x4c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <MX_DMA_Init+0x4c>)
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <MX_DMA_Init+0x4c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2105      	movs	r1, #5
 8001e26:	2038      	movs	r0, #56	; 0x38
 8001e28:	f002 fb72 	bl	8004510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e2c:	2038      	movs	r0, #56	; 0x38
 8001e2e:	f002 fb8b 	bl	8004548 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2105      	movs	r1, #5
 8001e36:	203a      	movs	r0, #58	; 0x3a
 8001e38:	f002 fb6a 	bl	8004510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e3c:	203a      	movs	r0, #58	; 0x3a
 8001e3e:	f002 fb83 	bl	8004548 <HAL_NVIC_EnableIRQ>

}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a43      	ldr	r2, [pc, #268]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a3c      	ldr	r2, [pc, #240]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a35      	ldr	r2, [pc, #212]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <MX_GPIO_Init+0x12c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2112      	movs	r1, #18
 8001eda:	4829      	ldr	r0, [pc, #164]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001edc:	f003 f8e0 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001ee6:	4827      	ldr	r0, [pc, #156]	; (8001f84 <MX_GPIO_Init+0x134>)
 8001ee8:	f003 f8da 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <MX_GPIO_Init+0x138>)
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4820      	ldr	r0, [pc, #128]	; (8001f84 <MX_GPIO_Init+0x134>)
 8001f02:	f002 ff31 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 8001f06:	2312      	movs	r3, #18
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4818      	ldr	r0, [pc, #96]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001f1e:	f002 ff23 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin POWER_SEL_Pin IGNITION_LOGIC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin;
 8001f22:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <MX_GPIO_Init+0x134>)
 8001f3c:	f002 ff14 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGING_SIGNAL_Pin */
  GPIO_InitStruct.Pin = CHARGING_SIGNAL_Pin;
 8001f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f46:	2303      	movs	r3, #3
 8001f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGING_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001f56:	f002 ff07 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IGNITION_SIGNAL_Pin;
 8001f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IGNITION_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001f70:	f002 fefa 	bl	8004d68 <HAL_GPIO_Init>

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020800 	.word	0x40020800
 8001f88:	10210000 	.word	0x10210000
 8001f8c:	40020400 	.word	0x40020400

08001f90 <MainProcess>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainProcess */
void MainProcess(void *argument)
{
 8001f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f94:	ed2d 8b0a 	vpush	{d8-d12}
 8001f98:	b0d3      	sub	sp, #332	; 0x14c
 8001f9a:	af18      	add	r7, sp, #96	; 0x60
 8001f9c:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa6:	22c4      	movs	r2, #196	; 0xc4
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f00d f812 	bl	800efd4 <memset>
	sprintf(txBuffer, "Running Display Task..\n");
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	4953      	ldr	r1, [pc, #332]	; (8002104 <MainProcess+0x174>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00d fc7e 	bl	800f8b8 <siprintf>
  /* Infinite loop */
  for(;;)
  {
	  //Identification Check
	  if ((identification == 1)&&(ignition_status == 1)){
 8001fbc:	4b52      	ldr	r3, [pc, #328]	; (8002108 <MainProcess+0x178>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10b      	bne.n	8001fdc <MainProcess+0x4c>
 8001fc4:	4b51      	ldr	r3, [pc, #324]	; (800210c <MainProcess+0x17c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d107      	bne.n	8001fdc <MainProcess+0x4c>
		  xTaskNotifyGive(IMUTaskHandle);
 8001fcc:	4b50      	ldr	r3, [pc, #320]	; (8002110 <MainProcess+0x180>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f00b ff2f 	bl	800de38 <xTaskGenericNotify>
 8001fda:	e014      	b.n	8002006 <MainProcess+0x76>
	  } else {
		  //Reset IMU Reading
		  MPU6050.Ax = 0;
 8001fdc:	494d      	ldr	r1, [pc, #308]	; (8002114 <MainProcess+0x184>)
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  MPU6050.Ay = 0;
 8001fea:	494a      	ldr	r1, [pc, #296]	; (8002114 <MainProcess+0x184>)
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  MPU6050.Az = 0;
 8001ff8:	4946      	ldr	r1, [pc, #280]	; (8002114 <MainProcess+0x184>)
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  }
	  if(UID[0]== 0x29){ // Need to add driver database
 8002006:	4b44      	ldr	r3, [pc, #272]	; (8002118 <MainProcess+0x188>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b29      	cmp	r3, #41	; 0x29
 800200c:	d103      	bne.n	8002016 <MainProcess+0x86>
		  identification = 1;
 800200e:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <MainProcess+0x178>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e002      	b.n	800201c <MainProcess+0x8c>
	  } else {
		  identification = 0;
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <MainProcess+0x178>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
	  }
	  //End of Identification Check
	  memset(txBuffer,0,sizeof(txBuffer));
 800201c:	f107 0320 	add.w	r3, r7, #32
 8002020:	22c8      	movs	r2, #200	; 0xc8
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f00c ffd5 	bl	800efd4 <memset>
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Lat : %.6lf Lon :%.6lf Ax = %.2f Ay = %.2f Az = %.2f V : %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging,latitude,longitude, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,GPS_speed,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <MainProcess+0x188>)
 800202c:	781b      	ldrb	r3, [r3, #0]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Lat : %.6lf Lon :%.6lf Ax = %.2f Ay = %.2f Az = %.2f V : %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 800202e:	61bb      	str	r3, [r7, #24]
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging,latitude,longitude, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,GPS_speed,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8002030:	4b39      	ldr	r3, [pc, #228]	; (8002118 <MainProcess+0x188>)
 8002032:	785b      	ldrb	r3, [r3, #1]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Lat : %.6lf Lon :%.6lf Ax = %.2f Ay = %.2f Az = %.2f V : %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8002034:	617b      	str	r3, [r7, #20]
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging,latitude,longitude, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,GPS_speed,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <MainProcess+0x188>)
 8002038:	789b      	ldrb	r3, [r3, #2]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Lat : %.6lf Lon :%.6lf Ax = %.2f Ay = %.2f Az = %.2f V : %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 800203a:	461e      	mov	r6, r3
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging,latitude,longitude, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,GPS_speed,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <MainProcess+0x188>)
 800203e:	78db      	ldrb	r3, [r3, #3]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Lat : %.6lf Lon :%.6lf Ax = %.2f Ay = %.2f Az = %.2f V : %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b32      	ldr	r3, [pc, #200]	; (800210c <MainProcess+0x17c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <MainProcess+0x18c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <MainProcess+0x190>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	4b33      	ldr	r3, [pc, #204]	; (8002124 <MainProcess+0x194>)
 8002056:	ed93 ab00 	vldr	d10, [r3]
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <MainProcess+0x198>)
 800205c:	ed93 bb00 	vldr	d11, [r3]
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <MainProcess+0x184>)
 8002062:	ed93 cb02 	vldr	d12, [r3, #8]
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <MainProcess+0x184>)
 8002068:	ed93 9b04 	vldr	d9, [r3, #16]
 800206c:	4b29      	ldr	r3, [pc, #164]	; (8002114 <MainProcess+0x184>)
 800206e:	ed93 8b06 	vldr	d8, [r3, #24]
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <MainProcess+0x19c>)
 8002074:	e9d3 ab00 	ldrd	sl, fp, [r3]
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging,latitude,longitude, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,GPS_speed,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <MainProcess+0x1a0>)
 800207a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Lat : %.6lf Lon :%.6lf Ax = %.2f Ay = %.2f Az = %.2f V : %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fa6a 	bl	8000558 <__aeabi_f2d>
 8002084:	4680      	mov	r8, r0
 8002086:	4689      	mov	r9, r1
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging,latitude,longitude, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,GPS_speed,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <MainProcess+0x1a4>)
 800208a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Lat : %.6lf Lon :%.6lf Ax = %.2f Ay = %.2f Az = %.2f V : %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fa62 	bl	8000558 <__aeabi_f2d>
 8002094:	4604      	mov	r4, r0
 8002096:	460d      	mov	r5, r1
			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging,latitude,longitude, MPU6050.Ax, MPU6050.Ay,MPU6050.Az,GPS_speed,MAFiltFuel.out, MAFiltAccu.out, MAFiltBatt.out);
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <MainProcess+0x1a8>)
 800209a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x Ignition : %d SEL : %d CHRG : %d Lat : %.6lf Lon :%.6lf Ax = %.2f Ay = %.2f Az = %.2f V : %.2f Fuel : %.2f Accu : %.2f Batt : %.2f ",
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa5a 	bl	8000558 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	f107 0020 	add.w	r0, r7, #32
 80020ac:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80020b0:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80020b4:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80020b8:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80020bc:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
 80020c0:	ed8d 9b0c 	vstr	d9, [sp, #48]	; 0x30
 80020c4:	ed8d cb0a 	vstr	d12, [sp, #40]	; 0x28
 80020c8:	ed8d bb08 	vstr	d11, [sp, #32]
 80020cc:	ed8d ab06 	vstr	d10, [sp, #24]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	9104      	str	r1, [sp, #16]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	9103      	str	r1, [sp, #12]
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	9102      	str	r1, [sp, #8]
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	9101      	str	r1, [sp, #4]
 80020e0:	9600      	str	r6, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4915      	ldr	r1, [pc, #84]	; (800213c <MainProcess+0x1ac>)
 80020e8:	f00d fbe6 	bl	800f8b8 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
 80020ec:	f107 0120 	add.w	r1, r7, #32
 80020f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020f4:	22c8      	movs	r2, #200	; 0xc8
 80020f6:	4812      	ldr	r0, [pc, #72]	; (8002140 <MainProcess+0x1b0>)
 80020f8:	f005 fcc7 	bl	8007a8a <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(10);
 80020fc:	200a      	movs	r0, #10
 80020fe:	f009 fa83 	bl	800b608 <osDelay>
	  if ((identification == 1)&&(ignition_status == 1)){
 8002102:	e75b      	b.n	8001fbc <MainProcess+0x2c>
 8002104:	08015b00 	.word	0x08015b00
 8002108:	20000220 	.word	0x20000220
 800210c:	20000241 	.word	0x20000241
 8002110:	20005120 	.word	0x20005120
 8002114:	20005130 	.word	0x20005130
 8002118:	2000021c 	.word	0x2000021c
 800211c:	20000242 	.word	0x20000242
 8002120:	20000243 	.word	0x20000243
 8002124:	20005578 	.word	0x20005578
 8002128:	20005490 	.word	0x20005490
 800212c:	20005128 	.word	0x20005128
 8002130:	20005264 	.word	0x20005264
 8002134:	200054ac 	.word	0x200054ac
 8002138:	2000518c 	.word	0x2000518c
 800213c:	08015b18 	.word	0x08015b18
 8002140:	200055e0 	.word	0x200055e0
 8002144:	00000000 	.word	0x00000000

08002148 <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b0a0      	sub	sp, #128	; 0x80
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	2260      	movs	r2, #96	; 0x60
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f00c ff39 	bl	800efd4 <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	49ae      	ldr	r1, [pc, #696]	; (8002420 <IMU+0x2d8>)
 8002168:	4618      	mov	r0, r3
 800216a:	f00d fba5 	bl	800f8b8 <siprintf>
	float vel[3] = {0,0,0};
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
	uint8_t ID = MPU6050_Init(&hi2c1);
 8002180:	48a8      	ldr	r0, [pc, #672]	; (8002424 <IMU+0x2dc>)
 8002182:	f001 f820 	bl	80031c6 <MPU6050_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 800218c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	49a4      	ldr	r1, [pc, #656]	; (8002428 <IMU+0x2e0>)
 8002196:	4618      	mov	r0, r3
 8002198:	f00d fb8e 	bl	800f8b8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 800219c:	f107 0118 	add.w	r1, r7, #24
 80021a0:	2364      	movs	r3, #100	; 0x64
 80021a2:	2264      	movs	r2, #100	; 0x64
 80021a4:	48a1      	ldr	r0, [pc, #644]	; (800242c <IMU+0x2e4>)
 80021a6:	f005 fc70 	bl	8007a8a <HAL_UART_Transmit>

	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 80021aa:	f107 0318 	add.w	r3, r7, #24
 80021ae:	2264      	movs	r2, #100	; 0x64
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f00c ff0e 	bl	800efd4 <memset>
	osDelay(200);
 80021b8:	20c8      	movs	r0, #200	; 0xc8
 80021ba:	f009 fa25 	bl	800b608 <osDelay>
  /* Infinite loop */
  for(;;)
  {

	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80021be:	f04f 31ff 	mov.w	r1, #4294967295
 80021c2:	2001      	movs	r0, #1
 80021c4:	f00b fdf0 	bl	800dda8 <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 80021c8:	4999      	ldr	r1, [pc, #612]	; (8002430 <IMU+0x2e8>)
 80021ca:	4896      	ldr	r0, [pc, #600]	; (8002424 <IMU+0x2dc>)
 80021cc:	f001 f874 	bl	80032b8 <MPU6050_Read_Accel>

	//Calculate Speed
	vel[0] += MPU6050.Ax * IMU_TS * 0.001; //Vx TS in MS
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f9c0 	bl	8000558 <__aeabi_f2d>
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
 80021dc:	4b94      	ldr	r3, [pc, #592]	; (8002430 <IMU+0x2e8>)
 80021de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b93      	ldr	r3, [pc, #588]	; (8002434 <IMU+0x2ec>)
 80021e8:	f7fe fa0e 	bl	8000608 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	a384      	add	r3, pc, #528	; (adr r3, 8002408 <IMU+0x2c0>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe fa05 	bl	8000608 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4620      	mov	r0, r4
 8002204:	4629      	mov	r1, r5
 8002206:	f7fe f849 	bl	800029c <__adddf3>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f7fe fcf1 	bl	8000bf8 <__aeabi_d2f>
 8002216:	4603      	mov	r3, r0
 8002218:	60fb      	str	r3, [r7, #12]
	vel[1] += MPU6050.Ay * IMU_TS * 0.001; //Vy
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f99b 	bl	8000558 <__aeabi_f2d>
 8002222:	4604      	mov	r4, r0
 8002224:	460d      	mov	r5, r1
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <IMU+0x2e8>)
 8002228:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4b80      	ldr	r3, [pc, #512]	; (8002434 <IMU+0x2ec>)
 8002232:	f7fe f9e9 	bl	8000608 <__aeabi_dmul>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	a372      	add	r3, pc, #456	; (adr r3, 8002408 <IMU+0x2c0>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe f9e0 	bl	8000608 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe f824 	bl	800029c <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fccc 	bl	8000bf8 <__aeabi_d2f>
 8002260:	4603      	mov	r3, r0
 8002262:	613b      	str	r3, [r7, #16]
	vel[2] += (MPU6050.Az - 5.52) * IMU_TS * 0.001; //Vz
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f976 	bl	8000558 <__aeabi_f2d>
 800226c:	4604      	mov	r4, r0
 800226e:	460d      	mov	r5, r1
 8002270:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <IMU+0x2e8>)
 8002272:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002276:	a366      	add	r3, pc, #408	; (adr r3, 8002410 <IMU+0x2c8>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe f80c 	bl	8000298 <__aeabi_dsub>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b69      	ldr	r3, [pc, #420]	; (8002434 <IMU+0x2ec>)
 800228e:	f7fe f9bb 	bl	8000608 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	a35b      	add	r3, pc, #364	; (adr r3, 8002408 <IMU+0x2c0>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9b2 	bl	8000608 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fd fff6 	bl	800029c <__adddf3>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7fe fc9e 	bl	8000bf8 <__aeabi_d2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	617b      	str	r3, [r7, #20]
	speed = sqrt(pow(vel[0],2) + pow(vel[1],2) + pow(vel[2],2));
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f948 	bl	8000558 <__aeabi_f2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8002418 <IMU+0x2d0>
 80022d0:	ec43 2b10 	vmov	d0, r2, r3
 80022d4:	f011 fa20 	bl	8013718 <pow>
 80022d8:	ec55 4b10 	vmov	r4, r5, d0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f93a 	bl	8000558 <__aeabi_f2d>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8002418 <IMU+0x2d0>
 80022ec:	ec43 2b10 	vmov	d0, r2, r3
 80022f0:	f011 fa12 	bl	8013718 <pow>
 80022f4:	ec53 2b10 	vmov	r2, r3, d0
 80022f8:	4620      	mov	r0, r4
 80022fa:	4629      	mov	r1, r5
 80022fc:	f7fd ffce 	bl	800029c <__adddf3>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4614      	mov	r4, r2
 8002306:	461d      	mov	r5, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f924 	bl	8000558 <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8002418 <IMU+0x2d0>
 8002318:	ec43 2b10 	vmov	d0, r2, r3
 800231c:	f011 f9fc 	bl	8013718 <pow>
 8002320:	ec53 2b10 	vmov	r2, r3, d0
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fd ffb8 	bl	800029c <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	ec43 2b17 	vmov	d7, r2, r3
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	eef0 0a67 	vmov.f32	s1, s15
 800233c:	f011 fa9a 	bl	8013874 <sqrt>
 8002340:	ec53 2b10 	vmov	r2, r3, d0
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fc56 	bl	8000bf8 <__aeabi_d2f>
 800234c:	4603      	mov	r3, r0
 800234e:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <IMU+0x2f0>)
 8002350:	6013      	str	r3, [r2, #0]

	osMutexAcquire(mutexIMUHandle, portMAX_DELAY);
 8002352:	4b3a      	ldr	r3, [pc, #232]	; (800243c <IMU+0x2f4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f04f 31ff 	mov.w	r1, #4294967295
 800235a:	4618      	mov	r0, r3
 800235c:	f009 f9f5 	bl	800b74a <osMutexAcquire>

	imu_index++;
 8002360:	4b37      	ldr	r3, [pc, #220]	; (8002440 <IMU+0x2f8>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b35      	ldr	r3, [pc, #212]	; (8002440 <IMU+0x2f8>)
 800236a:	801a      	strh	r2, [r3, #0]
	//Calculate maximum speed
	if(speed > speed_max){
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <IMU+0x2f0>)
 800236e:	ed93 7a00 	vldr	s14, [r3]
 8002372:	4b34      	ldr	r3, [pc, #208]	; (8002444 <IMU+0x2fc>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	dd03      	ble.n	800238a <IMU+0x242>
		speed_max = speed;
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <IMU+0x2f0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <IMU+0x2fc>)
 8002388:	6013      	str	r3, [r2, #0]
	}

	//calculate maximum acceleration
	if(MPU6050.Ax > acc_max){
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <IMU+0x2e8>)
 800238c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002390:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <IMU+0x300>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8df 	bl	8000558 <__aeabi_f2d>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4620      	mov	r0, r4
 80023a0:	4629      	mov	r1, r5
 80023a2:	f7fe fbc1 	bl	8000b28 <__aeabi_dcmpgt>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d009      	beq.n	80023c0 <IMU+0x278>
		acc_max = MPU6050.Ax;
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <IMU+0x2e8>)
 80023ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7fe fc1f 	bl	8000bf8 <__aeabi_d2f>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4a22      	ldr	r2, [pc, #136]	; (8002448 <IMU+0x300>)
 80023be:	6013      	str	r3, [r2, #0]
	}
	//calculate average

	speed_avg = (speed/imu_index) + (speed_avg/imu_index);
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <IMU+0x2f0>)
 80023c2:	edd3 6a00 	vldr	s13, [r3]
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <IMU+0x2f8>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <IMU+0x304>)
 80023d8:	ed93 6a00 	vldr	s12, [r3]
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <IMU+0x2f8>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80023ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <IMU+0x304>)
 80023f2:	edc3 7a00 	vstr	s15, [r3]

	osMutexRelease(mutexIMUHandle);
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <IMU+0x2f4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f009 f9f0 	bl	800b7e0 <osMutexRelease>

//	speed = CalSpeed(MPU6050, IMU_TS);
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay, MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(IMU_TS);
 8002400:	2032      	movs	r0, #50	; 0x32
 8002402:	f009 f901 	bl	800b608 <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8002406:	e6da      	b.n	80021be <IMU+0x76>
 8002408:	d2f1a9fc 	.word	0xd2f1a9fc
 800240c:	3f50624d 	.word	0x3f50624d
 8002410:	e147ae14 	.word	0xe147ae14
 8002414:	4016147a 	.word	0x4016147a
 8002418:	00000000 	.word	0x00000000
 800241c:	40000000 	.word	0x40000000
 8002420:	08015bb0 	.word	0x08015bb0
 8002424:	200050c4 	.word	0x200050c4
 8002428:	08015bc4 	.word	0x08015bc4
 800242c:	200055e0 	.word	0x200055e0
 8002430:	20005130 	.word	0x20005130
 8002434:	40490000 	.word	0x40490000
 8002438:	20005584 	.word	0x20005584
 800243c:	20005118 	.word	0x20005118
 8002440:	20005874 	.word	0x20005874
 8002444:	20004e78 	.word	0x20004e78
 8002448:	20004e70 	.word	0x20004e70
 800244c:	2000511c 	.word	0x2000511c

08002450 <GPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS */
void GPS(void *argument)
{
 8002450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002454:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
 8002458:	af00      	add	r7, sp, #0
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	6018      	str	r0, [r3, #0]

	  char hH[2]; // hours
	  char mM[2]; // minutes
	  char sS[2]; // seconds

	  uint8_t cnt = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393

	  HAL_UART_Receive_DMA(&huart1, buff, 255);
 8002464:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	4619      	mov	r1, r3
 800246c:	486a      	ldr	r0, [pc, #424]	; (8002618 <GPS+0x1c8>)
 800246e:	f005 fb9e 	bl	8007bae <HAL_UART_Receive_DMA>

	  HAL_UART_Transmit(&huart2, (unsigned char *) "Start\n", 6, 500);
 8002472:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002476:	2206      	movs	r2, #6
 8002478:	4968      	ldr	r1, [pc, #416]	; (800261c <GPS+0x1cc>)
 800247a:	4869      	ldr	r0, [pc, #420]	; (8002620 <GPS+0x1d0>)
 800247c:	f005 fb05 	bl	8007a8a <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  char txBuffer[200] = {};
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	3304      	adds	r3, #4
 800248a:	22c4      	movs	r2, #196	; 0xc4
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f00c fda0 	bl	800efd4 <memset>
	  if (flag) {
 8002494:	4b63      	ldr	r3, [pc, #396]	; (8002624 <GPS+0x1d4>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 82cb 	beq.w	8002a34 <GPS+0x5e4>
	  	memset(buffStr, 0, 255);
 800249e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00c fd94 	bl	800efd4 <memset>
	  	sprintf(buffStr, "%s", buff);
 80024ac:	f507 721d 	add.w	r2, r7, #628	; 0x274
 80024b0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80024b4:	495c      	ldr	r1, [pc, #368]	; (8002628 <GPS+0x1d8>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00d f9fe 	bl	800f8b8 <siprintf>
	   /*splitting the buffStr by the "\n" delimiter with the strsep() C function
	   	 see http://www.manpagez.com/man/3/strsep/
	    */
	  	char *token, *string;
	  	// actually splitting the string by "\n" delimiter
	  	string = strdup(buffStr);
 80024bc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80024c0:	4618      	mov	r0, r3
 80024c2:	f00d fa3d 	bl	800f940 <strdup>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80024ce:	601a      	str	r2, [r3, #0]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 80024d0:	e23b      	b.n	800294a <GPS+0x4fa>
	  		memset(nmeaSnt, 0, 80);
 80024d2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80024d6:	2250      	movs	r2, #80	; 0x50
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f00c fd7a 	bl	800efd4 <memset>
	  		sprintf(nmeaSnt, "%s", token);
 80024e0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80024e4:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 80024e8:	494f      	ldr	r1, [pc, #316]	; (8002628 <GPS+0x1d8>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00d f9e4 	bl	800f8b8 <siprintf>
	  	  	  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 100);
	  	  	*/

	  		// selecting only $GNGLL sentences, combined GPS and GLONAS
	  		// on my GPS sensor this good NMEA sentence is always 50 characters
	  		if ((strstr(nmeaSnt, "$GPGGA") != 0) && (strlen(nmeaSnt) > 49) &&(strlen(nmeaSnt) <90) && strstr(nmeaSnt, "*") != 0) {
 80024f0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80024f4:	494d      	ldr	r1, [pc, #308]	; (800262c <GPS+0x1dc>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	f00d fa57 	bl	800f9aa <strstr>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8223 	beq.w	800294a <GPS+0x4fa>
 8002504:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fe69 	bl	80001e0 <strlen>
 800250e:	4603      	mov	r3, r0
 8002510:	2b31      	cmp	r3, #49	; 0x31
 8002512:	f240 821a 	bls.w	800294a <GPS+0x4fa>
 8002516:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800251a:	4618      	mov	r0, r3
 800251c:	f7fd fe60 	bl	80001e0 <strlen>
 8002520:	4603      	mov	r3, r0
 8002522:	2b59      	cmp	r3, #89	; 0x59
 8002524:	f200 8211 	bhi.w	800294a <GPS+0x4fa>
 8002528:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800252c:	212a      	movs	r1, #42	; 0x2a
 800252e:	4618      	mov	r0, r3
 8002530:	f00d f9f1 	bl	800f916 <strchr>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8207 	beq.w	800294a <GPS+0x4fa>
	  			rawSum = strstr(nmeaSnt, "*");
 800253c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002540:	212a      	movs	r1, #42	; 0x2a
 8002542:	4618      	mov	r0, r3
 8002544:	f00d f9e7 	bl	800f916 <strchr>
 8002548:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  			memcpy(smNmbr, &rawSum[1], 2);
 800254c:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8002550:	3301      	adds	r3, #1
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29a      	uxth	r2, r3
 8002556:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800255a:	801a      	strh	r2, [r3, #0]
	  			smNmbr[2] = '\0';
 800255c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002560:	2200      	movs	r2, #0
 8002562:	709a      	strb	r2, [r3, #2]

	  			uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8002564:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff f841 	bl	80015f0 <nmea0183_checksum>
 800256e:	4603      	mov	r3, r0
 8002570:	f887 3383 	strb.w	r3, [r7, #899]	; 0x383
	  			char hex[2];
	  			// "%X" unsigned hexadecimal integer (capital letters)
	  			sprintf(hex, "%X", intSum);
 8002574:	f897 2383 	ldrb.w	r2, [r7, #899]	; 0x383
 8002578:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800257c:	492c      	ldr	r1, [pc, #176]	; (8002630 <GPS+0x1e0>)
 800257e:	4618      	mov	r0, r3
 8002580:	f00d f99a 	bl	800f8b8 <siprintf>

	  			// checksum data verification, if OK, then we can really trust
	  			// the data in the the NMEA sentence
	  			if (strstr(smNmbr, hex) != NULL) {
 8002584:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002588:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f00d fa0b 	bl	800f9aa <strstr>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 81d7 	beq.w	800294a <GPS+0x4fa>
	  				cnt = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  				// splitting the good NMEA sentence into the tokens by the comma delimiter
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 80025a2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80025a6:	4923      	ldr	r1, [pc, #140]	; (8002634 <GPS+0x1e4>)
 80025a8:	4618      	mov	r0, r3
 80025aa:	f00e f847 	bl	801063c <strtok>
 80025ae:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 80025b2:	e054      	b.n	800265e <GPS+0x20e>
	  					/*
	  					memset(txBuffer,0,sizeof(txBuffer));
	  					sprintf(txBuffer,"pV[%d] : %s\n",cnt, pV);
	  					HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 100);
	  					*/
	  					switch (cnt) {
 80025b4:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 80025b8:	3b01      	subs	r3, #1
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d844      	bhi.n	8002648 <GPS+0x1f8>
 80025be:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <GPS+0x174>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	080025d9 	.word	0x080025d9
 80025c8:	080025e9 	.word	0x080025e9
 80025cc:	080025f9 	.word	0x080025f9
 80025d0:	08002609 	.word	0x08002609
 80025d4:	08002639 	.word	0x08002639
	  						case 1:
	  							  utcRaw = strdup(pV);
 80025d8:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 80025dc:	f00d f9b0 	bl	800f940 <strdup>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	  							  break;
 80025e6:	e02f      	b.n	8002648 <GPS+0x1f8>
	  						case 2:
	  							  latRaw = strdup(pV);
 80025e8:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 80025ec:	f00d f9a8 	bl	800f940 <strdup>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
	  							  break;
 80025f6:	e027      	b.n	8002648 <GPS+0x1f8>
	  						case 3:
	  							  hemNS = strdup(pV);
 80025f8:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 80025fc:	f00d f9a0 	bl	800f940 <strdup>
 8002600:	4603      	mov	r3, r0
 8002602:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	  							  break;
 8002606:	e01f      	b.n	8002648 <GPS+0x1f8>
	  						case 4:
	  							  lonRaw = strdup(pV);
 8002608:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 800260c:	f00d f998 	bl	800f940 <strdup>
 8002610:	4603      	mov	r3, r0
 8002612:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	  							  break;
 8002616:	e017      	b.n	8002648 <GPS+0x1f8>
 8002618:	200053d8 	.word	0x200053d8
 800261c:	08015be8 	.word	0x08015be8
 8002620:	200055e0 	.word	0x200055e0
 8002624:	20000240 	.word	0x20000240
 8002628:	08015bf0 	.word	0x08015bf0
 800262c:	08015bf4 	.word	0x08015bf4
 8002630:	08015bfc 	.word	0x08015bfc
 8002634:	08015c00 	.word	0x08015c00
	  						case 5:
	  							  hemEW = strdup(pV);
 8002638:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 800263c:	f00d f980 	bl	800f940 <strdup>
 8002640:	4603      	mov	r3, r0
 8002642:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	  							  break;
 8002646:	bf00      	nop
	  					}
	  					cnt++;
 8002648:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 800264c:	3301      	adds	r3, #1
 800264e:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8002652:	49d9      	ldr	r1, [pc, #868]	; (80029b8 <GPS+0x568>)
 8002654:	2000      	movs	r0, #0
 8002656:	f00d fff1 	bl	801063c <strtok>
 800265a:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 800265e:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1a6      	bne.n	80025b4 <GPS+0x164>
	  				} //end for

	  				//Converting Longitude and Latitude into Float
	  				latitude = atof(latRaw);
 8002666:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800266a:	f00c fc77 	bl	800ef5c <atof>
 800266e:	eeb0 7a40 	vmov.f32	s14, s0
 8002672:	eef0 7a60 	vmov.f32	s15, s1
 8002676:	4bd1      	ldr	r3, [pc, #836]	; (80029bc <GPS+0x56c>)
 8002678:	ed83 7b00 	vstr	d7, [r3]
	  				longitude = atof(lonRaw);
 800267c:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8002680:	f00c fc6c 	bl	800ef5c <atof>
 8002684:	eeb0 7a40 	vmov.f32	s14, s0
 8002688:	eef0 7a60 	vmov.f32	s15, s1
 800268c:	4bcc      	ldr	r3, [pc, #816]	; (80029c0 <GPS+0x570>)
 800268e:	ed83 7b00 	vstr	d7, [r3]

	  				if (*hemNS == 'S') {
 8002692:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b53      	cmp	r3, #83	; 0x53
 800269a:	d108      	bne.n	80026ae <GPS+0x25e>
	  					latitude  *= -1.0;
 800269c:	4bc7      	ldr	r3, [pc, #796]	; (80029bc <GPS+0x56c>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	4614      	mov	r4, r2
 80026a4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80026a8:	4bc4      	ldr	r3, [pc, #784]	; (80029bc <GPS+0x56c>)
 80026aa:	e9c3 4500 	strd	r4, r5, [r3]
	  				}
	  				if (*hemEW == 'W') {
 80026ae:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b57      	cmp	r3, #87	; 0x57
 80026b6:	d108      	bne.n	80026ca <GPS+0x27a>
	  					longitude *= -1.0;
 80026b8:	4bc1      	ldr	r3, [pc, #772]	; (80029c0 <GPS+0x570>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	4690      	mov	r8, r2
 80026c0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80026c4:	4bbe      	ldr	r3, [pc, #760]	; (80029c0 <GPS+0x570>)
 80026c6:	e9c3 8900 	strd	r8, r9, [r3]
	  				}
	  				char * token;

	  				//Get LatitudeDegree
	  				token = strtok(latRaw, ".");
 80026ca:	49be      	ldr	r1, [pc, #760]	; (80029c4 <GPS+0x574>)
 80026cc:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 80026d0:	f00d ffb4 	bl	801063c <strtok>
 80026d4:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latDg, 0, sizeof(latDg));
 80026d8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80026dc:	220a      	movs	r2, #10
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f00c fc77 	bl	800efd4 <memset>
	  				sprintf(latDg, token);
 80026e6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80026ea:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80026ee:	4618      	mov	r0, r3
 80026f0:	f00d f8e2 	bl	800f8b8 <siprintf>

	  				//Get Minutes
	  				token = strtok(NULL,".");
 80026f4:	49b3      	ldr	r1, [pc, #716]	; (80029c4 <GPS+0x574>)
 80026f6:	2000      	movs	r0, #0
 80026f8:	f00d ffa0 	bl	801063c <strtok>
 80026fc:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latMS, 0, sizeof(latMS));
 8002700:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002704:	2214      	movs	r2, #20
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f00c fc63 	bl	800efd4 <memset>
	  				sprintf(latMS, token);
 800270e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002712:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002716:	4618      	mov	r0, r3
 8002718:	f00d f8ce 	bl	800f8b8 <siprintf>

	  				//Get longitude Degree
	  				float degrees = trunc(latitude / 100.0f);
 800271c:	4ba7      	ldr	r3, [pc, #668]	; (80029bc <GPS+0x56c>)
 800271e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	4ba8      	ldr	r3, [pc, #672]	; (80029c8 <GPS+0x578>)
 8002728:	f7fe f898 	bl	800085c <__aeabi_ddiv>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	ec43 2b17 	vmov	d7, r2, r3
 8002734:	eeb0 0a47 	vmov.f32	s0, s14
 8002738:	eef0 0a67 	vmov.f32	s1, s15
 800273c:	f010 ff80 	bl	8013640 <trunc>
 8002740:	ec53 2b10 	vmov	r2, r3, d0
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	f7fe fa56 	bl	8000bf8 <__aeabi_d2f>
 800274c:	4603      	mov	r3, r0
 800274e:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				float minutes = latitude - (degrees * 100.0f);
 8002752:	4b9a      	ldr	r3, [pc, #616]	; (80029bc <GPS+0x56c>)
 8002754:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8002758:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800275c:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80029cc <GPS+0x57c>
 8002760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002764:	ee17 0a90 	vmov	r0, s15
 8002768:	f7fd fef6 	bl	8000558 <__aeabi_f2d>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4650      	mov	r0, sl
 8002772:	4659      	mov	r1, fp
 8002774:	f7fd fd90 	bl	8000298 <__aeabi_dsub>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f7fe fa3a 	bl	8000bf8 <__aeabi_d2f>
 8002784:	4603      	mov	r3, r0
 8002786:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
	  				latitude = degrees + (minutes / 60.0f);
 800278a:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 800278e:	eddf 6a90 	vldr	s13, [pc, #576]	; 80029d0 <GPS+0x580>
 8002792:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002796:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800279a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279e:	ee17 0a90 	vmov	r0, s15
 80027a2:	f7fd fed9 	bl	8000558 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4984      	ldr	r1, [pc, #528]	; (80029bc <GPS+0x56c>)
 80027ac:	e9c1 2300 	strd	r2, r3, [r1]

	  				degrees = trunc(longitude / 100.0f);
 80027b0:	4b83      	ldr	r3, [pc, #524]	; (80029c0 <GPS+0x570>)
 80027b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	4b83      	ldr	r3, [pc, #524]	; (80029c8 <GPS+0x578>)
 80027bc:	f7fe f84e 	bl	800085c <__aeabi_ddiv>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	ec43 2b17 	vmov	d7, r2, r3
 80027c8:	eeb0 0a47 	vmov.f32	s0, s14
 80027cc:	eef0 0a67 	vmov.f32	s1, s15
 80027d0:	f010 ff36 	bl	8013640 <trunc>
 80027d4:	ec53 2b10 	vmov	r2, r3, d0
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe fa0c 	bl	8000bf8 <__aeabi_d2f>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				minutes = longitude - (degrees * 100.0f);
 80027e6:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <GPS+0x570>)
 80027e8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80027ec:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 80027f0:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80029cc <GPS+0x57c>
 80027f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f8:	ee17 0a90 	vmov	r0, s15
 80027fc:	f7fd feac 	bl	8000558 <__aeabi_f2d>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4650      	mov	r0, sl
 8002806:	4659      	mov	r1, fp
 8002808:	f7fd fd46 	bl	8000298 <__aeabi_dsub>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7fe f9f0 	bl	8000bf8 <__aeabi_d2f>
 8002818:	4603      	mov	r3, r0
 800281a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
	  				longitude = degrees + (minutes / 60.0f);
 800281e:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 8002822:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80029d0 <GPS+0x580>
 8002826:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800282a:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800282e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd fe8f 	bl	8000558 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4960      	ldr	r1, [pc, #384]	; (80029c0 <GPS+0x570>)
 8002840:	e9c1 2300 	strd	r2, r3, [r1]


	  				token = strtok(lonRaw, ".");
 8002844:	495f      	ldr	r1, [pc, #380]	; (80029c4 <GPS+0x574>)
 8002846:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 800284a:	f00d fef7 	bl	801063c <strtok>
 800284e:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonDg, 0, sizeof(lonDg));
 8002852:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002856:	220a      	movs	r2, #10
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f00c fbba 	bl	800efd4 <memset>
	  				memcpy(lonDg, token, strlen(token));
 8002860:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8002864:	f7fd fcbc 	bl	80001e0 <strlen>
 8002868:	4602      	mov	r2, r0
 800286a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800286e:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002872:	4618      	mov	r0, r3
 8002874:	f00c fba0 	bl	800efb8 <memcpy>

	  				token = strtok(NULL, ".");
 8002878:	4952      	ldr	r1, [pc, #328]	; (80029c4 <GPS+0x574>)
 800287a:	2000      	movs	r0, #0
 800287c:	f00d fede 	bl	801063c <strtok>
 8002880:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonMS, 0, sizeof(lonMS));
 8002884:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002888:	220a      	movs	r2, #10
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f00c fba1 	bl	800efd4 <memset>
	  				memcpy(lonMS, token, strlen(token));
 8002892:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8002896:	f7fd fca3 	bl	80001e0 <strlen>
 800289a:	4602      	mov	r2, r0
 800289c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028a0:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80028a4:	4618      	mov	r0, r3
 80028a6:	f00c fb87 	bl	800efb8 <memcpy>
 80028aa:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29a      	uxth	r2, r3

	  				//converting the UTC time in the hh:mm:ss format
	  				memcpy(hH, &utcRaw[0], 2);
 80028b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028b6:	801a      	strh	r2, [r3, #0]
	  				hH[2] = '\0';
 80028b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028bc:	2200      	movs	r2, #0
 80028be:	709a      	strb	r2, [r3, #2]

	  				memcpy(mM, &utcRaw[2], 2);
 80028c0:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80028c4:	3302      	adds	r3, #2
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80028ce:	801a      	strh	r2, [r3, #0]
	  				mM[2] = '\0';
 80028d0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80028d4:	2200      	movs	r2, #0
 80028d6:	709a      	strb	r2, [r3, #2]

	  				memcpy(sS, &utcRaw[4], 2);
 80028d8:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80028dc:	3304      	adds	r3, #4
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028e6:	801a      	strh	r2, [r3, #0]
	  				sS[2] = '\0';
 80028e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028ec:	2200      	movs	r2, #0
 80028ee:	709a      	strb	r2, [r3, #2]
//	  				float latDg_f = atof(latDg)/100.0;
//	  				float latMS_f = atof(latMS)/60.0;
//	  				float lonDg_f = atof(lonDg)/100.0;
//	  				float lonMS_f = atof(lonMS)/60.0;

	  				strcpy(strUTC, hH);
 80028f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028f4:	4619      	mov	r1, r3
 80028f6:	4837      	ldr	r0, [pc, #220]	; (80029d4 <GPS+0x584>)
 80028f8:	f00d f81a 	bl	800f930 <strcpy>
	  				strcat(strUTC, ":");
 80028fc:	4835      	ldr	r0, [pc, #212]	; (80029d4 <GPS+0x584>)
 80028fe:	f7fd fc6f 	bl	80001e0 <strlen>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <GPS+0x584>)
 8002908:	4413      	add	r3, r2
 800290a:	4933      	ldr	r1, [pc, #204]	; (80029d8 <GPS+0x588>)
 800290c:	461a      	mov	r2, r3
 800290e:	460b      	mov	r3, r1
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, mM);
 8002914:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002918:	4619      	mov	r1, r3
 800291a:	482e      	ldr	r0, [pc, #184]	; (80029d4 <GPS+0x584>)
 800291c:	f00c ffec 	bl	800f8f8 <strcat>
	  				strcat(strUTC, ":");
 8002920:	482c      	ldr	r0, [pc, #176]	; (80029d4 <GPS+0x584>)
 8002922:	f7fd fc5d 	bl	80001e0 <strlen>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <GPS+0x584>)
 800292c:	4413      	add	r3, r2
 800292e:	492a      	ldr	r1, [pc, #168]	; (80029d8 <GPS+0x588>)
 8002930:	461a      	mov	r2, r3
 8002932:	460b      	mov	r3, r1
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, sS);
 8002938:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800293c:	4619      	mov	r1, r3
 800293e:	4825      	ldr	r0, [pc, #148]	; (80029d4 <GPS+0x584>)
 8002940:	f00c ffda 	bl	800f8f8 <strcat>
	  				strUTC[8] = '\0';
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <GPS+0x584>)
 8002946:	2200      	movs	r2, #0
 8002948:	721a      	strb	r2, [r3, #8]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 800294a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800294e:	4923      	ldr	r1, [pc, #140]	; (80029dc <GPS+0x58c>)
 8002950:	4618      	mov	r0, r3
 8002952:	f00d f825 	bl	800f9a0 <strsep>
 8002956:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 800295a:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800295e:	2b00      	cmp	r3, #0
 8002960:	f47f adb7 	bne.w	80024d2 <GPS+0x82>
	  				HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);
					*/
	  			} //end of the chekcsum data verification
	  		} //end of %GPPGA Sentences selection
	  	}// end of splotting the buffstr by the "\n" delimiter with strsep() c function
	  	flag = 0;
 8002964:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <GPS+0x590>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]

	  	//Calculate Distance
	  	GPS_distance = distance_on_geoid(prev_latitude, prev_longitude, latitude, longitude);
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <GPS+0x594>)
 800296c:	ed93 7b00 	vldr	d7, [r3]
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <GPS+0x598>)
 8002972:	ed93 6b00 	vldr	d6, [r3]
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <GPS+0x56c>)
 8002978:	ed93 5b00 	vldr	d5, [r3]
 800297c:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <GPS+0x570>)
 800297e:	ed93 4b00 	vldr	d4, [r3]
 8002982:	eeb0 3a44 	vmov.f32	s6, s8
 8002986:	eef0 3a64 	vmov.f32	s7, s9
 800298a:	eeb0 2a45 	vmov.f32	s4, s10
 800298e:	eef0 2a65 	vmov.f32	s5, s11
 8002992:	eeb0 1a46 	vmov.f32	s2, s12
 8002996:	eef0 1a66 	vmov.f32	s3, s13
 800299a:	eeb0 0a47 	vmov.f32	s0, s14
 800299e:	eef0 0a67 	vmov.f32	s1, s15
 80029a2:	f7fe fea5 	bl	80016f0 <distance_on_geoid>
 80029a6:	eeb0 7a40 	vmov.f32	s14, s0
 80029aa:	eef0 7a60 	vmov.f32	s15, s1
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <GPS+0x59c>)
 80029b0:	ed83 7b00 	vstr	d7, [r3]
	  	GPS_speed    = (double) (GPS_distance/GPS_TS)*1000; //ms to s
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <GPS+0x59c>)
 80029b6:	e01b      	b.n	80029f0 <GPS+0x5a0>
 80029b8:	08015c00 	.word	0x08015c00
 80029bc:	20005578 	.word	0x20005578
 80029c0:	20005490 	.word	0x20005490
 80029c4:	08015c04 	.word	0x08015c04
 80029c8:	40590000 	.word	0x40590000
 80029cc:	42c80000 	.word	0x42c80000
 80029d0:	42700000 	.word	0x42700000
 80029d4:	20000238 	.word	0x20000238
 80029d8:	08015c08 	.word	0x08015c08
 80029dc:	08015c0c 	.word	0x08015c0c
 80029e0:	20000240 	.word	0x20000240
 80029e4:	20000228 	.word	0x20000228
 80029e8:	20000230 	.word	0x20000230
 80029ec:	20005258 	.word	0x20005258
 80029f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <GPS+0x640>)
 80029fa:	f7fd ff2f 	bl	800085c <__aeabi_ddiv>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <GPS+0x644>)
 8002a0c:	f7fd fdfc 	bl	8000608 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4920      	ldr	r1, [pc, #128]	; (8002a98 <GPS+0x648>)
 8002a16:	e9c1 2300 	strd	r2, r3, [r1]

	  	//Update previous location
	  	prev_latitude = latitude;
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <GPS+0x64c>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	491f      	ldr	r1, [pc, #124]	; (8002aa0 <GPS+0x650>)
 8002a22:	e9c1 2300 	strd	r2, r3, [r1]
	  	prev_longitude = longitude;
 8002a26:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <GPS+0x654>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	491e      	ldr	r1, [pc, #120]	; (8002aa8 <GPS+0x658>)
 8002a2e:	e9c1 2300 	strd	r2, r3, [r1]
 8002a32:	e028      	b.n	8002a86 <GPS+0x636>
	  }
	  else {
		  GPS_distance = 0;
 8002a34:	491d      	ldr	r1, [pc, #116]	; (8002aac <GPS+0x65c>)
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9c1 2300 	strd	r2, r3, [r1]
		  latitude = 0;
 8002a42:	4916      	ldr	r1, [pc, #88]	; (8002a9c <GPS+0x64c>)
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9c1 2300 	strd	r2, r3, [r1]
		  longitude = 0;
 8002a50:	4914      	ldr	r1, [pc, #80]	; (8002aa4 <GPS+0x654>)
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9c1 2300 	strd	r2, r3, [r1]
		  GPS_speed = 0;
 8002a5e:	490e      	ldr	r1, [pc, #56]	; (8002a98 <GPS+0x648>)
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9c1 2300 	strd	r2, r3, [r1]
		  sprintf(txBuffer," GPS no signal..");
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	490f      	ldr	r1, [pc, #60]	; (8002ab0 <GPS+0x660>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00c ff20 	bl	800f8b8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer, sizeof(txBuffer), 100);
 8002a78:	f107 010c 	add.w	r1, r7, #12
 8002a7c:	2364      	movs	r3, #100	; 0x64
 8002a7e:	22c8      	movs	r2, #200	; 0xc8
 8002a80:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <GPS+0x664>)
 8002a82:	f005 f802 	bl	8007a8a <HAL_UART_Transmit>
	  }
	  osDelay(GPS_TS);
 8002a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a8a:	f008 fdbd 	bl	800b608 <osDelay>
  {
 8002a8e:	e4f7      	b.n	8002480 <GPS+0x30>
 8002a90:	407f4000 	.word	0x407f4000
 8002a94:	408f4000 	.word	0x408f4000
 8002a98:	20005128 	.word	0x20005128
 8002a9c:	20005578 	.word	0x20005578
 8002aa0:	20000228 	.word	0x20000228
 8002aa4:	20005490 	.word	0x20005490
 8002aa8:	20000230 	.word	0x20000230
 8002aac:	20005258 	.word	0x20005258
 8002ab0:	08015c10 	.word	0x08015c10
 8002ab4:	200055e0 	.word	0x200055e0

08002ab8 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0a2      	sub	sp, #136	; 0x88
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */

	char txBuffer [100] ={};
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	2260      	movs	r2, #96	; 0x60
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f00c fa81 	bl	800efd4 <memset>
	u_char status, cardstr[MAX_LEN];
//	u_char checksum

	osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002ad2:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <RFID+0x160>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8002ada:	4618      	mov	r0, r3
 8002adc:	f008 fe35 	bl	800b74a <osMutexAcquire>

	MFRC522_Init();
 8002ae0:	f7fe fb3c 	bl	800115c <MFRC522_Init>
	status = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	while (status == 0){
 8002aea:	e018      	b.n	8002b1e <RFID+0x66>
		status = Read_MFRC522(VersionReg);
 8002aec:	2037      	movs	r0, #55	; 0x37
 8002aee:	f7fe fab5 	bl	800105c <Read_MFRC522>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 8002af8:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4946      	ldr	r1, [pc, #280]	; (8002c1c <RFID+0x164>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f00c fed8 	bl	800f8b8 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 8002b08:	f107 011c 	add.w	r1, r7, #28
 8002b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b10:	2264      	movs	r2, #100	; 0x64
 8002b12:	4843      	ldr	r0, [pc, #268]	; (8002c20 <RFID+0x168>)
 8002b14:	f004 ffb9 	bl	8007a8a <HAL_UART_Transmit>
		osDelay(100);
 8002b18:	2064      	movs	r0, #100	; 0x64
 8002b1a:	f008 fd75 	bl	800b608 <osDelay>
	while (status == 0){
 8002b1e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0e2      	beq.n	8002aec <RFID+0x34>
	}
	osMutexRelease(MutexSPI1Handle);
 8002b26:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <RFID+0x160>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f008 fe58 	bl	800b7e0 <osMutexRelease>
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	2264      	movs	r2, #100	; 0x64
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f00c fa4b 	bl	800efd4 <memset>
	status = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(200);
 8002b44:	20c8      	movs	r0, #200	; 0xc8
 8002b46:	f008 fd5f 	bl	800b608 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002b4a:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <RFID+0x160>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b52:	4618      	mov	r0, r3
 8002b54:	f008 fdf9 	bl	800b74a <osMutexAcquire>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	2026      	movs	r0, #38	; 0x26
 8002b60:	f7fe fb28 	bl	80011b4 <MFRC522_Request>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 8002b6a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d13a      	bne.n	8002be8 <RFID+0x130>
		  sprintf(txBuffer,"Card detected ..\n");
 8002b72:	f107 031c 	add.w	r3, r7, #28
 8002b76:	492b      	ldr	r1, [pc, #172]	; (8002c24 <RFID+0x16c>)
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f00c fe9d 	bl	800f8b8 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8002b7e:	f107 011c 	add.w	r1, r7, #28
 8002b82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b86:	2264      	movs	r2, #100	; 0x64
 8002b88:	4825      	ldr	r0, [pc, #148]	; (8002c20 <RFID+0x168>)
 8002b8a:	f004 ff7e 	bl	8007a8a <HAL_UART_Transmit>
//		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	2264      	movs	r2, #100	; 0x64
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f00c fa1c 	bl	800efd4 <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fbf5 	bl	8001390 <MFRC522_Anticoll>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 8002bac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d128      	bne.n	8002c06 <RFID+0x14e>
//			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
			  for(int i = 0; i <4 ;i++){
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bba:	e010      	b.n	8002bde <RFID+0x126>
				  UID[i]=cardstr[i];
 8002bbc:	f107 020c 	add.w	r2, r7, #12
 8002bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bc4:	4413      	add	r3, r2
 8002bc6:	7819      	ldrb	r1, [r3, #0]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <RFID+0x170>)
 8002bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bce:	4413      	add	r3, r2
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 8002bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	ddea      	ble.n	8002bbc <RFID+0x104>
 8002be6:	e00e      	b.n	8002c06 <RFID+0x14e>
//			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
//			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	2264      	movs	r2, #100	; 0x64
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f00c f9ef 	bl	800efd4 <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 8002bf6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	490b      	ldr	r1, [pc, #44]	; (8002c2c <RFID+0x174>)
 8002c00:	4618      	mov	r0, r3
 8002c02:	f00c fe59 	bl	800f8b8 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
	  osMutexRelease(MutexSPI1Handle);
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <RFID+0x160>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f008 fde8 	bl	800b7e0 <osMutexRelease>
    osDelay(100);
 8002c10:	2064      	movs	r0, #100	; 0x64
 8002c12:	f008 fcf9 	bl	800b608 <osDelay>
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002c16:	e798      	b.n	8002b4a <RFID+0x92>
 8002c18:	20005188 	.word	0x20005188
 8002c1c:	08015c24 	.word	0x08015c24
 8002c20:	200055e0 	.word	0x200055e0
 8002c24:	08015c3c 	.word	0x08015c3c
 8002c28:	2000021c 	.word	0x2000021c
 8002c2c:	08015c50 	.word	0x08015c50

08002c30 <SDCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDCard */
void SDCard(void *argument)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b0a4      	sub	sp, #144	; 0x90
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDCard */
	osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002c38:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <SDCard+0x1c0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	4618      	mov	r0, r3
 8002c42:	f008 fd82 	bl	800b74a <osMutexAcquire>
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002c46:	2201      	movs	r2, #1
 8002c48:	496a      	ldr	r1, [pc, #424]	; (8002df4 <SDCard+0x1c4>)
 8002c4a:	486b      	ldr	r0, [pc, #428]	; (8002df8 <SDCard+0x1c8>)
 8002c4c:	f007 fc2e 	bl	800a4ac <f_mount>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b69      	ldr	r3, [pc, #420]	; (8002dfc <SDCard+0x1cc>)
 8002c56:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <SDCard+0x1cc>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <SDCard+0x3e>
		myprintf("f_mount error (%i)\r\n", fres);
 8002c60:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <SDCard+0x1cc>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	4866      	ldr	r0, [pc, #408]	; (8002e00 <SDCard+0x1d0>)
 8002c68:	f7fe fd1c 	bl	80016a4 <myprintf>
		while(1);
 8002c6c:	e7fe      	b.n	8002c6c <SDCard+0x3c>
	}
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;
    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8002c6e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002c72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c76:	4619      	mov	r1, r3
 8002c78:	485e      	ldr	r0, [pc, #376]	; (8002df4 <SDCard+0x1c4>)
 8002c7a:	f008 fa0a 	bl	800b092 <f_getfree>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <SDCard+0x1cc>)
 8002c84:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8002c86:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <SDCard+0x1cc>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <SDCard+0x6c>
  	myprintf("f_getfree error (%i)\r\n", fres);
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <SDCard+0x1cc>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	4619      	mov	r1, r3
 8002c94:	485b      	ldr	r0, [pc, #364]	; (8002e04 <SDCard+0x1d4>)
 8002c96:	f7fe fd05 	bl	80016a4 <myprintf>
  	while(1);
 8002c9a:	e7fe      	b.n	8002c9a <SDCard+0x6a>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8002c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	3b02      	subs	r3, #2
 8002ca2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ca4:	8952      	ldrh	r2, [r2, #10]
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    free_sectors = free_clusters * getFreeFs->csize;
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	895b      	ldrh	r3, [r3, #10]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cb6:	fb03 f302 	mul.w	r3, r3, r2
 8002cba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8002cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc2:	0859      	lsrs	r1, r3, #1
 8002cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	461a      	mov	r2, r3
 8002ccc:	484e      	ldr	r0, [pc, #312]	; (8002e08 <SDCard+0x1d8>)
 8002cce:	f7fe fce9 	bl	80016a4 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "tesjson.txt", FA_READ);
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	494d      	ldr	r1, [pc, #308]	; (8002e0c <SDCard+0x1dc>)
 8002cd6:	484e      	ldr	r0, [pc, #312]	; (8002e10 <SDCard+0x1e0>)
 8002cd8:	f007 fc4c 	bl	800a574 <f_open>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <SDCard+0x1cc>)
 8002ce2:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8002ce4:	4b45      	ldr	r3, [pc, #276]	; (8002dfc <SDCard+0x1cc>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <SDCard+0xc4>
  	myprintf("f_open error (%i)\r\n");
 8002cec:	4849      	ldr	r0, [pc, #292]	; (8002e14 <SDCard+0x1e4>)
 8002cee:	f7fe fcd9 	bl	80016a4 <myprintf>
  	while(1);
 8002cf2:	e7fe      	b.n	8002cf2 <SDCard+0xc2>
    }
    myprintf("I was able to open 'tesjson.txt' for reading!\r\n");
 8002cf4:	4848      	ldr	r0, [pc, #288]	; (8002e18 <SDCard+0x1e8>)
 8002cf6:	f7fe fcd5 	bl	80016a4 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[100];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 8002cfa:	f107 0310 	add.w	r3, r7, #16
 8002cfe:	4a44      	ldr	r2, [pc, #272]	; (8002e10 <SDCard+0x1e0>)
 8002d00:	2164      	movs	r1, #100	; 0x64
 8002d02:	4618      	mov	r0, r3
 8002d04:	f008 fa81 	bl	800b20a <f_gets>
 8002d08:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    if(rres != 0) {
 8002d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <SDCard+0xf2>
  	myprintf("Read string from 'tesjson.txt'' contents: %s\r\n", readBuf);
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4840      	ldr	r0, [pc, #256]	; (8002e1c <SDCard+0x1ec>)
 8002d1c:	f7fe fcc2 	bl	80016a4 <myprintf>
 8002d20:	e005      	b.n	8002d2e <SDCard+0xfe>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <SDCard+0x1cc>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	483d      	ldr	r0, [pc, #244]	; (8002e20 <SDCard+0x1f0>)
 8002d2a:	f7fe fcbb 	bl	80016a4 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8002d2e:	4838      	ldr	r0, [pc, #224]	; (8002e10 <SDCard+0x1e0>)
 8002d30:	f008 f980 	bl	800b034 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002d34:	221a      	movs	r2, #26
 8002d36:	493b      	ldr	r1, [pc, #236]	; (8002e24 <SDCard+0x1f4>)
 8002d38:	4835      	ldr	r0, [pc, #212]	; (8002e10 <SDCard+0x1e0>)
 8002d3a:	f007 fc1b 	bl	800a574 <f_open>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <SDCard+0x1cc>)
 8002d44:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 8002d46:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <SDCard+0x1cc>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <SDCard+0x126>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 8002d4e:	4836      	ldr	r0, [pc, #216]	; (8002e28 <SDCard+0x1f8>)
 8002d50:	f7fe fca8 	bl	80016a4 <myprintf>
 8002d54:	e005      	b.n	8002d62 <SDCard+0x132>
    } else {
    	myprintf("f_open error (%i)\r\n", fres);
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <SDCard+0x1cc>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	482d      	ldr	r0, [pc, #180]	; (8002e14 <SDCard+0x1e4>)
 8002d5e:	f7fe fca1 	bl	80016a4 <myprintf>
    }

    //Copy in a string
//    strncpy((char*)readBuf, "a new file is made!", 19);
    char* kirimjson = "{'Lokasi':'-6.914744,107.609810','Time_Stamp':'27 April 2021, 20:22'}" ;
 8002d62:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <SDCard+0x1fc>)
 8002d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    uint32_t length_var = strlen(kirimjson);
 8002d68:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002d6c:	f7fd fa38 	bl	80001e0 <strlen>
 8002d70:	67f8      	str	r0, [r7, #124]	; 0x7c
    strncpy((char*)readBuf, kirimjson, length_var);
 8002d72:	f107 0310 	add.w	r3, r7, #16
 8002d76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d78:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f00c fdfc 	bl	800f97a <strncpy>
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, length_var, &bytesWrote);
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	f107 0110 	add.w	r1, r7, #16
 8002d8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d8c:	4820      	ldr	r0, [pc, #128]	; (8002e10 <SDCard+0x1e0>)
 8002d8e:	f007 ff24 	bl	800abda <f_write>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <SDCard+0x1cc>)
 8002d98:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <SDCard+0x1cc>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <SDCard+0x17e>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4619      	mov	r1, r3
 8002da6:	4822      	ldr	r0, [pc, #136]	; (8002e30 <SDCard+0x200>)
 8002da8:	f7fe fc7c 	bl	80016a4 <myprintf>
 8002dac:	e002      	b.n	8002db4 <SDCard+0x184>
    } else {
    	myprintf("f_write error (%i)\r\n");
 8002dae:	4821      	ldr	r0, [pc, #132]	; (8002e34 <SDCard+0x204>)
 8002db0:	f7fe fc78 	bl	80016a4 <myprintf>
    }
    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8002db4:	4816      	ldr	r0, [pc, #88]	; (8002e10 <SDCard+0x1e0>)
 8002db6:	f008 f93d 	bl	800b034 <f_close>
//    f_unlink("/write.txt"); Buat ngedelete file
    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	490d      	ldr	r1, [pc, #52]	; (8002df4 <SDCard+0x1c4>)
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f007 fb74 	bl	800a4ac <f_mount>

    osMutexRelease(MutexSPI1Handle);
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <SDCard+0x1c0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f008 fd09 	bl	800b7e0 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
	osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <SDCard+0x1c0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f008 fcb7 	bl	800b74a <osMutexAcquire>
	osMutexRelease(MutexSPI1Handle);
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <SDCard+0x1c0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f008 fcfd 	bl	800b7e0 <osMutexRelease>
    osDelay(1);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f008 fc0e 	bl	800b608 <osDelay>
	osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002dec:	e7ef      	b.n	8002dce <SDCard+0x19e>
 8002dee:	bf00      	nop
 8002df0:	20005188 	.word	0x20005188
 8002df4:	08015c5c 	.word	0x08015c5c
 8002df8:	20004e7c 	.word	0x20004e7c
 8002dfc:	2000562c 	.word	0x2000562c
 8002e00:	08015c60 	.word	0x08015c60
 8002e04:	08015c78 	.word	0x08015c78
 8002e08:	08015c90 	.word	0x08015c90
 8002e0c:	08015cd8 	.word	0x08015cd8
 8002e10:	20005630 	.word	0x20005630
 8002e14:	08015ce4 	.word	0x08015ce4
 8002e18:	08015cf8 	.word	0x08015cf8
 8002e1c:	08015d28 	.word	0x08015d28
 8002e20:	08015d58 	.word	0x08015d58
 8002e24:	08015d6c 	.word	0x08015d6c
 8002e28:	08015d78 	.word	0x08015d78
 8002e2c:	08015da8 	.word	0x08015da8
 8002e30:	08015df0 	.word	0x08015df0
 8002e34:	08015e14 	.word	0x08015e14

08002e38 <ADCProcesing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCProcesing */
void ADCProcesing(void *argument)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b09e      	sub	sp, #120	; 0x78
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADCProcesing */
	char txBuffer[100] = {};
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	2260      	movs	r2, #96	; 0x60
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f00c f8c1 	bl	800efd4 <memset>
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 8002e52:	2203      	movs	r2, #3
 8002e54:	494a      	ldr	r1, [pc, #296]	; (8002f80 <ADCProcesing+0x148>)
 8002e56:	484b      	ldr	r0, [pc, #300]	; (8002f84 <ADCProcesing+0x14c>)
 8002e58:	f000 fefe 	bl	8003c58 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization..\n");
 8002e5c:	f107 0308 	add.w	r3, r7, #8
 8002e60:	4949      	ldr	r1, [pc, #292]	; (8002f88 <ADCProcesing+0x150>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f00c fd28 	bl	800f8b8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8002e68:	f107 0108 	add.w	r1, r7, #8
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	2264      	movs	r2, #100	; 0x64
 8002e72:	4846      	ldr	r0, [pc, #280]	; (8002f8c <ADCProcesing+0x154>)
 8002e74:	f004 fe09 	bl	8007a8a <HAL_UART_Transmit>

	/* Initialize Input Value */
	float input_fuel, input_accu, input_batt = 0;
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	677b      	str	r3, [r7, #116]	; 0x74

	/* Initialize RC Filter */
	RCFilter_Init(&rcFiltFuel, 5.0f, 100.0f);
 8002e7e:	eddf 0a44 	vldr	s1, [pc, #272]	; 8002f90 <ADCProcesing+0x158>
 8002e82:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002e86:	4843      	ldr	r0, [pc, #268]	; (8002f94 <ADCProcesing+0x15c>)
 8002e88:	f7fe fac2 	bl	8001410 <RCFilter_Init>

	/*Initialize Moving Average Filter*/
	MovAvgFilter_init(&MAFiltFuel);
 8002e8c:	4842      	ldr	r0, [pc, #264]	; (8002f98 <ADCProcesing+0x160>)
 8002e8e:	f7fe fb3e 	bl	800150e <MovAvgFilter_init>
	MovAvgFilter_init(&MAFiltAccu);
 8002e92:	4842      	ldr	r0, [pc, #264]	; (8002f9c <ADCProcesing+0x164>)
 8002e94:	f7fe fb3b 	bl	800150e <MovAvgFilter_init>
	MovAvgFilter_init(&MAFiltBatt);
 8002e98:	4841      	ldr	r0, [pc, #260]	; (8002fa0 <ADCProcesing+0x168>)
 8002e9a:	f7fe fb38 	bl	800150e <MovAvgFilter_init>
	/* Start ADC */
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	4937      	ldr	r1, [pc, #220]	; (8002f80 <ADCProcesing+0x148>)
 8002ea2:	4838      	ldr	r0, [pc, #224]	; (8002f84 <ADCProcesing+0x14c>)
 8002ea4:	f000 fed8 	bl	8003c58 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization Success..\n");
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	493d      	ldr	r1, [pc, #244]	; (8002fa4 <ADCProcesing+0x16c>)
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f00c fd02 	bl	800f8b8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8002eb4:	f107 0108 	add.w	r1, r7, #8
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebc:	2264      	movs	r2, #100	; 0x64
 8002ebe:	4833      	ldr	r0, [pc, #204]	; (8002f8c <ADCProcesing+0x154>)
 8002ec0:	f004 fde3 	bl	8007a8a <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  input_accu = (value[0]/ADC_RESOLUTION) * 13;
 8002ec4:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <ADCProcesing+0x170>)
 8002ec6:	ed93 7a00 	vldr	s14, [r3]
 8002eca:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002fac <ADCProcesing+0x174>
 8002ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ed2:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8002ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eda:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	  input_batt = (value[1]/ADC_RESOLUTION) * 4.2;
 8002ede:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <ADCProcesing+0x170>)
 8002ee0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ee4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002fac <ADCProcesing+0x174>
 8002ee8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002eec:	ee16 0a90 	vmov	r0, s13
 8002ef0:	f7fd fb32 	bl	8000558 <__aeabi_f2d>
 8002ef4:	a31e      	add	r3, pc, #120	; (adr r3, 8002f70 <ADCProcesing+0x138>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fb85 	bl	8000608 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe77 	bl	8000bf8 <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	677b      	str	r3, [r7, #116]	; 0x74
	  input_fuel = (value[2]/ADC_RESOLUTION) * VOLTAGE_REFERENCE;
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <ADCProcesing+0x170>)
 8002f10:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f14:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002fac <ADCProcesing+0x174>
 8002f18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f1c:	ee16 0a90 	vmov	r0, s13
 8002f20:	f7fd fb1a 	bl	8000558 <__aeabi_f2d>
 8002f24:	a314      	add	r3, pc, #80	; (adr r3, 8002f78 <ADCProcesing+0x140>)
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f7fd fb6d 	bl	8000608 <__aeabi_dmul>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	f7fd fe5f 	bl	8000bf8 <__aeabi_d2f>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	66fb      	str	r3, [r7, #108]	; 0x6c

	  RCFilter_Update(&rcFiltFuel, input_fuel);
 8002f3e:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8002f42:	4814      	ldr	r0, [pc, #80]	; (8002f94 <ADCProcesing+0x15c>)
 8002f44:	f7fe faba 	bl	80014bc <RCFilter_Update>
	  MovAvgFilter_Update(&MAFiltFuel, input_fuel);
 8002f48:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8002f4c:	4812      	ldr	r0, [pc, #72]	; (8002f98 <ADCProcesing+0x160>)
 8002f4e:	f7fe faff 	bl	8001550 <MovAvgFilter_Update>
	  MovAvgFilter_Update(&MAFiltAccu, input_accu);
 8002f52:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8002f56:	4811      	ldr	r0, [pc, #68]	; (8002f9c <ADCProcesing+0x164>)
 8002f58:	f7fe fafa 	bl	8001550 <MovAvgFilter_Update>
	  MovAvgFilter_Update(&MAFiltBatt, input_batt);
 8002f5c:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8002f60:	480f      	ldr	r0, [pc, #60]	; (8002fa0 <ADCProcesing+0x168>)
 8002f62:	f7fe faf5 	bl	8001550 <MovAvgFilter_Update>
//	  sprintf(txBuffer,"Raw : %.3f Filtered : %.3f\n", input, rcFiltFuel.out[0]);
//	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
	  osDelay(100); //100 Hz Sampling Rate
 8002f66:	2064      	movs	r0, #100	; 0x64
 8002f68:	f008 fb4e 	bl	800b608 <osDelay>
	  input_accu = (value[0]/ADC_RESOLUTION) * 13;
 8002f6c:	e7aa      	b.n	8002ec4 <ADCProcesing+0x8c>
 8002f6e:	bf00      	nop
 8002f70:	cccccccd 	.word	0xcccccccd
 8002f74:	4010cccc 	.word	0x4010cccc
 8002f78:	66666666 	.word	0x66666666
 8002f7c:	400a6666 	.word	0x400a6666
 8002f80:	20005420 	.word	0x20005420
 8002f84:	20005330 	.word	0x20005330
 8002f88:	08015e2c 	.word	0x08015e2c
 8002f8c:	200055e0 	.word	0x200055e0
 8002f90:	42c80000 	.word	0x42c80000
 8002f94:	2000549c 	.word	0x2000549c
 8002f98:	20005264 	.word	0x20005264
 8002f9c:	200054ac 	.word	0x200054ac
 8002fa0:	2000518c 	.word	0x2000518c
 8002fa4:	08015e44 	.word	0x08015e44
 8002fa8:	20005878 	.word	0x20005878
 8002fac:	45800000 	.word	0x45800000

08002fb0 <PowManagement>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PowManagement */
void PowManagement(void *argument)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PowManagement */
	HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_RESET);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fbe:	482a      	ldr	r0, [pc, #168]	; (8003068 <PowManagement+0xb8>)
 8002fc0:	f002 f86e 	bl	80050a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fca:	4828      	ldr	r0, [pc, #160]	; (800306c <PowManagement+0xbc>)
 8002fcc:	f002 f868 	bl	80050a0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  /**/
	  if(ignition_status == 0){
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <PowManagement+0xc0>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <PowManagement+0x3c>
		  //Use Battery
		  power_sel = 1;
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <PowManagement+0xc4>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_SET);
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fe4:	4820      	ldr	r0, [pc, #128]	; (8003068 <PowManagement+0xb8>)
 8002fe6:	f002 f85b 	bl	80050a0 <HAL_GPIO_WritePin>
 8002fea:	e033      	b.n	8003054 <PowManagement+0xa4>
	  }
	  else{ //Ignition On
		  //Always use Accu
		  power_sel = 0;
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <PowManagement+0xc4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_RESET);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ff8:	481b      	ldr	r0, [pc, #108]	; (8003068 <PowManagement+0xb8>)
 8002ffa:	f002 f851 	bl	80050a0 <HAL_GPIO_WritePin>
		  /* Check Accu Level */
		  	  if((MAFiltAccu.out > ACCU_THRESHOLD)&&(MAFiltBatt.out < BATT_THRESHOLD)) {
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <PowManagement+0xc8>)
 8003000:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003004:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	dd17      	ble.n	8003042 <PowManagement+0x92>
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <PowManagement+0xcc>)
 8003014:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa9d 	bl	8000558 <__aeabi_f2d>
 800301e:	a310      	add	r3, pc, #64	; (adr r3, 8003060 <PowManagement+0xb0>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fd62 	bl	8000aec <__aeabi_dcmplt>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <PowManagement+0x92>
		  		  //Start Charging
		  		  //Set Charging Signal High
		  		  charging = 1;
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <PowManagement+0xd0>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
		  		  HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 8003034:	2200      	movs	r2, #0
 8003036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800303a:	480c      	ldr	r0, [pc, #48]	; (800306c <PowManagement+0xbc>)
 800303c:	f002 f830 	bl	80050a0 <HAL_GPIO_WritePin>
 8003040:	e008      	b.n	8003054 <PowManagement+0xa4>
		  	  }
		  	  else { // No charging
		  		  charging = 0;
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <PowManagement+0xd0>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
		  		  HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 8003048:	2200      	movs	r2, #0
 800304a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800304e:	4807      	ldr	r0, [pc, #28]	; (800306c <PowManagement+0xbc>)
 8003050:	f002 f826 	bl	80050a0 <HAL_GPIO_WritePin>
		  	  }
	  }
    osDelay(100);
 8003054:	2064      	movs	r0, #100	; 0x64
 8003056:	f008 fad7 	bl	800b608 <osDelay>
	  if(ignition_status == 0){
 800305a:	e7b9      	b.n	8002fd0 <PowManagement+0x20>
 800305c:	f3af 8000 	nop.w
 8003060:	9999999a 	.word	0x9999999a
 8003064:	400d9999 	.word	0x400d9999
 8003068:	40020800 	.word	0x40020800
 800306c:	40020400 	.word	0x40020400
 8003070:	20000241 	.word	0x20000241
 8003074:	20000242 	.word	0x20000242
 8003078:	200054ac 	.word	0x200054ac
 800307c:	2000518c 	.word	0x2000518c
 8003080:	20000243 	.word	0x20000243

08003084 <Ignition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ignition */
void Ignition(void *argument)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ignition */
  /* Infinite loop */
  for(;;)
  {
	/* Setting Ignition Switch Logic*/
	if(identification == 1){
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <Ignition+0x44>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d106      	bne.n	80030a2 <Ignition+0x1e>
		//Set Ignition Logic
		HAL_GPIO_WritePin(IGNITION_LOGIC_GPIO_Port, IGNITION_LOGIC_Pin, GPIO_PIN_SET);
 8003094:	2201      	movs	r2, #1
 8003096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800309a:	480c      	ldr	r0, [pc, #48]	; (80030cc <Ignition+0x48>)
 800309c:	f002 f800 	bl	80050a0 <HAL_GPIO_WritePin>
 80030a0:	e005      	b.n	80030ae <Ignition+0x2a>
	}
	else {
		HAL_GPIO_WritePin(IGNITION_LOGIC_GPIO_Port, IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030a8:	4808      	ldr	r0, [pc, #32]	; (80030cc <Ignition+0x48>)
 80030aa:	f001 fff9 	bl	80050a0 <HAL_GPIO_WritePin>
	}

	/* Reading Ignition Switch Signal */
	ignition_status = HAL_GPIO_ReadPin(IGNITION_SIGNAL_GPIO_Port, IGNITION_SIGNAL_Pin);
 80030ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <Ignition+0x4c>)
 80030b4:	f001 ffdc 	bl	8005070 <HAL_GPIO_ReadPin>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <Ignition+0x50>)
 80030be:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 80030c0:	20c8      	movs	r0, #200	; 0xc8
 80030c2:	f008 faa1 	bl	800b608 <osDelay>
	if(identification == 1){
 80030c6:	e7e1      	b.n	800308c <Ignition+0x8>
 80030c8:	20000220 	.word	0x20000220
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	20000241 	.word	0x20000241

080030d8 <LoggingData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LoggingData */
void LoggingData(void *argument)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LoggingData */
	uint8_t index = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	log_acc_avg[index] = acc_avg;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <LoggingData+0x9c>)
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	4923      	ldr	r1, [pc, #140]	; (8003178 <LoggingData+0xa0>)
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	601a      	str	r2, [r3, #0]
	log_acc_max[index] = acc_max;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	4a21      	ldr	r2, [pc, #132]	; (800317c <LoggingData+0xa4>)
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	4921      	ldr	r1, [pc, #132]	; (8003180 <LoggingData+0xa8>)
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	601a      	str	r2, [r3, #0]
	log_speed_max[index] = speed_max;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	4a20      	ldr	r2, [pc, #128]	; (8003184 <LoggingData+0xac>)
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	4920      	ldr	r1, [pc, #128]	; (8003188 <LoggingData+0xb0>)
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	601a      	str	r2, [r3, #0]
	log_speed_max[index] = speed_avg;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	4a1e      	ldr	r2, [pc, #120]	; (800318c <LoggingData+0xb4>)
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	491c      	ldr	r1, [pc, #112]	; (8003188 <LoggingData+0xb0>)
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	601a      	str	r2, [r3, #0]

	//Increment Index
	index++;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	3301      	adds	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]

	if(index > LOG_LENGTH){
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b06      	cmp	r3, #6
 8003126:	d920      	bls.n	800316a <LoggingData+0x92>
		osMutexAcquire(mutexIMUHandle, portMAX_DELAY);
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <LoggingData+0xb8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	4618      	mov	r0, r3
 8003132:	f008 fb0a 	bl	800b74a <osMutexAcquire>
		index = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
		//Add clearing array
		imu_index = 0;
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <LoggingData+0xbc>)
 800313c:	2200      	movs	r2, #0
 800313e:	801a      	strh	r2, [r3, #0]
		speed_avg = 0;
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <LoggingData+0xb4>)
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
		speed_max = 0;
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <LoggingData+0xac>)
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
		acc_avg = 0;
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <LoggingData+0x9c>)
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
		acc_max = 0;
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <LoggingData+0xa4>)
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
		osMutexRelease(mutexIMUHandle);
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <LoggingData+0xb8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f008 fb3b 	bl	800b7e0 <osMutexRelease>
	}

    osDelay(10*1000);
 800316a:	f242 7010 	movw	r0, #10000	; 0x2710
 800316e:	f008 fa4b 	bl	800b608 <osDelay>
	log_acc_avg[index] = acc_avg;
 8003172:	e7b7      	b.n	80030e4 <LoggingData+0xc>
 8003174:	200050b0 	.word	0x200050b0
 8003178:	2000025c 	.word	0x2000025c
 800317c:	20004e70 	.word	0x20004e70
 8003180:	20000244 	.word	0x20000244
 8003184:	20004e78 	.word	0x20004e78
 8003188:	20000274 	.word	0x20000274
 800318c:	2000511c 	.word	0x2000511c
 8003190:	20005118 	.word	0x20005118
 8003194:	20005874 	.word	0x20005874

08003198 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031aa:	f000 fccd 	bl	8003b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000

080031bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c0:	b672      	cpsid	i
}
 80031c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <Error_Handler+0x8>

080031c6 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b088      	sub	sp, #32
 80031ca:	af04      	add	r7, sp, #16
 80031cc:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 80031ce:	2364      	movs	r3, #100	; 0x64
 80031d0:	9302      	str	r3, [sp, #8]
 80031d2:	2301      	movs	r3, #1
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	f107 030f 	add.w	r3, r7, #15
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2301      	movs	r3, #1
 80031de:	2200      	movs	r2, #0
 80031e0:	21a6      	movs	r1, #166	; 0xa6
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f002 f9b4 	bl	8005550 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2be5      	cmp	r3, #229	; 0xe5
 80031ec:	d15e      	bne.n	80032ac <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 80031f2:	2364      	movs	r3, #100	; 0x64
 80031f4:	9302      	str	r3, [sp, #8]
 80031f6:	2301      	movs	r3, #1
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	f107 030e 	add.w	r3, r7, #14
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2301      	movs	r3, #1
 8003202:	222d      	movs	r2, #45	; 0x2d
 8003204:	21a6      	movs	r1, #166	; 0xa6
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f002 f8a8 	bl	800535c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800320c:	2064      	movs	r0, #100	; 0x64
 800320e:	f000 fcbb 	bl	8003b88 <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 8003212:	230b      	movs	r3, #11
 8003214:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 8003216:	2364      	movs	r3, #100	; 0x64
 8003218:	9302      	str	r3, [sp, #8]
 800321a:	2301      	movs	r3, #1
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	f107 030e 	add.w	r3, r7, #14
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2301      	movs	r3, #1
 8003226:	2231      	movs	r2, #49	; 0x31
 8003228:	21a6      	movs	r1, #166	; 0xa6
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f002 f896 	bl	800535c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8003230:	2064      	movs	r0, #100	; 0x64
 8003232:	f000 fca9 	bl	8003b88 <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8003236:	2364      	movs	r3, #100	; 0x64
 8003238:	9302      	str	r3, [sp, #8]
 800323a:	2301      	movs	r3, #1
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	f107 030d 	add.w	r3, r7, #13
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2301      	movs	r3, #1
 8003246:	222c      	movs	r2, #44	; 0x2c
 8003248:	21a6      	movs	r1, #166	; 0xa6
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f002 f980 	bl	8005550 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 8003250:	7b7b      	ldrb	r3, [r7, #13]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	b2db      	uxtb	r3, r3
 8003258:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 800325a:	7b7b      	ldrb	r3, [r7, #13]
 800325c:	f043 030f 	orr.w	r3, r3, #15
 8003260:	b2db      	uxtb	r3, r3
 8003262:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8003264:	2364      	movs	r3, #100	; 0x64
 8003266:	9302      	str	r3, [sp, #8]
 8003268:	2301      	movs	r3, #1
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	f107 030d 	add.w	r3, r7, #13
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	2301      	movs	r3, #1
 8003274:	222c      	movs	r2, #44	; 0x2c
 8003276:	21a6      	movs	r1, #166	; 0xa6
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f002 f86f 	bl	800535c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800327e:	2064      	movs	r0, #100	; 0x64
 8003280:	f000 fc82 	bl	8003b88 <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 8003284:	2308      	movs	r3, #8
 8003286:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8003288:	2364      	movs	r3, #100	; 0x64
 800328a:	9302      	str	r3, [sp, #8]
 800328c:	2301      	movs	r3, #1
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	f107 030e 	add.w	r3, r7, #14
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2301      	movs	r3, #1
 8003298:	222d      	movs	r2, #45	; 0x2d
 800329a:	21a6      	movs	r1, #166	; 0xa6
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f002 f85d 	bl	800535c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80032a2:	2064      	movs	r0, #100	; 0x64
 80032a4:	f000 fc70 	bl	8003b88 <HAL_Delay>

        return check;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	e000      	b.n	80032ae <MPU6050_Init+0xe8>
    }
    return 1;
 80032ac:	2301      	movs	r3, #1
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af04      	add	r7, sp, #16
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80032c2:	2364      	movs	r3, #100	; 0x64
 80032c4:	9302      	str	r3, [sp, #8]
 80032c6:	2306      	movs	r3, #6
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2301      	movs	r3, #1
 80032d2:	2232      	movs	r2, #50	; 0x32
 80032d4:	21a6      	movs	r1, #166	; 0xa6
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f002 f93a 	bl	8005550 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 80032dc:	7a7b      	ldrb	r3, [r7, #9]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	b21a      	sxth	r2, r3
 80032e2:	7a3b      	ldrb	r3, [r7, #8]
 80032e4:	b21b      	sxth	r3, r3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 80032ee:	7afb      	ldrb	r3, [r7, #11]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	b21a      	sxth	r2, r3
 80032f4:	7abb      	ldrb	r3, [r7, #10]
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b21a      	sxth	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 8003300:	7b7b      	ldrb	r3, [r7, #13]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	b21a      	sxth	r2, r3
 8003306:	7b3b      	ldrb	r3, [r7, #12]
 8003308:	b21b      	sxth	r3, r3
 800330a:	4313      	orrs	r3, r2
 800330c:	b21a      	sxth	r2, r3
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <MPU6050_Read_Accel+0x108>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	ee17 0a90 	vmov	r0, s15
 800332e:	f7fd f913 	bl	8000558 <__aeabi_f2d>
 8003332:	a321      	add	r3, pc, #132	; (adr r3, 80033b8 <MPU6050_Read_Accel+0x100>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fd fa90 	bl	800085c <__aeabi_ddiv>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	6839      	ldr	r1, [r7, #0]
 8003342:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <MPU6050_Read_Accel+0x108>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335e:	ee17 0a90 	vmov	r0, s15
 8003362:	f7fd f8f9 	bl	8000558 <__aeabi_f2d>
 8003366:	a314      	add	r3, pc, #80	; (adr r3, 80033b8 <MPU6050_Read_Accel+0x100>)
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f7fd fa76 	bl	800085c <__aeabi_ddiv>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003380:	ee07 3a90 	vmov	s15, r3
 8003384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <MPU6050_Read_Accel+0x108>)
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003392:	ee17 0a90 	vmov	r0, s15
 8003396:	f7fd f8df 	bl	8000558 <__aeabi_f2d>
 800339a:	a307      	add	r3, pc, #28	; (adr r3, 80033b8 <MPU6050_Read_Accel+0x100>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f7fd fa5c 	bl	800085c <__aeabi_ddiv>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	3a92a305 	.word	0x3a92a305
 80033bc:	40239d01 	.word	0x40239d01
 80033c0:	20000000 	.word	0x20000000

080033c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_MspInit+0x54>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	4a11      	ldr	r2, [pc, #68]	; (8003418 <HAL_MspInit+0x54>)
 80033d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_MspInit+0x54>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_MspInit+0x54>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_MspInit+0x54>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_MspInit+0x54>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	210f      	movs	r1, #15
 8003406:	f06f 0001 	mvn.w	r0, #1
 800340a:	f001 f881 	bl	8004510 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a3c      	ldr	r2, [pc, #240]	; (800352c <HAL_ADC_MspInit+0x110>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d171      	bne.n	8003522 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_ADC_MspInit+0x114>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <HAL_ADC_MspInit+0x114>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b38      	ldr	r3, [pc, #224]	; (8003530 <HAL_ADC_MspInit+0x114>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b34      	ldr	r3, [pc, #208]	; (8003530 <HAL_ADC_MspInit+0x114>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a33      	ldr	r2, [pc, #204]	; (8003530 <HAL_ADC_MspInit+0x114>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_ADC_MspInit+0x114>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_ADC_MspInit+0x114>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <HAL_ADC_MspInit+0x114>)
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_ADC_MspInit+0x114>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8003492:	2320      	movs	r3, #32
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003496:	2303      	movs	r3, #3
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	4823      	ldr	r0, [pc, #140]	; (8003534 <HAL_ADC_MspInit+0x118>)
 80034a6:	f001 fc5f 	bl	8004d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACCU_LEVEL_Pin|FUEL_LEVEL_Pin;
 80034aa:	2303      	movs	r3, #3
 80034ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ae:	2303      	movs	r3, #3
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	481e      	ldr	r0, [pc, #120]	; (8003538 <HAL_ADC_MspInit+0x11c>)
 80034be:	f001 fc53 	bl	8004d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <HAL_ADC_MspInit+0x124>)
 80034c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034c8:	4b1c      	ldr	r3, [pc, #112]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ce:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_ADC_MspInit+0x120>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_ADC_MspInit+0x120>)
 8003502:	2200      	movs	r2, #0
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003506:	480d      	ldr	r0, [pc, #52]	; (800353c <HAL_ADC_MspInit+0x120>)
 8003508:	f001 f82c 	bl	8004564 <HAL_DMA_Init>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003512:	f7ff fe53 	bl	80031bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_ADC_MspInit+0x120>)
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
 800351c:	4a07      	ldr	r2, [pc, #28]	; (800353c <HAL_ADC_MspInit+0x120>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40012000 	.word	0x40012000
 8003530:	40023800 	.word	0x40023800
 8003534:	40020800 	.word	0x40020800
 8003538:	40020400 	.word	0x40020400
 800353c:	2000542c 	.word	0x2000542c
 8003540:	40026410 	.word	0x40026410

08003544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <HAL_I2C_MspInit+0x84>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12b      	bne.n	80035be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <HAL_I2C_MspInit+0x88>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_I2C_MspInit+0x88>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <HAL_I2C_MspInit+0x88>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003582:	23c0      	movs	r3, #192	; 0xc0
 8003584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003586:	2312      	movs	r3, #18
 8003588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800358a:	2301      	movs	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358e:	2303      	movs	r3, #3
 8003590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003592:	2304      	movs	r3, #4
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003596:	f107 0314 	add.w	r3, r7, #20
 800359a:	4619      	mov	r1, r3
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <HAL_I2C_MspInit+0x8c>)
 800359e:	f001 fbe3 	bl	8004d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_I2C_MspInit+0x88>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a08      	ldr	r2, [pc, #32]	; (80035cc <HAL_I2C_MspInit+0x88>)
 80035ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_I2C_MspInit+0x88>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035be:	bf00      	nop
 80035c0:	3728      	adds	r7, #40	; 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40005400 	.word	0x40005400
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40020400 	.word	0x40020400

080035d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_SPI_MspInit+0x84>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d12b      	bne.n	800364e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_SPI_MspInit+0x88>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <HAL_SPI_MspInit+0x88>)
 8003600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_SPI_MspInit+0x88>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_SPI_MspInit+0x88>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <HAL_SPI_MspInit+0x88>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_SPI_MspInit+0x88>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800362e:	23e0      	movs	r3, #224	; 0xe0
 8003630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003636:	2301      	movs	r3, #1
 8003638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800363e:	2305      	movs	r3, #5
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4805      	ldr	r0, [pc, #20]	; (8003660 <HAL_SPI_MspInit+0x8c>)
 800364a:	f001 fb8d 	bl	8004d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800364e:	bf00      	nop
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40013000 	.word	0x40013000
 800365c:	40023800 	.word	0x40023800
 8003660:	40020000 	.word	0x40020000

08003664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08c      	sub	sp, #48	; 0x30
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a4e      	ldr	r2, [pc, #312]	; (80037bc <HAL_UART_MspInit+0x158>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d164      	bne.n	8003750 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	4a4c      	ldr	r2, [pc, #304]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 8003690:	f043 0310 	orr.w	r3, r3, #16
 8003694:	6453      	str	r3, [r2, #68]	; 0x44
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	4b46      	ldr	r3, [pc, #280]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	4a45      	ldr	r2, [pc, #276]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6313      	str	r3, [r2, #48]	; 0x30
 80036b2:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c4:	2302      	movs	r3, #2
 80036c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036cc:	2303      	movs	r3, #3
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036d0:	2307      	movs	r3, #7
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	f107 031c 	add.w	r3, r7, #28
 80036d8:	4619      	mov	r1, r3
 80036da:	483a      	ldr	r0, [pc, #232]	; (80037c4 <HAL_UART_MspInit+0x160>)
 80036dc:	f001 fb44 	bl	8004d68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_UART_MspInit+0x164>)
 80036e2:	4a3a      	ldr	r2, [pc, #232]	; (80037cc <HAL_UART_MspInit+0x168>)
 80036e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80036e6:	4b38      	ldr	r3, [pc, #224]	; (80037c8 <HAL_UART_MspInit+0x164>)
 80036e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_UART_MspInit+0x164>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <HAL_UART_MspInit+0x164>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036fa:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <HAL_UART_MspInit+0x164>)
 80036fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003700:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_UART_MspInit+0x164>)
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <HAL_UART_MspInit+0x164>)
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800370e:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <HAL_UART_MspInit+0x164>)
 8003710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003714:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003716:	4b2c      	ldr	r3, [pc, #176]	; (80037c8 <HAL_UART_MspInit+0x164>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800371c:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_UART_MspInit+0x164>)
 800371e:	2200      	movs	r2, #0
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003722:	4829      	ldr	r0, [pc, #164]	; (80037c8 <HAL_UART_MspInit+0x164>)
 8003724:	f000 ff1e 	bl	8004564 <HAL_DMA_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800372e:	f7ff fd45 	bl	80031bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a24      	ldr	r2, [pc, #144]	; (80037c8 <HAL_UART_MspInit+0x164>)
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
 8003738:	4a23      	ldr	r2, [pc, #140]	; (80037c8 <HAL_UART_MspInit+0x164>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2105      	movs	r1, #5
 8003742:	2025      	movs	r0, #37	; 0x25
 8003744:	f000 fee4 	bl	8004510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003748:	2025      	movs	r0, #37	; 0x25
 800374a:	f000 fefd 	bl	8004548 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800374e:	e030      	b.n	80037b2 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <HAL_UART_MspInit+0x16c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d12b      	bne.n	80037b2 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 8003764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_UART_MspInit+0x15c>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003792:	230c      	movs	r3, #12
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037a2:	2307      	movs	r3, #7
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	4805      	ldr	r0, [pc, #20]	; (80037c4 <HAL_UART_MspInit+0x160>)
 80037ae:	f001 fadb 	bl	8004d68 <HAL_GPIO_Init>
}
 80037b2:	bf00      	nop
 80037b4:	3730      	adds	r7, #48	; 0x30
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	20005378 	.word	0x20005378
 80037cc:	40026440 	.word	0x40026440
 80037d0:	40004400 	.word	0x40004400

080037d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	; 0x30
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	2019      	movs	r0, #25
 80037ea:	f000 fe91 	bl	8004510 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037ee:	2019      	movs	r0, #25
 80037f0:	f000 feaa 	bl	8004548 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_InitTick+0xa0>)
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <HAL_InitTick+0xa0>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6453      	str	r3, [r2, #68]	; 0x44
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <HAL_InitTick+0xa0>)
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003810:	f107 0210 	add.w	r2, r7, #16
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f003 f88e 	bl	800693c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003820:	f003 f878 	bl	8006914 <HAL_RCC_GetPCLK2Freq>
 8003824:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	4a13      	ldr	r2, [pc, #76]	; (8003878 <HAL_InitTick+0xa4>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	3b01      	subs	r3, #1
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_InitTick+0xa8>)
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <HAL_InitTick+0xac>)
 8003838:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_InitTick+0xa8>)
 800383c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003840:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003842:	4a0e      	ldr	r2, [pc, #56]	; (800387c <HAL_InitTick+0xa8>)
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <HAL_InitTick+0xa8>)
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_InitTick+0xa8>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003854:	4809      	ldr	r0, [pc, #36]	; (800387c <HAL_InitTick+0xa8>)
 8003856:	f003 fe4b 	bl	80074f0 <HAL_TIM_Base_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003860:	4806      	ldr	r0, [pc, #24]	; (800387c <HAL_InitTick+0xa8>)
 8003862:	f003 fe9f 	bl	80075a4 <HAL_TIM_Base_Start_IT>
 8003866:	4603      	mov	r3, r0
 8003868:	e000      	b.n	800386c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
}
 800386c:	4618      	mov	r0, r3
 800386e:	3730      	adds	r7, #48	; 0x30
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	431bde83 	.word	0x431bde83
 800387c:	20005884 	.word	0x20005884
 8003880:	40010000 	.word	0x40010000

08003884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <NMI_Handler+0x4>

0800388a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <HardFault_Handler+0x4>

08003890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003894:	e7fe      	b.n	8003894 <MemManage_Handler+0x4>

08003896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800389a:	e7fe      	b.n	800389a <BusFault_Handler+0x4>

0800389c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <UsageFault_Handler+0x4>

080038a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80038b6:	f003 fed7 	bl	8007668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20005884 	.word	0x20005884

080038c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <USART1_IRQHandler+0x10>)
 80038ca:	f004 f9a1 	bl	8007c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200053d8 	.word	0x200053d8

080038d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <DMA2_Stream0_IRQHandler+0x10>)
 80038de:	f000 ffd9 	bl	8004894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	2000542c 	.word	0x2000542c

080038ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <DMA2_Stream2_IRQHandler+0x10>)
 80038f2:	f000 ffcf 	bl	8004894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20005378 	.word	0x20005378

08003900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
	return 1;
 8003904:	2301      	movs	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_kill>:

int _kill(int pid, int sig)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800391a:	f00b fb23 	bl	800ef64 <__errno>
 800391e:	4603      	mov	r3, r0
 8003920:	2216      	movs	r2, #22
 8003922:	601a      	str	r2, [r3, #0]
	return -1;
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_exit>:

void _exit (int status)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003938:	f04f 31ff 	mov.w	r1, #4294967295
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ffe7 	bl	8003910 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003942:	e7fe      	b.n	8003942 <_exit+0x12>

08003944 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e00a      	b.n	800396c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003956:	f3af 8000 	nop.w
 800395a:	4601      	mov	r1, r0
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	60ba      	str	r2, [r7, #8]
 8003962:	b2ca      	uxtb	r2, r1
 8003964:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	3301      	adds	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	dbf0      	blt.n	8003956 <_read+0x12>
	}

return len;
 8003974:	687b      	ldr	r3, [r7, #4]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e009      	b.n	80039a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	60ba      	str	r2, [r7, #8]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3301      	adds	r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	dbf1      	blt.n	8003990 <_write+0x12>
	}
	return len;
 80039ac:	687b      	ldr	r3, [r7, #4]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <_close>:

int _close(int file)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
	return -1;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039de:	605a      	str	r2, [r3, #4]
	return 0;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_isatty>:

int _isatty(int file)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
	return 1;
 80039f6:	2301      	movs	r3, #1
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <_sbrk+0x5c>)
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <_sbrk+0x60>)
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a34:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <_sbrk+0x64>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <_sbrk+0x64>)
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <_sbrk+0x68>)
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <_sbrk+0x64>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d207      	bcs.n	8003a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a50:	f00b fa88 	bl	800ef64 <__errno>
 8003a54:	4603      	mov	r3, r0
 8003a56:	220c      	movs	r2, #12
 8003a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5e:	e009      	b.n	8003a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <_sbrk+0x64>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <_sbrk+0x64>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <_sbrk+0x64>)
 8003a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20018000 	.word	0x20018000
 8003a80:	00000400 	.word	0x00000400
 8003a84:	2000038c 	.word	0x2000038c
 8003a88:	20005d90 	.word	0x20005d90

08003a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <SystemInit+0x20>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <SystemInit+0x20>)
 8003a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ab6:	490e      	ldr	r1, [pc, #56]	; (8003af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ab8:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003abc:	e002      	b.n	8003ac4 <LoopCopyDataInit>

08003abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac2:	3304      	adds	r3, #4

08003ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac8:	d3f9      	bcc.n	8003abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aca:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003acc:	4c0b      	ldr	r4, [pc, #44]	; (8003afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad0:	e001      	b.n	8003ad6 <LoopFillZerobss>

08003ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad4:	3204      	adds	r2, #4

08003ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad8:	d3fb      	bcc.n	8003ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ada:	f7ff ffd7 	bl	8003a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ade:	f00b fa47 	bl	800ef70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ae2:	f7fd ff33 	bl	800194c <main>
  bx  lr    
 8003ae6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ae8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003af4:	080167f8 	.word	0x080167f8
  ldr r2, =_sbss
 8003af8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003afc:	20005d8c 	.word	0x20005d8c

08003b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b00:	e7fe      	b.n	8003b00 <ADC_IRQHandler>
	...

08003b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <HAL_Init+0x40>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <HAL_Init+0x40>)
 8003b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_Init+0x40>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_Init+0x40>)
 8003b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_Init+0x40>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_Init+0x40>)
 8003b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	f000 fce4 	bl	80044fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7ff fe4e 	bl	80037d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b38:	f7ff fc44 	bl	80033c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00

08003b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_IncTick+0x20>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_IncTick+0x24>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <HAL_IncTick+0x24>)
 8003b5a:	6013      	str	r3, [r2, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	2000000c 	.word	0x2000000c
 8003b6c:	200058cc 	.word	0x200058cc

08003b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return uwTick;
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_GetTick+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	200058cc 	.word	0x200058cc

08003b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b90:	f7ff ffee 	bl	8003b70 <HAL_GetTick>
 8003b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d005      	beq.n	8003bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_Delay+0x44>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bae:	bf00      	nop
 8003bb0:	f7ff ffde 	bl	8003b70 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d8f7      	bhi.n	8003bb0 <HAL_Delay+0x28>
  {
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	2000000c 	.word	0x2000000c

08003bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e033      	b.n	8003c4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fc14 	bl	800341c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c16:	f023 0302 	bic.w	r3, r3, #2
 8003c1a:	f043 0202 	orr.w	r2, r3, #2
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fa3e 	bl	80040a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	f043 0201 	orr.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8003c3e:	e001      	b.n	8003c44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Start_DMA+0x1e>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e0ce      	b.n	8003e14 <HAL_ADC_Start_DMA+0x1bc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d018      	beq.n	8003cbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c9c:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <HAL_ADC_Start_DMA+0x1c4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5f      	ldr	r2, [pc, #380]	; (8003e20 <HAL_ADC_Start_DMA+0x1c8>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0c9a      	lsrs	r2, r3, #18
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003cb0:	e002      	b.n	8003cb8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f9      	bne.n	8003cb2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ccc:	d107      	bne.n	8003cde <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 8086 	bne.w	8003dfa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2c:	d106      	bne.n	8003d3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	f023 0206 	bic.w	r2, r3, #6
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
 8003d3a:	e002      	b.n	8003d42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <HAL_ADC_Start_DMA+0x1cc>)
 8003d4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <HAL_ADC_Start_DMA+0x1d0>)
 8003d54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <HAL_ADC_Start_DMA+0x1d4>)
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	4a33      	ldr	r2, [pc, #204]	; (8003e30 <HAL_ADC_Start_DMA+0x1d8>)
 8003d64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d7e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	334c      	adds	r3, #76	; 0x4c
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f000 fc8e 	bl	80046c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10f      	bne.n	8003dd0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d129      	bne.n	8003e12 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	e020      	b.n	8003e12 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <HAL_ADC_Start_DMA+0x1dc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d11b      	bne.n	8003e12 <HAL_ADC_Start_DMA+0x1ba>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d114      	bne.n	8003e12 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	e00b      	b.n	8003e12 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0210 	orr.w	r2, r3, #16
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000004 	.word	0x20000004
 8003e20:	431bde83 	.word	0x431bde83
 8003e24:	40012300 	.word	0x40012300
 8003e28:	0800429d 	.word	0x0800429d
 8003e2c:	08004357 	.word	0x08004357
 8003e30:	08004373 	.word	0x08004373
 8003e34:	40012000 	.word	0x40012000

08003e38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x1c>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e105      	b.n	8004088 <HAL_ADC_ConfigChannel+0x228>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b09      	cmp	r3, #9
 8003e8a:	d925      	bls.n	8003ed8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68d9      	ldr	r1, [r3, #12]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3b1e      	subs	r3, #30
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	400a      	ands	r2, r1
 8003eb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68d9      	ldr	r1, [r3, #12]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4403      	add	r3, r0
 8003eca:	3b1e      	subs	r3, #30
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	e022      	b.n	8003f1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6919      	ldr	r1, [r3, #16]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	2207      	movs	r2, #7
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	400a      	ands	r2, r1
 8003efa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6919      	ldr	r1, [r3, #16]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4403      	add	r3, r0
 8003f14:	409a      	lsls	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b06      	cmp	r3, #6
 8003f24:	d824      	bhi.n	8003f70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	3b05      	subs	r3, #5
 8003f38:	221f      	movs	r2, #31
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	400a      	ands	r2, r1
 8003f46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4618      	mov	r0, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	3b05      	subs	r3, #5
 8003f62:	fa00 f203 	lsl.w	r2, r0, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f6e:	e04c      	b.n	800400a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	d824      	bhi.n	8003fc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	3b23      	subs	r3, #35	; 0x23
 8003f8a:	221f      	movs	r2, #31
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43da      	mvns	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	400a      	ands	r2, r1
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3b23      	subs	r3, #35	; 0x23
 8003fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003fc0:	e023      	b.n	800400a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3b41      	subs	r3, #65	; 0x41
 8003fd4:	221f      	movs	r2, #31
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3b41      	subs	r3, #65	; 0x41
 8003ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_ADC_ConfigChannel+0x234>)
 800400c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a21      	ldr	r2, [pc, #132]	; (8004098 <HAL_ADC_ConfigChannel+0x238>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d109      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1cc>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b12      	cmp	r3, #18
 800401e:	d105      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_ADC_ConfigChannel+0x238>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d123      	bne.n	800407e <HAL_ADC_ConfigChannel+0x21e>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b10      	cmp	r3, #16
 800403c:	d003      	beq.n	8004046 <HAL_ADC_ConfigChannel+0x1e6>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b11      	cmp	r3, #17
 8004044:	d11b      	bne.n	800407e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b10      	cmp	r3, #16
 8004058:	d111      	bne.n	800407e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_ADC_ConfigChannel+0x23c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a10      	ldr	r2, [pc, #64]	; (80040a0 <HAL_ADC_ConfigChannel+0x240>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	0c9a      	lsrs	r2, r3, #18
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004070:	e002      	b.n	8004078 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	3b01      	subs	r3, #1
 8004076:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f9      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40012300 	.word	0x40012300
 8004098:	40012000 	.word	0x40012000
 800409c:	20000004 	.word	0x20000004
 80040a0:	431bde83 	.word	0x431bde83

080040a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040ac:	4b79      	ldr	r3, [pc, #484]	; (8004294 <ADC_Init+0x1f0>)
 80040ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	021a      	lsls	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800411e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6899      	ldr	r1, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	4a58      	ldr	r2, [pc, #352]	; (8004298 <ADC_Init+0x1f4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800414a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800416c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6899      	ldr	r1, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	e00f      	b.n	80041a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0202 	bic.w	r2, r2, #2
 80041b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6899      	ldr	r1, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7e1b      	ldrb	r3, [r3, #24]
 80041bc:	005a      	lsls	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01b      	beq.n	8004208 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6859      	ldr	r1, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	3b01      	subs	r3, #1
 80041fc:	035a      	lsls	r2, r3, #13
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	e007      	b.n	8004218 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004216:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	3b01      	subs	r3, #1
 8004234:	051a      	lsls	r2, r3, #20
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800424c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6899      	ldr	r1, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800425a:	025a      	lsls	r2, r3, #9
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6899      	ldr	r1, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	029a      	lsls	r2, r3, #10
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	40012300 	.word	0x40012300
 8004298:	0f000001 	.word	0x0f000001

0800429c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d13c      	bne.n	8004330 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d12b      	bne.n	8004328 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d127      	bne.n	8004328 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d119      	bne.n	8004328 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0220 	bic.w	r2, r2, #32
 8004302:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7fd f995 	bl	8001658 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800432e:	e00e      	b.n	800434e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff fd85 	bl	8003e4c <HAL_ADC_ErrorCallback>
}
 8004342:	e004      	b.n	800434e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff fd67 	bl	8003e38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2240      	movs	r2, #64	; 0x40
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f7ff fd5a 	bl	8003e4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <__NVIC_SetPriorityGrouping+0x44>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043bc:	4013      	ands	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043d2:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <__NVIC_SetPriorityGrouping+0x44>)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	60d3      	str	r3, [r2, #12]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <__NVIC_GetPriorityGrouping+0x18>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	f003 0307 	and.w	r3, r3, #7
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800440e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004412:	2b00      	cmp	r3, #0
 8004414:	db0b      	blt.n	800442e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	f003 021f 	and.w	r2, r3, #31
 800441c:	4907      	ldr	r1, [pc, #28]	; (800443c <__NVIC_EnableIRQ+0x38>)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2001      	movs	r0, #1
 8004426:	fa00 f202 	lsl.w	r2, r0, r2
 800442a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	e000e100 	.word	0xe000e100

08004440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	6039      	str	r1, [r7, #0]
 800444a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004450:	2b00      	cmp	r3, #0
 8004452:	db0a      	blt.n	800446a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	b2da      	uxtb	r2, r3
 8004458:	490c      	ldr	r1, [pc, #48]	; (800448c <__NVIC_SetPriority+0x4c>)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	0112      	lsls	r2, r2, #4
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	440b      	add	r3, r1
 8004464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004468:	e00a      	b.n	8004480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	4908      	ldr	r1, [pc, #32]	; (8004490 <__NVIC_SetPriority+0x50>)
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	3b04      	subs	r3, #4
 8004478:	0112      	lsls	r2, r2, #4
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	440b      	add	r3, r1
 800447e:	761a      	strb	r2, [r3, #24]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	e000e100 	.word	0xe000e100
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	; 0x24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f1c3 0307 	rsb	r3, r3, #7
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	bf28      	it	cs
 80044b2:	2304      	movcs	r3, #4
 80044b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3304      	adds	r3, #4
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	d902      	bls.n	80044c4 <NVIC_EncodePriority+0x30>
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3b03      	subs	r3, #3
 80044c2:	e000      	b.n	80044c6 <NVIC_EncodePriority+0x32>
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c8:	f04f 32ff 	mov.w	r2, #4294967295
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	401a      	ands	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044dc:	f04f 31ff 	mov.w	r1, #4294967295
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	fa01 f303 	lsl.w	r3, r1, r3
 80044e6:	43d9      	mvns	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ec:	4313      	orrs	r3, r2
         );
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3724      	adds	r7, #36	; 0x24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff ff4c 	bl	80043a0 <__NVIC_SetPriorityGrouping>
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004522:	f7ff ff61 	bl	80043e8 <__NVIC_GetPriorityGrouping>
 8004526:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	6978      	ldr	r0, [r7, #20]
 800452e:	f7ff ffb1 	bl	8004494 <NVIC_EncodePriority>
 8004532:	4602      	mov	r2, r0
 8004534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff ff80 	bl	8004440 <__NVIC_SetPriority>
}
 8004540:	bf00      	nop
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff54 	bl	8004404 <__NVIC_EnableIRQ>
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004570:	f7ff fafe 	bl	8003b70 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e099      	b.n	80046b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a0:	e00f      	b.n	80045c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045a2:	f7ff fae5 	bl	8003b70 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d908      	bls.n	80045c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2203      	movs	r2, #3
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e078      	b.n	80046b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e8      	bne.n	80045a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4b38      	ldr	r3, [pc, #224]	; (80046bc <HAL_DMA_Init+0x158>)
 80045dc:	4013      	ands	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	4313      	orrs	r3, r2
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0307 	bic.w	r3, r3, #7
 8004642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b04      	cmp	r3, #4
 8004654:	d117      	bne.n	8004686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fb01 	bl	8004c70 <DMA_CheckFifoParam>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2240      	movs	r2, #64	; 0x40
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004682:	2301      	movs	r3, #1
 8004684:	e016      	b.n	80046b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fab8 	bl	8004c04 <DMA_CalcBaseAndBitshift>
 8004694:	4603      	mov	r3, r0
 8004696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	223f      	movs	r2, #63	; 0x3f
 800469e:	409a      	lsls	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	f010803f 	.word	0xf010803f

080046c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_DMA_Start_IT+0x26>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e040      	b.n	8004768 <HAL_DMA_Start_IT+0xa8>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d12f      	bne.n	800475a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa4a 	bl	8004ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004718:	223f      	movs	r2, #63	; 0x3f
 800471a:	409a      	lsls	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0216 	orr.w	r2, r2, #22
 800472e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e005      	b.n	8004766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004762:	2302      	movs	r3, #2
 8004764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800477e:	f7ff f9f7 	bl	8003b70 <HAL_GetTick>
 8004782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d008      	beq.n	80047a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e052      	b.n	8004848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0216 	bic.w	r2, r2, #22
 80047b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_DMA_Abort+0x62>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0208 	bic.w	r2, r2, #8
 80047e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f2:	e013      	b.n	800481c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047f4:	f7ff f9bc 	bl	8003b70 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d90c      	bls.n	800481c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2203      	movs	r2, #3
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e015      	b.n	8004848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e4      	bne.n	80047f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	223f      	movs	r2, #63	; 0x3f
 8004830:	409a      	lsls	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d004      	beq.n	800486e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e00c      	b.n	8004888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2205      	movs	r2, #5
 8004872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048a0:	4b92      	ldr	r3, [pc, #584]	; (8004aec <HAL_DMA_IRQHandler+0x258>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a92      	ldr	r2, [pc, #584]	; (8004af0 <HAL_DMA_IRQHandler+0x25c>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	2208      	movs	r2, #8
 80048c0:	409a      	lsls	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01a      	beq.n	8004900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0204 	bic.w	r2, r2, #4
 80048e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	2208      	movs	r2, #8
 80048ee:	409a      	lsls	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f043 0201 	orr.w	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	2201      	movs	r2, #1
 8004906:	409a      	lsls	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	2201      	movs	r2, #1
 8004924:	409a      	lsls	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f043 0202 	orr.w	r2, r3, #2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	2204      	movs	r2, #4
 800493c:	409a      	lsls	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d012      	beq.n	800496c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	2204      	movs	r2, #4
 800495a:	409a      	lsls	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f043 0204 	orr.w	r2, r3, #4
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004970:	2210      	movs	r2, #16
 8004972:	409a      	lsls	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d043      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d03c      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	2210      	movs	r2, #16
 8004990:	409a      	lsls	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d018      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d108      	bne.n	80049c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d024      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
 80049c2:	e01f      	b.n	8004a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01b      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
 80049d4:	e016      	b.n	8004a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d107      	bne.n	80049f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0208 	bic.w	r2, r2, #8
 80049f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	2220      	movs	r2, #32
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 808e 	beq.w	8004b32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8086 	beq.w	8004b32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d136      	bne.n	8004aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0216 	bic.w	r2, r2, #22
 8004a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_DMA_IRQHandler+0x1da>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0208 	bic.w	r2, r2, #8
 8004a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	223f      	movs	r2, #63	; 0x3f
 8004a84:	409a      	lsls	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d07d      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
        }
        return;
 8004aaa:	e078      	b.n	8004b9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01c      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d030      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
 8004ad8:	e02b      	b.n	8004b32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d027      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
 8004aea:	e022      	b.n	8004b32 <HAL_DMA_IRQHandler+0x29e>
 8004aec:	20000004 	.word	0x20000004
 8004af0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0210 	bic.w	r2, r2, #16
 8004b10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d032      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d022      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2205      	movs	r2, #5
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d307      	bcc.n	8004b7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f2      	bne.n	8004b5e <HAL_DMA_IRQHandler+0x2ca>
 8004b78:	e000      	b.n	8004b7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004b7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
 8004b9c:	e000      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b9e:	bf00      	nop
    }
  }
}
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop

08004ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d108      	bne.n	8004be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004be6:	e007      	b.n	8004bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3b10      	subs	r3, #16
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <DMA_CalcBaseAndBitshift+0x64>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <DMA_CalcBaseAndBitshift+0x68>)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d909      	bls.n	8004c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	659a      	str	r2, [r3, #88]	; 0x58
 8004c44:	e007      	b.n	8004c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	aaaaaaab 	.word	0xaaaaaaab
 8004c6c:	0801603c 	.word	0x0801603c

08004c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d11f      	bne.n	8004cca <DMA_CheckFifoParam+0x5a>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d856      	bhi.n	8004d3e <DMA_CheckFifoParam+0xce>
 8004c90:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <DMA_CheckFifoParam+0x28>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004cbb 	.word	0x08004cbb
 8004ca0:	08004ca9 	.word	0x08004ca9
 8004ca4:	08004d3f 	.word	0x08004d3f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d046      	beq.n	8004d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb8:	e043      	b.n	8004d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cc2:	d140      	bne.n	8004d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc8:	e03d      	b.n	8004d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd2:	d121      	bne.n	8004d18 <DMA_CheckFifoParam+0xa8>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d837      	bhi.n	8004d4a <DMA_CheckFifoParam+0xda>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <DMA_CheckFifoParam+0x70>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cf7 	.word	0x08004cf7
 8004ce8:	08004cf1 	.word	0x08004cf1
 8004cec:	08004d09 	.word	0x08004d09
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf4:	e030      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d025      	beq.n	8004d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d06:	e022      	b.n	8004d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d10:	d11f      	bne.n	8004d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d16:	e01c      	b.n	8004d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d903      	bls.n	8004d26 <DMA_CheckFifoParam+0xb6>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d003      	beq.n	8004d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d24:	e018      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      break;
 8004d2a:	e015      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00e      	beq.n	8004d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e00b      	b.n	8004d56 <DMA_CheckFifoParam+0xe6>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e00a      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d42:	bf00      	nop
 8004d44:	e008      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d46:	bf00      	nop
 8004d48:	e006      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e004      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d56:	bf00      	nop
    }
  } 
  
  return status; 
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	e159      	b.n	8005038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d84:	2201      	movs	r2, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4013      	ands	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	f040 8148 	bne.w	8005032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d005      	beq.n	8004dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d130      	bne.n	8004e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df0:	2201      	movs	r2, #1
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 0201 	and.w	r2, r3, #1
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d017      	beq.n	8004e58 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d123      	bne.n	8004eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	08da      	lsrs	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3208      	adds	r2, #8
 8004e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4013      	ands	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	08da      	lsrs	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3208      	adds	r2, #8
 8004ea6:	69b9      	ldr	r1, [r7, #24]
 8004ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0203 	and.w	r2, r3, #3
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80a2 	beq.w	8005032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	4b57      	ldr	r3, [pc, #348]	; (8005050 <HAL_GPIO_Init+0x2e8>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	4a56      	ldr	r2, [pc, #344]	; (8005050 <HAL_GPIO_Init+0x2e8>)
 8004ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004efc:	6453      	str	r3, [r2, #68]	; 0x44
 8004efe:	4b54      	ldr	r3, [pc, #336]	; (8005050 <HAL_GPIO_Init+0x2e8>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f0a:	4a52      	ldr	r2, [pc, #328]	; (8005054 <HAL_GPIO_Init+0x2ec>)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	089b      	lsrs	r3, r3, #2
 8004f10:	3302      	adds	r3, #2
 8004f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	220f      	movs	r2, #15
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a49      	ldr	r2, [pc, #292]	; (8005058 <HAL_GPIO_Init+0x2f0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d019      	beq.n	8004f6a <HAL_GPIO_Init+0x202>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a48      	ldr	r2, [pc, #288]	; (800505c <HAL_GPIO_Init+0x2f4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_GPIO_Init+0x1fe>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a47      	ldr	r2, [pc, #284]	; (8005060 <HAL_GPIO_Init+0x2f8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00d      	beq.n	8004f62 <HAL_GPIO_Init+0x1fa>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a46      	ldr	r2, [pc, #280]	; (8005064 <HAL_GPIO_Init+0x2fc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <HAL_GPIO_Init+0x1f6>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a45      	ldr	r2, [pc, #276]	; (8005068 <HAL_GPIO_Init+0x300>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <HAL_GPIO_Init+0x1f2>
 8004f56:	2304      	movs	r3, #4
 8004f58:	e008      	b.n	8004f6c <HAL_GPIO_Init+0x204>
 8004f5a:	2307      	movs	r3, #7
 8004f5c:	e006      	b.n	8004f6c <HAL_GPIO_Init+0x204>
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e004      	b.n	8004f6c <HAL_GPIO_Init+0x204>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e002      	b.n	8004f6c <HAL_GPIO_Init+0x204>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <HAL_GPIO_Init+0x204>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	f002 0203 	and.w	r2, r2, #3
 8004f72:	0092      	lsls	r2, r2, #2
 8004f74:	4093      	lsls	r3, r2
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f7c:	4935      	ldr	r1, [pc, #212]	; (8005054 <HAL_GPIO_Init+0x2ec>)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	089b      	lsrs	r3, r3, #2
 8004f82:	3302      	adds	r3, #2
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f8a:	4b38      	ldr	r3, [pc, #224]	; (800506c <HAL_GPIO_Init+0x304>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fae:	4a2f      	ldr	r2, [pc, #188]	; (800506c <HAL_GPIO_Init+0x304>)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fb4:	4b2d      	ldr	r3, [pc, #180]	; (800506c <HAL_GPIO_Init+0x304>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fd8:	4a24      	ldr	r2, [pc, #144]	; (800506c <HAL_GPIO_Init+0x304>)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fde:	4b23      	ldr	r3, [pc, #140]	; (800506c <HAL_GPIO_Init+0x304>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005002:	4a1a      	ldr	r2, [pc, #104]	; (800506c <HAL_GPIO_Init+0x304>)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005008:	4b18      	ldr	r3, [pc, #96]	; (800506c <HAL_GPIO_Init+0x304>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800502c:	4a0f      	ldr	r2, [pc, #60]	; (800506c <HAL_GPIO_Init+0x304>)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	3301      	adds	r3, #1
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b0f      	cmp	r3, #15
 800503c:	f67f aea2 	bls.w	8004d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
 8005054:	40013800 	.word	0x40013800
 8005058:	40020000 	.word	0x40020000
 800505c:	40020400 	.word	0x40020400
 8005060:	40020800 	.word	0x40020800
 8005064:	40020c00 	.word	0x40020c00
 8005068:	40021000 	.word	0x40021000
 800506c:	40013c00 	.word	0x40013c00

08005070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	887b      	ldrh	r3, [r7, #2]
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
 800508c:	e001      	b.n	8005092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	807b      	strh	r3, [r7, #2]
 80050ac:	4613      	mov	r3, r2
 80050ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050b0:	787b      	ldrb	r3, [r7, #1]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050bc:	e003      	b.n	80050c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050be:	887b      	ldrh	r3, [r7, #2]
 80050c0:	041a      	lsls	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	619a      	str	r2, [r3, #24]
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e12b      	b.n	800533e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fe fa22 	bl	8003544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2224      	movs	r2, #36	; 0x24
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005138:	f001 fbd8 	bl	80068ec <HAL_RCC_GetPCLK1Freq>
 800513c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4a81      	ldr	r2, [pc, #516]	; (8005348 <HAL_I2C_Init+0x274>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d807      	bhi.n	8005158 <HAL_I2C_Init+0x84>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a80      	ldr	r2, [pc, #512]	; (800534c <HAL_I2C_Init+0x278>)
 800514c:	4293      	cmp	r3, r2
 800514e:	bf94      	ite	ls
 8005150:	2301      	movls	r3, #1
 8005152:	2300      	movhi	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e006      	b.n	8005166 <HAL_I2C_Init+0x92>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a7d      	ldr	r2, [pc, #500]	; (8005350 <HAL_I2C_Init+0x27c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	bf94      	ite	ls
 8005160:	2301      	movls	r3, #1
 8005162:	2300      	movhi	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0e7      	b.n	800533e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a78      	ldr	r2, [pc, #480]	; (8005354 <HAL_I2C_Init+0x280>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	0c9b      	lsrs	r3, r3, #18
 8005178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4a6a      	ldr	r2, [pc, #424]	; (8005348 <HAL_I2C_Init+0x274>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d802      	bhi.n	80051a8 <HAL_I2C_Init+0xd4>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	3301      	adds	r3, #1
 80051a6:	e009      	b.n	80051bc <HAL_I2C_Init+0xe8>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051ae:	fb02 f303 	mul.w	r3, r2, r3
 80051b2:	4a69      	ldr	r2, [pc, #420]	; (8005358 <HAL_I2C_Init+0x284>)
 80051b4:	fba2 2303 	umull	r2, r3, r2, r3
 80051b8:	099b      	lsrs	r3, r3, #6
 80051ba:	3301      	adds	r3, #1
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	495c      	ldr	r1, [pc, #368]	; (8005348 <HAL_I2C_Init+0x274>)
 80051d8:	428b      	cmp	r3, r1
 80051da:	d819      	bhi.n	8005210 <HAL_I2C_Init+0x13c>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1e59      	subs	r1, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051f0:	400b      	ands	r3, r1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_I2C_Init+0x138>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1e59      	subs	r1, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	fbb1 f3f3 	udiv	r3, r1, r3
 8005204:	3301      	adds	r3, #1
 8005206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520a:	e051      	b.n	80052b0 <HAL_I2C_Init+0x1dc>
 800520c:	2304      	movs	r3, #4
 800520e:	e04f      	b.n	80052b0 <HAL_I2C_Init+0x1dc>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d111      	bne.n	800523c <HAL_I2C_Init+0x168>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1e58      	subs	r0, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	440b      	add	r3, r1
 8005226:	fbb0 f3f3 	udiv	r3, r0, r3
 800522a:	3301      	adds	r3, #1
 800522c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005230:	2b00      	cmp	r3, #0
 8005232:	bf0c      	ite	eq
 8005234:	2301      	moveq	r3, #1
 8005236:	2300      	movne	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e012      	b.n	8005262 <HAL_I2C_Init+0x18e>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1e58      	subs	r0, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6859      	ldr	r1, [r3, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	0099      	lsls	r1, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005252:	3301      	adds	r3, #1
 8005254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Init+0x196>
 8005266:	2301      	movs	r3, #1
 8005268:	e022      	b.n	80052b0 <HAL_I2C_Init+0x1dc>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10e      	bne.n	8005290 <HAL_I2C_Init+0x1bc>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1e58      	subs	r0, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	440b      	add	r3, r1
 8005280:	fbb0 f3f3 	udiv	r3, r0, r3
 8005284:	3301      	adds	r3, #1
 8005286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528e:	e00f      	b.n	80052b0 <HAL_I2C_Init+0x1dc>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1e58      	subs	r0, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	0099      	lsls	r1, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a6:	3301      	adds	r3, #1
 80052a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	6809      	ldr	r1, [r1, #0]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6911      	ldr	r1, [r2, #16]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68d2      	ldr	r2, [r2, #12]
 80052ea:	4311      	orrs	r1, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	000186a0 	.word	0x000186a0
 800534c:	001e847f 	.word	0x001e847f
 8005350:	003d08ff 	.word	0x003d08ff
 8005354:	431bde83 	.word	0x431bde83
 8005358:	10624dd3 	.word	0x10624dd3

0800535c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	4608      	mov	r0, r1
 8005366:	4611      	mov	r1, r2
 8005368:	461a      	mov	r2, r3
 800536a:	4603      	mov	r3, r0
 800536c:	817b      	strh	r3, [r7, #10]
 800536e:	460b      	mov	r3, r1
 8005370:	813b      	strh	r3, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005376:	f7fe fbfb 	bl	8003b70 <HAL_GetTick>
 800537a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b20      	cmp	r3, #32
 8005386:	f040 80d9 	bne.w	800553c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	2319      	movs	r3, #25
 8005390:	2201      	movs	r2, #1
 8005392:	496d      	ldr	r1, [pc, #436]	; (8005548 <HAL_I2C_Mem_Write+0x1ec>)
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fc7f 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
 80053a2:	e0cc      	b.n	800553e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_I2C_Mem_Write+0x56>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e0c5      	b.n	800553e <HAL_I2C_Mem_Write+0x1e2>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d007      	beq.n	80053d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2221      	movs	r2, #33	; 0x21
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2240      	movs	r2, #64	; 0x40
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a4d      	ldr	r2, [pc, #308]	; (800554c <HAL_I2C_Mem_Write+0x1f0>)
 8005418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800541a:	88f8      	ldrh	r0, [r7, #6]
 800541c:	893a      	ldrh	r2, [r7, #8]
 800541e:	8979      	ldrh	r1, [r7, #10]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	4603      	mov	r3, r0
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fab6 	bl	800599c <I2C_RequestMemoryWrite>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d052      	beq.n	80054dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e081      	b.n	800553e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fd00 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00d      	beq.n	8005466 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b04      	cmp	r3, #4
 8005450:	d107      	bne.n	8005462 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e06b      	b.n	800553e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	781a      	ldrb	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11b      	bne.n	80054dc <HAL_I2C_Mem_Write+0x180>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1aa      	bne.n	800543a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fcec 	bl	8005ec6 <I2C_WaitOnBTFFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00d      	beq.n	8005510 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d107      	bne.n	800550c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e016      	b.n	800553e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	00100002 	.word	0x00100002
 800554c:	ffff0000 	.word	0xffff0000

08005550 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	; 0x30
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	4608      	mov	r0, r1
 800555a:	4611      	mov	r1, r2
 800555c:	461a      	mov	r2, r3
 800555e:	4603      	mov	r3, r0
 8005560:	817b      	strh	r3, [r7, #10]
 8005562:	460b      	mov	r3, r1
 8005564:	813b      	strh	r3, [r7, #8]
 8005566:	4613      	mov	r3, r2
 8005568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800556a:	f7fe fb01 	bl	8003b70 <HAL_GetTick>
 800556e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b20      	cmp	r3, #32
 800557a:	f040 8208 	bne.w	800598e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	2319      	movs	r3, #25
 8005584:	2201      	movs	r2, #1
 8005586:	497b      	ldr	r1, [pc, #492]	; (8005774 <HAL_I2C_Mem_Read+0x224>)
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fb85 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
 8005596:	e1fb      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_I2C_Mem_Read+0x56>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e1f4      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d007      	beq.n	80055cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2222      	movs	r2, #34	; 0x22
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2240      	movs	r2, #64	; 0x40
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4a5b      	ldr	r2, [pc, #364]	; (8005778 <HAL_I2C_Mem_Read+0x228>)
 800560c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800560e:	88f8      	ldrh	r0, [r7, #6]
 8005610:	893a      	ldrh	r2, [r7, #8]
 8005612:	8979      	ldrh	r1, [r7, #10]
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	4603      	mov	r3, r0
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fa52 	bl	8005ac8 <I2C_RequestMemoryRead>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e1b0      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d113      	bne.n	800565e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005636:	2300      	movs	r3, #0
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e184      	b.n	8005968 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	2b01      	cmp	r3, #1
 8005664:	d11b      	bne.n	800569e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e164      	b.n	8005968 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d11b      	bne.n	80056de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	e144      	b.n	8005968 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056f4:	e138      	b.n	8005968 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	f200 80f1 	bhi.w	80058e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005704:	2b01      	cmp	r3, #1
 8005706:	d123      	bne.n	8005750 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fc1b 	bl	8005f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e139      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800574e:	e10b      	b.n	8005968 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	2b02      	cmp	r3, #2
 8005756:	d14e      	bne.n	80057f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	2200      	movs	r2, #0
 8005760:	4906      	ldr	r1, [pc, #24]	; (800577c <HAL_I2C_Mem_Read+0x22c>)
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fa98 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e10e      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
 8005772:	bf00      	nop
 8005774:	00100002 	.word	0x00100002
 8005778:	ffff0000 	.word	0xffff0000
 800577c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057f4:	e0b8      	b.n	8005968 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	2200      	movs	r2, #0
 80057fe:	4966      	ldr	r1, [pc, #408]	; (8005998 <HAL_I2C_Mem_Read+0x448>)
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fa49 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0bf      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2200      	movs	r2, #0
 800585a:	494f      	ldr	r1, [pc, #316]	; (8005998 <HAL_I2C_Mem_Read+0x448>)
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fa1b 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e091      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058e0:	e042      	b.n	8005968 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fb2e 	bl	8005f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e04c      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d118      	bne.n	8005968 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596c:	2b00      	cmp	r3, #0
 800596e:	f47f aec2 	bne.w	80056f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e000      	b.n	8005990 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	3728      	adds	r7, #40	; 0x28
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	00010004 	.word	0x00010004

0800599c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	4603      	mov	r3, r0
 80059ac:	817b      	strh	r3, [r7, #10]
 80059ae:	460b      	mov	r3, r1
 80059b0:	813b      	strh	r3, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f960 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ec:	d103      	bne.n	80059f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e05f      	b.n	8005aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059fa:	897b      	ldrh	r3, [r7, #10]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	492d      	ldr	r1, [pc, #180]	; (8005ac4 <I2C_RequestMemoryWrite+0x128>)
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f998 	bl	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e04c      	b.n	8005aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a38:	6a39      	ldr	r1, [r7, #32]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fa02 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d107      	bne.n	8005a5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e02b      	b.n	8005aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d105      	bne.n	8005a74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a68:	893b      	ldrh	r3, [r7, #8]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	611a      	str	r2, [r3, #16]
 8005a72:	e021      	b.n	8005ab8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a74:	893b      	ldrh	r3, [r7, #8]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a84:	6a39      	ldr	r1, [r7, #32]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f9dc 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00d      	beq.n	8005aae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d107      	bne.n	8005aaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e005      	b.n	8005aba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aae:	893b      	ldrh	r3, [r7, #8]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	00010002 	.word	0x00010002

08005ac8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	817b      	strh	r3, [r7, #10]
 8005ada:	460b      	mov	r3, r1
 8005adc:	813b      	strh	r3, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f8c2 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00d      	beq.n	8005b36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b28:	d103      	bne.n	8005b32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e0aa      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b36:	897b      	ldrh	r3, [r7, #10]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	6a3a      	ldr	r2, [r7, #32]
 8005b4a:	4952      	ldr	r1, [pc, #328]	; (8005c94 <I2C_RequestMemoryRead+0x1cc>)
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f8fa 	bl	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e097      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b74:	6a39      	ldr	r1, [r7, #32]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f964 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d107      	bne.n	8005b9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e076      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d105      	bne.n	8005bb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba4:	893b      	ldrh	r3, [r7, #8]
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	611a      	str	r2, [r3, #16]
 8005bae:	e021      	b.n	8005bf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bb0:	893b      	ldrh	r3, [r7, #8]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc0:	6a39      	ldr	r1, [r7, #32]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f93e 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00d      	beq.n	8005bea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d107      	bne.n	8005be6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e050      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bea:	893b      	ldrh	r3, [r7, #8]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf6:	6a39      	ldr	r1, [r7, #32]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f923 	bl	8005e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00d      	beq.n	8005c20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d107      	bne.n	8005c1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e035      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f82b 	bl	8005c98 <I2C_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00d      	beq.n	8005c64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c56:	d103      	bne.n	8005c60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e013      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c64:	897b      	ldrh	r3, [r7, #10]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	4906      	ldr	r1, [pc, #24]	; (8005c94 <I2C_RequestMemoryRead+0x1cc>)
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f863 	bl	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	00010002 	.word	0x00010002

08005c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ca8:	e025      	b.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d021      	beq.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fd ff5d 	bl	8003b70 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d116      	bne.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e023      	b.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d10d      	bne.n	8005d1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	43da      	mvns	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bf0c      	ite	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	2300      	movne	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	e00c      	b.n	8005d36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	43da      	mvns	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d0b6      	beq.n	8005caa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d54:	e051      	b.n	8005dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d64:	d123      	bne.n	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f043 0204 	orr.w	r2, r3, #4
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e046      	b.n	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d021      	beq.n	8005dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db6:	f7fd fedb 	bl	8003b70 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d116      	bne.n	8005dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e020      	b.n	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10c      	bne.n	8005e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e00b      	b.n	8005e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	43da      	mvns	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d18d      	bne.n	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e50:	e02d      	b.n	8005eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f8ce 	bl	8005ff4 <I2C_IsAcknowledgeFailed>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e02d      	b.n	8005ebe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d021      	beq.n	8005eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6a:	f7fd fe81 	bl	8003b70 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d302      	bcc.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d116      	bne.n	8005eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e007      	b.n	8005ebe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d1ca      	bne.n	8005e52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ed2:	e02d      	b.n	8005f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f88d 	bl	8005ff4 <I2C_IsAcknowledgeFailed>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e02d      	b.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d021      	beq.n	8005f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eec:	f7fd fe40 	bl	8003b70 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d302      	bcc.n	8005f02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d116      	bne.n	8005f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e007      	b.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d1ca      	bne.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f54:	e042      	b.n	8005fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d119      	bne.n	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0210 	mvn.w	r2, #16
 8005f6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e029      	b.n	8005fec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f98:	f7fd fdea 	bl	8003b70 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d302      	bcc.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d116      	bne.n	8005fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f043 0220 	orr.w	r2, r3, #32
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e007      	b.n	8005fec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b40      	cmp	r3, #64	; 0x40
 8005fe8:	d1b5      	bne.n	8005f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600a:	d11b      	bne.n	8006044 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006014:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	f043 0204 	orr.w	r2, r3, #4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
	...

08006054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e264      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d075      	beq.n	800615e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006072:	4ba3      	ldr	r3, [pc, #652]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 030c 	and.w	r3, r3, #12
 800607a:	2b04      	cmp	r3, #4
 800607c:	d00c      	beq.n	8006098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800607e:	4ba0      	ldr	r3, [pc, #640]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006086:	2b08      	cmp	r3, #8
 8006088:	d112      	bne.n	80060b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800608a:	4b9d      	ldr	r3, [pc, #628]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006096:	d10b      	bne.n	80060b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006098:	4b99      	ldr	r3, [pc, #612]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d05b      	beq.n	800615c <HAL_RCC_OscConfig+0x108>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d157      	bne.n	800615c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e23f      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b8:	d106      	bne.n	80060c8 <HAL_RCC_OscConfig+0x74>
 80060ba:	4b91      	ldr	r3, [pc, #580]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a90      	ldr	r2, [pc, #576]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	e01d      	b.n	8006104 <HAL_RCC_OscConfig+0xb0>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060d0:	d10c      	bne.n	80060ec <HAL_RCC_OscConfig+0x98>
 80060d2:	4b8b      	ldr	r3, [pc, #556]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a8a      	ldr	r2, [pc, #552]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	4b88      	ldr	r3, [pc, #544]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a87      	ldr	r2, [pc, #540]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	e00b      	b.n	8006104 <HAL_RCC_OscConfig+0xb0>
 80060ec:	4b84      	ldr	r3, [pc, #528]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a83      	ldr	r2, [pc, #524]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	4b81      	ldr	r3, [pc, #516]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a80      	ldr	r2, [pc, #512]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80060fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d013      	beq.n	8006134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610c:	f7fd fd30 	bl	8003b70 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006114:	f7fd fd2c 	bl	8003b70 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b64      	cmp	r3, #100	; 0x64
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e204      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006126:	4b76      	ldr	r3, [pc, #472]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f0      	beq.n	8006114 <HAL_RCC_OscConfig+0xc0>
 8006132:	e014      	b.n	800615e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006134:	f7fd fd1c 	bl	8003b70 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800613c:	f7fd fd18 	bl	8003b70 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b64      	cmp	r3, #100	; 0x64
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e1f0      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800614e:	4b6c      	ldr	r3, [pc, #432]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <HAL_RCC_OscConfig+0xe8>
 800615a:	e000      	b.n	800615e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800615c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d063      	beq.n	8006232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800616a:	4b65      	ldr	r3, [pc, #404]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 030c 	and.w	r3, r3, #12
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006176:	4b62      	ldr	r3, [pc, #392]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800617e:	2b08      	cmp	r3, #8
 8006180:	d11c      	bne.n	80061bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006182:	4b5f      	ldr	r3, [pc, #380]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d116      	bne.n	80061bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800618e:	4b5c      	ldr	r3, [pc, #368]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_RCC_OscConfig+0x152>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d001      	beq.n	80061a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e1c4      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a6:	4b56      	ldr	r3, [pc, #344]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4952      	ldr	r1, [pc, #328]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ba:	e03a      	b.n	8006232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d020      	beq.n	8006206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061c4:	4b4f      	ldr	r3, [pc, #316]	; (8006304 <HAL_RCC_OscConfig+0x2b0>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ca:	f7fd fcd1 	bl	8003b70 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061d2:	f7fd fccd 	bl	8003b70 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e1a5      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e4:	4b46      	ldr	r3, [pc, #280]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f0:	4b43      	ldr	r3, [pc, #268]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4940      	ldr	r1, [pc, #256]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006200:	4313      	orrs	r3, r2
 8006202:	600b      	str	r3, [r1, #0]
 8006204:	e015      	b.n	8006232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006206:	4b3f      	ldr	r3, [pc, #252]	; (8006304 <HAL_RCC_OscConfig+0x2b0>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620c:	f7fd fcb0 	bl	8003b70 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006214:	f7fd fcac 	bl	8003b70 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e184      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006226:	4b36      	ldr	r3, [pc, #216]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f0      	bne.n	8006214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d030      	beq.n	80062a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d016      	beq.n	8006274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006246:	4b30      	ldr	r3, [pc, #192]	; (8006308 <HAL_RCC_OscConfig+0x2b4>)
 8006248:	2201      	movs	r2, #1
 800624a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624c:	f7fd fc90 	bl	8003b70 <HAL_GetTick>
 8006250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006252:	e008      	b.n	8006266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006254:	f7fd fc8c 	bl	8003b70 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b02      	cmp	r3, #2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e164      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006266:	4b26      	ldr	r3, [pc, #152]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f0      	beq.n	8006254 <HAL_RCC_OscConfig+0x200>
 8006272:	e015      	b.n	80062a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006274:	4b24      	ldr	r3, [pc, #144]	; (8006308 <HAL_RCC_OscConfig+0x2b4>)
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800627a:	f7fd fc79 	bl	8003b70 <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006282:	f7fd fc75 	bl	8003b70 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e14d      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 8006296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f0      	bne.n	8006282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 80a0 	beq.w	80063ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10f      	bne.n	80062de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]
 80062c2:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	4a0e      	ldr	r2, [pc, #56]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80062c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062cc:	6413      	str	r3, [r2, #64]	; 0x40
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <HAL_RCC_OscConfig+0x2ac>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d6:	60bb      	str	r3, [r7, #8]
 80062d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062da:	2301      	movs	r3, #1
 80062dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <HAL_RCC_OscConfig+0x2b8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d121      	bne.n	800632e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ea:	4b08      	ldr	r3, [pc, #32]	; (800630c <HAL_RCC_OscConfig+0x2b8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a07      	ldr	r2, [pc, #28]	; (800630c <HAL_RCC_OscConfig+0x2b8>)
 80062f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062f6:	f7fd fc3b 	bl	8003b70 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062fc:	e011      	b.n	8006322 <HAL_RCC_OscConfig+0x2ce>
 80062fe:	bf00      	nop
 8006300:	40023800 	.word	0x40023800
 8006304:	42470000 	.word	0x42470000
 8006308:	42470e80 	.word	0x42470e80
 800630c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006310:	f7fd fc2e 	bl	8003b70 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e106      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006322:	4b85      	ldr	r3, [pc, #532]	; (8006538 <HAL_RCC_OscConfig+0x4e4>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d106      	bne.n	8006344 <HAL_RCC_OscConfig+0x2f0>
 8006336:	4b81      	ldr	r3, [pc, #516]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633a:	4a80      	ldr	r2, [pc, #512]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 800633c:	f043 0301 	orr.w	r3, r3, #1
 8006340:	6713      	str	r3, [r2, #112]	; 0x70
 8006342:	e01c      	b.n	800637e <HAL_RCC_OscConfig+0x32a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b05      	cmp	r3, #5
 800634a:	d10c      	bne.n	8006366 <HAL_RCC_OscConfig+0x312>
 800634c:	4b7b      	ldr	r3, [pc, #492]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	4a7a      	ldr	r2, [pc, #488]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 8006352:	f043 0304 	orr.w	r3, r3, #4
 8006356:	6713      	str	r3, [r2, #112]	; 0x70
 8006358:	4b78      	ldr	r3, [pc, #480]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	4a77      	ldr	r2, [pc, #476]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	6713      	str	r3, [r2, #112]	; 0x70
 8006364:	e00b      	b.n	800637e <HAL_RCC_OscConfig+0x32a>
 8006366:	4b75      	ldr	r3, [pc, #468]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	4a74      	ldr	r2, [pc, #464]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	6713      	str	r3, [r2, #112]	; 0x70
 8006372:	4b72      	ldr	r3, [pc, #456]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 8006374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006376:	4a71      	ldr	r2, [pc, #452]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 8006378:	f023 0304 	bic.w	r3, r3, #4
 800637c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d015      	beq.n	80063b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006386:	f7fd fbf3 	bl	8003b70 <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638c:	e00a      	b.n	80063a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800638e:	f7fd fbef 	bl	8003b70 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	f241 3288 	movw	r2, #5000	; 0x1388
 800639c:	4293      	cmp	r3, r2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e0c5      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a4:	4b65      	ldr	r3, [pc, #404]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ee      	beq.n	800638e <HAL_RCC_OscConfig+0x33a>
 80063b0:	e014      	b.n	80063dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b2:	f7fd fbdd 	bl	8003b70 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ba:	f7fd fbd9 	bl	8003b70 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0af      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063d0:	4b5a      	ldr	r3, [pc, #360]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1ee      	bne.n	80063ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d105      	bne.n	80063ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063e2:	4b56      	ldr	r3, [pc, #344]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	4a55      	ldr	r2, [pc, #340]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 80063e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 809b 	beq.w	800652e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063f8:	4b50      	ldr	r3, [pc, #320]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 030c 	and.w	r3, r3, #12
 8006400:	2b08      	cmp	r3, #8
 8006402:	d05c      	beq.n	80064be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d141      	bne.n	8006490 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640c:	4b4c      	ldr	r3, [pc, #304]	; (8006540 <HAL_RCC_OscConfig+0x4ec>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006412:	f7fd fbad 	bl	8003b70 <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800641a:	f7fd fba9 	bl	8003b70 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e081      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800642c:	4b43      	ldr	r3, [pc, #268]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f0      	bne.n	800641a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	019b      	lsls	r3, r3, #6
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	3b01      	subs	r3, #1
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	061b      	lsls	r3, r3, #24
 800645c:	4937      	ldr	r1, [pc, #220]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 800645e:	4313      	orrs	r3, r2
 8006460:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006462:	4b37      	ldr	r3, [pc, #220]	; (8006540 <HAL_RCC_OscConfig+0x4ec>)
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006468:	f7fd fb82 	bl	8003b70 <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006470:	f7fd fb7e 	bl	8003b70 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e056      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006482:	4b2e      	ldr	r3, [pc, #184]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCC_OscConfig+0x41c>
 800648e:	e04e      	b.n	800652e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006490:	4b2b      	ldr	r3, [pc, #172]	; (8006540 <HAL_RCC_OscConfig+0x4ec>)
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006496:	f7fd fb6b 	bl	8003b70 <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800649e:	f7fd fb67 	bl	8003b70 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e03f      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b0:	4b22      	ldr	r3, [pc, #136]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f0      	bne.n	800649e <HAL_RCC_OscConfig+0x44a>
 80064bc:	e037      	b.n	800652e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e032      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064ca:	4b1c      	ldr	r3, [pc, #112]	; (800653c <HAL_RCC_OscConfig+0x4e8>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d028      	beq.n	800652a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d121      	bne.n	800652a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d11a      	bne.n	800652a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064fa:	4013      	ands	r3, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006500:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006502:	4293      	cmp	r3, r2
 8006504:	d111      	bne.n	800652a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	3b01      	subs	r3, #1
 8006514:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d107      	bne.n	800652a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d001      	beq.n	800652e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40007000 	.word	0x40007000
 800653c:	40023800 	.word	0x40023800
 8006540:	42470060 	.word	0x42470060

08006544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0cc      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006558:	4b68      	ldr	r3, [pc, #416]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d90c      	bls.n	8006580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006566:	4b65      	ldr	r3, [pc, #404]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	4b63      	ldr	r3, [pc, #396]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0b8      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d020      	beq.n	80065ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006598:	4b59      	ldr	r3, [pc, #356]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4a58      	ldr	r2, [pc, #352]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065b0:	4b53      	ldr	r3, [pc, #332]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	4a52      	ldr	r2, [pc, #328]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065bc:	4b50      	ldr	r3, [pc, #320]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	494d      	ldr	r1, [pc, #308]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d044      	beq.n	8006664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d107      	bne.n	80065f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d119      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e07f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d003      	beq.n	8006602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d107      	bne.n	8006612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006602:	4b3f      	ldr	r3, [pc, #252]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e06f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006612:	4b3b      	ldr	r3, [pc, #236]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e067      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006622:	4b37      	ldr	r3, [pc, #220]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 0203 	bic.w	r2, r3, #3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4934      	ldr	r1, [pc, #208]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	4313      	orrs	r3, r2
 8006632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006634:	f7fd fa9c 	bl	8003b70 <HAL_GetTick>
 8006638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663a:	e00a      	b.n	8006652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800663c:	f7fd fa98 	bl	8003b70 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	; 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e04f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006652:	4b2b      	ldr	r3, [pc, #172]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 020c 	and.w	r2, r3, #12
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	429a      	cmp	r2, r3
 8006662:	d1eb      	bne.n	800663c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006664:	4b25      	ldr	r3, [pc, #148]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d20c      	bcs.n	800668c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667a:	4b20      	ldr	r3, [pc, #128]	; (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d001      	beq.n	800668c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e032      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006698:	4b19      	ldr	r3, [pc, #100]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	4916      	ldr	r1, [pc, #88]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066b6:	4b12      	ldr	r3, [pc, #72]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	490e      	ldr	r1, [pc, #56]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066ca:	f000 f821 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 80066ce:	4602      	mov	r2, r0
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	490a      	ldr	r1, [pc, #40]	; (8006704 <HAL_RCC_ClockConfig+0x1c0>)
 80066dc:	5ccb      	ldrb	r3, [r1, r3]
 80066de:	fa22 f303 	lsr.w	r3, r2, r3
 80066e2:	4a09      	ldr	r2, [pc, #36]	; (8006708 <HAL_RCC_ClockConfig+0x1c4>)
 80066e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066e6:	4b09      	ldr	r3, [pc, #36]	; (800670c <HAL_RCC_ClockConfig+0x1c8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd f872 	bl	80037d4 <HAL_InitTick>

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40023c00 	.word	0x40023c00
 8006700:	40023800 	.word	0x40023800
 8006704:	08016024 	.word	0x08016024
 8006708:	20000004 	.word	0x20000004
 800670c:	20000008 	.word	0x20000008

08006710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	607b      	str	r3, [r7, #4]
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	2300      	movs	r3, #0
 8006722:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006728:	4b67      	ldr	r3, [pc, #412]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 030c 	and.w	r3, r3, #12
 8006730:	2b08      	cmp	r3, #8
 8006732:	d00d      	beq.n	8006750 <HAL_RCC_GetSysClockFreq+0x40>
 8006734:	2b08      	cmp	r3, #8
 8006736:	f200 80bd 	bhi.w	80068b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_RCC_GetSysClockFreq+0x34>
 800673e:	2b04      	cmp	r3, #4
 8006740:	d003      	beq.n	800674a <HAL_RCC_GetSysClockFreq+0x3a>
 8006742:	e0b7      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006744:	4b61      	ldr	r3, [pc, #388]	; (80068cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006746:	60bb      	str	r3, [r7, #8]
       break;
 8006748:	e0b7      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800674a:	4b61      	ldr	r3, [pc, #388]	; (80068d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800674c:	60bb      	str	r3, [r7, #8]
      break;
 800674e:	e0b4      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006750:	4b5d      	ldr	r3, [pc, #372]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006758:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800675a:	4b5b      	ldr	r3, [pc, #364]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d04d      	beq.n	8006802 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006766:	4b58      	ldr	r3, [pc, #352]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	099b      	lsrs	r3, r3, #6
 800676c:	461a      	mov	r2, r3
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006776:	f04f 0100 	mov.w	r1, #0
 800677a:	ea02 0800 	and.w	r8, r2, r0
 800677e:	ea03 0901 	and.w	r9, r3, r1
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	014b      	lsls	r3, r1, #5
 8006790:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006794:	0142      	lsls	r2, r0, #5
 8006796:	4610      	mov	r0, r2
 8006798:	4619      	mov	r1, r3
 800679a:	ebb0 0008 	subs.w	r0, r0, r8
 800679e:	eb61 0109 	sbc.w	r1, r1, r9
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	018b      	lsls	r3, r1, #6
 80067ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067b0:	0182      	lsls	r2, r0, #6
 80067b2:	1a12      	subs	r2, r2, r0
 80067b4:	eb63 0301 	sbc.w	r3, r3, r1
 80067b8:	f04f 0000 	mov.w	r0, #0
 80067bc:	f04f 0100 	mov.w	r1, #0
 80067c0:	00d9      	lsls	r1, r3, #3
 80067c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067c6:	00d0      	lsls	r0, r2, #3
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	eb12 0208 	adds.w	r2, r2, r8
 80067d0:	eb43 0309 	adc.w	r3, r3, r9
 80067d4:	f04f 0000 	mov.w	r0, #0
 80067d8:	f04f 0100 	mov.w	r1, #0
 80067dc:	0259      	lsls	r1, r3, #9
 80067de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80067e2:	0250      	lsls	r0, r2, #9
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4610      	mov	r0, r2
 80067ea:	4619      	mov	r1, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	f7fa fa50 	bl	8000c98 <__aeabi_uldivmod>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4613      	mov	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	e04a      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006802:	4b31      	ldr	r3, [pc, #196]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	461a      	mov	r2, r3
 800680a:	f04f 0300 	mov.w	r3, #0
 800680e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	ea02 0400 	and.w	r4, r2, r0
 800681a:	ea03 0501 	and.w	r5, r3, r1
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	014b      	lsls	r3, r1, #5
 800682c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006830:	0142      	lsls	r2, r0, #5
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	1b00      	subs	r0, r0, r4
 8006838:	eb61 0105 	sbc.w	r1, r1, r5
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	018b      	lsls	r3, r1, #6
 8006846:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800684a:	0182      	lsls	r2, r0, #6
 800684c:	1a12      	subs	r2, r2, r0
 800684e:	eb63 0301 	sbc.w	r3, r3, r1
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f04f 0100 	mov.w	r1, #0
 800685a:	00d9      	lsls	r1, r3, #3
 800685c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006860:	00d0      	lsls	r0, r2, #3
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	1912      	adds	r2, r2, r4
 8006868:	eb45 0303 	adc.w	r3, r5, r3
 800686c:	f04f 0000 	mov.w	r0, #0
 8006870:	f04f 0100 	mov.w	r1, #0
 8006874:	0299      	lsls	r1, r3, #10
 8006876:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800687a:	0290      	lsls	r0, r2, #10
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4610      	mov	r0, r2
 8006882:	4619      	mov	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	461a      	mov	r2, r3
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	f7fa fa04 	bl	8000c98 <__aeabi_uldivmod>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4613      	mov	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	0c1b      	lsrs	r3, r3, #16
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	3301      	adds	r3, #1
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	60bb      	str	r3, [r7, #8]
      break;
 80068b2:	e002      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068b6:	60bb      	str	r3, [r7, #8]
      break;
 80068b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ba:	68bb      	ldr	r3, [r7, #8]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800
 80068cc:	00f42400 	.word	0x00f42400
 80068d0:	007a1200 	.word	0x007a1200

080068d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068d8:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80068da:	681b      	ldr	r3, [r3, #0]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000004 	.word	0x20000004

080068ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068f0:	f7ff fff0 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 80068f4:	4602      	mov	r2, r0
 80068f6:	4b05      	ldr	r3, [pc, #20]	; (800690c <HAL_RCC_GetPCLK1Freq+0x20>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	0a9b      	lsrs	r3, r3, #10
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	4903      	ldr	r1, [pc, #12]	; (8006910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006902:	5ccb      	ldrb	r3, [r1, r3]
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006908:	4618      	mov	r0, r3
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40023800 	.word	0x40023800
 8006910:	08016034 	.word	0x08016034

08006914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006918:	f7ff ffdc 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 800691c:	4602      	mov	r2, r0
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	0b5b      	lsrs	r3, r3, #13
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	4903      	ldr	r1, [pc, #12]	; (8006938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800692a:	5ccb      	ldrb	r3, [r1, r3]
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40023800 	.word	0x40023800
 8006938:	08016034 	.word	0x08016034

0800693c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	220f      	movs	r2, #15
 800694a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <HAL_RCC_GetClockConfig+0x5c>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 0203 	and.w	r2, r3, #3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <HAL_RCC_GetClockConfig+0x5c>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <HAL_RCC_GetClockConfig+0x5c>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006970:	4b09      	ldr	r3, [pc, #36]	; (8006998 <HAL_RCC_GetClockConfig+0x5c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	08db      	lsrs	r3, r3, #3
 8006976:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800697e:	4b07      	ldr	r3, [pc, #28]	; (800699c <HAL_RCC_GetClockConfig+0x60>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0207 	and.w	r2, r3, #7
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	601a      	str	r2, [r3, #0]
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40023800 	.word	0x40023800
 800699c:	40023c00 	.word	0x40023c00

080069a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e07b      	b.n	8006aaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d108      	bne.n	80069cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c2:	d009      	beq.n	80069d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	61da      	str	r2, [r3, #28]
 80069ca:	e005      	b.n	80069d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fc fdee 	bl	80035d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5c:	ea42 0103 	orr.w	r1, r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	f003 0104 	and.w	r1, r3, #4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f003 0210 	and.w	r2, r3, #16
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b088      	sub	sp, #32
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_SPI_Transmit+0x22>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e126      	b.n	8006d22 <HAL_SPI_Transmit+0x270>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006adc:	f7fd f848 	bl	8003b70 <HAL_GetTick>
 8006ae0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d002      	beq.n	8006af8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
 8006af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006af6:	e10b      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_Transmit+0x52>
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b08:	e102      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	88fa      	ldrh	r2, [r7, #6]
 8006b28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b50:	d10f      	bne.n	8006b72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d007      	beq.n	8006b90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b98:	d14b      	bne.n	8006c32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SPI_Transmit+0xf6>
 8006ba2:	8afb      	ldrh	r3, [r7, #22]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d13e      	bne.n	8006c26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	881a      	ldrh	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	1c9a      	adds	r2, r3, #2
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bcc:	e02b      	b.n	8006c26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d112      	bne.n	8006c02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	881a      	ldrh	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	1c9a      	adds	r2, r3, #2
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c00:	e011      	b.n	8006c26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c02:	f7fc ffb5 	bl	8003b70 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d803      	bhi.n	8006c1a <HAL_SPI_Transmit+0x168>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d102      	bne.n	8006c20 <HAL_SPI_Transmit+0x16e>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c24:	e074      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ce      	bne.n	8006bce <HAL_SPI_Transmit+0x11c>
 8006c30:	e04c      	b.n	8006ccc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <HAL_SPI_Transmit+0x18e>
 8006c3a:	8afb      	ldrh	r3, [r7, #22]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d140      	bne.n	8006cc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	7812      	ldrb	r2, [r2, #0]
 8006c4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c66:	e02c      	b.n	8006cc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d113      	bne.n	8006c9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	7812      	ldrb	r2, [r2, #0]
 8006c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c9c:	e011      	b.n	8006cc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c9e:	f7fc ff67 	bl	8003b70 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d803      	bhi.n	8006cb6 <HAL_SPI_Transmit+0x204>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb4:	d102      	bne.n	8006cbc <HAL_SPI_Transmit+0x20a>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cc0:	e026      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1cd      	bne.n	8006c68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fbcb 	bl	800746c <SPI_EndRxTxTransaction>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cea:	2300      	movs	r3, #0
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e000      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af02      	add	r7, sp, #8
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d46:	d112      	bne.n	8006d6e <HAL_SPI_Receive+0x44>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10e      	bne.n	8006d6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2204      	movs	r2, #4
 8006d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006d58:	88fa      	ldrh	r2, [r7, #6]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f8f1 	bl	8006f4c <HAL_SPI_TransmitReceive>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	e0ea      	b.n	8006f44 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_SPI_Receive+0x52>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e0e3      	b.n	8006f44 <HAL_SPI_Receive+0x21a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d84:	f7fc fef4 	bl	8003b70 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d002      	beq.n	8006d9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
 8006d98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d9a:	e0ca      	b.n	8006f32 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_SPI_Receive+0x7e>
 8006da2:	88fb      	ldrh	r3, [r7, #6]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d102      	bne.n	8006dae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006dac:	e0c1      	b.n	8006f32 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2204      	movs	r2, #4
 8006db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df4:	d10f      	bne.n	8006e16 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	d007      	beq.n	8006e34 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d162      	bne.n	8006f02 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e3c:	e02e      	b.n	8006e9c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d115      	bne.n	8006e78 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f103 020c 	add.w	r2, r3, #12
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e76:	e011      	b.n	8006e9c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e78:	f7fc fe7a 	bl	8003b70 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d803      	bhi.n	8006e90 <HAL_SPI_Receive+0x166>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	d102      	bne.n	8006e96 <HAL_SPI_Receive+0x16c>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e9a:	e04a      	b.n	8006f32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1cb      	bne.n	8006e3e <HAL_SPI_Receive+0x114>
 8006ea6:	e031      	b.n	8006f0c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d113      	bne.n	8006ede <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	b292      	uxth	r2, r2
 8006ec2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	1c9a      	adds	r2, r3, #2
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006edc:	e011      	b.n	8006f02 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ede:	f7fc fe47 	bl	8003b70 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d803      	bhi.n	8006ef6 <HAL_SPI_Receive+0x1cc>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d102      	bne.n	8006efc <HAL_SPI_Receive+0x1d2>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f00:	e017      	b.n	8006f32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1cd      	bne.n	8006ea8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 fa45 	bl	80073a0 <SPI_EndRxTransaction>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
 8006f2e:	e000      	b.n	8006f32 <HAL_SPI_Receive+0x208>
  }

error :
 8006f30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08c      	sub	sp, #48	; 0x30
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <HAL_SPI_TransmitReceive+0x26>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e18a      	b.n	8007288 <HAL_SPI_TransmitReceive+0x33c>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f7a:	f7fc fdf9 	bl	8003b70 <HAL_GetTick>
 8006f7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f90:	887b      	ldrh	r3, [r7, #2]
 8006f92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d00f      	beq.n	8006fbc <HAL_SPI_TransmitReceive+0x70>
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fa2:	d107      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <HAL_SPI_TransmitReceive+0x68>
 8006fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d003      	beq.n	8006fbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fba:	e15b      	b.n	8007274 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_SPI_TransmitReceive+0x82>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_SPI_TransmitReceive+0x82>
 8006fc8:	887b      	ldrh	r3, [r7, #2]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fd4:	e14e      	b.n	8007274 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d003      	beq.n	8006fea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2205      	movs	r2, #5
 8006fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	887a      	ldrh	r2, [r7, #2]
 8006ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	887a      	ldrh	r2, [r7, #2]
 8007000:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	887a      	ldrh	r2, [r7, #2]
 8007012:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702a:	2b40      	cmp	r3, #64	; 0x40
 800702c:	d007      	beq.n	800703e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800703c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007046:	d178      	bne.n	800713a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_SPI_TransmitReceive+0x10a>
 8007050:	8b7b      	ldrh	r3, [r7, #26]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d166      	bne.n	8007124 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	881a      	ldrh	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	1c9a      	adds	r2, r3, #2
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800707a:	e053      	b.n	8007124 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b02      	cmp	r3, #2
 8007088:	d11b      	bne.n	80070c2 <HAL_SPI_TransmitReceive+0x176>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d016      	beq.n	80070c2 <HAL_SPI_TransmitReceive+0x176>
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	2b01      	cmp	r3, #1
 8007098:	d113      	bne.n	80070c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	881a      	ldrh	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	1c9a      	adds	r2, r3, #2
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d119      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x1b8>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d014      	beq.n	8007104 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	b292      	uxth	r2, r2
 80070e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	1c9a      	adds	r2, r3, #2
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007100:	2301      	movs	r3, #1
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007104:	f7fc fd34 	bl	8003b70 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007110:	429a      	cmp	r2, r3
 8007112:	d807      	bhi.n	8007124 <HAL_SPI_TransmitReceive+0x1d8>
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	d003      	beq.n	8007124 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007122:	e0a7      	b.n	8007274 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1a6      	bne.n	800707c <HAL_SPI_TransmitReceive+0x130>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1a1      	bne.n	800707c <HAL_SPI_TransmitReceive+0x130>
 8007138:	e07c      	b.n	8007234 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_SPI_TransmitReceive+0x1fc>
 8007142:	8b7b      	ldrh	r3, [r7, #26]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d16b      	bne.n	8007220 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800716e:	e057      	b.n	8007220 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b02      	cmp	r3, #2
 800717c:	d11c      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x26c>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007182:	b29b      	uxth	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d017      	beq.n	80071b8 <HAL_SPI_TransmitReceive+0x26c>
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	2b01      	cmp	r3, #1
 800718c:	d114      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	7812      	ldrb	r2, [r2, #0]
 800719a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d119      	bne.n	80071fa <HAL_SPI_TransmitReceive+0x2ae>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d014      	beq.n	80071fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071f6:	2301      	movs	r3, #1
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071fa:	f7fc fcb9 	bl	8003b70 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007206:	429a      	cmp	r2, r3
 8007208:	d803      	bhi.n	8007212 <HAL_SPI_TransmitReceive+0x2c6>
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d102      	bne.n	8007218 <HAL_SPI_TransmitReceive+0x2cc>
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	2b00      	cmp	r3, #0
 8007216:	d103      	bne.n	8007220 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800721e:	e029      	b.n	8007274 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1a2      	bne.n	8007170 <HAL_SPI_TransmitReceive+0x224>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d19d      	bne.n	8007170 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f917 	bl	800746c <SPI_EndRxTxTransaction>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d006      	beq.n	8007252 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007250:	e010      	b.n	8007274 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10b      	bne.n	8007272 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	e000      	b.n	8007274 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007272:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007284:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007288:	4618      	mov	r0, r3
 800728a:	3730      	adds	r7, #48	; 0x30
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072a0:	f7fc fc66 	bl	8003b70 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	4413      	add	r3, r2
 80072ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072b0:	f7fc fc5e 	bl	8003b70 <HAL_GetTick>
 80072b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072b6:	4b39      	ldr	r3, [pc, #228]	; (800739c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	015b      	lsls	r3, r3, #5
 80072bc:	0d1b      	lsrs	r3, r3, #20
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	fb02 f303 	mul.w	r3, r2, r3
 80072c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072c6:	e054      	b.n	8007372 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ce:	d050      	beq.n	8007372 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072d0:	f7fc fc4e 	bl	8003b70 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d902      	bls.n	80072e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d13d      	bne.n	8007362 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fe:	d111      	bne.n	8007324 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007308:	d004      	beq.n	8007314 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007312:	d107      	bne.n	8007324 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732c:	d10f      	bne.n	800734e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800734c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e017      	b.n	8007392 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	3b01      	subs	r3, #1
 8007370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4013      	ands	r3, r2
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	429a      	cmp	r2, r3
 8007380:	bf0c      	ite	eq
 8007382:	2301      	moveq	r3, #1
 8007384:	2300      	movne	r3, #0
 8007386:	b2db      	uxtb	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	429a      	cmp	r2, r3
 800738e:	d19b      	bne.n	80072c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000004 	.word	0x20000004

080073a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b4:	d111      	bne.n	80073da <SPI_EndRxTransaction+0x3a>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073be:	d004      	beq.n	80073ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c8:	d107      	bne.n	80073da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073e2:	d12a      	bne.n	800743a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ec:	d012      	beq.n	8007414 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2200      	movs	r2, #0
 80073f6:	2180      	movs	r1, #128	; 0x80
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7ff ff49 	bl	8007290 <SPI_WaitFlagStateUntilTimeout>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02d      	beq.n	8007460 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007408:	f043 0220 	orr.w	r2, r3, #32
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e026      	b.n	8007462 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	2101      	movs	r1, #1
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7ff ff36 	bl	8007290 <SPI_WaitFlagStateUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01a      	beq.n	8007460 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742e:	f043 0220 	orr.w	r2, r3, #32
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e013      	b.n	8007462 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2200      	movs	r2, #0
 8007442:	2101      	movs	r1, #1
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff ff23 	bl	8007290 <SPI_WaitFlagStateUntilTimeout>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d007      	beq.n	8007460 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007454:	f043 0220 	orr.w	r2, r3, #32
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e000      	b.n	8007462 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007478:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <SPI_EndRxTxTransaction+0x7c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1b      	ldr	r2, [pc, #108]	; (80074ec <SPI_EndRxTxTransaction+0x80>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	0d5b      	lsrs	r3, r3, #21
 8007484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007488:	fb02 f303 	mul.w	r3, r2, r3
 800748c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007496:	d112      	bne.n	80074be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2200      	movs	r2, #0
 80074a0:	2180      	movs	r1, #128	; 0x80
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff fef4 	bl	8007290 <SPI_WaitFlagStateUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b2:	f043 0220 	orr.w	r2, r3, #32
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e00f      	b.n	80074de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d0f2      	beq.n	80074be <SPI_EndRxTxTransaction+0x52>
 80074d8:	e000      	b.n	80074dc <SPI_EndRxTxTransaction+0x70>
        break;
 80074da:	bf00      	nop
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000004 	.word	0x20000004
 80074ec:	165e9f81 	.word	0x165e9f81

080074f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e041      	b.n	8007586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f839 	bl	800758e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f000 f9ca 	bl	80078c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d001      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e044      	b.n	8007646 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <HAL_TIM_Base_Start_IT+0xb0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d018      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e6:	d013      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <HAL_TIM_Base_Start_IT+0xb4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00e      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a19      	ldr	r2, [pc, #100]	; (800765c <HAL_TIM_Base_Start_IT+0xb8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a17      	ldr	r2, [pc, #92]	; (8007660 <HAL_TIM_Base_Start_IT+0xbc>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a16      	ldr	r2, [pc, #88]	; (8007664 <HAL_TIM_Base_Start_IT+0xc0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d111      	bne.n	8007634 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b06      	cmp	r3, #6
 8007620:	d010      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0201 	orr.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007632:	e007      	b.n	8007644 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0201 	orr.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40010000 	.word	0x40010000
 8007658:	40000400 	.word	0x40000400
 800765c:	40000800 	.word	0x40000800
 8007660:	40000c00 	.word	0x40000c00
 8007664:	40014000 	.word	0x40014000

08007668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b02      	cmp	r3, #2
 800767c:	d122      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b02      	cmp	r3, #2
 800768a:	d11b      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0202 	mvn.w	r2, #2
 8007694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f8ee 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 80076b0:	e005      	b.n	80076be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f8e0 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f8f1 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d122      	bne.n	8007718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d11b      	bne.n	8007718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0204 	mvn.w	r2, #4
 80076e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8c4 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 8007704:	e005      	b.n	8007712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f8b6 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f8c7 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b08      	cmp	r3, #8
 8007724:	d122      	bne.n	800776c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d11b      	bne.n	800776c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0208 	mvn.w	r2, #8
 800773c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2204      	movs	r2, #4
 8007742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f89a 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 8007758:	e005      	b.n	8007766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f88c 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f89d 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b10      	cmp	r3, #16
 8007778:	d122      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b10      	cmp	r3, #16
 8007786:	d11b      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0210 	mvn.w	r2, #16
 8007790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2208      	movs	r2, #8
 8007796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f870 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 80077ac:	e005      	b.n	80077ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f862 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f873 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d10e      	bne.n	80077ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d107      	bne.n	80077ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0201 	mvn.w	r2, #1
 80077e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fb fcd6 	bl	8003198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b80      	cmp	r3, #128	; 0x80
 80077f8:	d10e      	bne.n	8007818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007804:	2b80      	cmp	r3, #128	; 0x80
 8007806:	d107      	bne.n	8007818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f8e2 	bl	80079dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	d10e      	bne.n	8007844 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d107      	bne.n	8007844 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f838 	bl	80078b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b20      	cmp	r3, #32
 8007850:	d10e      	bne.n	8007870 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b20      	cmp	r3, #32
 800785e:	d107      	bne.n	8007870 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0220 	mvn.w	r2, #32
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f8ac 	bl	80079c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a34      	ldr	r2, [pc, #208]	; (80079ac <TIM_Base_SetConfig+0xe4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00f      	beq.n	8007900 <TIM_Base_SetConfig+0x38>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e6:	d00b      	beq.n	8007900 <TIM_Base_SetConfig+0x38>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a31      	ldr	r2, [pc, #196]	; (80079b0 <TIM_Base_SetConfig+0xe8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d007      	beq.n	8007900 <TIM_Base_SetConfig+0x38>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a30      	ldr	r2, [pc, #192]	; (80079b4 <TIM_Base_SetConfig+0xec>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_Base_SetConfig+0x38>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a2f      	ldr	r2, [pc, #188]	; (80079b8 <TIM_Base_SetConfig+0xf0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d108      	bne.n	8007912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a25      	ldr	r2, [pc, #148]	; (80079ac <TIM_Base_SetConfig+0xe4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d01b      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007920:	d017      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <TIM_Base_SetConfig+0xe8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d013      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a21      	ldr	r2, [pc, #132]	; (80079b4 <TIM_Base_SetConfig+0xec>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00f      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a20      	ldr	r2, [pc, #128]	; (80079b8 <TIM_Base_SetConfig+0xf0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00b      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a1f      	ldr	r2, [pc, #124]	; (80079bc <TIM_Base_SetConfig+0xf4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d007      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <TIM_Base_SetConfig+0xf8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d003      	beq.n	8007952 <TIM_Base_SetConfig+0x8a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <TIM_Base_SetConfig+0xfc>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d108      	bne.n	8007964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a08      	ldr	r2, [pc, #32]	; (80079ac <TIM_Base_SetConfig+0xe4>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d103      	bne.n	8007998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	615a      	str	r2, [r3, #20]
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40010000 	.word	0x40010000
 80079b0:	40000400 	.word	0x40000400
 80079b4:	40000800 	.word	0x40000800
 80079b8:	40000c00 	.word	0x40000c00
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40014400 	.word	0x40014400
 80079c4:	40014800 	.word	0x40014800

080079c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e03f      	b.n	8007a82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fb fe24 	bl	8003664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2224      	movs	r2, #36	; 0x24
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fd75 	bl	8008524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	695a      	ldr	r2, [r3, #20]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b08a      	sub	sp, #40	; 0x28
 8007a8e:	af02      	add	r7, sp, #8
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	603b      	str	r3, [r7, #0]
 8007a96:	4613      	mov	r3, r2
 8007a98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d17c      	bne.n	8007ba4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <HAL_UART_Transmit+0x2c>
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e075      	b.n	8007ba6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_UART_Transmit+0x3e>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e06e      	b.n	8007ba6 <HAL_UART_Transmit+0x11c>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2221      	movs	r2, #33	; 0x21
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ade:	f7fc f847 	bl	8003b70 <HAL_GetTick>
 8007ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	88fa      	ldrh	r2, [r7, #6]
 8007ae8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	88fa      	ldrh	r2, [r7, #6]
 8007aee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af8:	d108      	bne.n	8007b0c <HAL_UART_Transmit+0x82>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	e003      	b.n	8007b14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b1c:	e02a      	b.n	8007b74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2180      	movs	r1, #128	; 0x80
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 faf7 	bl	800811c <UART_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e036      	b.n	8007ba6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	3302      	adds	r3, #2
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	e007      	b.n	8007b66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	781a      	ldrb	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	3301      	adds	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1cf      	bne.n	8007b1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2200      	movs	r2, #0
 8007b86:	2140      	movs	r1, #64	; 0x40
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fac7 	bl	800811c <UART_WaitOnFlagUntilTimeout>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e006      	b.n	8007ba6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ba4:	2302      	movs	r3, #2
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3720      	adds	r7, #32
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	d11d      	bne.n	8007c04 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_UART_Receive_DMA+0x26>
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e016      	b.n	8007c06 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_UART_Receive_DMA+0x38>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e00f      	b.n	8007c06 <HAL_UART_Receive_DMA+0x58>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fad8 	bl	80081b0 <UART_Start_Receive_DMA>
 8007c00:	4603      	mov	r3, r0
 8007c02:	e000      	b.n	8007c06 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c04:	2302      	movs	r3, #2
  }
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	; 0x28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10d      	bne.n	8007c62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d008      	beq.n	8007c62 <HAL_UART_IRQHandler+0x52>
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fbcb 	bl	80083f6 <UART_Receive_IT>
      return;
 8007c60:	e17c      	b.n	8007f5c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80b1 	beq.w	8007dcc <HAL_UART_IRQHandler+0x1bc>
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d105      	bne.n	8007c80 <HAL_UART_IRQHandler+0x70>
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 80a6 	beq.w	8007dcc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <HAL_UART_IRQHandler+0x90>
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	f043 0201 	orr.w	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <HAL_UART_IRQHandler+0xb0>
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	f043 0202 	orr.w	r2, r3, #2
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <HAL_UART_IRQHandler+0xd0>
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	f043 0204 	orr.w	r2, r3, #4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00f      	beq.n	8007d0a <HAL_UART_IRQHandler+0xfa>
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d104      	bne.n	8007cfe <HAL_UART_IRQHandler+0xee>
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f043 0208 	orr.w	r2, r3, #8
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 811f 	beq.w	8007f52 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <HAL_UART_IRQHandler+0x11e>
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb64 	bl	80083f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	bf0c      	ite	eq
 8007d3c:	2301      	moveq	r3, #1
 8007d3e:	2300      	movne	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <HAL_UART_IRQHandler+0x146>
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d031      	beq.n	8007dba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 faa4 	bl	80082a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d66:	2b40      	cmp	r3, #64	; 0x40
 8007d68:	d123      	bne.n	8007db2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	695a      	ldr	r2, [r3, #20]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d013      	beq.n	8007daa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	4a77      	ldr	r2, [pc, #476]	; (8007f64 <HAL_UART_IRQHandler+0x354>)
 8007d88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fc fd5e 	bl	8004850 <HAL_DMA_Abort_IT>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d016      	beq.n	8007dc8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da8:	e00e      	b.n	8007dc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f8f0 	bl	8007f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db0:	e00a      	b.n	8007dc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f8ec 	bl	8007f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db8:	e006      	b.n	8007dc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f8e8 	bl	8007f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007dc6:	e0c4      	b.n	8007f52 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	bf00      	nop
    return;
 8007dca:	e0c2      	b.n	8007f52 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	f040 80a2 	bne.w	8007f1a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 809c 	beq.w	8007f1a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 8096 	beq.w	8007f1a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d14f      	bne.n	8007eb2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007e1c:	8a3b      	ldrh	r3, [r7, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 8099 	beq.w	8007f56 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e28:	8a3a      	ldrh	r2, [r7, #16]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	f080 8093 	bcs.w	8007f56 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8a3a      	ldrh	r2, [r7, #16]
 8007e34:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e40:	d02b      	beq.n	8007e9a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e50:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695a      	ldr	r2, [r3, #20]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0201 	bic.w	r2, r2, #1
 8007e60:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695a      	ldr	r2, [r3, #20]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e70:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0210 	bic.w	r2, r2, #16
 8007e8e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fc fc6b 	bl	8004770 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f87a 	bl	8007fa4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007eb0:	e051      	b.n	8007f56 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d047      	beq.n	8007f5a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007eca:	8a7b      	ldrh	r3, [r7, #18]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d044      	beq.n	8007f5a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ede:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0210 	bic.w	r2, r2, #16
 8007f0c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f0e:	8a7b      	ldrh	r3, [r7, #18]
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f846 	bl	8007fa4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f18:	e01f      	b.n	8007f5a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <HAL_UART_IRQHandler+0x326>
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f9f9 	bl	8008326 <UART_Transmit_IT>
    return;
 8007f34:	e012      	b.n	8007f5c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <HAL_UART_IRQHandler+0x34c>
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa3b 	bl	80083c6 <UART_EndTransmit_IT>
    return;
 8007f50:	e004      	b.n	8007f5c <HAL_UART_IRQHandler+0x34c>
    return;
 8007f52:	bf00      	nop
 8007f54:	e002      	b.n	8007f5c <HAL_UART_IRQHandler+0x34c>
      return;
 8007f56:	bf00      	nop
 8007f58:	e000      	b.n	8007f5c <HAL_UART_IRQHandler+0x34c>
      return;
 8007f5a:	bf00      	nop
  }
}
 8007f5c:	3728      	adds	r7, #40	; 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	080082ff 	.word	0x080082ff

08007f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d12a      	bne.n	800802e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695a      	ldr	r2, [r3, #20]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0201 	bic.w	r2, r2, #1
 8007ffc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800800c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2220      	movs	r2, #32
 8008012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801a:	2b01      	cmp	r3, #1
 800801c:	d107      	bne.n	800802e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68da      	ldr	r2, [r3, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0210 	bic.w	r2, r2, #16
 800802c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	2b01      	cmp	r3, #1
 8008034:	d106      	bne.n	8008044 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800803a:	4619      	mov	r1, r3
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff ffb1 	bl	8007fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008042:	e002      	b.n	800804a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7f9 faf7 	bl	8001638 <HAL_UART_RxCpltCallback>
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	d108      	bne.n	800807a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800806c:	085b      	lsrs	r3, r3, #1
 800806e:	b29b      	uxth	r3, r3
 8008070:	4619      	mov	r1, r3
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f7ff ff96 	bl	8007fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008078:	e002      	b.n	8008080 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7ff ff7e 	bl	8007f7c <HAL_UART_RxHalfCpltCallback>
}
 8008080:	bf00      	nop
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008098:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a4:	2b80      	cmp	r3, #128	; 0x80
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b21      	cmp	r3, #33	; 0x21
 80080ba:	d108      	bne.n	80080ce <UART_DMAError+0x46>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2200      	movs	r2, #0
 80080c6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80080c8:	68b8      	ldr	r0, [r7, #8]
 80080ca:	f000 f8d5 	bl	8008278 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b40      	cmp	r3, #64	; 0x40
 80080da:	bf0c      	ite	eq
 80080dc:	2301      	moveq	r3, #1
 80080de:	2300      	movne	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b22      	cmp	r3, #34	; 0x22
 80080ee:	d108      	bne.n	8008102 <UART_DMAError+0x7a>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d005      	beq.n	8008102 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2200      	movs	r2, #0
 80080fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80080fc:	68b8      	ldr	r0, [r7, #8]
 80080fe:	f000 f8d1 	bl	80082a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f043 0210 	orr.w	r2, r3, #16
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800810e:	68b8      	ldr	r0, [r7, #8]
 8008110:	f7ff ff3e 	bl	8007f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812c:	e02c      	b.n	8008188 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d028      	beq.n	8008188 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <UART_WaitOnFlagUntilTimeout+0x30>
 800813c:	f7fb fd18 	bl	8003b70 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	429a      	cmp	r2, r3
 800814a:	d21d      	bcs.n	8008188 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800815a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695a      	ldr	r2, [r3, #20]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0201 	bic.w	r2, r2, #1
 800816a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2220      	movs	r2, #32
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e00f      	b.n	80081a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4013      	ands	r3, r2
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	429a      	cmp	r2, r3
 8008196:	bf0c      	ite	eq
 8008198:	2301      	moveq	r3, #1
 800819a:	2300      	movne	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d0c3      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4613      	mov	r3, r2
 80081bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	88fa      	ldrh	r2, [r7, #6]
 80081c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2222      	movs	r2, #34	; 0x22
 80081d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	4a23      	ldr	r2, [pc, #140]	; (800826c <UART_Start_Receive_DMA+0xbc>)
 80081de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	4a22      	ldr	r2, [pc, #136]	; (8008270 <UART_Start_Receive_DMA+0xc0>)
 80081e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	4a21      	ldr	r2, [pc, #132]	; (8008274 <UART_Start_Receive_DMA+0xc4>)
 80081ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	2200      	movs	r2, #0
 80081f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80081f8:	f107 0308 	add.w	r3, r7, #8
 80081fc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3304      	adds	r3, #4
 8008208:	4619      	mov	r1, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	f7fc fa56 	bl	80046c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008214:	2300      	movs	r3, #0
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	613b      	str	r3, [r7, #16]
 8008228:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008240:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695a      	ldr	r2, [r3, #20]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0201 	orr.w	r2, r2, #1
 8008250:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	695a      	ldr	r2, [r3, #20]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008260:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	08007fbd 	.word	0x08007fbd
 8008270:	08008053 	.word	0x08008053
 8008274:	08008089 	.word	0x08008089

08008278 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800828e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695a      	ldr	r2, [r3, #20]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0201 	bic.w	r2, r2, #1
 80082ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d107      	bne.n	80082e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0210 	bic.w	r2, r2, #16
 80082e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fe39 	bl	8007f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b21      	cmp	r3, #33	; 0x21
 8008338:	d13e      	bne.n	80083b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008342:	d114      	bne.n	800836e <UART_Transmit_IT+0x48>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d110      	bne.n	800836e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008360:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	1c9a      	adds	r2, r3, #2
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	621a      	str	r2, [r3, #32]
 800836c:	e008      	b.n	8008380 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	1c59      	adds	r1, r3, #1
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6211      	str	r1, [r2, #32]
 8008378:	781a      	ldrb	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008384:	b29b      	uxth	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	b29b      	uxth	r3, r3
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	4619      	mov	r1, r3
 800838e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10f      	bne.n	80083b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	e000      	b.n	80083ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80083b8:	2302      	movs	r3, #2
  }
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff fdbe 	bl	8007f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b22      	cmp	r3, #34	; 0x22
 8008408:	f040 8087 	bne.w	800851a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008414:	d117      	bne.n	8008446 <UART_Receive_IT+0x50>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d113      	bne.n	8008446 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008434:	b29a      	uxth	r2, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	1c9a      	adds	r2, r3, #2
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	629a      	str	r2, [r3, #40]	; 0x28
 8008444:	e026      	b.n	8008494 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800844c:	2300      	movs	r3, #0
 800844e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008458:	d007      	beq.n	800846a <UART_Receive_IT+0x74>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <UART_Receive_IT+0x82>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	b2da      	uxtb	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e008      	b.n	800848a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008484:	b2da      	uxtb	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008498:	b29b      	uxth	r3, r3
 800849a:	3b01      	subs	r3, #1
 800849c:	b29b      	uxth	r3, r3
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	4619      	mov	r1, r3
 80084a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d136      	bne.n	8008516 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0220 	bic.w	r2, r2, #32
 80084b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695a      	ldr	r2, [r3, #20]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0201 	bic.w	r2, r2, #1
 80084d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d10e      	bne.n	8008506 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0210 	bic.w	r2, r2, #16
 80084f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fd50 	bl	8007fa4 <HAL_UARTEx_RxEventCallback>
 8008504:	e002      	b.n	800850c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7f9 f896 	bl	8001638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	e002      	b.n	800851c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	e000      	b.n	800851c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800851a:	2302      	movs	r3, #2
  }
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	b09f      	sub	sp, #124	; 0x7c
 800852a:	af00      	add	r7, sp, #0
 800852c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800852e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800853a:	68d9      	ldr	r1, [r3, #12]
 800853c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	ea40 0301 	orr.w	r3, r0, r1
 8008544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	431a      	orrs	r2, r3
 8008550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	431a      	orrs	r2, r3
 8008556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	4313      	orrs	r3, r2
 800855c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800855e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008568:	f021 010c 	bic.w	r1, r1, #12
 800856c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008572:	430b      	orrs	r3, r1
 8008574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008582:	6999      	ldr	r1, [r3, #24]
 8008584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	ea40 0301 	orr.w	r3, r0, r1
 800858c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800858e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	4bc5      	ldr	r3, [pc, #788]	; (80088a8 <UART_SetConfig+0x384>)
 8008594:	429a      	cmp	r2, r3
 8008596:	d004      	beq.n	80085a2 <UART_SetConfig+0x7e>
 8008598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	4bc3      	ldr	r3, [pc, #780]	; (80088ac <UART_SetConfig+0x388>)
 800859e:	429a      	cmp	r2, r3
 80085a0:	d103      	bne.n	80085aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085a2:	f7fe f9b7 	bl	8006914 <HAL_RCC_GetPCLK2Freq>
 80085a6:	6778      	str	r0, [r7, #116]	; 0x74
 80085a8:	e002      	b.n	80085b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085aa:	f7fe f99f 	bl	80068ec <HAL_RCC_GetPCLK1Freq>
 80085ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b8:	f040 80b6 	bne.w	8008728 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085be:	461c      	mov	r4, r3
 80085c0:	f04f 0500 	mov.w	r5, #0
 80085c4:	4622      	mov	r2, r4
 80085c6:	462b      	mov	r3, r5
 80085c8:	1891      	adds	r1, r2, r2
 80085ca:	6439      	str	r1, [r7, #64]	; 0x40
 80085cc:	415b      	adcs	r3, r3
 80085ce:	647b      	str	r3, [r7, #68]	; 0x44
 80085d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085d4:	1912      	adds	r2, r2, r4
 80085d6:	eb45 0303 	adc.w	r3, r5, r3
 80085da:	f04f 0000 	mov.w	r0, #0
 80085de:	f04f 0100 	mov.w	r1, #0
 80085e2:	00d9      	lsls	r1, r3, #3
 80085e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085e8:	00d0      	lsls	r0, r2, #3
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	1911      	adds	r1, r2, r4
 80085f0:	6639      	str	r1, [r7, #96]	; 0x60
 80085f2:	416b      	adcs	r3, r5
 80085f4:	667b      	str	r3, [r7, #100]	; 0x64
 80085f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	461a      	mov	r2, r3
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	1891      	adds	r1, r2, r2
 8008602:	63b9      	str	r1, [r7, #56]	; 0x38
 8008604:	415b      	adcs	r3, r3
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800860c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008610:	f7f8 fb42 	bl	8000c98 <__aeabi_uldivmod>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4ba5      	ldr	r3, [pc, #660]	; (80088b0 <UART_SetConfig+0x38c>)
 800861a:	fba3 2302 	umull	r2, r3, r3, r2
 800861e:	095b      	lsrs	r3, r3, #5
 8008620:	011e      	lsls	r6, r3, #4
 8008622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008624:	461c      	mov	r4, r3
 8008626:	f04f 0500 	mov.w	r5, #0
 800862a:	4622      	mov	r2, r4
 800862c:	462b      	mov	r3, r5
 800862e:	1891      	adds	r1, r2, r2
 8008630:	6339      	str	r1, [r7, #48]	; 0x30
 8008632:	415b      	adcs	r3, r3
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
 8008636:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800863a:	1912      	adds	r2, r2, r4
 800863c:	eb45 0303 	adc.w	r3, r5, r3
 8008640:	f04f 0000 	mov.w	r0, #0
 8008644:	f04f 0100 	mov.w	r1, #0
 8008648:	00d9      	lsls	r1, r3, #3
 800864a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800864e:	00d0      	lsls	r0, r2, #3
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	1911      	adds	r1, r2, r4
 8008656:	65b9      	str	r1, [r7, #88]	; 0x58
 8008658:	416b      	adcs	r3, r5
 800865a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800865c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	461a      	mov	r2, r3
 8008662:	f04f 0300 	mov.w	r3, #0
 8008666:	1891      	adds	r1, r2, r2
 8008668:	62b9      	str	r1, [r7, #40]	; 0x28
 800866a:	415b      	adcs	r3, r3
 800866c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800866e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008672:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008676:	f7f8 fb0f 	bl	8000c98 <__aeabi_uldivmod>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4b8c      	ldr	r3, [pc, #560]	; (80088b0 <UART_SetConfig+0x38c>)
 8008680:	fba3 1302 	umull	r1, r3, r3, r2
 8008684:	095b      	lsrs	r3, r3, #5
 8008686:	2164      	movs	r1, #100	; 0x64
 8008688:	fb01 f303 	mul.w	r3, r1, r3
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	3332      	adds	r3, #50	; 0x32
 8008692:	4a87      	ldr	r2, [pc, #540]	; (80088b0 <UART_SetConfig+0x38c>)
 8008694:	fba2 2303 	umull	r2, r3, r2, r3
 8008698:	095b      	lsrs	r3, r3, #5
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086a0:	441e      	add	r6, r3
 80086a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086a4:	4618      	mov	r0, r3
 80086a6:	f04f 0100 	mov.w	r1, #0
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	1894      	adds	r4, r2, r2
 80086b0:	623c      	str	r4, [r7, #32]
 80086b2:	415b      	adcs	r3, r3
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
 80086b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086ba:	1812      	adds	r2, r2, r0
 80086bc:	eb41 0303 	adc.w	r3, r1, r3
 80086c0:	f04f 0400 	mov.w	r4, #0
 80086c4:	f04f 0500 	mov.w	r5, #0
 80086c8:	00dd      	lsls	r5, r3, #3
 80086ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086ce:	00d4      	lsls	r4, r2, #3
 80086d0:	4622      	mov	r2, r4
 80086d2:	462b      	mov	r3, r5
 80086d4:	1814      	adds	r4, r2, r0
 80086d6:	653c      	str	r4, [r7, #80]	; 0x50
 80086d8:	414b      	adcs	r3, r1
 80086da:	657b      	str	r3, [r7, #84]	; 0x54
 80086dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	461a      	mov	r2, r3
 80086e2:	f04f 0300 	mov.w	r3, #0
 80086e6:	1891      	adds	r1, r2, r2
 80086e8:	61b9      	str	r1, [r7, #24]
 80086ea:	415b      	adcs	r3, r3
 80086ec:	61fb      	str	r3, [r7, #28]
 80086ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80086f6:	f7f8 facf 	bl	8000c98 <__aeabi_uldivmod>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4b6c      	ldr	r3, [pc, #432]	; (80088b0 <UART_SetConfig+0x38c>)
 8008700:	fba3 1302 	umull	r1, r3, r3, r2
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	2164      	movs	r1, #100	; 0x64
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	3332      	adds	r3, #50	; 0x32
 8008712:	4a67      	ldr	r2, [pc, #412]	; (80088b0 <UART_SetConfig+0x38c>)
 8008714:	fba2 2303 	umull	r2, r3, r2, r3
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	f003 0207 	and.w	r2, r3, #7
 800871e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4432      	add	r2, r6
 8008724:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008726:	e0b9      	b.n	800889c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800872a:	461c      	mov	r4, r3
 800872c:	f04f 0500 	mov.w	r5, #0
 8008730:	4622      	mov	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	1891      	adds	r1, r2, r2
 8008736:	6139      	str	r1, [r7, #16]
 8008738:	415b      	adcs	r3, r3
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008740:	1912      	adds	r2, r2, r4
 8008742:	eb45 0303 	adc.w	r3, r5, r3
 8008746:	f04f 0000 	mov.w	r0, #0
 800874a:	f04f 0100 	mov.w	r1, #0
 800874e:	00d9      	lsls	r1, r3, #3
 8008750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008754:	00d0      	lsls	r0, r2, #3
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	eb12 0804 	adds.w	r8, r2, r4
 800875e:	eb43 0905 	adc.w	r9, r3, r5
 8008762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	4618      	mov	r0, r3
 8008768:	f04f 0100 	mov.w	r1, #0
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	008b      	lsls	r3, r1, #2
 8008776:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800877a:	0082      	lsls	r2, r0, #2
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 fa8a 	bl	8000c98 <__aeabi_uldivmod>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4b49      	ldr	r3, [pc, #292]	; (80088b0 <UART_SetConfig+0x38c>)
 800878a:	fba3 2302 	umull	r2, r3, r3, r2
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	011e      	lsls	r6, r3, #4
 8008792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008794:	4618      	mov	r0, r3
 8008796:	f04f 0100 	mov.w	r1, #0
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	1894      	adds	r4, r2, r2
 80087a0:	60bc      	str	r4, [r7, #8]
 80087a2:	415b      	adcs	r3, r3
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087aa:	1812      	adds	r2, r2, r0
 80087ac:	eb41 0303 	adc.w	r3, r1, r3
 80087b0:	f04f 0400 	mov.w	r4, #0
 80087b4:	f04f 0500 	mov.w	r5, #0
 80087b8:	00dd      	lsls	r5, r3, #3
 80087ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80087be:	00d4      	lsls	r4, r2, #3
 80087c0:	4622      	mov	r2, r4
 80087c2:	462b      	mov	r3, r5
 80087c4:	1814      	adds	r4, r2, r0
 80087c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80087c8:	414b      	adcs	r3, r1
 80087ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f04f 0100 	mov.w	r1, #0
 80087d6:	f04f 0200 	mov.w	r2, #0
 80087da:	f04f 0300 	mov.w	r3, #0
 80087de:	008b      	lsls	r3, r1, #2
 80087e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80087e4:	0082      	lsls	r2, r0, #2
 80087e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80087ea:	f7f8 fa55 	bl	8000c98 <__aeabi_uldivmod>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4b2f      	ldr	r3, [pc, #188]	; (80088b0 <UART_SetConfig+0x38c>)
 80087f4:	fba3 1302 	umull	r1, r3, r3, r2
 80087f8:	095b      	lsrs	r3, r3, #5
 80087fa:	2164      	movs	r1, #100	; 0x64
 80087fc:	fb01 f303 	mul.w	r3, r1, r3
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	3332      	adds	r3, #50	; 0x32
 8008806:	4a2a      	ldr	r2, [pc, #168]	; (80088b0 <UART_SetConfig+0x38c>)
 8008808:	fba2 2303 	umull	r2, r3, r2, r3
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008812:	441e      	add	r6, r3
 8008814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008816:	4618      	mov	r0, r3
 8008818:	f04f 0100 	mov.w	r1, #0
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	1894      	adds	r4, r2, r2
 8008822:	603c      	str	r4, [r7, #0]
 8008824:	415b      	adcs	r3, r3
 8008826:	607b      	str	r3, [r7, #4]
 8008828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800882c:	1812      	adds	r2, r2, r0
 800882e:	eb41 0303 	adc.w	r3, r1, r3
 8008832:	f04f 0400 	mov.w	r4, #0
 8008836:	f04f 0500 	mov.w	r5, #0
 800883a:	00dd      	lsls	r5, r3, #3
 800883c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008840:	00d4      	lsls	r4, r2, #3
 8008842:	4622      	mov	r2, r4
 8008844:	462b      	mov	r3, r5
 8008846:	eb12 0a00 	adds.w	sl, r2, r0
 800884a:	eb43 0b01 	adc.w	fp, r3, r1
 800884e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	4618      	mov	r0, r3
 8008854:	f04f 0100 	mov.w	r1, #0
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	f04f 0300 	mov.w	r3, #0
 8008860:	008b      	lsls	r3, r1, #2
 8008862:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008866:	0082      	lsls	r2, r0, #2
 8008868:	4650      	mov	r0, sl
 800886a:	4659      	mov	r1, fp
 800886c:	f7f8 fa14 	bl	8000c98 <__aeabi_uldivmod>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <UART_SetConfig+0x38c>)
 8008876:	fba3 1302 	umull	r1, r3, r3, r2
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	2164      	movs	r1, #100	; 0x64
 800887e:	fb01 f303 	mul.w	r3, r1, r3
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	011b      	lsls	r3, r3, #4
 8008886:	3332      	adds	r3, #50	; 0x32
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <UART_SetConfig+0x38c>)
 800888a:	fba2 2303 	umull	r2, r3, r2, r3
 800888e:	095b      	lsrs	r3, r3, #5
 8008890:	f003 020f 	and.w	r2, r3, #15
 8008894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4432      	add	r2, r6
 800889a:	609a      	str	r2, [r3, #8]
}
 800889c:	bf00      	nop
 800889e:	377c      	adds	r7, #124	; 0x7c
 80088a0:	46bd      	mov	sp, r7
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a6:	bf00      	nop
 80088a8:	40011000 	.word	0x40011000
 80088ac:	40011400 	.word	0x40011400
 80088b0:	51eb851f 	.word	0x51eb851f

080088b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80088b8:	4904      	ldr	r1, [pc, #16]	; (80088cc <MX_FATFS_Init+0x18>)
 80088ba:	4805      	ldr	r0, [pc, #20]	; (80088d0 <MX_FATFS_Init+0x1c>)
 80088bc:	f002 fd2e 	bl	800b31c <FATFS_LinkDriver>
 80088c0:	4603      	mov	r3, r0
 80088c2:	461a      	mov	r2, r3
 80088c4:	4b03      	ldr	r3, [pc, #12]	; (80088d4 <MX_FATFS_Init+0x20>)
 80088c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80088c8:	bf00      	nop
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	200058d0 	.word	0x200058d0
 80088d0:	20000010 	.word	0x20000010
 80088d4:	200058d4 	.word	0x200058d4

080088d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80088dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80088de:	4618      	mov	r0, r3
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80088f2:	4b06      	ldr	r3, [pc, #24]	; (800890c <USER_initialize+0x24>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <USER_initialize+0x24>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	2000000d 	.word	0x2000000d

08008910 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800891a:	4b06      	ldr	r3, [pc, #24]	; (8008934 <USER_status+0x24>)
 800891c:	2201      	movs	r2, #1
 800891e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008920:	4b04      	ldr	r3, [pc, #16]	; (8008934 <USER_status+0x24>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	2000000d 	.word	0x2000000d

08008938 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008948:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008956:	b480      	push	{r7}
 8008958:	b085      	sub	sp, #20
 800895a:	af00      	add	r7, sp, #0
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008966:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	603a      	str	r2, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
 8008980:	460b      	mov	r3, r1
 8008982:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	73fb      	strb	r3, [r7, #15]
    return res;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <disk_status+0x30>)
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	79fa      	ldrb	r2, [r7, #7]
 80089b0:	4905      	ldr	r1, [pc, #20]	; (80089c8 <disk_status+0x30>)
 80089b2:	440a      	add	r2, r1
 80089b4:	7a12      	ldrb	r2, [r2, #8]
 80089b6:	4610      	mov	r0, r2
 80089b8:	4798      	blx	r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	200003b8 	.word	0x200003b8

080089cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	4a0d      	ldr	r2, [pc, #52]	; (8008a14 <disk_initialize+0x48>)
 80089de:	5cd3      	ldrb	r3, [r2, r3]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d111      	bne.n	8008a08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	4a0b      	ldr	r2, [pc, #44]	; (8008a14 <disk_initialize+0x48>)
 80089e8:	2101      	movs	r1, #1
 80089ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	4a09      	ldr	r2, [pc, #36]	; (8008a14 <disk_initialize+0x48>)
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	79fa      	ldrb	r2, [r7, #7]
 80089fa:	4906      	ldr	r1, [pc, #24]	; (8008a14 <disk_initialize+0x48>)
 80089fc:	440a      	add	r2, r1
 80089fe:	7a12      	ldrb	r2, [r2, #8]
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	200003b8 	.word	0x200003b8

08008a18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607a      	str	r2, [r7, #4]
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4a0a      	ldr	r2, [pc, #40]	; (8008a54 <disk_read+0x3c>)
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	689c      	ldr	r4, [r3, #8]
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4a07      	ldr	r2, [pc, #28]	; (8008a54 <disk_read+0x3c>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	7a18      	ldrb	r0, [r3, #8]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	47a0      	blx	r4
 8008a44:	4603      	mov	r3, r0
 8008a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd90      	pop	{r4, r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200003b8 	.word	0x200003b8

08008a58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008a58:	b590      	push	{r4, r7, lr}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4a0a      	ldr	r2, [pc, #40]	; (8008a94 <disk_write+0x3c>)
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	68dc      	ldr	r4, [r3, #12]
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4a07      	ldr	r2, [pc, #28]	; (8008a94 <disk_write+0x3c>)
 8008a78:	4413      	add	r3, r2
 8008a7a:	7a18      	ldrb	r0, [r3, #8]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	47a0      	blx	r4
 8008a84:	4603      	mov	r3, r0
 8008a86:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd90      	pop	{r4, r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200003b8 	.word	0x200003b8

08008a98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	603a      	str	r2, [r7, #0]
 8008aa2:	71fb      	strb	r3, [r7, #7]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	4a09      	ldr	r2, [pc, #36]	; (8008ad0 <disk_ioctl+0x38>)
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	79fa      	ldrb	r2, [r7, #7]
 8008ab6:	4906      	ldr	r1, [pc, #24]	; (8008ad0 <disk_ioctl+0x38>)
 8008ab8:	440a      	add	r2, r1
 8008aba:	7a10      	ldrb	r0, [r2, #8]
 8008abc:	79b9      	ldrb	r1, [r7, #6]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	4798      	blx	r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	200003b8 	.word	0x200003b8

08008ad4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008ae4:	89fb      	ldrh	r3, [r7, #14]
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	b21a      	sxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b21b      	sxth	r3, r3
 8008af0:	4313      	orrs	r3, r2
 8008af2:	b21b      	sxth	r3, r3
 8008af4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008af6:	89fb      	ldrh	r3, [r7, #14]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3303      	adds	r3, #3
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	3202      	adds	r2, #2
 8008b1c:	7812      	ldrb	r2, [r2, #0]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	3201      	adds	r2, #1
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
	return rv;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	887a      	ldrh	r2, [r7, #2]
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	701a      	strb	r2, [r3, #0]
 8008b62:	887b      	ldrh	r3, [r7, #2]
 8008b64:	0a1b      	lsrs	r3, r3, #8
 8008b66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	887a      	ldrh	r2, [r7, #2]
 8008b70:	b2d2      	uxtb	r2, r2
 8008b72:	701a      	strb	r2, [r3, #0]
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	b2d2      	uxtb	r2, r2
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	0a1b      	lsrs	r3, r3, #8
 8008b9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	701a      	strb	r2, [r3, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	0a1b      	lsrs	r3, r3, #8
 8008bbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	b2d2      	uxtb	r2, r2
 8008bca:	701a      	strb	r2, [r3, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00d      	beq.n	8008c0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	1c53      	adds	r3, r2, #1
 8008bf6:	613b      	str	r3, [r7, #16]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	1c59      	adds	r1, r3, #1
 8008bfc:	6179      	str	r1, [r7, #20]
 8008bfe:	7812      	ldrb	r2, [r2, #0]
 8008c00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	607b      	str	r3, [r7, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f1      	bne.n	8008bf2 <mem_cpy+0x1a>
	}
}
 8008c0e:	bf00      	nop
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008c1a:	b480      	push	{r7}
 8008c1c:	b087      	sub	sp, #28
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	617a      	str	r2, [r7, #20]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f3      	bne.n	8008c2a <mem_set+0x10>
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008c50:	b480      	push	{r7}
 8008c52:	b089      	sub	sp, #36	; 0x24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	61fa      	str	r2, [r7, #28]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	4619      	mov	r1, r3
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	61ba      	str	r2, [r7, #24]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	1acb      	subs	r3, r1, r3
 8008c7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	607b      	str	r3, [r7, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <mem_cmp+0x40>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0eb      	beq.n	8008c68 <mem_cmp+0x18>

	return r;
 8008c90:	697b      	ldr	r3, [r7, #20]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3724      	adds	r7, #36	; 0x24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ca8:	e002      	b.n	8008cb0 <chk_chr+0x12>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3301      	adds	r3, #1
 8008cae:	607b      	str	r3, [r7, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d005      	beq.n	8008cc4 <chk_chr+0x26>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d1f2      	bne.n	8008caa <chk_chr+0xc>
	return *str;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d009      	beq.n	8008cf6 <lock_fs+0x22>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f002 fb4e 	bl	800b388 <ff_req_grant>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <lock_fs+0x22>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <lock_fs+0x24>
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00d      	beq.n	8008d2e <unlock_fs+0x2e>
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	2b0c      	cmp	r3, #12
 8008d16:	d00a      	beq.n	8008d2e <unlock_fs+0x2e>
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	2b0b      	cmp	r3, #11
 8008d1c:	d007      	beq.n	8008d2e <unlock_fs+0x2e>
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	2b0f      	cmp	r3, #15
 8008d22:	d004      	beq.n	8008d2e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f002 fb42 	bl	800b3b2 <ff_rel_grant>
	}
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d42:	2300      	movs	r3, #0
 8008d44:	60bb      	str	r3, [r7, #8]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	e029      	b.n	8008da0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008d4c:	4a27      	ldr	r2, [pc, #156]	; (8008dec <chk_lock+0xb4>)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	4413      	add	r3, r2
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01d      	beq.n	8008d96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d5a:	4a24      	ldr	r2, [pc, #144]	; (8008dec <chk_lock+0xb4>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	4413      	add	r3, r2
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d116      	bne.n	8008d9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008d6c:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <chk_lock+0xb4>)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	011b      	lsls	r3, r3, #4
 8008d72:	4413      	add	r3, r2
 8008d74:	3304      	adds	r3, #4
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d10c      	bne.n	8008d9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d80:	4a1a      	ldr	r2, [pc, #104]	; (8008dec <chk_lock+0xb4>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	4413      	add	r3, r2
 8008d88:	3308      	adds	r3, #8
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d102      	bne.n	8008d9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d94:	e007      	b.n	8008da6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008d96:	2301      	movs	r3, #1
 8008d98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d9d2      	bls.n	8008d4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d109      	bne.n	8008dc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <chk_lock+0x80>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d101      	bne.n	8008dbc <chk_lock+0x84>
 8008db8:	2300      	movs	r3, #0
 8008dba:	e010      	b.n	8008dde <chk_lock+0xa6>
 8008dbc:	2312      	movs	r3, #18
 8008dbe:	e00e      	b.n	8008dde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d108      	bne.n	8008dd8 <chk_lock+0xa0>
 8008dc6:	4a09      	ldr	r2, [pc, #36]	; (8008dec <chk_lock+0xb4>)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	4413      	add	r3, r2
 8008dce:	330c      	adds	r3, #12
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd6:	d101      	bne.n	8008ddc <chk_lock+0xa4>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	e000      	b.n	8008dde <chk_lock+0xa6>
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000398 	.word	0x20000398

08008df0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	e002      	b.n	8008e02 <enq_lock+0x12>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d806      	bhi.n	8008e16 <enq_lock+0x26>
 8008e08:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <enq_lock+0x40>)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	4413      	add	r3, r2
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f2      	bne.n	8008dfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	20000398 	.word	0x20000398

08008e34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	e01f      	b.n	8008e84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008e44:	4a41      	ldr	r2, [pc, #260]	; (8008f4c <inc_lock+0x118>)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	4413      	add	r3, r2
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d113      	bne.n	8008e7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008e56:	4a3d      	ldr	r2, [pc, #244]	; (8008f4c <inc_lock+0x118>)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3304      	adds	r3, #4
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d109      	bne.n	8008e7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008e6a:	4a38      	ldr	r2, [pc, #224]	; (8008f4c <inc_lock+0x118>)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	011b      	lsls	r3, r3, #4
 8008e70:	4413      	add	r3, r2
 8008e72:	3308      	adds	r3, #8
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d006      	beq.n	8008e8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d9dc      	bls.n	8008e44 <inc_lock+0x10>
 8008e8a:	e000      	b.n	8008e8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008e8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d132      	bne.n	8008efa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	e002      	b.n	8008ea0 <inc_lock+0x6c>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d806      	bhi.n	8008eb4 <inc_lock+0x80>
 8008ea6:	4a29      	ldr	r2, [pc, #164]	; (8008f4c <inc_lock+0x118>)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	011b      	lsls	r3, r3, #4
 8008eac:	4413      	add	r3, r2
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f2      	bne.n	8008e9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d101      	bne.n	8008ebe <inc_lock+0x8a>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e040      	b.n	8008f40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4922      	ldr	r1, [pc, #136]	; (8008f4c <inc_lock+0x118>)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	440b      	add	r3, r1
 8008eca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	491e      	ldr	r1, [pc, #120]	; (8008f4c <inc_lock+0x118>)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	440b      	add	r3, r1
 8008ed8:	3304      	adds	r3, #4
 8008eda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695a      	ldr	r2, [r3, #20]
 8008ee0:	491a      	ldr	r1, [pc, #104]	; (8008f4c <inc_lock+0x118>)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	440b      	add	r3, r1
 8008ee8:	3308      	adds	r3, #8
 8008eea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008eec:	4a17      	ldr	r2, [pc, #92]	; (8008f4c <inc_lock+0x118>)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	4413      	add	r3, r2
 8008ef4:	330c      	adds	r3, #12
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <inc_lock+0xe0>
 8008f00:	4a12      	ldr	r2, [pc, #72]	; (8008f4c <inc_lock+0x118>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	4413      	add	r3, r2
 8008f08:	330c      	adds	r3, #12
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <inc_lock+0xe0>
 8008f10:	2300      	movs	r3, #0
 8008f12:	e015      	b.n	8008f40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d108      	bne.n	8008f2c <inc_lock+0xf8>
 8008f1a:	4a0c      	ldr	r2, [pc, #48]	; (8008f4c <inc_lock+0x118>)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	4413      	add	r3, r2
 8008f22:	330c      	adds	r3, #12
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	3301      	adds	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	e001      	b.n	8008f30 <inc_lock+0xfc>
 8008f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f30:	4906      	ldr	r1, [pc, #24]	; (8008f4c <inc_lock+0x118>)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	440b      	add	r3, r1
 8008f38:	330c      	adds	r3, #12
 8008f3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3301      	adds	r3, #1
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	20000398 	.word	0x20000398

08008f50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	607b      	str	r3, [r7, #4]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d825      	bhi.n	8008fb0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008f64:	4a17      	ldr	r2, [pc, #92]	; (8008fc4 <dec_lock+0x74>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	4413      	add	r3, r2
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008f72:	89fb      	ldrh	r3, [r7, #14]
 8008f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f78:	d101      	bne.n	8008f7e <dec_lock+0x2e>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008f7e:	89fb      	ldrh	r3, [r7, #14]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <dec_lock+0x3a>
 8008f84:	89fb      	ldrh	r3, [r7, #14]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008f8a:	4a0e      	ldr	r2, [pc, #56]	; (8008fc4 <dec_lock+0x74>)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	4413      	add	r3, r2
 8008f92:	330c      	adds	r3, #12
 8008f94:	89fa      	ldrh	r2, [r7, #14]
 8008f96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008f98:	89fb      	ldrh	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <dec_lock+0x5a>
 8008f9e:	4a09      	ldr	r2, [pc, #36]	; (8008fc4 <dec_lock+0x74>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	4413      	add	r3, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	737b      	strb	r3, [r7, #13]
 8008fae:	e001      	b.n	8008fb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008fb4:	7b7b      	ldrb	r3, [r7, #13]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000398 	.word	0x20000398

08008fc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e010      	b.n	8008ff8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008fd6:	4a0d      	ldr	r2, [pc, #52]	; (800900c <clear_lock+0x44>)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	4413      	add	r3, r2
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d105      	bne.n	8008ff2 <clear_lock+0x2a>
 8008fe6:	4a09      	ldr	r2, [pc, #36]	; (800900c <clear_lock+0x44>)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	4413      	add	r3, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d9eb      	bls.n	8008fd6 <clear_lock+0xe>
	}
}
 8008ffe:	bf00      	nop
 8009000:	bf00      	nop
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	20000398 	.word	0x20000398

08009010 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	78db      	ldrb	r3, [r3, #3]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d034      	beq.n	800908e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009028:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	7858      	ldrb	r0, [r3, #1]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009034:	2301      	movs	r3, #1
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	f7ff fd0e 	bl	8008a58 <disk_write>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009042:	2301      	movs	r3, #1
 8009044:	73fb      	strb	r3, [r7, #15]
 8009046:	e022      	b.n	800908e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	1ad2      	subs	r2, r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	429a      	cmp	r2, r3
 800905c:	d217      	bcs.n	800908e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	789b      	ldrb	r3, [r3, #2]
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	e010      	b.n	8009088 <sync_window+0x78>
					wsect += fs->fsize;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4413      	add	r3, r2
 800906e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	7858      	ldrb	r0, [r3, #1]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800907a:	2301      	movs	r3, #1
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	f7ff fceb 	bl	8008a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	3b01      	subs	r3, #1
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d8eb      	bhi.n	8009066 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d01b      	beq.n	80090e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff ffad 	bl	8009010 <sync_window>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d113      	bne.n	80090e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7858      	ldrb	r0, [r3, #1]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090ca:	2301      	movs	r3, #1
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	f7ff fca3 	bl	8008a18 <disk_read>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80090d8:	f04f 33ff 	mov.w	r3, #4294967295
 80090dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80090de:	2301      	movs	r3, #1
 80090e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff ff87 	bl	8009010 <sync_window>
 8009102:	4603      	mov	r3, r0
 8009104:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d158      	bne.n	80091be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b03      	cmp	r3, #3
 8009112:	d148      	bne.n	80091a6 <sync_fs+0xb2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	791b      	ldrb	r3, [r3, #4]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d144      	bne.n	80091a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3334      	adds	r3, #52	; 0x34
 8009120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009124:	2100      	movs	r1, #0
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff fd77 	bl	8008c1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3334      	adds	r3, #52	; 0x34
 8009130:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009134:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff fd06 	bl	8008b4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3334      	adds	r3, #52	; 0x34
 8009142:	4921      	ldr	r1, [pc, #132]	; (80091c8 <sync_fs+0xd4>)
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff fd1b 	bl	8008b80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3334      	adds	r3, #52	; 0x34
 800914e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009152:	491e      	ldr	r1, [pc, #120]	; (80091cc <sync_fs+0xd8>)
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fd13 	bl	8008b80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3334      	adds	r3, #52	; 0x34
 800915e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	4619      	mov	r1, r3
 8009168:	4610      	mov	r0, r2
 800916a:	f7ff fd09 	bl	8008b80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3334      	adds	r3, #52	; 0x34
 8009172:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	4619      	mov	r1, r3
 800917c:	4610      	mov	r0, r2
 800917e:	f7ff fcff 	bl	8008b80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	7858      	ldrb	r0, [r3, #1]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800919a:	2301      	movs	r3, #1
 800919c:	f7ff fc5c 	bl	8008a58 <disk_write>
			fs->fsi_flag = 0;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	785b      	ldrb	r3, [r3, #1]
 80091aa:	2200      	movs	r2, #0
 80091ac:	2100      	movs	r1, #0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff fc72 	bl	8008a98 <disk_ioctl>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <sync_fs+0xca>
 80091ba:	2301      	movs	r3, #1
 80091bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80091be:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	41615252 	.word	0x41615252
 80091cc:	61417272 	.word	0x61417272

080091d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	3b02      	subs	r3, #2
 80091de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	3b02      	subs	r3, #2
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d301      	bcc.n	80091f0 <clust2sect+0x20>
 80091ec:	2300      	movs	r3, #0
 80091ee:	e008      	b.n	8009202 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	895b      	ldrh	r3, [r3, #10]
 80091f4:	461a      	mov	r2, r3
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	fb03 f202 	mul.w	r2, r3, r2
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	4413      	add	r3, r2
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b086      	sub	sp, #24
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d904      	bls.n	800922e <get_fat+0x20>
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d302      	bcc.n	8009234 <get_fat+0x26>
		val = 1;	/* Internal error */
 800922e:	2301      	movs	r3, #1
 8009230:	617b      	str	r3, [r7, #20]
 8009232:	e08f      	b.n	8009354 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009234:	f04f 33ff 	mov.w	r3, #4294967295
 8009238:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b03      	cmp	r3, #3
 8009240:	d062      	beq.n	8009308 <get_fat+0xfa>
 8009242:	2b03      	cmp	r3, #3
 8009244:	dc7c      	bgt.n	8009340 <get_fat+0x132>
 8009246:	2b01      	cmp	r3, #1
 8009248:	d002      	beq.n	8009250 <get_fat+0x42>
 800924a:	2b02      	cmp	r3, #2
 800924c:	d042      	beq.n	80092d4 <get_fat+0xc6>
 800924e:	e077      	b.n	8009340 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	0a5b      	lsrs	r3, r3, #9
 8009266:	4413      	add	r3, r2
 8009268:	4619      	mov	r1, r3
 800926a:	6938      	ldr	r0, [r7, #16]
 800926c:	f7ff ff14 	bl	8009098 <move_window>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d167      	bne.n	8009346 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	60fa      	str	r2, [r7, #12]
 800927c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4413      	add	r3, r2
 8009284:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009288:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	0a5b      	lsrs	r3, r3, #9
 8009292:	4413      	add	r3, r2
 8009294:	4619      	mov	r1, r3
 8009296:	6938      	ldr	r0, [r7, #16]
 8009298:	f7ff fefe 	bl	8009098 <move_window>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d153      	bne.n	800934a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4413      	add	r3, r2
 80092ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	461a      	mov	r2, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <get_fat+0xbc>
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	091b      	lsrs	r3, r3, #4
 80092c8:	e002      	b.n	80092d0 <get_fat+0xc2>
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092d0:	617b      	str	r3, [r7, #20]
			break;
 80092d2:	e03f      	b.n	8009354 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	0a1b      	lsrs	r3, r3, #8
 80092dc:	4413      	add	r3, r2
 80092de:	4619      	mov	r1, r3
 80092e0:	6938      	ldr	r0, [r7, #16]
 80092e2:	f7ff fed9 	bl	8009098 <move_window>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d130      	bne.n	800934e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80092fa:	4413      	add	r3, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7ff fbe9 	bl	8008ad4 <ld_word>
 8009302:	4603      	mov	r3, r0
 8009304:	617b      	str	r3, [r7, #20]
			break;
 8009306:	e025      	b.n	8009354 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	09db      	lsrs	r3, r3, #7
 8009310:	4413      	add	r3, r2
 8009312:	4619      	mov	r1, r3
 8009314:	6938      	ldr	r0, [r7, #16]
 8009316:	f7ff febf 	bl	8009098 <move_window>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d118      	bne.n	8009352 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800932e:	4413      	add	r3, r2
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff fbe7 	bl	8008b04 <ld_dword>
 8009336:	4603      	mov	r3, r0
 8009338:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800933c:	617b      	str	r3, [r7, #20]
			break;
 800933e:	e009      	b.n	8009354 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009340:	2301      	movs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	e006      	b.n	8009354 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009346:	bf00      	nop
 8009348:	e004      	b.n	8009354 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800934a:	bf00      	nop
 800934c:	e002      	b.n	8009354 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800934e:	bf00      	nop
 8009350:	e000      	b.n	8009354 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009352:	bf00      	nop
		}
	}

	return val;
 8009354:	697b      	ldr	r3, [r7, #20]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800935e:	b590      	push	{r4, r7, lr}
 8009360:	b089      	sub	sp, #36	; 0x24
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800936a:	2302      	movs	r3, #2
 800936c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b01      	cmp	r3, #1
 8009372:	f240 80d2 	bls.w	800951a <put_fat+0x1bc>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	429a      	cmp	r2, r3
 800937e:	f080 80cc 	bcs.w	800951a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b03      	cmp	r3, #3
 8009388:	f000 8096 	beq.w	80094b8 <put_fat+0x15a>
 800938c:	2b03      	cmp	r3, #3
 800938e:	f300 80cd 	bgt.w	800952c <put_fat+0x1ce>
 8009392:	2b01      	cmp	r3, #1
 8009394:	d002      	beq.n	800939c <put_fat+0x3e>
 8009396:	2b02      	cmp	r3, #2
 8009398:	d06e      	beq.n	8009478 <put_fat+0x11a>
 800939a:	e0c7      	b.n	800952c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	61bb      	str	r3, [r7, #24]
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	085b      	lsrs	r3, r3, #1
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	4413      	add	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	0a5b      	lsrs	r3, r3, #9
 80093b2:	4413      	add	r3, r2
 80093b4:	4619      	mov	r1, r3
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff fe6e 	bl	8009098 <move_window>
 80093bc:	4603      	mov	r3, r0
 80093be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093c0:	7ffb      	ldrb	r3, [r7, #31]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f040 80ab 	bne.w	800951e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	1c59      	adds	r1, r3, #1
 80093d2:	61b9      	str	r1, [r7, #24]
 80093d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d8:	4413      	add	r3, r2
 80093da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00d      	beq.n	8009402 <put_fat+0xa4>
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	b25b      	sxtb	r3, r3
 80093ec:	f003 030f 	and.w	r3, r3, #15
 80093f0:	b25a      	sxtb	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	b25b      	sxtb	r3, r3
 80093fa:	4313      	orrs	r3, r2
 80093fc:	b25b      	sxtb	r3, r3
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	e001      	b.n	8009406 <put_fat+0xa8>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	b2db      	uxtb	r3, r3
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	0a5b      	lsrs	r3, r3, #9
 8009418:	4413      	add	r3, r2
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff fe3b 	bl	8009098 <move_window>
 8009422:	4603      	mov	r3, r0
 8009424:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009426:	7ffb      	ldrb	r3, [r7, #31]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d17a      	bne.n	8009522 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009438:	4413      	add	r3, r2
 800943a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <put_fat+0xf0>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	091b      	lsrs	r3, r3, #4
 800944a:	b2db      	uxtb	r3, r3
 800944c:	e00e      	b.n	800946c <put_fat+0x10e>
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b25b      	sxtb	r3, r3
 8009454:	f023 030f 	bic.w	r3, r3, #15
 8009458:	b25a      	sxtb	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	0a1b      	lsrs	r3, r3, #8
 800945e:	b25b      	sxtb	r3, r3
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	b25b      	sxtb	r3, r3
 8009466:	4313      	orrs	r3, r2
 8009468:	b25b      	sxtb	r3, r3
 800946a:	b2db      	uxtb	r3, r3
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	70da      	strb	r2, [r3, #3]
			break;
 8009476:	e059      	b.n	800952c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	0a1b      	lsrs	r3, r3, #8
 8009480:	4413      	add	r3, r2
 8009482:	4619      	mov	r1, r3
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f7ff fe07 	bl	8009098 <move_window>
 800948a:	4603      	mov	r3, r0
 800948c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800948e:	7ffb      	ldrb	r3, [r7, #31]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d148      	bne.n	8009526 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80094a2:	4413      	add	r3, r2
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	b292      	uxth	r2, r2
 80094a8:	4611      	mov	r1, r2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7ff fb4d 	bl	8008b4a <st_word>
			fs->wflag = 1;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	70da      	strb	r2, [r3, #3]
			break;
 80094b6:	e039      	b.n	800952c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	09db      	lsrs	r3, r3, #7
 80094c0:	4413      	add	r3, r2
 80094c2:	4619      	mov	r1, r3
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff fde7 	bl	8009098 <move_window>
 80094ca:	4603      	mov	r3, r0
 80094cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094ce:	7ffb      	ldrb	r3, [r7, #31]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d12a      	bne.n	800952a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80094e8:	4413      	add	r3, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fb0a 	bl	8008b04 <ld_dword>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80094f6:	4323      	orrs	r3, r4
 80094f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009508:	4413      	add	r3, r2
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff fb37 	bl	8008b80 <st_dword>
			fs->wflag = 1;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	70da      	strb	r2, [r3, #3]
			break;
 8009518:	e008      	b.n	800952c <put_fat+0x1ce>
		}
	}
 800951a:	bf00      	nop
 800951c:	e006      	b.n	800952c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800951e:	bf00      	nop
 8009520:	e004      	b.n	800952c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009522:	bf00      	nop
 8009524:	e002      	b.n	800952c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800952a:	bf00      	nop
	return res;
 800952c:	7ffb      	ldrb	r3, [r7, #31]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3724      	adds	r7, #36	; 0x24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd90      	pop	{r4, r7, pc}

08009536 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b088      	sub	sp, #32
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d904      	bls.n	800955c <remove_chain+0x26>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	429a      	cmp	r2, r3
 800955a:	d301      	bcc.n	8009560 <remove_chain+0x2a>
 800955c:	2302      	movs	r3, #2
 800955e:	e04b      	b.n	80095f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00c      	beq.n	8009580 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009566:	f04f 32ff 	mov.w	r2, #4294967295
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	69b8      	ldr	r0, [r7, #24]
 800956e:	f7ff fef6 	bl	800935e <put_fat>
 8009572:	4603      	mov	r3, r0
 8009574:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009576:	7ffb      	ldrb	r3, [r7, #31]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <remove_chain+0x4a>
 800957c:	7ffb      	ldrb	r3, [r7, #31]
 800957e:	e03b      	b.n	80095f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009580:	68b9      	ldr	r1, [r7, #8]
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f7ff fe43 	bl	800920e <get_fat>
 8009588:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d031      	beq.n	80095f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <remove_chain+0x64>
 8009596:	2302      	movs	r3, #2
 8009598:	e02e      	b.n	80095f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a0:	d101      	bne.n	80095a6 <remove_chain+0x70>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e028      	b.n	80095f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80095a6:	2200      	movs	r2, #0
 80095a8:	68b9      	ldr	r1, [r7, #8]
 80095aa:	69b8      	ldr	r0, [r7, #24]
 80095ac:	f7ff fed7 	bl	800935e <put_fat>
 80095b0:	4603      	mov	r3, r0
 80095b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80095b4:	7ffb      	ldrb	r3, [r7, #31]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <remove_chain+0x88>
 80095ba:	7ffb      	ldrb	r3, [r7, #31]
 80095bc:	e01c      	b.n	80095f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	695a      	ldr	r2, [r3, #20]
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	3b02      	subs	r3, #2
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d20b      	bcs.n	80095e4 <remove_chain+0xae>
			fs->free_clst++;
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	791b      	ldrb	r3, [r3, #4]
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d3c6      	bcc.n	8009580 <remove_chain+0x4a>
 80095f2:	e000      	b.n	80095f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80095f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3720      	adds	r7, #32
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10d      	bne.n	8009632 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d004      	beq.n	800962c <create_chain+0x2c>
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	429a      	cmp	r2, r3
 800962a:	d31b      	bcc.n	8009664 <create_chain+0x64>
 800962c:	2301      	movs	r3, #1
 800962e:	61bb      	str	r3, [r7, #24]
 8009630:	e018      	b.n	8009664 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff fdea 	bl	800920e <get_fat>
 800963a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d801      	bhi.n	8009646 <create_chain+0x46>
 8009642:	2301      	movs	r3, #1
 8009644:	e070      	b.n	8009728 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d101      	bne.n	8009652 <create_chain+0x52>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	e06a      	b.n	8009728 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	429a      	cmp	r2, r3
 800965a:	d201      	bcs.n	8009660 <create_chain+0x60>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	e063      	b.n	8009728 <create_chain+0x128>
		scl = clst;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	3301      	adds	r3, #1
 800966c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	429a      	cmp	r2, r3
 8009676:	d307      	bcc.n	8009688 <create_chain+0x88>
				ncl = 2;
 8009678:	2302      	movs	r3, #2
 800967a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	429a      	cmp	r2, r3
 8009682:	d901      	bls.n	8009688 <create_chain+0x88>
 8009684:	2300      	movs	r3, #0
 8009686:	e04f      	b.n	8009728 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009688:	69f9      	ldr	r1, [r7, #28]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff fdbf 	bl	800920e <get_fat>
 8009690:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00e      	beq.n	80096b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d003      	beq.n	80096a6 <create_chain+0xa6>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a4:	d101      	bne.n	80096aa <create_chain+0xaa>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	e03e      	b.n	8009728 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d1da      	bne.n	8009668 <create_chain+0x68>
 80096b2:	2300      	movs	r3, #0
 80096b4:	e038      	b.n	8009728 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80096b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80096b8:	f04f 32ff 	mov.w	r2, #4294967295
 80096bc:	69f9      	ldr	r1, [r7, #28]
 80096be:	6938      	ldr	r0, [r7, #16]
 80096c0:	f7ff fe4d 	bl	800935e <put_fat>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80096c8:	7dfb      	ldrb	r3, [r7, #23]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d109      	bne.n	80096e2 <create_chain+0xe2>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d006      	beq.n	80096e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6938      	ldr	r0, [r7, #16]
 80096da:	f7ff fe40 	bl	800935e <put_fat>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d116      	bne.n	8009716 <create_chain+0x116>
		fs->last_clst = ncl;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	695a      	ldr	r2, [r3, #20]
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	3b02      	subs	r3, #2
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d804      	bhi.n	8009706 <create_chain+0x106>
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	1e5a      	subs	r2, r3, #1
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	791b      	ldrb	r3, [r3, #4]
 800970a:	f043 0301 	orr.w	r3, r3, #1
 800970e:	b2da      	uxtb	r2, r3
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	711a      	strb	r2, [r3, #4]
 8009714:	e007      	b.n	8009726 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d102      	bne.n	8009722 <create_chain+0x122>
 800971c:	f04f 33ff 	mov.w	r3, #4294967295
 8009720:	e000      	b.n	8009724 <create_chain+0x124>
 8009722:	2301      	movs	r3, #1
 8009724:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009726:	69fb      	ldr	r3, [r7, #28]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3720      	adds	r7, #32
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	3304      	adds	r3, #4
 8009746:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	0a5b      	lsrs	r3, r3, #9
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	8952      	ldrh	r2, [r2, #10]
 8009750:	fbb3 f3f2 	udiv	r3, r3, r2
 8009754:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	1d1a      	adds	r2, r3, #4
 800975a:	613a      	str	r2, [r7, #16]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <clmt_clust+0x3a>
 8009766:	2300      	movs	r3, #0
 8009768:	e010      	b.n	800978c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	429a      	cmp	r2, r3
 8009770:	d307      	bcc.n	8009782 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	617b      	str	r3, [r7, #20]
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	3304      	adds	r3, #4
 800977e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009780:	e7e9      	b.n	8009756 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009782:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	4413      	add	r3, r2
}
 800978c:	4618      	mov	r0, r3
 800978e:	371c      	adds	r7, #28
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ae:	d204      	bcs.n	80097ba <dir_sdi+0x22>
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	f003 031f 	and.w	r3, r3, #31
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <dir_sdi+0x26>
		return FR_INT_ERR;
 80097ba:	2302      	movs	r3, #2
 80097bc:	e063      	b.n	8009886 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d106      	bne.n	80097de <dir_sdi+0x46>
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d902      	bls.n	80097de <dir_sdi+0x46>
		clst = fs->dirbase;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097dc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10c      	bne.n	80097fe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	095b      	lsrs	r3, r3, #5
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	8912      	ldrh	r2, [r2, #8]
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d301      	bcc.n	80097f4 <dir_sdi+0x5c>
 80097f0:	2302      	movs	r3, #2
 80097f2:	e048      	b.n	8009886 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	61da      	str	r2, [r3, #28]
 80097fc:	e029      	b.n	8009852 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	895b      	ldrh	r3, [r3, #10]
 8009802:	025b      	lsls	r3, r3, #9
 8009804:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009806:	e019      	b.n	800983c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6979      	ldr	r1, [r7, #20]
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff fcfe 	bl	800920e <get_fat>
 8009812:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d101      	bne.n	8009820 <dir_sdi+0x88>
 800981c:	2301      	movs	r3, #1
 800981e:	e032      	b.n	8009886 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d904      	bls.n	8009830 <dir_sdi+0x98>
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	429a      	cmp	r2, r3
 800982e:	d301      	bcc.n	8009834 <dir_sdi+0x9c>
 8009830:	2302      	movs	r3, #2
 8009832:	e028      	b.n	8009886 <dir_sdi+0xee>
			ofs -= csz;
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	429a      	cmp	r2, r3
 8009842:	d2e1      	bcs.n	8009808 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009844:	6979      	ldr	r1, [r7, #20]
 8009846:	6938      	ldr	r0, [r7, #16]
 8009848:	f7ff fcc2 	bl	80091d0 <clust2sect>
 800984c:	4602      	mov	r2, r0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <dir_sdi+0xcc>
 8009860:	2302      	movs	r3, #2
 8009862:	e010      	b.n	8009886 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	69da      	ldr	r2, [r3, #28]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	0a5b      	lsrs	r3, r3, #9
 800986c:	441a      	add	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987e:	441a      	add	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b086      	sub	sp, #24
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	3320      	adds	r3, #32
 80098a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	69db      	ldr	r3, [r3, #28]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <dir_next+0x28>
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098b4:	d301      	bcc.n	80098ba <dir_next+0x2c>
 80098b6:	2304      	movs	r3, #4
 80098b8:	e0aa      	b.n	8009a10 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 8098 	bne.w	80099f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10b      	bne.n	80098f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	8912      	ldrh	r2, [r2, #8]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	f0c0 8088 	bcc.w	80099f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	61da      	str	r2, [r3, #28]
 80098ec:	2304      	movs	r3, #4
 80098ee:	e08f      	b.n	8009a10 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	0a5b      	lsrs	r3, r3, #9
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	8952      	ldrh	r2, [r2, #10]
 80098f8:	3a01      	subs	r2, #1
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d17a      	bne.n	80099f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f7ff fc80 	bl	800920e <get_fat>
 800990e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d801      	bhi.n	800991a <dir_next+0x8c>
 8009916:	2302      	movs	r3, #2
 8009918:	e07a      	b.n	8009a10 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d101      	bne.n	8009926 <dir_next+0x98>
 8009922:	2301      	movs	r3, #1
 8009924:	e074      	b.n	8009a10 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	429a      	cmp	r2, r3
 800992e:	d358      	bcc.n	80099e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d104      	bne.n	8009940 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	61da      	str	r2, [r3, #28]
 800993c:	2304      	movs	r3, #4
 800993e:	e067      	b.n	8009a10 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	4619      	mov	r1, r3
 8009948:	4610      	mov	r0, r2
 800994a:	f7ff fe59 	bl	8009600 <create_chain>
 800994e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <dir_next+0xcc>
 8009956:	2307      	movs	r3, #7
 8009958:	e05a      	b.n	8009a10 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d101      	bne.n	8009964 <dir_next+0xd6>
 8009960:	2302      	movs	r3, #2
 8009962:	e055      	b.n	8009a10 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996a:	d101      	bne.n	8009970 <dir_next+0xe2>
 800996c:	2301      	movs	r3, #1
 800996e:	e04f      	b.n	8009a10 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f7ff fb4d 	bl	8009010 <sync_window>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <dir_next+0xf2>
 800997c:	2301      	movs	r3, #1
 800997e:	e047      	b.n	8009a10 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3334      	adds	r3, #52	; 0x34
 8009984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009988:	2100      	movs	r1, #0
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff f945 	bl	8008c1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009990:	2300      	movs	r3, #0
 8009992:	613b      	str	r3, [r7, #16]
 8009994:	6979      	ldr	r1, [r7, #20]
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f7ff fc1a 	bl	80091d0 <clust2sect>
 800999c:	4602      	mov	r2, r0
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	631a      	str	r2, [r3, #48]	; 0x30
 80099a2:	e012      	b.n	80099ca <dir_next+0x13c>
						fs->wflag = 1;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2201      	movs	r2, #1
 80099a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fb30 	bl	8009010 <sync_window>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <dir_next+0x12c>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e02a      	b.n	8009a10 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	3301      	adds	r3, #1
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	631a      	str	r2, [r3, #48]	; 0x30
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	895b      	ldrh	r3, [r3, #10]
 80099ce:	461a      	mov	r2, r3
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d3e6      	bcc.n	80099a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	1ad2      	subs	r2, r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80099e8:	6979      	ldr	r1, [r7, #20]
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f7ff fbf0 	bl	80091d0 <clust2sect>
 80099f0:	4602      	mov	r2, r0
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a08:	441a      	add	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009a28:	2100      	movs	r1, #0
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff feb4 	bl	8009798 <dir_sdi>
 8009a30:	4603      	mov	r3, r0
 8009a32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d12b      	bne.n	8009a92 <dir_alloc+0x7a>
		n = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	4619      	mov	r1, r3
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7ff fb27 	bl	8009098 <move_window>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d11d      	bne.n	8009a90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2be5      	cmp	r3, #229	; 0xe5
 8009a5c:	d004      	beq.n	8009a68 <dir_alloc+0x50>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d107      	bne.n	8009a78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	613b      	str	r3, [r7, #16]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d102      	bne.n	8009a7c <dir_alloc+0x64>
 8009a76:	e00c      	b.n	8009a92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009a78:	2300      	movs	r3, #0
 8009a7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff ff05 	bl	800988e <dir_next>
 8009a84:	4603      	mov	r3, r0
 8009a86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0d7      	beq.n	8009a3e <dir_alloc+0x26>
 8009a8e:	e000      	b.n	8009a92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009a90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	2b04      	cmp	r3, #4
 8009a96:	d101      	bne.n	8009a9c <dir_alloc+0x84>
 8009a98:	2307      	movs	r3, #7
 8009a9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3718      	adds	r7, #24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	331a      	adds	r3, #26
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff f80d 	bl	8008ad4 <ld_word>
 8009aba:	4603      	mov	r3, r0
 8009abc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d109      	bne.n	8009ada <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	3314      	adds	r3, #20
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff f802 	bl	8008ad4 <ld_word>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	041b      	lsls	r3, r3, #16
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009ada:	68fb      	ldr	r3, [r7, #12]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	331a      	adds	r3, #26
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	b292      	uxth	r2, r2
 8009af8:	4611      	mov	r1, r2
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff f825 	bl	8008b4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d109      	bne.n	8009b1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f103 0214 	add.w	r2, r3, #20
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	0c1b      	lsrs	r3, r3, #16
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	4610      	mov	r0, r2
 8009b18:	f7ff f817 	bl	8008b4a <st_word>
	}
}
 8009b1c:	bf00      	nop
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b32:	2100      	movs	r1, #0
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff fe2f 	bl	8009798 <dir_sdi>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <dir_find+0x24>
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	e03e      	b.n	8009bc6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6938      	ldr	r0, [r7, #16]
 8009b50:	f7ff faa2 	bl	8009098 <move_window>
 8009b54:	4603      	mov	r3, r0
 8009b56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d12f      	bne.n	8009bbe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <dir_find+0x4e>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	75fb      	strb	r3, [r7, #23]
 8009b70:	e028      	b.n	8009bc4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	330b      	adds	r3, #11
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	330b      	adds	r3, #11
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 0308 	and.w	r3, r3, #8
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <dir_find+0x86>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a18      	ldr	r0, [r3, #32]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3324      	adds	r3, #36	; 0x24
 8009b9c:	220b      	movs	r2, #11
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	f7ff f856 	bl	8008c50 <mem_cmp>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00b      	beq.n	8009bc2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009baa:	2100      	movs	r1, #0
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff fe6e 	bl	800988e <dir_next>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0c5      	beq.n	8009b48 <dir_find+0x24>
 8009bbc:	e002      	b.n	8009bc4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009bc2:	bf00      	nop

	return res;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009bdc:	2101      	movs	r1, #1
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff ff1a 	bl	8009a18 <dir_alloc>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d11c      	bne.n	8009c28 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	68b8      	ldr	r0, [r7, #8]
 8009bf6:	f7ff fa4f 	bl	8009098 <move_window>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d111      	bne.n	8009c28 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7ff f804 	bl	8008c1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a18      	ldr	r0, [r3, #32]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3324      	adds	r3, #36	; 0x24
 8009c1a:	220b      	movs	r2, #11
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f7fe ffdb 	bl	8008bd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2201      	movs	r2, #1
 8009c26:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3324      	adds	r3, #36	; 0x24
 8009c48:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009c4a:	220b      	movs	r2, #11
 8009c4c:	2120      	movs	r1, #32
 8009c4e:	68b8      	ldr	r0, [r7, #8]
 8009c50:	f7fe ffe3 	bl	8008c1a <mem_set>
	si = i = 0; ni = 8;
 8009c54:	2300      	movs	r3, #0
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	61fb      	str	r3, [r7, #28]
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	61fa      	str	r2, [r7, #28]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009c6e:	7efb      	ldrb	r3, [r7, #27]
 8009c70:	2b20      	cmp	r3, #32
 8009c72:	d94e      	bls.n	8009d12 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009c74:	7efb      	ldrb	r3, [r7, #27]
 8009c76:	2b2f      	cmp	r3, #47	; 0x2f
 8009c78:	d006      	beq.n	8009c88 <create_name+0x54>
 8009c7a:	7efb      	ldrb	r3, [r7, #27]
 8009c7c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c7e:	d110      	bne.n	8009ca2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009c80:	e002      	b.n	8009c88 <create_name+0x54>
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	3301      	adds	r3, #1
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b2f      	cmp	r3, #47	; 0x2f
 8009c92:	d0f6      	beq.n	8009c82 <create_name+0x4e>
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	4413      	add	r3, r2
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c9e:	d0f0      	beq.n	8009c82 <create_name+0x4e>
			break;
 8009ca0:	e038      	b.n	8009d14 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009ca2:	7efb      	ldrb	r3, [r7, #27]
 8009ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ca6:	d003      	beq.n	8009cb0 <create_name+0x7c>
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d30c      	bcc.n	8009cca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b0b      	cmp	r3, #11
 8009cb4:	d002      	beq.n	8009cbc <create_name+0x88>
 8009cb6:	7efb      	ldrb	r3, [r7, #27]
 8009cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8009cba:	d001      	beq.n	8009cc0 <create_name+0x8c>
 8009cbc:	2306      	movs	r3, #6
 8009cbe:	e044      	b.n	8009d4a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	613b      	str	r3, [r7, #16]
 8009cc4:	230b      	movs	r3, #11
 8009cc6:	617b      	str	r3, [r7, #20]
			continue;
 8009cc8:	e022      	b.n	8009d10 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009cca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da04      	bge.n	8009cdc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009cd2:	7efb      	ldrb	r3, [r7, #27]
 8009cd4:	3b80      	subs	r3, #128	; 0x80
 8009cd6:	4a1f      	ldr	r2, [pc, #124]	; (8009d54 <create_name+0x120>)
 8009cd8:	5cd3      	ldrb	r3, [r2, r3]
 8009cda:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009cdc:	7efb      	ldrb	r3, [r7, #27]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	481d      	ldr	r0, [pc, #116]	; (8009d58 <create_name+0x124>)
 8009ce2:	f7fe ffdc 	bl	8008c9e <chk_chr>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <create_name+0xbc>
 8009cec:	2306      	movs	r3, #6
 8009cee:	e02c      	b.n	8009d4a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009cf0:	7efb      	ldrb	r3, [r7, #27]
 8009cf2:	2b60      	cmp	r3, #96	; 0x60
 8009cf4:	d905      	bls.n	8009d02 <create_name+0xce>
 8009cf6:	7efb      	ldrb	r3, [r7, #27]
 8009cf8:	2b7a      	cmp	r3, #122	; 0x7a
 8009cfa:	d802      	bhi.n	8009d02 <create_name+0xce>
 8009cfc:	7efb      	ldrb	r3, [r7, #27]
 8009cfe:	3b20      	subs	r3, #32
 8009d00:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	613a      	str	r2, [r7, #16]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	7efa      	ldrb	r2, [r7, #27]
 8009d0e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009d10:	e7a6      	b.n	8009c60 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d12:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	441a      	add	r2, r3
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <create_name+0xf4>
 8009d24:	2306      	movs	r3, #6
 8009d26:	e010      	b.n	8009d4a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2be5      	cmp	r3, #229	; 0xe5
 8009d2e:	d102      	bne.n	8009d36 <create_name+0x102>
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2205      	movs	r2, #5
 8009d34:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d36:	7efb      	ldrb	r3, [r7, #27]
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	d801      	bhi.n	8009d40 <create_name+0x10c>
 8009d3c:	2204      	movs	r2, #4
 8009d3e:	e000      	b.n	8009d42 <create_name+0x10e>
 8009d40:	2200      	movs	r2, #0
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	330b      	adds	r3, #11
 8009d46:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009d48:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3720      	adds	r7, #32
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	08016044 	.word	0x08016044
 8009d58:	08015e64 	.word	0x08015e64

08009d5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009d70:	e002      	b.n	8009d78 <follow_path+0x1c>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	3301      	adds	r3, #1
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b2f      	cmp	r3, #47	; 0x2f
 8009d7e:	d0f8      	beq.n	8009d72 <follow_path+0x16>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b5c      	cmp	r3, #92	; 0x5c
 8009d86:	d0f4      	beq.n	8009d72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	2b1f      	cmp	r3, #31
 8009d94:	d80a      	bhi.n	8009dac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2280      	movs	r2, #128	; 0x80
 8009d9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff fcf9 	bl	8009798 <dir_sdi>
 8009da6:	4603      	mov	r3, r0
 8009da8:	75fb      	strb	r3, [r7, #23]
 8009daa:	e043      	b.n	8009e34 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009dac:	463b      	mov	r3, r7
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff ff3f 	bl	8009c34 <create_name>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d134      	bne.n	8009e2a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff feaf 	bl	8009b24 <dir_find>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009dd0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00a      	beq.n	8009dee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d127      	bne.n	8009e2e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009dde:	7afb      	ldrb	r3, [r7, #11]
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d122      	bne.n	8009e2e <follow_path+0xd2>
 8009de8:	2305      	movs	r3, #5
 8009dea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009dec:	e01f      	b.n	8009e2e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009dee:	7afb      	ldrb	r3, [r7, #11]
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d11c      	bne.n	8009e32 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	799b      	ldrb	r3, [r3, #6]
 8009dfc:	f003 0310 	and.w	r3, r3, #16
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009e04:	2305      	movs	r3, #5
 8009e06:	75fb      	strb	r3, [r7, #23]
 8009e08:	e014      	b.n	8009e34 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e18:	4413      	add	r3, r2
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7ff fe42 	bl	8009aa6 <ld_clust>
 8009e22:	4602      	mov	r2, r0
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e28:	e7c0      	b.n	8009dac <follow_path+0x50>
			if (res != FR_OK) break;
 8009e2a:	bf00      	nop
 8009e2c:	e002      	b.n	8009e34 <follow_path+0xd8>
				break;
 8009e2e:	bf00      	nop
 8009e30:	e000      	b.n	8009e34 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e32:	bf00      	nop
			}
		}
	}

	return res;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b087      	sub	sp, #28
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009e46:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d031      	beq.n	8009eb8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	e002      	b.n	8009e62 <get_ldnumber+0x24>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	2b20      	cmp	r3, #32
 8009e68:	d903      	bls.n	8009e72 <get_ldnumber+0x34>
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b3a      	cmp	r3, #58	; 0x3a
 8009e70:	d1f4      	bne.n	8009e5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b3a      	cmp	r3, #58	; 0x3a
 8009e78:	d11c      	bne.n	8009eb4 <get_ldnumber+0x76>
			tp = *path;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	60fa      	str	r2, [r7, #12]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	3b30      	subs	r3, #48	; 0x30
 8009e8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2b09      	cmp	r3, #9
 8009e90:	d80e      	bhi.n	8009eb0 <get_ldnumber+0x72>
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d10a      	bne.n	8009eb0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d107      	bne.n	8009eb0 <get_ldnumber+0x72>
					vol = (int)i;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	e002      	b.n	8009eba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009eb8:	693b      	ldr	r3, [r7, #16]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	371c      	adds	r7, #28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
	...

08009ec8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	70da      	strb	r2, [r3, #3]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f04f 32ff 	mov.w	r2, #4294967295
 8009ede:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff f8d8 	bl	8009098 <move_window>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <check_fs+0x2a>
 8009eee:	2304      	movs	r3, #4
 8009ef0:	e038      	b.n	8009f64 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3334      	adds	r3, #52	; 0x34
 8009ef6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fe fdea 	bl	8008ad4 <ld_word>
 8009f00:	4603      	mov	r3, r0
 8009f02:	461a      	mov	r2, r3
 8009f04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d001      	beq.n	8009f10 <check_fs+0x48>
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e029      	b.n	8009f64 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f16:	2be9      	cmp	r3, #233	; 0xe9
 8009f18:	d009      	beq.n	8009f2e <check_fs+0x66>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f20:	2beb      	cmp	r3, #235	; 0xeb
 8009f22:	d11e      	bne.n	8009f62 <check_fs+0x9a>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009f2a:	2b90      	cmp	r3, #144	; 0x90
 8009f2c:	d119      	bne.n	8009f62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3334      	adds	r3, #52	; 0x34
 8009f32:	3336      	adds	r3, #54	; 0x36
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fde5 	bl	8008b04 <ld_dword>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009f40:	4a0a      	ldr	r2, [pc, #40]	; (8009f6c <check_fs+0xa4>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d101      	bne.n	8009f4a <check_fs+0x82>
 8009f46:	2300      	movs	r3, #0
 8009f48:	e00c      	b.n	8009f64 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3334      	adds	r3, #52	; 0x34
 8009f4e:	3352      	adds	r3, #82	; 0x52
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fe fdd7 	bl	8008b04 <ld_dword>
 8009f56:	4603      	mov	r3, r0
 8009f58:	4a05      	ldr	r2, [pc, #20]	; (8009f70 <check_fs+0xa8>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d101      	bne.n	8009f62 <check_fs+0x9a>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e000      	b.n	8009f64 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009f62:	2302      	movs	r3, #2
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	00544146 	.word	0x00544146
 8009f70:	33544146 	.word	0x33544146

08009f74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b096      	sub	sp, #88	; 0x58
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f7ff ff58 	bl	8009e3e <get_ldnumber>
 8009f8e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	da01      	bge.n	8009f9a <find_volume+0x26>
 8009f96:	230b      	movs	r3, #11
 8009f98:	e236      	b.n	800a408 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009f9a:	4aac      	ldr	r2, [pc, #688]	; (800a24c <find_volume+0x2d8>)
 8009f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fa2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <find_volume+0x3a>
 8009faa:	230c      	movs	r3, #12
 8009fac:	e22c      	b.n	800a408 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8009fae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fb0:	f7fe fe90 	bl	8008cd4 <lock_fs>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <find_volume+0x4a>
 8009fba:	230f      	movs	r3, #15
 8009fbc:	e224      	b.n	800a408 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fc2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	f023 0301 	bic.w	r3, r3, #1
 8009fca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01a      	beq.n	800a00a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	785b      	ldrb	r3, [r3, #1]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fe fcdd 	bl	8008998 <disk_status>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10c      	bne.n	800a00a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d007      	beq.n	800a006 <find_volume+0x92>
 8009ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a002:	230a      	movs	r3, #10
 800a004:	e200      	b.n	800a408 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800a006:	2300      	movs	r3, #0
 800a008:	e1fe      	b.n	800a408 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	2200      	movs	r2, #0
 800a00e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a012:	b2da      	uxtb	r2, r3
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	785b      	ldrb	r3, [r3, #1]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe fcd5 	bl	80089cc <disk_initialize>
 800a022:	4603      	mov	r3, r0
 800a024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a034:	2303      	movs	r3, #3
 800a036:	e1e7      	b.n	800a408 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d007      	beq.n	800a04e <find_volume+0xda>
 800a03e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a042:	f003 0304 	and.w	r3, r3, #4
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a04a:	230a      	movs	r3, #10
 800a04c:	e1dc      	b.n	800a408 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a052:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a056:	f7ff ff37 	bl	8009ec8 <check_fs>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a064:	2b02      	cmp	r3, #2
 800a066:	d14b      	bne.n	800a100 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a068:	2300      	movs	r3, #0
 800a06a:	643b      	str	r3, [r7, #64]	; 0x40
 800a06c:	e01f      	b.n	800a0ae <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a07c:	4413      	add	r3, r2
 800a07e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	3304      	adds	r3, #4
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d006      	beq.n	800a098 <find_volume+0x124>
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	3308      	adds	r3, #8
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe fd38 	bl	8008b04 <ld_dword>
 800a094:	4602      	mov	r2, r0
 800a096:	e000      	b.n	800a09a <find_volume+0x126>
 800a098:	2200      	movs	r2, #0
 800a09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a0a2:	440b      	add	r3, r1
 800a0a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d9dc      	bls.n	800a06e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <find_volume+0x150>
 800a0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a0d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d005      	beq.n	800a0e6 <find_volume+0x172>
 800a0da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0de:	f7ff fef3 	bl	8009ec8 <check_fs>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	e000      	b.n	800a0e8 <find_volume+0x174>
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d905      	bls.n	800a100 <find_volume+0x18c>
 800a0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	643b      	str	r3, [r7, #64]	; 0x40
 800a0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d9e1      	bls.n	800a0c4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a100:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a104:	2b04      	cmp	r3, #4
 800a106:	d101      	bne.n	800a10c <find_volume+0x198>
 800a108:	2301      	movs	r3, #1
 800a10a:	e17d      	b.n	800a408 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a10c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a110:	2b01      	cmp	r3, #1
 800a112:	d901      	bls.n	800a118 <find_volume+0x1a4>
 800a114:	230d      	movs	r3, #13
 800a116:	e177      	b.n	800a408 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	3334      	adds	r3, #52	; 0x34
 800a11c:	330b      	adds	r3, #11
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe fcd8 	bl	8008ad4 <ld_word>
 800a124:	4603      	mov	r3, r0
 800a126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a12a:	d001      	beq.n	800a130 <find_volume+0x1bc>
 800a12c:	230d      	movs	r3, #13
 800a12e:	e16b      	b.n	800a408 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	3334      	adds	r3, #52	; 0x34
 800a134:	3316      	adds	r3, #22
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe fccc 	bl	8008ad4 <ld_word>
 800a13c:	4603      	mov	r3, r0
 800a13e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d106      	bne.n	800a154 <find_volume+0x1e0>
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	3334      	adds	r3, #52	; 0x34
 800a14a:	3324      	adds	r3, #36	; 0x24
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fe fcd9 	bl	8008b04 <ld_dword>
 800a152:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a158:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a166:	789b      	ldrb	r3, [r3, #2]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d005      	beq.n	800a178 <find_volume+0x204>
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	789b      	ldrb	r3, [r3, #2]
 800a170:	2b02      	cmp	r3, #2
 800a172:	d001      	beq.n	800a178 <find_volume+0x204>
 800a174:	230d      	movs	r3, #13
 800a176:	e147      	b.n	800a408 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	789b      	ldrb	r3, [r3, #2]
 800a17c:	461a      	mov	r2, r3
 800a17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a180:	fb02 f303 	mul.w	r3, r2, r3
 800a184:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	895b      	ldrh	r3, [r3, #10]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d008      	beq.n	800a1ac <find_volume+0x238>
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	895b      	ldrh	r3, [r3, #10]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	895b      	ldrh	r3, [r3, #10]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <find_volume+0x23c>
 800a1ac:	230d      	movs	r3, #13
 800a1ae:	e12b      	b.n	800a408 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	3334      	adds	r3, #52	; 0x34
 800a1b4:	3311      	adds	r3, #17
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe fc8c 	bl	8008ad4 <ld_word>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	891b      	ldrh	r3, [r3, #8]
 800a1c8:	f003 030f 	and.w	r3, r3, #15
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <find_volume+0x262>
 800a1d2:	230d      	movs	r3, #13
 800a1d4:	e118      	b.n	800a408 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d8:	3334      	adds	r3, #52	; 0x34
 800a1da:	3313      	adds	r3, #19
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe fc79 	bl	8008ad4 <ld_word>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a1e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d106      	bne.n	800a1fa <find_volume+0x286>
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	3334      	adds	r3, #52	; 0x34
 800a1f0:	3320      	adds	r3, #32
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fc86 	bl	8008b04 <ld_dword>
 800a1f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	3334      	adds	r3, #52	; 0x34
 800a1fe:	330e      	adds	r3, #14
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe fc67 	bl	8008ad4 <ld_word>
 800a206:	4603      	mov	r3, r0
 800a208:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a20a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <find_volume+0x2a0>
 800a210:	230d      	movs	r3, #13
 800a212:	e0f9      	b.n	800a408 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a214:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a218:	4413      	add	r3, r2
 800a21a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a21c:	8912      	ldrh	r2, [r2, #8]
 800a21e:	0912      	lsrs	r2, r2, #4
 800a220:	b292      	uxth	r2, r2
 800a222:	4413      	add	r3, r2
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d201      	bcs.n	800a232 <find_volume+0x2be>
 800a22e:	230d      	movs	r3, #13
 800a230:	e0ea      	b.n	800a408 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a23a:	8952      	ldrh	r2, [r2, #10]
 800a23c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a240:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <find_volume+0x2dc>
 800a248:	230d      	movs	r3, #13
 800a24a:	e0dd      	b.n	800a408 <find_volume+0x494>
 800a24c:	20000390 	.word	0x20000390
		fmt = FS_FAT32;
 800a250:	2303      	movs	r3, #3
 800a252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d802      	bhi.n	800a266 <find_volume+0x2f2>
 800a260:	2302      	movs	r3, #2
 800a262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a268:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d802      	bhi.n	800a276 <find_volume+0x302>
 800a270:	2301      	movs	r3, #1
 800a272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	1c9a      	adds	r2, r3, #2
 800a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a282:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a284:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a288:	441a      	add	r2, r3
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a28e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	441a      	add	r2, r3
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d11e      	bne.n	800a2de <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	3334      	adds	r3, #52	; 0x34
 800a2a4:	332a      	adds	r3, #42	; 0x2a
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fe fc14 	bl	8008ad4 <ld_word>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <find_volume+0x342>
 800a2b2:	230d      	movs	r3, #13
 800a2b4:	e0a8      	b.n	800a408 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b8:	891b      	ldrh	r3, [r3, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <find_volume+0x34e>
 800a2be:	230d      	movs	r3, #13
 800a2c0:	e0a2      	b.n	800a408 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	3334      	adds	r3, #52	; 0x34
 800a2c6:	332c      	adds	r3, #44	; 0x2c
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fe fc1b 	bl	8008b04 <ld_dword>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	647b      	str	r3, [r7, #68]	; 0x44
 800a2dc:	e01f      	b.n	800a31e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	891b      	ldrh	r3, [r3, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <find_volume+0x376>
 800a2e6:	230d      	movs	r3, #13
 800a2e8:	e08e      	b.n	800a408 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f0:	441a      	add	r2, r3
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a2f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d103      	bne.n	800a306 <find_volume+0x392>
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	e00a      	b.n	800a31c <find_volume+0x3a8>
 800a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a308:	699a      	ldr	r2, [r3, #24]
 800a30a:	4613      	mov	r3, r2
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	4413      	add	r3, r2
 800a310:	085a      	lsrs	r2, r3, #1
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a31c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	69da      	ldr	r2, [r3, #28]
 800a322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a324:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a328:	0a5b      	lsrs	r3, r3, #9
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d201      	bcs.n	800a332 <find_volume+0x3be>
 800a32e:	230d      	movs	r3, #13
 800a330:	e06a      	b.n	800a408 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a334:	f04f 32ff 	mov.w	r2, #4294967295
 800a338:	615a      	str	r2, [r3, #20]
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	695a      	ldr	r2, [r3, #20]
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	2280      	movs	r2, #128	; 0x80
 800a346:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d149      	bne.n	800a3e4 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	3334      	adds	r3, #52	; 0x34
 800a354:	3330      	adds	r3, #48	; 0x30
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe fbbc 	bl	8008ad4 <ld_word>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d140      	bne.n	800a3e4 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a364:	3301      	adds	r3, #1
 800a366:	4619      	mov	r1, r3
 800a368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a36a:	f7fe fe95 	bl	8009098 <move_window>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d137      	bne.n	800a3e4 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	2200      	movs	r2, #0
 800a378:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	3334      	adds	r3, #52	; 0x34
 800a37e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe fba6 	bl	8008ad4 <ld_word>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a390:	429a      	cmp	r2, r3
 800a392:	d127      	bne.n	800a3e4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	3334      	adds	r3, #52	; 0x34
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fbb3 	bl	8008b04 <ld_dword>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	4a1b      	ldr	r2, [pc, #108]	; (800a410 <find_volume+0x49c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d11e      	bne.n	800a3e4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	3334      	adds	r3, #52	; 0x34
 800a3aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fba8 	bl	8008b04 <ld_dword>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	4a17      	ldr	r2, [pc, #92]	; (800a414 <find_volume+0x4a0>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d113      	bne.n	800a3e4 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3be:	3334      	adds	r3, #52	; 0x34
 800a3c0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fb9d 	bl	8008b04 <ld_dword>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	3334      	adds	r3, #52	; 0x34
 800a3d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fb93 	bl	8008b04 <ld_dword>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a3ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <find_volume+0x4a4>)
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	4b08      	ldr	r3, [pc, #32]	; (800a418 <find_volume+0x4a4>)
 800a3f6:	801a      	strh	r2, [r3, #0]
 800a3f8:	4b07      	ldr	r3, [pc, #28]	; (800a418 <find_volume+0x4a4>)
 800a3fa:	881a      	ldrh	r2, [r3, #0]
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a402:	f7fe fde1 	bl	8008fc8 <clear_lock>
#endif
	return FR_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3758      	adds	r7, #88	; 0x58
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	41615252 	.word	0x41615252
 800a414:	61417272 	.word	0x61417272
 800a418:	20000394 	.word	0x20000394

0800a41c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a426:	2309      	movs	r3, #9
 800a428:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d02e      	beq.n	800a48e <validate+0x72>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d02a      	beq.n	800a48e <validate+0x72>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d025      	beq.n	800a48e <validate+0x72>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	889a      	ldrh	r2, [r3, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	88db      	ldrh	r3, [r3, #6]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d11e      	bne.n	800a48e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe fc3d 	bl	8008cd4 <lock_fs>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d014      	beq.n	800a48a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	785b      	ldrb	r3, [r3, #1]
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fa96 	bl	8008998 <disk_status>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d102      	bne.n	800a47c <validate+0x60>
				res = FR_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
 800a47a:	e008      	b.n	800a48e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2100      	movs	r1, #0
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe fc3c 	bl	8008d00 <unlock_fs>
 800a488:	e001      	b.n	800a48e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a48a:	230f      	movs	r3, #15
 800a48c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <validate+0x7e>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	e000      	b.n	800a49c <validate+0x80>
 800a49a:	2300      	movs	r3, #0
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	6013      	str	r3, [r2, #0]
	return res;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a4be:	f107 0310 	add.w	r3, r7, #16
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7ff fcbb 	bl	8009e3e <get_ldnumber>
 800a4c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	da01      	bge.n	800a4d4 <f_mount+0x28>
 800a4d0:	230b      	movs	r3, #11
 800a4d2:	e048      	b.n	800a566 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a4d4:	4a26      	ldr	r2, [pc, #152]	; (800a570 <f_mount+0xc4>)
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00f      	beq.n	800a504 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a4e4:	69b8      	ldr	r0, [r7, #24]
 800a4e6:	f7fe fd6f 	bl	8008fc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 ff3e 	bl	800b370 <ff_del_syncobj>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <f_mount+0x52>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e033      	b.n	800a566 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	2200      	movs	r2, #0
 800a502:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00f      	beq.n	800a52a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	b2da      	uxtb	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	330c      	adds	r3, #12
 800a518:	4619      	mov	r1, r3
 800a51a:	4610      	mov	r0, r2
 800a51c:	f000 ff0d 	bl	800b33a <ff_cre_syncobj>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <f_mount+0x7e>
 800a526:	2302      	movs	r3, #2
 800a528:	e01d      	b.n	800a566 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4910      	ldr	r1, [pc, #64]	; (800a570 <f_mount+0xc4>)
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <f_mount+0x94>
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d001      	beq.n	800a544 <f_mount+0x98>
 800a540:	2300      	movs	r3, #0
 800a542:	e010      	b.n	800a566 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a544:	f107 010c 	add.w	r1, r7, #12
 800a548:	f107 0308 	add.w	r3, r7, #8
 800a54c:	2200      	movs	r2, #0
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fd10 	bl	8009f74 <find_volume>
 800a554:	4603      	mov	r3, r0
 800a556:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	7dfa      	ldrb	r2, [r7, #23]
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe fbce 	bl	8008d00 <unlock_fs>
 800a564:	7dfb      	ldrb	r3, [r7, #23]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3720      	adds	r7, #32
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20000390 	.word	0x20000390

0800a574 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b098      	sub	sp, #96	; 0x60
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <f_open+0x18>
 800a588:	2309      	movs	r3, #9
 800a58a:	e1b4      	b.n	800a8f6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a58c:	79fb      	ldrb	r3, [r7, #7]
 800a58e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a592:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a594:	79fa      	ldrb	r2, [r7, #7]
 800a596:	f107 0110 	add.w	r1, r7, #16
 800a59a:	f107 0308 	add.w	r3, r7, #8
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fce8 	bl	8009f74 <find_volume>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a5aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f040 8191 	bne.w	800a8d6 <f_open+0x362>
		dj.obj.fs = fs;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	f107 0314 	add.w	r3, r7, #20
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff fbcb 	bl	8009d5c <follow_path>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d11a      	bne.n	800a60a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a5d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a5d8:	b25b      	sxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da03      	bge.n	800a5e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a5de:	2306      	movs	r3, #6
 800a5e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a5e4:	e011      	b.n	800a60a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	f023 0301 	bic.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bf14      	ite	ne
 800a5f0:	2301      	movne	r3, #1
 800a5f2:	2300      	moveq	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f107 0314 	add.w	r3, r7, #20
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fb9a 	bl	8008d38 <chk_lock>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a60a:	79fb      	ldrb	r3, [r7, #7]
 800a60c:	f003 031c 	and.w	r3, r3, #28
 800a610:	2b00      	cmp	r3, #0
 800a612:	d07f      	beq.n	800a714 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d017      	beq.n	800a64c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a620:	2b04      	cmp	r3, #4
 800a622:	d10e      	bne.n	800a642 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a624:	f7fe fbe4 	bl	8008df0 <enq_lock>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d006      	beq.n	800a63c <f_open+0xc8>
 800a62e:	f107 0314 	add.w	r3, r7, #20
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff facb 	bl	8009bce <dir_register>
 800a638:	4603      	mov	r3, r0
 800a63a:	e000      	b.n	800a63e <f_open+0xca>
 800a63c:	2312      	movs	r3, #18
 800a63e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	f043 0308 	orr.w	r3, r3, #8
 800a648:	71fb      	strb	r3, [r7, #7]
 800a64a:	e010      	b.n	800a66e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a64c:	7ebb      	ldrb	r3, [r7, #26]
 800a64e:	f003 0311 	and.w	r3, r3, #17
 800a652:	2b00      	cmp	r3, #0
 800a654:	d003      	beq.n	800a65e <f_open+0xea>
					res = FR_DENIED;
 800a656:	2307      	movs	r3, #7
 800a658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a65c:	e007      	b.n	800a66e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <f_open+0xfa>
 800a668:	2308      	movs	r3, #8
 800a66a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a66e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a672:	2b00      	cmp	r3, #0
 800a674:	d168      	bne.n	800a748 <f_open+0x1d4>
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	f003 0308 	and.w	r3, r3, #8
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d063      	beq.n	800a748 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a680:	f7fe f92a 	bl	80088d8 <get_fattime>
 800a684:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a688:	330e      	adds	r3, #14
 800a68a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe fa77 	bl	8008b80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a694:	3316      	adds	r3, #22
 800a696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe fa71 	bl	8008b80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a0:	330b      	adds	r3, #11
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff f9fa 	bl	8009aa6 <ld_clust>
 800a6b2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff fa12 	bl	8009ae4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	331c      	adds	r3, #28
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fa5a 	bl	8008b80 <st_dword>
					fs->wflag = 1;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d037      	beq.n	800a748 <f_open+0x1d4>
						dw = fs->winsect;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6dc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a6de:	f107 0314 	add.w	r3, r7, #20
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe ff25 	bl	8009536 <remove_chain>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d126      	bne.n	800a748 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fcca 	bl	8009098 <move_window>
 800a704:	4603      	mov	r3, r0
 800a706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a70e:	3a01      	subs	r2, #1
 800a710:	611a      	str	r2, [r3, #16]
 800a712:	e019      	b.n	800a748 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d115      	bne.n	800a748 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a71c:	7ebb      	ldrb	r3, [r7, #26]
 800a71e:	f003 0310 	and.w	r3, r3, #16
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a726:	2304      	movs	r3, #4
 800a728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a72c:	e00c      	b.n	800a748 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d007      	beq.n	800a748 <f_open+0x1d4>
 800a738:	7ebb      	ldrb	r3, [r7, #26]
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <f_open+0x1d4>
						res = FR_DENIED;
 800a742:	2307      	movs	r3, #7
 800a744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d128      	bne.n	800a7a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a750:	79fb      	ldrb	r3, [r7, #7]
 800a752:	f003 0308 	and.w	r3, r3, #8
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a75a:	79fb      	ldrb	r3, [r7, #7]
 800a75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a760:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a76a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	f023 0301 	bic.w	r3, r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	bf14      	ite	ne
 800a77a:	2301      	movne	r3, #1
 800a77c:	2300      	moveq	r3, #0
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	461a      	mov	r2, r3
 800a782:	f107 0314 	add.w	r3, r7, #20
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fb53 	bl	8008e34 <inc_lock>
 800a78e:	4602      	mov	r2, r0
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <f_open+0x22e>
 800a79c:	2302      	movs	r3, #2
 800a79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f040 8095 	bne.w	800a8d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff f977 	bl	8009aa6 <ld_clust>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c0:	331c      	adds	r3, #28
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe f99e 	bl	8008b04 <ld_dword>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	88da      	ldrh	r2, [r3, #6]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	79fa      	ldrb	r2, [r7, #7]
 800a7e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3330      	adds	r3, #48	; 0x30
 800a7fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a802:	2100      	movs	r1, #0
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe fa08 	bl	8008c1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	f003 0320 	and.w	r3, r3, #32
 800a810:	2b00      	cmp	r3, #0
 800a812:	d060      	beq.n	800a8d6 <f_open+0x362>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d05c      	beq.n	800a8d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	895b      	ldrh	r3, [r3, #10]
 800a828:	025b      	lsls	r3, r3, #9
 800a82a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	657b      	str	r3, [r7, #84]	; 0x54
 800a838:	e016      	b.n	800a868 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe fce5 	bl	800920e <get_fat>
 800a844:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d802      	bhi.n	800a852 <f_open+0x2de>
 800a84c:	2302      	movs	r3, #2
 800a84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a858:	d102      	bne.n	800a860 <f_open+0x2ec>
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	657b      	str	r3, [r7, #84]	; 0x54
 800a868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d103      	bne.n	800a878 <f_open+0x304>
 800a870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a874:	429a      	cmp	r2, r3
 800a876:	d8e0      	bhi.n	800a83a <f_open+0x2c6>
				}
				fp->clust = clst;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a87c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a882:	2b00      	cmp	r3, #0
 800a884:	d127      	bne.n	800a8d6 <f_open+0x362>
 800a886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d022      	beq.n	800a8d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a894:	4618      	mov	r0, r3
 800a896:	f7fe fc9b 	bl	80091d0 <clust2sect>
 800a89a:	6478      	str	r0, [r7, #68]	; 0x44
 800a89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d103      	bne.n	800a8aa <f_open+0x336>
						res = FR_INT_ERR;
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8a8:	e015      	b.n	800a8d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a8aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ac:	0a5a      	lsrs	r2, r3, #9
 800a8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8b0:	441a      	add	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	7858      	ldrb	r0, [r3, #1]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a1a      	ldr	r2, [r3, #32]
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	f7fe f8a7 	bl	8008a18 <disk_read>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <f_open+0x362>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <f_open+0x370>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fe fa07 	bl	8008d00 <unlock_fs>
 800a8f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3760      	adds	r7, #96	; 0x60
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b08e      	sub	sp, #56	; 0x38
 800a902:	af00      	add	r7, sp, #0
 800a904:	60f8      	str	r0, [r7, #12]
 800a906:	60b9      	str	r1, [r7, #8]
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f107 0214 	add.w	r2, r7, #20
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fd7c 	bl	800a41c <validate>
 800a924:	4603      	mov	r3, r0
 800a926:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a92a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d107      	bne.n	800a942 <f_read+0x44>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	7d5b      	ldrb	r3, [r3, #21]
 800a936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a93a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d009      	beq.n	800a956 <f_read+0x58>
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe f9d8 	bl	8008d00 <unlock_fs>
 800a950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a954:	e13d      	b.n	800abd2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	7d1b      	ldrb	r3, [r3, #20]
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d106      	bne.n	800a970 <f_read+0x72>
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2107      	movs	r1, #7
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe f9ca 	bl	8008d00 <unlock_fs>
 800a96c:	2307      	movs	r3, #7
 800a96e:	e130      	b.n	800abd2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68da      	ldr	r2, [r3, #12]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	429a      	cmp	r2, r3
 800a982:	f240 811c 	bls.w	800abbe <f_read+0x2c0>
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a98a:	e118      	b.n	800abbe <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a994:	2b00      	cmp	r3, #0
 800a996:	f040 80e4 	bne.w	800ab62 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	0a5b      	lsrs	r3, r3, #9
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	8952      	ldrh	r2, [r2, #10]
 800a9a4:	3a01      	subs	r2, #1
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d139      	bne.n	800aa24 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d103      	bne.n	800a9c0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	633b      	str	r3, [r7, #48]	; 0x30
 800a9be:	e013      	b.n	800a9e8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d007      	beq.n	800a9d8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7fe feae 	bl	8009730 <clmt_clust>
 800a9d4:	6338      	str	r0, [r7, #48]	; 0x30
 800a9d6:	e007      	b.n	800a9e8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	f7fe fc14 	bl	800920e <get_fat>
 800a9e6:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d809      	bhi.n	800aa02 <f_read+0x104>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	755a      	strb	r2, [r3, #21]
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2102      	movs	r1, #2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe f981 	bl	8008d00 <unlock_fs>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	e0e7      	b.n	800abd2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d109      	bne.n	800aa1e <f_read+0x120>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	755a      	strb	r2, [r3, #21]
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2101      	movs	r1, #1
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe f973 	bl	8008d00 <unlock_fs>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e0d9      	b.n	800abd2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa22:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f7fe fbcf 	bl	80091d0 <clust2sect>
 800aa32:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d109      	bne.n	800aa4e <f_read+0x150>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	755a      	strb	r2, [r3, #21]
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2102      	movs	r1, #2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe f95b 	bl	8008d00 <unlock_fs>
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	e0c1      	b.n	800abd2 <f_read+0x2d4>
			sect += csect;
 800aa4e:	69ba      	ldr	r2, [r7, #24]
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	4413      	add	r3, r2
 800aa54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	0a5b      	lsrs	r3, r3, #9
 800aa5a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d03e      	beq.n	800aae0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aa62:	69fa      	ldr	r2, [r7, #28]
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	4413      	add	r3, r2
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	8952      	ldrh	r2, [r2, #10]
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d905      	bls.n	800aa7c <f_read+0x17e>
					cc = fs->csize - csect;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	895b      	ldrh	r3, [r3, #10]
 800aa74:	461a      	mov	r2, r3
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	7858      	ldrb	r0, [r3, #1]
 800aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa82:	69ba      	ldr	r2, [r7, #24]
 800aa84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa86:	f7fd ffc7 	bl	8008a18 <disk_read>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <f_read+0x1a6>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	755a      	strb	r2, [r3, #21]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2101      	movs	r1, #1
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fe f930 	bl	8008d00 <unlock_fs>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e096      	b.n	800abd2 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	7d1b      	ldrb	r3, [r3, #20]
 800aaa8:	b25b      	sxtb	r3, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	da14      	bge.n	800aad8 <f_read+0x1da>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6a1a      	ldr	r2, [r3, #32]
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d90d      	bls.n	800aad8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a1a      	ldr	r2, [r3, #32]
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	025b      	lsls	r3, r3, #9
 800aac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac8:	18d0      	adds	r0, r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3330      	adds	r3, #48	; 0x30
 800aace:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aad2:	4619      	mov	r1, r3
 800aad4:	f7fe f880 	bl	8008bd8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	025b      	lsls	r3, r3, #9
 800aadc:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800aade:	e05a      	b.n	800ab96 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d038      	beq.n	800ab5c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	7d1b      	ldrb	r3, [r3, #20]
 800aaee:	b25b      	sxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	da1d      	bge.n	800ab30 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	7858      	ldrb	r0, [r3, #1]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6a1a      	ldr	r2, [r3, #32]
 800ab02:	2301      	movs	r3, #1
 800ab04:	f7fd ffa8 	bl	8008a58 <disk_write>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d009      	beq.n	800ab22 <f_read+0x224>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2201      	movs	r2, #1
 800ab12:	755a      	strb	r2, [r3, #21]
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	2101      	movs	r1, #1
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe f8f1 	bl	8008d00 <unlock_fs>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e057      	b.n	800abd2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	7d1b      	ldrb	r3, [r3, #20]
 800ab26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	7858      	ldrb	r0, [r3, #1]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	f7fd ff6b 	bl	8008a18 <disk_read>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d009      	beq.n	800ab5c <f_read+0x25e>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	755a      	strb	r2, [r3, #21]
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2101      	movs	r1, #1
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fe f8d4 	bl	8008d00 <unlock_fs>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e03a      	b.n	800abd2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ab6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ab70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d901      	bls.n	800ab7c <f_read+0x27e>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8a:	4413      	add	r3, r2
 800ab8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab92:	f7fe f821 	bl	8008bd8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ab96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	4413      	add	r3, r2
 800ab9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	699a      	ldr	r2, [r3, #24]
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	441a      	add	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	619a      	str	r2, [r3, #24]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	441a      	add	r2, r3
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f47f aee3 	bne.w	800a98c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2100      	movs	r1, #0
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe f898 	bl	8008d00 <unlock_fs>
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3738      	adds	r7, #56	; 0x38
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b08c      	sub	sp, #48	; 0x30
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	607a      	str	r2, [r7, #4]
 800abe6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	2200      	movs	r2, #0
 800abf0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f107 0210 	add.w	r2, r7, #16
 800abf8:	4611      	mov	r1, r2
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff fc0e 	bl	800a41c <validate>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d107      	bne.n	800ac1e <f_write+0x44>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	7d5b      	ldrb	r3, [r3, #21]
 800ac12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d009      	beq.n	800ac32 <f_write+0x58>
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ac24:	4611      	mov	r1, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe f86a 	bl	8008d00 <unlock_fs>
 800ac2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac30:	e173      	b.n	800af1a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	7d1b      	ldrb	r3, [r3, #20]
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d106      	bne.n	800ac4c <f_write+0x72>
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2107      	movs	r1, #7
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe f85c 	bl	8008d00 <unlock_fs>
 800ac48:	2307      	movs	r3, #7
 800ac4a:	e166      	b.n	800af1a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	699a      	ldr	r2, [r3, #24]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	441a      	add	r2, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	f080 814b 	bcs.w	800aef4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	43db      	mvns	r3, r3
 800ac64:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ac66:	e145      	b.n	800aef4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f040 8101 	bne.w	800ae78 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	0a5b      	lsrs	r3, r3, #9
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	8952      	ldrh	r2, [r2, #10]
 800ac80:	3a01      	subs	r2, #1
 800ac82:	4013      	ands	r3, r2
 800ac84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d14d      	bne.n	800ad28 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10c      	bne.n	800acae <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d11a      	bne.n	800acd6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2100      	movs	r1, #0
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe fcab 	bl	8009600 <create_chain>
 800acaa:	62b8      	str	r0, [r7, #40]	; 0x28
 800acac:	e013      	b.n	800acd6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d007      	beq.n	800acc6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	4619      	mov	r1, r3
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7fe fd37 	bl	8009730 <clmt_clust>
 800acc2:	62b8      	str	r0, [r7, #40]	; 0x28
 800acc4:	e007      	b.n	800acd6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	4619      	mov	r1, r3
 800acce:	4610      	mov	r0, r2
 800acd0:	f7fe fc96 	bl	8009600 <create_chain>
 800acd4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 8110 	beq.w	800aefe <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d109      	bne.n	800acf8 <f_write+0x11e>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2202      	movs	r2, #2
 800ace8:	755a      	strb	r2, [r3, #21]
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2102      	movs	r1, #2
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe f806 	bl	8008d00 <unlock_fs>
 800acf4:	2302      	movs	r3, #2
 800acf6:	e110      	b.n	800af1a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfe:	d109      	bne.n	800ad14 <f_write+0x13a>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2201      	movs	r2, #1
 800ad04:	755a      	strb	r2, [r3, #21]
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2101      	movs	r1, #1
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fd fff8 	bl	8008d00 <unlock_fs>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e102      	b.n	800af1a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad18:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <f_write+0x14e>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	7d1b      	ldrb	r3, [r3, #20]
 800ad2c:	b25b      	sxtb	r3, r3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	da1d      	bge.n	800ad6e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	7858      	ldrb	r0, [r3, #1]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a1a      	ldr	r2, [r3, #32]
 800ad40:	2301      	movs	r3, #1
 800ad42:	f7fd fe89 	bl	8008a58 <disk_write>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d009      	beq.n	800ad60 <f_write+0x186>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	755a      	strb	r2, [r3, #21]
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2101      	movs	r1, #1
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd ffd2 	bl	8008d00 <unlock_fs>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e0dc      	b.n	800af1a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	7d1b      	ldrb	r3, [r3, #20]
 800ad64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7fe fa2a 	bl	80091d0 <clust2sect>
 800ad7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d109      	bne.n	800ad98 <f_write+0x1be>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2202      	movs	r2, #2
 800ad88:	755a      	strb	r2, [r3, #21]
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2102      	movs	r1, #2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fd ffb6 	bl	8008d00 <unlock_fs>
 800ad94:	2302      	movs	r3, #2
 800ad96:	e0c0      	b.n	800af1a <f_write+0x340>
			sect += csect;
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	0a5b      	lsrs	r3, r3, #9
 800ada4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d041      	beq.n	800ae30 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	4413      	add	r3, r2
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	8952      	ldrh	r2, [r2, #10]
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d905      	bls.n	800adc6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	895b      	ldrh	r3, [r3, #10]
 800adbe:	461a      	mov	r2, r3
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	7858      	ldrb	r0, [r3, #1]
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	69f9      	ldr	r1, [r7, #28]
 800add0:	f7fd fe42 	bl	8008a58 <disk_write>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d009      	beq.n	800adee <f_write+0x214>
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	755a      	strb	r2, [r3, #21]
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	2101      	movs	r1, #1
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fd ff8b 	bl	8008d00 <unlock_fs>
 800adea:	2301      	movs	r3, #1
 800adec:	e095      	b.n	800af1a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6a1a      	ldr	r2, [r3, #32]
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	6a3a      	ldr	r2, [r7, #32]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d915      	bls.n	800ae28 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6a1a      	ldr	r2, [r3, #32]
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	025b      	lsls	r3, r3, #9
 800ae0c:	69fa      	ldr	r2, [r7, #28]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae14:	4619      	mov	r1, r3
 800ae16:	f7fd fedf 	bl	8008bd8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	7d1b      	ldrb	r3, [r3, #20]
 800ae1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	025b      	lsls	r3, r3, #9
 800ae2c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae2e:	e044      	b.n	800aeba <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d01b      	beq.n	800ae72 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	699a      	ldr	r2, [r3, #24]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d215      	bcs.n	800ae72 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	7858      	ldrb	r0, [r3, #1]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae50:	2301      	movs	r3, #1
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	f7fd fde0 	bl	8008a18 <disk_read>
 800ae58:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d009      	beq.n	800ae72 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2201      	movs	r2, #1
 800ae62:	755a      	strb	r2, [r3, #21]
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2101      	movs	r1, #1
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fd ff49 	bl	8008d00 <unlock_fs>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e053      	b.n	800af1a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ae84:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ae86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d901      	bls.n	800ae92 <f_write+0x2b8>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea0:	4413      	add	r3, r2
 800aea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea4:	69f9      	ldr	r1, [r7, #28]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fd fe96 	bl	8008bd8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	7d1b      	ldrb	r3, [r3, #20]
 800aeb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	4413      	add	r3, r2
 800aec0:	61fb      	str	r3, [r7, #28]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	699a      	ldr	r2, [r3, #24]
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	441a      	add	r2, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	619a      	str	r2, [r3, #24]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	bf38      	it	cc
 800aeda:	461a      	movcc	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	60da      	str	r2, [r3, #12]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	441a      	add	r2, r3
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f47f aeb6 	bne.w	800ac68 <f_write+0x8e>
 800aefc:	e000      	b.n	800af00 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aefe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	7d1b      	ldrb	r3, [r3, #20]
 800af04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2100      	movs	r1, #0
 800af12:	4618      	mov	r0, r3
 800af14:	f7fd fef4 	bl	8008d00 <unlock_fs>
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3730      	adds	r7, #48	; 0x30
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b086      	sub	sp, #24
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f107 0208 	add.w	r2, r7, #8
 800af30:	4611      	mov	r1, r2
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff fa72 	bl	800a41c <validate>
 800af38:	4603      	mov	r3, r0
 800af3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d16d      	bne.n	800b01e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7d1b      	ldrb	r3, [r3, #20]
 800af46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d067      	beq.n	800b01e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7d1b      	ldrb	r3, [r3, #20]
 800af52:	b25b      	sxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	da1a      	bge.n	800af8e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	7858      	ldrb	r0, [r3, #1]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1a      	ldr	r2, [r3, #32]
 800af66:	2301      	movs	r3, #1
 800af68:	f7fd fd76 	bl	8008a58 <disk_write>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d006      	beq.n	800af80 <f_sync+0x5e>
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	2101      	movs	r1, #1
 800af76:	4618      	mov	r0, r3
 800af78:	f7fd fec2 	bl	8008d00 <unlock_fs>
 800af7c:	2301      	movs	r3, #1
 800af7e:	e055      	b.n	800b02c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	7d1b      	ldrb	r3, [r3, #20]
 800af84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af8e:	f7fd fca3 	bl	80088d8 <get_fattime>
 800af92:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f7fe f87b 	bl	8009098 <move_window>
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d138      	bne.n	800b01e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	330b      	adds	r3, #11
 800afb6:	781a      	ldrb	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	330b      	adds	r3, #11
 800afbc:	f042 0220 	orr.w	r2, r2, #32
 800afc0:	b2d2      	uxtb	r2, r2
 800afc2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6818      	ldr	r0, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	461a      	mov	r2, r3
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	f7fe fd88 	bl	8009ae4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f103 021c 	add.w	r2, r3, #28
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	f7fd fdcd 	bl	8008b80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3316      	adds	r3, #22
 800afea:	6939      	ldr	r1, [r7, #16]
 800afec:	4618      	mov	r0, r3
 800afee:	f7fd fdc7 	bl	8008b80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3312      	adds	r3, #18
 800aff6:	2100      	movs	r1, #0
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fd fda6 	bl	8008b4a <st_word>
					fs->wflag = 1;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2201      	movs	r2, #1
 800b002:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe f874 	bl	80090f4 <sync_fs>
 800b00c:	4603      	mov	r3, r0
 800b00e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	7d1b      	ldrb	r3, [r3, #20]
 800b014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	7dfa      	ldrb	r2, [r7, #23]
 800b022:	4611      	mov	r1, r2
 800b024:	4618      	mov	r0, r3
 800b026:	f7fd fe6b 	bl	8008d00 <unlock_fs>
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff ff70 	bl	800af22 <f_sync>
 800b042:	4603      	mov	r3, r0
 800b044:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11d      	bne.n	800b088 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f107 0208 	add.w	r2, r7, #8
 800b052:	4611      	mov	r1, r2
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff f9e1 	bl	800a41c <validate>
 800b05a:	4603      	mov	r3, r0
 800b05c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d111      	bne.n	800b088 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fd ff71 	bl	8008f50 <dec_lock>
 800b06e:	4603      	mov	r3, r0
 800b070:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f7fd fe3c 	bl	8008d00 <unlock_fs>
#endif
		}
	}
	return res;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b092      	sub	sp, #72	; 0x48
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b09e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b0a2:	f107 030c 	add.w	r3, r7, #12
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe ff63 	bl	8009f74 <find_volume>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b0b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f040 8099 	bne.w	800b1f0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b0be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	695a      	ldr	r2, [r3, #20]
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	3b02      	subs	r3, #2
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d804      	bhi.n	800b0dc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	695a      	ldr	r2, [r3, #20]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	e089      	b.n	800b1f0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d128      	bne.n	800b13a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b0f0:	f107 0314 	add.w	r3, r7, #20
 800b0f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fe f889 	bl	800920e <get_fat>
 800b0fc:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b104:	d103      	bne.n	800b10e <f_getfree+0x7c>
 800b106:	2301      	movs	r3, #1
 800b108:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b10c:	e063      	b.n	800b1d6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b110:	2b01      	cmp	r3, #1
 800b112:	d103      	bne.n	800b11c <f_getfree+0x8a>
 800b114:	2302      	movs	r3, #2
 800b116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b11a:	e05c      	b.n	800b1d6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <f_getfree+0x96>
 800b122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b124:	3301      	adds	r3, #1
 800b126:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b12a:	3301      	adds	r3, #1
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b134:	429a      	cmp	r2, r3
 800b136:	d3db      	bcc.n	800b0f0 <f_getfree+0x5e>
 800b138:	e04d      	b.n	800b1d6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	699b      	ldr	r3, [r3, #24]
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	637b      	str	r3, [r7, #52]	; 0x34
 800b14a:	2300      	movs	r3, #0
 800b14c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b150:	2b00      	cmp	r3, #0
 800b152:	d113      	bne.n	800b17c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b15c:	4619      	mov	r1, r3
 800b15e:	f7fd ff9b 	bl	8009098 <move_window>
 800b162:	4603      	mov	r3, r0
 800b164:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b168:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d131      	bne.n	800b1d4 <f_getfree+0x142>
							p = fs->win;
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	3334      	adds	r3, #52	; 0x34
 800b174:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b17a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b02      	cmp	r3, #2
 800b182:	d10f      	bne.n	800b1a4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b186:	f7fd fca5 	bl	8008ad4 <ld_word>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d102      	bne.n	800b196 <f_getfree+0x104>
 800b190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b192:	3301      	adds	r3, #1
 800b194:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	3302      	adds	r3, #2
 800b19a:	633b      	str	r3, [r7, #48]	; 0x30
 800b19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19e:	3b02      	subs	r3, #2
 800b1a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a2:	e010      	b.n	800b1c6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1a6:	f7fd fcad 	bl	8008b04 <ld_dword>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d102      	bne.n	800b1ba <f_getfree+0x128>
 800b1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1bc:	3304      	adds	r3, #4
 800b1be:	633b      	str	r3, [r7, #48]	; 0x30
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c2:	3b04      	subs	r3, #4
 800b1c4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1bd      	bne.n	800b14e <f_getfree+0xbc>
 800b1d2:	e000      	b.n	800b1d6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b1d4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1da:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1e0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e4:	791a      	ldrb	r2, [r3, #4]
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	f042 0201 	orr.w	r2, r2, #1
 800b1ec:	b2d2      	uxtb	r2, r2
 800b1ee:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fd fd81 	bl	8008d00 <unlock_fs>
 800b1fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b202:	4618      	mov	r0, r3
 800b204:	3748      	adds	r7, #72	; 0x48
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b088      	sub	sp, #32
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	60b9      	str	r1, [r7, #8]
 800b214:	607a      	str	r2, [r7, #4]
	int n = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b21e:	e01b      	b.n	800b258 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800b220:	f107 0310 	add.w	r3, r7, #16
 800b224:	f107 0114 	add.w	r1, r7, #20
 800b228:	2201      	movs	r2, #1
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff fb67 	bl	800a8fe <f_read>
		if (rc != 1) break;
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d116      	bne.n	800b264 <f_gets+0x5a>
		c = s[0];
 800b236:	7d3b      	ldrb	r3, [r7, #20]
 800b238:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b23a:	7dfb      	ldrb	r3, [r7, #23]
 800b23c:	2b0d      	cmp	r3, #13
 800b23e:	d100      	bne.n	800b242 <f_gets+0x38>
 800b240:	e00a      	b.n	800b258 <f_gets+0x4e>
		*p++ = c;
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	61ba      	str	r2, [r7, #24]
 800b248:	7dfa      	ldrb	r2, [r7, #23]
 800b24a:	701a      	strb	r2, [r3, #0]
		n++;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	3301      	adds	r3, #1
 800b250:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	2b0a      	cmp	r3, #10
 800b256:	d007      	beq.n	800b268 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	69fa      	ldr	r2, [r7, #28]
 800b25e:	429a      	cmp	r2, r3
 800b260:	dbde      	blt.n	800b220 <f_gets+0x16>
 800b262:	e002      	b.n	800b26a <f_gets+0x60>
		if (rc != 1) break;
 800b264:	bf00      	nop
 800b266:	e000      	b.n	800b26a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800b268:	bf00      	nop
	}
	*p = 0;
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	2200      	movs	r2, #0
 800b26e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <f_gets+0x70>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	e000      	b.n	800b27c <f_gets+0x72>
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3720      	adds	r7, #32
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b292:	2301      	movs	r3, #1
 800b294:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b29a:	4b1f      	ldr	r3, [pc, #124]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b29c:	7a5b      	ldrb	r3, [r3, #9]
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d131      	bne.n	800b308 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b2a4:	4b1c      	ldr	r3, [pc, #112]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b2a6:	7a5b      	ldrb	r3, [r3, #9]
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	4b1a      	ldr	r3, [pc, #104]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b2b2:	4b19      	ldr	r3, [pc, #100]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b2b4:	7a5b      	ldrb	r3, [r3, #9]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	4a17      	ldr	r2, [pc, #92]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b2c2:	4b15      	ldr	r3, [pc, #84]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b2c4:	7a5b      	ldrb	r3, [r3, #9]
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4b13      	ldr	r3, [pc, #76]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b2cc:	4413      	add	r3, r2
 800b2ce:	79fa      	ldrb	r2, [r7, #7]
 800b2d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b2d2:	4b11      	ldr	r3, [pc, #68]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b2d4:	7a5b      	ldrb	r3, [r3, #9]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	b2d1      	uxtb	r1, r2
 800b2dc:	4a0e      	ldr	r2, [pc, #56]	; (800b318 <FATFS_LinkDriverEx+0x94>)
 800b2de:	7251      	strb	r1, [r2, #9]
 800b2e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b2e2:	7dbb      	ldrb	r3, [r7, #22]
 800b2e4:	3330      	adds	r3, #48	; 0x30
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	223a      	movs	r2, #58	; 0x3a
 800b2f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	3302      	adds	r3, #2
 800b2f8:	222f      	movs	r2, #47	; 0x2f
 800b2fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	3303      	adds	r3, #3
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	200003b8 	.word	0x200003b8

0800b31c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b326:	2200      	movs	r2, #0
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff ffaa 	bl	800b284 <FATFS_LinkDriverEx>
 800b330:	4603      	mov	r3, r0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b084      	sub	sp, #16
 800b33e:	af00      	add	r7, sp, #0
 800b340:	4603      	mov	r3, r0
 800b342:	6039      	str	r1, [r7, #0]
 800b344:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800b346:	2200      	movs	r2, #0
 800b348:	2101      	movs	r1, #1
 800b34a:	2001      	movs	r0, #1
 800b34c:	f000 fa85 	bl	800b85a <osSemaphoreNew>
 800b350:	4602      	mov	r2, r0
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bf14      	ite	ne
 800b35e:	2301      	movne	r3, #1
 800b360:	2300      	moveq	r3, #0
 800b362:	b2db      	uxtb	r3, r3
 800b364:	60fb      	str	r3, [r7, #12]

    return ret;
 800b366:	68fb      	ldr	r3, [r7, #12]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 fb8d 	bl	800ba98 <osSemaphoreDelete>
#endif
    return 1;
 800b37e:	2301      	movs	r3, #1
}
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800b394:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fae7 	bl	800b96c <osSemaphoreAcquire>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fb28 	bl	800ba10 <osSemaphoreRelease>
#endif
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <__NVIC_SetPriority>:
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db0a      	blt.n	800b3f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	490c      	ldr	r1, [pc, #48]	; (800b414 <__NVIC_SetPriority+0x4c>)
 800b3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3e6:	0112      	lsls	r2, r2, #4
 800b3e8:	b2d2      	uxtb	r2, r2
 800b3ea:	440b      	add	r3, r1
 800b3ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b3f0:	e00a      	b.n	800b408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	4908      	ldr	r1, [pc, #32]	; (800b418 <__NVIC_SetPriority+0x50>)
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	3b04      	subs	r3, #4
 800b400:	0112      	lsls	r2, r2, #4
 800b402:	b2d2      	uxtb	r2, r2
 800b404:	440b      	add	r3, r1
 800b406:	761a      	strb	r2, [r3, #24]
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	e000e100 	.word	0xe000e100
 800b418:	e000ed00 	.word	0xe000ed00

0800b41c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <SysTick_Handler+0x1c>)
 800b422:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b424:	f002 fb36 	bl	800da94 <xTaskGetSchedulerState>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d001      	beq.n	800b432 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b42e:	f003 fb1b 	bl	800ea68 <xPortSysTickHandler>
  }
}
 800b432:	bf00      	nop
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	e000e010 	.word	0xe000e010

0800b43c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b440:	2100      	movs	r1, #0
 800b442:	f06f 0004 	mvn.w	r0, #4
 800b446:	f7ff ffbf 	bl	800b3c8 <__NVIC_SetPriority>
#endif
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b456:	f3ef 8305 	mrs	r3, IPSR
 800b45a:	603b      	str	r3, [r7, #0]
  return(result);
 800b45c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b462:	f06f 0305 	mvn.w	r3, #5
 800b466:	607b      	str	r3, [r7, #4]
 800b468:	e00c      	b.n	800b484 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <osKernelInitialize+0x44>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d105      	bne.n	800b47e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b472:	4b08      	ldr	r3, [pc, #32]	; (800b494 <osKernelInitialize+0x44>)
 800b474:	2201      	movs	r2, #1
 800b476:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b478:	2300      	movs	r3, #0
 800b47a:	607b      	str	r3, [r7, #4]
 800b47c:	e002      	b.n	800b484 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b47e:	f04f 33ff 	mov.w	r3, #4294967295
 800b482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b484:	687b      	ldr	r3, [r7, #4]
}
 800b486:	4618      	mov	r0, r3
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	200003c4 	.word	0x200003c4

0800b498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b49e:	f3ef 8305 	mrs	r3, IPSR
 800b4a2:	603b      	str	r3, [r7, #0]
  return(result);
 800b4a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b4aa:	f06f 0305 	mvn.w	r3, #5
 800b4ae:	607b      	str	r3, [r7, #4]
 800b4b0:	e010      	b.n	800b4d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <osKernelStart+0x48>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d109      	bne.n	800b4ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b4ba:	f7ff ffbf 	bl	800b43c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b4be:	4b08      	ldr	r3, [pc, #32]	; (800b4e0 <osKernelStart+0x48>)
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b4c4:	f001 fe8e 	bl	800d1e4 <vTaskStartScheduler>
      stat = osOK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	607b      	str	r3, [r7, #4]
 800b4cc:	e002      	b.n	800b4d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4d4:	687b      	ldr	r3, [r7, #4]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	200003c4 	.word	0x200003c4

0800b4e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08e      	sub	sp, #56	; 0x38
 800b4e8:	af04      	add	r7, sp, #16
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4f4:	f3ef 8305 	mrs	r3, IPSR
 800b4f8:	617b      	str	r3, [r7, #20]
  return(result);
 800b4fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d17e      	bne.n	800b5fe <osThreadNew+0x11a>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d07b      	beq.n	800b5fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b506:	2380      	movs	r3, #128	; 0x80
 800b508:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b50a:	2318      	movs	r3, #24
 800b50c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b512:	f04f 33ff 	mov.w	r3, #4294967295
 800b516:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d045      	beq.n	800b5aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <osThreadNew+0x48>
        name = attr->name;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d008      	beq.n	800b552 <osThreadNew+0x6e>
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	2b38      	cmp	r3, #56	; 0x38
 800b544:	d805      	bhi.n	800b552 <osThreadNew+0x6e>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <osThreadNew+0x72>
        return (NULL);
 800b552:	2300      	movs	r3, #0
 800b554:	e054      	b.n	800b600 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	089b      	lsrs	r3, r3, #2
 800b564:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00e      	beq.n	800b58c <osThreadNew+0xa8>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	2b5b      	cmp	r3, #91	; 0x5b
 800b574:	d90a      	bls.n	800b58c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d006      	beq.n	800b58c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <osThreadNew+0xa8>
        mem = 1;
 800b586:	2301      	movs	r3, #1
 800b588:	61bb      	str	r3, [r7, #24]
 800b58a:	e010      	b.n	800b5ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10c      	bne.n	800b5ae <osThreadNew+0xca>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d108      	bne.n	800b5ae <osThreadNew+0xca>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d104      	bne.n	800b5ae <osThreadNew+0xca>
          mem = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	61bb      	str	r3, [r7, #24]
 800b5a8:	e001      	b.n	800b5ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d110      	bne.n	800b5d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5bc:	9202      	str	r2, [sp, #8]
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	6a3a      	ldr	r2, [r7, #32]
 800b5c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f001 fc34 	bl	800ce38 <xTaskCreateStatic>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	e013      	b.n	800b5fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d110      	bne.n	800b5fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	f107 0310 	add.w	r3, r7, #16
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f001 fc7f 	bl	800cef2 <xTaskCreate>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d001      	beq.n	800b5fe <osThreadNew+0x11a>
            hTask = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b5fe:	693b      	ldr	r3, [r7, #16]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3728      	adds	r7, #40	; 0x28
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b610:	f3ef 8305 	mrs	r3, IPSR
 800b614:	60bb      	str	r3, [r7, #8]
  return(result);
 800b616:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d003      	beq.n	800b624 <osDelay+0x1c>
    stat = osErrorISR;
 800b61c:	f06f 0305 	mvn.w	r3, #5
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	e007      	b.n	800b634 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b624:	2300      	movs	r3, #0
 800b626:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f001 fda4 	bl	800d17c <vTaskDelay>
    }
  }

  return (stat);
 800b634:	68fb      	ldr	r3, [r7, #12]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b63e:	b580      	push	{r7, lr}
 800b640:	b088      	sub	sp, #32
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b646:	2300      	movs	r3, #0
 800b648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b64a:	f3ef 8305 	mrs	r3, IPSR
 800b64e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b650:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b652:	2b00      	cmp	r3, #0
 800b654:	d174      	bne.n	800b740 <osMutexNew+0x102>
    if (attr != NULL) {
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d003      	beq.n	800b664 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	61bb      	str	r3, [r7, #24]
 800b662:	e001      	b.n	800b668 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <osMutexNew+0x3a>
      rmtx = 1U;
 800b672:	2301      	movs	r3, #1
 800b674:	617b      	str	r3, [r7, #20]
 800b676:	e001      	b.n	800b67c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b678:	2300      	movs	r3, #0
 800b67a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	f003 0308 	and.w	r3, r3, #8
 800b682:	2b00      	cmp	r3, #0
 800b684:	d15c      	bne.n	800b740 <osMutexNew+0x102>
      mem = -1;
 800b686:	f04f 33ff 	mov.w	r3, #4294967295
 800b68a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d015      	beq.n	800b6be <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d006      	beq.n	800b6a8 <osMutexNew+0x6a>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	2b4f      	cmp	r3, #79	; 0x4f
 800b6a0:	d902      	bls.n	800b6a8 <osMutexNew+0x6a>
          mem = 1;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	613b      	str	r3, [r7, #16]
 800b6a6:	e00c      	b.n	800b6c2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d108      	bne.n	800b6c2 <osMutexNew+0x84>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d104      	bne.n	800b6c2 <osMutexNew+0x84>
            mem = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	613b      	str	r3, [r7, #16]
 800b6bc:	e001      	b.n	800b6c2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d112      	bne.n	800b6ee <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d007      	beq.n	800b6de <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	2004      	movs	r0, #4
 800b6d6:	f000 fc5a 	bl	800bf8e <xQueueCreateMutexStatic>
 800b6da:	61f8      	str	r0, [r7, #28]
 800b6dc:	e016      	b.n	800b70c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	2001      	movs	r0, #1
 800b6e6:	f000 fc52 	bl	800bf8e <xQueueCreateMutexStatic>
 800b6ea:	61f8      	str	r0, [r7, #28]
 800b6ec:	e00e      	b.n	800b70c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10b      	bne.n	800b70c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d004      	beq.n	800b704 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b6fa:	2004      	movs	r0, #4
 800b6fc:	f000 fc2f 	bl	800bf5e <xQueueCreateMutex>
 800b700:	61f8      	str	r0, [r7, #28]
 800b702:	e003      	b.n	800b70c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b704:	2001      	movs	r0, #1
 800b706:	f000 fc2a 	bl	800bf5e <xQueueCreateMutex>
 800b70a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00c      	beq.n	800b72c <osMutexNew+0xee>
        if (attr != NULL) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d003      	beq.n	800b720 <osMutexNew+0xe2>
          name = attr->name;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	60fb      	str	r3, [r7, #12]
 800b71e:	e001      	b.n	800b724 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b720:	2300      	movs	r3, #0
 800b722:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b724:	68f9      	ldr	r1, [r7, #12]
 800b726:	69f8      	ldr	r0, [r7, #28]
 800b728:	f001 fafe 	bl	800cd28 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d006      	beq.n	800b740 <osMutexNew+0x102>
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d003      	beq.n	800b740 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	f043 0301 	orr.w	r3, r3, #1
 800b73e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b740:	69fb      	ldr	r3, [r7, #28]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3720      	adds	r7, #32
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b086      	sub	sp, #24
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f023 0301 	bic.w	r3, r3, #1
 800b75a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b764:	2300      	movs	r3, #0
 800b766:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b768:	f3ef 8305 	mrs	r3, IPSR
 800b76c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b76e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b774:	f06f 0305 	mvn.w	r3, #5
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	e02c      	b.n	800b7d6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d103      	bne.n	800b78a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b782:	f06f 0303 	mvn.w	r3, #3
 800b786:	617b      	str	r3, [r7, #20]
 800b788:	e025      	b.n	800b7d6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d011      	beq.n	800b7b4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	6938      	ldr	r0, [r7, #16]
 800b794:	f000 fc4a 	bl	800c02c <xQueueTakeMutexRecursive>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d01b      	beq.n	800b7d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d003      	beq.n	800b7ac <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b7a4:	f06f 0301 	mvn.w	r3, #1
 800b7a8:	617b      	str	r3, [r7, #20]
 800b7aa:	e014      	b.n	800b7d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b7ac:	f06f 0302 	mvn.w	r3, #2
 800b7b0:	617b      	str	r3, [r7, #20]
 800b7b2:	e010      	b.n	800b7d6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6938      	ldr	r0, [r7, #16]
 800b7b8:	f000 ffde 	bl	800c778 <xQueueSemaphoreTake>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d009      	beq.n	800b7d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d003      	beq.n	800b7d0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b7c8:	f06f 0301 	mvn.w	r3, #1
 800b7cc:	617b      	str	r3, [r7, #20]
 800b7ce:	e002      	b.n	800b7d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b7d0:	f06f 0302 	mvn.w	r3, #2
 800b7d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b7d6:	697b      	ldr	r3, [r7, #20]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f023 0301 	bic.w	r3, r3, #1
 800b7ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f003 0301 	and.w	r3, r3, #1
 800b7f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7fc:	f3ef 8305 	mrs	r3, IPSR
 800b800:	60bb      	str	r3, [r7, #8]
  return(result);
 800b802:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b804:	2b00      	cmp	r3, #0
 800b806:	d003      	beq.n	800b810 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b808:	f06f 0305 	mvn.w	r3, #5
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	e01f      	b.n	800b850 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d103      	bne.n	800b81e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b816:	f06f 0303 	mvn.w	r3, #3
 800b81a:	617b      	str	r3, [r7, #20]
 800b81c:	e018      	b.n	800b850 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d009      	beq.n	800b838 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b824:	6938      	ldr	r0, [r7, #16]
 800b826:	f000 fbcd 	bl	800bfc4 <xQueueGiveMutexRecursive>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d00f      	beq.n	800b850 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b830:	f06f 0302 	mvn.w	r3, #2
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	e00b      	b.n	800b850 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b838:	2300      	movs	r3, #0
 800b83a:	2200      	movs	r2, #0
 800b83c:	2100      	movs	r1, #0
 800b83e:	6938      	ldr	r0, [r7, #16]
 800b840:	f000 fc94 	bl	800c16c <xQueueGenericSend>
 800b844:	4603      	mov	r3, r0
 800b846:	2b01      	cmp	r3, #1
 800b848:	d002      	beq.n	800b850 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b84a:	f06f 0302 	mvn.w	r3, #2
 800b84e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b850:	697b      	ldr	r3, [r7, #20]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b08a      	sub	sp, #40	; 0x28
 800b85e:	af02      	add	r7, sp, #8
 800b860:	60f8      	str	r0, [r7, #12]
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b86a:	f3ef 8305 	mrs	r3, IPSR
 800b86e:	613b      	str	r3, [r7, #16]
  return(result);
 800b870:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b872:	2b00      	cmp	r3, #0
 800b874:	d175      	bne.n	800b962 <osSemaphoreNew+0x108>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d072      	beq.n	800b962 <osSemaphoreNew+0x108>
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	429a      	cmp	r2, r3
 800b882:	d86e      	bhi.n	800b962 <osSemaphoreNew+0x108>
    mem = -1;
 800b884:	f04f 33ff 	mov.w	r3, #4294967295
 800b888:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d015      	beq.n	800b8bc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d006      	beq.n	800b8a6 <osSemaphoreNew+0x4c>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	2b4f      	cmp	r3, #79	; 0x4f
 800b89e:	d902      	bls.n	800b8a6 <osSemaphoreNew+0x4c>
        mem = 1;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	61bb      	str	r3, [r7, #24]
 800b8a4:	e00c      	b.n	800b8c0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d108      	bne.n	800b8c0 <osSemaphoreNew+0x66>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d104      	bne.n	800b8c0 <osSemaphoreNew+0x66>
          mem = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61bb      	str	r3, [r7, #24]
 800b8ba:	e001      	b.n	800b8c0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c6:	d04c      	beq.n	800b962 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d128      	bne.n	800b920 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d10a      	bne.n	800b8ea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	2203      	movs	r2, #3
 800b8da:	9200      	str	r2, [sp, #0]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2100      	movs	r1, #0
 800b8e0:	2001      	movs	r0, #1
 800b8e2:	f000 fa4d 	bl	800bd80 <xQueueGenericCreateStatic>
 800b8e6:	61f8      	str	r0, [r7, #28]
 800b8e8:	e005      	b.n	800b8f6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b8ea:	2203      	movs	r2, #3
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	f000 fabe 	bl	800be70 <xQueueGenericCreate>
 800b8f4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d022      	beq.n	800b942 <osSemaphoreNew+0xe8>
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d01f      	beq.n	800b942 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b902:	2300      	movs	r3, #0
 800b904:	2200      	movs	r2, #0
 800b906:	2100      	movs	r1, #0
 800b908:	69f8      	ldr	r0, [r7, #28]
 800b90a:	f000 fc2f 	bl	800c16c <xQueueGenericSend>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b01      	cmp	r3, #1
 800b912:	d016      	beq.n	800b942 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b914:	69f8      	ldr	r0, [r7, #28]
 800b916:	f001 f8bb 	bl	800ca90 <vQueueDelete>
            hSemaphore = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	61fb      	str	r3, [r7, #28]
 800b91e:	e010      	b.n	800b942 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d108      	bne.n	800b938 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	461a      	mov	r2, r3
 800b92c:	68b9      	ldr	r1, [r7, #8]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f000 fbb2 	bl	800c098 <xQueueCreateCountingSemaphoreStatic>
 800b934:	61f8      	str	r0, [r7, #28]
 800b936:	e004      	b.n	800b942 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b938:	68b9      	ldr	r1, [r7, #8]
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 fbe3 	bl	800c106 <xQueueCreateCountingSemaphore>
 800b940:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00c      	beq.n	800b962 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	617b      	str	r3, [r7, #20]
 800b954:	e001      	b.n	800b95a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b956:	2300      	movs	r3, #0
 800b958:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b95a:	6979      	ldr	r1, [r7, #20]
 800b95c:	69f8      	ldr	r0, [r7, #28]
 800b95e:	f001 f9e3 	bl	800cd28 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b962:	69fb      	ldr	r3, [r7, #28]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3720      	adds	r7, #32
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d103      	bne.n	800b98c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b984:	f06f 0303 	mvn.w	r3, #3
 800b988:	617b      	str	r3, [r7, #20]
 800b98a:	e039      	b.n	800ba00 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b98c:	f3ef 8305 	mrs	r3, IPSR
 800b990:	60fb      	str	r3, [r7, #12]
  return(result);
 800b992:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b994:	2b00      	cmp	r3, #0
 800b996:	d022      	beq.n	800b9de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b99e:	f06f 0303 	mvn.w	r3, #3
 800b9a2:	617b      	str	r3, [r7, #20]
 800b9a4:	e02c      	b.n	800ba00 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b9aa:	f107 0308 	add.w	r3, r7, #8
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	6938      	ldr	r0, [r7, #16]
 800b9b4:	f000 ffec 	bl	800c990 <xQueueReceiveFromISR>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d003      	beq.n	800b9c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b9be:	f06f 0302 	mvn.w	r3, #2
 800b9c2:	617b      	str	r3, [r7, #20]
 800b9c4:	e01c      	b.n	800ba00 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d019      	beq.n	800ba00 <osSemaphoreAcquire+0x94>
 800b9cc:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <osSemaphoreAcquire+0xa0>)
 800b9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	e010      	b.n	800ba00 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6938      	ldr	r0, [r7, #16]
 800b9e2:	f000 fec9 	bl	800c778 <xQueueSemaphoreTake>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d009      	beq.n	800ba00 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b9f2:	f06f 0301 	mvn.w	r3, #1
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e002      	b.n	800ba00 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b9fa:	f06f 0302 	mvn.w	r3, #2
 800b9fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ba00:	697b      	ldr	r3, [r7, #20]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	e000ed04 	.word	0xe000ed04

0800ba10 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d103      	bne.n	800ba2e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ba26:	f06f 0303 	mvn.w	r3, #3
 800ba2a:	617b      	str	r3, [r7, #20]
 800ba2c:	e02c      	b.n	800ba88 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba2e:	f3ef 8305 	mrs	r3, IPSR
 800ba32:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba34:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d01a      	beq.n	800ba70 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ba3e:	f107 0308 	add.w	r3, r7, #8
 800ba42:	4619      	mov	r1, r3
 800ba44:	6938      	ldr	r0, [r7, #16]
 800ba46:	f000 fd2a 	bl	800c49e <xQueueGiveFromISR>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d003      	beq.n	800ba58 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ba50:	f06f 0302 	mvn.w	r3, #2
 800ba54:	617b      	str	r3, [r7, #20]
 800ba56:	e017      	b.n	800ba88 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d014      	beq.n	800ba88 <osSemaphoreRelease+0x78>
 800ba5e:	4b0d      	ldr	r3, [pc, #52]	; (800ba94 <osSemaphoreRelease+0x84>)
 800ba60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	e00b      	b.n	800ba88 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba70:	2300      	movs	r3, #0
 800ba72:	2200      	movs	r2, #0
 800ba74:	2100      	movs	r1, #0
 800ba76:	6938      	ldr	r0, [r7, #16]
 800ba78:	f000 fb78 	bl	800c16c <xQueueGenericSend>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d002      	beq.n	800ba88 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ba82:	f06f 0302 	mvn.w	r3, #2
 800ba86:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ba88:	697b      	ldr	r3, [r7, #20]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	e000ed04 	.word	0xe000ed04

0800ba98 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baa4:	f3ef 8305 	mrs	r3, IPSR
 800baa8:	60fb      	str	r3, [r7, #12]
  return(result);
 800baaa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800bab0:	f06f 0305 	mvn.w	r3, #5
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	e00e      	b.n	800bad6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d103      	bne.n	800bac6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800babe:	f06f 0303 	mvn.w	r3, #3
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	e007      	b.n	800bad6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800bac6:	6938      	ldr	r0, [r7, #16]
 800bac8:	f001 f958 	bl	800cd7c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bacc:	2300      	movs	r3, #0
 800bace:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800bad0:	6938      	ldr	r0, [r7, #16]
 800bad2:	f000 ffdd 	bl	800ca90 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800bad6:	697b      	ldr	r3, [r7, #20]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4a07      	ldr	r2, [pc, #28]	; (800bb0c <vApplicationGetIdleTaskMemory+0x2c>)
 800baf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	4a06      	ldr	r2, [pc, #24]	; (800bb10 <vApplicationGetIdleTaskMemory+0x30>)
 800baf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2280      	movs	r2, #128	; 0x80
 800bafc:	601a      	str	r2, [r3, #0]
}
 800bafe:	bf00      	nop
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	200003c8 	.word	0x200003c8
 800bb10:	20000424 	.word	0x20000424

0800bb14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4a07      	ldr	r2, [pc, #28]	; (800bb40 <vApplicationGetTimerTaskMemory+0x2c>)
 800bb24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	4a06      	ldr	r2, [pc, #24]	; (800bb44 <vApplicationGetTimerTaskMemory+0x30>)
 800bb2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb32:	601a      	str	r2, [r3, #0]
}
 800bb34:	bf00      	nop
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	20000624 	.word	0x20000624
 800bb44:	20000680 	.word	0x20000680

0800bb48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f103 0208 	add.w	r2, r3, #8
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f103 0208 	add.w	r2, r3, #8
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f103 0208 	add.w	r2, r3, #8
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb96:	bf00      	nop
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bba2:	b480      	push	{r7}
 800bba4:	b085      	sub	sp, #20
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	601a      	str	r2, [r3, #0]
}
 800bbde:	bf00      	nop
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbea:	b480      	push	{r7}
 800bbec:	b085      	sub	sp, #20
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc00:	d103      	bne.n	800bc0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	60fb      	str	r3, [r7, #12]
 800bc08:	e00c      	b.n	800bc24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	60fb      	str	r3, [r7, #12]
 800bc10:	e002      	b.n	800bc18 <vListInsert+0x2e>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	60fb      	str	r3, [r7, #12]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d2f6      	bcs.n	800bc12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	683a      	ldr	r2, [r7, #0]
 800bc3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	601a      	str	r2, [r3, #0]
}
 800bc50:	bf00      	nop
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	6892      	ldr	r2, [r2, #8]
 800bc72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	6852      	ldr	r2, [r2, #4]
 800bc7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d103      	bne.n	800bc90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	689a      	ldr	r2, [r3, #8]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	1e5a      	subs	r2, r3, #1
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bcda:	f002 fe33 	bl	800e944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce6:	68f9      	ldr	r1, [r7, #12]
 800bce8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcea:	fb01 f303 	mul.w	r3, r1, r3
 800bcee:	441a      	add	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	68f9      	ldr	r1, [r7, #12]
 800bd0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd10:	fb01 f303 	mul.w	r3, r1, r3
 800bd14:	441a      	add	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	22ff      	movs	r2, #255	; 0xff
 800bd1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	22ff      	movs	r2, #255	; 0xff
 800bd26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d114      	bne.n	800bd5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d01a      	beq.n	800bd6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3310      	adds	r3, #16
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f001 fcdb 	bl	800d6f8 <xTaskRemoveFromEventList>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d012      	beq.n	800bd6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd48:	4b0c      	ldr	r3, [pc, #48]	; (800bd7c <xQueueGenericReset+0xcc>)
 800bd4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd4e:	601a      	str	r2, [r3, #0]
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	e009      	b.n	800bd6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3310      	adds	r3, #16
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff fef2 	bl	800bb48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3324      	adds	r3, #36	; 0x24
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7ff feed 	bl	800bb48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd6e:	f002 fe19 	bl	800e9a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd72:	2301      	movs	r3, #1
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	e000ed04 	.word	0xe000ed04

0800bd80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08e      	sub	sp, #56	; 0x38
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <xQueueGenericCreateStatic+0x52>
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <xQueueGenericCreateStatic+0x56>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e000      	b.n	800bdd8 <xQueueGenericCreateStatic+0x58>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	623b      	str	r3, [r7, #32]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d102      	bne.n	800bdfe <xQueueGenericCreateStatic+0x7e>
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d101      	bne.n	800be02 <xQueueGenericCreateStatic+0x82>
 800bdfe:	2301      	movs	r3, #1
 800be00:	e000      	b.n	800be04 <xQueueGenericCreateStatic+0x84>
 800be02:	2300      	movs	r3, #0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10a      	bne.n	800be1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	61fb      	str	r3, [r7, #28]
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be1e:	2350      	movs	r3, #80	; 0x50
 800be20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b50      	cmp	r3, #80	; 0x50
 800be26:	d00a      	beq.n	800be3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	61bb      	str	r3, [r7, #24]
}
 800be3a:	bf00      	nop
 800be3c:	e7fe      	b.n	800be3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800be44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00d      	beq.n	800be66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800be56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	4613      	mov	r3, r2
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f000 f83f 	bl	800bee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be68:	4618      	mov	r0, r3
 800be6a:	3730      	adds	r7, #48	; 0x30
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800be70:	b580      	push	{r7, lr}
 800be72:	b08a      	sub	sp, #40	; 0x28
 800be74:	af02      	add	r7, sp, #8
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	4613      	mov	r3, r2
 800be7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xQueueGenericCreate+0x2a>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	613b      	str	r3, [r7, #16]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	fb02 f303 	mul.w	r3, r2, r3
 800bea2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	3350      	adds	r3, #80	; 0x50
 800bea8:	4618      	mov	r0, r3
 800beaa:	f002 fe6d 	bl	800eb88 <pvPortMalloc>
 800beae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d011      	beq.n	800beda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	3350      	adds	r3, #80	; 0x50
 800bebe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bec8:	79fa      	ldrb	r2, [r7, #7]
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4613      	mov	r3, r2
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	68b9      	ldr	r1, [r7, #8]
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 f805 	bl	800bee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800beda:	69bb      	ldr	r3, [r7, #24]
	}
 800bedc:	4618      	mov	r0, r3
 800bede:	3720      	adds	r7, #32
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
 800bef0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d103      	bne.n	800bf00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	601a      	str	r2, [r3, #0]
 800befe:	e002      	b.n	800bf06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	68ba      	ldr	r2, [r7, #8]
 800bf10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf12:	2101      	movs	r1, #1
 800bf14:	69b8      	ldr	r0, [r7, #24]
 800bf16:	f7ff fecb 	bl	800bcb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	78fa      	ldrb	r2, [r7, #3]
 800bf1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf22:	bf00      	nop
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b082      	sub	sp, #8
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00e      	beq.n	800bf56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	2100      	movs	r1, #0
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f90b 	bl	800c16c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b086      	sub	sp, #24
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	4603      	mov	r3, r0
 800bf66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bf70:	79fb      	ldrb	r3, [r7, #7]
 800bf72:	461a      	mov	r2, r3
 800bf74:	6939      	ldr	r1, [r7, #16]
 800bf76:	6978      	ldr	r0, [r7, #20]
 800bf78:	f7ff ff7a 	bl	800be70 <xQueueGenericCreate>
 800bf7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7ff ffd3 	bl	800bf2a <prvInitialiseMutex>

		return xNewQueue;
 800bf84:	68fb      	ldr	r3, [r7, #12]
	}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3718      	adds	r7, #24
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b088      	sub	sp, #32
 800bf92:	af02      	add	r7, sp, #8
 800bf94:	4603      	mov	r3, r0
 800bf96:	6039      	str	r1, [r7, #0]
 800bf98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	6939      	ldr	r1, [r7, #16]
 800bfac:	6978      	ldr	r0, [r7, #20]
 800bfae:	f7ff fee7 	bl	800bd80 <xQueueGenericCreateStatic>
 800bfb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f7ff ffb8 	bl	800bf2a <prvInitialiseMutex>

		return xNewQueue;
 800bfba:	68fb      	ldr	r3, [r7, #12]
	}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bfc4:	b590      	push	{r4, r7, lr}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10a      	bne.n	800bfec <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	60fb      	str	r3, [r7, #12]
}
 800bfe8:	bf00      	nop
 800bfea:	e7fe      	b.n	800bfea <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	689c      	ldr	r4, [r3, #8]
 800bff0:	f001 fd40 	bl	800da74 <xTaskGetCurrentTaskHandle>
 800bff4:	4603      	mov	r3, r0
 800bff6:	429c      	cmp	r4, r3
 800bff8:	d111      	bne.n	800c01e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	1e5a      	subs	r2, r3, #1
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d105      	bne.n	800c018 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c00c:	2300      	movs	r3, #0
 800c00e:	2200      	movs	r2, #0
 800c010:	2100      	movs	r1, #0
 800c012:	6938      	ldr	r0, [r7, #16]
 800c014:	f000 f8aa 	bl	800c16c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e001      	b.n	800c022 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c01e:	2300      	movs	r3, #0
 800c020:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c022:	697b      	ldr	r3, [r7, #20]
	}
 800c024:	4618      	mov	r0, r3
 800c026:	371c      	adds	r7, #28
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd90      	pop	{r4, r7, pc}

0800c02c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c02c:	b590      	push	{r4, r7, lr}
 800c02e:	b087      	sub	sp, #28
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10a      	bne.n	800c056 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800c040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c044:	f383 8811 	msr	BASEPRI, r3
 800c048:	f3bf 8f6f 	isb	sy
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	60fb      	str	r3, [r7, #12]
}
 800c052:	bf00      	nop
 800c054:	e7fe      	b.n	800c054 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	689c      	ldr	r4, [r3, #8]
 800c05a:	f001 fd0b 	bl	800da74 <xTaskGetCurrentTaskHandle>
 800c05e:	4603      	mov	r3, r0
 800c060:	429c      	cmp	r4, r3
 800c062:	d107      	bne.n	800c074 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c06e:	2301      	movs	r3, #1
 800c070:	617b      	str	r3, [r7, #20]
 800c072:	e00c      	b.n	800c08e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6938      	ldr	r0, [r7, #16]
 800c078:	f000 fb7e 	bl	800c778 <xQueueSemaphoreTake>
 800c07c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d004      	beq.n	800c08e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c08e:	697b      	ldr	r3, [r7, #20]
	}
 800c090:	4618      	mov	r0, r3
 800c092:	371c      	adds	r7, #28
 800c094:	46bd      	mov	sp, r7
 800c096:	bd90      	pop	{r4, r7, pc}

0800c098 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08a      	sub	sp, #40	; 0x28
 800c09c:	af02      	add	r7, sp, #8
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	61bb      	str	r3, [r7, #24]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d90a      	bls.n	800c0de <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	617b      	str	r3, [r7, #20]
}
 800c0da:	bf00      	nop
 800c0dc:	e7fe      	b.n	800c0dc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c0de:	2302      	movs	r3, #2
 800c0e0:	9300      	str	r3, [sp, #0]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f7ff fe49 	bl	800bd80 <xQueueGenericCreateStatic>
 800c0ee:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d002      	beq.n	800c0fc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c0fc:	69fb      	ldr	r3, [r7, #28]
	}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3720      	adds	r7, #32
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c106:	b580      	push	{r7, lr}
 800c108:	b086      	sub	sp, #24
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10a      	bne.n	800c12c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	613b      	str	r3, [r7, #16]
}
 800c128:	bf00      	nop
 800c12a:	e7fe      	b.n	800c12a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	429a      	cmp	r2, r3
 800c132:	d90a      	bls.n	800c14a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	60fb      	str	r3, [r7, #12]
}
 800c146:	bf00      	nop
 800c148:	e7fe      	b.n	800c148 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c14a:	2202      	movs	r2, #2
 800c14c:	2100      	movs	r1, #0
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff fe8e 	bl	800be70 <xQueueGenericCreate>
 800c154:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d002      	beq.n	800c162 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c162:	697b      	ldr	r3, [r7, #20]
	}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08e      	sub	sp, #56	; 0x38
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c17a:	2300      	movs	r3, #0
 800c17c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <xQueueGenericSend+0x32>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d103      	bne.n	800c1ac <xQueueGenericSend+0x40>
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <xQueueGenericSend+0x44>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e000      	b.n	800c1b2 <xQueueGenericSend+0x46>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10a      	bne.n	800c1cc <xQueueGenericSend+0x60>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c1c8:	bf00      	nop
 800c1ca:	e7fe      	b.n	800c1ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d103      	bne.n	800c1da <xQueueGenericSend+0x6e>
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d101      	bne.n	800c1de <xQueueGenericSend+0x72>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e000      	b.n	800c1e0 <xQueueGenericSend+0x74>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10a      	bne.n	800c1fa <xQueueGenericSend+0x8e>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	623b      	str	r3, [r7, #32]
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1fa:	f001 fc4b 	bl	800da94 <xTaskGetSchedulerState>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d102      	bne.n	800c20a <xQueueGenericSend+0x9e>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <xQueueGenericSend+0xa2>
 800c20a:	2301      	movs	r3, #1
 800c20c:	e000      	b.n	800c210 <xQueueGenericSend+0xa4>
 800c20e:	2300      	movs	r3, #0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <xQueueGenericSend+0xbe>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	61fb      	str	r3, [r7, #28]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c22a:	f002 fb8b 	bl	800e944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c236:	429a      	cmp	r2, r3
 800c238:	d302      	bcc.n	800c240 <xQueueGenericSend+0xd4>
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d129      	bne.n	800c294 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c246:	f000 fc5e 	bl	800cb06 <prvCopyDataToQueue>
 800c24a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c250:	2b00      	cmp	r3, #0
 800c252:	d010      	beq.n	800c276 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c256:	3324      	adds	r3, #36	; 0x24
 800c258:	4618      	mov	r0, r3
 800c25a:	f001 fa4d 	bl	800d6f8 <xTaskRemoveFromEventList>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d013      	beq.n	800c28c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c264:	4b3f      	ldr	r3, [pc, #252]	; (800c364 <xQueueGenericSend+0x1f8>)
 800c266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	e00a      	b.n	800c28c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d007      	beq.n	800c28c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c27c:	4b39      	ldr	r3, [pc, #228]	; (800c364 <xQueueGenericSend+0x1f8>)
 800c27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c28c:	f002 fb8a 	bl	800e9a4 <vPortExitCritical>
				return pdPASS;
 800c290:	2301      	movs	r3, #1
 800c292:	e063      	b.n	800c35c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d103      	bne.n	800c2a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c29a:	f002 fb83 	bl	800e9a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e05c      	b.n	800c35c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2a8:	f107 0314 	add.w	r3, r7, #20
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f001 fa87 	bl	800d7c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2b6:	f002 fb75 	bl	800e9a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2ba:	f000 fff9 	bl	800d2b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2be:	f002 fb41 	bl	800e944 <vPortEnterCritical>
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2c8:	b25b      	sxtb	r3, r3
 800c2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ce:	d103      	bne.n	800c2d8 <xQueueGenericSend+0x16c>
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2de:	b25b      	sxtb	r3, r3
 800c2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e4:	d103      	bne.n	800c2ee <xQueueGenericSend+0x182>
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2ee:	f002 fb59 	bl	800e9a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2f2:	1d3a      	adds	r2, r7, #4
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f001 fa76 	bl	800d7ec <xTaskCheckForTimeOut>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d124      	bne.n	800c350 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c308:	f000 fcf5 	bl	800ccf6 <prvIsQueueFull>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d018      	beq.n	800c344 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	3310      	adds	r3, #16
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	4611      	mov	r1, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f001 f99c 	bl	800d658 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c322:	f000 fc80 	bl	800cc26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c326:	f000 ffd1 	bl	800d2cc <xTaskResumeAll>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f47f af7c 	bne.w	800c22a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c332:	4b0c      	ldr	r3, [pc, #48]	; (800c364 <xQueueGenericSend+0x1f8>)
 800c334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c338:	601a      	str	r2, [r3, #0]
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	e772      	b.n	800c22a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c346:	f000 fc6e 	bl	800cc26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c34a:	f000 ffbf 	bl	800d2cc <xTaskResumeAll>
 800c34e:	e76c      	b.n	800c22a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c352:	f000 fc68 	bl	800cc26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c356:	f000 ffb9 	bl	800d2cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c35a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3738      	adds	r7, #56	; 0x38
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	e000ed04 	.word	0xe000ed04

0800c368 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b090      	sub	sp, #64	; 0x40
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <xQueueGenericSendFromISR+0x3c>
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <xQueueGenericSendFromISR+0x40>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e000      	b.n	800c3aa <xQueueGenericSendFromISR+0x42>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10a      	bne.n	800c3c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d103      	bne.n	800c3d2 <xQueueGenericSendFromISR+0x6a>
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d101      	bne.n	800c3d6 <xQueueGenericSendFromISR+0x6e>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <xQueueGenericSendFromISR+0x70>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	623b      	str	r3, [r7, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3f2:	f002 fb89 	bl	800eb08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c3f6:	f3ef 8211 	mrs	r2, BASEPRI
 800c3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fe:	f383 8811 	msr	BASEPRI, r3
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	61fa      	str	r2, [r7, #28]
 800c40c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c40e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c410:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d302      	bcc.n	800c424 <xQueueGenericSendFromISR+0xbc>
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b02      	cmp	r3, #2
 800c422:	d12f      	bne.n	800c484 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c432:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	68b9      	ldr	r1, [r7, #8]
 800c438:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c43a:	f000 fb64 	bl	800cb06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c43e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c446:	d112      	bne.n	800c46e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d016      	beq.n	800c47e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	3324      	adds	r3, #36	; 0x24
 800c454:	4618      	mov	r0, r3
 800c456:	f001 f94f 	bl	800d6f8 <xTaskRemoveFromEventList>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00e      	beq.n	800c47e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00b      	beq.n	800c47e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	e007      	b.n	800c47e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c46e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c472:	3301      	adds	r3, #1
 800c474:	b2db      	uxtb	r3, r3
 800c476:	b25a      	sxtb	r2, r3
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c47e:	2301      	movs	r3, #1
 800c480:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c482:	e001      	b.n	800c488 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c484:	2300      	movs	r3, #0
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c492:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c496:	4618      	mov	r0, r3
 800c498:	3740      	adds	r7, #64	; 0x40
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b08e      	sub	sp, #56	; 0x38
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10a      	bne.n	800c4c8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	623b      	str	r3, [r7, #32]
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00a      	beq.n	800c4e6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	61fb      	str	r3, [r7, #28]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d103      	bne.n	800c4f6 <xQueueGiveFromISR+0x58>
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <xQueueGiveFromISR+0x5c>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <xQueueGiveFromISR+0x5e>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	61bb      	str	r3, [r7, #24]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c516:	f002 faf7 	bl	800eb08 <vPortValidateInterruptPriority>
	__asm volatile
 800c51a:	f3ef 8211 	mrs	r2, BASEPRI
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	617a      	str	r2, [r7, #20]
 800c530:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c532:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c542:	429a      	cmp	r2, r3
 800c544:	d22b      	bcs.n	800c59e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	1c5a      	adds	r2, r3, #1
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c560:	d112      	bne.n	800c588 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c566:	2b00      	cmp	r3, #0
 800c568:	d016      	beq.n	800c598 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	3324      	adds	r3, #36	; 0x24
 800c56e:	4618      	mov	r0, r3
 800c570:	f001 f8c2 	bl	800d6f8 <xTaskRemoveFromEventList>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00e      	beq.n	800c598 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00b      	beq.n	800c598 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2201      	movs	r2, #1
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	e007      	b.n	800c598 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c58c:	3301      	adds	r3, #1
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	b25a      	sxtb	r2, r3
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c598:	2301      	movs	r3, #1
 800c59a:	637b      	str	r3, [r7, #52]	; 0x34
 800c59c:	e001      	b.n	800c5a2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f383 8811 	msr	BASEPRI, r3
}
 800c5ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3738      	adds	r7, #56	; 0x38
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08c      	sub	sp, #48	; 0x30
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10a      	bne.n	800c5e8 <xQueueReceive+0x30>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	623b      	str	r3, [r7, #32]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d103      	bne.n	800c5f6 <xQueueReceive+0x3e>
 800c5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <xQueueReceive+0x42>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e000      	b.n	800c5fc <xQueueReceive+0x44>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10a      	bne.n	800c616 <xQueueReceive+0x5e>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	61fb      	str	r3, [r7, #28]
}
 800c612:	bf00      	nop
 800c614:	e7fe      	b.n	800c614 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c616:	f001 fa3d 	bl	800da94 <xTaskGetSchedulerState>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d102      	bne.n	800c626 <xQueueReceive+0x6e>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <xQueueReceive+0x72>
 800c626:	2301      	movs	r3, #1
 800c628:	e000      	b.n	800c62c <xQueueReceive+0x74>
 800c62a:	2300      	movs	r3, #0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10a      	bne.n	800c646 <xQueueReceive+0x8e>
	__asm volatile
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	61bb      	str	r3, [r7, #24]
}
 800c642:	bf00      	nop
 800c644:	e7fe      	b.n	800c644 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c646:	f002 f97d 	bl	800e944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	2b00      	cmp	r3, #0
 800c654:	d01f      	beq.n	800c696 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c656:	68b9      	ldr	r1, [r7, #8]
 800c658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c65a:	f000 fabe 	bl	800cbda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	1e5a      	subs	r2, r3, #1
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	691b      	ldr	r3, [r3, #16]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00f      	beq.n	800c68e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	3310      	adds	r3, #16
 800c672:	4618      	mov	r0, r3
 800c674:	f001 f840 	bl	800d6f8 <xTaskRemoveFromEventList>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d007      	beq.n	800c68e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c67e:	4b3d      	ldr	r3, [pc, #244]	; (800c774 <xQueueReceive+0x1bc>)
 800c680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c68e:	f002 f989 	bl	800e9a4 <vPortExitCritical>
				return pdPASS;
 800c692:	2301      	movs	r3, #1
 800c694:	e069      	b.n	800c76a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d103      	bne.n	800c6a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c69c:	f002 f982 	bl	800e9a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	e062      	b.n	800c76a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6aa:	f107 0310 	add.w	r3, r7, #16
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 f886 	bl	800d7c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6b8:	f002 f974 	bl	800e9a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6bc:	f000 fdf8 	bl	800d2b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6c0:	f002 f940 	bl	800e944 <vPortEnterCritical>
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6ca:	b25b      	sxtb	r3, r3
 800c6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d0:	d103      	bne.n	800c6da <xQueueReceive+0x122>
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e0:	b25b      	sxtb	r3, r3
 800c6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e6:	d103      	bne.n	800c6f0 <xQueueReceive+0x138>
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6f0:	f002 f958 	bl	800e9a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6f4:	1d3a      	adds	r2, r7, #4
 800c6f6:	f107 0310 	add.w	r3, r7, #16
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f001 f875 	bl	800d7ec <xTaskCheckForTimeOut>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d123      	bne.n	800c750 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c70a:	f000 fade 	bl	800ccca <prvIsQueueEmpty>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d017      	beq.n	800c744 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c716:	3324      	adds	r3, #36	; 0x24
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	4611      	mov	r1, r2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f000 ff9b 	bl	800d658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c724:	f000 fa7f 	bl	800cc26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c728:	f000 fdd0 	bl	800d2cc <xTaskResumeAll>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d189      	bne.n	800c646 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c732:	4b10      	ldr	r3, [pc, #64]	; (800c774 <xQueueReceive+0x1bc>)
 800c734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	e780      	b.n	800c646 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c746:	f000 fa6e 	bl	800cc26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c74a:	f000 fdbf 	bl	800d2cc <xTaskResumeAll>
 800c74e:	e77a      	b.n	800c646 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c752:	f000 fa68 	bl	800cc26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c756:	f000 fdb9 	bl	800d2cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c75c:	f000 fab5 	bl	800ccca <prvIsQueueEmpty>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	f43f af6f 	beq.w	800c646 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3730      	adds	r7, #48	; 0x30
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	e000ed04 	.word	0xe000ed04

0800c778 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08e      	sub	sp, #56	; 0x38
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c782:	2300      	movs	r3, #0
 800c784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c78a:	2300      	movs	r3, #0
 800c78c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10a      	bne.n	800c7aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	623b      	str	r3, [r7, #32]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00a      	beq.n	800c7c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	61fb      	str	r3, [r7, #28]
}
 800c7c4:	bf00      	nop
 800c7c6:	e7fe      	b.n	800c7c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7c8:	f001 f964 	bl	800da94 <xTaskGetSchedulerState>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <xQueueSemaphoreTake+0x60>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <xQueueSemaphoreTake+0x64>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e000      	b.n	800c7de <xQueueSemaphoreTake+0x66>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	61bb      	str	r3, [r7, #24]
}
 800c7f4:	bf00      	nop
 800c7f6:	e7fe      	b.n	800c7f6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7f8:	f002 f8a4 	bl	800e944 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c800:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c804:	2b00      	cmp	r3, #0
 800c806:	d024      	beq.n	800c852 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	1e5a      	subs	r2, r3, #1
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d104      	bne.n	800c822 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c818:	f001 fab2 	bl	800dd80 <pvTaskIncrementMutexHeldCount>
 800c81c:	4602      	mov	r2, r0
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00f      	beq.n	800c84a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82c:	3310      	adds	r3, #16
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 ff62 	bl	800d6f8 <xTaskRemoveFromEventList>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d007      	beq.n	800c84a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c83a:	4b54      	ldr	r3, [pc, #336]	; (800c98c <xQueueSemaphoreTake+0x214>)
 800c83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c840:	601a      	str	r2, [r3, #0]
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c84a:	f002 f8ab 	bl	800e9a4 <vPortExitCritical>
				return pdPASS;
 800c84e:	2301      	movs	r3, #1
 800c850:	e097      	b.n	800c982 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d111      	bne.n	800c87c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00a      	beq.n	800c874 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	617b      	str	r3, [r7, #20]
}
 800c870:	bf00      	nop
 800c872:	e7fe      	b.n	800c872 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c874:	f002 f896 	bl	800e9a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c878:	2300      	movs	r3, #0
 800c87a:	e082      	b.n	800c982 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c882:	f107 030c 	add.w	r3, r7, #12
 800c886:	4618      	mov	r0, r3
 800c888:	f000 ff9a 	bl	800d7c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c88c:	2301      	movs	r3, #1
 800c88e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c890:	f002 f888 	bl	800e9a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c894:	f000 fd0c 	bl	800d2b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c898:	f002 f854 	bl	800e944 <vPortEnterCritical>
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8a2:	b25b      	sxtb	r3, r3
 800c8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a8:	d103      	bne.n	800c8b2 <xQueueSemaphoreTake+0x13a>
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8b8:	b25b      	sxtb	r3, r3
 800c8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8be:	d103      	bne.n	800c8c8 <xQueueSemaphoreTake+0x150>
 800c8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8c8:	f002 f86c 	bl	800e9a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8cc:	463a      	mov	r2, r7
 800c8ce:	f107 030c 	add.w	r3, r7, #12
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 ff89 	bl	800d7ec <xTaskCheckForTimeOut>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d132      	bne.n	800c946 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8e2:	f000 f9f2 	bl	800ccca <prvIsQueueEmpty>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d026      	beq.n	800c93a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d109      	bne.n	800c908 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c8f4:	f002 f826 	bl	800e944 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f001 f8e7 	bl	800dad0 <xTaskPriorityInherit>
 800c902:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c904:	f002 f84e 	bl	800e9a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	3324      	adds	r3, #36	; 0x24
 800c90c:	683a      	ldr	r2, [r7, #0]
 800c90e:	4611      	mov	r1, r2
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fea1 	bl	800d658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c918:	f000 f985 	bl	800cc26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c91c:	f000 fcd6 	bl	800d2cc <xTaskResumeAll>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	f47f af68 	bne.w	800c7f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c928:	4b18      	ldr	r3, [pc, #96]	; (800c98c <xQueueSemaphoreTake+0x214>)
 800c92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	e75e      	b.n	800c7f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c93a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c93c:	f000 f973 	bl	800cc26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c940:	f000 fcc4 	bl	800d2cc <xTaskResumeAll>
 800c944:	e758      	b.n	800c7f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c948:	f000 f96d 	bl	800cc26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c94c:	f000 fcbe 	bl	800d2cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c952:	f000 f9ba 	bl	800ccca <prvIsQueueEmpty>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f43f af4d 	beq.w	800c7f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00d      	beq.n	800c980 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c964:	f001 ffee 	bl	800e944 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c96a:	f000 f8b4 	bl	800cad6 <prvGetDisinheritPriorityAfterTimeout>
 800c96e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c976:	4618      	mov	r0, r3
 800c978:	f001 f980 	bl	800dc7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c97c:	f002 f812 	bl	800e9a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c980:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c982:	4618      	mov	r0, r3
 800c984:	3738      	adds	r7, #56	; 0x38
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	e000ed04 	.word	0xe000ed04

0800c990 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b08e      	sub	sp, #56	; 0x38
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d10a      	bne.n	800c9bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	623b      	str	r3, [r7, #32]
}
 800c9b8:	bf00      	nop
 800c9ba:	e7fe      	b.n	800c9ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d103      	bne.n	800c9ca <xQueueReceiveFromISR+0x3a>
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <xQueueReceiveFromISR+0x3e>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e000      	b.n	800c9d0 <xQueueReceiveFromISR+0x40>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10a      	bne.n	800c9ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	61fb      	str	r3, [r7, #28]
}
 800c9e6:	bf00      	nop
 800c9e8:	e7fe      	b.n	800c9e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9ea:	f002 f88d 	bl	800eb08 <vPortValidateInterruptPriority>
	__asm volatile
 800c9ee:	f3ef 8211 	mrs	r2, BASEPRI
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	61ba      	str	r2, [r7, #24]
 800ca04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d02f      	beq.n	800ca76 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca20:	68b9      	ldr	r1, [r7, #8]
 800ca22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca24:	f000 f8d9 	bl	800cbda <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2a:	1e5a      	subs	r2, r3, #1
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca38:	d112      	bne.n	800ca60 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d016      	beq.n	800ca70 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	3310      	adds	r3, #16
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 fe56 	bl	800d6f8 <xTaskRemoveFromEventList>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00e      	beq.n	800ca70 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00b      	beq.n	800ca70 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	e007      	b.n	800ca70 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ca60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca64:	3301      	adds	r3, #1
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	b25a      	sxtb	r2, r3
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ca70:	2301      	movs	r3, #1
 800ca72:	637b      	str	r3, [r7, #52]	; 0x34
 800ca74:	e001      	b.n	800ca7a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ca76:	2300      	movs	r3, #0
 800ca78:	637b      	str	r3, [r7, #52]	; 0x34
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f383 8811 	msr	BASEPRI, r3
}
 800ca84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3738      	adds	r7, #56	; 0x38
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10a      	bne.n	800cab8 <vQueueDelete+0x28>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	60bb      	str	r3, [r7, #8]
}
 800cab4:	bf00      	nop
 800cab6:	e7fe      	b.n	800cab6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 f95f 	bl	800cd7c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d102      	bne.n	800cace <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f002 f929 	bl	800ed20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cace:	bf00      	nop
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cad6:	b480      	push	{r7}
 800cad8:	b085      	sub	sp, #20
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d006      	beq.n	800caf4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e001      	b.n	800caf8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800caf8:	68fb      	ldr	r3, [r7, #12]
	}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb12:	2300      	movs	r3, #0
 800cb14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10d      	bne.n	800cb40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d14d      	bne.n	800cbc8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 f835 	bl	800dba0 <xTaskPriorityDisinherit>
 800cb36:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	609a      	str	r2, [r3, #8]
 800cb3e:	e043      	b.n	800cbc8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d119      	bne.n	800cb7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	6858      	ldr	r0, [r3, #4]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4e:	461a      	mov	r2, r3
 800cb50:	68b9      	ldr	r1, [r7, #8]
 800cb52:	f002 fa31 	bl	800efb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5e:	441a      	add	r2, r3
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d32b      	bcc.n	800cbc8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	605a      	str	r2, [r3, #4]
 800cb78:	e026      	b.n	800cbc8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	68d8      	ldr	r0, [r3, #12]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb82:	461a      	mov	r2, r3
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	f002 fa17 	bl	800efb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb92:	425b      	negs	r3, r3
 800cb94:	441a      	add	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	68da      	ldr	r2, [r3, #12]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d207      	bcs.n	800cbb6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	689a      	ldr	r2, [r3, #8]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbae:	425b      	negs	r3, r3
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d105      	bne.n	800cbc8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d002      	beq.n	800cbc8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	1c5a      	adds	r2, r3, #1
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cbd0:	697b      	ldr	r3, [r7, #20]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3718      	adds	r7, #24
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b082      	sub	sp, #8
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d018      	beq.n	800cc1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	68da      	ldr	r2, [r3, #12]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf4:	441a      	add	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d303      	bcc.n	800cc0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68d9      	ldr	r1, [r3, #12]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc16:	461a      	mov	r2, r3
 800cc18:	6838      	ldr	r0, [r7, #0]
 800cc1a:	f002 f9cd 	bl	800efb8 <memcpy>
	}
}
 800cc1e:	bf00      	nop
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc2e:	f001 fe89 	bl	800e944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc3a:	e011      	b.n	800cc60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d012      	beq.n	800cc6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3324      	adds	r3, #36	; 0x24
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f000 fd55 	bl	800d6f8 <xTaskRemoveFromEventList>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc54:	f000 fe2c 	bl	800d8b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dce9      	bgt.n	800cc3c <prvUnlockQueue+0x16>
 800cc68:	e000      	b.n	800cc6c <prvUnlockQueue+0x46>
					break;
 800cc6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	22ff      	movs	r2, #255	; 0xff
 800cc70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cc74:	f001 fe96 	bl	800e9a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc78:	f001 fe64 	bl	800e944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc84:	e011      	b.n	800ccaa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d012      	beq.n	800ccb4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3310      	adds	r3, #16
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fd30 	bl	800d6f8 <xTaskRemoveFromEventList>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cc9e:	f000 fe07 	bl	800d8b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cca2:	7bbb      	ldrb	r3, [r7, #14]
 800cca4:	3b01      	subs	r3, #1
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	dce9      	bgt.n	800cc86 <prvUnlockQueue+0x60>
 800ccb2:	e000      	b.n	800ccb6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ccb4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	22ff      	movs	r2, #255	; 0xff
 800ccba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ccbe:	f001 fe71 	bl	800e9a4 <vPortExitCritical>
}
 800ccc2:	bf00      	nop
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b084      	sub	sp, #16
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ccd2:	f001 fe37 	bl	800e944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d102      	bne.n	800cce4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ccde:	2301      	movs	r3, #1
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	e001      	b.n	800cce8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cce8:	f001 fe5c 	bl	800e9a4 <vPortExitCritical>

	return xReturn;
 800ccec:	68fb      	ldr	r3, [r7, #12]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ccfe:	f001 fe21 	bl	800e944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d102      	bne.n	800cd14 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	60fb      	str	r3, [r7, #12]
 800cd12:	e001      	b.n	800cd18 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd18:	f001 fe44 	bl	800e9a4 <vPortExitCritical>

	return xReturn;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd32:	2300      	movs	r3, #0
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	e014      	b.n	800cd62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd38:	4a0f      	ldr	r2, [pc, #60]	; (800cd78 <vQueueAddToRegistry+0x50>)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10b      	bne.n	800cd5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd44:	490c      	ldr	r1, [pc, #48]	; (800cd78 <vQueueAddToRegistry+0x50>)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd4e:	4a0a      	ldr	r2, [pc, #40]	; (800cd78 <vQueueAddToRegistry+0x50>)
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	4413      	add	r3, r2
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd5a:	e006      	b.n	800cd6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	60fb      	str	r3, [r7, #12]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2b07      	cmp	r3, #7
 800cd66:	d9e7      	bls.n	800cd38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd68:	bf00      	nop
 800cd6a:	bf00      	nop
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	20005d3c 	.word	0x20005d3c

0800cd7c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd84:	2300      	movs	r3, #0
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	e016      	b.n	800cdb8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cd8a:	4a10      	ldr	r2, [pc, #64]	; (800cdcc <vQueueUnregisterQueue+0x50>)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	4413      	add	r3, r2
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d10b      	bne.n	800cdb2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cd9a:	4a0c      	ldr	r2, [pc, #48]	; (800cdcc <vQueueUnregisterQueue+0x50>)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2100      	movs	r1, #0
 800cda0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cda4:	4a09      	ldr	r2, [pc, #36]	; (800cdcc <vQueueUnregisterQueue+0x50>)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	4413      	add	r3, r2
 800cdac:	2200      	movs	r2, #0
 800cdae:	605a      	str	r2, [r3, #4]
				break;
 800cdb0:	e006      	b.n	800cdc0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b07      	cmp	r3, #7
 800cdbc:	d9e5      	bls.n	800cd8a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cdbe:	bf00      	nop
 800cdc0:	bf00      	nop
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	20005d3c 	.word	0x20005d3c

0800cdd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cde0:	f001 fdb0 	bl	800e944 <vPortEnterCritical>
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdea:	b25b      	sxtb	r3, r3
 800cdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf0:	d103      	bne.n	800cdfa <vQueueWaitForMessageRestricted+0x2a>
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce00:	b25b      	sxtb	r3, r3
 800ce02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce06:	d103      	bne.n	800ce10 <vQueueWaitForMessageRestricted+0x40>
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce10:	f001 fdc8 	bl	800e9a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d106      	bne.n	800ce2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	3324      	adds	r3, #36	; 0x24
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 fc3b 	bl	800d6a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce2a:	6978      	ldr	r0, [r7, #20]
 800ce2c:	f7ff fefb 	bl	800cc26 <prvUnlockQueue>
	}
 800ce30:	bf00      	nop
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08e      	sub	sp, #56	; 0x38
 800ce3c:	af04      	add	r7, sp, #16
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10a      	bne.n	800ce62 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce50:	f383 8811 	msr	BASEPRI, r3
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	623b      	str	r3, [r7, #32]
}
 800ce5e:	bf00      	nop
 800ce60:	e7fe      	b.n	800ce60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <xTaskCreateStatic+0x46>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	61fb      	str	r3, [r7, #28]
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce7e:	235c      	movs	r3, #92	; 0x5c
 800ce80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	2b5c      	cmp	r3, #92	; 0x5c
 800ce86:	d00a      	beq.n	800ce9e <xTaskCreateStatic+0x66>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	61bb      	str	r3, [r7, #24]
}
 800ce9a:	bf00      	nop
 800ce9c:	e7fe      	b.n	800ce9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ce9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d01e      	beq.n	800cee4 <xTaskCreateStatic+0xac>
 800cea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d01b      	beq.n	800cee4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	2202      	movs	r2, #2
 800ceba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cebe:	2300      	movs	r3, #0
 800cec0:	9303      	str	r3, [sp, #12]
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	9302      	str	r3, [sp, #8]
 800cec6:	f107 0314 	add.w	r3, r7, #20
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	68b9      	ldr	r1, [r7, #8]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f000 f850 	bl	800cf7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cedc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cede:	f000 f8dd 	bl	800d09c <prvAddNewTaskToReadyList>
 800cee2:	e001      	b.n	800cee8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cee4:	2300      	movs	r3, #0
 800cee6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cee8:	697b      	ldr	r3, [r7, #20]
	}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3728      	adds	r7, #40	; 0x28
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b08c      	sub	sp, #48	; 0x30
 800cef6:	af04      	add	r7, sp, #16
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	603b      	str	r3, [r7, #0]
 800cefe:	4613      	mov	r3, r2
 800cf00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf02:	88fb      	ldrh	r3, [r7, #6]
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f001 fe3e 	bl	800eb88 <pvPortMalloc>
 800cf0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00e      	beq.n	800cf32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf14:	205c      	movs	r0, #92	; 0x5c
 800cf16:	f001 fe37 	bl	800eb88 <pvPortMalloc>
 800cf1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d003      	beq.n	800cf2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	631a      	str	r2, [r3, #48]	; 0x30
 800cf28:	e005      	b.n	800cf36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf2a:	6978      	ldr	r0, [r7, #20]
 800cf2c:	f001 fef8 	bl	800ed20 <vPortFree>
 800cf30:	e001      	b.n	800cf36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf36:	69fb      	ldr	r3, [r7, #28]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d017      	beq.n	800cf6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf44:	88fa      	ldrh	r2, [r7, #6]
 800cf46:	2300      	movs	r3, #0
 800cf48:	9303      	str	r3, [sp, #12]
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	9302      	str	r3, [sp, #8]
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	9301      	str	r3, [sp, #4]
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	68b9      	ldr	r1, [r7, #8]
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f000 f80e 	bl	800cf7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf60:	69f8      	ldr	r0, [r7, #28]
 800cf62:	f000 f89b 	bl	800d09c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf66:	2301      	movs	r3, #1
 800cf68:	61bb      	str	r3, [r7, #24]
 800cf6a:	e002      	b.n	800cf72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf72:	69bb      	ldr	r3, [r7, #24]
	}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3720      	adds	r7, #32
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b088      	sub	sp, #32
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
 800cf88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	461a      	mov	r2, r3
 800cf94:	21a5      	movs	r1, #165	; 0xa5
 800cf96:	f002 f81d 	bl	800efd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	f023 0307 	bic.w	r3, r3, #7
 800cfb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	f003 0307 	and.w	r3, r3, #7
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00a      	beq.n	800cfd4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	617b      	str	r3, [r7, #20]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d01f      	beq.n	800d01a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfda:	2300      	movs	r3, #0
 800cfdc:	61fb      	str	r3, [r7, #28]
 800cfde:	e012      	b.n	800d006 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	7819      	ldrb	r1, [r3, #0]
 800cfe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	4413      	add	r3, r2
 800cfee:	3334      	adds	r3, #52	; 0x34
 800cff0:	460a      	mov	r2, r1
 800cff2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	4413      	add	r3, r2
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d006      	beq.n	800d00e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	3301      	adds	r3, #1
 800d004:	61fb      	str	r3, [r7, #28]
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	2b0f      	cmp	r3, #15
 800d00a:	d9e9      	bls.n	800cfe0 <prvInitialiseNewTask+0x64>
 800d00c:	e000      	b.n	800d010 <prvInitialiseNewTask+0x94>
			{
				break;
 800d00e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d012:	2200      	movs	r2, #0
 800d014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d018:	e003      	b.n	800d022 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01c:	2200      	movs	r2, #0
 800d01e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d024:	2b37      	cmp	r3, #55	; 0x37
 800d026:	d901      	bls.n	800d02c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d028:	2337      	movs	r3, #55	; 0x37
 800d02a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d030:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d036:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03a:	2200      	movs	r2, #0
 800d03c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	3304      	adds	r3, #4
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe fda0 	bl	800bb88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	3318      	adds	r3, #24
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fe fd9b 	bl	800bb88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d056:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d060:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d066:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	2200      	movs	r2, #0
 800d06c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	2200      	movs	r2, #0
 800d072:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	68f9      	ldr	r1, [r7, #12]
 800d07a:	69b8      	ldr	r0, [r7, #24]
 800d07c:	f001 fb36 	bl	800e6ec <pxPortInitialiseStack>
 800d080:	4602      	mov	r2, r0
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d092:	bf00      	nop
 800d094:	3720      	adds	r7, #32
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
	...

0800d09c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d0a4:	f001 fc4e 	bl	800e944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d0a8:	4b2d      	ldr	r3, [pc, #180]	; (800d160 <prvAddNewTaskToReadyList+0xc4>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	4a2c      	ldr	r2, [pc, #176]	; (800d160 <prvAddNewTaskToReadyList+0xc4>)
 800d0b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d0b2:	4b2c      	ldr	r3, [pc, #176]	; (800d164 <prvAddNewTaskToReadyList+0xc8>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d109      	bne.n	800d0ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d0ba:	4a2a      	ldr	r2, [pc, #168]	; (800d164 <prvAddNewTaskToReadyList+0xc8>)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d0c0:	4b27      	ldr	r3, [pc, #156]	; (800d160 <prvAddNewTaskToReadyList+0xc4>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d110      	bne.n	800d0ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d0c8:	f000 fc16 	bl	800d8f8 <prvInitialiseTaskLists>
 800d0cc:	e00d      	b.n	800d0ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d0ce:	4b26      	ldr	r3, [pc, #152]	; (800d168 <prvAddNewTaskToReadyList+0xcc>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d109      	bne.n	800d0ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d0d6:	4b23      	ldr	r3, [pc, #140]	; (800d164 <prvAddNewTaskToReadyList+0xc8>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d802      	bhi.n	800d0ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d0e4:	4a1f      	ldr	r2, [pc, #124]	; (800d164 <prvAddNewTaskToReadyList+0xc8>)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d0ea:	4b20      	ldr	r3, [pc, #128]	; (800d16c <prvAddNewTaskToReadyList+0xd0>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	4a1e      	ldr	r2, [pc, #120]	; (800d16c <prvAddNewTaskToReadyList+0xd0>)
 800d0f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d0f4:	4b1d      	ldr	r3, [pc, #116]	; (800d16c <prvAddNewTaskToReadyList+0xd0>)
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d100:	4b1b      	ldr	r3, [pc, #108]	; (800d170 <prvAddNewTaskToReadyList+0xd4>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	429a      	cmp	r2, r3
 800d106:	d903      	bls.n	800d110 <prvAddNewTaskToReadyList+0x74>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10c:	4a18      	ldr	r2, [pc, #96]	; (800d170 <prvAddNewTaskToReadyList+0xd4>)
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d114:	4613      	mov	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4413      	add	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4a15      	ldr	r2, [pc, #84]	; (800d174 <prvAddNewTaskToReadyList+0xd8>)
 800d11e:	441a      	add	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	3304      	adds	r3, #4
 800d124:	4619      	mov	r1, r3
 800d126:	4610      	mov	r0, r2
 800d128:	f7fe fd3b 	bl	800bba2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d12c:	f001 fc3a 	bl	800e9a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d130:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <prvAddNewTaskToReadyList+0xcc>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00e      	beq.n	800d156 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d138:	4b0a      	ldr	r3, [pc, #40]	; (800d164 <prvAddNewTaskToReadyList+0xc8>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d142:	429a      	cmp	r2, r3
 800d144:	d207      	bcs.n	800d156 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d146:	4b0c      	ldr	r3, [pc, #48]	; (800d178 <prvAddNewTaskToReadyList+0xdc>)
 800d148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d156:	bf00      	nop
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	20000f54 	.word	0x20000f54
 800d164:	20000a80 	.word	0x20000a80
 800d168:	20000f60 	.word	0x20000f60
 800d16c:	20000f70 	.word	0x20000f70
 800d170:	20000f5c 	.word	0x20000f5c
 800d174:	20000a84 	.word	0x20000a84
 800d178:	e000ed04 	.word	0xe000ed04

0800d17c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d184:	2300      	movs	r3, #0
 800d186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d017      	beq.n	800d1be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <vTaskDelay+0x60>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00a      	beq.n	800d1ac <vTaskDelay+0x30>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	60bb      	str	r3, [r7, #8]
}
 800d1a8:	bf00      	nop
 800d1aa:	e7fe      	b.n	800d1aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d1ac:	f000 f880 	bl	800d2b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fef8 	bl	800dfa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d1b8:	f000 f888 	bl	800d2cc <xTaskResumeAll>
 800d1bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d107      	bne.n	800d1d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d1c4:	4b06      	ldr	r3, [pc, #24]	; (800d1e0 <vTaskDelay+0x64>)
 800d1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1d4:	bf00      	nop
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20000f7c 	.word	0x20000f7c
 800d1e0:	e000ed04 	.word	0xe000ed04

0800d1e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08a      	sub	sp, #40	; 0x28
 800d1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d1f2:	463a      	mov	r2, r7
 800d1f4:	1d39      	adds	r1, r7, #4
 800d1f6:	f107 0308 	add.w	r3, r7, #8
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fc70 	bl	800bae0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	9202      	str	r2, [sp, #8]
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	2300      	movs	r3, #0
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	2300      	movs	r3, #0
 800d210:	460a      	mov	r2, r1
 800d212:	4921      	ldr	r1, [pc, #132]	; (800d298 <vTaskStartScheduler+0xb4>)
 800d214:	4821      	ldr	r0, [pc, #132]	; (800d29c <vTaskStartScheduler+0xb8>)
 800d216:	f7ff fe0f 	bl	800ce38 <xTaskCreateStatic>
 800d21a:	4603      	mov	r3, r0
 800d21c:	4a20      	ldr	r2, [pc, #128]	; (800d2a0 <vTaskStartScheduler+0xbc>)
 800d21e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d220:	4b1f      	ldr	r3, [pc, #124]	; (800d2a0 <vTaskStartScheduler+0xbc>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d228:	2301      	movs	r3, #1
 800d22a:	617b      	str	r3, [r7, #20]
 800d22c:	e001      	b.n	800d232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d22e:	2300      	movs	r3, #0
 800d230:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d102      	bne.n	800d23e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d238:	f000 ff0a 	bl	800e050 <xTimerCreateTimerTask>
 800d23c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2b01      	cmp	r3, #1
 800d242:	d116      	bne.n	800d272 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	613b      	str	r3, [r7, #16]
}
 800d256:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d258:	4b12      	ldr	r3, [pc, #72]	; (800d2a4 <vTaskStartScheduler+0xc0>)
 800d25a:	f04f 32ff 	mov.w	r2, #4294967295
 800d25e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d260:	4b11      	ldr	r3, [pc, #68]	; (800d2a8 <vTaskStartScheduler+0xc4>)
 800d262:	2201      	movs	r2, #1
 800d264:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d266:	4b11      	ldr	r3, [pc, #68]	; (800d2ac <vTaskStartScheduler+0xc8>)
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d26c:	f001 fac8 	bl	800e800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d270:	e00e      	b.n	800d290 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d278:	d10a      	bne.n	800d290 <vTaskStartScheduler+0xac>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	60fb      	str	r3, [r7, #12]
}
 800d28c:	bf00      	nop
 800d28e:	e7fe      	b.n	800d28e <vTaskStartScheduler+0xaa>
}
 800d290:	bf00      	nop
 800d292:	3718      	adds	r7, #24
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	08015ea8 	.word	0x08015ea8
 800d29c:	0800d8c9 	.word	0x0800d8c9
 800d2a0:	20000f78 	.word	0x20000f78
 800d2a4:	20000f74 	.word	0x20000f74
 800d2a8:	20000f60 	.word	0x20000f60
 800d2ac:	20000f58 	.word	0x20000f58

0800d2b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d2b4:	4b04      	ldr	r3, [pc, #16]	; (800d2c8 <vTaskSuspendAll+0x18>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	4a03      	ldr	r2, [pc, #12]	; (800d2c8 <vTaskSuspendAll+0x18>)
 800d2bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d2be:	bf00      	nop
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	20000f7c 	.word	0x20000f7c

0800d2cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2da:	4b42      	ldr	r3, [pc, #264]	; (800d3e4 <xTaskResumeAll+0x118>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10a      	bne.n	800d2f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	603b      	str	r3, [r7, #0]
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d2f8:	f001 fb24 	bl	800e944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d2fc:	4b39      	ldr	r3, [pc, #228]	; (800d3e4 <xTaskResumeAll+0x118>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3b01      	subs	r3, #1
 800d302:	4a38      	ldr	r2, [pc, #224]	; (800d3e4 <xTaskResumeAll+0x118>)
 800d304:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d306:	4b37      	ldr	r3, [pc, #220]	; (800d3e4 <xTaskResumeAll+0x118>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d162      	bne.n	800d3d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d30e:	4b36      	ldr	r3, [pc, #216]	; (800d3e8 <xTaskResumeAll+0x11c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d05e      	beq.n	800d3d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d316:	e02f      	b.n	800d378 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d318:	4b34      	ldr	r3, [pc, #208]	; (800d3ec <xTaskResumeAll+0x120>)
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	3318      	adds	r3, #24
 800d324:	4618      	mov	r0, r3
 800d326:	f7fe fc99 	bl	800bc5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3304      	adds	r3, #4
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe fc94 	bl	800bc5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d338:	4b2d      	ldr	r3, [pc, #180]	; (800d3f0 <xTaskResumeAll+0x124>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d903      	bls.n	800d348 <xTaskResumeAll+0x7c>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	4a2a      	ldr	r2, [pc, #168]	; (800d3f0 <xTaskResumeAll+0x124>)
 800d346:	6013      	str	r3, [r2, #0]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34c:	4613      	mov	r3, r2
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	4413      	add	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4a27      	ldr	r2, [pc, #156]	; (800d3f4 <xTaskResumeAll+0x128>)
 800d356:	441a      	add	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3304      	adds	r3, #4
 800d35c:	4619      	mov	r1, r3
 800d35e:	4610      	mov	r0, r2
 800d360:	f7fe fc1f 	bl	800bba2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d368:	4b23      	ldr	r3, [pc, #140]	; (800d3f8 <xTaskResumeAll+0x12c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d36e:	429a      	cmp	r2, r3
 800d370:	d302      	bcc.n	800d378 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d372:	4b22      	ldr	r3, [pc, #136]	; (800d3fc <xTaskResumeAll+0x130>)
 800d374:	2201      	movs	r2, #1
 800d376:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d378:	4b1c      	ldr	r3, [pc, #112]	; (800d3ec <xTaskResumeAll+0x120>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1cb      	bne.n	800d318 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d386:	f000 fb55 	bl	800da34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d38a:	4b1d      	ldr	r3, [pc, #116]	; (800d400 <xTaskResumeAll+0x134>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d010      	beq.n	800d3b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d396:	f000 f847 	bl	800d428 <xTaskIncrementTick>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d3a0:	4b16      	ldr	r3, [pc, #88]	; (800d3fc <xTaskResumeAll+0x130>)
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1f1      	bne.n	800d396 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d3b2:	4b13      	ldr	r3, [pc, #76]	; (800d400 <xTaskResumeAll+0x134>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3b8:	4b10      	ldr	r3, [pc, #64]	; (800d3fc <xTaskResumeAll+0x130>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d009      	beq.n	800d3d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3c4:	4b0f      	ldr	r3, [pc, #60]	; (800d404 <xTaskResumeAll+0x138>)
 800d3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ca:	601a      	str	r2, [r3, #0]
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3d4:	f001 fae6 	bl	800e9a4 <vPortExitCritical>

	return xAlreadyYielded;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000f7c 	.word	0x20000f7c
 800d3e8:	20000f54 	.word	0x20000f54
 800d3ec:	20000f14 	.word	0x20000f14
 800d3f0:	20000f5c 	.word	0x20000f5c
 800d3f4:	20000a84 	.word	0x20000a84
 800d3f8:	20000a80 	.word	0x20000a80
 800d3fc:	20000f68 	.word	0x20000f68
 800d400:	20000f64 	.word	0x20000f64
 800d404:	e000ed04 	.word	0xe000ed04

0800d408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d40e:	4b05      	ldr	r3, [pc, #20]	; (800d424 <xTaskGetTickCount+0x1c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d414:	687b      	ldr	r3, [r7, #4]
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	20000f58 	.word	0x20000f58

0800d428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d42e:	2300      	movs	r3, #0
 800d430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d432:	4b4f      	ldr	r3, [pc, #316]	; (800d570 <xTaskIncrementTick+0x148>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	f040 808f 	bne.w	800d55a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d43c:	4b4d      	ldr	r3, [pc, #308]	; (800d574 <xTaskIncrementTick+0x14c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	3301      	adds	r3, #1
 800d442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d444:	4a4b      	ldr	r2, [pc, #300]	; (800d574 <xTaskIncrementTick+0x14c>)
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d120      	bne.n	800d492 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d450:	4b49      	ldr	r3, [pc, #292]	; (800d578 <xTaskIncrementTick+0x150>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00a      	beq.n	800d470 <xTaskIncrementTick+0x48>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	603b      	str	r3, [r7, #0]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <xTaskIncrementTick+0x46>
 800d470:	4b41      	ldr	r3, [pc, #260]	; (800d578 <xTaskIncrementTick+0x150>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	4b41      	ldr	r3, [pc, #260]	; (800d57c <xTaskIncrementTick+0x154>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a3f      	ldr	r2, [pc, #252]	; (800d578 <xTaskIncrementTick+0x150>)
 800d47c:	6013      	str	r3, [r2, #0]
 800d47e:	4a3f      	ldr	r2, [pc, #252]	; (800d57c <xTaskIncrementTick+0x154>)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6013      	str	r3, [r2, #0]
 800d484:	4b3e      	ldr	r3, [pc, #248]	; (800d580 <xTaskIncrementTick+0x158>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3301      	adds	r3, #1
 800d48a:	4a3d      	ldr	r2, [pc, #244]	; (800d580 <xTaskIncrementTick+0x158>)
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	f000 fad1 	bl	800da34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d492:	4b3c      	ldr	r3, [pc, #240]	; (800d584 <xTaskIncrementTick+0x15c>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d349      	bcc.n	800d530 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d49c:	4b36      	ldr	r3, [pc, #216]	; (800d578 <xTaskIncrementTick+0x150>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d104      	bne.n	800d4b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a6:	4b37      	ldr	r3, [pc, #220]	; (800d584 <xTaskIncrementTick+0x15c>)
 800d4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ac:	601a      	str	r2, [r3, #0]
					break;
 800d4ae:	e03f      	b.n	800d530 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4b0:	4b31      	ldr	r3, [pc, #196]	; (800d578 <xTaskIncrementTick+0x150>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d203      	bcs.n	800d4d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4c8:	4a2e      	ldr	r2, [pc, #184]	; (800d584 <xTaskIncrementTick+0x15c>)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4ce:	e02f      	b.n	800d530 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	3304      	adds	r3, #4
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fe fbc1 	bl	800bc5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d004      	beq.n	800d4ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	3318      	adds	r3, #24
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fe fbb8 	bl	800bc5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f0:	4b25      	ldr	r3, [pc, #148]	; (800d588 <xTaskIncrementTick+0x160>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d903      	bls.n	800d500 <xTaskIncrementTick+0xd8>
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fc:	4a22      	ldr	r2, [pc, #136]	; (800d588 <xTaskIncrementTick+0x160>)
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d504:	4613      	mov	r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	4413      	add	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	4a1f      	ldr	r2, [pc, #124]	; (800d58c <xTaskIncrementTick+0x164>)
 800d50e:	441a      	add	r2, r3
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	3304      	adds	r3, #4
 800d514:	4619      	mov	r1, r3
 800d516:	4610      	mov	r0, r2
 800d518:	f7fe fb43 	bl	800bba2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d520:	4b1b      	ldr	r3, [pc, #108]	; (800d590 <xTaskIncrementTick+0x168>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d526:	429a      	cmp	r2, r3
 800d528:	d3b8      	bcc.n	800d49c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d52a:	2301      	movs	r3, #1
 800d52c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d52e:	e7b5      	b.n	800d49c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d530:	4b17      	ldr	r3, [pc, #92]	; (800d590 <xTaskIncrementTick+0x168>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d536:	4915      	ldr	r1, [pc, #84]	; (800d58c <xTaskIncrementTick+0x164>)
 800d538:	4613      	mov	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	4413      	add	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	440b      	add	r3, r1
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d901      	bls.n	800d54c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d548:	2301      	movs	r3, #1
 800d54a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d54c:	4b11      	ldr	r3, [pc, #68]	; (800d594 <xTaskIncrementTick+0x16c>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d007      	beq.n	800d564 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d554:	2301      	movs	r3, #1
 800d556:	617b      	str	r3, [r7, #20]
 800d558:	e004      	b.n	800d564 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d55a:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <xTaskIncrementTick+0x170>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	3301      	adds	r3, #1
 800d560:	4a0d      	ldr	r2, [pc, #52]	; (800d598 <xTaskIncrementTick+0x170>)
 800d562:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d564:	697b      	ldr	r3, [r7, #20]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3718      	adds	r7, #24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	20000f7c 	.word	0x20000f7c
 800d574:	20000f58 	.word	0x20000f58
 800d578:	20000f0c 	.word	0x20000f0c
 800d57c:	20000f10 	.word	0x20000f10
 800d580:	20000f6c 	.word	0x20000f6c
 800d584:	20000f74 	.word	0x20000f74
 800d588:	20000f5c 	.word	0x20000f5c
 800d58c:	20000a84 	.word	0x20000a84
 800d590:	20000a80 	.word	0x20000a80
 800d594:	20000f68 	.word	0x20000f68
 800d598:	20000f64 	.word	0x20000f64

0800d59c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d5a2:	4b28      	ldr	r3, [pc, #160]	; (800d644 <vTaskSwitchContext+0xa8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d003      	beq.n	800d5b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5aa:	4b27      	ldr	r3, [pc, #156]	; (800d648 <vTaskSwitchContext+0xac>)
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5b0:	e041      	b.n	800d636 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d5b2:	4b25      	ldr	r3, [pc, #148]	; (800d648 <vTaskSwitchContext+0xac>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5b8:	4b24      	ldr	r3, [pc, #144]	; (800d64c <vTaskSwitchContext+0xb0>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	e010      	b.n	800d5e2 <vTaskSwitchContext+0x46>
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10a      	bne.n	800d5dc <vTaskSwitchContext+0x40>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	607b      	str	r3, [r7, #4]
}
 800d5d8:	bf00      	nop
 800d5da:	e7fe      	b.n	800d5da <vTaskSwitchContext+0x3e>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	60fb      	str	r3, [r7, #12]
 800d5e2:	491b      	ldr	r1, [pc, #108]	; (800d650 <vTaskSwitchContext+0xb4>)
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	440b      	add	r3, r1
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d0e4      	beq.n	800d5c0 <vTaskSwitchContext+0x24>
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4413      	add	r3, r2
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4a13      	ldr	r2, [pc, #76]	; (800d650 <vTaskSwitchContext+0xb4>)
 800d602:	4413      	add	r3, r2
 800d604:	60bb      	str	r3, [r7, #8]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	685a      	ldr	r2, [r3, #4]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	605a      	str	r2, [r3, #4]
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	3308      	adds	r3, #8
 800d618:	429a      	cmp	r2, r3
 800d61a:	d104      	bne.n	800d626 <vTaskSwitchContext+0x8a>
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	605a      	str	r2, [r3, #4]
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	4a09      	ldr	r2, [pc, #36]	; (800d654 <vTaskSwitchContext+0xb8>)
 800d62e:	6013      	str	r3, [r2, #0]
 800d630:	4a06      	ldr	r2, [pc, #24]	; (800d64c <vTaskSwitchContext+0xb0>)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6013      	str	r3, [r2, #0]
}
 800d636:	bf00      	nop
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	20000f7c 	.word	0x20000f7c
 800d648:	20000f68 	.word	0x20000f68
 800d64c:	20000f5c 	.word	0x20000f5c
 800d650:	20000a84 	.word	0x20000a84
 800d654:	20000a80 	.word	0x20000a80

0800d658 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10a      	bne.n	800d67e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	60fb      	str	r3, [r7, #12]
}
 800d67a:	bf00      	nop
 800d67c:	e7fe      	b.n	800d67c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d67e:	4b07      	ldr	r3, [pc, #28]	; (800d69c <vTaskPlaceOnEventList+0x44>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	3318      	adds	r3, #24
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7fe faaf 	bl	800bbea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d68c:	2101      	movs	r1, #1
 800d68e:	6838      	ldr	r0, [r7, #0]
 800d690:	f000 fc8a 	bl	800dfa8 <prvAddCurrentTaskToDelayedList>
}
 800d694:	bf00      	nop
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	20000a80 	.word	0x20000a80

0800d6a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10a      	bne.n	800d6c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	617b      	str	r3, [r7, #20]
}
 800d6c4:	bf00      	nop
 800d6c6:	e7fe      	b.n	800d6c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6c8:	4b0a      	ldr	r3, [pc, #40]	; (800d6f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	3318      	adds	r3, #24
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f7fe fa66 	bl	800bba2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d6e2:	6879      	ldr	r1, [r7, #4]
 800d6e4:	68b8      	ldr	r0, [r7, #8]
 800d6e6:	f000 fc5f 	bl	800dfa8 <prvAddCurrentTaskToDelayedList>
	}
 800d6ea:	bf00      	nop
 800d6ec:	3718      	adds	r7, #24
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	20000a80 	.word	0x20000a80

0800d6f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10a      	bne.n	800d724 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	60fb      	str	r3, [r7, #12]
}
 800d720:	bf00      	nop
 800d722:	e7fe      	b.n	800d722 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	3318      	adds	r3, #24
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fe fa97 	bl	800bc5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d72e:	4b1e      	ldr	r3, [pc, #120]	; (800d7a8 <xTaskRemoveFromEventList+0xb0>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d11d      	bne.n	800d772 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	3304      	adds	r3, #4
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fa8e 	bl	800bc5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d744:	4b19      	ldr	r3, [pc, #100]	; (800d7ac <xTaskRemoveFromEventList+0xb4>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d903      	bls.n	800d754 <xTaskRemoveFromEventList+0x5c>
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d750:	4a16      	ldr	r2, [pc, #88]	; (800d7ac <xTaskRemoveFromEventList+0xb4>)
 800d752:	6013      	str	r3, [r2, #0]
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d758:	4613      	mov	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	4413      	add	r3, r2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	4a13      	ldr	r2, [pc, #76]	; (800d7b0 <xTaskRemoveFromEventList+0xb8>)
 800d762:	441a      	add	r2, r3
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	3304      	adds	r3, #4
 800d768:	4619      	mov	r1, r3
 800d76a:	4610      	mov	r0, r2
 800d76c:	f7fe fa19 	bl	800bba2 <vListInsertEnd>
 800d770:	e005      	b.n	800d77e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	3318      	adds	r3, #24
 800d776:	4619      	mov	r1, r3
 800d778:	480e      	ldr	r0, [pc, #56]	; (800d7b4 <xTaskRemoveFromEventList+0xbc>)
 800d77a:	f7fe fa12 	bl	800bba2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d782:	4b0d      	ldr	r3, [pc, #52]	; (800d7b8 <xTaskRemoveFromEventList+0xc0>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d788:	429a      	cmp	r2, r3
 800d78a:	d905      	bls.n	800d798 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d78c:	2301      	movs	r3, #1
 800d78e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d790:	4b0a      	ldr	r3, [pc, #40]	; (800d7bc <xTaskRemoveFromEventList+0xc4>)
 800d792:	2201      	movs	r2, #1
 800d794:	601a      	str	r2, [r3, #0]
 800d796:	e001      	b.n	800d79c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d798:	2300      	movs	r3, #0
 800d79a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d79c:	697b      	ldr	r3, [r7, #20]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20000f7c 	.word	0x20000f7c
 800d7ac:	20000f5c 	.word	0x20000f5c
 800d7b0:	20000a84 	.word	0x20000a84
 800d7b4:	20000f14 	.word	0x20000f14
 800d7b8:	20000a80 	.word	0x20000a80
 800d7bc:	20000f68 	.word	0x20000f68

0800d7c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7c8:	4b06      	ldr	r3, [pc, #24]	; (800d7e4 <vTaskInternalSetTimeOutState+0x24>)
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7d0:	4b05      	ldr	r3, [pc, #20]	; (800d7e8 <vTaskInternalSetTimeOutState+0x28>)
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	605a      	str	r2, [r3, #4]
}
 800d7d8:	bf00      	nop
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr
 800d7e4:	20000f6c 	.word	0x20000f6c
 800d7e8:	20000f58 	.word	0x20000f58

0800d7ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b088      	sub	sp, #32
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d10a      	bne.n	800d812 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	613b      	str	r3, [r7, #16]
}
 800d80e:	bf00      	nop
 800d810:	e7fe      	b.n	800d810 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10a      	bne.n	800d82e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	60fb      	str	r3, [r7, #12]
}
 800d82a:	bf00      	nop
 800d82c:	e7fe      	b.n	800d82c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d82e:	f001 f889 	bl	800e944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d832:	4b1d      	ldr	r3, [pc, #116]	; (800d8a8 <xTaskCheckForTimeOut+0xbc>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	69ba      	ldr	r2, [r7, #24]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84a:	d102      	bne.n	800d852 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d84c:	2300      	movs	r3, #0
 800d84e:	61fb      	str	r3, [r7, #28]
 800d850:	e023      	b.n	800d89a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	4b15      	ldr	r3, [pc, #84]	; (800d8ac <xTaskCheckForTimeOut+0xc0>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d007      	beq.n	800d86e <xTaskCheckForTimeOut+0x82>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	69ba      	ldr	r2, [r7, #24]
 800d864:	429a      	cmp	r2, r3
 800d866:	d302      	bcc.n	800d86e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d868:	2301      	movs	r3, #1
 800d86a:	61fb      	str	r3, [r7, #28]
 800d86c:	e015      	b.n	800d89a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	429a      	cmp	r2, r3
 800d876:	d20b      	bcs.n	800d890 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	1ad2      	subs	r2, r2, r3
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7ff ff9b 	bl	800d7c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	61fb      	str	r3, [r7, #28]
 800d88e:	e004      	b.n	800d89a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2200      	movs	r2, #0
 800d894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d896:	2301      	movs	r3, #1
 800d898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d89a:	f001 f883 	bl	800e9a4 <vPortExitCritical>

	return xReturn;
 800d89e:	69fb      	ldr	r3, [r7, #28]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3720      	adds	r7, #32
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	20000f58 	.word	0x20000f58
 800d8ac:	20000f6c 	.word	0x20000f6c

0800d8b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d8b4:	4b03      	ldr	r3, [pc, #12]	; (800d8c4 <vTaskMissedYield+0x14>)
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	601a      	str	r2, [r3, #0]
}
 800d8ba:	bf00      	nop
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	20000f68 	.word	0x20000f68

0800d8c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8d0:	f000 f852 	bl	800d978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8d4:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <prvIdleTask+0x28>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d9f9      	bls.n	800d8d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8dc:	4b05      	ldr	r3, [pc, #20]	; (800d8f4 <prvIdleTask+0x2c>)
 800d8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8ec:	e7f0      	b.n	800d8d0 <prvIdleTask+0x8>
 800d8ee:	bf00      	nop
 800d8f0:	20000a84 	.word	0x20000a84
 800d8f4:	e000ed04 	.word	0xe000ed04

0800d8f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8fe:	2300      	movs	r3, #0
 800d900:	607b      	str	r3, [r7, #4]
 800d902:	e00c      	b.n	800d91e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	4a12      	ldr	r2, [pc, #72]	; (800d958 <prvInitialiseTaskLists+0x60>)
 800d910:	4413      	add	r3, r2
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe f918 	bl	800bb48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	3301      	adds	r3, #1
 800d91c:	607b      	str	r3, [r7, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2b37      	cmp	r3, #55	; 0x37
 800d922:	d9ef      	bls.n	800d904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d924:	480d      	ldr	r0, [pc, #52]	; (800d95c <prvInitialiseTaskLists+0x64>)
 800d926:	f7fe f90f 	bl	800bb48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d92a:	480d      	ldr	r0, [pc, #52]	; (800d960 <prvInitialiseTaskLists+0x68>)
 800d92c:	f7fe f90c 	bl	800bb48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d930:	480c      	ldr	r0, [pc, #48]	; (800d964 <prvInitialiseTaskLists+0x6c>)
 800d932:	f7fe f909 	bl	800bb48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d936:	480c      	ldr	r0, [pc, #48]	; (800d968 <prvInitialiseTaskLists+0x70>)
 800d938:	f7fe f906 	bl	800bb48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d93c:	480b      	ldr	r0, [pc, #44]	; (800d96c <prvInitialiseTaskLists+0x74>)
 800d93e:	f7fe f903 	bl	800bb48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d942:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <prvInitialiseTaskLists+0x78>)
 800d944:	4a05      	ldr	r2, [pc, #20]	; (800d95c <prvInitialiseTaskLists+0x64>)
 800d946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d948:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <prvInitialiseTaskLists+0x7c>)
 800d94a:	4a05      	ldr	r2, [pc, #20]	; (800d960 <prvInitialiseTaskLists+0x68>)
 800d94c:	601a      	str	r2, [r3, #0]
}
 800d94e:	bf00      	nop
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	20000a84 	.word	0x20000a84
 800d95c:	20000ee4 	.word	0x20000ee4
 800d960:	20000ef8 	.word	0x20000ef8
 800d964:	20000f14 	.word	0x20000f14
 800d968:	20000f28 	.word	0x20000f28
 800d96c:	20000f40 	.word	0x20000f40
 800d970:	20000f0c 	.word	0x20000f0c
 800d974:	20000f10 	.word	0x20000f10

0800d978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d97e:	e019      	b.n	800d9b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d980:	f000 ffe0 	bl	800e944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d984:	4b10      	ldr	r3, [pc, #64]	; (800d9c8 <prvCheckTasksWaitingTermination+0x50>)
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3304      	adds	r3, #4
 800d990:	4618      	mov	r0, r3
 800d992:	f7fe f963 	bl	800bc5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d996:	4b0d      	ldr	r3, [pc, #52]	; (800d9cc <prvCheckTasksWaitingTermination+0x54>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	4a0b      	ldr	r2, [pc, #44]	; (800d9cc <prvCheckTasksWaitingTermination+0x54>)
 800d99e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d9a0:	4b0b      	ldr	r3, [pc, #44]	; (800d9d0 <prvCheckTasksWaitingTermination+0x58>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	4a0a      	ldr	r2, [pc, #40]	; (800d9d0 <prvCheckTasksWaitingTermination+0x58>)
 800d9a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d9aa:	f000 fffb 	bl	800e9a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f810 	bl	800d9d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9b4:	4b06      	ldr	r3, [pc, #24]	; (800d9d0 <prvCheckTasksWaitingTermination+0x58>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1e1      	bne.n	800d980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9bc:	bf00      	nop
 800d9be:	bf00      	nop
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20000f28 	.word	0x20000f28
 800d9cc:	20000f54 	.word	0x20000f54
 800d9d0:	20000f3c 	.word	0x20000f3c

0800d9d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d108      	bne.n	800d9f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f001 f998 	bl	800ed20 <vPortFree>
				vPortFree( pxTCB );
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f001 f995 	bl	800ed20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9f6:	e018      	b.n	800da2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d103      	bne.n	800da0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 f98c 	bl	800ed20 <vPortFree>
	}
 800da08:	e00f      	b.n	800da2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da10:	2b02      	cmp	r3, #2
 800da12:	d00a      	beq.n	800da2a <prvDeleteTCB+0x56>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	60fb      	str	r3, [r7, #12]
}
 800da26:	bf00      	nop
 800da28:	e7fe      	b.n	800da28 <prvDeleteTCB+0x54>
	}
 800da2a:	bf00      	nop
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
	...

0800da34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da3a:	4b0c      	ldr	r3, [pc, #48]	; (800da6c <prvResetNextTaskUnblockTime+0x38>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d104      	bne.n	800da4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da44:	4b0a      	ldr	r3, [pc, #40]	; (800da70 <prvResetNextTaskUnblockTime+0x3c>)
 800da46:	f04f 32ff 	mov.w	r2, #4294967295
 800da4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da4c:	e008      	b.n	800da60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da4e:	4b07      	ldr	r3, [pc, #28]	; (800da6c <prvResetNextTaskUnblockTime+0x38>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	4a04      	ldr	r2, [pc, #16]	; (800da70 <prvResetNextTaskUnblockTime+0x3c>)
 800da5e:	6013      	str	r3, [r2, #0]
}
 800da60:	bf00      	nop
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	20000f0c 	.word	0x20000f0c
 800da70:	20000f74 	.word	0x20000f74

0800da74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800da7a:	4b05      	ldr	r3, [pc, #20]	; (800da90 <xTaskGetCurrentTaskHandle+0x1c>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800da80:	687b      	ldr	r3, [r7, #4]
	}
 800da82:	4618      	mov	r0, r3
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop
 800da90:	20000a80 	.word	0x20000a80

0800da94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da9a:	4b0b      	ldr	r3, [pc, #44]	; (800dac8 <xTaskGetSchedulerState+0x34>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d102      	bne.n	800daa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800daa2:	2301      	movs	r3, #1
 800daa4:	607b      	str	r3, [r7, #4]
 800daa6:	e008      	b.n	800daba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daa8:	4b08      	ldr	r3, [pc, #32]	; (800dacc <xTaskGetSchedulerState+0x38>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d102      	bne.n	800dab6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dab0:	2302      	movs	r3, #2
 800dab2:	607b      	str	r3, [r7, #4]
 800dab4:	e001      	b.n	800daba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dab6:	2300      	movs	r3, #0
 800dab8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800daba:	687b      	ldr	r3, [r7, #4]
	}
 800dabc:	4618      	mov	r0, r3
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr
 800dac8:	20000f60 	.word	0x20000f60
 800dacc:	20000f7c 	.word	0x20000f7c

0800dad0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dadc:	2300      	movs	r3, #0
 800dade:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d051      	beq.n	800db8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daea:	4b2a      	ldr	r3, [pc, #168]	; (800db94 <xTaskPriorityInherit+0xc4>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d241      	bcs.n	800db78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	699b      	ldr	r3, [r3, #24]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	db06      	blt.n	800db0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dafc:	4b25      	ldr	r3, [pc, #148]	; (800db94 <xTaskPriorityInherit+0xc4>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	6959      	ldr	r1, [r3, #20]
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db12:	4613      	mov	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	4413      	add	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4a1f      	ldr	r2, [pc, #124]	; (800db98 <xTaskPriorityInherit+0xc8>)
 800db1c:	4413      	add	r3, r2
 800db1e:	4299      	cmp	r1, r3
 800db20:	d122      	bne.n	800db68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	3304      	adds	r3, #4
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe f898 	bl	800bc5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db2c:	4b19      	ldr	r3, [pc, #100]	; (800db94 <xTaskPriorityInherit+0xc4>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3a:	4b18      	ldr	r3, [pc, #96]	; (800db9c <xTaskPriorityInherit+0xcc>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d903      	bls.n	800db4a <xTaskPriorityInherit+0x7a>
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db46:	4a15      	ldr	r2, [pc, #84]	; (800db9c <xTaskPriorityInherit+0xcc>)
 800db48:	6013      	str	r3, [r2, #0]
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db4e:	4613      	mov	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	4a10      	ldr	r2, [pc, #64]	; (800db98 <xTaskPriorityInherit+0xc8>)
 800db58:	441a      	add	r2, r3
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	3304      	adds	r3, #4
 800db5e:	4619      	mov	r1, r3
 800db60:	4610      	mov	r0, r2
 800db62:	f7fe f81e 	bl	800bba2 <vListInsertEnd>
 800db66:	e004      	b.n	800db72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db68:	4b0a      	ldr	r3, [pc, #40]	; (800db94 <xTaskPriorityInherit+0xc4>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db72:	2301      	movs	r3, #1
 800db74:	60fb      	str	r3, [r7, #12]
 800db76:	e008      	b.n	800db8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db7c:	4b05      	ldr	r3, [pc, #20]	; (800db94 <xTaskPriorityInherit+0xc4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db82:	429a      	cmp	r2, r3
 800db84:	d201      	bcs.n	800db8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db86:	2301      	movs	r3, #1
 800db88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db8a:	68fb      	ldr	r3, [r7, #12]
	}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	20000a80 	.word	0x20000a80
 800db98:	20000a84 	.word	0x20000a84
 800db9c:	20000f5c 	.word	0x20000f5c

0800dba0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dbac:	2300      	movs	r3, #0
 800dbae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d056      	beq.n	800dc64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dbb6:	4b2e      	ldr	r3, [pc, #184]	; (800dc70 <xTaskPriorityDisinherit+0xd0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	693a      	ldr	r2, [r7, #16]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d00a      	beq.n	800dbd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	60fb      	str	r3, [r7, #12]
}
 800dbd2:	bf00      	nop
 800dbd4:	e7fe      	b.n	800dbd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10a      	bne.n	800dbf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	60bb      	str	r3, [r7, #8]
}
 800dbf0:	bf00      	nop
 800dbf2:	e7fe      	b.n	800dbf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbf8:	1e5a      	subs	r2, r3, #1
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d02c      	beq.n	800dc64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d128      	bne.n	800dc64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	3304      	adds	r3, #4
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fe f820 	bl	800bc5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc34:	4b0f      	ldr	r3, [pc, #60]	; (800dc74 <xTaskPriorityDisinherit+0xd4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d903      	bls.n	800dc44 <xTaskPriorityDisinherit+0xa4>
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc40:	4a0c      	ldr	r2, [pc, #48]	; (800dc74 <xTaskPriorityDisinherit+0xd4>)
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc48:	4613      	mov	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4a09      	ldr	r2, [pc, #36]	; (800dc78 <xTaskPriorityDisinherit+0xd8>)
 800dc52:	441a      	add	r2, r3
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f7fd ffa1 	bl	800bba2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc60:	2301      	movs	r3, #1
 800dc62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc64:	697b      	ldr	r3, [r7, #20]
	}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20000a80 	.word	0x20000a80
 800dc74:	20000f5c 	.word	0x20000f5c
 800dc78:	20000a84 	.word	0x20000a84

0800dc7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b088      	sub	sp, #32
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d06a      	beq.n	800dd6a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d10a      	bne.n	800dcb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca0:	f383 8811 	msr	BASEPRI, r3
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	60fb      	str	r3, [r7, #12]
}
 800dcae:	bf00      	nop
 800dcb0:	e7fe      	b.n	800dcb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d902      	bls.n	800dcc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	61fb      	str	r3, [r7, #28]
 800dcc0:	e002      	b.n	800dcc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dccc:	69fa      	ldr	r2, [r7, #28]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d04b      	beq.n	800dd6a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcd6:	697a      	ldr	r2, [r7, #20]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d146      	bne.n	800dd6a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dcdc:	4b25      	ldr	r3, [pc, #148]	; (800dd74 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	69ba      	ldr	r2, [r7, #24]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d10a      	bne.n	800dcfc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcea:	f383 8811 	msr	BASEPRI, r3
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	60bb      	str	r3, [r7, #8]
}
 800dcf8:	bf00      	nop
 800dcfa:	e7fe      	b.n	800dcfa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	69fa      	ldr	r2, [r7, #28]
 800dd06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	699b      	ldr	r3, [r3, #24]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	db04      	blt.n	800dd1a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	6959      	ldr	r1, [r3, #20]
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	4613      	mov	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4a13      	ldr	r2, [pc, #76]	; (800dd78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd2a:	4413      	add	r3, r2
 800dd2c:	4299      	cmp	r1, r3
 800dd2e:	d11c      	bne.n	800dd6a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	3304      	adds	r3, #4
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fd ff91 	bl	800bc5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3e:	4b0f      	ldr	r3, [pc, #60]	; (800dd7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d903      	bls.n	800dd4e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4a:	4a0c      	ldr	r2, [pc, #48]	; (800dd7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd4c:	6013      	str	r3, [r2, #0]
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4a07      	ldr	r2, [pc, #28]	; (800dd78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd5c:	441a      	add	r2, r3
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	3304      	adds	r3, #4
 800dd62:	4619      	mov	r1, r3
 800dd64:	4610      	mov	r0, r2
 800dd66:	f7fd ff1c 	bl	800bba2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd6a:	bf00      	nop
 800dd6c:	3720      	adds	r7, #32
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	20000a80 	.word	0x20000a80
 800dd78:	20000a84 	.word	0x20000a84
 800dd7c:	20000f5c 	.word	0x20000f5c

0800dd80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd80:	b480      	push	{r7}
 800dd82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd84:	4b07      	ldr	r3, [pc, #28]	; (800dda4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d004      	beq.n	800dd96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd8c:	4b05      	ldr	r3, [pc, #20]	; (800dda4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd92:	3201      	adds	r2, #1
 800dd94:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dd96:	4b03      	ldr	r3, [pc, #12]	; (800dda4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd98:	681b      	ldr	r3, [r3, #0]
	}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	20000a80 	.word	0x20000a80

0800dda8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ddb2:	f000 fdc7 	bl	800e944 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ddb6:	4b1e      	ldr	r3, [pc, #120]	; (800de30 <ulTaskNotifyTake+0x88>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d113      	bne.n	800dde8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ddc0:	4b1b      	ldr	r3, [pc, #108]	; (800de30 <ulTaskNotifyTake+0x88>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00b      	beq.n	800dde8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddd0:	2101      	movs	r1, #1
 800ddd2:	6838      	ldr	r0, [r7, #0]
 800ddd4:	f000 f8e8 	bl	800dfa8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ddd8:	4b16      	ldr	r3, [pc, #88]	; (800de34 <ulTaskNotifyTake+0x8c>)
 800ddda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dde8:	f000 fddc 	bl	800e9a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ddec:	f000 fdaa 	bl	800e944 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ddf0:	4b0f      	ldr	r3, [pc, #60]	; (800de30 <ulTaskNotifyTake+0x88>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00c      	beq.n	800de18 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d004      	beq.n	800de0e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800de04:	4b0a      	ldr	r3, [pc, #40]	; (800de30 <ulTaskNotifyTake+0x88>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2200      	movs	r2, #0
 800de0a:	655a      	str	r2, [r3, #84]	; 0x54
 800de0c:	e004      	b.n	800de18 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800de0e:	4b08      	ldr	r3, [pc, #32]	; (800de30 <ulTaskNotifyTake+0x88>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	3a01      	subs	r2, #1
 800de16:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de18:	4b05      	ldr	r3, [pc, #20]	; (800de30 <ulTaskNotifyTake+0x88>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800de22:	f000 fdbf 	bl	800e9a4 <vPortExitCritical>

		return ulReturn;
 800de26:	68fb      	ldr	r3, [r7, #12]
	}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	20000a80 	.word	0x20000a80
 800de34:	e000ed04 	.word	0xe000ed04

0800de38 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08a      	sub	sp, #40	; 0x28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	4613      	mov	r3, r2
 800de46:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800de48:	2301      	movs	r3, #1
 800de4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10a      	bne.n	800de68 <xTaskGenericNotify+0x30>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	61bb      	str	r3, [r7, #24]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800de6c:	f000 fd6a 	bl	800e944 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d003      	beq.n	800de7e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800de76:	6a3b      	ldr	r3, [r7, #32]
 800de78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800de7e:	6a3b      	ldr	r3, [r7, #32]
 800de80:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800de84:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	2202      	movs	r2, #2
 800de8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800de8e:	79fb      	ldrb	r3, [r7, #7]
 800de90:	2b04      	cmp	r3, #4
 800de92:	d828      	bhi.n	800dee6 <xTaskGenericNotify+0xae>
 800de94:	a201      	add	r2, pc, #4	; (adr r2, 800de9c <xTaskGenericNotify+0x64>)
 800de96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9a:	bf00      	nop
 800de9c:	0800df07 	.word	0x0800df07
 800dea0:	0800deb1 	.word	0x0800deb1
 800dea4:	0800debf 	.word	0x0800debf
 800dea8:	0800decb 	.word	0x0800decb
 800deac:	0800ded3 	.word	0x0800ded3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800deb0:	6a3b      	ldr	r3, [r7, #32]
 800deb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	431a      	orrs	r2, r3
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800debc:	e026      	b.n	800df0c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dec2:	1c5a      	adds	r2, r3, #1
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800dec8:	e020      	b.n	800df0c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800deca:	6a3b      	ldr	r3, [r7, #32]
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ded0:	e01c      	b.n	800df0c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ded2:	7ffb      	ldrb	r3, [r7, #31]
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d003      	beq.n	800dee0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ded8:	6a3b      	ldr	r3, [r7, #32]
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dede:	e015      	b.n	800df0c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800dee0:	2300      	movs	r3, #0
 800dee2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800dee4:	e012      	b.n	800df0c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dee6:	6a3b      	ldr	r3, [r7, #32]
 800dee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deee:	d00c      	beq.n	800df0a <xTaskGenericNotify+0xd2>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	617b      	str	r3, [r7, #20]
}
 800df02:	bf00      	nop
 800df04:	e7fe      	b.n	800df04 <xTaskGenericNotify+0xcc>
					break;
 800df06:	bf00      	nop
 800df08:	e000      	b.n	800df0c <xTaskGenericNotify+0xd4>

					break;
 800df0a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800df0c:	7ffb      	ldrb	r3, [r7, #31]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d13a      	bne.n	800df88 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df12:	6a3b      	ldr	r3, [r7, #32]
 800df14:	3304      	adds	r3, #4
 800df16:	4618      	mov	r0, r3
 800df18:	f7fd fea0 	bl	800bc5c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800df1c:	6a3b      	ldr	r3, [r7, #32]
 800df1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df20:	4b1d      	ldr	r3, [pc, #116]	; (800df98 <xTaskGenericNotify+0x160>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	429a      	cmp	r2, r3
 800df26:	d903      	bls.n	800df30 <xTaskGenericNotify+0xf8>
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2c:	4a1a      	ldr	r2, [pc, #104]	; (800df98 <xTaskGenericNotify+0x160>)
 800df2e:	6013      	str	r3, [r2, #0]
 800df30:	6a3b      	ldr	r3, [r7, #32]
 800df32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df34:	4613      	mov	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4413      	add	r3, r2
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	4a17      	ldr	r2, [pc, #92]	; (800df9c <xTaskGenericNotify+0x164>)
 800df3e:	441a      	add	r2, r3
 800df40:	6a3b      	ldr	r3, [r7, #32]
 800df42:	3304      	adds	r3, #4
 800df44:	4619      	mov	r1, r3
 800df46:	4610      	mov	r0, r2
 800df48:	f7fd fe2b 	bl	800bba2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800df4c:	6a3b      	ldr	r3, [r7, #32]
 800df4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00a      	beq.n	800df6a <xTaskGenericNotify+0x132>
	__asm volatile
 800df54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	613b      	str	r3, [r7, #16]
}
 800df66:	bf00      	nop
 800df68:	e7fe      	b.n	800df68 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df6e:	4b0c      	ldr	r3, [pc, #48]	; (800dfa0 <xTaskGenericNotify+0x168>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	429a      	cmp	r2, r3
 800df76:	d907      	bls.n	800df88 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800df78:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <xTaskGenericNotify+0x16c>)
 800df7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800df88:	f000 fd0c 	bl	800e9a4 <vPortExitCritical>

		return xReturn;
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800df8e:	4618      	mov	r0, r3
 800df90:	3728      	adds	r7, #40	; 0x28
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20000f5c 	.word	0x20000f5c
 800df9c:	20000a84 	.word	0x20000a84
 800dfa0:	20000a80 	.word	0x20000a80
 800dfa4:	e000ed04 	.word	0xe000ed04

0800dfa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfb2:	4b21      	ldr	r3, [pc, #132]	; (800e038 <prvAddCurrentTaskToDelayedList+0x90>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfb8:	4b20      	ldr	r3, [pc, #128]	; (800e03c <prvAddCurrentTaskToDelayedList+0x94>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fd fe4c 	bl	800bc5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfca:	d10a      	bne.n	800dfe2 <prvAddCurrentTaskToDelayedList+0x3a>
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d007      	beq.n	800dfe2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfd2:	4b1a      	ldr	r3, [pc, #104]	; (800e03c <prvAddCurrentTaskToDelayedList+0x94>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	3304      	adds	r3, #4
 800dfd8:	4619      	mov	r1, r3
 800dfda:	4819      	ldr	r0, [pc, #100]	; (800e040 <prvAddCurrentTaskToDelayedList+0x98>)
 800dfdc:	f7fd fde1 	bl	800bba2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dfe0:	e026      	b.n	800e030 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dfea:	4b14      	ldr	r3, [pc, #80]	; (800e03c <prvAddCurrentTaskToDelayedList+0x94>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d209      	bcs.n	800e00e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dffa:	4b12      	ldr	r3, [pc, #72]	; (800e044 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	4b0f      	ldr	r3, [pc, #60]	; (800e03c <prvAddCurrentTaskToDelayedList+0x94>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3304      	adds	r3, #4
 800e004:	4619      	mov	r1, r3
 800e006:	4610      	mov	r0, r2
 800e008:	f7fd fdef 	bl	800bbea <vListInsert>
}
 800e00c:	e010      	b.n	800e030 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e00e:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	4b0a      	ldr	r3, [pc, #40]	; (800e03c <prvAddCurrentTaskToDelayedList+0x94>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	3304      	adds	r3, #4
 800e018:	4619      	mov	r1, r3
 800e01a:	4610      	mov	r0, r2
 800e01c:	f7fd fde5 	bl	800bbea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e020:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	429a      	cmp	r2, r3
 800e028:	d202      	bcs.n	800e030 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e02a:	4a08      	ldr	r2, [pc, #32]	; (800e04c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	6013      	str	r3, [r2, #0]
}
 800e030:	bf00      	nop
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	20000f58 	.word	0x20000f58
 800e03c:	20000a80 	.word	0x20000a80
 800e040:	20000f40 	.word	0x20000f40
 800e044:	20000f10 	.word	0x20000f10
 800e048:	20000f0c 	.word	0x20000f0c
 800e04c:	20000f74 	.word	0x20000f74

0800e050 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b08a      	sub	sp, #40	; 0x28
 800e054:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e056:	2300      	movs	r3, #0
 800e058:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e05a:	f000 fb07 	bl	800e66c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e05e:	4b1c      	ldr	r3, [pc, #112]	; (800e0d0 <xTimerCreateTimerTask+0x80>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d021      	beq.n	800e0aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e066:	2300      	movs	r3, #0
 800e068:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e06a:	2300      	movs	r3, #0
 800e06c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e06e:	1d3a      	adds	r2, r7, #4
 800e070:	f107 0108 	add.w	r1, r7, #8
 800e074:	f107 030c 	add.w	r3, r7, #12
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fd fd4b 	bl	800bb14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e07e:	6879      	ldr	r1, [r7, #4]
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	9202      	str	r2, [sp, #8]
 800e086:	9301      	str	r3, [sp, #4]
 800e088:	2302      	movs	r3, #2
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	2300      	movs	r3, #0
 800e08e:	460a      	mov	r2, r1
 800e090:	4910      	ldr	r1, [pc, #64]	; (800e0d4 <xTimerCreateTimerTask+0x84>)
 800e092:	4811      	ldr	r0, [pc, #68]	; (800e0d8 <xTimerCreateTimerTask+0x88>)
 800e094:	f7fe fed0 	bl	800ce38 <xTaskCreateStatic>
 800e098:	4603      	mov	r3, r0
 800e09a:	4a10      	ldr	r2, [pc, #64]	; (800e0dc <xTimerCreateTimerTask+0x8c>)
 800e09c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e09e:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <xTimerCreateTimerTask+0x8c>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10a      	bne.n	800e0c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	613b      	str	r3, [r7, #16]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e0c6:	697b      	ldr	r3, [r7, #20]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	20000fb0 	.word	0x20000fb0
 800e0d4:	08015eb0 	.word	0x08015eb0
 800e0d8:	0800e215 	.word	0x0800e215
 800e0dc:	20000fb4 	.word	0x20000fb4

0800e0e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b08a      	sub	sp, #40	; 0x28
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
 800e0ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	623b      	str	r3, [r7, #32]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e10e:	4b1a      	ldr	r3, [pc, #104]	; (800e178 <xTimerGenericCommand+0x98>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d02a      	beq.n	800e16c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	2b05      	cmp	r3, #5
 800e126:	dc18      	bgt.n	800e15a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e128:	f7ff fcb4 	bl	800da94 <xTaskGetSchedulerState>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b02      	cmp	r3, #2
 800e130:	d109      	bne.n	800e146 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e132:	4b11      	ldr	r3, [pc, #68]	; (800e178 <xTimerGenericCommand+0x98>)
 800e134:	6818      	ldr	r0, [r3, #0]
 800e136:	f107 0110 	add.w	r1, r7, #16
 800e13a:	2300      	movs	r3, #0
 800e13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e13e:	f7fe f815 	bl	800c16c <xQueueGenericSend>
 800e142:	6278      	str	r0, [r7, #36]	; 0x24
 800e144:	e012      	b.n	800e16c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e146:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <xTimerGenericCommand+0x98>)
 800e148:	6818      	ldr	r0, [r3, #0]
 800e14a:	f107 0110 	add.w	r1, r7, #16
 800e14e:	2300      	movs	r3, #0
 800e150:	2200      	movs	r2, #0
 800e152:	f7fe f80b 	bl	800c16c <xQueueGenericSend>
 800e156:	6278      	str	r0, [r7, #36]	; 0x24
 800e158:	e008      	b.n	800e16c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e15a:	4b07      	ldr	r3, [pc, #28]	; (800e178 <xTimerGenericCommand+0x98>)
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	f107 0110 	add.w	r1, r7, #16
 800e162:	2300      	movs	r3, #0
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	f7fe f8ff 	bl	800c368 <xQueueGenericSendFromISR>
 800e16a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3728      	adds	r7, #40	; 0x28
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20000fb0 	.word	0x20000fb0

0800e17c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b088      	sub	sp, #32
 800e180:	af02      	add	r7, sp, #8
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e186:	4b22      	ldr	r3, [pc, #136]	; (800e210 <prvProcessExpiredTimer+0x94>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	3304      	adds	r3, #4
 800e194:	4618      	mov	r0, r3
 800e196:	f7fd fd61 	bl	800bc5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1a0:	f003 0304 	and.w	r3, r3, #4
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d022      	beq.n	800e1ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	699a      	ldr	r2, [r3, #24]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	18d1      	adds	r1, r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	683a      	ldr	r2, [r7, #0]
 800e1b4:	6978      	ldr	r0, [r7, #20]
 800e1b6:	f000 f8d1 	bl	800e35c <prvInsertTimerInActiveList>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d01f      	beq.n	800e200 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	6978      	ldr	r0, [r7, #20]
 800e1cc:	f7ff ff88 	bl	800e0e0 <xTimerGenericCommand>
 800e1d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d113      	bne.n	800e200 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	60fb      	str	r3, [r7, #12]
}
 800e1ea:	bf00      	nop
 800e1ec:	e7fe      	b.n	800e1ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1f4:	f023 0301 	bic.w	r3, r3, #1
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	6a1b      	ldr	r3, [r3, #32]
 800e204:	6978      	ldr	r0, [r7, #20]
 800e206:	4798      	blx	r3
}
 800e208:	bf00      	nop
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	20000fa8 	.word	0x20000fa8

0800e214 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e21c:	f107 0308 	add.w	r3, r7, #8
 800e220:	4618      	mov	r0, r3
 800e222:	f000 f857 	bl	800e2d4 <prvGetNextExpireTime>
 800e226:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	4619      	mov	r1, r3
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f000 f803 	bl	800e238 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e232:	f000 f8d5 	bl	800e3e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e236:	e7f1      	b.n	800e21c <prvTimerTask+0x8>

0800e238 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e242:	f7ff f835 	bl	800d2b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e246:	f107 0308 	add.w	r3, r7, #8
 800e24a:	4618      	mov	r0, r3
 800e24c:	f000 f866 	bl	800e31c <prvSampleTimeNow>
 800e250:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d130      	bne.n	800e2ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d10a      	bne.n	800e274 <prvProcessTimerOrBlockTask+0x3c>
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	429a      	cmp	r2, r3
 800e264:	d806      	bhi.n	800e274 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e266:	f7ff f831 	bl	800d2cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e26a:	68f9      	ldr	r1, [r7, #12]
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7ff ff85 	bl	800e17c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e272:	e024      	b.n	800e2be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d008      	beq.n	800e28c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e27a:	4b13      	ldr	r3, [pc, #76]	; (800e2c8 <prvProcessTimerOrBlockTask+0x90>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d101      	bne.n	800e288 <prvProcessTimerOrBlockTask+0x50>
 800e284:	2301      	movs	r3, #1
 800e286:	e000      	b.n	800e28a <prvProcessTimerOrBlockTask+0x52>
 800e288:	2300      	movs	r3, #0
 800e28a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e28c:	4b0f      	ldr	r3, [pc, #60]	; (800e2cc <prvProcessTimerOrBlockTask+0x94>)
 800e28e:	6818      	ldr	r0, [r3, #0]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	683a      	ldr	r2, [r7, #0]
 800e298:	4619      	mov	r1, r3
 800e29a:	f7fe fd99 	bl	800cdd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e29e:	f7ff f815 	bl	800d2cc <xTaskResumeAll>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10a      	bne.n	800e2be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e2a8:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <prvProcessTimerOrBlockTask+0x98>)
 800e2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ae:	601a      	str	r2, [r3, #0]
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	f3bf 8f6f 	isb	sy
}
 800e2b8:	e001      	b.n	800e2be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e2ba:	f7ff f807 	bl	800d2cc <xTaskResumeAll>
}
 800e2be:	bf00      	nop
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	20000fac 	.word	0x20000fac
 800e2cc:	20000fb0 	.word	0x20000fb0
 800e2d0:	e000ed04 	.word	0xe000ed04

0800e2d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b085      	sub	sp, #20
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e2dc:	4b0e      	ldr	r3, [pc, #56]	; (800e318 <prvGetNextExpireTime+0x44>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d101      	bne.n	800e2ea <prvGetNextExpireTime+0x16>
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	e000      	b.n	800e2ec <prvGetNextExpireTime+0x18>
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d105      	bne.n	800e304 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2f8:	4b07      	ldr	r3, [pc, #28]	; (800e318 <prvGetNextExpireTime+0x44>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	60fb      	str	r3, [r7, #12]
 800e302:	e001      	b.n	800e308 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e308:	68fb      	ldr	r3, [r7, #12]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3714      	adds	r7, #20
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	20000fa8 	.word	0x20000fa8

0800e31c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e324:	f7ff f870 	bl	800d408 <xTaskGetTickCount>
 800e328:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e32a:	4b0b      	ldr	r3, [pc, #44]	; (800e358 <prvSampleTimeNow+0x3c>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	429a      	cmp	r2, r3
 800e332:	d205      	bcs.n	800e340 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e334:	f000 f936 	bl	800e5a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	601a      	str	r2, [r3, #0]
 800e33e:	e002      	b.n	800e346 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e346:	4a04      	ldr	r2, [pc, #16]	; (800e358 <prvSampleTimeNow+0x3c>)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e34c:	68fb      	ldr	r3, [r7, #12]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	20000fb8 	.word	0x20000fb8

0800e35c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b086      	sub	sp, #24
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
 800e368:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e36a:	2300      	movs	r3, #0
 800e36c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	68ba      	ldr	r2, [r7, #8]
 800e372:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d812      	bhi.n	800e3a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	1ad2      	subs	r2, r2, r3
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d302      	bcc.n	800e396 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e390:	2301      	movs	r3, #1
 800e392:	617b      	str	r3, [r7, #20]
 800e394:	e01b      	b.n	800e3ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e396:	4b10      	ldr	r3, [pc, #64]	; (800e3d8 <prvInsertTimerInActiveList+0x7c>)
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	3304      	adds	r3, #4
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	f7fd fc22 	bl	800bbea <vListInsert>
 800e3a6:	e012      	b.n	800e3ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d206      	bcs.n	800e3be <prvInsertTimerInActiveList+0x62>
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d302      	bcc.n	800e3be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	617b      	str	r3, [r7, #20]
 800e3bc:	e007      	b.n	800e3ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3be:	4b07      	ldr	r3, [pc, #28]	; (800e3dc <prvInsertTimerInActiveList+0x80>)
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	f7fd fc0e 	bl	800bbea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e3ce:	697b      	ldr	r3, [r7, #20]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	20000fac 	.word	0x20000fac
 800e3dc:	20000fa8 	.word	0x20000fa8

0800e3e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b08e      	sub	sp, #56	; 0x38
 800e3e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3e6:	e0ca      	b.n	800e57e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	da18      	bge.n	800e420 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e3ee:	1d3b      	adds	r3, r7, #4
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10a      	bne.n	800e410 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	61fb      	str	r3, [r7, #28]
}
 800e40c:	bf00      	nop
 800e40e:	e7fe      	b.n	800e40e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e416:	6850      	ldr	r0, [r2, #4]
 800e418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e41a:	6892      	ldr	r2, [r2, #8]
 800e41c:	4611      	mov	r1, r2
 800e41e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	f2c0 80aa 	blt.w	800e57c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	695b      	ldr	r3, [r3, #20]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d004      	beq.n	800e43e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e436:	3304      	adds	r3, #4
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fd fc0f 	bl	800bc5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e43e:	463b      	mov	r3, r7
 800e440:	4618      	mov	r0, r3
 800e442:	f7ff ff6b 	bl	800e31c <prvSampleTimeNow>
 800e446:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b09      	cmp	r3, #9
 800e44c:	f200 8097 	bhi.w	800e57e <prvProcessReceivedCommands+0x19e>
 800e450:	a201      	add	r2, pc, #4	; (adr r2, 800e458 <prvProcessReceivedCommands+0x78>)
 800e452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e456:	bf00      	nop
 800e458:	0800e481 	.word	0x0800e481
 800e45c:	0800e481 	.word	0x0800e481
 800e460:	0800e481 	.word	0x0800e481
 800e464:	0800e4f5 	.word	0x0800e4f5
 800e468:	0800e509 	.word	0x0800e509
 800e46c:	0800e553 	.word	0x0800e553
 800e470:	0800e481 	.word	0x0800e481
 800e474:	0800e481 	.word	0x0800e481
 800e478:	0800e4f5 	.word	0x0800e4f5
 800e47c:	0800e509 	.word	0x0800e509
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e486:	f043 0301 	orr.w	r3, r3, #1
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e496:	699b      	ldr	r3, [r3, #24]
 800e498:	18d1      	adds	r1, r2, r3
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e49e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4a0:	f7ff ff5c 	bl	800e35c <prvInsertTimerInActiveList>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d069      	beq.n	800e57e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ac:	6a1b      	ldr	r3, [r3, #32]
 800e4ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4b8:	f003 0304 	and.w	r3, r3, #4
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d05e      	beq.n	800e57e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c4:	699b      	ldr	r3, [r3, #24]
 800e4c6:	441a      	add	r2, r3
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4d2:	f7ff fe05 	bl	800e0e0 <xTimerGenericCommand>
 800e4d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e4d8:	6a3b      	ldr	r3, [r7, #32]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d14f      	bne.n	800e57e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	61bb      	str	r3, [r7, #24]
}
 800e4f0:	bf00      	nop
 800e4f2:	e7fe      	b.n	800e4f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4fa:	f023 0301 	bic.w	r3, r3, #1
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e506:	e03a      	b.n	800e57e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e50e:	f043 0301 	orr.w	r3, r3, #1
 800e512:	b2da      	uxtb	r2, r3
 800e514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e51a:	68ba      	ldr	r2, [r7, #8]
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e522:	699b      	ldr	r3, [r3, #24]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10a      	bne.n	800e53e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52c:	f383 8811 	msr	BASEPRI, r3
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	f3bf 8f4f 	dsb	sy
 800e538:	617b      	str	r3, [r7, #20]
}
 800e53a:	bf00      	nop
 800e53c:	e7fe      	b.n	800e53c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e540:	699a      	ldr	r2, [r3, #24]
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	18d1      	adds	r1, r2, r3
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e54a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e54c:	f7ff ff06 	bl	800e35c <prvInsertTimerInActiveList>
					break;
 800e550:	e015      	b.n	800e57e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e558:	f003 0302 	and.w	r3, r3, #2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d103      	bne.n	800e568 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e562:	f000 fbdd 	bl	800ed20 <vPortFree>
 800e566:	e00a      	b.n	800e57e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e56e:	f023 0301 	bic.w	r3, r3, #1
 800e572:	b2da      	uxtb	r2, r3
 800e574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e57a:	e000      	b.n	800e57e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e57c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e57e:	4b08      	ldr	r3, [pc, #32]	; (800e5a0 <prvProcessReceivedCommands+0x1c0>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	1d39      	adds	r1, r7, #4
 800e584:	2200      	movs	r2, #0
 800e586:	4618      	mov	r0, r3
 800e588:	f7fe f816 	bl	800c5b8 <xQueueReceive>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f47f af2a 	bne.w	800e3e8 <prvProcessReceivedCommands+0x8>
	}
}
 800e594:	bf00      	nop
 800e596:	bf00      	nop
 800e598:	3730      	adds	r7, #48	; 0x30
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	20000fb0 	.word	0x20000fb0

0800e5a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b088      	sub	sp, #32
 800e5a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5aa:	e048      	b.n	800e63e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5ac:	4b2d      	ldr	r3, [pc, #180]	; (800e664 <prvSwitchTimerLists+0xc0>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5b6:	4b2b      	ldr	r3, [pc, #172]	; (800e664 <prvSwitchTimerLists+0xc0>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fd fb49 	bl	800bc5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6a1b      	ldr	r3, [r3, #32]
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5d8:	f003 0304 	and.w	r3, r3, #4
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d02e      	beq.n	800e63e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	699b      	ldr	r3, [r3, #24]
 800e5e4:	693a      	ldr	r2, [r7, #16]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d90e      	bls.n	800e610 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5fe:	4b19      	ldr	r3, [pc, #100]	; (800e664 <prvSwitchTimerLists+0xc0>)
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	3304      	adds	r3, #4
 800e606:	4619      	mov	r1, r3
 800e608:	4610      	mov	r0, r2
 800e60a:	f7fd faee 	bl	800bbea <vListInsert>
 800e60e:	e016      	b.n	800e63e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e610:	2300      	movs	r3, #0
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	2300      	movs	r3, #0
 800e616:	693a      	ldr	r2, [r7, #16]
 800e618:	2100      	movs	r1, #0
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f7ff fd60 	bl	800e0e0 <xTimerGenericCommand>
 800e620:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10a      	bne.n	800e63e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	603b      	str	r3, [r7, #0]
}
 800e63a:	bf00      	nop
 800e63c:	e7fe      	b.n	800e63c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e63e:	4b09      	ldr	r3, [pc, #36]	; (800e664 <prvSwitchTimerLists+0xc0>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1b1      	bne.n	800e5ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e648:	4b06      	ldr	r3, [pc, #24]	; (800e664 <prvSwitchTimerLists+0xc0>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e64e:	4b06      	ldr	r3, [pc, #24]	; (800e668 <prvSwitchTimerLists+0xc4>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a04      	ldr	r2, [pc, #16]	; (800e664 <prvSwitchTimerLists+0xc0>)
 800e654:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e656:	4a04      	ldr	r2, [pc, #16]	; (800e668 <prvSwitchTimerLists+0xc4>)
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	6013      	str	r3, [r2, #0]
}
 800e65c:	bf00      	nop
 800e65e:	3718      	adds	r7, #24
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	20000fa8 	.word	0x20000fa8
 800e668:	20000fac 	.word	0x20000fac

0800e66c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e672:	f000 f967 	bl	800e944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e676:	4b15      	ldr	r3, [pc, #84]	; (800e6cc <prvCheckForValidListAndQueue+0x60>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d120      	bne.n	800e6c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e67e:	4814      	ldr	r0, [pc, #80]	; (800e6d0 <prvCheckForValidListAndQueue+0x64>)
 800e680:	f7fd fa62 	bl	800bb48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e684:	4813      	ldr	r0, [pc, #76]	; (800e6d4 <prvCheckForValidListAndQueue+0x68>)
 800e686:	f7fd fa5f 	bl	800bb48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e68a:	4b13      	ldr	r3, [pc, #76]	; (800e6d8 <prvCheckForValidListAndQueue+0x6c>)
 800e68c:	4a10      	ldr	r2, [pc, #64]	; (800e6d0 <prvCheckForValidListAndQueue+0x64>)
 800e68e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e690:	4b12      	ldr	r3, [pc, #72]	; (800e6dc <prvCheckForValidListAndQueue+0x70>)
 800e692:	4a10      	ldr	r2, [pc, #64]	; (800e6d4 <prvCheckForValidListAndQueue+0x68>)
 800e694:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e696:	2300      	movs	r3, #0
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	4b11      	ldr	r3, [pc, #68]	; (800e6e0 <prvCheckForValidListAndQueue+0x74>)
 800e69c:	4a11      	ldr	r2, [pc, #68]	; (800e6e4 <prvCheckForValidListAndQueue+0x78>)
 800e69e:	2110      	movs	r1, #16
 800e6a0:	200a      	movs	r0, #10
 800e6a2:	f7fd fb6d 	bl	800bd80 <xQueueGenericCreateStatic>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	4a08      	ldr	r2, [pc, #32]	; (800e6cc <prvCheckForValidListAndQueue+0x60>)
 800e6aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e6ac:	4b07      	ldr	r3, [pc, #28]	; (800e6cc <prvCheckForValidListAndQueue+0x60>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d005      	beq.n	800e6c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e6b4:	4b05      	ldr	r3, [pc, #20]	; (800e6cc <prvCheckForValidListAndQueue+0x60>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	490b      	ldr	r1, [pc, #44]	; (800e6e8 <prvCheckForValidListAndQueue+0x7c>)
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fe fb34 	bl	800cd28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6c0:	f000 f970 	bl	800e9a4 <vPortExitCritical>
}
 800e6c4:	bf00      	nop
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20000fb0 	.word	0x20000fb0
 800e6d0:	20000f80 	.word	0x20000f80
 800e6d4:	20000f94 	.word	0x20000f94
 800e6d8:	20000fa8 	.word	0x20000fa8
 800e6dc:	20000fac 	.word	0x20000fac
 800e6e0:	2000105c 	.word	0x2000105c
 800e6e4:	20000fbc 	.word	0x20000fbc
 800e6e8:	08015eb8 	.word	0x08015eb8

0800e6ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	3b04      	subs	r3, #4
 800e6fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	3b04      	subs	r3, #4
 800e70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	f023 0201 	bic.w	r2, r3, #1
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	3b04      	subs	r3, #4
 800e71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e71c:	4a0c      	ldr	r2, [pc, #48]	; (800e750 <pxPortInitialiseStack+0x64>)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	3b14      	subs	r3, #20
 800e726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	3b04      	subs	r3, #4
 800e732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f06f 0202 	mvn.w	r2, #2
 800e73a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	3b20      	subs	r3, #32
 800e740:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e742:	68fb      	ldr	r3, [r7, #12]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr
 800e750:	0800e755 	.word	0x0800e755

0800e754 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e75e:	4b12      	ldr	r3, [pc, #72]	; (800e7a8 <prvTaskExitError+0x54>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e766:	d00a      	beq.n	800e77e <prvTaskExitError+0x2a>
	__asm volatile
 800e768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76c:	f383 8811 	msr	BASEPRI, r3
 800e770:	f3bf 8f6f 	isb	sy
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	60fb      	str	r3, [r7, #12]
}
 800e77a:	bf00      	nop
 800e77c:	e7fe      	b.n	800e77c <prvTaskExitError+0x28>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	60bb      	str	r3, [r7, #8]
}
 800e790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e792:	bf00      	nop
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d0fc      	beq.n	800e794 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e79a:	bf00      	nop
 800e79c:	bf00      	nop
 800e79e:	3714      	adds	r7, #20
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	20000024 	.word	0x20000024
 800e7ac:	00000000 	.word	0x00000000

0800e7b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e7b0:	4b07      	ldr	r3, [pc, #28]	; (800e7d0 <pxCurrentTCBConst2>)
 800e7b2:	6819      	ldr	r1, [r3, #0]
 800e7b4:	6808      	ldr	r0, [r1, #0]
 800e7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ba:	f380 8809 	msr	PSP, r0
 800e7be:	f3bf 8f6f 	isb	sy
 800e7c2:	f04f 0000 	mov.w	r0, #0
 800e7c6:	f380 8811 	msr	BASEPRI, r0
 800e7ca:	4770      	bx	lr
 800e7cc:	f3af 8000 	nop.w

0800e7d0 <pxCurrentTCBConst2>:
 800e7d0:	20000a80 	.word	0x20000a80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop

0800e7d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7d8:	4808      	ldr	r0, [pc, #32]	; (800e7fc <prvPortStartFirstTask+0x24>)
 800e7da:	6800      	ldr	r0, [r0, #0]
 800e7dc:	6800      	ldr	r0, [r0, #0]
 800e7de:	f380 8808 	msr	MSP, r0
 800e7e2:	f04f 0000 	mov.w	r0, #0
 800e7e6:	f380 8814 	msr	CONTROL, r0
 800e7ea:	b662      	cpsie	i
 800e7ec:	b661      	cpsie	f
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	df00      	svc	0
 800e7f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e7fa:	bf00      	nop
 800e7fc:	e000ed08 	.word	0xe000ed08

0800e800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e806:	4b46      	ldr	r3, [pc, #280]	; (800e920 <xPortStartScheduler+0x120>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4a46      	ldr	r2, [pc, #280]	; (800e924 <xPortStartScheduler+0x124>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d10a      	bne.n	800e826 <xPortStartScheduler+0x26>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	f383 8811 	msr	BASEPRI, r3
 800e818:	f3bf 8f6f 	isb	sy
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	613b      	str	r3, [r7, #16]
}
 800e822:	bf00      	nop
 800e824:	e7fe      	b.n	800e824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e826:	4b3e      	ldr	r3, [pc, #248]	; (800e920 <xPortStartScheduler+0x120>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a3f      	ldr	r2, [pc, #252]	; (800e928 <xPortStartScheduler+0x128>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d10a      	bne.n	800e846 <xPortStartScheduler+0x46>
	__asm volatile
 800e830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e834:	f383 8811 	msr	BASEPRI, r3
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	60fb      	str	r3, [r7, #12]
}
 800e842:	bf00      	nop
 800e844:	e7fe      	b.n	800e844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e846:	4b39      	ldr	r3, [pc, #228]	; (800e92c <xPortStartScheduler+0x12c>)
 800e848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	22ff      	movs	r2, #255	; 0xff
 800e856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e860:	78fb      	ldrb	r3, [r7, #3]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	4b31      	ldr	r3, [pc, #196]	; (800e930 <xPortStartScheduler+0x130>)
 800e86c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e86e:	4b31      	ldr	r3, [pc, #196]	; (800e934 <xPortStartScheduler+0x134>)
 800e870:	2207      	movs	r2, #7
 800e872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e874:	e009      	b.n	800e88a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e876:	4b2f      	ldr	r3, [pc, #188]	; (800e934 <xPortStartScheduler+0x134>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	3b01      	subs	r3, #1
 800e87c:	4a2d      	ldr	r2, [pc, #180]	; (800e934 <xPortStartScheduler+0x134>)
 800e87e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e880:	78fb      	ldrb	r3, [r7, #3]
 800e882:	b2db      	uxtb	r3, r3
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	b2db      	uxtb	r3, r3
 800e888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e88a:	78fb      	ldrb	r3, [r7, #3]
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e892:	2b80      	cmp	r3, #128	; 0x80
 800e894:	d0ef      	beq.n	800e876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e896:	4b27      	ldr	r3, [pc, #156]	; (800e934 <xPortStartScheduler+0x134>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f1c3 0307 	rsb	r3, r3, #7
 800e89e:	2b04      	cmp	r3, #4
 800e8a0:	d00a      	beq.n	800e8b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a6:	f383 8811 	msr	BASEPRI, r3
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	60bb      	str	r3, [r7, #8]
}
 800e8b4:	bf00      	nop
 800e8b6:	e7fe      	b.n	800e8b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e8b8:	4b1e      	ldr	r3, [pc, #120]	; (800e934 <xPortStartScheduler+0x134>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	021b      	lsls	r3, r3, #8
 800e8be:	4a1d      	ldr	r2, [pc, #116]	; (800e934 <xPortStartScheduler+0x134>)
 800e8c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8c2:	4b1c      	ldr	r3, [pc, #112]	; (800e934 <xPortStartScheduler+0x134>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8ca:	4a1a      	ldr	r2, [pc, #104]	; (800e934 <xPortStartScheduler+0x134>)
 800e8cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	b2da      	uxtb	r2, r3
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e8d6:	4b18      	ldr	r3, [pc, #96]	; (800e938 <xPortStartScheduler+0x138>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a17      	ldr	r2, [pc, #92]	; (800e938 <xPortStartScheduler+0x138>)
 800e8dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e8e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e8e2:	4b15      	ldr	r3, [pc, #84]	; (800e938 <xPortStartScheduler+0x138>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4a14      	ldr	r2, [pc, #80]	; (800e938 <xPortStartScheduler+0x138>)
 800e8e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e8ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e8ee:	f000 f8dd 	bl	800eaac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e8f2:	4b12      	ldr	r3, [pc, #72]	; (800e93c <xPortStartScheduler+0x13c>)
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e8f8:	f000 f8fc 	bl	800eaf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e8fc:	4b10      	ldr	r3, [pc, #64]	; (800e940 <xPortStartScheduler+0x140>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a0f      	ldr	r2, [pc, #60]	; (800e940 <xPortStartScheduler+0x140>)
 800e902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e908:	f7ff ff66 	bl	800e7d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e90c:	f7fe fe46 	bl	800d59c <vTaskSwitchContext>
	prvTaskExitError();
 800e910:	f7ff ff20 	bl	800e754 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3718      	adds	r7, #24
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	e000ed00 	.word	0xe000ed00
 800e924:	410fc271 	.word	0x410fc271
 800e928:	410fc270 	.word	0x410fc270
 800e92c:	e000e400 	.word	0xe000e400
 800e930:	200010ac 	.word	0x200010ac
 800e934:	200010b0 	.word	0x200010b0
 800e938:	e000ed20 	.word	0xe000ed20
 800e93c:	20000024 	.word	0x20000024
 800e940:	e000ef34 	.word	0xe000ef34

0800e944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	607b      	str	r3, [r7, #4]
}
 800e95c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e95e:	4b0f      	ldr	r3, [pc, #60]	; (800e99c <vPortEnterCritical+0x58>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	3301      	adds	r3, #1
 800e964:	4a0d      	ldr	r2, [pc, #52]	; (800e99c <vPortEnterCritical+0x58>)
 800e966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e968:	4b0c      	ldr	r3, [pc, #48]	; (800e99c <vPortEnterCritical+0x58>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d10f      	bne.n	800e990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e970:	4b0b      	ldr	r3, [pc, #44]	; (800e9a0 <vPortEnterCritical+0x5c>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	b2db      	uxtb	r3, r3
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00a      	beq.n	800e990 <vPortEnterCritical+0x4c>
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	603b      	str	r3, [r7, #0]
}
 800e98c:	bf00      	nop
 800e98e:	e7fe      	b.n	800e98e <vPortEnterCritical+0x4a>
	}
}
 800e990:	bf00      	nop
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr
 800e99c:	20000024 	.word	0x20000024
 800e9a0:	e000ed04 	.word	0xe000ed04

0800e9a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e9aa:	4b12      	ldr	r3, [pc, #72]	; (800e9f4 <vPortExitCritical+0x50>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d10a      	bne.n	800e9c8 <vPortExitCritical+0x24>
	__asm volatile
 800e9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b6:	f383 8811 	msr	BASEPRI, r3
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	607b      	str	r3, [r7, #4]
}
 800e9c4:	bf00      	nop
 800e9c6:	e7fe      	b.n	800e9c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e9c8:	4b0a      	ldr	r3, [pc, #40]	; (800e9f4 <vPortExitCritical+0x50>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	4a09      	ldr	r2, [pc, #36]	; (800e9f4 <vPortExitCritical+0x50>)
 800e9d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e9d2:	4b08      	ldr	r3, [pc, #32]	; (800e9f4 <vPortExitCritical+0x50>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d105      	bne.n	800e9e6 <vPortExitCritical+0x42>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	f383 8811 	msr	BASEPRI, r3
}
 800e9e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e9e6:	bf00      	nop
 800e9e8:	370c      	adds	r7, #12
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	20000024 	.word	0x20000024
	...

0800ea00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea00:	f3ef 8009 	mrs	r0, PSP
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	4b15      	ldr	r3, [pc, #84]	; (800ea60 <pxCurrentTCBConst>)
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	f01e 0f10 	tst.w	lr, #16
 800ea10:	bf08      	it	eq
 800ea12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea1a:	6010      	str	r0, [r2, #0]
 800ea1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea24:	f380 8811 	msr	BASEPRI, r0
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	f7fe fdb4 	bl	800d59c <vTaskSwitchContext>
 800ea34:	f04f 0000 	mov.w	r0, #0
 800ea38:	f380 8811 	msr	BASEPRI, r0
 800ea3c:	bc09      	pop	{r0, r3}
 800ea3e:	6819      	ldr	r1, [r3, #0]
 800ea40:	6808      	ldr	r0, [r1, #0]
 800ea42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea46:	f01e 0f10 	tst.w	lr, #16
 800ea4a:	bf08      	it	eq
 800ea4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea50:	f380 8809 	msr	PSP, r0
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	4770      	bx	lr
 800ea5a:	bf00      	nop
 800ea5c:	f3af 8000 	nop.w

0800ea60 <pxCurrentTCBConst>:
 800ea60:	20000a80 	.word	0x20000a80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea64:	bf00      	nop
 800ea66:	bf00      	nop

0800ea68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea72:	f383 8811 	msr	BASEPRI, r3
 800ea76:	f3bf 8f6f 	isb	sy
 800ea7a:	f3bf 8f4f 	dsb	sy
 800ea7e:	607b      	str	r3, [r7, #4]
}
 800ea80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea82:	f7fe fcd1 	bl	800d428 <xTaskIncrementTick>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d003      	beq.n	800ea94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea8c:	4b06      	ldr	r3, [pc, #24]	; (800eaa8 <xPortSysTickHandler+0x40>)
 800ea8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	2300      	movs	r3, #0
 800ea96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	f383 8811 	msr	BASEPRI, r3
}
 800ea9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eaa0:	bf00      	nop
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	e000ed04 	.word	0xe000ed04

0800eaac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eaac:	b480      	push	{r7}
 800eaae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eab0:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <vPortSetupTimerInterrupt+0x34>)
 800eab2:	2200      	movs	r2, #0
 800eab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eab6:	4b0b      	ldr	r3, [pc, #44]	; (800eae4 <vPortSetupTimerInterrupt+0x38>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eabc:	4b0a      	ldr	r3, [pc, #40]	; (800eae8 <vPortSetupTimerInterrupt+0x3c>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a0a      	ldr	r2, [pc, #40]	; (800eaec <vPortSetupTimerInterrupt+0x40>)
 800eac2:	fba2 2303 	umull	r2, r3, r2, r3
 800eac6:	099b      	lsrs	r3, r3, #6
 800eac8:	4a09      	ldr	r2, [pc, #36]	; (800eaf0 <vPortSetupTimerInterrupt+0x44>)
 800eaca:	3b01      	subs	r3, #1
 800eacc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eace:	4b04      	ldr	r3, [pc, #16]	; (800eae0 <vPortSetupTimerInterrupt+0x34>)
 800ead0:	2207      	movs	r2, #7
 800ead2:	601a      	str	r2, [r3, #0]
}
 800ead4:	bf00      	nop
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	e000e010 	.word	0xe000e010
 800eae4:	e000e018 	.word	0xe000e018
 800eae8:	20000004 	.word	0x20000004
 800eaec:	10624dd3 	.word	0x10624dd3
 800eaf0:	e000e014 	.word	0xe000e014

0800eaf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eaf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb04 <vPortEnableVFP+0x10>
 800eaf8:	6801      	ldr	r1, [r0, #0]
 800eafa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eafe:	6001      	str	r1, [r0, #0]
 800eb00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb02:	bf00      	nop
 800eb04:	e000ed88 	.word	0xe000ed88

0800eb08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb0e:	f3ef 8305 	mrs	r3, IPSR
 800eb12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b0f      	cmp	r3, #15
 800eb18:	d914      	bls.n	800eb44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb1a:	4a17      	ldr	r2, [pc, #92]	; (800eb78 <vPortValidateInterruptPriority+0x70>)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	4413      	add	r3, r2
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb24:	4b15      	ldr	r3, [pc, #84]	; (800eb7c <vPortValidateInterruptPriority+0x74>)
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	7afa      	ldrb	r2, [r7, #11]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d20a      	bcs.n	800eb44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb32:	f383 8811 	msr	BASEPRI, r3
 800eb36:	f3bf 8f6f 	isb	sy
 800eb3a:	f3bf 8f4f 	dsb	sy
 800eb3e:	607b      	str	r3, [r7, #4]
}
 800eb40:	bf00      	nop
 800eb42:	e7fe      	b.n	800eb42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb44:	4b0e      	ldr	r3, [pc, #56]	; (800eb80 <vPortValidateInterruptPriority+0x78>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb4c:	4b0d      	ldr	r3, [pc, #52]	; (800eb84 <vPortValidateInterruptPriority+0x7c>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d90a      	bls.n	800eb6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	603b      	str	r3, [r7, #0]
}
 800eb66:	bf00      	nop
 800eb68:	e7fe      	b.n	800eb68 <vPortValidateInterruptPriority+0x60>
	}
 800eb6a:	bf00      	nop
 800eb6c:	3714      	adds	r7, #20
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	e000e3f0 	.word	0xe000e3f0
 800eb7c:	200010ac 	.word	0x200010ac
 800eb80:	e000ed0c 	.word	0xe000ed0c
 800eb84:	200010b0 	.word	0x200010b0

0800eb88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b08a      	sub	sp, #40	; 0x28
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb90:	2300      	movs	r3, #0
 800eb92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb94:	f7fe fb8c 	bl	800d2b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb98:	4b5b      	ldr	r3, [pc, #364]	; (800ed08 <pvPortMalloc+0x180>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d101      	bne.n	800eba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eba0:	f000 f920 	bl	800ede4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eba4:	4b59      	ldr	r3, [pc, #356]	; (800ed0c <pvPortMalloc+0x184>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4013      	ands	r3, r2
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f040 8093 	bne.w	800ecd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d01d      	beq.n	800ebf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ebb8:	2208      	movs	r2, #8
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f003 0307 	and.w	r3, r3, #7
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d014      	beq.n	800ebf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f023 0307 	bic.w	r3, r3, #7
 800ebd0:	3308      	adds	r3, #8
 800ebd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f003 0307 	and.w	r3, r3, #7
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00a      	beq.n	800ebf4 <pvPortMalloc+0x6c>
	__asm volatile
 800ebde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe2:	f383 8811 	msr	BASEPRI, r3
 800ebe6:	f3bf 8f6f 	isb	sy
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	617b      	str	r3, [r7, #20]
}
 800ebf0:	bf00      	nop
 800ebf2:	e7fe      	b.n	800ebf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d06e      	beq.n	800ecd8 <pvPortMalloc+0x150>
 800ebfa:	4b45      	ldr	r3, [pc, #276]	; (800ed10 <pvPortMalloc+0x188>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d869      	bhi.n	800ecd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec04:	4b43      	ldr	r3, [pc, #268]	; (800ed14 <pvPortMalloc+0x18c>)
 800ec06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec08:	4b42      	ldr	r3, [pc, #264]	; (800ed14 <pvPortMalloc+0x18c>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec0e:	e004      	b.n	800ec1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d903      	bls.n	800ec2c <pvPortMalloc+0xa4>
 800ec24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1f1      	bne.n	800ec10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec2c:	4b36      	ldr	r3, [pc, #216]	; (800ed08 <pvPortMalloc+0x180>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d050      	beq.n	800ecd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec36:	6a3b      	ldr	r3, [r7, #32]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2208      	movs	r2, #8
 800ec3c:	4413      	add	r3, r2
 800ec3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	685a      	ldr	r2, [r3, #4]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	1ad2      	subs	r2, r2, r3
 800ec50:	2308      	movs	r3, #8
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d91f      	bls.n	800ec98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	f003 0307 	and.w	r3, r3, #7
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00a      	beq.n	800ec80 <pvPortMalloc+0xf8>
	__asm volatile
 800ec6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	613b      	str	r3, [r7, #16]
}
 800ec7c:	bf00      	nop
 800ec7e:	e7fe      	b.n	800ec7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	1ad2      	subs	r2, r2, r3
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec92:	69b8      	ldr	r0, [r7, #24]
 800ec94:	f000 f908 	bl	800eea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec98:	4b1d      	ldr	r3, [pc, #116]	; (800ed10 <pvPortMalloc+0x188>)
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	4a1b      	ldr	r2, [pc, #108]	; (800ed10 <pvPortMalloc+0x188>)
 800eca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eca6:	4b1a      	ldr	r3, [pc, #104]	; (800ed10 <pvPortMalloc+0x188>)
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	4b1b      	ldr	r3, [pc, #108]	; (800ed18 <pvPortMalloc+0x190>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d203      	bcs.n	800ecba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ecb2:	4b17      	ldr	r3, [pc, #92]	; (800ed10 <pvPortMalloc+0x188>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a18      	ldr	r2, [pc, #96]	; (800ed18 <pvPortMalloc+0x190>)
 800ecb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	4b13      	ldr	r3, [pc, #76]	; (800ed0c <pvPortMalloc+0x184>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	431a      	orrs	r2, r3
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ecc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecca:	2200      	movs	r2, #0
 800eccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ecce:	4b13      	ldr	r3, [pc, #76]	; (800ed1c <pvPortMalloc+0x194>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	4a11      	ldr	r2, [pc, #68]	; (800ed1c <pvPortMalloc+0x194>)
 800ecd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ecd8:	f7fe faf8 	bl	800d2cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	f003 0307 	and.w	r3, r3, #7
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00a      	beq.n	800ecfc <pvPortMalloc+0x174>
	__asm volatile
 800ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	60fb      	str	r3, [r7, #12]
}
 800ecf8:	bf00      	nop
 800ecfa:	e7fe      	b.n	800ecfa <pvPortMalloc+0x172>
	return pvReturn;
 800ecfc:	69fb      	ldr	r3, [r7, #28]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3728      	adds	r7, #40	; 0x28
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	20004cbc 	.word	0x20004cbc
 800ed0c:	20004cd0 	.word	0x20004cd0
 800ed10:	20004cc0 	.word	0x20004cc0
 800ed14:	20004cb4 	.word	0x20004cb4
 800ed18:	20004cc4 	.word	0x20004cc4
 800ed1c:	20004cc8 	.word	0x20004cc8

0800ed20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d04d      	beq.n	800edce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed32:	2308      	movs	r3, #8
 800ed34:	425b      	negs	r3, r3
 800ed36:	697a      	ldr	r2, [r7, #20]
 800ed38:	4413      	add	r3, r2
 800ed3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	685a      	ldr	r2, [r3, #4]
 800ed44:	4b24      	ldr	r3, [pc, #144]	; (800edd8 <vPortFree+0xb8>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4013      	ands	r3, r2
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d10a      	bne.n	800ed64 <vPortFree+0x44>
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	60fb      	str	r3, [r7, #12]
}
 800ed60:	bf00      	nop
 800ed62:	e7fe      	b.n	800ed62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00a      	beq.n	800ed82 <vPortFree+0x62>
	__asm volatile
 800ed6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed70:	f383 8811 	msr	BASEPRI, r3
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	f3bf 8f4f 	dsb	sy
 800ed7c:	60bb      	str	r3, [r7, #8]
}
 800ed7e:	bf00      	nop
 800ed80:	e7fe      	b.n	800ed80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	685a      	ldr	r2, [r3, #4]
 800ed86:	4b14      	ldr	r3, [pc, #80]	; (800edd8 <vPortFree+0xb8>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4013      	ands	r3, r2
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d01e      	beq.n	800edce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d11a      	bne.n	800edce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	685a      	ldr	r2, [r3, #4]
 800ed9c:	4b0e      	ldr	r3, [pc, #56]	; (800edd8 <vPortFree+0xb8>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	43db      	mvns	r3, r3
 800eda2:	401a      	ands	r2, r3
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eda8:	f7fe fa82 	bl	800d2b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <vPortFree+0xbc>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4413      	add	r3, r2
 800edb6:	4a09      	ldr	r2, [pc, #36]	; (800eddc <vPortFree+0xbc>)
 800edb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edba:	6938      	ldr	r0, [r7, #16]
 800edbc:	f000 f874 	bl	800eea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800edc0:	4b07      	ldr	r3, [pc, #28]	; (800ede0 <vPortFree+0xc0>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	3301      	adds	r3, #1
 800edc6:	4a06      	ldr	r2, [pc, #24]	; (800ede0 <vPortFree+0xc0>)
 800edc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800edca:	f7fe fa7f 	bl	800d2cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edce:	bf00      	nop
 800edd0:	3718      	adds	r7, #24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20004cd0 	.word	0x20004cd0
 800eddc:	20004cc0 	.word	0x20004cc0
 800ede0:	20004ccc 	.word	0x20004ccc

0800ede4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ede4:	b480      	push	{r7}
 800ede6:	b085      	sub	sp, #20
 800ede8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800edea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800edee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800edf0:	4b27      	ldr	r3, [pc, #156]	; (800ee90 <prvHeapInit+0xac>)
 800edf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f003 0307 	and.w	r3, r3, #7
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00c      	beq.n	800ee18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	3307      	adds	r3, #7
 800ee02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f023 0307 	bic.w	r3, r3, #7
 800ee0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	1ad3      	subs	r3, r2, r3
 800ee12:	4a1f      	ldr	r2, [pc, #124]	; (800ee90 <prvHeapInit+0xac>)
 800ee14:	4413      	add	r3, r2
 800ee16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee1c:	4a1d      	ldr	r2, [pc, #116]	; (800ee94 <prvHeapInit+0xb0>)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee22:	4b1c      	ldr	r3, [pc, #112]	; (800ee94 <prvHeapInit+0xb0>)
 800ee24:	2200      	movs	r2, #0
 800ee26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee30:	2208      	movs	r2, #8
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	1a9b      	subs	r3, r3, r2
 800ee36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f023 0307 	bic.w	r3, r3, #7
 800ee3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	4a15      	ldr	r2, [pc, #84]	; (800ee98 <prvHeapInit+0xb4>)
 800ee44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee46:	4b14      	ldr	r3, [pc, #80]	; (800ee98 <prvHeapInit+0xb4>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee4e:	4b12      	ldr	r3, [pc, #72]	; (800ee98 <prvHeapInit+0xb4>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2200      	movs	r2, #0
 800ee54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	1ad2      	subs	r2, r2, r3
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee64:	4b0c      	ldr	r3, [pc, #48]	; (800ee98 <prvHeapInit+0xb4>)
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	4a0a      	ldr	r2, [pc, #40]	; (800ee9c <prvHeapInit+0xb8>)
 800ee72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	4a09      	ldr	r2, [pc, #36]	; (800eea0 <prvHeapInit+0xbc>)
 800ee7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee7c:	4b09      	ldr	r3, [pc, #36]	; (800eea4 <prvHeapInit+0xc0>)
 800ee7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee82:	601a      	str	r2, [r3, #0]
}
 800ee84:	bf00      	nop
 800ee86:	3714      	adds	r7, #20
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	200010b4 	.word	0x200010b4
 800ee94:	20004cb4 	.word	0x20004cb4
 800ee98:	20004cbc 	.word	0x20004cbc
 800ee9c:	20004cc4 	.word	0x20004cc4
 800eea0:	20004cc0 	.word	0x20004cc0
 800eea4:	20004cd0 	.word	0x20004cd0

0800eea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b085      	sub	sp, #20
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eeb0:	4b28      	ldr	r3, [pc, #160]	; (800ef54 <prvInsertBlockIntoFreeList+0xac>)
 800eeb2:	60fb      	str	r3, [r7, #12]
 800eeb4:	e002      	b.n	800eebc <prvInsertBlockIntoFreeList+0x14>
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	60fb      	str	r3, [r7, #12]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d8f7      	bhi.n	800eeb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	4413      	add	r3, r2
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d108      	bne.n	800eeea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	685a      	ldr	r2, [r3, #4]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	441a      	add	r2, r3
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	441a      	add	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d118      	bne.n	800ef30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	4b15      	ldr	r3, [pc, #84]	; (800ef58 <prvInsertBlockIntoFreeList+0xb0>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d00d      	beq.n	800ef26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685a      	ldr	r2, [r3, #4]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	441a      	add	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	e008      	b.n	800ef38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef26:	4b0c      	ldr	r3, [pc, #48]	; (800ef58 <prvInsertBlockIntoFreeList+0xb0>)
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	601a      	str	r2, [r3, #0]
 800ef2e:	e003      	b.n	800ef38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d002      	beq.n	800ef46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef46:	bf00      	nop
 800ef48:	3714      	adds	r7, #20
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	20004cb4 	.word	0x20004cb4
 800ef58:	20004cbc 	.word	0x20004cbc

0800ef5c <atof>:
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	f001 bb61 	b.w	8010624 <strtod>
	...

0800ef64 <__errno>:
 800ef64:	4b01      	ldr	r3, [pc, #4]	; (800ef6c <__errno+0x8>)
 800ef66:	6818      	ldr	r0, [r3, #0]
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop
 800ef6c:	20000028 	.word	0x20000028

0800ef70 <__libc_init_array>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	4d0d      	ldr	r5, [pc, #52]	; (800efa8 <__libc_init_array+0x38>)
 800ef74:	4c0d      	ldr	r4, [pc, #52]	; (800efac <__libc_init_array+0x3c>)
 800ef76:	1b64      	subs	r4, r4, r5
 800ef78:	10a4      	asrs	r4, r4, #2
 800ef7a:	2600      	movs	r6, #0
 800ef7c:	42a6      	cmp	r6, r4
 800ef7e:	d109      	bne.n	800ef94 <__libc_init_array+0x24>
 800ef80:	4d0b      	ldr	r5, [pc, #44]	; (800efb0 <__libc_init_array+0x40>)
 800ef82:	4c0c      	ldr	r4, [pc, #48]	; (800efb4 <__libc_init_array+0x44>)
 800ef84:	f006 fd5e 	bl	8015a44 <_init>
 800ef88:	1b64      	subs	r4, r4, r5
 800ef8a:	10a4      	asrs	r4, r4, #2
 800ef8c:	2600      	movs	r6, #0
 800ef8e:	42a6      	cmp	r6, r4
 800ef90:	d105      	bne.n	800ef9e <__libc_init_array+0x2e>
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef98:	4798      	blx	r3
 800ef9a:	3601      	adds	r6, #1
 800ef9c:	e7ee      	b.n	800ef7c <__libc_init_array+0xc>
 800ef9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800efa2:	4798      	blx	r3
 800efa4:	3601      	adds	r6, #1
 800efa6:	e7f2      	b.n	800ef8e <__libc_init_array+0x1e>
 800efa8:	080167f0 	.word	0x080167f0
 800efac:	080167f0 	.word	0x080167f0
 800efb0:	080167f0 	.word	0x080167f0
 800efb4:	080167f4 	.word	0x080167f4

0800efb8 <memcpy>:
 800efb8:	440a      	add	r2, r1
 800efba:	4291      	cmp	r1, r2
 800efbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800efc0:	d100      	bne.n	800efc4 <memcpy+0xc>
 800efc2:	4770      	bx	lr
 800efc4:	b510      	push	{r4, lr}
 800efc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efce:	4291      	cmp	r1, r2
 800efd0:	d1f9      	bne.n	800efc6 <memcpy+0xe>
 800efd2:	bd10      	pop	{r4, pc}

0800efd4 <memset>:
 800efd4:	4402      	add	r2, r0
 800efd6:	4603      	mov	r3, r0
 800efd8:	4293      	cmp	r3, r2
 800efda:	d100      	bne.n	800efde <memset+0xa>
 800efdc:	4770      	bx	lr
 800efde:	f803 1b01 	strb.w	r1, [r3], #1
 800efe2:	e7f9      	b.n	800efd8 <memset+0x4>

0800efe4 <__cvt>:
 800efe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efe8:	ec55 4b10 	vmov	r4, r5, d0
 800efec:	2d00      	cmp	r5, #0
 800efee:	460e      	mov	r6, r1
 800eff0:	4619      	mov	r1, r3
 800eff2:	462b      	mov	r3, r5
 800eff4:	bfbb      	ittet	lt
 800eff6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800effa:	461d      	movlt	r5, r3
 800effc:	2300      	movge	r3, #0
 800effe:	232d      	movlt	r3, #45	; 0x2d
 800f000:	700b      	strb	r3, [r1, #0]
 800f002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f004:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f008:	4691      	mov	r9, r2
 800f00a:	f023 0820 	bic.w	r8, r3, #32
 800f00e:	bfbc      	itt	lt
 800f010:	4622      	movlt	r2, r4
 800f012:	4614      	movlt	r4, r2
 800f014:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f018:	d005      	beq.n	800f026 <__cvt+0x42>
 800f01a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f01e:	d100      	bne.n	800f022 <__cvt+0x3e>
 800f020:	3601      	adds	r6, #1
 800f022:	2102      	movs	r1, #2
 800f024:	e000      	b.n	800f028 <__cvt+0x44>
 800f026:	2103      	movs	r1, #3
 800f028:	ab03      	add	r3, sp, #12
 800f02a:	9301      	str	r3, [sp, #4]
 800f02c:	ab02      	add	r3, sp, #8
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	ec45 4b10 	vmov	d0, r4, r5
 800f034:	4653      	mov	r3, sl
 800f036:	4632      	mov	r2, r6
 800f038:	f001 fc42 	bl	80108c0 <_dtoa_r>
 800f03c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f040:	4607      	mov	r7, r0
 800f042:	d102      	bne.n	800f04a <__cvt+0x66>
 800f044:	f019 0f01 	tst.w	r9, #1
 800f048:	d022      	beq.n	800f090 <__cvt+0xac>
 800f04a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f04e:	eb07 0906 	add.w	r9, r7, r6
 800f052:	d110      	bne.n	800f076 <__cvt+0x92>
 800f054:	783b      	ldrb	r3, [r7, #0]
 800f056:	2b30      	cmp	r3, #48	; 0x30
 800f058:	d10a      	bne.n	800f070 <__cvt+0x8c>
 800f05a:	2200      	movs	r2, #0
 800f05c:	2300      	movs	r3, #0
 800f05e:	4620      	mov	r0, r4
 800f060:	4629      	mov	r1, r5
 800f062:	f7f1 fd39 	bl	8000ad8 <__aeabi_dcmpeq>
 800f066:	b918      	cbnz	r0, 800f070 <__cvt+0x8c>
 800f068:	f1c6 0601 	rsb	r6, r6, #1
 800f06c:	f8ca 6000 	str.w	r6, [sl]
 800f070:	f8da 3000 	ldr.w	r3, [sl]
 800f074:	4499      	add	r9, r3
 800f076:	2200      	movs	r2, #0
 800f078:	2300      	movs	r3, #0
 800f07a:	4620      	mov	r0, r4
 800f07c:	4629      	mov	r1, r5
 800f07e:	f7f1 fd2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f082:	b108      	cbz	r0, 800f088 <__cvt+0xa4>
 800f084:	f8cd 900c 	str.w	r9, [sp, #12]
 800f088:	2230      	movs	r2, #48	; 0x30
 800f08a:	9b03      	ldr	r3, [sp, #12]
 800f08c:	454b      	cmp	r3, r9
 800f08e:	d307      	bcc.n	800f0a0 <__cvt+0xbc>
 800f090:	9b03      	ldr	r3, [sp, #12]
 800f092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f094:	1bdb      	subs	r3, r3, r7
 800f096:	4638      	mov	r0, r7
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	b004      	add	sp, #16
 800f09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a0:	1c59      	adds	r1, r3, #1
 800f0a2:	9103      	str	r1, [sp, #12]
 800f0a4:	701a      	strb	r2, [r3, #0]
 800f0a6:	e7f0      	b.n	800f08a <__cvt+0xa6>

0800f0a8 <__exponent>:
 800f0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2900      	cmp	r1, #0
 800f0ae:	bfb8      	it	lt
 800f0b0:	4249      	neglt	r1, r1
 800f0b2:	f803 2b02 	strb.w	r2, [r3], #2
 800f0b6:	bfb4      	ite	lt
 800f0b8:	222d      	movlt	r2, #45	; 0x2d
 800f0ba:	222b      	movge	r2, #43	; 0x2b
 800f0bc:	2909      	cmp	r1, #9
 800f0be:	7042      	strb	r2, [r0, #1]
 800f0c0:	dd2a      	ble.n	800f118 <__exponent+0x70>
 800f0c2:	f10d 0407 	add.w	r4, sp, #7
 800f0c6:	46a4      	mov	ip, r4
 800f0c8:	270a      	movs	r7, #10
 800f0ca:	46a6      	mov	lr, r4
 800f0cc:	460a      	mov	r2, r1
 800f0ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800f0d2:	fb07 1516 	mls	r5, r7, r6, r1
 800f0d6:	3530      	adds	r5, #48	; 0x30
 800f0d8:	2a63      	cmp	r2, #99	; 0x63
 800f0da:	f104 34ff 	add.w	r4, r4, #4294967295
 800f0de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f0e2:	4631      	mov	r1, r6
 800f0e4:	dcf1      	bgt.n	800f0ca <__exponent+0x22>
 800f0e6:	3130      	adds	r1, #48	; 0x30
 800f0e8:	f1ae 0502 	sub.w	r5, lr, #2
 800f0ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f0f0:	1c44      	adds	r4, r0, #1
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	4561      	cmp	r1, ip
 800f0f6:	d30a      	bcc.n	800f10e <__exponent+0x66>
 800f0f8:	f10d 0209 	add.w	r2, sp, #9
 800f0fc:	eba2 020e 	sub.w	r2, r2, lr
 800f100:	4565      	cmp	r5, ip
 800f102:	bf88      	it	hi
 800f104:	2200      	movhi	r2, #0
 800f106:	4413      	add	r3, r2
 800f108:	1a18      	subs	r0, r3, r0
 800f10a:	b003      	add	sp, #12
 800f10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f10e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f112:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f116:	e7ed      	b.n	800f0f4 <__exponent+0x4c>
 800f118:	2330      	movs	r3, #48	; 0x30
 800f11a:	3130      	adds	r1, #48	; 0x30
 800f11c:	7083      	strb	r3, [r0, #2]
 800f11e:	70c1      	strb	r1, [r0, #3]
 800f120:	1d03      	adds	r3, r0, #4
 800f122:	e7f1      	b.n	800f108 <__exponent+0x60>

0800f124 <_printf_float>:
 800f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f128:	ed2d 8b02 	vpush	{d8}
 800f12c:	b08d      	sub	sp, #52	; 0x34
 800f12e:	460c      	mov	r4, r1
 800f130:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f134:	4616      	mov	r6, r2
 800f136:	461f      	mov	r7, r3
 800f138:	4605      	mov	r5, r0
 800f13a:	f002 fd2f 	bl	8011b9c <_localeconv_r>
 800f13e:	f8d0 a000 	ldr.w	sl, [r0]
 800f142:	4650      	mov	r0, sl
 800f144:	f7f1 f84c 	bl	80001e0 <strlen>
 800f148:	2300      	movs	r3, #0
 800f14a:	930a      	str	r3, [sp, #40]	; 0x28
 800f14c:	6823      	ldr	r3, [r4, #0]
 800f14e:	9305      	str	r3, [sp, #20]
 800f150:	f8d8 3000 	ldr.w	r3, [r8]
 800f154:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f158:	3307      	adds	r3, #7
 800f15a:	f023 0307 	bic.w	r3, r3, #7
 800f15e:	f103 0208 	add.w	r2, r3, #8
 800f162:	f8c8 2000 	str.w	r2, [r8]
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f16e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f172:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f176:	9307      	str	r3, [sp, #28]
 800f178:	f8cd 8018 	str.w	r8, [sp, #24]
 800f17c:	ee08 0a10 	vmov	s16, r0
 800f180:	4b9f      	ldr	r3, [pc, #636]	; (800f400 <_printf_float+0x2dc>)
 800f182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f186:	f04f 32ff 	mov.w	r2, #4294967295
 800f18a:	f7f1 fcd7 	bl	8000b3c <__aeabi_dcmpun>
 800f18e:	bb88      	cbnz	r0, 800f1f4 <_printf_float+0xd0>
 800f190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f194:	4b9a      	ldr	r3, [pc, #616]	; (800f400 <_printf_float+0x2dc>)
 800f196:	f04f 32ff 	mov.w	r2, #4294967295
 800f19a:	f7f1 fcb1 	bl	8000b00 <__aeabi_dcmple>
 800f19e:	bb48      	cbnz	r0, 800f1f4 <_printf_float+0xd0>
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	4640      	mov	r0, r8
 800f1a6:	4649      	mov	r1, r9
 800f1a8:	f7f1 fca0 	bl	8000aec <__aeabi_dcmplt>
 800f1ac:	b110      	cbz	r0, 800f1b4 <_printf_float+0x90>
 800f1ae:	232d      	movs	r3, #45	; 0x2d
 800f1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1b4:	4b93      	ldr	r3, [pc, #588]	; (800f404 <_printf_float+0x2e0>)
 800f1b6:	4894      	ldr	r0, [pc, #592]	; (800f408 <_printf_float+0x2e4>)
 800f1b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f1bc:	bf94      	ite	ls
 800f1be:	4698      	movls	r8, r3
 800f1c0:	4680      	movhi	r8, r0
 800f1c2:	2303      	movs	r3, #3
 800f1c4:	6123      	str	r3, [r4, #16]
 800f1c6:	9b05      	ldr	r3, [sp, #20]
 800f1c8:	f023 0204 	bic.w	r2, r3, #4
 800f1cc:	6022      	str	r2, [r4, #0]
 800f1ce:	f04f 0900 	mov.w	r9, #0
 800f1d2:	9700      	str	r7, [sp, #0]
 800f1d4:	4633      	mov	r3, r6
 800f1d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f1d8:	4621      	mov	r1, r4
 800f1da:	4628      	mov	r0, r5
 800f1dc:	f000 f9d8 	bl	800f590 <_printf_common>
 800f1e0:	3001      	adds	r0, #1
 800f1e2:	f040 8090 	bne.w	800f306 <_printf_float+0x1e2>
 800f1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ea:	b00d      	add	sp, #52	; 0x34
 800f1ec:	ecbd 8b02 	vpop	{d8}
 800f1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f4:	4642      	mov	r2, r8
 800f1f6:	464b      	mov	r3, r9
 800f1f8:	4640      	mov	r0, r8
 800f1fa:	4649      	mov	r1, r9
 800f1fc:	f7f1 fc9e 	bl	8000b3c <__aeabi_dcmpun>
 800f200:	b140      	cbz	r0, 800f214 <_printf_float+0xf0>
 800f202:	464b      	mov	r3, r9
 800f204:	2b00      	cmp	r3, #0
 800f206:	bfbc      	itt	lt
 800f208:	232d      	movlt	r3, #45	; 0x2d
 800f20a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f20e:	487f      	ldr	r0, [pc, #508]	; (800f40c <_printf_float+0x2e8>)
 800f210:	4b7f      	ldr	r3, [pc, #508]	; (800f410 <_printf_float+0x2ec>)
 800f212:	e7d1      	b.n	800f1b8 <_printf_float+0x94>
 800f214:	6863      	ldr	r3, [r4, #4]
 800f216:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f21a:	9206      	str	r2, [sp, #24]
 800f21c:	1c5a      	adds	r2, r3, #1
 800f21e:	d13f      	bne.n	800f2a0 <_printf_float+0x17c>
 800f220:	2306      	movs	r3, #6
 800f222:	6063      	str	r3, [r4, #4]
 800f224:	9b05      	ldr	r3, [sp, #20]
 800f226:	6861      	ldr	r1, [r4, #4]
 800f228:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f22c:	2300      	movs	r3, #0
 800f22e:	9303      	str	r3, [sp, #12]
 800f230:	ab0a      	add	r3, sp, #40	; 0x28
 800f232:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f236:	ab09      	add	r3, sp, #36	; 0x24
 800f238:	ec49 8b10 	vmov	d0, r8, r9
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	6022      	str	r2, [r4, #0]
 800f240:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f244:	4628      	mov	r0, r5
 800f246:	f7ff fecd 	bl	800efe4 <__cvt>
 800f24a:	9b06      	ldr	r3, [sp, #24]
 800f24c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f24e:	2b47      	cmp	r3, #71	; 0x47
 800f250:	4680      	mov	r8, r0
 800f252:	d108      	bne.n	800f266 <_printf_float+0x142>
 800f254:	1cc8      	adds	r0, r1, #3
 800f256:	db02      	blt.n	800f25e <_printf_float+0x13a>
 800f258:	6863      	ldr	r3, [r4, #4]
 800f25a:	4299      	cmp	r1, r3
 800f25c:	dd41      	ble.n	800f2e2 <_printf_float+0x1be>
 800f25e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f262:	fa5f fb8b 	uxtb.w	fp, fp
 800f266:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f26a:	d820      	bhi.n	800f2ae <_printf_float+0x18a>
 800f26c:	3901      	subs	r1, #1
 800f26e:	465a      	mov	r2, fp
 800f270:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f274:	9109      	str	r1, [sp, #36]	; 0x24
 800f276:	f7ff ff17 	bl	800f0a8 <__exponent>
 800f27a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f27c:	1813      	adds	r3, r2, r0
 800f27e:	2a01      	cmp	r2, #1
 800f280:	4681      	mov	r9, r0
 800f282:	6123      	str	r3, [r4, #16]
 800f284:	dc02      	bgt.n	800f28c <_printf_float+0x168>
 800f286:	6822      	ldr	r2, [r4, #0]
 800f288:	07d2      	lsls	r2, r2, #31
 800f28a:	d501      	bpl.n	800f290 <_printf_float+0x16c>
 800f28c:	3301      	adds	r3, #1
 800f28e:	6123      	str	r3, [r4, #16]
 800f290:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f294:	2b00      	cmp	r3, #0
 800f296:	d09c      	beq.n	800f1d2 <_printf_float+0xae>
 800f298:	232d      	movs	r3, #45	; 0x2d
 800f29a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f29e:	e798      	b.n	800f1d2 <_printf_float+0xae>
 800f2a0:	9a06      	ldr	r2, [sp, #24]
 800f2a2:	2a47      	cmp	r2, #71	; 0x47
 800f2a4:	d1be      	bne.n	800f224 <_printf_float+0x100>
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1bc      	bne.n	800f224 <_printf_float+0x100>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e7b9      	b.n	800f222 <_printf_float+0xfe>
 800f2ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2b2:	d118      	bne.n	800f2e6 <_printf_float+0x1c2>
 800f2b4:	2900      	cmp	r1, #0
 800f2b6:	6863      	ldr	r3, [r4, #4]
 800f2b8:	dd0b      	ble.n	800f2d2 <_printf_float+0x1ae>
 800f2ba:	6121      	str	r1, [r4, #16]
 800f2bc:	b913      	cbnz	r3, 800f2c4 <_printf_float+0x1a0>
 800f2be:	6822      	ldr	r2, [r4, #0]
 800f2c0:	07d0      	lsls	r0, r2, #31
 800f2c2:	d502      	bpl.n	800f2ca <_printf_float+0x1a6>
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	440b      	add	r3, r1
 800f2c8:	6123      	str	r3, [r4, #16]
 800f2ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800f2cc:	f04f 0900 	mov.w	r9, #0
 800f2d0:	e7de      	b.n	800f290 <_printf_float+0x16c>
 800f2d2:	b913      	cbnz	r3, 800f2da <_printf_float+0x1b6>
 800f2d4:	6822      	ldr	r2, [r4, #0]
 800f2d6:	07d2      	lsls	r2, r2, #31
 800f2d8:	d501      	bpl.n	800f2de <_printf_float+0x1ba>
 800f2da:	3302      	adds	r3, #2
 800f2dc:	e7f4      	b.n	800f2c8 <_printf_float+0x1a4>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e7f2      	b.n	800f2c8 <_printf_float+0x1a4>
 800f2e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2e8:	4299      	cmp	r1, r3
 800f2ea:	db05      	blt.n	800f2f8 <_printf_float+0x1d4>
 800f2ec:	6823      	ldr	r3, [r4, #0]
 800f2ee:	6121      	str	r1, [r4, #16]
 800f2f0:	07d8      	lsls	r0, r3, #31
 800f2f2:	d5ea      	bpl.n	800f2ca <_printf_float+0x1a6>
 800f2f4:	1c4b      	adds	r3, r1, #1
 800f2f6:	e7e7      	b.n	800f2c8 <_printf_float+0x1a4>
 800f2f8:	2900      	cmp	r1, #0
 800f2fa:	bfd4      	ite	le
 800f2fc:	f1c1 0202 	rsble	r2, r1, #2
 800f300:	2201      	movgt	r2, #1
 800f302:	4413      	add	r3, r2
 800f304:	e7e0      	b.n	800f2c8 <_printf_float+0x1a4>
 800f306:	6823      	ldr	r3, [r4, #0]
 800f308:	055a      	lsls	r2, r3, #21
 800f30a:	d407      	bmi.n	800f31c <_printf_float+0x1f8>
 800f30c:	6923      	ldr	r3, [r4, #16]
 800f30e:	4642      	mov	r2, r8
 800f310:	4631      	mov	r1, r6
 800f312:	4628      	mov	r0, r5
 800f314:	47b8      	blx	r7
 800f316:	3001      	adds	r0, #1
 800f318:	d12c      	bne.n	800f374 <_printf_float+0x250>
 800f31a:	e764      	b.n	800f1e6 <_printf_float+0xc2>
 800f31c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f320:	f240 80e0 	bls.w	800f4e4 <_printf_float+0x3c0>
 800f324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f328:	2200      	movs	r2, #0
 800f32a:	2300      	movs	r3, #0
 800f32c:	f7f1 fbd4 	bl	8000ad8 <__aeabi_dcmpeq>
 800f330:	2800      	cmp	r0, #0
 800f332:	d034      	beq.n	800f39e <_printf_float+0x27a>
 800f334:	4a37      	ldr	r2, [pc, #220]	; (800f414 <_printf_float+0x2f0>)
 800f336:	2301      	movs	r3, #1
 800f338:	4631      	mov	r1, r6
 800f33a:	4628      	mov	r0, r5
 800f33c:	47b8      	blx	r7
 800f33e:	3001      	adds	r0, #1
 800f340:	f43f af51 	beq.w	800f1e6 <_printf_float+0xc2>
 800f344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f348:	429a      	cmp	r2, r3
 800f34a:	db02      	blt.n	800f352 <_printf_float+0x22e>
 800f34c:	6823      	ldr	r3, [r4, #0]
 800f34e:	07d8      	lsls	r0, r3, #31
 800f350:	d510      	bpl.n	800f374 <_printf_float+0x250>
 800f352:	ee18 3a10 	vmov	r3, s16
 800f356:	4652      	mov	r2, sl
 800f358:	4631      	mov	r1, r6
 800f35a:	4628      	mov	r0, r5
 800f35c:	47b8      	blx	r7
 800f35e:	3001      	adds	r0, #1
 800f360:	f43f af41 	beq.w	800f1e6 <_printf_float+0xc2>
 800f364:	f04f 0800 	mov.w	r8, #0
 800f368:	f104 091a 	add.w	r9, r4, #26
 800f36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f36e:	3b01      	subs	r3, #1
 800f370:	4543      	cmp	r3, r8
 800f372:	dc09      	bgt.n	800f388 <_printf_float+0x264>
 800f374:	6823      	ldr	r3, [r4, #0]
 800f376:	079b      	lsls	r3, r3, #30
 800f378:	f100 8105 	bmi.w	800f586 <_printf_float+0x462>
 800f37c:	68e0      	ldr	r0, [r4, #12]
 800f37e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f380:	4298      	cmp	r0, r3
 800f382:	bfb8      	it	lt
 800f384:	4618      	movlt	r0, r3
 800f386:	e730      	b.n	800f1ea <_printf_float+0xc6>
 800f388:	2301      	movs	r3, #1
 800f38a:	464a      	mov	r2, r9
 800f38c:	4631      	mov	r1, r6
 800f38e:	4628      	mov	r0, r5
 800f390:	47b8      	blx	r7
 800f392:	3001      	adds	r0, #1
 800f394:	f43f af27 	beq.w	800f1e6 <_printf_float+0xc2>
 800f398:	f108 0801 	add.w	r8, r8, #1
 800f39c:	e7e6      	b.n	800f36c <_printf_float+0x248>
 800f39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	dc39      	bgt.n	800f418 <_printf_float+0x2f4>
 800f3a4:	4a1b      	ldr	r2, [pc, #108]	; (800f414 <_printf_float+0x2f0>)
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	4631      	mov	r1, r6
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	47b8      	blx	r7
 800f3ae:	3001      	adds	r0, #1
 800f3b0:	f43f af19 	beq.w	800f1e6 <_printf_float+0xc2>
 800f3b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	d102      	bne.n	800f3c2 <_printf_float+0x29e>
 800f3bc:	6823      	ldr	r3, [r4, #0]
 800f3be:	07d9      	lsls	r1, r3, #31
 800f3c0:	d5d8      	bpl.n	800f374 <_printf_float+0x250>
 800f3c2:	ee18 3a10 	vmov	r3, s16
 800f3c6:	4652      	mov	r2, sl
 800f3c8:	4631      	mov	r1, r6
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	47b8      	blx	r7
 800f3ce:	3001      	adds	r0, #1
 800f3d0:	f43f af09 	beq.w	800f1e6 <_printf_float+0xc2>
 800f3d4:	f04f 0900 	mov.w	r9, #0
 800f3d8:	f104 0a1a 	add.w	sl, r4, #26
 800f3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3de:	425b      	negs	r3, r3
 800f3e0:	454b      	cmp	r3, r9
 800f3e2:	dc01      	bgt.n	800f3e8 <_printf_float+0x2c4>
 800f3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3e6:	e792      	b.n	800f30e <_printf_float+0x1ea>
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	4652      	mov	r2, sl
 800f3ec:	4631      	mov	r1, r6
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	47b8      	blx	r7
 800f3f2:	3001      	adds	r0, #1
 800f3f4:	f43f aef7 	beq.w	800f1e6 <_printf_float+0xc2>
 800f3f8:	f109 0901 	add.w	r9, r9, #1
 800f3fc:	e7ee      	b.n	800f3dc <_printf_float+0x2b8>
 800f3fe:	bf00      	nop
 800f400:	7fefffff 	.word	0x7fefffff
 800f404:	080160c8 	.word	0x080160c8
 800f408:	080160cc 	.word	0x080160cc
 800f40c:	080160d4 	.word	0x080160d4
 800f410:	080160d0 	.word	0x080160d0
 800f414:	080160d8 	.word	0x080160d8
 800f418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f41a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f41c:	429a      	cmp	r2, r3
 800f41e:	bfa8      	it	ge
 800f420:	461a      	movge	r2, r3
 800f422:	2a00      	cmp	r2, #0
 800f424:	4691      	mov	r9, r2
 800f426:	dc37      	bgt.n	800f498 <_printf_float+0x374>
 800f428:	f04f 0b00 	mov.w	fp, #0
 800f42c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f430:	f104 021a 	add.w	r2, r4, #26
 800f434:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f436:	9305      	str	r3, [sp, #20]
 800f438:	eba3 0309 	sub.w	r3, r3, r9
 800f43c:	455b      	cmp	r3, fp
 800f43e:	dc33      	bgt.n	800f4a8 <_printf_float+0x384>
 800f440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f444:	429a      	cmp	r2, r3
 800f446:	db3b      	blt.n	800f4c0 <_printf_float+0x39c>
 800f448:	6823      	ldr	r3, [r4, #0]
 800f44a:	07da      	lsls	r2, r3, #31
 800f44c:	d438      	bmi.n	800f4c0 <_printf_float+0x39c>
 800f44e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f450:	9b05      	ldr	r3, [sp, #20]
 800f452:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	eba2 0901 	sub.w	r9, r2, r1
 800f45a:	4599      	cmp	r9, r3
 800f45c:	bfa8      	it	ge
 800f45e:	4699      	movge	r9, r3
 800f460:	f1b9 0f00 	cmp.w	r9, #0
 800f464:	dc35      	bgt.n	800f4d2 <_printf_float+0x3ae>
 800f466:	f04f 0800 	mov.w	r8, #0
 800f46a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f46e:	f104 0a1a 	add.w	sl, r4, #26
 800f472:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f476:	1a9b      	subs	r3, r3, r2
 800f478:	eba3 0309 	sub.w	r3, r3, r9
 800f47c:	4543      	cmp	r3, r8
 800f47e:	f77f af79 	ble.w	800f374 <_printf_float+0x250>
 800f482:	2301      	movs	r3, #1
 800f484:	4652      	mov	r2, sl
 800f486:	4631      	mov	r1, r6
 800f488:	4628      	mov	r0, r5
 800f48a:	47b8      	blx	r7
 800f48c:	3001      	adds	r0, #1
 800f48e:	f43f aeaa 	beq.w	800f1e6 <_printf_float+0xc2>
 800f492:	f108 0801 	add.w	r8, r8, #1
 800f496:	e7ec      	b.n	800f472 <_printf_float+0x34e>
 800f498:	4613      	mov	r3, r2
 800f49a:	4631      	mov	r1, r6
 800f49c:	4642      	mov	r2, r8
 800f49e:	4628      	mov	r0, r5
 800f4a0:	47b8      	blx	r7
 800f4a2:	3001      	adds	r0, #1
 800f4a4:	d1c0      	bne.n	800f428 <_printf_float+0x304>
 800f4a6:	e69e      	b.n	800f1e6 <_printf_float+0xc2>
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	4631      	mov	r1, r6
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	9205      	str	r2, [sp, #20]
 800f4b0:	47b8      	blx	r7
 800f4b2:	3001      	adds	r0, #1
 800f4b4:	f43f ae97 	beq.w	800f1e6 <_printf_float+0xc2>
 800f4b8:	9a05      	ldr	r2, [sp, #20]
 800f4ba:	f10b 0b01 	add.w	fp, fp, #1
 800f4be:	e7b9      	b.n	800f434 <_printf_float+0x310>
 800f4c0:	ee18 3a10 	vmov	r3, s16
 800f4c4:	4652      	mov	r2, sl
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	d1be      	bne.n	800f44e <_printf_float+0x32a>
 800f4d0:	e689      	b.n	800f1e6 <_printf_float+0xc2>
 800f4d2:	9a05      	ldr	r2, [sp, #20]
 800f4d4:	464b      	mov	r3, r9
 800f4d6:	4442      	add	r2, r8
 800f4d8:	4631      	mov	r1, r6
 800f4da:	4628      	mov	r0, r5
 800f4dc:	47b8      	blx	r7
 800f4de:	3001      	adds	r0, #1
 800f4e0:	d1c1      	bne.n	800f466 <_printf_float+0x342>
 800f4e2:	e680      	b.n	800f1e6 <_printf_float+0xc2>
 800f4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4e6:	2a01      	cmp	r2, #1
 800f4e8:	dc01      	bgt.n	800f4ee <_printf_float+0x3ca>
 800f4ea:	07db      	lsls	r3, r3, #31
 800f4ec:	d538      	bpl.n	800f560 <_printf_float+0x43c>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	47b8      	blx	r7
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	f43f ae74 	beq.w	800f1e6 <_printf_float+0xc2>
 800f4fe:	ee18 3a10 	vmov	r3, s16
 800f502:	4652      	mov	r2, sl
 800f504:	4631      	mov	r1, r6
 800f506:	4628      	mov	r0, r5
 800f508:	47b8      	blx	r7
 800f50a:	3001      	adds	r0, #1
 800f50c:	f43f ae6b 	beq.w	800f1e6 <_printf_float+0xc2>
 800f510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f514:	2200      	movs	r2, #0
 800f516:	2300      	movs	r3, #0
 800f518:	f7f1 fade 	bl	8000ad8 <__aeabi_dcmpeq>
 800f51c:	b9d8      	cbnz	r0, 800f556 <_printf_float+0x432>
 800f51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f520:	f108 0201 	add.w	r2, r8, #1
 800f524:	3b01      	subs	r3, #1
 800f526:	4631      	mov	r1, r6
 800f528:	4628      	mov	r0, r5
 800f52a:	47b8      	blx	r7
 800f52c:	3001      	adds	r0, #1
 800f52e:	d10e      	bne.n	800f54e <_printf_float+0x42a>
 800f530:	e659      	b.n	800f1e6 <_printf_float+0xc2>
 800f532:	2301      	movs	r3, #1
 800f534:	4652      	mov	r2, sl
 800f536:	4631      	mov	r1, r6
 800f538:	4628      	mov	r0, r5
 800f53a:	47b8      	blx	r7
 800f53c:	3001      	adds	r0, #1
 800f53e:	f43f ae52 	beq.w	800f1e6 <_printf_float+0xc2>
 800f542:	f108 0801 	add.w	r8, r8, #1
 800f546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f548:	3b01      	subs	r3, #1
 800f54a:	4543      	cmp	r3, r8
 800f54c:	dcf1      	bgt.n	800f532 <_printf_float+0x40e>
 800f54e:	464b      	mov	r3, r9
 800f550:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f554:	e6dc      	b.n	800f310 <_printf_float+0x1ec>
 800f556:	f04f 0800 	mov.w	r8, #0
 800f55a:	f104 0a1a 	add.w	sl, r4, #26
 800f55e:	e7f2      	b.n	800f546 <_printf_float+0x422>
 800f560:	2301      	movs	r3, #1
 800f562:	4642      	mov	r2, r8
 800f564:	e7df      	b.n	800f526 <_printf_float+0x402>
 800f566:	2301      	movs	r3, #1
 800f568:	464a      	mov	r2, r9
 800f56a:	4631      	mov	r1, r6
 800f56c:	4628      	mov	r0, r5
 800f56e:	47b8      	blx	r7
 800f570:	3001      	adds	r0, #1
 800f572:	f43f ae38 	beq.w	800f1e6 <_printf_float+0xc2>
 800f576:	f108 0801 	add.w	r8, r8, #1
 800f57a:	68e3      	ldr	r3, [r4, #12]
 800f57c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f57e:	1a5b      	subs	r3, r3, r1
 800f580:	4543      	cmp	r3, r8
 800f582:	dcf0      	bgt.n	800f566 <_printf_float+0x442>
 800f584:	e6fa      	b.n	800f37c <_printf_float+0x258>
 800f586:	f04f 0800 	mov.w	r8, #0
 800f58a:	f104 0919 	add.w	r9, r4, #25
 800f58e:	e7f4      	b.n	800f57a <_printf_float+0x456>

0800f590 <_printf_common>:
 800f590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f594:	4616      	mov	r6, r2
 800f596:	4699      	mov	r9, r3
 800f598:	688a      	ldr	r2, [r1, #8]
 800f59a:	690b      	ldr	r3, [r1, #16]
 800f59c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	bfb8      	it	lt
 800f5a4:	4613      	movlt	r3, r2
 800f5a6:	6033      	str	r3, [r6, #0]
 800f5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5ac:	4607      	mov	r7, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	b10a      	cbz	r2, 800f5b6 <_printf_common+0x26>
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	6033      	str	r3, [r6, #0]
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	0699      	lsls	r1, r3, #26
 800f5ba:	bf42      	ittt	mi
 800f5bc:	6833      	ldrmi	r3, [r6, #0]
 800f5be:	3302      	addmi	r3, #2
 800f5c0:	6033      	strmi	r3, [r6, #0]
 800f5c2:	6825      	ldr	r5, [r4, #0]
 800f5c4:	f015 0506 	ands.w	r5, r5, #6
 800f5c8:	d106      	bne.n	800f5d8 <_printf_common+0x48>
 800f5ca:	f104 0a19 	add.w	sl, r4, #25
 800f5ce:	68e3      	ldr	r3, [r4, #12]
 800f5d0:	6832      	ldr	r2, [r6, #0]
 800f5d2:	1a9b      	subs	r3, r3, r2
 800f5d4:	42ab      	cmp	r3, r5
 800f5d6:	dc26      	bgt.n	800f626 <_printf_common+0x96>
 800f5d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5dc:	1e13      	subs	r3, r2, #0
 800f5de:	6822      	ldr	r2, [r4, #0]
 800f5e0:	bf18      	it	ne
 800f5e2:	2301      	movne	r3, #1
 800f5e4:	0692      	lsls	r2, r2, #26
 800f5e6:	d42b      	bmi.n	800f640 <_printf_common+0xb0>
 800f5e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5ec:	4649      	mov	r1, r9
 800f5ee:	4638      	mov	r0, r7
 800f5f0:	47c0      	blx	r8
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	d01e      	beq.n	800f634 <_printf_common+0xa4>
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	68e5      	ldr	r5, [r4, #12]
 800f5fa:	6832      	ldr	r2, [r6, #0]
 800f5fc:	f003 0306 	and.w	r3, r3, #6
 800f600:	2b04      	cmp	r3, #4
 800f602:	bf08      	it	eq
 800f604:	1aad      	subeq	r5, r5, r2
 800f606:	68a3      	ldr	r3, [r4, #8]
 800f608:	6922      	ldr	r2, [r4, #16]
 800f60a:	bf0c      	ite	eq
 800f60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f610:	2500      	movne	r5, #0
 800f612:	4293      	cmp	r3, r2
 800f614:	bfc4      	itt	gt
 800f616:	1a9b      	subgt	r3, r3, r2
 800f618:	18ed      	addgt	r5, r5, r3
 800f61a:	2600      	movs	r6, #0
 800f61c:	341a      	adds	r4, #26
 800f61e:	42b5      	cmp	r5, r6
 800f620:	d11a      	bne.n	800f658 <_printf_common+0xc8>
 800f622:	2000      	movs	r0, #0
 800f624:	e008      	b.n	800f638 <_printf_common+0xa8>
 800f626:	2301      	movs	r3, #1
 800f628:	4652      	mov	r2, sl
 800f62a:	4649      	mov	r1, r9
 800f62c:	4638      	mov	r0, r7
 800f62e:	47c0      	blx	r8
 800f630:	3001      	adds	r0, #1
 800f632:	d103      	bne.n	800f63c <_printf_common+0xac>
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f63c:	3501      	adds	r5, #1
 800f63e:	e7c6      	b.n	800f5ce <_printf_common+0x3e>
 800f640:	18e1      	adds	r1, r4, r3
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	2030      	movs	r0, #48	; 0x30
 800f646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f64a:	4422      	add	r2, r4
 800f64c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f654:	3302      	adds	r3, #2
 800f656:	e7c7      	b.n	800f5e8 <_printf_common+0x58>
 800f658:	2301      	movs	r3, #1
 800f65a:	4622      	mov	r2, r4
 800f65c:	4649      	mov	r1, r9
 800f65e:	4638      	mov	r0, r7
 800f660:	47c0      	blx	r8
 800f662:	3001      	adds	r0, #1
 800f664:	d0e6      	beq.n	800f634 <_printf_common+0xa4>
 800f666:	3601      	adds	r6, #1
 800f668:	e7d9      	b.n	800f61e <_printf_common+0x8e>
	...

0800f66c <_printf_i>:
 800f66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f670:	460c      	mov	r4, r1
 800f672:	4691      	mov	r9, r2
 800f674:	7e27      	ldrb	r7, [r4, #24]
 800f676:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f678:	2f78      	cmp	r7, #120	; 0x78
 800f67a:	4680      	mov	r8, r0
 800f67c:	469a      	mov	sl, r3
 800f67e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f682:	d807      	bhi.n	800f694 <_printf_i+0x28>
 800f684:	2f62      	cmp	r7, #98	; 0x62
 800f686:	d80a      	bhi.n	800f69e <_printf_i+0x32>
 800f688:	2f00      	cmp	r7, #0
 800f68a:	f000 80d8 	beq.w	800f83e <_printf_i+0x1d2>
 800f68e:	2f58      	cmp	r7, #88	; 0x58
 800f690:	f000 80a3 	beq.w	800f7da <_printf_i+0x16e>
 800f694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f69c:	e03a      	b.n	800f714 <_printf_i+0xa8>
 800f69e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6a2:	2b15      	cmp	r3, #21
 800f6a4:	d8f6      	bhi.n	800f694 <_printf_i+0x28>
 800f6a6:	a001      	add	r0, pc, #4	; (adr r0, 800f6ac <_printf_i+0x40>)
 800f6a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f6ac:	0800f705 	.word	0x0800f705
 800f6b0:	0800f719 	.word	0x0800f719
 800f6b4:	0800f695 	.word	0x0800f695
 800f6b8:	0800f695 	.word	0x0800f695
 800f6bc:	0800f695 	.word	0x0800f695
 800f6c0:	0800f695 	.word	0x0800f695
 800f6c4:	0800f719 	.word	0x0800f719
 800f6c8:	0800f695 	.word	0x0800f695
 800f6cc:	0800f695 	.word	0x0800f695
 800f6d0:	0800f695 	.word	0x0800f695
 800f6d4:	0800f695 	.word	0x0800f695
 800f6d8:	0800f825 	.word	0x0800f825
 800f6dc:	0800f749 	.word	0x0800f749
 800f6e0:	0800f807 	.word	0x0800f807
 800f6e4:	0800f695 	.word	0x0800f695
 800f6e8:	0800f695 	.word	0x0800f695
 800f6ec:	0800f847 	.word	0x0800f847
 800f6f0:	0800f695 	.word	0x0800f695
 800f6f4:	0800f749 	.word	0x0800f749
 800f6f8:	0800f695 	.word	0x0800f695
 800f6fc:	0800f695 	.word	0x0800f695
 800f700:	0800f80f 	.word	0x0800f80f
 800f704:	680b      	ldr	r3, [r1, #0]
 800f706:	1d1a      	adds	r2, r3, #4
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	600a      	str	r2, [r1, #0]
 800f70c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f714:	2301      	movs	r3, #1
 800f716:	e0a3      	b.n	800f860 <_printf_i+0x1f4>
 800f718:	6825      	ldr	r5, [r4, #0]
 800f71a:	6808      	ldr	r0, [r1, #0]
 800f71c:	062e      	lsls	r6, r5, #24
 800f71e:	f100 0304 	add.w	r3, r0, #4
 800f722:	d50a      	bpl.n	800f73a <_printf_i+0xce>
 800f724:	6805      	ldr	r5, [r0, #0]
 800f726:	600b      	str	r3, [r1, #0]
 800f728:	2d00      	cmp	r5, #0
 800f72a:	da03      	bge.n	800f734 <_printf_i+0xc8>
 800f72c:	232d      	movs	r3, #45	; 0x2d
 800f72e:	426d      	negs	r5, r5
 800f730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f734:	485e      	ldr	r0, [pc, #376]	; (800f8b0 <_printf_i+0x244>)
 800f736:	230a      	movs	r3, #10
 800f738:	e019      	b.n	800f76e <_printf_i+0x102>
 800f73a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f73e:	6805      	ldr	r5, [r0, #0]
 800f740:	600b      	str	r3, [r1, #0]
 800f742:	bf18      	it	ne
 800f744:	b22d      	sxthne	r5, r5
 800f746:	e7ef      	b.n	800f728 <_printf_i+0xbc>
 800f748:	680b      	ldr	r3, [r1, #0]
 800f74a:	6825      	ldr	r5, [r4, #0]
 800f74c:	1d18      	adds	r0, r3, #4
 800f74e:	6008      	str	r0, [r1, #0]
 800f750:	0628      	lsls	r0, r5, #24
 800f752:	d501      	bpl.n	800f758 <_printf_i+0xec>
 800f754:	681d      	ldr	r5, [r3, #0]
 800f756:	e002      	b.n	800f75e <_printf_i+0xf2>
 800f758:	0669      	lsls	r1, r5, #25
 800f75a:	d5fb      	bpl.n	800f754 <_printf_i+0xe8>
 800f75c:	881d      	ldrh	r5, [r3, #0]
 800f75e:	4854      	ldr	r0, [pc, #336]	; (800f8b0 <_printf_i+0x244>)
 800f760:	2f6f      	cmp	r7, #111	; 0x6f
 800f762:	bf0c      	ite	eq
 800f764:	2308      	moveq	r3, #8
 800f766:	230a      	movne	r3, #10
 800f768:	2100      	movs	r1, #0
 800f76a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f76e:	6866      	ldr	r6, [r4, #4]
 800f770:	60a6      	str	r6, [r4, #8]
 800f772:	2e00      	cmp	r6, #0
 800f774:	bfa2      	ittt	ge
 800f776:	6821      	ldrge	r1, [r4, #0]
 800f778:	f021 0104 	bicge.w	r1, r1, #4
 800f77c:	6021      	strge	r1, [r4, #0]
 800f77e:	b90d      	cbnz	r5, 800f784 <_printf_i+0x118>
 800f780:	2e00      	cmp	r6, #0
 800f782:	d04d      	beq.n	800f820 <_printf_i+0x1b4>
 800f784:	4616      	mov	r6, r2
 800f786:	fbb5 f1f3 	udiv	r1, r5, r3
 800f78a:	fb03 5711 	mls	r7, r3, r1, r5
 800f78e:	5dc7      	ldrb	r7, [r0, r7]
 800f790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f794:	462f      	mov	r7, r5
 800f796:	42bb      	cmp	r3, r7
 800f798:	460d      	mov	r5, r1
 800f79a:	d9f4      	bls.n	800f786 <_printf_i+0x11a>
 800f79c:	2b08      	cmp	r3, #8
 800f79e:	d10b      	bne.n	800f7b8 <_printf_i+0x14c>
 800f7a0:	6823      	ldr	r3, [r4, #0]
 800f7a2:	07df      	lsls	r7, r3, #31
 800f7a4:	d508      	bpl.n	800f7b8 <_printf_i+0x14c>
 800f7a6:	6923      	ldr	r3, [r4, #16]
 800f7a8:	6861      	ldr	r1, [r4, #4]
 800f7aa:	4299      	cmp	r1, r3
 800f7ac:	bfde      	ittt	le
 800f7ae:	2330      	movle	r3, #48	; 0x30
 800f7b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f7b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f7b8:	1b92      	subs	r2, r2, r6
 800f7ba:	6122      	str	r2, [r4, #16]
 800f7bc:	f8cd a000 	str.w	sl, [sp]
 800f7c0:	464b      	mov	r3, r9
 800f7c2:	aa03      	add	r2, sp, #12
 800f7c4:	4621      	mov	r1, r4
 800f7c6:	4640      	mov	r0, r8
 800f7c8:	f7ff fee2 	bl	800f590 <_printf_common>
 800f7cc:	3001      	adds	r0, #1
 800f7ce:	d14c      	bne.n	800f86a <_printf_i+0x1fe>
 800f7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d4:	b004      	add	sp, #16
 800f7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7da:	4835      	ldr	r0, [pc, #212]	; (800f8b0 <_printf_i+0x244>)
 800f7dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	680e      	ldr	r6, [r1, #0]
 800f7e4:	061f      	lsls	r7, r3, #24
 800f7e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f7ea:	600e      	str	r6, [r1, #0]
 800f7ec:	d514      	bpl.n	800f818 <_printf_i+0x1ac>
 800f7ee:	07d9      	lsls	r1, r3, #31
 800f7f0:	bf44      	itt	mi
 800f7f2:	f043 0320 	orrmi.w	r3, r3, #32
 800f7f6:	6023      	strmi	r3, [r4, #0]
 800f7f8:	b91d      	cbnz	r5, 800f802 <_printf_i+0x196>
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	f023 0320 	bic.w	r3, r3, #32
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	2310      	movs	r3, #16
 800f804:	e7b0      	b.n	800f768 <_printf_i+0xfc>
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	f043 0320 	orr.w	r3, r3, #32
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	2378      	movs	r3, #120	; 0x78
 800f810:	4828      	ldr	r0, [pc, #160]	; (800f8b4 <_printf_i+0x248>)
 800f812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f816:	e7e3      	b.n	800f7e0 <_printf_i+0x174>
 800f818:	065e      	lsls	r6, r3, #25
 800f81a:	bf48      	it	mi
 800f81c:	b2ad      	uxthmi	r5, r5
 800f81e:	e7e6      	b.n	800f7ee <_printf_i+0x182>
 800f820:	4616      	mov	r6, r2
 800f822:	e7bb      	b.n	800f79c <_printf_i+0x130>
 800f824:	680b      	ldr	r3, [r1, #0]
 800f826:	6826      	ldr	r6, [r4, #0]
 800f828:	6960      	ldr	r0, [r4, #20]
 800f82a:	1d1d      	adds	r5, r3, #4
 800f82c:	600d      	str	r5, [r1, #0]
 800f82e:	0635      	lsls	r5, r6, #24
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	d501      	bpl.n	800f838 <_printf_i+0x1cc>
 800f834:	6018      	str	r0, [r3, #0]
 800f836:	e002      	b.n	800f83e <_printf_i+0x1d2>
 800f838:	0671      	lsls	r1, r6, #25
 800f83a:	d5fb      	bpl.n	800f834 <_printf_i+0x1c8>
 800f83c:	8018      	strh	r0, [r3, #0]
 800f83e:	2300      	movs	r3, #0
 800f840:	6123      	str	r3, [r4, #16]
 800f842:	4616      	mov	r6, r2
 800f844:	e7ba      	b.n	800f7bc <_printf_i+0x150>
 800f846:	680b      	ldr	r3, [r1, #0]
 800f848:	1d1a      	adds	r2, r3, #4
 800f84a:	600a      	str	r2, [r1, #0]
 800f84c:	681e      	ldr	r6, [r3, #0]
 800f84e:	6862      	ldr	r2, [r4, #4]
 800f850:	2100      	movs	r1, #0
 800f852:	4630      	mov	r0, r6
 800f854:	f7f0 fccc 	bl	80001f0 <memchr>
 800f858:	b108      	cbz	r0, 800f85e <_printf_i+0x1f2>
 800f85a:	1b80      	subs	r0, r0, r6
 800f85c:	6060      	str	r0, [r4, #4]
 800f85e:	6863      	ldr	r3, [r4, #4]
 800f860:	6123      	str	r3, [r4, #16]
 800f862:	2300      	movs	r3, #0
 800f864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f868:	e7a8      	b.n	800f7bc <_printf_i+0x150>
 800f86a:	6923      	ldr	r3, [r4, #16]
 800f86c:	4632      	mov	r2, r6
 800f86e:	4649      	mov	r1, r9
 800f870:	4640      	mov	r0, r8
 800f872:	47d0      	blx	sl
 800f874:	3001      	adds	r0, #1
 800f876:	d0ab      	beq.n	800f7d0 <_printf_i+0x164>
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	079b      	lsls	r3, r3, #30
 800f87c:	d413      	bmi.n	800f8a6 <_printf_i+0x23a>
 800f87e:	68e0      	ldr	r0, [r4, #12]
 800f880:	9b03      	ldr	r3, [sp, #12]
 800f882:	4298      	cmp	r0, r3
 800f884:	bfb8      	it	lt
 800f886:	4618      	movlt	r0, r3
 800f888:	e7a4      	b.n	800f7d4 <_printf_i+0x168>
 800f88a:	2301      	movs	r3, #1
 800f88c:	4632      	mov	r2, r6
 800f88e:	4649      	mov	r1, r9
 800f890:	4640      	mov	r0, r8
 800f892:	47d0      	blx	sl
 800f894:	3001      	adds	r0, #1
 800f896:	d09b      	beq.n	800f7d0 <_printf_i+0x164>
 800f898:	3501      	adds	r5, #1
 800f89a:	68e3      	ldr	r3, [r4, #12]
 800f89c:	9903      	ldr	r1, [sp, #12]
 800f89e:	1a5b      	subs	r3, r3, r1
 800f8a0:	42ab      	cmp	r3, r5
 800f8a2:	dcf2      	bgt.n	800f88a <_printf_i+0x21e>
 800f8a4:	e7eb      	b.n	800f87e <_printf_i+0x212>
 800f8a6:	2500      	movs	r5, #0
 800f8a8:	f104 0619 	add.w	r6, r4, #25
 800f8ac:	e7f5      	b.n	800f89a <_printf_i+0x22e>
 800f8ae:	bf00      	nop
 800f8b0:	080160da 	.word	0x080160da
 800f8b4:	080160eb 	.word	0x080160eb

0800f8b8 <siprintf>:
 800f8b8:	b40e      	push	{r1, r2, r3}
 800f8ba:	b500      	push	{lr}
 800f8bc:	b09c      	sub	sp, #112	; 0x70
 800f8be:	ab1d      	add	r3, sp, #116	; 0x74
 800f8c0:	9002      	str	r0, [sp, #8]
 800f8c2:	9006      	str	r0, [sp, #24]
 800f8c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f8c8:	4809      	ldr	r0, [pc, #36]	; (800f8f0 <siprintf+0x38>)
 800f8ca:	9107      	str	r1, [sp, #28]
 800f8cc:	9104      	str	r1, [sp, #16]
 800f8ce:	4909      	ldr	r1, [pc, #36]	; (800f8f4 <siprintf+0x3c>)
 800f8d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8d4:	9105      	str	r1, [sp, #20]
 800f8d6:	6800      	ldr	r0, [r0, #0]
 800f8d8:	9301      	str	r3, [sp, #4]
 800f8da:	a902      	add	r1, sp, #8
 800f8dc:	f002 ff4c 	bl	8012778 <_svfiprintf_r>
 800f8e0:	9b02      	ldr	r3, [sp, #8]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	701a      	strb	r2, [r3, #0]
 800f8e6:	b01c      	add	sp, #112	; 0x70
 800f8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8ec:	b003      	add	sp, #12
 800f8ee:	4770      	bx	lr
 800f8f0:	20000028 	.word	0x20000028
 800f8f4:	ffff0208 	.word	0xffff0208

0800f8f8 <strcat>:
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	7814      	ldrb	r4, [r2, #0]
 800f8fe:	4613      	mov	r3, r2
 800f900:	3201      	adds	r2, #1
 800f902:	2c00      	cmp	r4, #0
 800f904:	d1fa      	bne.n	800f8fc <strcat+0x4>
 800f906:	3b01      	subs	r3, #1
 800f908:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f90c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f910:	2a00      	cmp	r2, #0
 800f912:	d1f9      	bne.n	800f908 <strcat+0x10>
 800f914:	bd10      	pop	{r4, pc}

0800f916 <strchr>:
 800f916:	b2c9      	uxtb	r1, r1
 800f918:	4603      	mov	r3, r0
 800f91a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f91e:	b11a      	cbz	r2, 800f928 <strchr+0x12>
 800f920:	428a      	cmp	r2, r1
 800f922:	d1f9      	bne.n	800f918 <strchr+0x2>
 800f924:	4618      	mov	r0, r3
 800f926:	4770      	bx	lr
 800f928:	2900      	cmp	r1, #0
 800f92a:	bf18      	it	ne
 800f92c:	2300      	movne	r3, #0
 800f92e:	e7f9      	b.n	800f924 <strchr+0xe>

0800f930 <strcpy>:
 800f930:	4603      	mov	r3, r0
 800f932:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f936:	f803 2b01 	strb.w	r2, [r3], #1
 800f93a:	2a00      	cmp	r2, #0
 800f93c:	d1f9      	bne.n	800f932 <strcpy+0x2>
 800f93e:	4770      	bx	lr

0800f940 <strdup>:
 800f940:	4b02      	ldr	r3, [pc, #8]	; (800f94c <strdup+0xc>)
 800f942:	4601      	mov	r1, r0
 800f944:	6818      	ldr	r0, [r3, #0]
 800f946:	f000 b803 	b.w	800f950 <_strdup_r>
 800f94a:	bf00      	nop
 800f94c:	20000028 	.word	0x20000028

0800f950 <_strdup_r>:
 800f950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f952:	4604      	mov	r4, r0
 800f954:	4608      	mov	r0, r1
 800f956:	460d      	mov	r5, r1
 800f958:	f7f0 fc42 	bl	80001e0 <strlen>
 800f95c:	1c42      	adds	r2, r0, #1
 800f95e:	4611      	mov	r1, r2
 800f960:	4620      	mov	r0, r4
 800f962:	9201      	str	r2, [sp, #4]
 800f964:	f002 fe52 	bl	801260c <_malloc_r>
 800f968:	4604      	mov	r4, r0
 800f96a:	b118      	cbz	r0, 800f974 <_strdup_r+0x24>
 800f96c:	9a01      	ldr	r2, [sp, #4]
 800f96e:	4629      	mov	r1, r5
 800f970:	f7ff fb22 	bl	800efb8 <memcpy>
 800f974:	4620      	mov	r0, r4
 800f976:	b003      	add	sp, #12
 800f978:	bd30      	pop	{r4, r5, pc}

0800f97a <strncpy>:
 800f97a:	b510      	push	{r4, lr}
 800f97c:	3901      	subs	r1, #1
 800f97e:	4603      	mov	r3, r0
 800f980:	b132      	cbz	r2, 800f990 <strncpy+0x16>
 800f982:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f986:	f803 4b01 	strb.w	r4, [r3], #1
 800f98a:	3a01      	subs	r2, #1
 800f98c:	2c00      	cmp	r4, #0
 800f98e:	d1f7      	bne.n	800f980 <strncpy+0x6>
 800f990:	441a      	add	r2, r3
 800f992:	2100      	movs	r1, #0
 800f994:	4293      	cmp	r3, r2
 800f996:	d100      	bne.n	800f99a <strncpy+0x20>
 800f998:	bd10      	pop	{r4, pc}
 800f99a:	f803 1b01 	strb.w	r1, [r3], #1
 800f99e:	e7f9      	b.n	800f994 <strncpy+0x1a>

0800f9a0 <strsep>:
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	6800      	ldr	r0, [r0, #0]
 800f9a6:	f000 be7d 	b.w	80106a4 <__strtok_r>

0800f9aa <strstr>:
 800f9aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ac:	780c      	ldrb	r4, [r1, #0]
 800f9ae:	b164      	cbz	r4, 800f9ca <strstr+0x20>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	781a      	ldrb	r2, [r3, #0]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	1c5e      	adds	r6, r3, #1
 800f9b8:	b90a      	cbnz	r2, 800f9be <strstr+0x14>
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	e005      	b.n	800f9ca <strstr+0x20>
 800f9be:	4294      	cmp	r4, r2
 800f9c0:	d108      	bne.n	800f9d4 <strstr+0x2a>
 800f9c2:	460d      	mov	r5, r1
 800f9c4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800f9c8:	b902      	cbnz	r2, 800f9cc <strstr+0x22>
 800f9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9cc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800f9d0:	4297      	cmp	r7, r2
 800f9d2:	d0f7      	beq.n	800f9c4 <strstr+0x1a>
 800f9d4:	4633      	mov	r3, r6
 800f9d6:	e7ec      	b.n	800f9b2 <strstr+0x8>

0800f9d8 <sulp>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	4604      	mov	r4, r0
 800f9dc:	460d      	mov	r5, r1
 800f9de:	ec45 4b10 	vmov	d0, r4, r5
 800f9e2:	4616      	mov	r6, r2
 800f9e4:	f002 fc64 	bl	80122b0 <__ulp>
 800f9e8:	ec51 0b10 	vmov	r0, r1, d0
 800f9ec:	b17e      	cbz	r6, 800fa0e <sulp+0x36>
 800f9ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f9f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	dd09      	ble.n	800fa0e <sulp+0x36>
 800f9fa:	051b      	lsls	r3, r3, #20
 800f9fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fa00:	2400      	movs	r4, #0
 800fa02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fa06:	4622      	mov	r2, r4
 800fa08:	462b      	mov	r3, r5
 800fa0a:	f7f0 fdfd 	bl	8000608 <__aeabi_dmul>
 800fa0e:	bd70      	pop	{r4, r5, r6, pc}

0800fa10 <_strtod_l>:
 800fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa14:	b0a3      	sub	sp, #140	; 0x8c
 800fa16:	461f      	mov	r7, r3
 800fa18:	2300      	movs	r3, #0
 800fa1a:	931e      	str	r3, [sp, #120]	; 0x78
 800fa1c:	4ba4      	ldr	r3, [pc, #656]	; (800fcb0 <_strtod_l+0x2a0>)
 800fa1e:	9219      	str	r2, [sp, #100]	; 0x64
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	9307      	str	r3, [sp, #28]
 800fa24:	4604      	mov	r4, r0
 800fa26:	4618      	mov	r0, r3
 800fa28:	4688      	mov	r8, r1
 800fa2a:	f7f0 fbd9 	bl	80001e0 <strlen>
 800fa2e:	f04f 0a00 	mov.w	sl, #0
 800fa32:	4605      	mov	r5, r0
 800fa34:	f04f 0b00 	mov.w	fp, #0
 800fa38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fa3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa3e:	781a      	ldrb	r2, [r3, #0]
 800fa40:	2a2b      	cmp	r2, #43	; 0x2b
 800fa42:	d04c      	beq.n	800fade <_strtod_l+0xce>
 800fa44:	d839      	bhi.n	800faba <_strtod_l+0xaa>
 800fa46:	2a0d      	cmp	r2, #13
 800fa48:	d832      	bhi.n	800fab0 <_strtod_l+0xa0>
 800fa4a:	2a08      	cmp	r2, #8
 800fa4c:	d832      	bhi.n	800fab4 <_strtod_l+0xa4>
 800fa4e:	2a00      	cmp	r2, #0
 800fa50:	d03c      	beq.n	800facc <_strtod_l+0xbc>
 800fa52:	2300      	movs	r3, #0
 800fa54:	930e      	str	r3, [sp, #56]	; 0x38
 800fa56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fa58:	7833      	ldrb	r3, [r6, #0]
 800fa5a:	2b30      	cmp	r3, #48	; 0x30
 800fa5c:	f040 80b4 	bne.w	800fbc8 <_strtod_l+0x1b8>
 800fa60:	7873      	ldrb	r3, [r6, #1]
 800fa62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa66:	2b58      	cmp	r3, #88	; 0x58
 800fa68:	d16c      	bne.n	800fb44 <_strtod_l+0x134>
 800fa6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa6c:	9301      	str	r3, [sp, #4]
 800fa6e:	ab1e      	add	r3, sp, #120	; 0x78
 800fa70:	9702      	str	r7, [sp, #8]
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	4a8f      	ldr	r2, [pc, #572]	; (800fcb4 <_strtod_l+0x2a4>)
 800fa76:	ab1f      	add	r3, sp, #124	; 0x7c
 800fa78:	a91d      	add	r1, sp, #116	; 0x74
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f001 fd86 	bl	801158c <__gethex>
 800fa80:	f010 0707 	ands.w	r7, r0, #7
 800fa84:	4605      	mov	r5, r0
 800fa86:	d005      	beq.n	800fa94 <_strtod_l+0x84>
 800fa88:	2f06      	cmp	r7, #6
 800fa8a:	d12a      	bne.n	800fae2 <_strtod_l+0xd2>
 800fa8c:	3601      	adds	r6, #1
 800fa8e:	2300      	movs	r3, #0
 800fa90:	961d      	str	r6, [sp, #116]	; 0x74
 800fa92:	930e      	str	r3, [sp, #56]	; 0x38
 800fa94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f040 8596 	bne.w	80105c8 <_strtod_l+0xbb8>
 800fa9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa9e:	b1db      	cbz	r3, 800fad8 <_strtod_l+0xc8>
 800faa0:	4652      	mov	r2, sl
 800faa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800faa6:	ec43 2b10 	vmov	d0, r2, r3
 800faaa:	b023      	add	sp, #140	; 0x8c
 800faac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab0:	2a20      	cmp	r2, #32
 800fab2:	d1ce      	bne.n	800fa52 <_strtod_l+0x42>
 800fab4:	3301      	adds	r3, #1
 800fab6:	931d      	str	r3, [sp, #116]	; 0x74
 800fab8:	e7c0      	b.n	800fa3c <_strtod_l+0x2c>
 800faba:	2a2d      	cmp	r2, #45	; 0x2d
 800fabc:	d1c9      	bne.n	800fa52 <_strtod_l+0x42>
 800fabe:	2201      	movs	r2, #1
 800fac0:	920e      	str	r2, [sp, #56]	; 0x38
 800fac2:	1c5a      	adds	r2, r3, #1
 800fac4:	921d      	str	r2, [sp, #116]	; 0x74
 800fac6:	785b      	ldrb	r3, [r3, #1]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d1c4      	bne.n	800fa56 <_strtod_l+0x46>
 800facc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800face:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	f040 8576 	bne.w	80105c4 <_strtod_l+0xbb4>
 800fad8:	4652      	mov	r2, sl
 800fada:	465b      	mov	r3, fp
 800fadc:	e7e3      	b.n	800faa6 <_strtod_l+0x96>
 800fade:	2200      	movs	r2, #0
 800fae0:	e7ee      	b.n	800fac0 <_strtod_l+0xb0>
 800fae2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fae4:	b13a      	cbz	r2, 800faf6 <_strtod_l+0xe6>
 800fae6:	2135      	movs	r1, #53	; 0x35
 800fae8:	a820      	add	r0, sp, #128	; 0x80
 800faea:	f002 fcec 	bl	80124c6 <__copybits>
 800faee:	991e      	ldr	r1, [sp, #120]	; 0x78
 800faf0:	4620      	mov	r0, r4
 800faf2:	f002 f8b1 	bl	8011c58 <_Bfree>
 800faf6:	3f01      	subs	r7, #1
 800faf8:	2f05      	cmp	r7, #5
 800fafa:	d807      	bhi.n	800fb0c <_strtod_l+0xfc>
 800fafc:	e8df f007 	tbb	[pc, r7]
 800fb00:	1d180b0e 	.word	0x1d180b0e
 800fb04:	030e      	.short	0x030e
 800fb06:	f04f 0b00 	mov.w	fp, #0
 800fb0a:	46da      	mov	sl, fp
 800fb0c:	0728      	lsls	r0, r5, #28
 800fb0e:	d5c1      	bpl.n	800fa94 <_strtod_l+0x84>
 800fb10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fb14:	e7be      	b.n	800fa94 <_strtod_l+0x84>
 800fb16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800fb1a:	e7f7      	b.n	800fb0c <_strtod_l+0xfc>
 800fb1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800fb20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800fb22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fb26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fb2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fb2e:	e7ed      	b.n	800fb0c <_strtod_l+0xfc>
 800fb30:	f8df b184 	ldr.w	fp, [pc, #388]	; 800fcb8 <_strtod_l+0x2a8>
 800fb34:	f04f 0a00 	mov.w	sl, #0
 800fb38:	e7e8      	b.n	800fb0c <_strtod_l+0xfc>
 800fb3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fb3e:	f04f 3aff 	mov.w	sl, #4294967295
 800fb42:	e7e3      	b.n	800fb0c <_strtod_l+0xfc>
 800fb44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	921d      	str	r2, [sp, #116]	; 0x74
 800fb4a:	785b      	ldrb	r3, [r3, #1]
 800fb4c:	2b30      	cmp	r3, #48	; 0x30
 800fb4e:	d0f9      	beq.n	800fb44 <_strtod_l+0x134>
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d09f      	beq.n	800fa94 <_strtod_l+0x84>
 800fb54:	2301      	movs	r3, #1
 800fb56:	f04f 0900 	mov.w	r9, #0
 800fb5a:	9304      	str	r3, [sp, #16]
 800fb5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb5e:	930a      	str	r3, [sp, #40]	; 0x28
 800fb60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fb64:	464f      	mov	r7, r9
 800fb66:	220a      	movs	r2, #10
 800fb68:	981d      	ldr	r0, [sp, #116]	; 0x74
 800fb6a:	7806      	ldrb	r6, [r0, #0]
 800fb6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb70:	b2d9      	uxtb	r1, r3
 800fb72:	2909      	cmp	r1, #9
 800fb74:	d92a      	bls.n	800fbcc <_strtod_l+0x1bc>
 800fb76:	9907      	ldr	r1, [sp, #28]
 800fb78:	462a      	mov	r2, r5
 800fb7a:	f003 f871 	bl	8012c60 <strncmp>
 800fb7e:	b398      	cbz	r0, 800fbe8 <_strtod_l+0x1d8>
 800fb80:	2000      	movs	r0, #0
 800fb82:	4633      	mov	r3, r6
 800fb84:	463d      	mov	r5, r7
 800fb86:	9007      	str	r0, [sp, #28]
 800fb88:	4602      	mov	r2, r0
 800fb8a:	2b65      	cmp	r3, #101	; 0x65
 800fb8c:	d001      	beq.n	800fb92 <_strtod_l+0x182>
 800fb8e:	2b45      	cmp	r3, #69	; 0x45
 800fb90:	d118      	bne.n	800fbc4 <_strtod_l+0x1b4>
 800fb92:	b91d      	cbnz	r5, 800fb9c <_strtod_l+0x18c>
 800fb94:	9b04      	ldr	r3, [sp, #16]
 800fb96:	4303      	orrs	r3, r0
 800fb98:	d098      	beq.n	800facc <_strtod_l+0xbc>
 800fb9a:	2500      	movs	r5, #0
 800fb9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800fba0:	f108 0301 	add.w	r3, r8, #1
 800fba4:	931d      	str	r3, [sp, #116]	; 0x74
 800fba6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fbaa:	2b2b      	cmp	r3, #43	; 0x2b
 800fbac:	d075      	beq.n	800fc9a <_strtod_l+0x28a>
 800fbae:	2b2d      	cmp	r3, #45	; 0x2d
 800fbb0:	d07b      	beq.n	800fcaa <_strtod_l+0x29a>
 800fbb2:	f04f 0c00 	mov.w	ip, #0
 800fbb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fbba:	2909      	cmp	r1, #9
 800fbbc:	f240 8082 	bls.w	800fcc4 <_strtod_l+0x2b4>
 800fbc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fbc4:	2600      	movs	r6, #0
 800fbc6:	e09d      	b.n	800fd04 <_strtod_l+0x2f4>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	e7c4      	b.n	800fb56 <_strtod_l+0x146>
 800fbcc:	2f08      	cmp	r7, #8
 800fbce:	bfd8      	it	le
 800fbd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fbd2:	f100 0001 	add.w	r0, r0, #1
 800fbd6:	bfda      	itte	le
 800fbd8:	fb02 3301 	mlale	r3, r2, r1, r3
 800fbdc:	9309      	strle	r3, [sp, #36]	; 0x24
 800fbde:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fbe2:	3701      	adds	r7, #1
 800fbe4:	901d      	str	r0, [sp, #116]	; 0x74
 800fbe6:	e7bf      	b.n	800fb68 <_strtod_l+0x158>
 800fbe8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbea:	195a      	adds	r2, r3, r5
 800fbec:	921d      	str	r2, [sp, #116]	; 0x74
 800fbee:	5d5b      	ldrb	r3, [r3, r5]
 800fbf0:	2f00      	cmp	r7, #0
 800fbf2:	d037      	beq.n	800fc64 <_strtod_l+0x254>
 800fbf4:	9007      	str	r0, [sp, #28]
 800fbf6:	463d      	mov	r5, r7
 800fbf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fbfc:	2a09      	cmp	r2, #9
 800fbfe:	d912      	bls.n	800fc26 <_strtod_l+0x216>
 800fc00:	2201      	movs	r2, #1
 800fc02:	e7c2      	b.n	800fb8a <_strtod_l+0x17a>
 800fc04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc06:	1c5a      	adds	r2, r3, #1
 800fc08:	921d      	str	r2, [sp, #116]	; 0x74
 800fc0a:	785b      	ldrb	r3, [r3, #1]
 800fc0c:	3001      	adds	r0, #1
 800fc0e:	2b30      	cmp	r3, #48	; 0x30
 800fc10:	d0f8      	beq.n	800fc04 <_strtod_l+0x1f4>
 800fc12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fc16:	2a08      	cmp	r2, #8
 800fc18:	f200 84db 	bhi.w	80105d2 <_strtod_l+0xbc2>
 800fc1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fc1e:	9007      	str	r0, [sp, #28]
 800fc20:	2000      	movs	r0, #0
 800fc22:	920a      	str	r2, [sp, #40]	; 0x28
 800fc24:	4605      	mov	r5, r0
 800fc26:	3b30      	subs	r3, #48	; 0x30
 800fc28:	f100 0201 	add.w	r2, r0, #1
 800fc2c:	d014      	beq.n	800fc58 <_strtod_l+0x248>
 800fc2e:	9907      	ldr	r1, [sp, #28]
 800fc30:	4411      	add	r1, r2
 800fc32:	9107      	str	r1, [sp, #28]
 800fc34:	462a      	mov	r2, r5
 800fc36:	eb00 0e05 	add.w	lr, r0, r5
 800fc3a:	210a      	movs	r1, #10
 800fc3c:	4572      	cmp	r2, lr
 800fc3e:	d113      	bne.n	800fc68 <_strtod_l+0x258>
 800fc40:	182a      	adds	r2, r5, r0
 800fc42:	2a08      	cmp	r2, #8
 800fc44:	f105 0501 	add.w	r5, r5, #1
 800fc48:	4405      	add	r5, r0
 800fc4a:	dc1c      	bgt.n	800fc86 <_strtod_l+0x276>
 800fc4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc4e:	220a      	movs	r2, #10
 800fc50:	fb02 3301 	mla	r3, r2, r1, r3
 800fc54:	9309      	str	r3, [sp, #36]	; 0x24
 800fc56:	2200      	movs	r2, #0
 800fc58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc5a:	1c59      	adds	r1, r3, #1
 800fc5c:	911d      	str	r1, [sp, #116]	; 0x74
 800fc5e:	785b      	ldrb	r3, [r3, #1]
 800fc60:	4610      	mov	r0, r2
 800fc62:	e7c9      	b.n	800fbf8 <_strtod_l+0x1e8>
 800fc64:	4638      	mov	r0, r7
 800fc66:	e7d2      	b.n	800fc0e <_strtod_l+0x1fe>
 800fc68:	2a08      	cmp	r2, #8
 800fc6a:	dc04      	bgt.n	800fc76 <_strtod_l+0x266>
 800fc6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fc6e:	434e      	muls	r6, r1
 800fc70:	9609      	str	r6, [sp, #36]	; 0x24
 800fc72:	3201      	adds	r2, #1
 800fc74:	e7e2      	b.n	800fc3c <_strtod_l+0x22c>
 800fc76:	f102 0c01 	add.w	ip, r2, #1
 800fc7a:	f1bc 0f10 	cmp.w	ip, #16
 800fc7e:	bfd8      	it	le
 800fc80:	fb01 f909 	mulle.w	r9, r1, r9
 800fc84:	e7f5      	b.n	800fc72 <_strtod_l+0x262>
 800fc86:	2d10      	cmp	r5, #16
 800fc88:	bfdc      	itt	le
 800fc8a:	220a      	movle	r2, #10
 800fc8c:	fb02 3909 	mlale	r9, r2, r9, r3
 800fc90:	e7e1      	b.n	800fc56 <_strtod_l+0x246>
 800fc92:	2300      	movs	r3, #0
 800fc94:	9307      	str	r3, [sp, #28]
 800fc96:	2201      	movs	r2, #1
 800fc98:	e77c      	b.n	800fb94 <_strtod_l+0x184>
 800fc9a:	f04f 0c00 	mov.w	ip, #0
 800fc9e:	f108 0302 	add.w	r3, r8, #2
 800fca2:	931d      	str	r3, [sp, #116]	; 0x74
 800fca4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fca8:	e785      	b.n	800fbb6 <_strtod_l+0x1a6>
 800fcaa:	f04f 0c01 	mov.w	ip, #1
 800fcae:	e7f6      	b.n	800fc9e <_strtod_l+0x28e>
 800fcb0:	080162ec 	.word	0x080162ec
 800fcb4:	080160fc 	.word	0x080160fc
 800fcb8:	7ff00000 	.word	0x7ff00000
 800fcbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcbe:	1c59      	adds	r1, r3, #1
 800fcc0:	911d      	str	r1, [sp, #116]	; 0x74
 800fcc2:	785b      	ldrb	r3, [r3, #1]
 800fcc4:	2b30      	cmp	r3, #48	; 0x30
 800fcc6:	d0f9      	beq.n	800fcbc <_strtod_l+0x2ac>
 800fcc8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fccc:	2908      	cmp	r1, #8
 800fcce:	f63f af79 	bhi.w	800fbc4 <_strtod_l+0x1b4>
 800fcd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fcd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcd8:	9308      	str	r3, [sp, #32]
 800fcda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcdc:	1c59      	adds	r1, r3, #1
 800fcde:	911d      	str	r1, [sp, #116]	; 0x74
 800fce0:	785b      	ldrb	r3, [r3, #1]
 800fce2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fce6:	2e09      	cmp	r6, #9
 800fce8:	d937      	bls.n	800fd5a <_strtod_l+0x34a>
 800fcea:	9e08      	ldr	r6, [sp, #32]
 800fcec:	1b89      	subs	r1, r1, r6
 800fcee:	2908      	cmp	r1, #8
 800fcf0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fcf4:	dc02      	bgt.n	800fcfc <_strtod_l+0x2ec>
 800fcf6:	4576      	cmp	r6, lr
 800fcf8:	bfa8      	it	ge
 800fcfa:	4676      	movge	r6, lr
 800fcfc:	f1bc 0f00 	cmp.w	ip, #0
 800fd00:	d000      	beq.n	800fd04 <_strtod_l+0x2f4>
 800fd02:	4276      	negs	r6, r6
 800fd04:	2d00      	cmp	r5, #0
 800fd06:	d14f      	bne.n	800fda8 <_strtod_l+0x398>
 800fd08:	9904      	ldr	r1, [sp, #16]
 800fd0a:	4301      	orrs	r1, r0
 800fd0c:	f47f aec2 	bne.w	800fa94 <_strtod_l+0x84>
 800fd10:	2a00      	cmp	r2, #0
 800fd12:	f47f aedb 	bne.w	800facc <_strtod_l+0xbc>
 800fd16:	2b69      	cmp	r3, #105	; 0x69
 800fd18:	d027      	beq.n	800fd6a <_strtod_l+0x35a>
 800fd1a:	dc24      	bgt.n	800fd66 <_strtod_l+0x356>
 800fd1c:	2b49      	cmp	r3, #73	; 0x49
 800fd1e:	d024      	beq.n	800fd6a <_strtod_l+0x35a>
 800fd20:	2b4e      	cmp	r3, #78	; 0x4e
 800fd22:	f47f aed3 	bne.w	800facc <_strtod_l+0xbc>
 800fd26:	499e      	ldr	r1, [pc, #632]	; (800ffa0 <_strtod_l+0x590>)
 800fd28:	a81d      	add	r0, sp, #116	; 0x74
 800fd2a:	f001 fe87 	bl	8011a3c <__match>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	f43f aecc 	beq.w	800facc <_strtod_l+0xbc>
 800fd34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	2b28      	cmp	r3, #40	; 0x28
 800fd3a:	d12d      	bne.n	800fd98 <_strtod_l+0x388>
 800fd3c:	4999      	ldr	r1, [pc, #612]	; (800ffa4 <_strtod_l+0x594>)
 800fd3e:	aa20      	add	r2, sp, #128	; 0x80
 800fd40:	a81d      	add	r0, sp, #116	; 0x74
 800fd42:	f001 fe8f 	bl	8011a64 <__hexnan>
 800fd46:	2805      	cmp	r0, #5
 800fd48:	d126      	bne.n	800fd98 <_strtod_l+0x388>
 800fd4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800fd50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fd54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fd58:	e69c      	b.n	800fa94 <_strtod_l+0x84>
 800fd5a:	210a      	movs	r1, #10
 800fd5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fd60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fd64:	e7b9      	b.n	800fcda <_strtod_l+0x2ca>
 800fd66:	2b6e      	cmp	r3, #110	; 0x6e
 800fd68:	e7db      	b.n	800fd22 <_strtod_l+0x312>
 800fd6a:	498f      	ldr	r1, [pc, #572]	; (800ffa8 <_strtod_l+0x598>)
 800fd6c:	a81d      	add	r0, sp, #116	; 0x74
 800fd6e:	f001 fe65 	bl	8011a3c <__match>
 800fd72:	2800      	cmp	r0, #0
 800fd74:	f43f aeaa 	beq.w	800facc <_strtod_l+0xbc>
 800fd78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd7a:	498c      	ldr	r1, [pc, #560]	; (800ffac <_strtod_l+0x59c>)
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	a81d      	add	r0, sp, #116	; 0x74
 800fd80:	931d      	str	r3, [sp, #116]	; 0x74
 800fd82:	f001 fe5b 	bl	8011a3c <__match>
 800fd86:	b910      	cbnz	r0, 800fd8e <_strtod_l+0x37e>
 800fd88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	931d      	str	r3, [sp, #116]	; 0x74
 800fd8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ffbc <_strtod_l+0x5ac>
 800fd92:	f04f 0a00 	mov.w	sl, #0
 800fd96:	e67d      	b.n	800fa94 <_strtod_l+0x84>
 800fd98:	4885      	ldr	r0, [pc, #532]	; (800ffb0 <_strtod_l+0x5a0>)
 800fd9a:	f002 ff49 	bl	8012c30 <nan>
 800fd9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fda2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fda6:	e675      	b.n	800fa94 <_strtod_l+0x84>
 800fda8:	9b07      	ldr	r3, [sp, #28]
 800fdaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdac:	1af3      	subs	r3, r6, r3
 800fdae:	2f00      	cmp	r7, #0
 800fdb0:	bf08      	it	eq
 800fdb2:	462f      	moveq	r7, r5
 800fdb4:	2d10      	cmp	r5, #16
 800fdb6:	9308      	str	r3, [sp, #32]
 800fdb8:	46a8      	mov	r8, r5
 800fdba:	bfa8      	it	ge
 800fdbc:	f04f 0810 	movge.w	r8, #16
 800fdc0:	f7f0 fba8 	bl	8000514 <__aeabi_ui2d>
 800fdc4:	2d09      	cmp	r5, #9
 800fdc6:	4682      	mov	sl, r0
 800fdc8:	468b      	mov	fp, r1
 800fdca:	dd13      	ble.n	800fdf4 <_strtod_l+0x3e4>
 800fdcc:	4b79      	ldr	r3, [pc, #484]	; (800ffb4 <_strtod_l+0x5a4>)
 800fdce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fdd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fdd6:	f7f0 fc17 	bl	8000608 <__aeabi_dmul>
 800fdda:	4682      	mov	sl, r0
 800fddc:	4648      	mov	r0, r9
 800fdde:	468b      	mov	fp, r1
 800fde0:	f7f0 fb98 	bl	8000514 <__aeabi_ui2d>
 800fde4:	4602      	mov	r2, r0
 800fde6:	460b      	mov	r3, r1
 800fde8:	4650      	mov	r0, sl
 800fdea:	4659      	mov	r1, fp
 800fdec:	f7f0 fa56 	bl	800029c <__adddf3>
 800fdf0:	4682      	mov	sl, r0
 800fdf2:	468b      	mov	fp, r1
 800fdf4:	2d0f      	cmp	r5, #15
 800fdf6:	dc38      	bgt.n	800fe6a <_strtod_l+0x45a>
 800fdf8:	9b08      	ldr	r3, [sp, #32]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f43f ae4a 	beq.w	800fa94 <_strtod_l+0x84>
 800fe00:	dd24      	ble.n	800fe4c <_strtod_l+0x43c>
 800fe02:	2b16      	cmp	r3, #22
 800fe04:	dc0b      	bgt.n	800fe1e <_strtod_l+0x40e>
 800fe06:	4d6b      	ldr	r5, [pc, #428]	; (800ffb4 <_strtod_l+0x5a4>)
 800fe08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fe0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fe10:	4652      	mov	r2, sl
 800fe12:	465b      	mov	r3, fp
 800fe14:	f7f0 fbf8 	bl	8000608 <__aeabi_dmul>
 800fe18:	4682      	mov	sl, r0
 800fe1a:	468b      	mov	fp, r1
 800fe1c:	e63a      	b.n	800fa94 <_strtod_l+0x84>
 800fe1e:	9a08      	ldr	r2, [sp, #32]
 800fe20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fe24:	4293      	cmp	r3, r2
 800fe26:	db20      	blt.n	800fe6a <_strtod_l+0x45a>
 800fe28:	4c62      	ldr	r4, [pc, #392]	; (800ffb4 <_strtod_l+0x5a4>)
 800fe2a:	f1c5 050f 	rsb	r5, r5, #15
 800fe2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fe32:	4652      	mov	r2, sl
 800fe34:	465b      	mov	r3, fp
 800fe36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe3a:	f7f0 fbe5 	bl	8000608 <__aeabi_dmul>
 800fe3e:	9b08      	ldr	r3, [sp, #32]
 800fe40:	1b5d      	subs	r5, r3, r5
 800fe42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fe46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe4a:	e7e3      	b.n	800fe14 <_strtod_l+0x404>
 800fe4c:	9b08      	ldr	r3, [sp, #32]
 800fe4e:	3316      	adds	r3, #22
 800fe50:	db0b      	blt.n	800fe6a <_strtod_l+0x45a>
 800fe52:	9b07      	ldr	r3, [sp, #28]
 800fe54:	4a57      	ldr	r2, [pc, #348]	; (800ffb4 <_strtod_l+0x5a4>)
 800fe56:	1b9e      	subs	r6, r3, r6
 800fe58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800fe5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fe60:	4650      	mov	r0, sl
 800fe62:	4659      	mov	r1, fp
 800fe64:	f7f0 fcfa 	bl	800085c <__aeabi_ddiv>
 800fe68:	e7d6      	b.n	800fe18 <_strtod_l+0x408>
 800fe6a:	9b08      	ldr	r3, [sp, #32]
 800fe6c:	eba5 0808 	sub.w	r8, r5, r8
 800fe70:	4498      	add	r8, r3
 800fe72:	f1b8 0f00 	cmp.w	r8, #0
 800fe76:	dd71      	ble.n	800ff5c <_strtod_l+0x54c>
 800fe78:	f018 030f 	ands.w	r3, r8, #15
 800fe7c:	d00a      	beq.n	800fe94 <_strtod_l+0x484>
 800fe7e:	494d      	ldr	r1, [pc, #308]	; (800ffb4 <_strtod_l+0x5a4>)
 800fe80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe84:	4652      	mov	r2, sl
 800fe86:	465b      	mov	r3, fp
 800fe88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe8c:	f7f0 fbbc 	bl	8000608 <__aeabi_dmul>
 800fe90:	4682      	mov	sl, r0
 800fe92:	468b      	mov	fp, r1
 800fe94:	f038 080f 	bics.w	r8, r8, #15
 800fe98:	d04d      	beq.n	800ff36 <_strtod_l+0x526>
 800fe9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fe9e:	dd22      	ble.n	800fee6 <_strtod_l+0x4d6>
 800fea0:	2500      	movs	r5, #0
 800fea2:	462e      	mov	r6, r5
 800fea4:	9509      	str	r5, [sp, #36]	; 0x24
 800fea6:	9507      	str	r5, [sp, #28]
 800fea8:	2322      	movs	r3, #34	; 0x22
 800feaa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ffbc <_strtod_l+0x5ac>
 800feae:	6023      	str	r3, [r4, #0]
 800feb0:	f04f 0a00 	mov.w	sl, #0
 800feb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f43f adec 	beq.w	800fa94 <_strtod_l+0x84>
 800febc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800febe:	4620      	mov	r0, r4
 800fec0:	f001 feca 	bl	8011c58 <_Bfree>
 800fec4:	9907      	ldr	r1, [sp, #28]
 800fec6:	4620      	mov	r0, r4
 800fec8:	f001 fec6 	bl	8011c58 <_Bfree>
 800fecc:	4631      	mov	r1, r6
 800fece:	4620      	mov	r0, r4
 800fed0:	f001 fec2 	bl	8011c58 <_Bfree>
 800fed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fed6:	4620      	mov	r0, r4
 800fed8:	f001 febe 	bl	8011c58 <_Bfree>
 800fedc:	4629      	mov	r1, r5
 800fede:	4620      	mov	r0, r4
 800fee0:	f001 feba 	bl	8011c58 <_Bfree>
 800fee4:	e5d6      	b.n	800fa94 <_strtod_l+0x84>
 800fee6:	2300      	movs	r3, #0
 800fee8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800feec:	4650      	mov	r0, sl
 800feee:	4659      	mov	r1, fp
 800fef0:	4699      	mov	r9, r3
 800fef2:	f1b8 0f01 	cmp.w	r8, #1
 800fef6:	dc21      	bgt.n	800ff3c <_strtod_l+0x52c>
 800fef8:	b10b      	cbz	r3, 800fefe <_strtod_l+0x4ee>
 800fefa:	4682      	mov	sl, r0
 800fefc:	468b      	mov	fp, r1
 800fefe:	4b2e      	ldr	r3, [pc, #184]	; (800ffb8 <_strtod_l+0x5a8>)
 800ff00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ff04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ff08:	4652      	mov	r2, sl
 800ff0a:	465b      	mov	r3, fp
 800ff0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ff10:	f7f0 fb7a 	bl	8000608 <__aeabi_dmul>
 800ff14:	4b29      	ldr	r3, [pc, #164]	; (800ffbc <_strtod_l+0x5ac>)
 800ff16:	460a      	mov	r2, r1
 800ff18:	400b      	ands	r3, r1
 800ff1a:	4929      	ldr	r1, [pc, #164]	; (800ffc0 <_strtod_l+0x5b0>)
 800ff1c:	428b      	cmp	r3, r1
 800ff1e:	4682      	mov	sl, r0
 800ff20:	d8be      	bhi.n	800fea0 <_strtod_l+0x490>
 800ff22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ff26:	428b      	cmp	r3, r1
 800ff28:	bf86      	itte	hi
 800ff2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ffc4 <_strtod_l+0x5b4>
 800ff2e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ff32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ff36:	2300      	movs	r3, #0
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	e081      	b.n	8010040 <_strtod_l+0x630>
 800ff3c:	f018 0f01 	tst.w	r8, #1
 800ff40:	d007      	beq.n	800ff52 <_strtod_l+0x542>
 800ff42:	4b1d      	ldr	r3, [pc, #116]	; (800ffb8 <_strtod_l+0x5a8>)
 800ff44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4c:	f7f0 fb5c 	bl	8000608 <__aeabi_dmul>
 800ff50:	2301      	movs	r3, #1
 800ff52:	f109 0901 	add.w	r9, r9, #1
 800ff56:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff5a:	e7ca      	b.n	800fef2 <_strtod_l+0x4e2>
 800ff5c:	d0eb      	beq.n	800ff36 <_strtod_l+0x526>
 800ff5e:	f1c8 0800 	rsb	r8, r8, #0
 800ff62:	f018 020f 	ands.w	r2, r8, #15
 800ff66:	d00a      	beq.n	800ff7e <_strtod_l+0x56e>
 800ff68:	4b12      	ldr	r3, [pc, #72]	; (800ffb4 <_strtod_l+0x5a4>)
 800ff6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff6e:	4650      	mov	r0, sl
 800ff70:	4659      	mov	r1, fp
 800ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff76:	f7f0 fc71 	bl	800085c <__aeabi_ddiv>
 800ff7a:	4682      	mov	sl, r0
 800ff7c:	468b      	mov	fp, r1
 800ff7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ff82:	d0d8      	beq.n	800ff36 <_strtod_l+0x526>
 800ff84:	f1b8 0f1f 	cmp.w	r8, #31
 800ff88:	dd1e      	ble.n	800ffc8 <_strtod_l+0x5b8>
 800ff8a:	2500      	movs	r5, #0
 800ff8c:	462e      	mov	r6, r5
 800ff8e:	9509      	str	r5, [sp, #36]	; 0x24
 800ff90:	9507      	str	r5, [sp, #28]
 800ff92:	2322      	movs	r3, #34	; 0x22
 800ff94:	f04f 0a00 	mov.w	sl, #0
 800ff98:	f04f 0b00 	mov.w	fp, #0
 800ff9c:	6023      	str	r3, [r4, #0]
 800ff9e:	e789      	b.n	800feb4 <_strtod_l+0x4a4>
 800ffa0:	080160d5 	.word	0x080160d5
 800ffa4:	08016110 	.word	0x08016110
 800ffa8:	080160cd 	.word	0x080160cd
 800ffac:	08016207 	.word	0x08016207
 800ffb0:	08016203 	.word	0x08016203
 800ffb4:	08016388 	.word	0x08016388
 800ffb8:	08016360 	.word	0x08016360
 800ffbc:	7ff00000 	.word	0x7ff00000
 800ffc0:	7ca00000 	.word	0x7ca00000
 800ffc4:	7fefffff 	.word	0x7fefffff
 800ffc8:	f018 0310 	ands.w	r3, r8, #16
 800ffcc:	bf18      	it	ne
 800ffce:	236a      	movne	r3, #106	; 0x6a
 800ffd0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010388 <_strtod_l+0x978>
 800ffd4:	9304      	str	r3, [sp, #16]
 800ffd6:	4650      	mov	r0, sl
 800ffd8:	4659      	mov	r1, fp
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f018 0f01 	tst.w	r8, #1
 800ffe0:	d004      	beq.n	800ffec <_strtod_l+0x5dc>
 800ffe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ffe6:	f7f0 fb0f 	bl	8000608 <__aeabi_dmul>
 800ffea:	2301      	movs	r3, #1
 800ffec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fff0:	f109 0908 	add.w	r9, r9, #8
 800fff4:	d1f2      	bne.n	800ffdc <_strtod_l+0x5cc>
 800fff6:	b10b      	cbz	r3, 800fffc <_strtod_l+0x5ec>
 800fff8:	4682      	mov	sl, r0
 800fffa:	468b      	mov	fp, r1
 800fffc:	9b04      	ldr	r3, [sp, #16]
 800fffe:	b1bb      	cbz	r3, 8010030 <_strtod_l+0x620>
 8010000:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010004:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010008:	2b00      	cmp	r3, #0
 801000a:	4659      	mov	r1, fp
 801000c:	dd10      	ble.n	8010030 <_strtod_l+0x620>
 801000e:	2b1f      	cmp	r3, #31
 8010010:	f340 8128 	ble.w	8010264 <_strtod_l+0x854>
 8010014:	2b34      	cmp	r3, #52	; 0x34
 8010016:	bfde      	ittt	le
 8010018:	3b20      	suble	r3, #32
 801001a:	f04f 32ff 	movle.w	r2, #4294967295
 801001e:	fa02 f303 	lslle.w	r3, r2, r3
 8010022:	f04f 0a00 	mov.w	sl, #0
 8010026:	bfcc      	ite	gt
 8010028:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801002c:	ea03 0b01 	andle.w	fp, r3, r1
 8010030:	2200      	movs	r2, #0
 8010032:	2300      	movs	r3, #0
 8010034:	4650      	mov	r0, sl
 8010036:	4659      	mov	r1, fp
 8010038:	f7f0 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 801003c:	2800      	cmp	r0, #0
 801003e:	d1a4      	bne.n	800ff8a <_strtod_l+0x57a>
 8010040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010046:	462b      	mov	r3, r5
 8010048:	463a      	mov	r2, r7
 801004a:	4620      	mov	r0, r4
 801004c:	f001 fe70 	bl	8011d30 <__s2b>
 8010050:	9009      	str	r0, [sp, #36]	; 0x24
 8010052:	2800      	cmp	r0, #0
 8010054:	f43f af24 	beq.w	800fea0 <_strtod_l+0x490>
 8010058:	9b07      	ldr	r3, [sp, #28]
 801005a:	1b9e      	subs	r6, r3, r6
 801005c:	9b08      	ldr	r3, [sp, #32]
 801005e:	2b00      	cmp	r3, #0
 8010060:	bfb4      	ite	lt
 8010062:	4633      	movlt	r3, r6
 8010064:	2300      	movge	r3, #0
 8010066:	9310      	str	r3, [sp, #64]	; 0x40
 8010068:	9b08      	ldr	r3, [sp, #32]
 801006a:	2500      	movs	r5, #0
 801006c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010070:	9318      	str	r3, [sp, #96]	; 0x60
 8010072:	462e      	mov	r6, r5
 8010074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010076:	4620      	mov	r0, r4
 8010078:	6859      	ldr	r1, [r3, #4]
 801007a:	f001 fdad 	bl	8011bd8 <_Balloc>
 801007e:	9007      	str	r0, [sp, #28]
 8010080:	2800      	cmp	r0, #0
 8010082:	f43f af11 	beq.w	800fea8 <_strtod_l+0x498>
 8010086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010088:	691a      	ldr	r2, [r3, #16]
 801008a:	3202      	adds	r2, #2
 801008c:	f103 010c 	add.w	r1, r3, #12
 8010090:	0092      	lsls	r2, r2, #2
 8010092:	300c      	adds	r0, #12
 8010094:	f7fe ff90 	bl	800efb8 <memcpy>
 8010098:	ec4b ab10 	vmov	d0, sl, fp
 801009c:	aa20      	add	r2, sp, #128	; 0x80
 801009e:	a91f      	add	r1, sp, #124	; 0x7c
 80100a0:	4620      	mov	r0, r4
 80100a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80100a6:	f002 f97f 	bl	80123a8 <__d2b>
 80100aa:	901e      	str	r0, [sp, #120]	; 0x78
 80100ac:	2800      	cmp	r0, #0
 80100ae:	f43f aefb 	beq.w	800fea8 <_strtod_l+0x498>
 80100b2:	2101      	movs	r1, #1
 80100b4:	4620      	mov	r0, r4
 80100b6:	f001 fed5 	bl	8011e64 <__i2b>
 80100ba:	4606      	mov	r6, r0
 80100bc:	2800      	cmp	r0, #0
 80100be:	f43f aef3 	beq.w	800fea8 <_strtod_l+0x498>
 80100c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80100c4:	9904      	ldr	r1, [sp, #16]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	bfab      	itete	ge
 80100ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80100cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80100ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80100d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80100d4:	bfac      	ite	ge
 80100d6:	eb03 0902 	addge.w	r9, r3, r2
 80100da:	1ad7      	sublt	r7, r2, r3
 80100dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80100de:	eba3 0801 	sub.w	r8, r3, r1
 80100e2:	4490      	add	r8, r2
 80100e4:	4ba3      	ldr	r3, [pc, #652]	; (8010374 <_strtod_l+0x964>)
 80100e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80100ea:	4598      	cmp	r8, r3
 80100ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80100f0:	f280 80cc 	bge.w	801028c <_strtod_l+0x87c>
 80100f4:	eba3 0308 	sub.w	r3, r3, r8
 80100f8:	2b1f      	cmp	r3, #31
 80100fa:	eba2 0203 	sub.w	r2, r2, r3
 80100fe:	f04f 0101 	mov.w	r1, #1
 8010102:	f300 80b6 	bgt.w	8010272 <_strtod_l+0x862>
 8010106:	fa01 f303 	lsl.w	r3, r1, r3
 801010a:	9311      	str	r3, [sp, #68]	; 0x44
 801010c:	2300      	movs	r3, #0
 801010e:	930c      	str	r3, [sp, #48]	; 0x30
 8010110:	eb09 0802 	add.w	r8, r9, r2
 8010114:	9b04      	ldr	r3, [sp, #16]
 8010116:	45c1      	cmp	r9, r8
 8010118:	4417      	add	r7, r2
 801011a:	441f      	add	r7, r3
 801011c:	464b      	mov	r3, r9
 801011e:	bfa8      	it	ge
 8010120:	4643      	movge	r3, r8
 8010122:	42bb      	cmp	r3, r7
 8010124:	bfa8      	it	ge
 8010126:	463b      	movge	r3, r7
 8010128:	2b00      	cmp	r3, #0
 801012a:	bfc2      	ittt	gt
 801012c:	eba8 0803 	subgt.w	r8, r8, r3
 8010130:	1aff      	subgt	r7, r7, r3
 8010132:	eba9 0903 	subgt.w	r9, r9, r3
 8010136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010138:	2b00      	cmp	r3, #0
 801013a:	dd17      	ble.n	801016c <_strtod_l+0x75c>
 801013c:	4631      	mov	r1, r6
 801013e:	461a      	mov	r2, r3
 8010140:	4620      	mov	r0, r4
 8010142:	f001 ff4b 	bl	8011fdc <__pow5mult>
 8010146:	4606      	mov	r6, r0
 8010148:	2800      	cmp	r0, #0
 801014a:	f43f aead 	beq.w	800fea8 <_strtod_l+0x498>
 801014e:	4601      	mov	r1, r0
 8010150:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010152:	4620      	mov	r0, r4
 8010154:	f001 fe9c 	bl	8011e90 <__multiply>
 8010158:	900f      	str	r0, [sp, #60]	; 0x3c
 801015a:	2800      	cmp	r0, #0
 801015c:	f43f aea4 	beq.w	800fea8 <_strtod_l+0x498>
 8010160:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010162:	4620      	mov	r0, r4
 8010164:	f001 fd78 	bl	8011c58 <_Bfree>
 8010168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801016a:	931e      	str	r3, [sp, #120]	; 0x78
 801016c:	f1b8 0f00 	cmp.w	r8, #0
 8010170:	f300 8091 	bgt.w	8010296 <_strtod_l+0x886>
 8010174:	9b08      	ldr	r3, [sp, #32]
 8010176:	2b00      	cmp	r3, #0
 8010178:	dd08      	ble.n	801018c <_strtod_l+0x77c>
 801017a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801017c:	9907      	ldr	r1, [sp, #28]
 801017e:	4620      	mov	r0, r4
 8010180:	f001 ff2c 	bl	8011fdc <__pow5mult>
 8010184:	9007      	str	r0, [sp, #28]
 8010186:	2800      	cmp	r0, #0
 8010188:	f43f ae8e 	beq.w	800fea8 <_strtod_l+0x498>
 801018c:	2f00      	cmp	r7, #0
 801018e:	dd08      	ble.n	80101a2 <_strtod_l+0x792>
 8010190:	9907      	ldr	r1, [sp, #28]
 8010192:	463a      	mov	r2, r7
 8010194:	4620      	mov	r0, r4
 8010196:	f001 ff7b 	bl	8012090 <__lshift>
 801019a:	9007      	str	r0, [sp, #28]
 801019c:	2800      	cmp	r0, #0
 801019e:	f43f ae83 	beq.w	800fea8 <_strtod_l+0x498>
 80101a2:	f1b9 0f00 	cmp.w	r9, #0
 80101a6:	dd08      	ble.n	80101ba <_strtod_l+0x7aa>
 80101a8:	4631      	mov	r1, r6
 80101aa:	464a      	mov	r2, r9
 80101ac:	4620      	mov	r0, r4
 80101ae:	f001 ff6f 	bl	8012090 <__lshift>
 80101b2:	4606      	mov	r6, r0
 80101b4:	2800      	cmp	r0, #0
 80101b6:	f43f ae77 	beq.w	800fea8 <_strtod_l+0x498>
 80101ba:	9a07      	ldr	r2, [sp, #28]
 80101bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80101be:	4620      	mov	r0, r4
 80101c0:	f001 ffee 	bl	80121a0 <__mdiff>
 80101c4:	4605      	mov	r5, r0
 80101c6:	2800      	cmp	r0, #0
 80101c8:	f43f ae6e 	beq.w	800fea8 <_strtod_l+0x498>
 80101cc:	68c3      	ldr	r3, [r0, #12]
 80101ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80101d0:	2300      	movs	r3, #0
 80101d2:	60c3      	str	r3, [r0, #12]
 80101d4:	4631      	mov	r1, r6
 80101d6:	f001 ffc7 	bl	8012168 <__mcmp>
 80101da:	2800      	cmp	r0, #0
 80101dc:	da65      	bge.n	80102aa <_strtod_l+0x89a>
 80101de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101e0:	ea53 030a 	orrs.w	r3, r3, sl
 80101e4:	f040 8087 	bne.w	80102f6 <_strtod_l+0x8e6>
 80101e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f040 8082 	bne.w	80102f6 <_strtod_l+0x8e6>
 80101f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80101f6:	0d1b      	lsrs	r3, r3, #20
 80101f8:	051b      	lsls	r3, r3, #20
 80101fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80101fe:	d97a      	bls.n	80102f6 <_strtod_l+0x8e6>
 8010200:	696b      	ldr	r3, [r5, #20]
 8010202:	b913      	cbnz	r3, 801020a <_strtod_l+0x7fa>
 8010204:	692b      	ldr	r3, [r5, #16]
 8010206:	2b01      	cmp	r3, #1
 8010208:	dd75      	ble.n	80102f6 <_strtod_l+0x8e6>
 801020a:	4629      	mov	r1, r5
 801020c:	2201      	movs	r2, #1
 801020e:	4620      	mov	r0, r4
 8010210:	f001 ff3e 	bl	8012090 <__lshift>
 8010214:	4631      	mov	r1, r6
 8010216:	4605      	mov	r5, r0
 8010218:	f001 ffa6 	bl	8012168 <__mcmp>
 801021c:	2800      	cmp	r0, #0
 801021e:	dd6a      	ble.n	80102f6 <_strtod_l+0x8e6>
 8010220:	9904      	ldr	r1, [sp, #16]
 8010222:	4a55      	ldr	r2, [pc, #340]	; (8010378 <_strtod_l+0x968>)
 8010224:	465b      	mov	r3, fp
 8010226:	2900      	cmp	r1, #0
 8010228:	f000 8085 	beq.w	8010336 <_strtod_l+0x926>
 801022c:	ea02 010b 	and.w	r1, r2, fp
 8010230:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010234:	dc7f      	bgt.n	8010336 <_strtod_l+0x926>
 8010236:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801023a:	f77f aeaa 	ble.w	800ff92 <_strtod_l+0x582>
 801023e:	4a4f      	ldr	r2, [pc, #316]	; (801037c <_strtod_l+0x96c>)
 8010240:	2300      	movs	r3, #0
 8010242:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010246:	4650      	mov	r0, sl
 8010248:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801024c:	4659      	mov	r1, fp
 801024e:	f7f0 f9db 	bl	8000608 <__aeabi_dmul>
 8010252:	460b      	mov	r3, r1
 8010254:	4303      	orrs	r3, r0
 8010256:	bf08      	it	eq
 8010258:	2322      	moveq	r3, #34	; 0x22
 801025a:	4682      	mov	sl, r0
 801025c:	468b      	mov	fp, r1
 801025e:	bf08      	it	eq
 8010260:	6023      	streq	r3, [r4, #0]
 8010262:	e62b      	b.n	800febc <_strtod_l+0x4ac>
 8010264:	f04f 32ff 	mov.w	r2, #4294967295
 8010268:	fa02 f303 	lsl.w	r3, r2, r3
 801026c:	ea03 0a0a 	and.w	sl, r3, sl
 8010270:	e6de      	b.n	8010030 <_strtod_l+0x620>
 8010272:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010276:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801027a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801027e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010282:	fa01 f308 	lsl.w	r3, r1, r8
 8010286:	930c      	str	r3, [sp, #48]	; 0x30
 8010288:	9111      	str	r1, [sp, #68]	; 0x44
 801028a:	e741      	b.n	8010110 <_strtod_l+0x700>
 801028c:	2300      	movs	r3, #0
 801028e:	930c      	str	r3, [sp, #48]	; 0x30
 8010290:	2301      	movs	r3, #1
 8010292:	9311      	str	r3, [sp, #68]	; 0x44
 8010294:	e73c      	b.n	8010110 <_strtod_l+0x700>
 8010296:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010298:	4642      	mov	r2, r8
 801029a:	4620      	mov	r0, r4
 801029c:	f001 fef8 	bl	8012090 <__lshift>
 80102a0:	901e      	str	r0, [sp, #120]	; 0x78
 80102a2:	2800      	cmp	r0, #0
 80102a4:	f47f af66 	bne.w	8010174 <_strtod_l+0x764>
 80102a8:	e5fe      	b.n	800fea8 <_strtod_l+0x498>
 80102aa:	465f      	mov	r7, fp
 80102ac:	d16e      	bne.n	801038c <_strtod_l+0x97c>
 80102ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80102b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102b4:	b342      	cbz	r2, 8010308 <_strtod_l+0x8f8>
 80102b6:	4a32      	ldr	r2, [pc, #200]	; (8010380 <_strtod_l+0x970>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d128      	bne.n	801030e <_strtod_l+0x8fe>
 80102bc:	9b04      	ldr	r3, [sp, #16]
 80102be:	4650      	mov	r0, sl
 80102c0:	b1eb      	cbz	r3, 80102fe <_strtod_l+0x8ee>
 80102c2:	4a2d      	ldr	r2, [pc, #180]	; (8010378 <_strtod_l+0x968>)
 80102c4:	403a      	ands	r2, r7
 80102c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80102ca:	f04f 31ff 	mov.w	r1, #4294967295
 80102ce:	d819      	bhi.n	8010304 <_strtod_l+0x8f4>
 80102d0:	0d12      	lsrs	r2, r2, #20
 80102d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80102d6:	fa01 f303 	lsl.w	r3, r1, r3
 80102da:	4298      	cmp	r0, r3
 80102dc:	d117      	bne.n	801030e <_strtod_l+0x8fe>
 80102de:	4b29      	ldr	r3, [pc, #164]	; (8010384 <_strtod_l+0x974>)
 80102e0:	429f      	cmp	r7, r3
 80102e2:	d102      	bne.n	80102ea <_strtod_l+0x8da>
 80102e4:	3001      	adds	r0, #1
 80102e6:	f43f addf 	beq.w	800fea8 <_strtod_l+0x498>
 80102ea:	4b23      	ldr	r3, [pc, #140]	; (8010378 <_strtod_l+0x968>)
 80102ec:	403b      	ands	r3, r7
 80102ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80102f2:	f04f 0a00 	mov.w	sl, #0
 80102f6:	9b04      	ldr	r3, [sp, #16]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1a0      	bne.n	801023e <_strtod_l+0x82e>
 80102fc:	e5de      	b.n	800febc <_strtod_l+0x4ac>
 80102fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010302:	e7ea      	b.n	80102da <_strtod_l+0x8ca>
 8010304:	460b      	mov	r3, r1
 8010306:	e7e8      	b.n	80102da <_strtod_l+0x8ca>
 8010308:	ea53 030a 	orrs.w	r3, r3, sl
 801030c:	d088      	beq.n	8010220 <_strtod_l+0x810>
 801030e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010310:	b1db      	cbz	r3, 801034a <_strtod_l+0x93a>
 8010312:	423b      	tst	r3, r7
 8010314:	d0ef      	beq.n	80102f6 <_strtod_l+0x8e6>
 8010316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010318:	9a04      	ldr	r2, [sp, #16]
 801031a:	4650      	mov	r0, sl
 801031c:	4659      	mov	r1, fp
 801031e:	b1c3      	cbz	r3, 8010352 <_strtod_l+0x942>
 8010320:	f7ff fb5a 	bl	800f9d8 <sulp>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801032c:	f7ef ffb6 	bl	800029c <__adddf3>
 8010330:	4682      	mov	sl, r0
 8010332:	468b      	mov	fp, r1
 8010334:	e7df      	b.n	80102f6 <_strtod_l+0x8e6>
 8010336:	4013      	ands	r3, r2
 8010338:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801033c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010340:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010344:	f04f 3aff 	mov.w	sl, #4294967295
 8010348:	e7d5      	b.n	80102f6 <_strtod_l+0x8e6>
 801034a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801034c:	ea13 0f0a 	tst.w	r3, sl
 8010350:	e7e0      	b.n	8010314 <_strtod_l+0x904>
 8010352:	f7ff fb41 	bl	800f9d8 <sulp>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801035e:	f7ef ff9b 	bl	8000298 <__aeabi_dsub>
 8010362:	2200      	movs	r2, #0
 8010364:	2300      	movs	r3, #0
 8010366:	4682      	mov	sl, r0
 8010368:	468b      	mov	fp, r1
 801036a:	f7f0 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 801036e:	2800      	cmp	r0, #0
 8010370:	d0c1      	beq.n	80102f6 <_strtod_l+0x8e6>
 8010372:	e60e      	b.n	800ff92 <_strtod_l+0x582>
 8010374:	fffffc02 	.word	0xfffffc02
 8010378:	7ff00000 	.word	0x7ff00000
 801037c:	39500000 	.word	0x39500000
 8010380:	000fffff 	.word	0x000fffff
 8010384:	7fefffff 	.word	0x7fefffff
 8010388:	08016128 	.word	0x08016128
 801038c:	4631      	mov	r1, r6
 801038e:	4628      	mov	r0, r5
 8010390:	f002 f866 	bl	8012460 <__ratio>
 8010394:	ec59 8b10 	vmov	r8, r9, d0
 8010398:	ee10 0a10 	vmov	r0, s0
 801039c:	2200      	movs	r2, #0
 801039e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80103a2:	4649      	mov	r1, r9
 80103a4:	f7f0 fbac 	bl	8000b00 <__aeabi_dcmple>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d07c      	beq.n	80104a6 <_strtod_l+0xa96>
 80103ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d04c      	beq.n	801044c <_strtod_l+0xa3c>
 80103b2:	4b95      	ldr	r3, [pc, #596]	; (8010608 <_strtod_l+0xbf8>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80103ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010608 <_strtod_l+0xbf8>
 80103be:	f04f 0800 	mov.w	r8, #0
 80103c2:	4b92      	ldr	r3, [pc, #584]	; (801060c <_strtod_l+0xbfc>)
 80103c4:	403b      	ands	r3, r7
 80103c6:	9311      	str	r3, [sp, #68]	; 0x44
 80103c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80103ca:	4b91      	ldr	r3, [pc, #580]	; (8010610 <_strtod_l+0xc00>)
 80103cc:	429a      	cmp	r2, r3
 80103ce:	f040 80b2 	bne.w	8010536 <_strtod_l+0xb26>
 80103d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80103d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80103da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80103de:	ec4b ab10 	vmov	d0, sl, fp
 80103e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80103e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80103ea:	f001 ff61 	bl	80122b0 <__ulp>
 80103ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80103f2:	ec53 2b10 	vmov	r2, r3, d0
 80103f6:	f7f0 f907 	bl	8000608 <__aeabi_dmul>
 80103fa:	4652      	mov	r2, sl
 80103fc:	465b      	mov	r3, fp
 80103fe:	f7ef ff4d 	bl	800029c <__adddf3>
 8010402:	460b      	mov	r3, r1
 8010404:	4981      	ldr	r1, [pc, #516]	; (801060c <_strtod_l+0xbfc>)
 8010406:	4a83      	ldr	r2, [pc, #524]	; (8010614 <_strtod_l+0xc04>)
 8010408:	4019      	ands	r1, r3
 801040a:	4291      	cmp	r1, r2
 801040c:	4682      	mov	sl, r0
 801040e:	d95e      	bls.n	80104ce <_strtod_l+0xabe>
 8010410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010412:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010416:	4293      	cmp	r3, r2
 8010418:	d103      	bne.n	8010422 <_strtod_l+0xa12>
 801041a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801041c:	3301      	adds	r3, #1
 801041e:	f43f ad43 	beq.w	800fea8 <_strtod_l+0x498>
 8010422:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010620 <_strtod_l+0xc10>
 8010426:	f04f 3aff 	mov.w	sl, #4294967295
 801042a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801042c:	4620      	mov	r0, r4
 801042e:	f001 fc13 	bl	8011c58 <_Bfree>
 8010432:	9907      	ldr	r1, [sp, #28]
 8010434:	4620      	mov	r0, r4
 8010436:	f001 fc0f 	bl	8011c58 <_Bfree>
 801043a:	4631      	mov	r1, r6
 801043c:	4620      	mov	r0, r4
 801043e:	f001 fc0b 	bl	8011c58 <_Bfree>
 8010442:	4629      	mov	r1, r5
 8010444:	4620      	mov	r0, r4
 8010446:	f001 fc07 	bl	8011c58 <_Bfree>
 801044a:	e613      	b.n	8010074 <_strtod_l+0x664>
 801044c:	f1ba 0f00 	cmp.w	sl, #0
 8010450:	d11b      	bne.n	801048a <_strtod_l+0xa7a>
 8010452:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010456:	b9f3      	cbnz	r3, 8010496 <_strtod_l+0xa86>
 8010458:	4b6b      	ldr	r3, [pc, #428]	; (8010608 <_strtod_l+0xbf8>)
 801045a:	2200      	movs	r2, #0
 801045c:	4640      	mov	r0, r8
 801045e:	4649      	mov	r1, r9
 8010460:	f7f0 fb44 	bl	8000aec <__aeabi_dcmplt>
 8010464:	b9d0      	cbnz	r0, 801049c <_strtod_l+0xa8c>
 8010466:	4640      	mov	r0, r8
 8010468:	4649      	mov	r1, r9
 801046a:	4b6b      	ldr	r3, [pc, #428]	; (8010618 <_strtod_l+0xc08>)
 801046c:	2200      	movs	r2, #0
 801046e:	f7f0 f8cb 	bl	8000608 <__aeabi_dmul>
 8010472:	4680      	mov	r8, r0
 8010474:	4689      	mov	r9, r1
 8010476:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801047a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801047e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010480:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010484:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010488:	e79b      	b.n	80103c2 <_strtod_l+0x9b2>
 801048a:	f1ba 0f01 	cmp.w	sl, #1
 801048e:	d102      	bne.n	8010496 <_strtod_l+0xa86>
 8010490:	2f00      	cmp	r7, #0
 8010492:	f43f ad7e 	beq.w	800ff92 <_strtod_l+0x582>
 8010496:	4b61      	ldr	r3, [pc, #388]	; (801061c <_strtod_l+0xc0c>)
 8010498:	2200      	movs	r2, #0
 801049a:	e78c      	b.n	80103b6 <_strtod_l+0x9a6>
 801049c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010618 <_strtod_l+0xc08>
 80104a0:	f04f 0800 	mov.w	r8, #0
 80104a4:	e7e7      	b.n	8010476 <_strtod_l+0xa66>
 80104a6:	4b5c      	ldr	r3, [pc, #368]	; (8010618 <_strtod_l+0xc08>)
 80104a8:	4640      	mov	r0, r8
 80104aa:	4649      	mov	r1, r9
 80104ac:	2200      	movs	r2, #0
 80104ae:	f7f0 f8ab 	bl	8000608 <__aeabi_dmul>
 80104b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104b4:	4680      	mov	r8, r0
 80104b6:	4689      	mov	r9, r1
 80104b8:	b933      	cbnz	r3, 80104c8 <_strtod_l+0xab8>
 80104ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104be:	9012      	str	r0, [sp, #72]	; 0x48
 80104c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80104c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80104c6:	e7dd      	b.n	8010484 <_strtod_l+0xa74>
 80104c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80104cc:	e7f9      	b.n	80104c2 <_strtod_l+0xab2>
 80104ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80104d2:	9b04      	ldr	r3, [sp, #16]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1a8      	bne.n	801042a <_strtod_l+0xa1a>
 80104d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80104de:	0d1b      	lsrs	r3, r3, #20
 80104e0:	051b      	lsls	r3, r3, #20
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d1a1      	bne.n	801042a <_strtod_l+0xa1a>
 80104e6:	4640      	mov	r0, r8
 80104e8:	4649      	mov	r1, r9
 80104ea:	f7f0 fbed 	bl	8000cc8 <__aeabi_d2lz>
 80104ee:	f7f0 f85d 	bl	80005ac <__aeabi_l2d>
 80104f2:	4602      	mov	r2, r0
 80104f4:	460b      	mov	r3, r1
 80104f6:	4640      	mov	r0, r8
 80104f8:	4649      	mov	r1, r9
 80104fa:	f7ef fecd 	bl	8000298 <__aeabi_dsub>
 80104fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010500:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010504:	ea43 030a 	orr.w	r3, r3, sl
 8010508:	4313      	orrs	r3, r2
 801050a:	4680      	mov	r8, r0
 801050c:	4689      	mov	r9, r1
 801050e:	d053      	beq.n	80105b8 <_strtod_l+0xba8>
 8010510:	a335      	add	r3, pc, #212	; (adr r3, 80105e8 <_strtod_l+0xbd8>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7f0 fae9 	bl	8000aec <__aeabi_dcmplt>
 801051a:	2800      	cmp	r0, #0
 801051c:	f47f acce 	bne.w	800febc <_strtod_l+0x4ac>
 8010520:	a333      	add	r3, pc, #204	; (adr r3, 80105f0 <_strtod_l+0xbe0>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	4640      	mov	r0, r8
 8010528:	4649      	mov	r1, r9
 801052a:	f7f0 fafd 	bl	8000b28 <__aeabi_dcmpgt>
 801052e:	2800      	cmp	r0, #0
 8010530:	f43f af7b 	beq.w	801042a <_strtod_l+0xa1a>
 8010534:	e4c2      	b.n	800febc <_strtod_l+0x4ac>
 8010536:	9b04      	ldr	r3, [sp, #16]
 8010538:	b333      	cbz	r3, 8010588 <_strtod_l+0xb78>
 801053a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801053c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010540:	d822      	bhi.n	8010588 <_strtod_l+0xb78>
 8010542:	a32d      	add	r3, pc, #180	; (adr r3, 80105f8 <_strtod_l+0xbe8>)
 8010544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010548:	4640      	mov	r0, r8
 801054a:	4649      	mov	r1, r9
 801054c:	f7f0 fad8 	bl	8000b00 <__aeabi_dcmple>
 8010550:	b1a0      	cbz	r0, 801057c <_strtod_l+0xb6c>
 8010552:	4649      	mov	r1, r9
 8010554:	4640      	mov	r0, r8
 8010556:	f7f0 fb2f 	bl	8000bb8 <__aeabi_d2uiz>
 801055a:	2801      	cmp	r0, #1
 801055c:	bf38      	it	cc
 801055e:	2001      	movcc	r0, #1
 8010560:	f7ef ffd8 	bl	8000514 <__aeabi_ui2d>
 8010564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010566:	4680      	mov	r8, r0
 8010568:	4689      	mov	r9, r1
 801056a:	bb13      	cbnz	r3, 80105b2 <_strtod_l+0xba2>
 801056c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010570:	9014      	str	r0, [sp, #80]	; 0x50
 8010572:	9315      	str	r3, [sp, #84]	; 0x54
 8010574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010578:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801057c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801057e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010580:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010584:	1a9b      	subs	r3, r3, r2
 8010586:	930d      	str	r3, [sp, #52]	; 0x34
 8010588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801058c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010594:	f001 fe8c 	bl	80122b0 <__ulp>
 8010598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801059c:	ec53 2b10 	vmov	r2, r3, d0
 80105a0:	f7f0 f832 	bl	8000608 <__aeabi_dmul>
 80105a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80105a8:	f7ef fe78 	bl	800029c <__adddf3>
 80105ac:	4682      	mov	sl, r0
 80105ae:	468b      	mov	fp, r1
 80105b0:	e78f      	b.n	80104d2 <_strtod_l+0xac2>
 80105b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80105b6:	e7dd      	b.n	8010574 <_strtod_l+0xb64>
 80105b8:	a311      	add	r3, pc, #68	; (adr r3, 8010600 <_strtod_l+0xbf0>)
 80105ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105be:	f7f0 fa95 	bl	8000aec <__aeabi_dcmplt>
 80105c2:	e7b4      	b.n	801052e <_strtod_l+0xb1e>
 80105c4:	2300      	movs	r3, #0
 80105c6:	930e      	str	r3, [sp, #56]	; 0x38
 80105c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80105ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80105cc:	6013      	str	r3, [r2, #0]
 80105ce:	f7ff ba65 	b.w	800fa9c <_strtod_l+0x8c>
 80105d2:	2b65      	cmp	r3, #101	; 0x65
 80105d4:	f43f ab5d 	beq.w	800fc92 <_strtod_l+0x282>
 80105d8:	2b45      	cmp	r3, #69	; 0x45
 80105da:	f43f ab5a 	beq.w	800fc92 <_strtod_l+0x282>
 80105de:	2201      	movs	r2, #1
 80105e0:	f7ff bb92 	b.w	800fd08 <_strtod_l+0x2f8>
 80105e4:	f3af 8000 	nop.w
 80105e8:	94a03595 	.word	0x94a03595
 80105ec:	3fdfffff 	.word	0x3fdfffff
 80105f0:	35afe535 	.word	0x35afe535
 80105f4:	3fe00000 	.word	0x3fe00000
 80105f8:	ffc00000 	.word	0xffc00000
 80105fc:	41dfffff 	.word	0x41dfffff
 8010600:	94a03595 	.word	0x94a03595
 8010604:	3fcfffff 	.word	0x3fcfffff
 8010608:	3ff00000 	.word	0x3ff00000
 801060c:	7ff00000 	.word	0x7ff00000
 8010610:	7fe00000 	.word	0x7fe00000
 8010614:	7c9fffff 	.word	0x7c9fffff
 8010618:	3fe00000 	.word	0x3fe00000
 801061c:	bff00000 	.word	0xbff00000
 8010620:	7fefffff 	.word	0x7fefffff

08010624 <strtod>:
 8010624:	460a      	mov	r2, r1
 8010626:	4601      	mov	r1, r0
 8010628:	4802      	ldr	r0, [pc, #8]	; (8010634 <strtod+0x10>)
 801062a:	4b03      	ldr	r3, [pc, #12]	; (8010638 <strtod+0x14>)
 801062c:	6800      	ldr	r0, [r0, #0]
 801062e:	f7ff b9ef 	b.w	800fa10 <_strtod_l>
 8010632:	bf00      	nop
 8010634:	20000028 	.word	0x20000028
 8010638:	20000090 	.word	0x20000090

0801063c <strtok>:
 801063c:	4b16      	ldr	r3, [pc, #88]	; (8010698 <strtok+0x5c>)
 801063e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010640:	681e      	ldr	r6, [r3, #0]
 8010642:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8010644:	4605      	mov	r5, r0
 8010646:	b9fc      	cbnz	r4, 8010688 <strtok+0x4c>
 8010648:	2050      	movs	r0, #80	; 0x50
 801064a:	9101      	str	r1, [sp, #4]
 801064c:	f001 faaa 	bl	8011ba4 <malloc>
 8010650:	9901      	ldr	r1, [sp, #4]
 8010652:	65b0      	str	r0, [r6, #88]	; 0x58
 8010654:	4602      	mov	r2, r0
 8010656:	b920      	cbnz	r0, 8010662 <strtok+0x26>
 8010658:	4b10      	ldr	r3, [pc, #64]	; (801069c <strtok+0x60>)
 801065a:	4811      	ldr	r0, [pc, #68]	; (80106a0 <strtok+0x64>)
 801065c:	2157      	movs	r1, #87	; 0x57
 801065e:	f000 f883 	bl	8010768 <__assert_func>
 8010662:	e9c0 4400 	strd	r4, r4, [r0]
 8010666:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801066a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801066e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010672:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010676:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801067a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801067e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010682:	6184      	str	r4, [r0, #24]
 8010684:	7704      	strb	r4, [r0, #28]
 8010686:	6244      	str	r4, [r0, #36]	; 0x24
 8010688:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801068a:	2301      	movs	r3, #1
 801068c:	4628      	mov	r0, r5
 801068e:	b002      	add	sp, #8
 8010690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010694:	f000 b806 	b.w	80106a4 <__strtok_r>
 8010698:	20000028 	.word	0x20000028
 801069c:	08016150 	.word	0x08016150
 80106a0:	08016167 	.word	0x08016167

080106a4 <__strtok_r>:
 80106a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106a6:	b908      	cbnz	r0, 80106ac <__strtok_r+0x8>
 80106a8:	6810      	ldr	r0, [r2, #0]
 80106aa:	b188      	cbz	r0, 80106d0 <__strtok_r+0x2c>
 80106ac:	4604      	mov	r4, r0
 80106ae:	4620      	mov	r0, r4
 80106b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80106b4:	460f      	mov	r7, r1
 80106b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80106ba:	b91e      	cbnz	r6, 80106c4 <__strtok_r+0x20>
 80106bc:	b965      	cbnz	r5, 80106d8 <__strtok_r+0x34>
 80106be:	6015      	str	r5, [r2, #0]
 80106c0:	4628      	mov	r0, r5
 80106c2:	e005      	b.n	80106d0 <__strtok_r+0x2c>
 80106c4:	42b5      	cmp	r5, r6
 80106c6:	d1f6      	bne.n	80106b6 <__strtok_r+0x12>
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1f0      	bne.n	80106ae <__strtok_r+0xa>
 80106cc:	6014      	str	r4, [r2, #0]
 80106ce:	7003      	strb	r3, [r0, #0]
 80106d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106d2:	461c      	mov	r4, r3
 80106d4:	e00c      	b.n	80106f0 <__strtok_r+0x4c>
 80106d6:	b915      	cbnz	r5, 80106de <__strtok_r+0x3a>
 80106d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80106dc:	460e      	mov	r6, r1
 80106de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80106e2:	42ab      	cmp	r3, r5
 80106e4:	d1f7      	bne.n	80106d6 <__strtok_r+0x32>
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d0f3      	beq.n	80106d2 <__strtok_r+0x2e>
 80106ea:	2300      	movs	r3, #0
 80106ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80106f0:	6014      	str	r4, [r2, #0]
 80106f2:	e7ed      	b.n	80106d0 <__strtok_r+0x2c>

080106f4 <_vsniprintf_r>:
 80106f4:	b530      	push	{r4, r5, lr}
 80106f6:	1e14      	subs	r4, r2, #0
 80106f8:	4605      	mov	r5, r0
 80106fa:	b09b      	sub	sp, #108	; 0x6c
 80106fc:	4618      	mov	r0, r3
 80106fe:	da05      	bge.n	801070c <_vsniprintf_r+0x18>
 8010700:	238b      	movs	r3, #139	; 0x8b
 8010702:	602b      	str	r3, [r5, #0]
 8010704:	f04f 30ff 	mov.w	r0, #4294967295
 8010708:	b01b      	add	sp, #108	; 0x6c
 801070a:	bd30      	pop	{r4, r5, pc}
 801070c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010710:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010714:	bf14      	ite	ne
 8010716:	f104 33ff 	addne.w	r3, r4, #4294967295
 801071a:	4623      	moveq	r3, r4
 801071c:	9302      	str	r3, [sp, #8]
 801071e:	9305      	str	r3, [sp, #20]
 8010720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010724:	9100      	str	r1, [sp, #0]
 8010726:	9104      	str	r1, [sp, #16]
 8010728:	f8ad 300e 	strh.w	r3, [sp, #14]
 801072c:	4602      	mov	r2, r0
 801072e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010730:	4669      	mov	r1, sp
 8010732:	4628      	mov	r0, r5
 8010734:	f002 f820 	bl	8012778 <_svfiprintf_r>
 8010738:	1c43      	adds	r3, r0, #1
 801073a:	bfbc      	itt	lt
 801073c:	238b      	movlt	r3, #139	; 0x8b
 801073e:	602b      	strlt	r3, [r5, #0]
 8010740:	2c00      	cmp	r4, #0
 8010742:	d0e1      	beq.n	8010708 <_vsniprintf_r+0x14>
 8010744:	9b00      	ldr	r3, [sp, #0]
 8010746:	2200      	movs	r2, #0
 8010748:	701a      	strb	r2, [r3, #0]
 801074a:	e7dd      	b.n	8010708 <_vsniprintf_r+0x14>

0801074c <vsniprintf>:
 801074c:	b507      	push	{r0, r1, r2, lr}
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	4613      	mov	r3, r2
 8010752:	460a      	mov	r2, r1
 8010754:	4601      	mov	r1, r0
 8010756:	4803      	ldr	r0, [pc, #12]	; (8010764 <vsniprintf+0x18>)
 8010758:	6800      	ldr	r0, [r0, #0]
 801075a:	f7ff ffcb 	bl	80106f4 <_vsniprintf_r>
 801075e:	b003      	add	sp, #12
 8010760:	f85d fb04 	ldr.w	pc, [sp], #4
 8010764:	20000028 	.word	0x20000028

08010768 <__assert_func>:
 8010768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801076a:	4614      	mov	r4, r2
 801076c:	461a      	mov	r2, r3
 801076e:	4b09      	ldr	r3, [pc, #36]	; (8010794 <__assert_func+0x2c>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4605      	mov	r5, r0
 8010774:	68d8      	ldr	r0, [r3, #12]
 8010776:	b14c      	cbz	r4, 801078c <__assert_func+0x24>
 8010778:	4b07      	ldr	r3, [pc, #28]	; (8010798 <__assert_func+0x30>)
 801077a:	9100      	str	r1, [sp, #0]
 801077c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010780:	4906      	ldr	r1, [pc, #24]	; (801079c <__assert_func+0x34>)
 8010782:	462b      	mov	r3, r5
 8010784:	f000 fe88 	bl	8011498 <fiprintf>
 8010788:	f002 fb4a 	bl	8012e20 <abort>
 801078c:	4b04      	ldr	r3, [pc, #16]	; (80107a0 <__assert_func+0x38>)
 801078e:	461c      	mov	r4, r3
 8010790:	e7f3      	b.n	801077a <__assert_func+0x12>
 8010792:	bf00      	nop
 8010794:	20000028 	.word	0x20000028
 8010798:	080161c8 	.word	0x080161c8
 801079c:	080161d5 	.word	0x080161d5
 80107a0:	08016203 	.word	0x08016203

080107a4 <quorem>:
 80107a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a8:	6903      	ldr	r3, [r0, #16]
 80107aa:	690c      	ldr	r4, [r1, #16]
 80107ac:	42a3      	cmp	r3, r4
 80107ae:	4607      	mov	r7, r0
 80107b0:	f2c0 8081 	blt.w	80108b6 <quorem+0x112>
 80107b4:	3c01      	subs	r4, #1
 80107b6:	f101 0814 	add.w	r8, r1, #20
 80107ba:	f100 0514 	add.w	r5, r0, #20
 80107be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107c2:	9301      	str	r3, [sp, #4]
 80107c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107cc:	3301      	adds	r3, #1
 80107ce:	429a      	cmp	r2, r3
 80107d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80107d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80107dc:	d331      	bcc.n	8010842 <quorem+0x9e>
 80107de:	f04f 0e00 	mov.w	lr, #0
 80107e2:	4640      	mov	r0, r8
 80107e4:	46ac      	mov	ip, r5
 80107e6:	46f2      	mov	sl, lr
 80107e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80107ec:	b293      	uxth	r3, r2
 80107ee:	fb06 e303 	mla	r3, r6, r3, lr
 80107f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	ebaa 0303 	sub.w	r3, sl, r3
 80107fc:	0c12      	lsrs	r2, r2, #16
 80107fe:	f8dc a000 	ldr.w	sl, [ip]
 8010802:	fb06 e202 	mla	r2, r6, r2, lr
 8010806:	fa13 f38a 	uxtah	r3, r3, sl
 801080a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801080e:	fa1f fa82 	uxth.w	sl, r2
 8010812:	f8dc 2000 	ldr.w	r2, [ip]
 8010816:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801081a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801081e:	b29b      	uxth	r3, r3
 8010820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010824:	4581      	cmp	r9, r0
 8010826:	f84c 3b04 	str.w	r3, [ip], #4
 801082a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801082e:	d2db      	bcs.n	80107e8 <quorem+0x44>
 8010830:	f855 300b 	ldr.w	r3, [r5, fp]
 8010834:	b92b      	cbnz	r3, 8010842 <quorem+0x9e>
 8010836:	9b01      	ldr	r3, [sp, #4]
 8010838:	3b04      	subs	r3, #4
 801083a:	429d      	cmp	r5, r3
 801083c:	461a      	mov	r2, r3
 801083e:	d32e      	bcc.n	801089e <quorem+0xfa>
 8010840:	613c      	str	r4, [r7, #16]
 8010842:	4638      	mov	r0, r7
 8010844:	f001 fc90 	bl	8012168 <__mcmp>
 8010848:	2800      	cmp	r0, #0
 801084a:	db24      	blt.n	8010896 <quorem+0xf2>
 801084c:	3601      	adds	r6, #1
 801084e:	4628      	mov	r0, r5
 8010850:	f04f 0c00 	mov.w	ip, #0
 8010854:	f858 2b04 	ldr.w	r2, [r8], #4
 8010858:	f8d0 e000 	ldr.w	lr, [r0]
 801085c:	b293      	uxth	r3, r2
 801085e:	ebac 0303 	sub.w	r3, ip, r3
 8010862:	0c12      	lsrs	r2, r2, #16
 8010864:	fa13 f38e 	uxtah	r3, r3, lr
 8010868:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801086c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010870:	b29b      	uxth	r3, r3
 8010872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010876:	45c1      	cmp	r9, r8
 8010878:	f840 3b04 	str.w	r3, [r0], #4
 801087c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010880:	d2e8      	bcs.n	8010854 <quorem+0xb0>
 8010882:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801088a:	b922      	cbnz	r2, 8010896 <quorem+0xf2>
 801088c:	3b04      	subs	r3, #4
 801088e:	429d      	cmp	r5, r3
 8010890:	461a      	mov	r2, r3
 8010892:	d30a      	bcc.n	80108aa <quorem+0x106>
 8010894:	613c      	str	r4, [r7, #16]
 8010896:	4630      	mov	r0, r6
 8010898:	b003      	add	sp, #12
 801089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089e:	6812      	ldr	r2, [r2, #0]
 80108a0:	3b04      	subs	r3, #4
 80108a2:	2a00      	cmp	r2, #0
 80108a4:	d1cc      	bne.n	8010840 <quorem+0x9c>
 80108a6:	3c01      	subs	r4, #1
 80108a8:	e7c7      	b.n	801083a <quorem+0x96>
 80108aa:	6812      	ldr	r2, [r2, #0]
 80108ac:	3b04      	subs	r3, #4
 80108ae:	2a00      	cmp	r2, #0
 80108b0:	d1f0      	bne.n	8010894 <quorem+0xf0>
 80108b2:	3c01      	subs	r4, #1
 80108b4:	e7eb      	b.n	801088e <quorem+0xea>
 80108b6:	2000      	movs	r0, #0
 80108b8:	e7ee      	b.n	8010898 <quorem+0xf4>
 80108ba:	0000      	movs	r0, r0
 80108bc:	0000      	movs	r0, r0
	...

080108c0 <_dtoa_r>:
 80108c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c4:	ed2d 8b02 	vpush	{d8}
 80108c8:	ec57 6b10 	vmov	r6, r7, d0
 80108cc:	b095      	sub	sp, #84	; 0x54
 80108ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80108d4:	9105      	str	r1, [sp, #20]
 80108d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80108da:	4604      	mov	r4, r0
 80108dc:	9209      	str	r2, [sp, #36]	; 0x24
 80108de:	930f      	str	r3, [sp, #60]	; 0x3c
 80108e0:	b975      	cbnz	r5, 8010900 <_dtoa_r+0x40>
 80108e2:	2010      	movs	r0, #16
 80108e4:	f001 f95e 	bl	8011ba4 <malloc>
 80108e8:	4602      	mov	r2, r0
 80108ea:	6260      	str	r0, [r4, #36]	; 0x24
 80108ec:	b920      	cbnz	r0, 80108f8 <_dtoa_r+0x38>
 80108ee:	4bb2      	ldr	r3, [pc, #712]	; (8010bb8 <_dtoa_r+0x2f8>)
 80108f0:	21ea      	movs	r1, #234	; 0xea
 80108f2:	48b2      	ldr	r0, [pc, #712]	; (8010bbc <_dtoa_r+0x2fc>)
 80108f4:	f7ff ff38 	bl	8010768 <__assert_func>
 80108f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108fc:	6005      	str	r5, [r0, #0]
 80108fe:	60c5      	str	r5, [r0, #12]
 8010900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010902:	6819      	ldr	r1, [r3, #0]
 8010904:	b151      	cbz	r1, 801091c <_dtoa_r+0x5c>
 8010906:	685a      	ldr	r2, [r3, #4]
 8010908:	604a      	str	r2, [r1, #4]
 801090a:	2301      	movs	r3, #1
 801090c:	4093      	lsls	r3, r2
 801090e:	608b      	str	r3, [r1, #8]
 8010910:	4620      	mov	r0, r4
 8010912:	f001 f9a1 	bl	8011c58 <_Bfree>
 8010916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010918:	2200      	movs	r2, #0
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	1e3b      	subs	r3, r7, #0
 801091e:	bfb9      	ittee	lt
 8010920:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010924:	9303      	strlt	r3, [sp, #12]
 8010926:	2300      	movge	r3, #0
 8010928:	f8c8 3000 	strge.w	r3, [r8]
 801092c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010930:	4ba3      	ldr	r3, [pc, #652]	; (8010bc0 <_dtoa_r+0x300>)
 8010932:	bfbc      	itt	lt
 8010934:	2201      	movlt	r2, #1
 8010936:	f8c8 2000 	strlt.w	r2, [r8]
 801093a:	ea33 0309 	bics.w	r3, r3, r9
 801093e:	d11b      	bne.n	8010978 <_dtoa_r+0xb8>
 8010940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010942:	f242 730f 	movw	r3, #9999	; 0x270f
 8010946:	6013      	str	r3, [r2, #0]
 8010948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801094c:	4333      	orrs	r3, r6
 801094e:	f000 857a 	beq.w	8011446 <_dtoa_r+0xb86>
 8010952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010954:	b963      	cbnz	r3, 8010970 <_dtoa_r+0xb0>
 8010956:	4b9b      	ldr	r3, [pc, #620]	; (8010bc4 <_dtoa_r+0x304>)
 8010958:	e024      	b.n	80109a4 <_dtoa_r+0xe4>
 801095a:	4b9b      	ldr	r3, [pc, #620]	; (8010bc8 <_dtoa_r+0x308>)
 801095c:	9300      	str	r3, [sp, #0]
 801095e:	3308      	adds	r3, #8
 8010960:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010962:	6013      	str	r3, [r2, #0]
 8010964:	9800      	ldr	r0, [sp, #0]
 8010966:	b015      	add	sp, #84	; 0x54
 8010968:	ecbd 8b02 	vpop	{d8}
 801096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010970:	4b94      	ldr	r3, [pc, #592]	; (8010bc4 <_dtoa_r+0x304>)
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	3303      	adds	r3, #3
 8010976:	e7f3      	b.n	8010960 <_dtoa_r+0xa0>
 8010978:	ed9d 7b02 	vldr	d7, [sp, #8]
 801097c:	2200      	movs	r2, #0
 801097e:	ec51 0b17 	vmov	r0, r1, d7
 8010982:	2300      	movs	r3, #0
 8010984:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010988:	f7f0 f8a6 	bl	8000ad8 <__aeabi_dcmpeq>
 801098c:	4680      	mov	r8, r0
 801098e:	b158      	cbz	r0, 80109a8 <_dtoa_r+0xe8>
 8010990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010992:	2301      	movs	r3, #1
 8010994:	6013      	str	r3, [r2, #0]
 8010996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 8551 	beq.w	8011440 <_dtoa_r+0xb80>
 801099e:	488b      	ldr	r0, [pc, #556]	; (8010bcc <_dtoa_r+0x30c>)
 80109a0:	6018      	str	r0, [r3, #0]
 80109a2:	1e43      	subs	r3, r0, #1
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	e7dd      	b.n	8010964 <_dtoa_r+0xa4>
 80109a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80109ac:	aa12      	add	r2, sp, #72	; 0x48
 80109ae:	a913      	add	r1, sp, #76	; 0x4c
 80109b0:	4620      	mov	r0, r4
 80109b2:	f001 fcf9 	bl	80123a8 <__d2b>
 80109b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80109ba:	4683      	mov	fp, r0
 80109bc:	2d00      	cmp	r5, #0
 80109be:	d07c      	beq.n	8010aba <_dtoa_r+0x1fa>
 80109c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80109c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80109ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80109d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80109d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80109da:	4b7d      	ldr	r3, [pc, #500]	; (8010bd0 <_dtoa_r+0x310>)
 80109dc:	2200      	movs	r2, #0
 80109de:	4630      	mov	r0, r6
 80109e0:	4639      	mov	r1, r7
 80109e2:	f7ef fc59 	bl	8000298 <__aeabi_dsub>
 80109e6:	a36e      	add	r3, pc, #440	; (adr r3, 8010ba0 <_dtoa_r+0x2e0>)
 80109e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ec:	f7ef fe0c 	bl	8000608 <__aeabi_dmul>
 80109f0:	a36d      	add	r3, pc, #436	; (adr r3, 8010ba8 <_dtoa_r+0x2e8>)
 80109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f6:	f7ef fc51 	bl	800029c <__adddf3>
 80109fa:	4606      	mov	r6, r0
 80109fc:	4628      	mov	r0, r5
 80109fe:	460f      	mov	r7, r1
 8010a00:	f7ef fd98 	bl	8000534 <__aeabi_i2d>
 8010a04:	a36a      	add	r3, pc, #424	; (adr r3, 8010bb0 <_dtoa_r+0x2f0>)
 8010a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a0a:	f7ef fdfd 	bl	8000608 <__aeabi_dmul>
 8010a0e:	4602      	mov	r2, r0
 8010a10:	460b      	mov	r3, r1
 8010a12:	4630      	mov	r0, r6
 8010a14:	4639      	mov	r1, r7
 8010a16:	f7ef fc41 	bl	800029c <__adddf3>
 8010a1a:	4606      	mov	r6, r0
 8010a1c:	460f      	mov	r7, r1
 8010a1e:	f7f0 f8a3 	bl	8000b68 <__aeabi_d2iz>
 8010a22:	2200      	movs	r2, #0
 8010a24:	4682      	mov	sl, r0
 8010a26:	2300      	movs	r3, #0
 8010a28:	4630      	mov	r0, r6
 8010a2a:	4639      	mov	r1, r7
 8010a2c:	f7f0 f85e 	bl	8000aec <__aeabi_dcmplt>
 8010a30:	b148      	cbz	r0, 8010a46 <_dtoa_r+0x186>
 8010a32:	4650      	mov	r0, sl
 8010a34:	f7ef fd7e 	bl	8000534 <__aeabi_i2d>
 8010a38:	4632      	mov	r2, r6
 8010a3a:	463b      	mov	r3, r7
 8010a3c:	f7f0 f84c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a40:	b908      	cbnz	r0, 8010a46 <_dtoa_r+0x186>
 8010a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a46:	f1ba 0f16 	cmp.w	sl, #22
 8010a4a:	d854      	bhi.n	8010af6 <_dtoa_r+0x236>
 8010a4c:	4b61      	ldr	r3, [pc, #388]	; (8010bd4 <_dtoa_r+0x314>)
 8010a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a5a:	f7f0 f847 	bl	8000aec <__aeabi_dcmplt>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d04b      	beq.n	8010afa <_dtoa_r+0x23a>
 8010a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a66:	2300      	movs	r3, #0
 8010a68:	930e      	str	r3, [sp, #56]	; 0x38
 8010a6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a6c:	1b5d      	subs	r5, r3, r5
 8010a6e:	1e6b      	subs	r3, r5, #1
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	bf43      	ittte	mi
 8010a74:	2300      	movmi	r3, #0
 8010a76:	f1c5 0801 	rsbmi	r8, r5, #1
 8010a7a:	9304      	strmi	r3, [sp, #16]
 8010a7c:	f04f 0800 	movpl.w	r8, #0
 8010a80:	f1ba 0f00 	cmp.w	sl, #0
 8010a84:	db3b      	blt.n	8010afe <_dtoa_r+0x23e>
 8010a86:	9b04      	ldr	r3, [sp, #16]
 8010a88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010a8c:	4453      	add	r3, sl
 8010a8e:	9304      	str	r3, [sp, #16]
 8010a90:	2300      	movs	r3, #0
 8010a92:	9306      	str	r3, [sp, #24]
 8010a94:	9b05      	ldr	r3, [sp, #20]
 8010a96:	2b09      	cmp	r3, #9
 8010a98:	d869      	bhi.n	8010b6e <_dtoa_r+0x2ae>
 8010a9a:	2b05      	cmp	r3, #5
 8010a9c:	bfc4      	itt	gt
 8010a9e:	3b04      	subgt	r3, #4
 8010aa0:	9305      	strgt	r3, [sp, #20]
 8010aa2:	9b05      	ldr	r3, [sp, #20]
 8010aa4:	f1a3 0302 	sub.w	r3, r3, #2
 8010aa8:	bfcc      	ite	gt
 8010aaa:	2500      	movgt	r5, #0
 8010aac:	2501      	movle	r5, #1
 8010aae:	2b03      	cmp	r3, #3
 8010ab0:	d869      	bhi.n	8010b86 <_dtoa_r+0x2c6>
 8010ab2:	e8df f003 	tbb	[pc, r3]
 8010ab6:	4e2c      	.short	0x4e2c
 8010ab8:	5a4c      	.short	0x5a4c
 8010aba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010abe:	441d      	add	r5, r3
 8010ac0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010ac4:	2b20      	cmp	r3, #32
 8010ac6:	bfc1      	itttt	gt
 8010ac8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010acc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010ad0:	fa09 f303 	lslgt.w	r3, r9, r3
 8010ad4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010ad8:	bfda      	itte	le
 8010ada:	f1c3 0320 	rsble	r3, r3, #32
 8010ade:	fa06 f003 	lslle.w	r0, r6, r3
 8010ae2:	4318      	orrgt	r0, r3
 8010ae4:	f7ef fd16 	bl	8000514 <__aeabi_ui2d>
 8010ae8:	2301      	movs	r3, #1
 8010aea:	4606      	mov	r6, r0
 8010aec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010af0:	3d01      	subs	r5, #1
 8010af2:	9310      	str	r3, [sp, #64]	; 0x40
 8010af4:	e771      	b.n	80109da <_dtoa_r+0x11a>
 8010af6:	2301      	movs	r3, #1
 8010af8:	e7b6      	b.n	8010a68 <_dtoa_r+0x1a8>
 8010afa:	900e      	str	r0, [sp, #56]	; 0x38
 8010afc:	e7b5      	b.n	8010a6a <_dtoa_r+0x1aa>
 8010afe:	f1ca 0300 	rsb	r3, sl, #0
 8010b02:	9306      	str	r3, [sp, #24]
 8010b04:	2300      	movs	r3, #0
 8010b06:	eba8 080a 	sub.w	r8, r8, sl
 8010b0a:	930d      	str	r3, [sp, #52]	; 0x34
 8010b0c:	e7c2      	b.n	8010a94 <_dtoa_r+0x1d4>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	9308      	str	r3, [sp, #32]
 8010b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	dc39      	bgt.n	8010b8c <_dtoa_r+0x2cc>
 8010b18:	f04f 0901 	mov.w	r9, #1
 8010b1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b20:	464b      	mov	r3, r9
 8010b22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010b26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010b28:	2200      	movs	r2, #0
 8010b2a:	6042      	str	r2, [r0, #4]
 8010b2c:	2204      	movs	r2, #4
 8010b2e:	f102 0614 	add.w	r6, r2, #20
 8010b32:	429e      	cmp	r6, r3
 8010b34:	6841      	ldr	r1, [r0, #4]
 8010b36:	d92f      	bls.n	8010b98 <_dtoa_r+0x2d8>
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f001 f84d 	bl	8011bd8 <_Balloc>
 8010b3e:	9000      	str	r0, [sp, #0]
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d14b      	bne.n	8010bdc <_dtoa_r+0x31c>
 8010b44:	4b24      	ldr	r3, [pc, #144]	; (8010bd8 <_dtoa_r+0x318>)
 8010b46:	4602      	mov	r2, r0
 8010b48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b4c:	e6d1      	b.n	80108f2 <_dtoa_r+0x32>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e7de      	b.n	8010b10 <_dtoa_r+0x250>
 8010b52:	2300      	movs	r3, #0
 8010b54:	9308      	str	r3, [sp, #32]
 8010b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b58:	eb0a 0903 	add.w	r9, sl, r3
 8010b5c:	f109 0301 	add.w	r3, r9, #1
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	9301      	str	r3, [sp, #4]
 8010b64:	bfb8      	it	lt
 8010b66:	2301      	movlt	r3, #1
 8010b68:	e7dd      	b.n	8010b26 <_dtoa_r+0x266>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e7f2      	b.n	8010b54 <_dtoa_r+0x294>
 8010b6e:	2501      	movs	r5, #1
 8010b70:	2300      	movs	r3, #0
 8010b72:	9305      	str	r3, [sp, #20]
 8010b74:	9508      	str	r5, [sp, #32]
 8010b76:	f04f 39ff 	mov.w	r9, #4294967295
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b80:	2312      	movs	r3, #18
 8010b82:	9209      	str	r2, [sp, #36]	; 0x24
 8010b84:	e7cf      	b.n	8010b26 <_dtoa_r+0x266>
 8010b86:	2301      	movs	r3, #1
 8010b88:	9308      	str	r3, [sp, #32]
 8010b8a:	e7f4      	b.n	8010b76 <_dtoa_r+0x2b6>
 8010b8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b94:	464b      	mov	r3, r9
 8010b96:	e7c6      	b.n	8010b26 <_dtoa_r+0x266>
 8010b98:	3101      	adds	r1, #1
 8010b9a:	6041      	str	r1, [r0, #4]
 8010b9c:	0052      	lsls	r2, r2, #1
 8010b9e:	e7c6      	b.n	8010b2e <_dtoa_r+0x26e>
 8010ba0:	636f4361 	.word	0x636f4361
 8010ba4:	3fd287a7 	.word	0x3fd287a7
 8010ba8:	8b60c8b3 	.word	0x8b60c8b3
 8010bac:	3fc68a28 	.word	0x3fc68a28
 8010bb0:	509f79fb 	.word	0x509f79fb
 8010bb4:	3fd34413 	.word	0x3fd34413
 8010bb8:	08016150 	.word	0x08016150
 8010bbc:	08016211 	.word	0x08016211
 8010bc0:	7ff00000 	.word	0x7ff00000
 8010bc4:	0801620d 	.word	0x0801620d
 8010bc8:	08016204 	.word	0x08016204
 8010bcc:	080160d9 	.word	0x080160d9
 8010bd0:	3ff80000 	.word	0x3ff80000
 8010bd4:	08016388 	.word	0x08016388
 8010bd8:	08016270 	.word	0x08016270
 8010bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bde:	9a00      	ldr	r2, [sp, #0]
 8010be0:	601a      	str	r2, [r3, #0]
 8010be2:	9b01      	ldr	r3, [sp, #4]
 8010be4:	2b0e      	cmp	r3, #14
 8010be6:	f200 80ad 	bhi.w	8010d44 <_dtoa_r+0x484>
 8010bea:	2d00      	cmp	r5, #0
 8010bec:	f000 80aa 	beq.w	8010d44 <_dtoa_r+0x484>
 8010bf0:	f1ba 0f00 	cmp.w	sl, #0
 8010bf4:	dd36      	ble.n	8010c64 <_dtoa_r+0x3a4>
 8010bf6:	4ac3      	ldr	r2, [pc, #780]	; (8010f04 <_dtoa_r+0x644>)
 8010bf8:	f00a 030f 	and.w	r3, sl, #15
 8010bfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c00:	ed93 7b00 	vldr	d7, [r3]
 8010c04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010c08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010c0c:	eeb0 8a47 	vmov.f32	s16, s14
 8010c10:	eef0 8a67 	vmov.f32	s17, s15
 8010c14:	d016      	beq.n	8010c44 <_dtoa_r+0x384>
 8010c16:	4bbc      	ldr	r3, [pc, #752]	; (8010f08 <_dtoa_r+0x648>)
 8010c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c20:	f7ef fe1c 	bl	800085c <__aeabi_ddiv>
 8010c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c28:	f007 070f 	and.w	r7, r7, #15
 8010c2c:	2503      	movs	r5, #3
 8010c2e:	4eb6      	ldr	r6, [pc, #728]	; (8010f08 <_dtoa_r+0x648>)
 8010c30:	b957      	cbnz	r7, 8010c48 <_dtoa_r+0x388>
 8010c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c36:	ec53 2b18 	vmov	r2, r3, d8
 8010c3a:	f7ef fe0f 	bl	800085c <__aeabi_ddiv>
 8010c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c42:	e029      	b.n	8010c98 <_dtoa_r+0x3d8>
 8010c44:	2502      	movs	r5, #2
 8010c46:	e7f2      	b.n	8010c2e <_dtoa_r+0x36e>
 8010c48:	07f9      	lsls	r1, r7, #31
 8010c4a:	d508      	bpl.n	8010c5e <_dtoa_r+0x39e>
 8010c4c:	ec51 0b18 	vmov	r0, r1, d8
 8010c50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c54:	f7ef fcd8 	bl	8000608 <__aeabi_dmul>
 8010c58:	ec41 0b18 	vmov	d8, r0, r1
 8010c5c:	3501      	adds	r5, #1
 8010c5e:	107f      	asrs	r7, r7, #1
 8010c60:	3608      	adds	r6, #8
 8010c62:	e7e5      	b.n	8010c30 <_dtoa_r+0x370>
 8010c64:	f000 80a6 	beq.w	8010db4 <_dtoa_r+0x4f4>
 8010c68:	f1ca 0600 	rsb	r6, sl, #0
 8010c6c:	4ba5      	ldr	r3, [pc, #660]	; (8010f04 <_dtoa_r+0x644>)
 8010c6e:	4fa6      	ldr	r7, [pc, #664]	; (8010f08 <_dtoa_r+0x648>)
 8010c70:	f006 020f 	and.w	r2, r6, #15
 8010c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c80:	f7ef fcc2 	bl	8000608 <__aeabi_dmul>
 8010c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c88:	1136      	asrs	r6, r6, #4
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	2502      	movs	r5, #2
 8010c8e:	2e00      	cmp	r6, #0
 8010c90:	f040 8085 	bne.w	8010d9e <_dtoa_r+0x4de>
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1d2      	bne.n	8010c3e <_dtoa_r+0x37e>
 8010c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f000 808c 	beq.w	8010db8 <_dtoa_r+0x4f8>
 8010ca0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ca4:	4b99      	ldr	r3, [pc, #612]	; (8010f0c <_dtoa_r+0x64c>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	4630      	mov	r0, r6
 8010caa:	4639      	mov	r1, r7
 8010cac:	f7ef ff1e 	bl	8000aec <__aeabi_dcmplt>
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	f000 8081 	beq.w	8010db8 <_dtoa_r+0x4f8>
 8010cb6:	9b01      	ldr	r3, [sp, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d07d      	beq.n	8010db8 <_dtoa_r+0x4f8>
 8010cbc:	f1b9 0f00 	cmp.w	r9, #0
 8010cc0:	dd3c      	ble.n	8010d3c <_dtoa_r+0x47c>
 8010cc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010cc6:	9307      	str	r3, [sp, #28]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	4b91      	ldr	r3, [pc, #580]	; (8010f10 <_dtoa_r+0x650>)
 8010ccc:	4630      	mov	r0, r6
 8010cce:	4639      	mov	r1, r7
 8010cd0:	f7ef fc9a 	bl	8000608 <__aeabi_dmul>
 8010cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cd8:	3501      	adds	r5, #1
 8010cda:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010cde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	f7ef fc26 	bl	8000534 <__aeabi_i2d>
 8010ce8:	4632      	mov	r2, r6
 8010cea:	463b      	mov	r3, r7
 8010cec:	f7ef fc8c 	bl	8000608 <__aeabi_dmul>
 8010cf0:	4b88      	ldr	r3, [pc, #544]	; (8010f14 <_dtoa_r+0x654>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f7ef fad2 	bl	800029c <__adddf3>
 8010cf8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d00:	9303      	str	r3, [sp, #12]
 8010d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d15c      	bne.n	8010dc2 <_dtoa_r+0x502>
 8010d08:	4b83      	ldr	r3, [pc, #524]	; (8010f18 <_dtoa_r+0x658>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	4639      	mov	r1, r7
 8010d10:	f7ef fac2 	bl	8000298 <__aeabi_dsub>
 8010d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d18:	4606      	mov	r6, r0
 8010d1a:	460f      	mov	r7, r1
 8010d1c:	f7ef ff04 	bl	8000b28 <__aeabi_dcmpgt>
 8010d20:	2800      	cmp	r0, #0
 8010d22:	f040 8296 	bne.w	8011252 <_dtoa_r+0x992>
 8010d26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d30:	4639      	mov	r1, r7
 8010d32:	f7ef fedb 	bl	8000aec <__aeabi_dcmplt>
 8010d36:	2800      	cmp	r0, #0
 8010d38:	f040 8288 	bne.w	801124c <_dtoa_r+0x98c>
 8010d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010d40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f2c0 8158 	blt.w	8010ffc <_dtoa_r+0x73c>
 8010d4c:	f1ba 0f0e 	cmp.w	sl, #14
 8010d50:	f300 8154 	bgt.w	8010ffc <_dtoa_r+0x73c>
 8010d54:	4b6b      	ldr	r3, [pc, #428]	; (8010f04 <_dtoa_r+0x644>)
 8010d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010d5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f280 80e3 	bge.w	8010f2c <_dtoa_r+0x66c>
 8010d66:	9b01      	ldr	r3, [sp, #4]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f300 80df 	bgt.w	8010f2c <_dtoa_r+0x66c>
 8010d6e:	f040 826d 	bne.w	801124c <_dtoa_r+0x98c>
 8010d72:	4b69      	ldr	r3, [pc, #420]	; (8010f18 <_dtoa_r+0x658>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	4640      	mov	r0, r8
 8010d78:	4649      	mov	r1, r9
 8010d7a:	f7ef fc45 	bl	8000608 <__aeabi_dmul>
 8010d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d82:	f7ef fec7 	bl	8000b14 <__aeabi_dcmpge>
 8010d86:	9e01      	ldr	r6, [sp, #4]
 8010d88:	4637      	mov	r7, r6
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	f040 8243 	bne.w	8011216 <_dtoa_r+0x956>
 8010d90:	9d00      	ldr	r5, [sp, #0]
 8010d92:	2331      	movs	r3, #49	; 0x31
 8010d94:	f805 3b01 	strb.w	r3, [r5], #1
 8010d98:	f10a 0a01 	add.w	sl, sl, #1
 8010d9c:	e23f      	b.n	801121e <_dtoa_r+0x95e>
 8010d9e:	07f2      	lsls	r2, r6, #31
 8010da0:	d505      	bpl.n	8010dae <_dtoa_r+0x4ee>
 8010da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010da6:	f7ef fc2f 	bl	8000608 <__aeabi_dmul>
 8010daa:	3501      	adds	r5, #1
 8010dac:	2301      	movs	r3, #1
 8010dae:	1076      	asrs	r6, r6, #1
 8010db0:	3708      	adds	r7, #8
 8010db2:	e76c      	b.n	8010c8e <_dtoa_r+0x3ce>
 8010db4:	2502      	movs	r5, #2
 8010db6:	e76f      	b.n	8010c98 <_dtoa_r+0x3d8>
 8010db8:	9b01      	ldr	r3, [sp, #4]
 8010dba:	f8cd a01c 	str.w	sl, [sp, #28]
 8010dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8010dc0:	e78d      	b.n	8010cde <_dtoa_r+0x41e>
 8010dc2:	9900      	ldr	r1, [sp, #0]
 8010dc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010dc8:	4b4e      	ldr	r3, [pc, #312]	; (8010f04 <_dtoa_r+0x644>)
 8010dca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010dce:	4401      	add	r1, r0
 8010dd0:	9102      	str	r1, [sp, #8]
 8010dd2:	9908      	ldr	r1, [sp, #32]
 8010dd4:	eeb0 8a47 	vmov.f32	s16, s14
 8010dd8:	eef0 8a67 	vmov.f32	s17, s15
 8010ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010de0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010de4:	2900      	cmp	r1, #0
 8010de6:	d045      	beq.n	8010e74 <_dtoa_r+0x5b4>
 8010de8:	494c      	ldr	r1, [pc, #304]	; (8010f1c <_dtoa_r+0x65c>)
 8010dea:	2000      	movs	r0, #0
 8010dec:	f7ef fd36 	bl	800085c <__aeabi_ddiv>
 8010df0:	ec53 2b18 	vmov	r2, r3, d8
 8010df4:	f7ef fa50 	bl	8000298 <__aeabi_dsub>
 8010df8:	9d00      	ldr	r5, [sp, #0]
 8010dfa:	ec41 0b18 	vmov	d8, r0, r1
 8010dfe:	4639      	mov	r1, r7
 8010e00:	4630      	mov	r0, r6
 8010e02:	f7ef feb1 	bl	8000b68 <__aeabi_d2iz>
 8010e06:	900c      	str	r0, [sp, #48]	; 0x30
 8010e08:	f7ef fb94 	bl	8000534 <__aeabi_i2d>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	460b      	mov	r3, r1
 8010e10:	4630      	mov	r0, r6
 8010e12:	4639      	mov	r1, r7
 8010e14:	f7ef fa40 	bl	8000298 <__aeabi_dsub>
 8010e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e1a:	3330      	adds	r3, #48	; 0x30
 8010e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8010e20:	ec53 2b18 	vmov	r2, r3, d8
 8010e24:	4606      	mov	r6, r0
 8010e26:	460f      	mov	r7, r1
 8010e28:	f7ef fe60 	bl	8000aec <__aeabi_dcmplt>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	d165      	bne.n	8010efc <_dtoa_r+0x63c>
 8010e30:	4632      	mov	r2, r6
 8010e32:	463b      	mov	r3, r7
 8010e34:	4935      	ldr	r1, [pc, #212]	; (8010f0c <_dtoa_r+0x64c>)
 8010e36:	2000      	movs	r0, #0
 8010e38:	f7ef fa2e 	bl	8000298 <__aeabi_dsub>
 8010e3c:	ec53 2b18 	vmov	r2, r3, d8
 8010e40:	f7ef fe54 	bl	8000aec <__aeabi_dcmplt>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	f040 80b9 	bne.w	8010fbc <_dtoa_r+0x6fc>
 8010e4a:	9b02      	ldr	r3, [sp, #8]
 8010e4c:	429d      	cmp	r5, r3
 8010e4e:	f43f af75 	beq.w	8010d3c <_dtoa_r+0x47c>
 8010e52:	4b2f      	ldr	r3, [pc, #188]	; (8010f10 <_dtoa_r+0x650>)
 8010e54:	ec51 0b18 	vmov	r0, r1, d8
 8010e58:	2200      	movs	r2, #0
 8010e5a:	f7ef fbd5 	bl	8000608 <__aeabi_dmul>
 8010e5e:	4b2c      	ldr	r3, [pc, #176]	; (8010f10 <_dtoa_r+0x650>)
 8010e60:	ec41 0b18 	vmov	d8, r0, r1
 8010e64:	2200      	movs	r2, #0
 8010e66:	4630      	mov	r0, r6
 8010e68:	4639      	mov	r1, r7
 8010e6a:	f7ef fbcd 	bl	8000608 <__aeabi_dmul>
 8010e6e:	4606      	mov	r6, r0
 8010e70:	460f      	mov	r7, r1
 8010e72:	e7c4      	b.n	8010dfe <_dtoa_r+0x53e>
 8010e74:	ec51 0b17 	vmov	r0, r1, d7
 8010e78:	f7ef fbc6 	bl	8000608 <__aeabi_dmul>
 8010e7c:	9b02      	ldr	r3, [sp, #8]
 8010e7e:	9d00      	ldr	r5, [sp, #0]
 8010e80:	930c      	str	r3, [sp, #48]	; 0x30
 8010e82:	ec41 0b18 	vmov	d8, r0, r1
 8010e86:	4639      	mov	r1, r7
 8010e88:	4630      	mov	r0, r6
 8010e8a:	f7ef fe6d 	bl	8000b68 <__aeabi_d2iz>
 8010e8e:	9011      	str	r0, [sp, #68]	; 0x44
 8010e90:	f7ef fb50 	bl	8000534 <__aeabi_i2d>
 8010e94:	4602      	mov	r2, r0
 8010e96:	460b      	mov	r3, r1
 8010e98:	4630      	mov	r0, r6
 8010e9a:	4639      	mov	r1, r7
 8010e9c:	f7ef f9fc 	bl	8000298 <__aeabi_dsub>
 8010ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ea2:	3330      	adds	r3, #48	; 0x30
 8010ea4:	f805 3b01 	strb.w	r3, [r5], #1
 8010ea8:	9b02      	ldr	r3, [sp, #8]
 8010eaa:	429d      	cmp	r5, r3
 8010eac:	4606      	mov	r6, r0
 8010eae:	460f      	mov	r7, r1
 8010eb0:	f04f 0200 	mov.w	r2, #0
 8010eb4:	d134      	bne.n	8010f20 <_dtoa_r+0x660>
 8010eb6:	4b19      	ldr	r3, [pc, #100]	; (8010f1c <_dtoa_r+0x65c>)
 8010eb8:	ec51 0b18 	vmov	r0, r1, d8
 8010ebc:	f7ef f9ee 	bl	800029c <__adddf3>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	4639      	mov	r1, r7
 8010ec8:	f7ef fe2e 	bl	8000b28 <__aeabi_dcmpgt>
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	d175      	bne.n	8010fbc <_dtoa_r+0x6fc>
 8010ed0:	ec53 2b18 	vmov	r2, r3, d8
 8010ed4:	4911      	ldr	r1, [pc, #68]	; (8010f1c <_dtoa_r+0x65c>)
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	f7ef f9de 	bl	8000298 <__aeabi_dsub>
 8010edc:	4602      	mov	r2, r0
 8010ede:	460b      	mov	r3, r1
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	4639      	mov	r1, r7
 8010ee4:	f7ef fe02 	bl	8000aec <__aeabi_dcmplt>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	f43f af27 	beq.w	8010d3c <_dtoa_r+0x47c>
 8010eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ef0:	1e6b      	subs	r3, r5, #1
 8010ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8010ef4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010ef8:	2b30      	cmp	r3, #48	; 0x30
 8010efa:	d0f8      	beq.n	8010eee <_dtoa_r+0x62e>
 8010efc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010f00:	e04a      	b.n	8010f98 <_dtoa_r+0x6d8>
 8010f02:	bf00      	nop
 8010f04:	08016388 	.word	0x08016388
 8010f08:	08016360 	.word	0x08016360
 8010f0c:	3ff00000 	.word	0x3ff00000
 8010f10:	40240000 	.word	0x40240000
 8010f14:	401c0000 	.word	0x401c0000
 8010f18:	40140000 	.word	0x40140000
 8010f1c:	3fe00000 	.word	0x3fe00000
 8010f20:	4baf      	ldr	r3, [pc, #700]	; (80111e0 <_dtoa_r+0x920>)
 8010f22:	f7ef fb71 	bl	8000608 <__aeabi_dmul>
 8010f26:	4606      	mov	r6, r0
 8010f28:	460f      	mov	r7, r1
 8010f2a:	e7ac      	b.n	8010e86 <_dtoa_r+0x5c6>
 8010f2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010f30:	9d00      	ldr	r5, [sp, #0]
 8010f32:	4642      	mov	r2, r8
 8010f34:	464b      	mov	r3, r9
 8010f36:	4630      	mov	r0, r6
 8010f38:	4639      	mov	r1, r7
 8010f3a:	f7ef fc8f 	bl	800085c <__aeabi_ddiv>
 8010f3e:	f7ef fe13 	bl	8000b68 <__aeabi_d2iz>
 8010f42:	9002      	str	r0, [sp, #8]
 8010f44:	f7ef faf6 	bl	8000534 <__aeabi_i2d>
 8010f48:	4642      	mov	r2, r8
 8010f4a:	464b      	mov	r3, r9
 8010f4c:	f7ef fb5c 	bl	8000608 <__aeabi_dmul>
 8010f50:	4602      	mov	r2, r0
 8010f52:	460b      	mov	r3, r1
 8010f54:	4630      	mov	r0, r6
 8010f56:	4639      	mov	r1, r7
 8010f58:	f7ef f99e 	bl	8000298 <__aeabi_dsub>
 8010f5c:	9e02      	ldr	r6, [sp, #8]
 8010f5e:	9f01      	ldr	r7, [sp, #4]
 8010f60:	3630      	adds	r6, #48	; 0x30
 8010f62:	f805 6b01 	strb.w	r6, [r5], #1
 8010f66:	9e00      	ldr	r6, [sp, #0]
 8010f68:	1bae      	subs	r6, r5, r6
 8010f6a:	42b7      	cmp	r7, r6
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	460b      	mov	r3, r1
 8010f70:	d137      	bne.n	8010fe2 <_dtoa_r+0x722>
 8010f72:	f7ef f993 	bl	800029c <__adddf3>
 8010f76:	4642      	mov	r2, r8
 8010f78:	464b      	mov	r3, r9
 8010f7a:	4606      	mov	r6, r0
 8010f7c:	460f      	mov	r7, r1
 8010f7e:	f7ef fdd3 	bl	8000b28 <__aeabi_dcmpgt>
 8010f82:	b9c8      	cbnz	r0, 8010fb8 <_dtoa_r+0x6f8>
 8010f84:	4642      	mov	r2, r8
 8010f86:	464b      	mov	r3, r9
 8010f88:	4630      	mov	r0, r6
 8010f8a:	4639      	mov	r1, r7
 8010f8c:	f7ef fda4 	bl	8000ad8 <__aeabi_dcmpeq>
 8010f90:	b110      	cbz	r0, 8010f98 <_dtoa_r+0x6d8>
 8010f92:	9b02      	ldr	r3, [sp, #8]
 8010f94:	07d9      	lsls	r1, r3, #31
 8010f96:	d40f      	bmi.n	8010fb8 <_dtoa_r+0x6f8>
 8010f98:	4620      	mov	r0, r4
 8010f9a:	4659      	mov	r1, fp
 8010f9c:	f000 fe5c 	bl	8011c58 <_Bfree>
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	702b      	strb	r3, [r5, #0]
 8010fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fa6:	f10a 0001 	add.w	r0, sl, #1
 8010faa:	6018      	str	r0, [r3, #0]
 8010fac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	f43f acd8 	beq.w	8010964 <_dtoa_r+0xa4>
 8010fb4:	601d      	str	r5, [r3, #0]
 8010fb6:	e4d5      	b.n	8010964 <_dtoa_r+0xa4>
 8010fb8:	f8cd a01c 	str.w	sl, [sp, #28]
 8010fbc:	462b      	mov	r3, r5
 8010fbe:	461d      	mov	r5, r3
 8010fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fc4:	2a39      	cmp	r2, #57	; 0x39
 8010fc6:	d108      	bne.n	8010fda <_dtoa_r+0x71a>
 8010fc8:	9a00      	ldr	r2, [sp, #0]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d1f7      	bne.n	8010fbe <_dtoa_r+0x6fe>
 8010fce:	9a07      	ldr	r2, [sp, #28]
 8010fd0:	9900      	ldr	r1, [sp, #0]
 8010fd2:	3201      	adds	r2, #1
 8010fd4:	9207      	str	r2, [sp, #28]
 8010fd6:	2230      	movs	r2, #48	; 0x30
 8010fd8:	700a      	strb	r2, [r1, #0]
 8010fda:	781a      	ldrb	r2, [r3, #0]
 8010fdc:	3201      	adds	r2, #1
 8010fde:	701a      	strb	r2, [r3, #0]
 8010fe0:	e78c      	b.n	8010efc <_dtoa_r+0x63c>
 8010fe2:	4b7f      	ldr	r3, [pc, #508]	; (80111e0 <_dtoa_r+0x920>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	f7ef fb0f 	bl	8000608 <__aeabi_dmul>
 8010fea:	2200      	movs	r2, #0
 8010fec:	2300      	movs	r3, #0
 8010fee:	4606      	mov	r6, r0
 8010ff0:	460f      	mov	r7, r1
 8010ff2:	f7ef fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	d09b      	beq.n	8010f32 <_dtoa_r+0x672>
 8010ffa:	e7cd      	b.n	8010f98 <_dtoa_r+0x6d8>
 8010ffc:	9a08      	ldr	r2, [sp, #32]
 8010ffe:	2a00      	cmp	r2, #0
 8011000:	f000 80c4 	beq.w	801118c <_dtoa_r+0x8cc>
 8011004:	9a05      	ldr	r2, [sp, #20]
 8011006:	2a01      	cmp	r2, #1
 8011008:	f300 80a8 	bgt.w	801115c <_dtoa_r+0x89c>
 801100c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801100e:	2a00      	cmp	r2, #0
 8011010:	f000 80a0 	beq.w	8011154 <_dtoa_r+0x894>
 8011014:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011018:	9e06      	ldr	r6, [sp, #24]
 801101a:	4645      	mov	r5, r8
 801101c:	9a04      	ldr	r2, [sp, #16]
 801101e:	2101      	movs	r1, #1
 8011020:	441a      	add	r2, r3
 8011022:	4620      	mov	r0, r4
 8011024:	4498      	add	r8, r3
 8011026:	9204      	str	r2, [sp, #16]
 8011028:	f000 ff1c 	bl	8011e64 <__i2b>
 801102c:	4607      	mov	r7, r0
 801102e:	2d00      	cmp	r5, #0
 8011030:	dd0b      	ble.n	801104a <_dtoa_r+0x78a>
 8011032:	9b04      	ldr	r3, [sp, #16]
 8011034:	2b00      	cmp	r3, #0
 8011036:	dd08      	ble.n	801104a <_dtoa_r+0x78a>
 8011038:	42ab      	cmp	r3, r5
 801103a:	9a04      	ldr	r2, [sp, #16]
 801103c:	bfa8      	it	ge
 801103e:	462b      	movge	r3, r5
 8011040:	eba8 0803 	sub.w	r8, r8, r3
 8011044:	1aed      	subs	r5, r5, r3
 8011046:	1ad3      	subs	r3, r2, r3
 8011048:	9304      	str	r3, [sp, #16]
 801104a:	9b06      	ldr	r3, [sp, #24]
 801104c:	b1fb      	cbz	r3, 801108e <_dtoa_r+0x7ce>
 801104e:	9b08      	ldr	r3, [sp, #32]
 8011050:	2b00      	cmp	r3, #0
 8011052:	f000 809f 	beq.w	8011194 <_dtoa_r+0x8d4>
 8011056:	2e00      	cmp	r6, #0
 8011058:	dd11      	ble.n	801107e <_dtoa_r+0x7be>
 801105a:	4639      	mov	r1, r7
 801105c:	4632      	mov	r2, r6
 801105e:	4620      	mov	r0, r4
 8011060:	f000 ffbc 	bl	8011fdc <__pow5mult>
 8011064:	465a      	mov	r2, fp
 8011066:	4601      	mov	r1, r0
 8011068:	4607      	mov	r7, r0
 801106a:	4620      	mov	r0, r4
 801106c:	f000 ff10 	bl	8011e90 <__multiply>
 8011070:	4659      	mov	r1, fp
 8011072:	9007      	str	r0, [sp, #28]
 8011074:	4620      	mov	r0, r4
 8011076:	f000 fdef 	bl	8011c58 <_Bfree>
 801107a:	9b07      	ldr	r3, [sp, #28]
 801107c:	469b      	mov	fp, r3
 801107e:	9b06      	ldr	r3, [sp, #24]
 8011080:	1b9a      	subs	r2, r3, r6
 8011082:	d004      	beq.n	801108e <_dtoa_r+0x7ce>
 8011084:	4659      	mov	r1, fp
 8011086:	4620      	mov	r0, r4
 8011088:	f000 ffa8 	bl	8011fdc <__pow5mult>
 801108c:	4683      	mov	fp, r0
 801108e:	2101      	movs	r1, #1
 8011090:	4620      	mov	r0, r4
 8011092:	f000 fee7 	bl	8011e64 <__i2b>
 8011096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011098:	2b00      	cmp	r3, #0
 801109a:	4606      	mov	r6, r0
 801109c:	dd7c      	ble.n	8011198 <_dtoa_r+0x8d8>
 801109e:	461a      	mov	r2, r3
 80110a0:	4601      	mov	r1, r0
 80110a2:	4620      	mov	r0, r4
 80110a4:	f000 ff9a 	bl	8011fdc <__pow5mult>
 80110a8:	9b05      	ldr	r3, [sp, #20]
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	4606      	mov	r6, r0
 80110ae:	dd76      	ble.n	801119e <_dtoa_r+0x8de>
 80110b0:	2300      	movs	r3, #0
 80110b2:	9306      	str	r3, [sp, #24]
 80110b4:	6933      	ldr	r3, [r6, #16]
 80110b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80110ba:	6918      	ldr	r0, [r3, #16]
 80110bc:	f000 fe82 	bl	8011dc4 <__hi0bits>
 80110c0:	f1c0 0020 	rsb	r0, r0, #32
 80110c4:	9b04      	ldr	r3, [sp, #16]
 80110c6:	4418      	add	r0, r3
 80110c8:	f010 001f 	ands.w	r0, r0, #31
 80110cc:	f000 8086 	beq.w	80111dc <_dtoa_r+0x91c>
 80110d0:	f1c0 0320 	rsb	r3, r0, #32
 80110d4:	2b04      	cmp	r3, #4
 80110d6:	dd7f      	ble.n	80111d8 <_dtoa_r+0x918>
 80110d8:	f1c0 001c 	rsb	r0, r0, #28
 80110dc:	9b04      	ldr	r3, [sp, #16]
 80110de:	4403      	add	r3, r0
 80110e0:	4480      	add	r8, r0
 80110e2:	4405      	add	r5, r0
 80110e4:	9304      	str	r3, [sp, #16]
 80110e6:	f1b8 0f00 	cmp.w	r8, #0
 80110ea:	dd05      	ble.n	80110f8 <_dtoa_r+0x838>
 80110ec:	4659      	mov	r1, fp
 80110ee:	4642      	mov	r2, r8
 80110f0:	4620      	mov	r0, r4
 80110f2:	f000 ffcd 	bl	8012090 <__lshift>
 80110f6:	4683      	mov	fp, r0
 80110f8:	9b04      	ldr	r3, [sp, #16]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	dd05      	ble.n	801110a <_dtoa_r+0x84a>
 80110fe:	4631      	mov	r1, r6
 8011100:	461a      	mov	r2, r3
 8011102:	4620      	mov	r0, r4
 8011104:	f000 ffc4 	bl	8012090 <__lshift>
 8011108:	4606      	mov	r6, r0
 801110a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801110c:	2b00      	cmp	r3, #0
 801110e:	d069      	beq.n	80111e4 <_dtoa_r+0x924>
 8011110:	4631      	mov	r1, r6
 8011112:	4658      	mov	r0, fp
 8011114:	f001 f828 	bl	8012168 <__mcmp>
 8011118:	2800      	cmp	r0, #0
 801111a:	da63      	bge.n	80111e4 <_dtoa_r+0x924>
 801111c:	2300      	movs	r3, #0
 801111e:	4659      	mov	r1, fp
 8011120:	220a      	movs	r2, #10
 8011122:	4620      	mov	r0, r4
 8011124:	f000 fdba 	bl	8011c9c <__multadd>
 8011128:	9b08      	ldr	r3, [sp, #32]
 801112a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801112e:	4683      	mov	fp, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	f000 818f 	beq.w	8011454 <_dtoa_r+0xb94>
 8011136:	4639      	mov	r1, r7
 8011138:	2300      	movs	r3, #0
 801113a:	220a      	movs	r2, #10
 801113c:	4620      	mov	r0, r4
 801113e:	f000 fdad 	bl	8011c9c <__multadd>
 8011142:	f1b9 0f00 	cmp.w	r9, #0
 8011146:	4607      	mov	r7, r0
 8011148:	f300 808e 	bgt.w	8011268 <_dtoa_r+0x9a8>
 801114c:	9b05      	ldr	r3, [sp, #20]
 801114e:	2b02      	cmp	r3, #2
 8011150:	dc50      	bgt.n	80111f4 <_dtoa_r+0x934>
 8011152:	e089      	b.n	8011268 <_dtoa_r+0x9a8>
 8011154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801115a:	e75d      	b.n	8011018 <_dtoa_r+0x758>
 801115c:	9b01      	ldr	r3, [sp, #4]
 801115e:	1e5e      	subs	r6, r3, #1
 8011160:	9b06      	ldr	r3, [sp, #24]
 8011162:	42b3      	cmp	r3, r6
 8011164:	bfbf      	itttt	lt
 8011166:	9b06      	ldrlt	r3, [sp, #24]
 8011168:	9606      	strlt	r6, [sp, #24]
 801116a:	1af2      	sublt	r2, r6, r3
 801116c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801116e:	bfb6      	itet	lt
 8011170:	189b      	addlt	r3, r3, r2
 8011172:	1b9e      	subge	r6, r3, r6
 8011174:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011176:	9b01      	ldr	r3, [sp, #4]
 8011178:	bfb8      	it	lt
 801117a:	2600      	movlt	r6, #0
 801117c:	2b00      	cmp	r3, #0
 801117e:	bfb5      	itete	lt
 8011180:	eba8 0503 	sublt.w	r5, r8, r3
 8011184:	9b01      	ldrge	r3, [sp, #4]
 8011186:	2300      	movlt	r3, #0
 8011188:	4645      	movge	r5, r8
 801118a:	e747      	b.n	801101c <_dtoa_r+0x75c>
 801118c:	9e06      	ldr	r6, [sp, #24]
 801118e:	9f08      	ldr	r7, [sp, #32]
 8011190:	4645      	mov	r5, r8
 8011192:	e74c      	b.n	801102e <_dtoa_r+0x76e>
 8011194:	9a06      	ldr	r2, [sp, #24]
 8011196:	e775      	b.n	8011084 <_dtoa_r+0x7c4>
 8011198:	9b05      	ldr	r3, [sp, #20]
 801119a:	2b01      	cmp	r3, #1
 801119c:	dc18      	bgt.n	80111d0 <_dtoa_r+0x910>
 801119e:	9b02      	ldr	r3, [sp, #8]
 80111a0:	b9b3      	cbnz	r3, 80111d0 <_dtoa_r+0x910>
 80111a2:	9b03      	ldr	r3, [sp, #12]
 80111a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111a8:	b9a3      	cbnz	r3, 80111d4 <_dtoa_r+0x914>
 80111aa:	9b03      	ldr	r3, [sp, #12]
 80111ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111b0:	0d1b      	lsrs	r3, r3, #20
 80111b2:	051b      	lsls	r3, r3, #20
 80111b4:	b12b      	cbz	r3, 80111c2 <_dtoa_r+0x902>
 80111b6:	9b04      	ldr	r3, [sp, #16]
 80111b8:	3301      	adds	r3, #1
 80111ba:	9304      	str	r3, [sp, #16]
 80111bc:	f108 0801 	add.w	r8, r8, #1
 80111c0:	2301      	movs	r3, #1
 80111c2:	9306      	str	r3, [sp, #24]
 80111c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f47f af74 	bne.w	80110b4 <_dtoa_r+0x7f4>
 80111cc:	2001      	movs	r0, #1
 80111ce:	e779      	b.n	80110c4 <_dtoa_r+0x804>
 80111d0:	2300      	movs	r3, #0
 80111d2:	e7f6      	b.n	80111c2 <_dtoa_r+0x902>
 80111d4:	9b02      	ldr	r3, [sp, #8]
 80111d6:	e7f4      	b.n	80111c2 <_dtoa_r+0x902>
 80111d8:	d085      	beq.n	80110e6 <_dtoa_r+0x826>
 80111da:	4618      	mov	r0, r3
 80111dc:	301c      	adds	r0, #28
 80111de:	e77d      	b.n	80110dc <_dtoa_r+0x81c>
 80111e0:	40240000 	.word	0x40240000
 80111e4:	9b01      	ldr	r3, [sp, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	dc38      	bgt.n	801125c <_dtoa_r+0x99c>
 80111ea:	9b05      	ldr	r3, [sp, #20]
 80111ec:	2b02      	cmp	r3, #2
 80111ee:	dd35      	ble.n	801125c <_dtoa_r+0x99c>
 80111f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80111f4:	f1b9 0f00 	cmp.w	r9, #0
 80111f8:	d10d      	bne.n	8011216 <_dtoa_r+0x956>
 80111fa:	4631      	mov	r1, r6
 80111fc:	464b      	mov	r3, r9
 80111fe:	2205      	movs	r2, #5
 8011200:	4620      	mov	r0, r4
 8011202:	f000 fd4b 	bl	8011c9c <__multadd>
 8011206:	4601      	mov	r1, r0
 8011208:	4606      	mov	r6, r0
 801120a:	4658      	mov	r0, fp
 801120c:	f000 ffac 	bl	8012168 <__mcmp>
 8011210:	2800      	cmp	r0, #0
 8011212:	f73f adbd 	bgt.w	8010d90 <_dtoa_r+0x4d0>
 8011216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011218:	9d00      	ldr	r5, [sp, #0]
 801121a:	ea6f 0a03 	mvn.w	sl, r3
 801121e:	f04f 0800 	mov.w	r8, #0
 8011222:	4631      	mov	r1, r6
 8011224:	4620      	mov	r0, r4
 8011226:	f000 fd17 	bl	8011c58 <_Bfree>
 801122a:	2f00      	cmp	r7, #0
 801122c:	f43f aeb4 	beq.w	8010f98 <_dtoa_r+0x6d8>
 8011230:	f1b8 0f00 	cmp.w	r8, #0
 8011234:	d005      	beq.n	8011242 <_dtoa_r+0x982>
 8011236:	45b8      	cmp	r8, r7
 8011238:	d003      	beq.n	8011242 <_dtoa_r+0x982>
 801123a:	4641      	mov	r1, r8
 801123c:	4620      	mov	r0, r4
 801123e:	f000 fd0b 	bl	8011c58 <_Bfree>
 8011242:	4639      	mov	r1, r7
 8011244:	4620      	mov	r0, r4
 8011246:	f000 fd07 	bl	8011c58 <_Bfree>
 801124a:	e6a5      	b.n	8010f98 <_dtoa_r+0x6d8>
 801124c:	2600      	movs	r6, #0
 801124e:	4637      	mov	r7, r6
 8011250:	e7e1      	b.n	8011216 <_dtoa_r+0x956>
 8011252:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011254:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011258:	4637      	mov	r7, r6
 801125a:	e599      	b.n	8010d90 <_dtoa_r+0x4d0>
 801125c:	9b08      	ldr	r3, [sp, #32]
 801125e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	f000 80fd 	beq.w	8011462 <_dtoa_r+0xba2>
 8011268:	2d00      	cmp	r5, #0
 801126a:	dd05      	ble.n	8011278 <_dtoa_r+0x9b8>
 801126c:	4639      	mov	r1, r7
 801126e:	462a      	mov	r2, r5
 8011270:	4620      	mov	r0, r4
 8011272:	f000 ff0d 	bl	8012090 <__lshift>
 8011276:	4607      	mov	r7, r0
 8011278:	9b06      	ldr	r3, [sp, #24]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d05c      	beq.n	8011338 <_dtoa_r+0xa78>
 801127e:	6879      	ldr	r1, [r7, #4]
 8011280:	4620      	mov	r0, r4
 8011282:	f000 fca9 	bl	8011bd8 <_Balloc>
 8011286:	4605      	mov	r5, r0
 8011288:	b928      	cbnz	r0, 8011296 <_dtoa_r+0x9d6>
 801128a:	4b80      	ldr	r3, [pc, #512]	; (801148c <_dtoa_r+0xbcc>)
 801128c:	4602      	mov	r2, r0
 801128e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011292:	f7ff bb2e 	b.w	80108f2 <_dtoa_r+0x32>
 8011296:	693a      	ldr	r2, [r7, #16]
 8011298:	3202      	adds	r2, #2
 801129a:	0092      	lsls	r2, r2, #2
 801129c:	f107 010c 	add.w	r1, r7, #12
 80112a0:	300c      	adds	r0, #12
 80112a2:	f7fd fe89 	bl	800efb8 <memcpy>
 80112a6:	2201      	movs	r2, #1
 80112a8:	4629      	mov	r1, r5
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 fef0 	bl	8012090 <__lshift>
 80112b0:	9b00      	ldr	r3, [sp, #0]
 80112b2:	3301      	adds	r3, #1
 80112b4:	9301      	str	r3, [sp, #4]
 80112b6:	9b00      	ldr	r3, [sp, #0]
 80112b8:	444b      	add	r3, r9
 80112ba:	9307      	str	r3, [sp, #28]
 80112bc:	9b02      	ldr	r3, [sp, #8]
 80112be:	f003 0301 	and.w	r3, r3, #1
 80112c2:	46b8      	mov	r8, r7
 80112c4:	9306      	str	r3, [sp, #24]
 80112c6:	4607      	mov	r7, r0
 80112c8:	9b01      	ldr	r3, [sp, #4]
 80112ca:	4631      	mov	r1, r6
 80112cc:	3b01      	subs	r3, #1
 80112ce:	4658      	mov	r0, fp
 80112d0:	9302      	str	r3, [sp, #8]
 80112d2:	f7ff fa67 	bl	80107a4 <quorem>
 80112d6:	4603      	mov	r3, r0
 80112d8:	3330      	adds	r3, #48	; 0x30
 80112da:	9004      	str	r0, [sp, #16]
 80112dc:	4641      	mov	r1, r8
 80112de:	4658      	mov	r0, fp
 80112e0:	9308      	str	r3, [sp, #32]
 80112e2:	f000 ff41 	bl	8012168 <__mcmp>
 80112e6:	463a      	mov	r2, r7
 80112e8:	4681      	mov	r9, r0
 80112ea:	4631      	mov	r1, r6
 80112ec:	4620      	mov	r0, r4
 80112ee:	f000 ff57 	bl	80121a0 <__mdiff>
 80112f2:	68c2      	ldr	r2, [r0, #12]
 80112f4:	9b08      	ldr	r3, [sp, #32]
 80112f6:	4605      	mov	r5, r0
 80112f8:	bb02      	cbnz	r2, 801133c <_dtoa_r+0xa7c>
 80112fa:	4601      	mov	r1, r0
 80112fc:	4658      	mov	r0, fp
 80112fe:	f000 ff33 	bl	8012168 <__mcmp>
 8011302:	9b08      	ldr	r3, [sp, #32]
 8011304:	4602      	mov	r2, r0
 8011306:	4629      	mov	r1, r5
 8011308:	4620      	mov	r0, r4
 801130a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801130e:	f000 fca3 	bl	8011c58 <_Bfree>
 8011312:	9b05      	ldr	r3, [sp, #20]
 8011314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011316:	9d01      	ldr	r5, [sp, #4]
 8011318:	ea43 0102 	orr.w	r1, r3, r2
 801131c:	9b06      	ldr	r3, [sp, #24]
 801131e:	430b      	orrs	r3, r1
 8011320:	9b08      	ldr	r3, [sp, #32]
 8011322:	d10d      	bne.n	8011340 <_dtoa_r+0xa80>
 8011324:	2b39      	cmp	r3, #57	; 0x39
 8011326:	d029      	beq.n	801137c <_dtoa_r+0xabc>
 8011328:	f1b9 0f00 	cmp.w	r9, #0
 801132c:	dd01      	ble.n	8011332 <_dtoa_r+0xa72>
 801132e:	9b04      	ldr	r3, [sp, #16]
 8011330:	3331      	adds	r3, #49	; 0x31
 8011332:	9a02      	ldr	r2, [sp, #8]
 8011334:	7013      	strb	r3, [r2, #0]
 8011336:	e774      	b.n	8011222 <_dtoa_r+0x962>
 8011338:	4638      	mov	r0, r7
 801133a:	e7b9      	b.n	80112b0 <_dtoa_r+0x9f0>
 801133c:	2201      	movs	r2, #1
 801133e:	e7e2      	b.n	8011306 <_dtoa_r+0xa46>
 8011340:	f1b9 0f00 	cmp.w	r9, #0
 8011344:	db06      	blt.n	8011354 <_dtoa_r+0xa94>
 8011346:	9905      	ldr	r1, [sp, #20]
 8011348:	ea41 0909 	orr.w	r9, r1, r9
 801134c:	9906      	ldr	r1, [sp, #24]
 801134e:	ea59 0101 	orrs.w	r1, r9, r1
 8011352:	d120      	bne.n	8011396 <_dtoa_r+0xad6>
 8011354:	2a00      	cmp	r2, #0
 8011356:	ddec      	ble.n	8011332 <_dtoa_r+0xa72>
 8011358:	4659      	mov	r1, fp
 801135a:	2201      	movs	r2, #1
 801135c:	4620      	mov	r0, r4
 801135e:	9301      	str	r3, [sp, #4]
 8011360:	f000 fe96 	bl	8012090 <__lshift>
 8011364:	4631      	mov	r1, r6
 8011366:	4683      	mov	fp, r0
 8011368:	f000 fefe 	bl	8012168 <__mcmp>
 801136c:	2800      	cmp	r0, #0
 801136e:	9b01      	ldr	r3, [sp, #4]
 8011370:	dc02      	bgt.n	8011378 <_dtoa_r+0xab8>
 8011372:	d1de      	bne.n	8011332 <_dtoa_r+0xa72>
 8011374:	07da      	lsls	r2, r3, #31
 8011376:	d5dc      	bpl.n	8011332 <_dtoa_r+0xa72>
 8011378:	2b39      	cmp	r3, #57	; 0x39
 801137a:	d1d8      	bne.n	801132e <_dtoa_r+0xa6e>
 801137c:	9a02      	ldr	r2, [sp, #8]
 801137e:	2339      	movs	r3, #57	; 0x39
 8011380:	7013      	strb	r3, [r2, #0]
 8011382:	462b      	mov	r3, r5
 8011384:	461d      	mov	r5, r3
 8011386:	3b01      	subs	r3, #1
 8011388:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801138c:	2a39      	cmp	r2, #57	; 0x39
 801138e:	d050      	beq.n	8011432 <_dtoa_r+0xb72>
 8011390:	3201      	adds	r2, #1
 8011392:	701a      	strb	r2, [r3, #0]
 8011394:	e745      	b.n	8011222 <_dtoa_r+0x962>
 8011396:	2a00      	cmp	r2, #0
 8011398:	dd03      	ble.n	80113a2 <_dtoa_r+0xae2>
 801139a:	2b39      	cmp	r3, #57	; 0x39
 801139c:	d0ee      	beq.n	801137c <_dtoa_r+0xabc>
 801139e:	3301      	adds	r3, #1
 80113a0:	e7c7      	b.n	8011332 <_dtoa_r+0xa72>
 80113a2:	9a01      	ldr	r2, [sp, #4]
 80113a4:	9907      	ldr	r1, [sp, #28]
 80113a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80113aa:	428a      	cmp	r2, r1
 80113ac:	d02a      	beq.n	8011404 <_dtoa_r+0xb44>
 80113ae:	4659      	mov	r1, fp
 80113b0:	2300      	movs	r3, #0
 80113b2:	220a      	movs	r2, #10
 80113b4:	4620      	mov	r0, r4
 80113b6:	f000 fc71 	bl	8011c9c <__multadd>
 80113ba:	45b8      	cmp	r8, r7
 80113bc:	4683      	mov	fp, r0
 80113be:	f04f 0300 	mov.w	r3, #0
 80113c2:	f04f 020a 	mov.w	r2, #10
 80113c6:	4641      	mov	r1, r8
 80113c8:	4620      	mov	r0, r4
 80113ca:	d107      	bne.n	80113dc <_dtoa_r+0xb1c>
 80113cc:	f000 fc66 	bl	8011c9c <__multadd>
 80113d0:	4680      	mov	r8, r0
 80113d2:	4607      	mov	r7, r0
 80113d4:	9b01      	ldr	r3, [sp, #4]
 80113d6:	3301      	adds	r3, #1
 80113d8:	9301      	str	r3, [sp, #4]
 80113da:	e775      	b.n	80112c8 <_dtoa_r+0xa08>
 80113dc:	f000 fc5e 	bl	8011c9c <__multadd>
 80113e0:	4639      	mov	r1, r7
 80113e2:	4680      	mov	r8, r0
 80113e4:	2300      	movs	r3, #0
 80113e6:	220a      	movs	r2, #10
 80113e8:	4620      	mov	r0, r4
 80113ea:	f000 fc57 	bl	8011c9c <__multadd>
 80113ee:	4607      	mov	r7, r0
 80113f0:	e7f0      	b.n	80113d4 <_dtoa_r+0xb14>
 80113f2:	f1b9 0f00 	cmp.w	r9, #0
 80113f6:	9a00      	ldr	r2, [sp, #0]
 80113f8:	bfcc      	ite	gt
 80113fa:	464d      	movgt	r5, r9
 80113fc:	2501      	movle	r5, #1
 80113fe:	4415      	add	r5, r2
 8011400:	f04f 0800 	mov.w	r8, #0
 8011404:	4659      	mov	r1, fp
 8011406:	2201      	movs	r2, #1
 8011408:	4620      	mov	r0, r4
 801140a:	9301      	str	r3, [sp, #4]
 801140c:	f000 fe40 	bl	8012090 <__lshift>
 8011410:	4631      	mov	r1, r6
 8011412:	4683      	mov	fp, r0
 8011414:	f000 fea8 	bl	8012168 <__mcmp>
 8011418:	2800      	cmp	r0, #0
 801141a:	dcb2      	bgt.n	8011382 <_dtoa_r+0xac2>
 801141c:	d102      	bne.n	8011424 <_dtoa_r+0xb64>
 801141e:	9b01      	ldr	r3, [sp, #4]
 8011420:	07db      	lsls	r3, r3, #31
 8011422:	d4ae      	bmi.n	8011382 <_dtoa_r+0xac2>
 8011424:	462b      	mov	r3, r5
 8011426:	461d      	mov	r5, r3
 8011428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801142c:	2a30      	cmp	r2, #48	; 0x30
 801142e:	d0fa      	beq.n	8011426 <_dtoa_r+0xb66>
 8011430:	e6f7      	b.n	8011222 <_dtoa_r+0x962>
 8011432:	9a00      	ldr	r2, [sp, #0]
 8011434:	429a      	cmp	r2, r3
 8011436:	d1a5      	bne.n	8011384 <_dtoa_r+0xac4>
 8011438:	f10a 0a01 	add.w	sl, sl, #1
 801143c:	2331      	movs	r3, #49	; 0x31
 801143e:	e779      	b.n	8011334 <_dtoa_r+0xa74>
 8011440:	4b13      	ldr	r3, [pc, #76]	; (8011490 <_dtoa_r+0xbd0>)
 8011442:	f7ff baaf 	b.w	80109a4 <_dtoa_r+0xe4>
 8011446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011448:	2b00      	cmp	r3, #0
 801144a:	f47f aa86 	bne.w	801095a <_dtoa_r+0x9a>
 801144e:	4b11      	ldr	r3, [pc, #68]	; (8011494 <_dtoa_r+0xbd4>)
 8011450:	f7ff baa8 	b.w	80109a4 <_dtoa_r+0xe4>
 8011454:	f1b9 0f00 	cmp.w	r9, #0
 8011458:	dc03      	bgt.n	8011462 <_dtoa_r+0xba2>
 801145a:	9b05      	ldr	r3, [sp, #20]
 801145c:	2b02      	cmp	r3, #2
 801145e:	f73f aec9 	bgt.w	80111f4 <_dtoa_r+0x934>
 8011462:	9d00      	ldr	r5, [sp, #0]
 8011464:	4631      	mov	r1, r6
 8011466:	4658      	mov	r0, fp
 8011468:	f7ff f99c 	bl	80107a4 <quorem>
 801146c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011470:	f805 3b01 	strb.w	r3, [r5], #1
 8011474:	9a00      	ldr	r2, [sp, #0]
 8011476:	1aaa      	subs	r2, r5, r2
 8011478:	4591      	cmp	r9, r2
 801147a:	ddba      	ble.n	80113f2 <_dtoa_r+0xb32>
 801147c:	4659      	mov	r1, fp
 801147e:	2300      	movs	r3, #0
 8011480:	220a      	movs	r2, #10
 8011482:	4620      	mov	r0, r4
 8011484:	f000 fc0a 	bl	8011c9c <__multadd>
 8011488:	4683      	mov	fp, r0
 801148a:	e7eb      	b.n	8011464 <_dtoa_r+0xba4>
 801148c:	08016270 	.word	0x08016270
 8011490:	080160d8 	.word	0x080160d8
 8011494:	08016204 	.word	0x08016204

08011498 <fiprintf>:
 8011498:	b40e      	push	{r1, r2, r3}
 801149a:	b503      	push	{r0, r1, lr}
 801149c:	4601      	mov	r1, r0
 801149e:	ab03      	add	r3, sp, #12
 80114a0:	4805      	ldr	r0, [pc, #20]	; (80114b8 <fiprintf+0x20>)
 80114a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80114a6:	6800      	ldr	r0, [r0, #0]
 80114a8:	9301      	str	r3, [sp, #4]
 80114aa:	f001 fa8f 	bl	80129cc <_vfiprintf_r>
 80114ae:	b002      	add	sp, #8
 80114b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114b4:	b003      	add	sp, #12
 80114b6:	4770      	bx	lr
 80114b8:	20000028 	.word	0x20000028

080114bc <rshift>:
 80114bc:	6903      	ldr	r3, [r0, #16]
 80114be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80114c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80114ca:	f100 0414 	add.w	r4, r0, #20
 80114ce:	dd45      	ble.n	801155c <rshift+0xa0>
 80114d0:	f011 011f 	ands.w	r1, r1, #31
 80114d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80114d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80114dc:	d10c      	bne.n	80114f8 <rshift+0x3c>
 80114de:	f100 0710 	add.w	r7, r0, #16
 80114e2:	4629      	mov	r1, r5
 80114e4:	42b1      	cmp	r1, r6
 80114e6:	d334      	bcc.n	8011552 <rshift+0x96>
 80114e8:	1a9b      	subs	r3, r3, r2
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	1eea      	subs	r2, r5, #3
 80114ee:	4296      	cmp	r6, r2
 80114f0:	bf38      	it	cc
 80114f2:	2300      	movcc	r3, #0
 80114f4:	4423      	add	r3, r4
 80114f6:	e015      	b.n	8011524 <rshift+0x68>
 80114f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80114fc:	f1c1 0820 	rsb	r8, r1, #32
 8011500:	40cf      	lsrs	r7, r1
 8011502:	f105 0e04 	add.w	lr, r5, #4
 8011506:	46a1      	mov	r9, r4
 8011508:	4576      	cmp	r6, lr
 801150a:	46f4      	mov	ip, lr
 801150c:	d815      	bhi.n	801153a <rshift+0x7e>
 801150e:	1a9b      	subs	r3, r3, r2
 8011510:	009a      	lsls	r2, r3, #2
 8011512:	3a04      	subs	r2, #4
 8011514:	3501      	adds	r5, #1
 8011516:	42ae      	cmp	r6, r5
 8011518:	bf38      	it	cc
 801151a:	2200      	movcc	r2, #0
 801151c:	18a3      	adds	r3, r4, r2
 801151e:	50a7      	str	r7, [r4, r2]
 8011520:	b107      	cbz	r7, 8011524 <rshift+0x68>
 8011522:	3304      	adds	r3, #4
 8011524:	1b1a      	subs	r2, r3, r4
 8011526:	42a3      	cmp	r3, r4
 8011528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801152c:	bf08      	it	eq
 801152e:	2300      	moveq	r3, #0
 8011530:	6102      	str	r2, [r0, #16]
 8011532:	bf08      	it	eq
 8011534:	6143      	streq	r3, [r0, #20]
 8011536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801153a:	f8dc c000 	ldr.w	ip, [ip]
 801153e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011542:	ea4c 0707 	orr.w	r7, ip, r7
 8011546:	f849 7b04 	str.w	r7, [r9], #4
 801154a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801154e:	40cf      	lsrs	r7, r1
 8011550:	e7da      	b.n	8011508 <rshift+0x4c>
 8011552:	f851 cb04 	ldr.w	ip, [r1], #4
 8011556:	f847 cf04 	str.w	ip, [r7, #4]!
 801155a:	e7c3      	b.n	80114e4 <rshift+0x28>
 801155c:	4623      	mov	r3, r4
 801155e:	e7e1      	b.n	8011524 <rshift+0x68>

08011560 <__hexdig_fun>:
 8011560:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011564:	2b09      	cmp	r3, #9
 8011566:	d802      	bhi.n	801156e <__hexdig_fun+0xe>
 8011568:	3820      	subs	r0, #32
 801156a:	b2c0      	uxtb	r0, r0
 801156c:	4770      	bx	lr
 801156e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011572:	2b05      	cmp	r3, #5
 8011574:	d801      	bhi.n	801157a <__hexdig_fun+0x1a>
 8011576:	3847      	subs	r0, #71	; 0x47
 8011578:	e7f7      	b.n	801156a <__hexdig_fun+0xa>
 801157a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801157e:	2b05      	cmp	r3, #5
 8011580:	d801      	bhi.n	8011586 <__hexdig_fun+0x26>
 8011582:	3827      	subs	r0, #39	; 0x27
 8011584:	e7f1      	b.n	801156a <__hexdig_fun+0xa>
 8011586:	2000      	movs	r0, #0
 8011588:	4770      	bx	lr
	...

0801158c <__gethex>:
 801158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011590:	ed2d 8b02 	vpush	{d8}
 8011594:	b089      	sub	sp, #36	; 0x24
 8011596:	ee08 0a10 	vmov	s16, r0
 801159a:	9304      	str	r3, [sp, #16]
 801159c:	4bbc      	ldr	r3, [pc, #752]	; (8011890 <__gethex+0x304>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	4618      	mov	r0, r3
 80115a4:	468b      	mov	fp, r1
 80115a6:	4690      	mov	r8, r2
 80115a8:	f7ee fe1a 	bl	80001e0 <strlen>
 80115ac:	9b01      	ldr	r3, [sp, #4]
 80115ae:	f8db 2000 	ldr.w	r2, [fp]
 80115b2:	4403      	add	r3, r0
 80115b4:	4682      	mov	sl, r0
 80115b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80115ba:	9305      	str	r3, [sp, #20]
 80115bc:	1c93      	adds	r3, r2, #2
 80115be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80115c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80115c6:	32fe      	adds	r2, #254	; 0xfe
 80115c8:	18d1      	adds	r1, r2, r3
 80115ca:	461f      	mov	r7, r3
 80115cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80115d0:	9100      	str	r1, [sp, #0]
 80115d2:	2830      	cmp	r0, #48	; 0x30
 80115d4:	d0f8      	beq.n	80115c8 <__gethex+0x3c>
 80115d6:	f7ff ffc3 	bl	8011560 <__hexdig_fun>
 80115da:	4604      	mov	r4, r0
 80115dc:	2800      	cmp	r0, #0
 80115de:	d13a      	bne.n	8011656 <__gethex+0xca>
 80115e0:	9901      	ldr	r1, [sp, #4]
 80115e2:	4652      	mov	r2, sl
 80115e4:	4638      	mov	r0, r7
 80115e6:	f001 fb3b 	bl	8012c60 <strncmp>
 80115ea:	4605      	mov	r5, r0
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d168      	bne.n	80116c2 <__gethex+0x136>
 80115f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80115f4:	eb07 060a 	add.w	r6, r7, sl
 80115f8:	f7ff ffb2 	bl	8011560 <__hexdig_fun>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d062      	beq.n	80116c6 <__gethex+0x13a>
 8011600:	4633      	mov	r3, r6
 8011602:	7818      	ldrb	r0, [r3, #0]
 8011604:	2830      	cmp	r0, #48	; 0x30
 8011606:	461f      	mov	r7, r3
 8011608:	f103 0301 	add.w	r3, r3, #1
 801160c:	d0f9      	beq.n	8011602 <__gethex+0x76>
 801160e:	f7ff ffa7 	bl	8011560 <__hexdig_fun>
 8011612:	2301      	movs	r3, #1
 8011614:	fab0 f480 	clz	r4, r0
 8011618:	0964      	lsrs	r4, r4, #5
 801161a:	4635      	mov	r5, r6
 801161c:	9300      	str	r3, [sp, #0]
 801161e:	463a      	mov	r2, r7
 8011620:	4616      	mov	r6, r2
 8011622:	3201      	adds	r2, #1
 8011624:	7830      	ldrb	r0, [r6, #0]
 8011626:	f7ff ff9b 	bl	8011560 <__hexdig_fun>
 801162a:	2800      	cmp	r0, #0
 801162c:	d1f8      	bne.n	8011620 <__gethex+0x94>
 801162e:	9901      	ldr	r1, [sp, #4]
 8011630:	4652      	mov	r2, sl
 8011632:	4630      	mov	r0, r6
 8011634:	f001 fb14 	bl	8012c60 <strncmp>
 8011638:	b980      	cbnz	r0, 801165c <__gethex+0xd0>
 801163a:	b94d      	cbnz	r5, 8011650 <__gethex+0xc4>
 801163c:	eb06 050a 	add.w	r5, r6, sl
 8011640:	462a      	mov	r2, r5
 8011642:	4616      	mov	r6, r2
 8011644:	3201      	adds	r2, #1
 8011646:	7830      	ldrb	r0, [r6, #0]
 8011648:	f7ff ff8a 	bl	8011560 <__hexdig_fun>
 801164c:	2800      	cmp	r0, #0
 801164e:	d1f8      	bne.n	8011642 <__gethex+0xb6>
 8011650:	1bad      	subs	r5, r5, r6
 8011652:	00ad      	lsls	r5, r5, #2
 8011654:	e004      	b.n	8011660 <__gethex+0xd4>
 8011656:	2400      	movs	r4, #0
 8011658:	4625      	mov	r5, r4
 801165a:	e7e0      	b.n	801161e <__gethex+0x92>
 801165c:	2d00      	cmp	r5, #0
 801165e:	d1f7      	bne.n	8011650 <__gethex+0xc4>
 8011660:	7833      	ldrb	r3, [r6, #0]
 8011662:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011666:	2b50      	cmp	r3, #80	; 0x50
 8011668:	d13b      	bne.n	80116e2 <__gethex+0x156>
 801166a:	7873      	ldrb	r3, [r6, #1]
 801166c:	2b2b      	cmp	r3, #43	; 0x2b
 801166e:	d02c      	beq.n	80116ca <__gethex+0x13e>
 8011670:	2b2d      	cmp	r3, #45	; 0x2d
 8011672:	d02e      	beq.n	80116d2 <__gethex+0x146>
 8011674:	1c71      	adds	r1, r6, #1
 8011676:	f04f 0900 	mov.w	r9, #0
 801167a:	7808      	ldrb	r0, [r1, #0]
 801167c:	f7ff ff70 	bl	8011560 <__hexdig_fun>
 8011680:	1e43      	subs	r3, r0, #1
 8011682:	b2db      	uxtb	r3, r3
 8011684:	2b18      	cmp	r3, #24
 8011686:	d82c      	bhi.n	80116e2 <__gethex+0x156>
 8011688:	f1a0 0210 	sub.w	r2, r0, #16
 801168c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011690:	f7ff ff66 	bl	8011560 <__hexdig_fun>
 8011694:	1e43      	subs	r3, r0, #1
 8011696:	b2db      	uxtb	r3, r3
 8011698:	2b18      	cmp	r3, #24
 801169a:	d91d      	bls.n	80116d8 <__gethex+0x14c>
 801169c:	f1b9 0f00 	cmp.w	r9, #0
 80116a0:	d000      	beq.n	80116a4 <__gethex+0x118>
 80116a2:	4252      	negs	r2, r2
 80116a4:	4415      	add	r5, r2
 80116a6:	f8cb 1000 	str.w	r1, [fp]
 80116aa:	b1e4      	cbz	r4, 80116e6 <__gethex+0x15a>
 80116ac:	9b00      	ldr	r3, [sp, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	bf14      	ite	ne
 80116b2:	2700      	movne	r7, #0
 80116b4:	2706      	moveq	r7, #6
 80116b6:	4638      	mov	r0, r7
 80116b8:	b009      	add	sp, #36	; 0x24
 80116ba:	ecbd 8b02 	vpop	{d8}
 80116be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c2:	463e      	mov	r6, r7
 80116c4:	4625      	mov	r5, r4
 80116c6:	2401      	movs	r4, #1
 80116c8:	e7ca      	b.n	8011660 <__gethex+0xd4>
 80116ca:	f04f 0900 	mov.w	r9, #0
 80116ce:	1cb1      	adds	r1, r6, #2
 80116d0:	e7d3      	b.n	801167a <__gethex+0xee>
 80116d2:	f04f 0901 	mov.w	r9, #1
 80116d6:	e7fa      	b.n	80116ce <__gethex+0x142>
 80116d8:	230a      	movs	r3, #10
 80116da:	fb03 0202 	mla	r2, r3, r2, r0
 80116de:	3a10      	subs	r2, #16
 80116e0:	e7d4      	b.n	801168c <__gethex+0x100>
 80116e2:	4631      	mov	r1, r6
 80116e4:	e7df      	b.n	80116a6 <__gethex+0x11a>
 80116e6:	1bf3      	subs	r3, r6, r7
 80116e8:	3b01      	subs	r3, #1
 80116ea:	4621      	mov	r1, r4
 80116ec:	2b07      	cmp	r3, #7
 80116ee:	dc0b      	bgt.n	8011708 <__gethex+0x17c>
 80116f0:	ee18 0a10 	vmov	r0, s16
 80116f4:	f000 fa70 	bl	8011bd8 <_Balloc>
 80116f8:	4604      	mov	r4, r0
 80116fa:	b940      	cbnz	r0, 801170e <__gethex+0x182>
 80116fc:	4b65      	ldr	r3, [pc, #404]	; (8011894 <__gethex+0x308>)
 80116fe:	4602      	mov	r2, r0
 8011700:	21de      	movs	r1, #222	; 0xde
 8011702:	4865      	ldr	r0, [pc, #404]	; (8011898 <__gethex+0x30c>)
 8011704:	f7ff f830 	bl	8010768 <__assert_func>
 8011708:	3101      	adds	r1, #1
 801170a:	105b      	asrs	r3, r3, #1
 801170c:	e7ee      	b.n	80116ec <__gethex+0x160>
 801170e:	f100 0914 	add.w	r9, r0, #20
 8011712:	f04f 0b00 	mov.w	fp, #0
 8011716:	f1ca 0301 	rsb	r3, sl, #1
 801171a:	f8cd 9008 	str.w	r9, [sp, #8]
 801171e:	f8cd b000 	str.w	fp, [sp]
 8011722:	9306      	str	r3, [sp, #24]
 8011724:	42b7      	cmp	r7, r6
 8011726:	d340      	bcc.n	80117aa <__gethex+0x21e>
 8011728:	9802      	ldr	r0, [sp, #8]
 801172a:	9b00      	ldr	r3, [sp, #0]
 801172c:	f840 3b04 	str.w	r3, [r0], #4
 8011730:	eba0 0009 	sub.w	r0, r0, r9
 8011734:	1080      	asrs	r0, r0, #2
 8011736:	0146      	lsls	r6, r0, #5
 8011738:	6120      	str	r0, [r4, #16]
 801173a:	4618      	mov	r0, r3
 801173c:	f000 fb42 	bl	8011dc4 <__hi0bits>
 8011740:	1a30      	subs	r0, r6, r0
 8011742:	f8d8 6000 	ldr.w	r6, [r8]
 8011746:	42b0      	cmp	r0, r6
 8011748:	dd63      	ble.n	8011812 <__gethex+0x286>
 801174a:	1b87      	subs	r7, r0, r6
 801174c:	4639      	mov	r1, r7
 801174e:	4620      	mov	r0, r4
 8011750:	f000 fedc 	bl	801250c <__any_on>
 8011754:	4682      	mov	sl, r0
 8011756:	b1a8      	cbz	r0, 8011784 <__gethex+0x1f8>
 8011758:	1e7b      	subs	r3, r7, #1
 801175a:	1159      	asrs	r1, r3, #5
 801175c:	f003 021f 	and.w	r2, r3, #31
 8011760:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011764:	f04f 0a01 	mov.w	sl, #1
 8011768:	fa0a f202 	lsl.w	r2, sl, r2
 801176c:	420a      	tst	r2, r1
 801176e:	d009      	beq.n	8011784 <__gethex+0x1f8>
 8011770:	4553      	cmp	r3, sl
 8011772:	dd05      	ble.n	8011780 <__gethex+0x1f4>
 8011774:	1eb9      	subs	r1, r7, #2
 8011776:	4620      	mov	r0, r4
 8011778:	f000 fec8 	bl	801250c <__any_on>
 801177c:	2800      	cmp	r0, #0
 801177e:	d145      	bne.n	801180c <__gethex+0x280>
 8011780:	f04f 0a02 	mov.w	sl, #2
 8011784:	4639      	mov	r1, r7
 8011786:	4620      	mov	r0, r4
 8011788:	f7ff fe98 	bl	80114bc <rshift>
 801178c:	443d      	add	r5, r7
 801178e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011792:	42ab      	cmp	r3, r5
 8011794:	da4c      	bge.n	8011830 <__gethex+0x2a4>
 8011796:	ee18 0a10 	vmov	r0, s16
 801179a:	4621      	mov	r1, r4
 801179c:	f000 fa5c 	bl	8011c58 <_Bfree>
 80117a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117a2:	2300      	movs	r3, #0
 80117a4:	6013      	str	r3, [r2, #0]
 80117a6:	27a3      	movs	r7, #163	; 0xa3
 80117a8:	e785      	b.n	80116b6 <__gethex+0x12a>
 80117aa:	1e73      	subs	r3, r6, #1
 80117ac:	9a05      	ldr	r2, [sp, #20]
 80117ae:	9303      	str	r3, [sp, #12]
 80117b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d019      	beq.n	80117ec <__gethex+0x260>
 80117b8:	f1bb 0f20 	cmp.w	fp, #32
 80117bc:	d107      	bne.n	80117ce <__gethex+0x242>
 80117be:	9b02      	ldr	r3, [sp, #8]
 80117c0:	9a00      	ldr	r2, [sp, #0]
 80117c2:	f843 2b04 	str.w	r2, [r3], #4
 80117c6:	9302      	str	r3, [sp, #8]
 80117c8:	2300      	movs	r3, #0
 80117ca:	9300      	str	r3, [sp, #0]
 80117cc:	469b      	mov	fp, r3
 80117ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80117d2:	f7ff fec5 	bl	8011560 <__hexdig_fun>
 80117d6:	9b00      	ldr	r3, [sp, #0]
 80117d8:	f000 000f 	and.w	r0, r0, #15
 80117dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80117e0:	4303      	orrs	r3, r0
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	f10b 0b04 	add.w	fp, fp, #4
 80117e8:	9b03      	ldr	r3, [sp, #12]
 80117ea:	e00d      	b.n	8011808 <__gethex+0x27c>
 80117ec:	9b03      	ldr	r3, [sp, #12]
 80117ee:	9a06      	ldr	r2, [sp, #24]
 80117f0:	4413      	add	r3, r2
 80117f2:	42bb      	cmp	r3, r7
 80117f4:	d3e0      	bcc.n	80117b8 <__gethex+0x22c>
 80117f6:	4618      	mov	r0, r3
 80117f8:	9901      	ldr	r1, [sp, #4]
 80117fa:	9307      	str	r3, [sp, #28]
 80117fc:	4652      	mov	r2, sl
 80117fe:	f001 fa2f 	bl	8012c60 <strncmp>
 8011802:	9b07      	ldr	r3, [sp, #28]
 8011804:	2800      	cmp	r0, #0
 8011806:	d1d7      	bne.n	80117b8 <__gethex+0x22c>
 8011808:	461e      	mov	r6, r3
 801180a:	e78b      	b.n	8011724 <__gethex+0x198>
 801180c:	f04f 0a03 	mov.w	sl, #3
 8011810:	e7b8      	b.n	8011784 <__gethex+0x1f8>
 8011812:	da0a      	bge.n	801182a <__gethex+0x29e>
 8011814:	1a37      	subs	r7, r6, r0
 8011816:	4621      	mov	r1, r4
 8011818:	ee18 0a10 	vmov	r0, s16
 801181c:	463a      	mov	r2, r7
 801181e:	f000 fc37 	bl	8012090 <__lshift>
 8011822:	1bed      	subs	r5, r5, r7
 8011824:	4604      	mov	r4, r0
 8011826:	f100 0914 	add.w	r9, r0, #20
 801182a:	f04f 0a00 	mov.w	sl, #0
 801182e:	e7ae      	b.n	801178e <__gethex+0x202>
 8011830:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011834:	42a8      	cmp	r0, r5
 8011836:	dd72      	ble.n	801191e <__gethex+0x392>
 8011838:	1b45      	subs	r5, r0, r5
 801183a:	42ae      	cmp	r6, r5
 801183c:	dc36      	bgt.n	80118ac <__gethex+0x320>
 801183e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011842:	2b02      	cmp	r3, #2
 8011844:	d02a      	beq.n	801189c <__gethex+0x310>
 8011846:	2b03      	cmp	r3, #3
 8011848:	d02c      	beq.n	80118a4 <__gethex+0x318>
 801184a:	2b01      	cmp	r3, #1
 801184c:	d115      	bne.n	801187a <__gethex+0x2ee>
 801184e:	42ae      	cmp	r6, r5
 8011850:	d113      	bne.n	801187a <__gethex+0x2ee>
 8011852:	2e01      	cmp	r6, #1
 8011854:	d10b      	bne.n	801186e <__gethex+0x2e2>
 8011856:	9a04      	ldr	r2, [sp, #16]
 8011858:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801185c:	6013      	str	r3, [r2, #0]
 801185e:	2301      	movs	r3, #1
 8011860:	6123      	str	r3, [r4, #16]
 8011862:	f8c9 3000 	str.w	r3, [r9]
 8011866:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011868:	2762      	movs	r7, #98	; 0x62
 801186a:	601c      	str	r4, [r3, #0]
 801186c:	e723      	b.n	80116b6 <__gethex+0x12a>
 801186e:	1e71      	subs	r1, r6, #1
 8011870:	4620      	mov	r0, r4
 8011872:	f000 fe4b 	bl	801250c <__any_on>
 8011876:	2800      	cmp	r0, #0
 8011878:	d1ed      	bne.n	8011856 <__gethex+0x2ca>
 801187a:	ee18 0a10 	vmov	r0, s16
 801187e:	4621      	mov	r1, r4
 8011880:	f000 f9ea 	bl	8011c58 <_Bfree>
 8011884:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011886:	2300      	movs	r3, #0
 8011888:	6013      	str	r3, [r2, #0]
 801188a:	2750      	movs	r7, #80	; 0x50
 801188c:	e713      	b.n	80116b6 <__gethex+0x12a>
 801188e:	bf00      	nop
 8011890:	080162ec 	.word	0x080162ec
 8011894:	08016270 	.word	0x08016270
 8011898:	08016281 	.word	0x08016281
 801189c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1eb      	bne.n	801187a <__gethex+0x2ee>
 80118a2:	e7d8      	b.n	8011856 <__gethex+0x2ca>
 80118a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1d5      	bne.n	8011856 <__gethex+0x2ca>
 80118aa:	e7e6      	b.n	801187a <__gethex+0x2ee>
 80118ac:	1e6f      	subs	r7, r5, #1
 80118ae:	f1ba 0f00 	cmp.w	sl, #0
 80118b2:	d131      	bne.n	8011918 <__gethex+0x38c>
 80118b4:	b127      	cbz	r7, 80118c0 <__gethex+0x334>
 80118b6:	4639      	mov	r1, r7
 80118b8:	4620      	mov	r0, r4
 80118ba:	f000 fe27 	bl	801250c <__any_on>
 80118be:	4682      	mov	sl, r0
 80118c0:	117b      	asrs	r3, r7, #5
 80118c2:	2101      	movs	r1, #1
 80118c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80118c8:	f007 071f 	and.w	r7, r7, #31
 80118cc:	fa01 f707 	lsl.w	r7, r1, r7
 80118d0:	421f      	tst	r7, r3
 80118d2:	4629      	mov	r1, r5
 80118d4:	4620      	mov	r0, r4
 80118d6:	bf18      	it	ne
 80118d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80118dc:	1b76      	subs	r6, r6, r5
 80118de:	f7ff fded 	bl	80114bc <rshift>
 80118e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80118e6:	2702      	movs	r7, #2
 80118e8:	f1ba 0f00 	cmp.w	sl, #0
 80118ec:	d048      	beq.n	8011980 <__gethex+0x3f4>
 80118ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d015      	beq.n	8011922 <__gethex+0x396>
 80118f6:	2b03      	cmp	r3, #3
 80118f8:	d017      	beq.n	801192a <__gethex+0x39e>
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d109      	bne.n	8011912 <__gethex+0x386>
 80118fe:	f01a 0f02 	tst.w	sl, #2
 8011902:	d006      	beq.n	8011912 <__gethex+0x386>
 8011904:	f8d9 0000 	ldr.w	r0, [r9]
 8011908:	ea4a 0a00 	orr.w	sl, sl, r0
 801190c:	f01a 0f01 	tst.w	sl, #1
 8011910:	d10e      	bne.n	8011930 <__gethex+0x3a4>
 8011912:	f047 0710 	orr.w	r7, r7, #16
 8011916:	e033      	b.n	8011980 <__gethex+0x3f4>
 8011918:	f04f 0a01 	mov.w	sl, #1
 801191c:	e7d0      	b.n	80118c0 <__gethex+0x334>
 801191e:	2701      	movs	r7, #1
 8011920:	e7e2      	b.n	80118e8 <__gethex+0x35c>
 8011922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011924:	f1c3 0301 	rsb	r3, r3, #1
 8011928:	9315      	str	r3, [sp, #84]	; 0x54
 801192a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801192c:	2b00      	cmp	r3, #0
 801192e:	d0f0      	beq.n	8011912 <__gethex+0x386>
 8011930:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011934:	f104 0314 	add.w	r3, r4, #20
 8011938:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801193c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011940:	f04f 0c00 	mov.w	ip, #0
 8011944:	4618      	mov	r0, r3
 8011946:	f853 2b04 	ldr.w	r2, [r3], #4
 801194a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801194e:	d01c      	beq.n	801198a <__gethex+0x3fe>
 8011950:	3201      	adds	r2, #1
 8011952:	6002      	str	r2, [r0, #0]
 8011954:	2f02      	cmp	r7, #2
 8011956:	f104 0314 	add.w	r3, r4, #20
 801195a:	d13f      	bne.n	80119dc <__gethex+0x450>
 801195c:	f8d8 2000 	ldr.w	r2, [r8]
 8011960:	3a01      	subs	r2, #1
 8011962:	42b2      	cmp	r2, r6
 8011964:	d10a      	bne.n	801197c <__gethex+0x3f0>
 8011966:	1171      	asrs	r1, r6, #5
 8011968:	2201      	movs	r2, #1
 801196a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801196e:	f006 061f 	and.w	r6, r6, #31
 8011972:	fa02 f606 	lsl.w	r6, r2, r6
 8011976:	421e      	tst	r6, r3
 8011978:	bf18      	it	ne
 801197a:	4617      	movne	r7, r2
 801197c:	f047 0720 	orr.w	r7, r7, #32
 8011980:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011982:	601c      	str	r4, [r3, #0]
 8011984:	9b04      	ldr	r3, [sp, #16]
 8011986:	601d      	str	r5, [r3, #0]
 8011988:	e695      	b.n	80116b6 <__gethex+0x12a>
 801198a:	4299      	cmp	r1, r3
 801198c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011990:	d8d8      	bhi.n	8011944 <__gethex+0x3b8>
 8011992:	68a3      	ldr	r3, [r4, #8]
 8011994:	459b      	cmp	fp, r3
 8011996:	db19      	blt.n	80119cc <__gethex+0x440>
 8011998:	6861      	ldr	r1, [r4, #4]
 801199a:	ee18 0a10 	vmov	r0, s16
 801199e:	3101      	adds	r1, #1
 80119a0:	f000 f91a 	bl	8011bd8 <_Balloc>
 80119a4:	4681      	mov	r9, r0
 80119a6:	b918      	cbnz	r0, 80119b0 <__gethex+0x424>
 80119a8:	4b1a      	ldr	r3, [pc, #104]	; (8011a14 <__gethex+0x488>)
 80119aa:	4602      	mov	r2, r0
 80119ac:	2184      	movs	r1, #132	; 0x84
 80119ae:	e6a8      	b.n	8011702 <__gethex+0x176>
 80119b0:	6922      	ldr	r2, [r4, #16]
 80119b2:	3202      	adds	r2, #2
 80119b4:	f104 010c 	add.w	r1, r4, #12
 80119b8:	0092      	lsls	r2, r2, #2
 80119ba:	300c      	adds	r0, #12
 80119bc:	f7fd fafc 	bl	800efb8 <memcpy>
 80119c0:	4621      	mov	r1, r4
 80119c2:	ee18 0a10 	vmov	r0, s16
 80119c6:	f000 f947 	bl	8011c58 <_Bfree>
 80119ca:	464c      	mov	r4, r9
 80119cc:	6923      	ldr	r3, [r4, #16]
 80119ce:	1c5a      	adds	r2, r3, #1
 80119d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80119d4:	6122      	str	r2, [r4, #16]
 80119d6:	2201      	movs	r2, #1
 80119d8:	615a      	str	r2, [r3, #20]
 80119da:	e7bb      	b.n	8011954 <__gethex+0x3c8>
 80119dc:	6922      	ldr	r2, [r4, #16]
 80119de:	455a      	cmp	r2, fp
 80119e0:	dd0b      	ble.n	80119fa <__gethex+0x46e>
 80119e2:	2101      	movs	r1, #1
 80119e4:	4620      	mov	r0, r4
 80119e6:	f7ff fd69 	bl	80114bc <rshift>
 80119ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80119ee:	3501      	adds	r5, #1
 80119f0:	42ab      	cmp	r3, r5
 80119f2:	f6ff aed0 	blt.w	8011796 <__gethex+0x20a>
 80119f6:	2701      	movs	r7, #1
 80119f8:	e7c0      	b.n	801197c <__gethex+0x3f0>
 80119fa:	f016 061f 	ands.w	r6, r6, #31
 80119fe:	d0fa      	beq.n	80119f6 <__gethex+0x46a>
 8011a00:	449a      	add	sl, r3
 8011a02:	f1c6 0620 	rsb	r6, r6, #32
 8011a06:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011a0a:	f000 f9db 	bl	8011dc4 <__hi0bits>
 8011a0e:	42b0      	cmp	r0, r6
 8011a10:	dbe7      	blt.n	80119e2 <__gethex+0x456>
 8011a12:	e7f0      	b.n	80119f6 <__gethex+0x46a>
 8011a14:	08016270 	.word	0x08016270

08011a18 <L_shift>:
 8011a18:	f1c2 0208 	rsb	r2, r2, #8
 8011a1c:	0092      	lsls	r2, r2, #2
 8011a1e:	b570      	push	{r4, r5, r6, lr}
 8011a20:	f1c2 0620 	rsb	r6, r2, #32
 8011a24:	6843      	ldr	r3, [r0, #4]
 8011a26:	6804      	ldr	r4, [r0, #0]
 8011a28:	fa03 f506 	lsl.w	r5, r3, r6
 8011a2c:	432c      	orrs	r4, r5
 8011a2e:	40d3      	lsrs	r3, r2
 8011a30:	6004      	str	r4, [r0, #0]
 8011a32:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a36:	4288      	cmp	r0, r1
 8011a38:	d3f4      	bcc.n	8011a24 <L_shift+0xc>
 8011a3a:	bd70      	pop	{r4, r5, r6, pc}

08011a3c <__match>:
 8011a3c:	b530      	push	{r4, r5, lr}
 8011a3e:	6803      	ldr	r3, [r0, #0]
 8011a40:	3301      	adds	r3, #1
 8011a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a46:	b914      	cbnz	r4, 8011a4e <__match+0x12>
 8011a48:	6003      	str	r3, [r0, #0]
 8011a4a:	2001      	movs	r0, #1
 8011a4c:	bd30      	pop	{r4, r5, pc}
 8011a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011a56:	2d19      	cmp	r5, #25
 8011a58:	bf98      	it	ls
 8011a5a:	3220      	addls	r2, #32
 8011a5c:	42a2      	cmp	r2, r4
 8011a5e:	d0f0      	beq.n	8011a42 <__match+0x6>
 8011a60:	2000      	movs	r0, #0
 8011a62:	e7f3      	b.n	8011a4c <__match+0x10>

08011a64 <__hexnan>:
 8011a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a68:	680b      	ldr	r3, [r1, #0]
 8011a6a:	6801      	ldr	r1, [r0, #0]
 8011a6c:	115e      	asrs	r6, r3, #5
 8011a6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a72:	f013 031f 	ands.w	r3, r3, #31
 8011a76:	b087      	sub	sp, #28
 8011a78:	bf18      	it	ne
 8011a7a:	3604      	addne	r6, #4
 8011a7c:	2500      	movs	r5, #0
 8011a7e:	1f37      	subs	r7, r6, #4
 8011a80:	4682      	mov	sl, r0
 8011a82:	4690      	mov	r8, r2
 8011a84:	9301      	str	r3, [sp, #4]
 8011a86:	f846 5c04 	str.w	r5, [r6, #-4]
 8011a8a:	46b9      	mov	r9, r7
 8011a8c:	463c      	mov	r4, r7
 8011a8e:	9502      	str	r5, [sp, #8]
 8011a90:	46ab      	mov	fp, r5
 8011a92:	784a      	ldrb	r2, [r1, #1]
 8011a94:	1c4b      	adds	r3, r1, #1
 8011a96:	9303      	str	r3, [sp, #12]
 8011a98:	b342      	cbz	r2, 8011aec <__hexnan+0x88>
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	9105      	str	r1, [sp, #20]
 8011a9e:	9204      	str	r2, [sp, #16]
 8011aa0:	f7ff fd5e 	bl	8011560 <__hexdig_fun>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	d14f      	bne.n	8011b48 <__hexnan+0xe4>
 8011aa8:	9a04      	ldr	r2, [sp, #16]
 8011aaa:	9905      	ldr	r1, [sp, #20]
 8011aac:	2a20      	cmp	r2, #32
 8011aae:	d818      	bhi.n	8011ae2 <__hexnan+0x7e>
 8011ab0:	9b02      	ldr	r3, [sp, #8]
 8011ab2:	459b      	cmp	fp, r3
 8011ab4:	dd13      	ble.n	8011ade <__hexnan+0x7a>
 8011ab6:	454c      	cmp	r4, r9
 8011ab8:	d206      	bcs.n	8011ac8 <__hexnan+0x64>
 8011aba:	2d07      	cmp	r5, #7
 8011abc:	dc04      	bgt.n	8011ac8 <__hexnan+0x64>
 8011abe:	462a      	mov	r2, r5
 8011ac0:	4649      	mov	r1, r9
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f7ff ffa8 	bl	8011a18 <L_shift>
 8011ac8:	4544      	cmp	r4, r8
 8011aca:	d950      	bls.n	8011b6e <__hexnan+0x10a>
 8011acc:	2300      	movs	r3, #0
 8011ace:	f1a4 0904 	sub.w	r9, r4, #4
 8011ad2:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ad6:	f8cd b008 	str.w	fp, [sp, #8]
 8011ada:	464c      	mov	r4, r9
 8011adc:	461d      	mov	r5, r3
 8011ade:	9903      	ldr	r1, [sp, #12]
 8011ae0:	e7d7      	b.n	8011a92 <__hexnan+0x2e>
 8011ae2:	2a29      	cmp	r2, #41	; 0x29
 8011ae4:	d156      	bne.n	8011b94 <__hexnan+0x130>
 8011ae6:	3102      	adds	r1, #2
 8011ae8:	f8ca 1000 	str.w	r1, [sl]
 8011aec:	f1bb 0f00 	cmp.w	fp, #0
 8011af0:	d050      	beq.n	8011b94 <__hexnan+0x130>
 8011af2:	454c      	cmp	r4, r9
 8011af4:	d206      	bcs.n	8011b04 <__hexnan+0xa0>
 8011af6:	2d07      	cmp	r5, #7
 8011af8:	dc04      	bgt.n	8011b04 <__hexnan+0xa0>
 8011afa:	462a      	mov	r2, r5
 8011afc:	4649      	mov	r1, r9
 8011afe:	4620      	mov	r0, r4
 8011b00:	f7ff ff8a 	bl	8011a18 <L_shift>
 8011b04:	4544      	cmp	r4, r8
 8011b06:	d934      	bls.n	8011b72 <__hexnan+0x10e>
 8011b08:	f1a8 0204 	sub.w	r2, r8, #4
 8011b0c:	4623      	mov	r3, r4
 8011b0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b12:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b16:	429f      	cmp	r7, r3
 8011b18:	d2f9      	bcs.n	8011b0e <__hexnan+0xaa>
 8011b1a:	1b3b      	subs	r3, r7, r4
 8011b1c:	f023 0303 	bic.w	r3, r3, #3
 8011b20:	3304      	adds	r3, #4
 8011b22:	3401      	adds	r4, #1
 8011b24:	3e03      	subs	r6, #3
 8011b26:	42b4      	cmp	r4, r6
 8011b28:	bf88      	it	hi
 8011b2a:	2304      	movhi	r3, #4
 8011b2c:	4443      	add	r3, r8
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f843 2b04 	str.w	r2, [r3], #4
 8011b34:	429f      	cmp	r7, r3
 8011b36:	d2fb      	bcs.n	8011b30 <__hexnan+0xcc>
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	b91b      	cbnz	r3, 8011b44 <__hexnan+0xe0>
 8011b3c:	4547      	cmp	r7, r8
 8011b3e:	d127      	bne.n	8011b90 <__hexnan+0x12c>
 8011b40:	2301      	movs	r3, #1
 8011b42:	603b      	str	r3, [r7, #0]
 8011b44:	2005      	movs	r0, #5
 8011b46:	e026      	b.n	8011b96 <__hexnan+0x132>
 8011b48:	3501      	adds	r5, #1
 8011b4a:	2d08      	cmp	r5, #8
 8011b4c:	f10b 0b01 	add.w	fp, fp, #1
 8011b50:	dd06      	ble.n	8011b60 <__hexnan+0xfc>
 8011b52:	4544      	cmp	r4, r8
 8011b54:	d9c3      	bls.n	8011ade <__hexnan+0x7a>
 8011b56:	2300      	movs	r3, #0
 8011b58:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b5c:	2501      	movs	r5, #1
 8011b5e:	3c04      	subs	r4, #4
 8011b60:	6822      	ldr	r2, [r4, #0]
 8011b62:	f000 000f 	and.w	r0, r0, #15
 8011b66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011b6a:	6022      	str	r2, [r4, #0]
 8011b6c:	e7b7      	b.n	8011ade <__hexnan+0x7a>
 8011b6e:	2508      	movs	r5, #8
 8011b70:	e7b5      	b.n	8011ade <__hexnan+0x7a>
 8011b72:	9b01      	ldr	r3, [sp, #4]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d0df      	beq.n	8011b38 <__hexnan+0xd4>
 8011b78:	f04f 32ff 	mov.w	r2, #4294967295
 8011b7c:	f1c3 0320 	rsb	r3, r3, #32
 8011b80:	fa22 f303 	lsr.w	r3, r2, r3
 8011b84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011b88:	401a      	ands	r2, r3
 8011b8a:	f846 2c04 	str.w	r2, [r6, #-4]
 8011b8e:	e7d3      	b.n	8011b38 <__hexnan+0xd4>
 8011b90:	3f04      	subs	r7, #4
 8011b92:	e7d1      	b.n	8011b38 <__hexnan+0xd4>
 8011b94:	2004      	movs	r0, #4
 8011b96:	b007      	add	sp, #28
 8011b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b9c <_localeconv_r>:
 8011b9c:	4800      	ldr	r0, [pc, #0]	; (8011ba0 <_localeconv_r+0x4>)
 8011b9e:	4770      	bx	lr
 8011ba0:	20000180 	.word	0x20000180

08011ba4 <malloc>:
 8011ba4:	4b02      	ldr	r3, [pc, #8]	; (8011bb0 <malloc+0xc>)
 8011ba6:	4601      	mov	r1, r0
 8011ba8:	6818      	ldr	r0, [r3, #0]
 8011baa:	f000 bd2f 	b.w	801260c <_malloc_r>
 8011bae:	bf00      	nop
 8011bb0:	20000028 	.word	0x20000028

08011bb4 <__ascii_mbtowc>:
 8011bb4:	b082      	sub	sp, #8
 8011bb6:	b901      	cbnz	r1, 8011bba <__ascii_mbtowc+0x6>
 8011bb8:	a901      	add	r1, sp, #4
 8011bba:	b142      	cbz	r2, 8011bce <__ascii_mbtowc+0x1a>
 8011bbc:	b14b      	cbz	r3, 8011bd2 <__ascii_mbtowc+0x1e>
 8011bbe:	7813      	ldrb	r3, [r2, #0]
 8011bc0:	600b      	str	r3, [r1, #0]
 8011bc2:	7812      	ldrb	r2, [r2, #0]
 8011bc4:	1e10      	subs	r0, r2, #0
 8011bc6:	bf18      	it	ne
 8011bc8:	2001      	movne	r0, #1
 8011bca:	b002      	add	sp, #8
 8011bcc:	4770      	bx	lr
 8011bce:	4610      	mov	r0, r2
 8011bd0:	e7fb      	b.n	8011bca <__ascii_mbtowc+0x16>
 8011bd2:	f06f 0001 	mvn.w	r0, #1
 8011bd6:	e7f8      	b.n	8011bca <__ascii_mbtowc+0x16>

08011bd8 <_Balloc>:
 8011bd8:	b570      	push	{r4, r5, r6, lr}
 8011bda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011bdc:	4604      	mov	r4, r0
 8011bde:	460d      	mov	r5, r1
 8011be0:	b976      	cbnz	r6, 8011c00 <_Balloc+0x28>
 8011be2:	2010      	movs	r0, #16
 8011be4:	f7ff ffde 	bl	8011ba4 <malloc>
 8011be8:	4602      	mov	r2, r0
 8011bea:	6260      	str	r0, [r4, #36]	; 0x24
 8011bec:	b920      	cbnz	r0, 8011bf8 <_Balloc+0x20>
 8011bee:	4b18      	ldr	r3, [pc, #96]	; (8011c50 <_Balloc+0x78>)
 8011bf0:	4818      	ldr	r0, [pc, #96]	; (8011c54 <_Balloc+0x7c>)
 8011bf2:	2166      	movs	r1, #102	; 0x66
 8011bf4:	f7fe fdb8 	bl	8010768 <__assert_func>
 8011bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011bfc:	6006      	str	r6, [r0, #0]
 8011bfe:	60c6      	str	r6, [r0, #12]
 8011c00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011c02:	68f3      	ldr	r3, [r6, #12]
 8011c04:	b183      	cbz	r3, 8011c28 <_Balloc+0x50>
 8011c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c08:	68db      	ldr	r3, [r3, #12]
 8011c0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c0e:	b9b8      	cbnz	r0, 8011c40 <_Balloc+0x68>
 8011c10:	2101      	movs	r1, #1
 8011c12:	fa01 f605 	lsl.w	r6, r1, r5
 8011c16:	1d72      	adds	r2, r6, #5
 8011c18:	0092      	lsls	r2, r2, #2
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f000 fc97 	bl	801254e <_calloc_r>
 8011c20:	b160      	cbz	r0, 8011c3c <_Balloc+0x64>
 8011c22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c26:	e00e      	b.n	8011c46 <_Balloc+0x6e>
 8011c28:	2221      	movs	r2, #33	; 0x21
 8011c2a:	2104      	movs	r1, #4
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f000 fc8e 	bl	801254e <_calloc_r>
 8011c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c34:	60f0      	str	r0, [r6, #12]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d1e4      	bne.n	8011c06 <_Balloc+0x2e>
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}
 8011c40:	6802      	ldr	r2, [r0, #0]
 8011c42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c46:	2300      	movs	r3, #0
 8011c48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c4c:	e7f7      	b.n	8011c3e <_Balloc+0x66>
 8011c4e:	bf00      	nop
 8011c50:	08016150 	.word	0x08016150
 8011c54:	08016300 	.word	0x08016300

08011c58 <_Bfree>:
 8011c58:	b570      	push	{r4, r5, r6, lr}
 8011c5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c5c:	4605      	mov	r5, r0
 8011c5e:	460c      	mov	r4, r1
 8011c60:	b976      	cbnz	r6, 8011c80 <_Bfree+0x28>
 8011c62:	2010      	movs	r0, #16
 8011c64:	f7ff ff9e 	bl	8011ba4 <malloc>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	6268      	str	r0, [r5, #36]	; 0x24
 8011c6c:	b920      	cbnz	r0, 8011c78 <_Bfree+0x20>
 8011c6e:	4b09      	ldr	r3, [pc, #36]	; (8011c94 <_Bfree+0x3c>)
 8011c70:	4809      	ldr	r0, [pc, #36]	; (8011c98 <_Bfree+0x40>)
 8011c72:	218a      	movs	r1, #138	; 0x8a
 8011c74:	f7fe fd78 	bl	8010768 <__assert_func>
 8011c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c7c:	6006      	str	r6, [r0, #0]
 8011c7e:	60c6      	str	r6, [r0, #12]
 8011c80:	b13c      	cbz	r4, 8011c92 <_Bfree+0x3a>
 8011c82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011c84:	6862      	ldr	r2, [r4, #4]
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c8c:	6021      	str	r1, [r4, #0]
 8011c8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011c92:	bd70      	pop	{r4, r5, r6, pc}
 8011c94:	08016150 	.word	0x08016150
 8011c98:	08016300 	.word	0x08016300

08011c9c <__multadd>:
 8011c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca0:	690e      	ldr	r6, [r1, #16]
 8011ca2:	4607      	mov	r7, r0
 8011ca4:	4698      	mov	r8, r3
 8011ca6:	460c      	mov	r4, r1
 8011ca8:	f101 0014 	add.w	r0, r1, #20
 8011cac:	2300      	movs	r3, #0
 8011cae:	6805      	ldr	r5, [r0, #0]
 8011cb0:	b2a9      	uxth	r1, r5
 8011cb2:	fb02 8101 	mla	r1, r2, r1, r8
 8011cb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011cba:	0c2d      	lsrs	r5, r5, #16
 8011cbc:	fb02 c505 	mla	r5, r2, r5, ip
 8011cc0:	b289      	uxth	r1, r1
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011cc8:	429e      	cmp	r6, r3
 8011cca:	f840 1b04 	str.w	r1, [r0], #4
 8011cce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011cd2:	dcec      	bgt.n	8011cae <__multadd+0x12>
 8011cd4:	f1b8 0f00 	cmp.w	r8, #0
 8011cd8:	d022      	beq.n	8011d20 <__multadd+0x84>
 8011cda:	68a3      	ldr	r3, [r4, #8]
 8011cdc:	42b3      	cmp	r3, r6
 8011cde:	dc19      	bgt.n	8011d14 <__multadd+0x78>
 8011ce0:	6861      	ldr	r1, [r4, #4]
 8011ce2:	4638      	mov	r0, r7
 8011ce4:	3101      	adds	r1, #1
 8011ce6:	f7ff ff77 	bl	8011bd8 <_Balloc>
 8011cea:	4605      	mov	r5, r0
 8011cec:	b928      	cbnz	r0, 8011cfa <__multadd+0x5e>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	4b0d      	ldr	r3, [pc, #52]	; (8011d28 <__multadd+0x8c>)
 8011cf2:	480e      	ldr	r0, [pc, #56]	; (8011d2c <__multadd+0x90>)
 8011cf4:	21b5      	movs	r1, #181	; 0xb5
 8011cf6:	f7fe fd37 	bl	8010768 <__assert_func>
 8011cfa:	6922      	ldr	r2, [r4, #16]
 8011cfc:	3202      	adds	r2, #2
 8011cfe:	f104 010c 	add.w	r1, r4, #12
 8011d02:	0092      	lsls	r2, r2, #2
 8011d04:	300c      	adds	r0, #12
 8011d06:	f7fd f957 	bl	800efb8 <memcpy>
 8011d0a:	4621      	mov	r1, r4
 8011d0c:	4638      	mov	r0, r7
 8011d0e:	f7ff ffa3 	bl	8011c58 <_Bfree>
 8011d12:	462c      	mov	r4, r5
 8011d14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011d18:	3601      	adds	r6, #1
 8011d1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8011d1e:	6126      	str	r6, [r4, #16]
 8011d20:	4620      	mov	r0, r4
 8011d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d26:	bf00      	nop
 8011d28:	08016270 	.word	0x08016270
 8011d2c:	08016300 	.word	0x08016300

08011d30 <__s2b>:
 8011d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d34:	460c      	mov	r4, r1
 8011d36:	4615      	mov	r5, r2
 8011d38:	461f      	mov	r7, r3
 8011d3a:	2209      	movs	r2, #9
 8011d3c:	3308      	adds	r3, #8
 8011d3e:	4606      	mov	r6, r0
 8011d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d44:	2100      	movs	r1, #0
 8011d46:	2201      	movs	r2, #1
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	db09      	blt.n	8011d60 <__s2b+0x30>
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	f7ff ff43 	bl	8011bd8 <_Balloc>
 8011d52:	b940      	cbnz	r0, 8011d66 <__s2b+0x36>
 8011d54:	4602      	mov	r2, r0
 8011d56:	4b19      	ldr	r3, [pc, #100]	; (8011dbc <__s2b+0x8c>)
 8011d58:	4819      	ldr	r0, [pc, #100]	; (8011dc0 <__s2b+0x90>)
 8011d5a:	21ce      	movs	r1, #206	; 0xce
 8011d5c:	f7fe fd04 	bl	8010768 <__assert_func>
 8011d60:	0052      	lsls	r2, r2, #1
 8011d62:	3101      	adds	r1, #1
 8011d64:	e7f0      	b.n	8011d48 <__s2b+0x18>
 8011d66:	9b08      	ldr	r3, [sp, #32]
 8011d68:	6143      	str	r3, [r0, #20]
 8011d6a:	2d09      	cmp	r5, #9
 8011d6c:	f04f 0301 	mov.w	r3, #1
 8011d70:	6103      	str	r3, [r0, #16]
 8011d72:	dd16      	ble.n	8011da2 <__s2b+0x72>
 8011d74:	f104 0909 	add.w	r9, r4, #9
 8011d78:	46c8      	mov	r8, r9
 8011d7a:	442c      	add	r4, r5
 8011d7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011d80:	4601      	mov	r1, r0
 8011d82:	3b30      	subs	r3, #48	; 0x30
 8011d84:	220a      	movs	r2, #10
 8011d86:	4630      	mov	r0, r6
 8011d88:	f7ff ff88 	bl	8011c9c <__multadd>
 8011d8c:	45a0      	cmp	r8, r4
 8011d8e:	d1f5      	bne.n	8011d7c <__s2b+0x4c>
 8011d90:	f1a5 0408 	sub.w	r4, r5, #8
 8011d94:	444c      	add	r4, r9
 8011d96:	1b2d      	subs	r5, r5, r4
 8011d98:	1963      	adds	r3, r4, r5
 8011d9a:	42bb      	cmp	r3, r7
 8011d9c:	db04      	blt.n	8011da8 <__s2b+0x78>
 8011d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011da2:	340a      	adds	r4, #10
 8011da4:	2509      	movs	r5, #9
 8011da6:	e7f6      	b.n	8011d96 <__s2b+0x66>
 8011da8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011dac:	4601      	mov	r1, r0
 8011dae:	3b30      	subs	r3, #48	; 0x30
 8011db0:	220a      	movs	r2, #10
 8011db2:	4630      	mov	r0, r6
 8011db4:	f7ff ff72 	bl	8011c9c <__multadd>
 8011db8:	e7ee      	b.n	8011d98 <__s2b+0x68>
 8011dba:	bf00      	nop
 8011dbc:	08016270 	.word	0x08016270
 8011dc0:	08016300 	.word	0x08016300

08011dc4 <__hi0bits>:
 8011dc4:	0c03      	lsrs	r3, r0, #16
 8011dc6:	041b      	lsls	r3, r3, #16
 8011dc8:	b9d3      	cbnz	r3, 8011e00 <__hi0bits+0x3c>
 8011dca:	0400      	lsls	r0, r0, #16
 8011dcc:	2310      	movs	r3, #16
 8011dce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011dd2:	bf04      	itt	eq
 8011dd4:	0200      	lsleq	r0, r0, #8
 8011dd6:	3308      	addeq	r3, #8
 8011dd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ddc:	bf04      	itt	eq
 8011dde:	0100      	lsleq	r0, r0, #4
 8011de0:	3304      	addeq	r3, #4
 8011de2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011de6:	bf04      	itt	eq
 8011de8:	0080      	lsleq	r0, r0, #2
 8011dea:	3302      	addeq	r3, #2
 8011dec:	2800      	cmp	r0, #0
 8011dee:	db05      	blt.n	8011dfc <__hi0bits+0x38>
 8011df0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011df4:	f103 0301 	add.w	r3, r3, #1
 8011df8:	bf08      	it	eq
 8011dfa:	2320      	moveq	r3, #32
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	4770      	bx	lr
 8011e00:	2300      	movs	r3, #0
 8011e02:	e7e4      	b.n	8011dce <__hi0bits+0xa>

08011e04 <__lo0bits>:
 8011e04:	6803      	ldr	r3, [r0, #0]
 8011e06:	f013 0207 	ands.w	r2, r3, #7
 8011e0a:	4601      	mov	r1, r0
 8011e0c:	d00b      	beq.n	8011e26 <__lo0bits+0x22>
 8011e0e:	07da      	lsls	r2, r3, #31
 8011e10:	d424      	bmi.n	8011e5c <__lo0bits+0x58>
 8011e12:	0798      	lsls	r0, r3, #30
 8011e14:	bf49      	itett	mi
 8011e16:	085b      	lsrmi	r3, r3, #1
 8011e18:	089b      	lsrpl	r3, r3, #2
 8011e1a:	2001      	movmi	r0, #1
 8011e1c:	600b      	strmi	r3, [r1, #0]
 8011e1e:	bf5c      	itt	pl
 8011e20:	600b      	strpl	r3, [r1, #0]
 8011e22:	2002      	movpl	r0, #2
 8011e24:	4770      	bx	lr
 8011e26:	b298      	uxth	r0, r3
 8011e28:	b9b0      	cbnz	r0, 8011e58 <__lo0bits+0x54>
 8011e2a:	0c1b      	lsrs	r3, r3, #16
 8011e2c:	2010      	movs	r0, #16
 8011e2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011e32:	bf04      	itt	eq
 8011e34:	0a1b      	lsreq	r3, r3, #8
 8011e36:	3008      	addeq	r0, #8
 8011e38:	071a      	lsls	r2, r3, #28
 8011e3a:	bf04      	itt	eq
 8011e3c:	091b      	lsreq	r3, r3, #4
 8011e3e:	3004      	addeq	r0, #4
 8011e40:	079a      	lsls	r2, r3, #30
 8011e42:	bf04      	itt	eq
 8011e44:	089b      	lsreq	r3, r3, #2
 8011e46:	3002      	addeq	r0, #2
 8011e48:	07da      	lsls	r2, r3, #31
 8011e4a:	d403      	bmi.n	8011e54 <__lo0bits+0x50>
 8011e4c:	085b      	lsrs	r3, r3, #1
 8011e4e:	f100 0001 	add.w	r0, r0, #1
 8011e52:	d005      	beq.n	8011e60 <__lo0bits+0x5c>
 8011e54:	600b      	str	r3, [r1, #0]
 8011e56:	4770      	bx	lr
 8011e58:	4610      	mov	r0, r2
 8011e5a:	e7e8      	b.n	8011e2e <__lo0bits+0x2a>
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	4770      	bx	lr
 8011e60:	2020      	movs	r0, #32
 8011e62:	4770      	bx	lr

08011e64 <__i2b>:
 8011e64:	b510      	push	{r4, lr}
 8011e66:	460c      	mov	r4, r1
 8011e68:	2101      	movs	r1, #1
 8011e6a:	f7ff feb5 	bl	8011bd8 <_Balloc>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	b928      	cbnz	r0, 8011e7e <__i2b+0x1a>
 8011e72:	4b05      	ldr	r3, [pc, #20]	; (8011e88 <__i2b+0x24>)
 8011e74:	4805      	ldr	r0, [pc, #20]	; (8011e8c <__i2b+0x28>)
 8011e76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011e7a:	f7fe fc75 	bl	8010768 <__assert_func>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	6144      	str	r4, [r0, #20]
 8011e82:	6103      	str	r3, [r0, #16]
 8011e84:	bd10      	pop	{r4, pc}
 8011e86:	bf00      	nop
 8011e88:	08016270 	.word	0x08016270
 8011e8c:	08016300 	.word	0x08016300

08011e90 <__multiply>:
 8011e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e94:	4614      	mov	r4, r2
 8011e96:	690a      	ldr	r2, [r1, #16]
 8011e98:	6923      	ldr	r3, [r4, #16]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	bfb8      	it	lt
 8011e9e:	460b      	movlt	r3, r1
 8011ea0:	460d      	mov	r5, r1
 8011ea2:	bfbc      	itt	lt
 8011ea4:	4625      	movlt	r5, r4
 8011ea6:	461c      	movlt	r4, r3
 8011ea8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011eac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011eb0:	68ab      	ldr	r3, [r5, #8]
 8011eb2:	6869      	ldr	r1, [r5, #4]
 8011eb4:	eb0a 0709 	add.w	r7, sl, r9
 8011eb8:	42bb      	cmp	r3, r7
 8011eba:	b085      	sub	sp, #20
 8011ebc:	bfb8      	it	lt
 8011ebe:	3101      	addlt	r1, #1
 8011ec0:	f7ff fe8a 	bl	8011bd8 <_Balloc>
 8011ec4:	b930      	cbnz	r0, 8011ed4 <__multiply+0x44>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	4b42      	ldr	r3, [pc, #264]	; (8011fd4 <__multiply+0x144>)
 8011eca:	4843      	ldr	r0, [pc, #268]	; (8011fd8 <__multiply+0x148>)
 8011ecc:	f240 115d 	movw	r1, #349	; 0x15d
 8011ed0:	f7fe fc4a 	bl	8010768 <__assert_func>
 8011ed4:	f100 0614 	add.w	r6, r0, #20
 8011ed8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011edc:	4633      	mov	r3, r6
 8011ede:	2200      	movs	r2, #0
 8011ee0:	4543      	cmp	r3, r8
 8011ee2:	d31e      	bcc.n	8011f22 <__multiply+0x92>
 8011ee4:	f105 0c14 	add.w	ip, r5, #20
 8011ee8:	f104 0314 	add.w	r3, r4, #20
 8011eec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011ef0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011ef4:	9202      	str	r2, [sp, #8]
 8011ef6:	ebac 0205 	sub.w	r2, ip, r5
 8011efa:	3a15      	subs	r2, #21
 8011efc:	f022 0203 	bic.w	r2, r2, #3
 8011f00:	3204      	adds	r2, #4
 8011f02:	f105 0115 	add.w	r1, r5, #21
 8011f06:	458c      	cmp	ip, r1
 8011f08:	bf38      	it	cc
 8011f0a:	2204      	movcc	r2, #4
 8011f0c:	9201      	str	r2, [sp, #4]
 8011f0e:	9a02      	ldr	r2, [sp, #8]
 8011f10:	9303      	str	r3, [sp, #12]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d808      	bhi.n	8011f28 <__multiply+0x98>
 8011f16:	2f00      	cmp	r7, #0
 8011f18:	dc55      	bgt.n	8011fc6 <__multiply+0x136>
 8011f1a:	6107      	str	r7, [r0, #16]
 8011f1c:	b005      	add	sp, #20
 8011f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f22:	f843 2b04 	str.w	r2, [r3], #4
 8011f26:	e7db      	b.n	8011ee0 <__multiply+0x50>
 8011f28:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f2c:	f1ba 0f00 	cmp.w	sl, #0
 8011f30:	d020      	beq.n	8011f74 <__multiply+0xe4>
 8011f32:	f105 0e14 	add.w	lr, r5, #20
 8011f36:	46b1      	mov	r9, r6
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011f3e:	f8d9 b000 	ldr.w	fp, [r9]
 8011f42:	b2a1      	uxth	r1, r4
 8011f44:	fa1f fb8b 	uxth.w	fp, fp
 8011f48:	fb0a b101 	mla	r1, sl, r1, fp
 8011f4c:	4411      	add	r1, r2
 8011f4e:	f8d9 2000 	ldr.w	r2, [r9]
 8011f52:	0c24      	lsrs	r4, r4, #16
 8011f54:	0c12      	lsrs	r2, r2, #16
 8011f56:	fb0a 2404 	mla	r4, sl, r4, r2
 8011f5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011f5e:	b289      	uxth	r1, r1
 8011f60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011f64:	45f4      	cmp	ip, lr
 8011f66:	f849 1b04 	str.w	r1, [r9], #4
 8011f6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011f6e:	d8e4      	bhi.n	8011f3a <__multiply+0xaa>
 8011f70:	9901      	ldr	r1, [sp, #4]
 8011f72:	5072      	str	r2, [r6, r1]
 8011f74:	9a03      	ldr	r2, [sp, #12]
 8011f76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	f1b9 0f00 	cmp.w	r9, #0
 8011f80:	d01f      	beq.n	8011fc2 <__multiply+0x132>
 8011f82:	6834      	ldr	r4, [r6, #0]
 8011f84:	f105 0114 	add.w	r1, r5, #20
 8011f88:	46b6      	mov	lr, r6
 8011f8a:	f04f 0a00 	mov.w	sl, #0
 8011f8e:	880a      	ldrh	r2, [r1, #0]
 8011f90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011f94:	fb09 b202 	mla	r2, r9, r2, fp
 8011f98:	4492      	add	sl, r2
 8011f9a:	b2a4      	uxth	r4, r4
 8011f9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011fa0:	f84e 4b04 	str.w	r4, [lr], #4
 8011fa4:	f851 4b04 	ldr.w	r4, [r1], #4
 8011fa8:	f8be 2000 	ldrh.w	r2, [lr]
 8011fac:	0c24      	lsrs	r4, r4, #16
 8011fae:	fb09 2404 	mla	r4, r9, r4, r2
 8011fb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011fb6:	458c      	cmp	ip, r1
 8011fb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011fbc:	d8e7      	bhi.n	8011f8e <__multiply+0xfe>
 8011fbe:	9a01      	ldr	r2, [sp, #4]
 8011fc0:	50b4      	str	r4, [r6, r2]
 8011fc2:	3604      	adds	r6, #4
 8011fc4:	e7a3      	b.n	8011f0e <__multiply+0x7e>
 8011fc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1a5      	bne.n	8011f1a <__multiply+0x8a>
 8011fce:	3f01      	subs	r7, #1
 8011fd0:	e7a1      	b.n	8011f16 <__multiply+0x86>
 8011fd2:	bf00      	nop
 8011fd4:	08016270 	.word	0x08016270
 8011fd8:	08016300 	.word	0x08016300

08011fdc <__pow5mult>:
 8011fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fe0:	4615      	mov	r5, r2
 8011fe2:	f012 0203 	ands.w	r2, r2, #3
 8011fe6:	4606      	mov	r6, r0
 8011fe8:	460f      	mov	r7, r1
 8011fea:	d007      	beq.n	8011ffc <__pow5mult+0x20>
 8011fec:	4c25      	ldr	r4, [pc, #148]	; (8012084 <__pow5mult+0xa8>)
 8011fee:	3a01      	subs	r2, #1
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011ff6:	f7ff fe51 	bl	8011c9c <__multadd>
 8011ffa:	4607      	mov	r7, r0
 8011ffc:	10ad      	asrs	r5, r5, #2
 8011ffe:	d03d      	beq.n	801207c <__pow5mult+0xa0>
 8012000:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012002:	b97c      	cbnz	r4, 8012024 <__pow5mult+0x48>
 8012004:	2010      	movs	r0, #16
 8012006:	f7ff fdcd 	bl	8011ba4 <malloc>
 801200a:	4602      	mov	r2, r0
 801200c:	6270      	str	r0, [r6, #36]	; 0x24
 801200e:	b928      	cbnz	r0, 801201c <__pow5mult+0x40>
 8012010:	4b1d      	ldr	r3, [pc, #116]	; (8012088 <__pow5mult+0xac>)
 8012012:	481e      	ldr	r0, [pc, #120]	; (801208c <__pow5mult+0xb0>)
 8012014:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012018:	f7fe fba6 	bl	8010768 <__assert_func>
 801201c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012020:	6004      	str	r4, [r0, #0]
 8012022:	60c4      	str	r4, [r0, #12]
 8012024:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801202c:	b94c      	cbnz	r4, 8012042 <__pow5mult+0x66>
 801202e:	f240 2171 	movw	r1, #625	; 0x271
 8012032:	4630      	mov	r0, r6
 8012034:	f7ff ff16 	bl	8011e64 <__i2b>
 8012038:	2300      	movs	r3, #0
 801203a:	f8c8 0008 	str.w	r0, [r8, #8]
 801203e:	4604      	mov	r4, r0
 8012040:	6003      	str	r3, [r0, #0]
 8012042:	f04f 0900 	mov.w	r9, #0
 8012046:	07eb      	lsls	r3, r5, #31
 8012048:	d50a      	bpl.n	8012060 <__pow5mult+0x84>
 801204a:	4639      	mov	r1, r7
 801204c:	4622      	mov	r2, r4
 801204e:	4630      	mov	r0, r6
 8012050:	f7ff ff1e 	bl	8011e90 <__multiply>
 8012054:	4639      	mov	r1, r7
 8012056:	4680      	mov	r8, r0
 8012058:	4630      	mov	r0, r6
 801205a:	f7ff fdfd 	bl	8011c58 <_Bfree>
 801205e:	4647      	mov	r7, r8
 8012060:	106d      	asrs	r5, r5, #1
 8012062:	d00b      	beq.n	801207c <__pow5mult+0xa0>
 8012064:	6820      	ldr	r0, [r4, #0]
 8012066:	b938      	cbnz	r0, 8012078 <__pow5mult+0x9c>
 8012068:	4622      	mov	r2, r4
 801206a:	4621      	mov	r1, r4
 801206c:	4630      	mov	r0, r6
 801206e:	f7ff ff0f 	bl	8011e90 <__multiply>
 8012072:	6020      	str	r0, [r4, #0]
 8012074:	f8c0 9000 	str.w	r9, [r0]
 8012078:	4604      	mov	r4, r0
 801207a:	e7e4      	b.n	8012046 <__pow5mult+0x6a>
 801207c:	4638      	mov	r0, r7
 801207e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012082:	bf00      	nop
 8012084:	08016450 	.word	0x08016450
 8012088:	08016150 	.word	0x08016150
 801208c:	08016300 	.word	0x08016300

08012090 <__lshift>:
 8012090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012094:	460c      	mov	r4, r1
 8012096:	6849      	ldr	r1, [r1, #4]
 8012098:	6923      	ldr	r3, [r4, #16]
 801209a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801209e:	68a3      	ldr	r3, [r4, #8]
 80120a0:	4607      	mov	r7, r0
 80120a2:	4691      	mov	r9, r2
 80120a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120a8:	f108 0601 	add.w	r6, r8, #1
 80120ac:	42b3      	cmp	r3, r6
 80120ae:	db0b      	blt.n	80120c8 <__lshift+0x38>
 80120b0:	4638      	mov	r0, r7
 80120b2:	f7ff fd91 	bl	8011bd8 <_Balloc>
 80120b6:	4605      	mov	r5, r0
 80120b8:	b948      	cbnz	r0, 80120ce <__lshift+0x3e>
 80120ba:	4602      	mov	r2, r0
 80120bc:	4b28      	ldr	r3, [pc, #160]	; (8012160 <__lshift+0xd0>)
 80120be:	4829      	ldr	r0, [pc, #164]	; (8012164 <__lshift+0xd4>)
 80120c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80120c4:	f7fe fb50 	bl	8010768 <__assert_func>
 80120c8:	3101      	adds	r1, #1
 80120ca:	005b      	lsls	r3, r3, #1
 80120cc:	e7ee      	b.n	80120ac <__lshift+0x1c>
 80120ce:	2300      	movs	r3, #0
 80120d0:	f100 0114 	add.w	r1, r0, #20
 80120d4:	f100 0210 	add.w	r2, r0, #16
 80120d8:	4618      	mov	r0, r3
 80120da:	4553      	cmp	r3, sl
 80120dc:	db33      	blt.n	8012146 <__lshift+0xb6>
 80120de:	6920      	ldr	r0, [r4, #16]
 80120e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80120e4:	f104 0314 	add.w	r3, r4, #20
 80120e8:	f019 091f 	ands.w	r9, r9, #31
 80120ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80120f4:	d02b      	beq.n	801214e <__lshift+0xbe>
 80120f6:	f1c9 0e20 	rsb	lr, r9, #32
 80120fa:	468a      	mov	sl, r1
 80120fc:	2200      	movs	r2, #0
 80120fe:	6818      	ldr	r0, [r3, #0]
 8012100:	fa00 f009 	lsl.w	r0, r0, r9
 8012104:	4302      	orrs	r2, r0
 8012106:	f84a 2b04 	str.w	r2, [sl], #4
 801210a:	f853 2b04 	ldr.w	r2, [r3], #4
 801210e:	459c      	cmp	ip, r3
 8012110:	fa22 f20e 	lsr.w	r2, r2, lr
 8012114:	d8f3      	bhi.n	80120fe <__lshift+0x6e>
 8012116:	ebac 0304 	sub.w	r3, ip, r4
 801211a:	3b15      	subs	r3, #21
 801211c:	f023 0303 	bic.w	r3, r3, #3
 8012120:	3304      	adds	r3, #4
 8012122:	f104 0015 	add.w	r0, r4, #21
 8012126:	4584      	cmp	ip, r0
 8012128:	bf38      	it	cc
 801212a:	2304      	movcc	r3, #4
 801212c:	50ca      	str	r2, [r1, r3]
 801212e:	b10a      	cbz	r2, 8012134 <__lshift+0xa4>
 8012130:	f108 0602 	add.w	r6, r8, #2
 8012134:	3e01      	subs	r6, #1
 8012136:	4638      	mov	r0, r7
 8012138:	612e      	str	r6, [r5, #16]
 801213a:	4621      	mov	r1, r4
 801213c:	f7ff fd8c 	bl	8011c58 <_Bfree>
 8012140:	4628      	mov	r0, r5
 8012142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012146:	f842 0f04 	str.w	r0, [r2, #4]!
 801214a:	3301      	adds	r3, #1
 801214c:	e7c5      	b.n	80120da <__lshift+0x4a>
 801214e:	3904      	subs	r1, #4
 8012150:	f853 2b04 	ldr.w	r2, [r3], #4
 8012154:	f841 2f04 	str.w	r2, [r1, #4]!
 8012158:	459c      	cmp	ip, r3
 801215a:	d8f9      	bhi.n	8012150 <__lshift+0xc0>
 801215c:	e7ea      	b.n	8012134 <__lshift+0xa4>
 801215e:	bf00      	nop
 8012160:	08016270 	.word	0x08016270
 8012164:	08016300 	.word	0x08016300

08012168 <__mcmp>:
 8012168:	b530      	push	{r4, r5, lr}
 801216a:	6902      	ldr	r2, [r0, #16]
 801216c:	690c      	ldr	r4, [r1, #16]
 801216e:	1b12      	subs	r2, r2, r4
 8012170:	d10e      	bne.n	8012190 <__mcmp+0x28>
 8012172:	f100 0314 	add.w	r3, r0, #20
 8012176:	3114      	adds	r1, #20
 8012178:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801217c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012180:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012184:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012188:	42a5      	cmp	r5, r4
 801218a:	d003      	beq.n	8012194 <__mcmp+0x2c>
 801218c:	d305      	bcc.n	801219a <__mcmp+0x32>
 801218e:	2201      	movs	r2, #1
 8012190:	4610      	mov	r0, r2
 8012192:	bd30      	pop	{r4, r5, pc}
 8012194:	4283      	cmp	r3, r0
 8012196:	d3f3      	bcc.n	8012180 <__mcmp+0x18>
 8012198:	e7fa      	b.n	8012190 <__mcmp+0x28>
 801219a:	f04f 32ff 	mov.w	r2, #4294967295
 801219e:	e7f7      	b.n	8012190 <__mcmp+0x28>

080121a0 <__mdiff>:
 80121a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	460c      	mov	r4, r1
 80121a6:	4606      	mov	r6, r0
 80121a8:	4611      	mov	r1, r2
 80121aa:	4620      	mov	r0, r4
 80121ac:	4617      	mov	r7, r2
 80121ae:	f7ff ffdb 	bl	8012168 <__mcmp>
 80121b2:	1e05      	subs	r5, r0, #0
 80121b4:	d110      	bne.n	80121d8 <__mdiff+0x38>
 80121b6:	4629      	mov	r1, r5
 80121b8:	4630      	mov	r0, r6
 80121ba:	f7ff fd0d 	bl	8011bd8 <_Balloc>
 80121be:	b930      	cbnz	r0, 80121ce <__mdiff+0x2e>
 80121c0:	4b39      	ldr	r3, [pc, #228]	; (80122a8 <__mdiff+0x108>)
 80121c2:	4602      	mov	r2, r0
 80121c4:	f240 2132 	movw	r1, #562	; 0x232
 80121c8:	4838      	ldr	r0, [pc, #224]	; (80122ac <__mdiff+0x10c>)
 80121ca:	f7fe facd 	bl	8010768 <__assert_func>
 80121ce:	2301      	movs	r3, #1
 80121d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80121d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d8:	bfa4      	itt	ge
 80121da:	463b      	movge	r3, r7
 80121dc:	4627      	movge	r7, r4
 80121de:	4630      	mov	r0, r6
 80121e0:	6879      	ldr	r1, [r7, #4]
 80121e2:	bfa6      	itte	ge
 80121e4:	461c      	movge	r4, r3
 80121e6:	2500      	movge	r5, #0
 80121e8:	2501      	movlt	r5, #1
 80121ea:	f7ff fcf5 	bl	8011bd8 <_Balloc>
 80121ee:	b920      	cbnz	r0, 80121fa <__mdiff+0x5a>
 80121f0:	4b2d      	ldr	r3, [pc, #180]	; (80122a8 <__mdiff+0x108>)
 80121f2:	4602      	mov	r2, r0
 80121f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80121f8:	e7e6      	b.n	80121c8 <__mdiff+0x28>
 80121fa:	693e      	ldr	r6, [r7, #16]
 80121fc:	60c5      	str	r5, [r0, #12]
 80121fe:	6925      	ldr	r5, [r4, #16]
 8012200:	f107 0114 	add.w	r1, r7, #20
 8012204:	f104 0914 	add.w	r9, r4, #20
 8012208:	f100 0e14 	add.w	lr, r0, #20
 801220c:	f107 0210 	add.w	r2, r7, #16
 8012210:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012214:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012218:	46f2      	mov	sl, lr
 801221a:	2700      	movs	r7, #0
 801221c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012220:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012224:	fa1f f883 	uxth.w	r8, r3
 8012228:	fa17 f78b 	uxtah	r7, r7, fp
 801222c:	0c1b      	lsrs	r3, r3, #16
 801222e:	eba7 0808 	sub.w	r8, r7, r8
 8012232:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012236:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801223a:	fa1f f888 	uxth.w	r8, r8
 801223e:	141f      	asrs	r7, r3, #16
 8012240:	454d      	cmp	r5, r9
 8012242:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012246:	f84a 3b04 	str.w	r3, [sl], #4
 801224a:	d8e7      	bhi.n	801221c <__mdiff+0x7c>
 801224c:	1b2b      	subs	r3, r5, r4
 801224e:	3b15      	subs	r3, #21
 8012250:	f023 0303 	bic.w	r3, r3, #3
 8012254:	3304      	adds	r3, #4
 8012256:	3415      	adds	r4, #21
 8012258:	42a5      	cmp	r5, r4
 801225a:	bf38      	it	cc
 801225c:	2304      	movcc	r3, #4
 801225e:	4419      	add	r1, r3
 8012260:	4473      	add	r3, lr
 8012262:	469e      	mov	lr, r3
 8012264:	460d      	mov	r5, r1
 8012266:	4565      	cmp	r5, ip
 8012268:	d30e      	bcc.n	8012288 <__mdiff+0xe8>
 801226a:	f10c 0203 	add.w	r2, ip, #3
 801226e:	1a52      	subs	r2, r2, r1
 8012270:	f022 0203 	bic.w	r2, r2, #3
 8012274:	3903      	subs	r1, #3
 8012276:	458c      	cmp	ip, r1
 8012278:	bf38      	it	cc
 801227a:	2200      	movcc	r2, #0
 801227c:	441a      	add	r2, r3
 801227e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012282:	b17b      	cbz	r3, 80122a4 <__mdiff+0x104>
 8012284:	6106      	str	r6, [r0, #16]
 8012286:	e7a5      	b.n	80121d4 <__mdiff+0x34>
 8012288:	f855 8b04 	ldr.w	r8, [r5], #4
 801228c:	fa17 f488 	uxtah	r4, r7, r8
 8012290:	1422      	asrs	r2, r4, #16
 8012292:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012296:	b2a4      	uxth	r4, r4
 8012298:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801229c:	f84e 4b04 	str.w	r4, [lr], #4
 80122a0:	1417      	asrs	r7, r2, #16
 80122a2:	e7e0      	b.n	8012266 <__mdiff+0xc6>
 80122a4:	3e01      	subs	r6, #1
 80122a6:	e7ea      	b.n	801227e <__mdiff+0xde>
 80122a8:	08016270 	.word	0x08016270
 80122ac:	08016300 	.word	0x08016300

080122b0 <__ulp>:
 80122b0:	b082      	sub	sp, #8
 80122b2:	ed8d 0b00 	vstr	d0, [sp]
 80122b6:	9b01      	ldr	r3, [sp, #4]
 80122b8:	4912      	ldr	r1, [pc, #72]	; (8012304 <__ulp+0x54>)
 80122ba:	4019      	ands	r1, r3
 80122bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80122c0:	2900      	cmp	r1, #0
 80122c2:	dd05      	ble.n	80122d0 <__ulp+0x20>
 80122c4:	2200      	movs	r2, #0
 80122c6:	460b      	mov	r3, r1
 80122c8:	ec43 2b10 	vmov	d0, r2, r3
 80122cc:	b002      	add	sp, #8
 80122ce:	4770      	bx	lr
 80122d0:	4249      	negs	r1, r1
 80122d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80122d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80122da:	f04f 0200 	mov.w	r2, #0
 80122de:	f04f 0300 	mov.w	r3, #0
 80122e2:	da04      	bge.n	80122ee <__ulp+0x3e>
 80122e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80122e8:	fa41 f300 	asr.w	r3, r1, r0
 80122ec:	e7ec      	b.n	80122c8 <__ulp+0x18>
 80122ee:	f1a0 0114 	sub.w	r1, r0, #20
 80122f2:	291e      	cmp	r1, #30
 80122f4:	bfda      	itte	le
 80122f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80122fa:	fa20 f101 	lsrle.w	r1, r0, r1
 80122fe:	2101      	movgt	r1, #1
 8012300:	460a      	mov	r2, r1
 8012302:	e7e1      	b.n	80122c8 <__ulp+0x18>
 8012304:	7ff00000 	.word	0x7ff00000

08012308 <__b2d>:
 8012308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230a:	6905      	ldr	r5, [r0, #16]
 801230c:	f100 0714 	add.w	r7, r0, #20
 8012310:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012314:	1f2e      	subs	r6, r5, #4
 8012316:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801231a:	4620      	mov	r0, r4
 801231c:	f7ff fd52 	bl	8011dc4 <__hi0bits>
 8012320:	f1c0 0320 	rsb	r3, r0, #32
 8012324:	280a      	cmp	r0, #10
 8012326:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80123a4 <__b2d+0x9c>
 801232a:	600b      	str	r3, [r1, #0]
 801232c:	dc14      	bgt.n	8012358 <__b2d+0x50>
 801232e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012332:	fa24 f10e 	lsr.w	r1, r4, lr
 8012336:	42b7      	cmp	r7, r6
 8012338:	ea41 030c 	orr.w	r3, r1, ip
 801233c:	bf34      	ite	cc
 801233e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012342:	2100      	movcs	r1, #0
 8012344:	3015      	adds	r0, #21
 8012346:	fa04 f000 	lsl.w	r0, r4, r0
 801234a:	fa21 f10e 	lsr.w	r1, r1, lr
 801234e:	ea40 0201 	orr.w	r2, r0, r1
 8012352:	ec43 2b10 	vmov	d0, r2, r3
 8012356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012358:	42b7      	cmp	r7, r6
 801235a:	bf3a      	itte	cc
 801235c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012360:	f1a5 0608 	subcc.w	r6, r5, #8
 8012364:	2100      	movcs	r1, #0
 8012366:	380b      	subs	r0, #11
 8012368:	d017      	beq.n	801239a <__b2d+0x92>
 801236a:	f1c0 0c20 	rsb	ip, r0, #32
 801236e:	fa04 f500 	lsl.w	r5, r4, r0
 8012372:	42be      	cmp	r6, r7
 8012374:	fa21 f40c 	lsr.w	r4, r1, ip
 8012378:	ea45 0504 	orr.w	r5, r5, r4
 801237c:	bf8c      	ite	hi
 801237e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012382:	2400      	movls	r4, #0
 8012384:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012388:	fa01 f000 	lsl.w	r0, r1, r0
 801238c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012390:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012394:	ea40 0204 	orr.w	r2, r0, r4
 8012398:	e7db      	b.n	8012352 <__b2d+0x4a>
 801239a:	ea44 030c 	orr.w	r3, r4, ip
 801239e:	460a      	mov	r2, r1
 80123a0:	e7d7      	b.n	8012352 <__b2d+0x4a>
 80123a2:	bf00      	nop
 80123a4:	3ff00000 	.word	0x3ff00000

080123a8 <__d2b>:
 80123a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80123ac:	4689      	mov	r9, r1
 80123ae:	2101      	movs	r1, #1
 80123b0:	ec57 6b10 	vmov	r6, r7, d0
 80123b4:	4690      	mov	r8, r2
 80123b6:	f7ff fc0f 	bl	8011bd8 <_Balloc>
 80123ba:	4604      	mov	r4, r0
 80123bc:	b930      	cbnz	r0, 80123cc <__d2b+0x24>
 80123be:	4602      	mov	r2, r0
 80123c0:	4b25      	ldr	r3, [pc, #148]	; (8012458 <__d2b+0xb0>)
 80123c2:	4826      	ldr	r0, [pc, #152]	; (801245c <__d2b+0xb4>)
 80123c4:	f240 310a 	movw	r1, #778	; 0x30a
 80123c8:	f7fe f9ce 	bl	8010768 <__assert_func>
 80123cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80123d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123d4:	bb35      	cbnz	r5, 8012424 <__d2b+0x7c>
 80123d6:	2e00      	cmp	r6, #0
 80123d8:	9301      	str	r3, [sp, #4]
 80123da:	d028      	beq.n	801242e <__d2b+0x86>
 80123dc:	4668      	mov	r0, sp
 80123de:	9600      	str	r6, [sp, #0]
 80123e0:	f7ff fd10 	bl	8011e04 <__lo0bits>
 80123e4:	9900      	ldr	r1, [sp, #0]
 80123e6:	b300      	cbz	r0, 801242a <__d2b+0x82>
 80123e8:	9a01      	ldr	r2, [sp, #4]
 80123ea:	f1c0 0320 	rsb	r3, r0, #32
 80123ee:	fa02 f303 	lsl.w	r3, r2, r3
 80123f2:	430b      	orrs	r3, r1
 80123f4:	40c2      	lsrs	r2, r0
 80123f6:	6163      	str	r3, [r4, #20]
 80123f8:	9201      	str	r2, [sp, #4]
 80123fa:	9b01      	ldr	r3, [sp, #4]
 80123fc:	61a3      	str	r3, [r4, #24]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	bf14      	ite	ne
 8012402:	2202      	movne	r2, #2
 8012404:	2201      	moveq	r2, #1
 8012406:	6122      	str	r2, [r4, #16]
 8012408:	b1d5      	cbz	r5, 8012440 <__d2b+0x98>
 801240a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801240e:	4405      	add	r5, r0
 8012410:	f8c9 5000 	str.w	r5, [r9]
 8012414:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012418:	f8c8 0000 	str.w	r0, [r8]
 801241c:	4620      	mov	r0, r4
 801241e:	b003      	add	sp, #12
 8012420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012428:	e7d5      	b.n	80123d6 <__d2b+0x2e>
 801242a:	6161      	str	r1, [r4, #20]
 801242c:	e7e5      	b.n	80123fa <__d2b+0x52>
 801242e:	a801      	add	r0, sp, #4
 8012430:	f7ff fce8 	bl	8011e04 <__lo0bits>
 8012434:	9b01      	ldr	r3, [sp, #4]
 8012436:	6163      	str	r3, [r4, #20]
 8012438:	2201      	movs	r2, #1
 801243a:	6122      	str	r2, [r4, #16]
 801243c:	3020      	adds	r0, #32
 801243e:	e7e3      	b.n	8012408 <__d2b+0x60>
 8012440:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012444:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012448:	f8c9 0000 	str.w	r0, [r9]
 801244c:	6918      	ldr	r0, [r3, #16]
 801244e:	f7ff fcb9 	bl	8011dc4 <__hi0bits>
 8012452:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012456:	e7df      	b.n	8012418 <__d2b+0x70>
 8012458:	08016270 	.word	0x08016270
 801245c:	08016300 	.word	0x08016300

08012460 <__ratio>:
 8012460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012464:	4688      	mov	r8, r1
 8012466:	4669      	mov	r1, sp
 8012468:	4681      	mov	r9, r0
 801246a:	f7ff ff4d 	bl	8012308 <__b2d>
 801246e:	a901      	add	r1, sp, #4
 8012470:	4640      	mov	r0, r8
 8012472:	ec55 4b10 	vmov	r4, r5, d0
 8012476:	f7ff ff47 	bl	8012308 <__b2d>
 801247a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801247e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012482:	eba3 0c02 	sub.w	ip, r3, r2
 8012486:	e9dd 3200 	ldrd	r3, r2, [sp]
 801248a:	1a9b      	subs	r3, r3, r2
 801248c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012490:	ec51 0b10 	vmov	r0, r1, d0
 8012494:	2b00      	cmp	r3, #0
 8012496:	bfd6      	itet	le
 8012498:	460a      	movle	r2, r1
 801249a:	462a      	movgt	r2, r5
 801249c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80124a0:	468b      	mov	fp, r1
 80124a2:	462f      	mov	r7, r5
 80124a4:	bfd4      	ite	le
 80124a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80124aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80124ae:	4620      	mov	r0, r4
 80124b0:	ee10 2a10 	vmov	r2, s0
 80124b4:	465b      	mov	r3, fp
 80124b6:	4639      	mov	r1, r7
 80124b8:	f7ee f9d0 	bl	800085c <__aeabi_ddiv>
 80124bc:	ec41 0b10 	vmov	d0, r0, r1
 80124c0:	b003      	add	sp, #12
 80124c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124c6 <__copybits>:
 80124c6:	3901      	subs	r1, #1
 80124c8:	b570      	push	{r4, r5, r6, lr}
 80124ca:	1149      	asrs	r1, r1, #5
 80124cc:	6914      	ldr	r4, [r2, #16]
 80124ce:	3101      	adds	r1, #1
 80124d0:	f102 0314 	add.w	r3, r2, #20
 80124d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80124d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80124dc:	1f05      	subs	r5, r0, #4
 80124de:	42a3      	cmp	r3, r4
 80124e0:	d30c      	bcc.n	80124fc <__copybits+0x36>
 80124e2:	1aa3      	subs	r3, r4, r2
 80124e4:	3b11      	subs	r3, #17
 80124e6:	f023 0303 	bic.w	r3, r3, #3
 80124ea:	3211      	adds	r2, #17
 80124ec:	42a2      	cmp	r2, r4
 80124ee:	bf88      	it	hi
 80124f0:	2300      	movhi	r3, #0
 80124f2:	4418      	add	r0, r3
 80124f4:	2300      	movs	r3, #0
 80124f6:	4288      	cmp	r0, r1
 80124f8:	d305      	bcc.n	8012506 <__copybits+0x40>
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8012500:	f845 6f04 	str.w	r6, [r5, #4]!
 8012504:	e7eb      	b.n	80124de <__copybits+0x18>
 8012506:	f840 3b04 	str.w	r3, [r0], #4
 801250a:	e7f4      	b.n	80124f6 <__copybits+0x30>

0801250c <__any_on>:
 801250c:	f100 0214 	add.w	r2, r0, #20
 8012510:	6900      	ldr	r0, [r0, #16]
 8012512:	114b      	asrs	r3, r1, #5
 8012514:	4298      	cmp	r0, r3
 8012516:	b510      	push	{r4, lr}
 8012518:	db11      	blt.n	801253e <__any_on+0x32>
 801251a:	dd0a      	ble.n	8012532 <__any_on+0x26>
 801251c:	f011 011f 	ands.w	r1, r1, #31
 8012520:	d007      	beq.n	8012532 <__any_on+0x26>
 8012522:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012526:	fa24 f001 	lsr.w	r0, r4, r1
 801252a:	fa00 f101 	lsl.w	r1, r0, r1
 801252e:	428c      	cmp	r4, r1
 8012530:	d10b      	bne.n	801254a <__any_on+0x3e>
 8012532:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012536:	4293      	cmp	r3, r2
 8012538:	d803      	bhi.n	8012542 <__any_on+0x36>
 801253a:	2000      	movs	r0, #0
 801253c:	bd10      	pop	{r4, pc}
 801253e:	4603      	mov	r3, r0
 8012540:	e7f7      	b.n	8012532 <__any_on+0x26>
 8012542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012546:	2900      	cmp	r1, #0
 8012548:	d0f5      	beq.n	8012536 <__any_on+0x2a>
 801254a:	2001      	movs	r0, #1
 801254c:	e7f6      	b.n	801253c <__any_on+0x30>

0801254e <_calloc_r>:
 801254e:	b513      	push	{r0, r1, r4, lr}
 8012550:	434a      	muls	r2, r1
 8012552:	4611      	mov	r1, r2
 8012554:	9201      	str	r2, [sp, #4]
 8012556:	f000 f859 	bl	801260c <_malloc_r>
 801255a:	4604      	mov	r4, r0
 801255c:	b118      	cbz	r0, 8012566 <_calloc_r+0x18>
 801255e:	9a01      	ldr	r2, [sp, #4]
 8012560:	2100      	movs	r1, #0
 8012562:	f7fc fd37 	bl	800efd4 <memset>
 8012566:	4620      	mov	r0, r4
 8012568:	b002      	add	sp, #8
 801256a:	bd10      	pop	{r4, pc}

0801256c <_free_r>:
 801256c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801256e:	2900      	cmp	r1, #0
 8012570:	d048      	beq.n	8012604 <_free_r+0x98>
 8012572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012576:	9001      	str	r0, [sp, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	f1a1 0404 	sub.w	r4, r1, #4
 801257e:	bfb8      	it	lt
 8012580:	18e4      	addlt	r4, r4, r3
 8012582:	f000 fe8d 	bl	80132a0 <__malloc_lock>
 8012586:	4a20      	ldr	r2, [pc, #128]	; (8012608 <_free_r+0x9c>)
 8012588:	9801      	ldr	r0, [sp, #4]
 801258a:	6813      	ldr	r3, [r2, #0]
 801258c:	4615      	mov	r5, r2
 801258e:	b933      	cbnz	r3, 801259e <_free_r+0x32>
 8012590:	6063      	str	r3, [r4, #4]
 8012592:	6014      	str	r4, [r2, #0]
 8012594:	b003      	add	sp, #12
 8012596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801259a:	f000 be87 	b.w	80132ac <__malloc_unlock>
 801259e:	42a3      	cmp	r3, r4
 80125a0:	d90b      	bls.n	80125ba <_free_r+0x4e>
 80125a2:	6821      	ldr	r1, [r4, #0]
 80125a4:	1862      	adds	r2, r4, r1
 80125a6:	4293      	cmp	r3, r2
 80125a8:	bf04      	itt	eq
 80125aa:	681a      	ldreq	r2, [r3, #0]
 80125ac:	685b      	ldreq	r3, [r3, #4]
 80125ae:	6063      	str	r3, [r4, #4]
 80125b0:	bf04      	itt	eq
 80125b2:	1852      	addeq	r2, r2, r1
 80125b4:	6022      	streq	r2, [r4, #0]
 80125b6:	602c      	str	r4, [r5, #0]
 80125b8:	e7ec      	b.n	8012594 <_free_r+0x28>
 80125ba:	461a      	mov	r2, r3
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	b10b      	cbz	r3, 80125c4 <_free_r+0x58>
 80125c0:	42a3      	cmp	r3, r4
 80125c2:	d9fa      	bls.n	80125ba <_free_r+0x4e>
 80125c4:	6811      	ldr	r1, [r2, #0]
 80125c6:	1855      	adds	r5, r2, r1
 80125c8:	42a5      	cmp	r5, r4
 80125ca:	d10b      	bne.n	80125e4 <_free_r+0x78>
 80125cc:	6824      	ldr	r4, [r4, #0]
 80125ce:	4421      	add	r1, r4
 80125d0:	1854      	adds	r4, r2, r1
 80125d2:	42a3      	cmp	r3, r4
 80125d4:	6011      	str	r1, [r2, #0]
 80125d6:	d1dd      	bne.n	8012594 <_free_r+0x28>
 80125d8:	681c      	ldr	r4, [r3, #0]
 80125da:	685b      	ldr	r3, [r3, #4]
 80125dc:	6053      	str	r3, [r2, #4]
 80125de:	4421      	add	r1, r4
 80125e0:	6011      	str	r1, [r2, #0]
 80125e2:	e7d7      	b.n	8012594 <_free_r+0x28>
 80125e4:	d902      	bls.n	80125ec <_free_r+0x80>
 80125e6:	230c      	movs	r3, #12
 80125e8:	6003      	str	r3, [r0, #0]
 80125ea:	e7d3      	b.n	8012594 <_free_r+0x28>
 80125ec:	6825      	ldr	r5, [r4, #0]
 80125ee:	1961      	adds	r1, r4, r5
 80125f0:	428b      	cmp	r3, r1
 80125f2:	bf04      	itt	eq
 80125f4:	6819      	ldreq	r1, [r3, #0]
 80125f6:	685b      	ldreq	r3, [r3, #4]
 80125f8:	6063      	str	r3, [r4, #4]
 80125fa:	bf04      	itt	eq
 80125fc:	1949      	addeq	r1, r1, r5
 80125fe:	6021      	streq	r1, [r4, #0]
 8012600:	6054      	str	r4, [r2, #4]
 8012602:	e7c7      	b.n	8012594 <_free_r+0x28>
 8012604:	b003      	add	sp, #12
 8012606:	bd30      	pop	{r4, r5, pc}
 8012608:	20004cd4 	.word	0x20004cd4

0801260c <_malloc_r>:
 801260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801260e:	1ccd      	adds	r5, r1, #3
 8012610:	f025 0503 	bic.w	r5, r5, #3
 8012614:	3508      	adds	r5, #8
 8012616:	2d0c      	cmp	r5, #12
 8012618:	bf38      	it	cc
 801261a:	250c      	movcc	r5, #12
 801261c:	2d00      	cmp	r5, #0
 801261e:	4606      	mov	r6, r0
 8012620:	db01      	blt.n	8012626 <_malloc_r+0x1a>
 8012622:	42a9      	cmp	r1, r5
 8012624:	d903      	bls.n	801262e <_malloc_r+0x22>
 8012626:	230c      	movs	r3, #12
 8012628:	6033      	str	r3, [r6, #0]
 801262a:	2000      	movs	r0, #0
 801262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801262e:	f000 fe37 	bl	80132a0 <__malloc_lock>
 8012632:	4921      	ldr	r1, [pc, #132]	; (80126b8 <_malloc_r+0xac>)
 8012634:	680a      	ldr	r2, [r1, #0]
 8012636:	4614      	mov	r4, r2
 8012638:	b99c      	cbnz	r4, 8012662 <_malloc_r+0x56>
 801263a:	4f20      	ldr	r7, [pc, #128]	; (80126bc <_malloc_r+0xb0>)
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	b923      	cbnz	r3, 801264a <_malloc_r+0x3e>
 8012640:	4621      	mov	r1, r4
 8012642:	4630      	mov	r0, r6
 8012644:	f000 fafc 	bl	8012c40 <_sbrk_r>
 8012648:	6038      	str	r0, [r7, #0]
 801264a:	4629      	mov	r1, r5
 801264c:	4630      	mov	r0, r6
 801264e:	f000 faf7 	bl	8012c40 <_sbrk_r>
 8012652:	1c43      	adds	r3, r0, #1
 8012654:	d123      	bne.n	801269e <_malloc_r+0x92>
 8012656:	230c      	movs	r3, #12
 8012658:	6033      	str	r3, [r6, #0]
 801265a:	4630      	mov	r0, r6
 801265c:	f000 fe26 	bl	80132ac <__malloc_unlock>
 8012660:	e7e3      	b.n	801262a <_malloc_r+0x1e>
 8012662:	6823      	ldr	r3, [r4, #0]
 8012664:	1b5b      	subs	r3, r3, r5
 8012666:	d417      	bmi.n	8012698 <_malloc_r+0x8c>
 8012668:	2b0b      	cmp	r3, #11
 801266a:	d903      	bls.n	8012674 <_malloc_r+0x68>
 801266c:	6023      	str	r3, [r4, #0]
 801266e:	441c      	add	r4, r3
 8012670:	6025      	str	r5, [r4, #0]
 8012672:	e004      	b.n	801267e <_malloc_r+0x72>
 8012674:	6863      	ldr	r3, [r4, #4]
 8012676:	42a2      	cmp	r2, r4
 8012678:	bf0c      	ite	eq
 801267a:	600b      	streq	r3, [r1, #0]
 801267c:	6053      	strne	r3, [r2, #4]
 801267e:	4630      	mov	r0, r6
 8012680:	f000 fe14 	bl	80132ac <__malloc_unlock>
 8012684:	f104 000b 	add.w	r0, r4, #11
 8012688:	1d23      	adds	r3, r4, #4
 801268a:	f020 0007 	bic.w	r0, r0, #7
 801268e:	1ac2      	subs	r2, r0, r3
 8012690:	d0cc      	beq.n	801262c <_malloc_r+0x20>
 8012692:	1a1b      	subs	r3, r3, r0
 8012694:	50a3      	str	r3, [r4, r2]
 8012696:	e7c9      	b.n	801262c <_malloc_r+0x20>
 8012698:	4622      	mov	r2, r4
 801269a:	6864      	ldr	r4, [r4, #4]
 801269c:	e7cc      	b.n	8012638 <_malloc_r+0x2c>
 801269e:	1cc4      	adds	r4, r0, #3
 80126a0:	f024 0403 	bic.w	r4, r4, #3
 80126a4:	42a0      	cmp	r0, r4
 80126a6:	d0e3      	beq.n	8012670 <_malloc_r+0x64>
 80126a8:	1a21      	subs	r1, r4, r0
 80126aa:	4630      	mov	r0, r6
 80126ac:	f000 fac8 	bl	8012c40 <_sbrk_r>
 80126b0:	3001      	adds	r0, #1
 80126b2:	d1dd      	bne.n	8012670 <_malloc_r+0x64>
 80126b4:	e7cf      	b.n	8012656 <_malloc_r+0x4a>
 80126b6:	bf00      	nop
 80126b8:	20004cd4 	.word	0x20004cd4
 80126bc:	20004cd8 	.word	0x20004cd8

080126c0 <__ssputs_r>:
 80126c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126c4:	688e      	ldr	r6, [r1, #8]
 80126c6:	429e      	cmp	r6, r3
 80126c8:	4682      	mov	sl, r0
 80126ca:	460c      	mov	r4, r1
 80126cc:	4690      	mov	r8, r2
 80126ce:	461f      	mov	r7, r3
 80126d0:	d838      	bhi.n	8012744 <__ssputs_r+0x84>
 80126d2:	898a      	ldrh	r2, [r1, #12]
 80126d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80126d8:	d032      	beq.n	8012740 <__ssputs_r+0x80>
 80126da:	6825      	ldr	r5, [r4, #0]
 80126dc:	6909      	ldr	r1, [r1, #16]
 80126de:	eba5 0901 	sub.w	r9, r5, r1
 80126e2:	6965      	ldr	r5, [r4, #20]
 80126e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80126ec:	3301      	adds	r3, #1
 80126ee:	444b      	add	r3, r9
 80126f0:	106d      	asrs	r5, r5, #1
 80126f2:	429d      	cmp	r5, r3
 80126f4:	bf38      	it	cc
 80126f6:	461d      	movcc	r5, r3
 80126f8:	0553      	lsls	r3, r2, #21
 80126fa:	d531      	bpl.n	8012760 <__ssputs_r+0xa0>
 80126fc:	4629      	mov	r1, r5
 80126fe:	f7ff ff85 	bl	801260c <_malloc_r>
 8012702:	4606      	mov	r6, r0
 8012704:	b950      	cbnz	r0, 801271c <__ssputs_r+0x5c>
 8012706:	230c      	movs	r3, #12
 8012708:	f8ca 3000 	str.w	r3, [sl]
 801270c:	89a3      	ldrh	r3, [r4, #12]
 801270e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012712:	81a3      	strh	r3, [r4, #12]
 8012714:	f04f 30ff 	mov.w	r0, #4294967295
 8012718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801271c:	6921      	ldr	r1, [r4, #16]
 801271e:	464a      	mov	r2, r9
 8012720:	f7fc fc4a 	bl	800efb8 <memcpy>
 8012724:	89a3      	ldrh	r3, [r4, #12]
 8012726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801272a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801272e:	81a3      	strh	r3, [r4, #12]
 8012730:	6126      	str	r6, [r4, #16]
 8012732:	6165      	str	r5, [r4, #20]
 8012734:	444e      	add	r6, r9
 8012736:	eba5 0509 	sub.w	r5, r5, r9
 801273a:	6026      	str	r6, [r4, #0]
 801273c:	60a5      	str	r5, [r4, #8]
 801273e:	463e      	mov	r6, r7
 8012740:	42be      	cmp	r6, r7
 8012742:	d900      	bls.n	8012746 <__ssputs_r+0x86>
 8012744:	463e      	mov	r6, r7
 8012746:	4632      	mov	r2, r6
 8012748:	6820      	ldr	r0, [r4, #0]
 801274a:	4641      	mov	r1, r8
 801274c:	f000 fd8e 	bl	801326c <memmove>
 8012750:	68a3      	ldr	r3, [r4, #8]
 8012752:	6822      	ldr	r2, [r4, #0]
 8012754:	1b9b      	subs	r3, r3, r6
 8012756:	4432      	add	r2, r6
 8012758:	60a3      	str	r3, [r4, #8]
 801275a:	6022      	str	r2, [r4, #0]
 801275c:	2000      	movs	r0, #0
 801275e:	e7db      	b.n	8012718 <__ssputs_r+0x58>
 8012760:	462a      	mov	r2, r5
 8012762:	f000 fda9 	bl	80132b8 <_realloc_r>
 8012766:	4606      	mov	r6, r0
 8012768:	2800      	cmp	r0, #0
 801276a:	d1e1      	bne.n	8012730 <__ssputs_r+0x70>
 801276c:	6921      	ldr	r1, [r4, #16]
 801276e:	4650      	mov	r0, sl
 8012770:	f7ff fefc 	bl	801256c <_free_r>
 8012774:	e7c7      	b.n	8012706 <__ssputs_r+0x46>
	...

08012778 <_svfiprintf_r>:
 8012778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801277c:	4698      	mov	r8, r3
 801277e:	898b      	ldrh	r3, [r1, #12]
 8012780:	061b      	lsls	r3, r3, #24
 8012782:	b09d      	sub	sp, #116	; 0x74
 8012784:	4607      	mov	r7, r0
 8012786:	460d      	mov	r5, r1
 8012788:	4614      	mov	r4, r2
 801278a:	d50e      	bpl.n	80127aa <_svfiprintf_r+0x32>
 801278c:	690b      	ldr	r3, [r1, #16]
 801278e:	b963      	cbnz	r3, 80127aa <_svfiprintf_r+0x32>
 8012790:	2140      	movs	r1, #64	; 0x40
 8012792:	f7ff ff3b 	bl	801260c <_malloc_r>
 8012796:	6028      	str	r0, [r5, #0]
 8012798:	6128      	str	r0, [r5, #16]
 801279a:	b920      	cbnz	r0, 80127a6 <_svfiprintf_r+0x2e>
 801279c:	230c      	movs	r3, #12
 801279e:	603b      	str	r3, [r7, #0]
 80127a0:	f04f 30ff 	mov.w	r0, #4294967295
 80127a4:	e0d1      	b.n	801294a <_svfiprintf_r+0x1d2>
 80127a6:	2340      	movs	r3, #64	; 0x40
 80127a8:	616b      	str	r3, [r5, #20]
 80127aa:	2300      	movs	r3, #0
 80127ac:	9309      	str	r3, [sp, #36]	; 0x24
 80127ae:	2320      	movs	r3, #32
 80127b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80127b8:	2330      	movs	r3, #48	; 0x30
 80127ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012964 <_svfiprintf_r+0x1ec>
 80127be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80127c2:	f04f 0901 	mov.w	r9, #1
 80127c6:	4623      	mov	r3, r4
 80127c8:	469a      	mov	sl, r3
 80127ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127ce:	b10a      	cbz	r2, 80127d4 <_svfiprintf_r+0x5c>
 80127d0:	2a25      	cmp	r2, #37	; 0x25
 80127d2:	d1f9      	bne.n	80127c8 <_svfiprintf_r+0x50>
 80127d4:	ebba 0b04 	subs.w	fp, sl, r4
 80127d8:	d00b      	beq.n	80127f2 <_svfiprintf_r+0x7a>
 80127da:	465b      	mov	r3, fp
 80127dc:	4622      	mov	r2, r4
 80127de:	4629      	mov	r1, r5
 80127e0:	4638      	mov	r0, r7
 80127e2:	f7ff ff6d 	bl	80126c0 <__ssputs_r>
 80127e6:	3001      	adds	r0, #1
 80127e8:	f000 80aa 	beq.w	8012940 <_svfiprintf_r+0x1c8>
 80127ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127ee:	445a      	add	r2, fp
 80127f0:	9209      	str	r2, [sp, #36]	; 0x24
 80127f2:	f89a 3000 	ldrb.w	r3, [sl]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	f000 80a2 	beq.w	8012940 <_svfiprintf_r+0x1c8>
 80127fc:	2300      	movs	r3, #0
 80127fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012806:	f10a 0a01 	add.w	sl, sl, #1
 801280a:	9304      	str	r3, [sp, #16]
 801280c:	9307      	str	r3, [sp, #28]
 801280e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012812:	931a      	str	r3, [sp, #104]	; 0x68
 8012814:	4654      	mov	r4, sl
 8012816:	2205      	movs	r2, #5
 8012818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801281c:	4851      	ldr	r0, [pc, #324]	; (8012964 <_svfiprintf_r+0x1ec>)
 801281e:	f7ed fce7 	bl	80001f0 <memchr>
 8012822:	9a04      	ldr	r2, [sp, #16]
 8012824:	b9d8      	cbnz	r0, 801285e <_svfiprintf_r+0xe6>
 8012826:	06d0      	lsls	r0, r2, #27
 8012828:	bf44      	itt	mi
 801282a:	2320      	movmi	r3, #32
 801282c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012830:	0711      	lsls	r1, r2, #28
 8012832:	bf44      	itt	mi
 8012834:	232b      	movmi	r3, #43	; 0x2b
 8012836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801283a:	f89a 3000 	ldrb.w	r3, [sl]
 801283e:	2b2a      	cmp	r3, #42	; 0x2a
 8012840:	d015      	beq.n	801286e <_svfiprintf_r+0xf6>
 8012842:	9a07      	ldr	r2, [sp, #28]
 8012844:	4654      	mov	r4, sl
 8012846:	2000      	movs	r0, #0
 8012848:	f04f 0c0a 	mov.w	ip, #10
 801284c:	4621      	mov	r1, r4
 801284e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012852:	3b30      	subs	r3, #48	; 0x30
 8012854:	2b09      	cmp	r3, #9
 8012856:	d94e      	bls.n	80128f6 <_svfiprintf_r+0x17e>
 8012858:	b1b0      	cbz	r0, 8012888 <_svfiprintf_r+0x110>
 801285a:	9207      	str	r2, [sp, #28]
 801285c:	e014      	b.n	8012888 <_svfiprintf_r+0x110>
 801285e:	eba0 0308 	sub.w	r3, r0, r8
 8012862:	fa09 f303 	lsl.w	r3, r9, r3
 8012866:	4313      	orrs	r3, r2
 8012868:	9304      	str	r3, [sp, #16]
 801286a:	46a2      	mov	sl, r4
 801286c:	e7d2      	b.n	8012814 <_svfiprintf_r+0x9c>
 801286e:	9b03      	ldr	r3, [sp, #12]
 8012870:	1d19      	adds	r1, r3, #4
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	9103      	str	r1, [sp, #12]
 8012876:	2b00      	cmp	r3, #0
 8012878:	bfbb      	ittet	lt
 801287a:	425b      	neglt	r3, r3
 801287c:	f042 0202 	orrlt.w	r2, r2, #2
 8012880:	9307      	strge	r3, [sp, #28]
 8012882:	9307      	strlt	r3, [sp, #28]
 8012884:	bfb8      	it	lt
 8012886:	9204      	strlt	r2, [sp, #16]
 8012888:	7823      	ldrb	r3, [r4, #0]
 801288a:	2b2e      	cmp	r3, #46	; 0x2e
 801288c:	d10c      	bne.n	80128a8 <_svfiprintf_r+0x130>
 801288e:	7863      	ldrb	r3, [r4, #1]
 8012890:	2b2a      	cmp	r3, #42	; 0x2a
 8012892:	d135      	bne.n	8012900 <_svfiprintf_r+0x188>
 8012894:	9b03      	ldr	r3, [sp, #12]
 8012896:	1d1a      	adds	r2, r3, #4
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	9203      	str	r2, [sp, #12]
 801289c:	2b00      	cmp	r3, #0
 801289e:	bfb8      	it	lt
 80128a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80128a4:	3402      	adds	r4, #2
 80128a6:	9305      	str	r3, [sp, #20]
 80128a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012974 <_svfiprintf_r+0x1fc>
 80128ac:	7821      	ldrb	r1, [r4, #0]
 80128ae:	2203      	movs	r2, #3
 80128b0:	4650      	mov	r0, sl
 80128b2:	f7ed fc9d 	bl	80001f0 <memchr>
 80128b6:	b140      	cbz	r0, 80128ca <_svfiprintf_r+0x152>
 80128b8:	2340      	movs	r3, #64	; 0x40
 80128ba:	eba0 000a 	sub.w	r0, r0, sl
 80128be:	fa03 f000 	lsl.w	r0, r3, r0
 80128c2:	9b04      	ldr	r3, [sp, #16]
 80128c4:	4303      	orrs	r3, r0
 80128c6:	3401      	adds	r4, #1
 80128c8:	9304      	str	r3, [sp, #16]
 80128ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128ce:	4826      	ldr	r0, [pc, #152]	; (8012968 <_svfiprintf_r+0x1f0>)
 80128d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128d4:	2206      	movs	r2, #6
 80128d6:	f7ed fc8b 	bl	80001f0 <memchr>
 80128da:	2800      	cmp	r0, #0
 80128dc:	d038      	beq.n	8012950 <_svfiprintf_r+0x1d8>
 80128de:	4b23      	ldr	r3, [pc, #140]	; (801296c <_svfiprintf_r+0x1f4>)
 80128e0:	bb1b      	cbnz	r3, 801292a <_svfiprintf_r+0x1b2>
 80128e2:	9b03      	ldr	r3, [sp, #12]
 80128e4:	3307      	adds	r3, #7
 80128e6:	f023 0307 	bic.w	r3, r3, #7
 80128ea:	3308      	adds	r3, #8
 80128ec:	9303      	str	r3, [sp, #12]
 80128ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f0:	4433      	add	r3, r6
 80128f2:	9309      	str	r3, [sp, #36]	; 0x24
 80128f4:	e767      	b.n	80127c6 <_svfiprintf_r+0x4e>
 80128f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80128fa:	460c      	mov	r4, r1
 80128fc:	2001      	movs	r0, #1
 80128fe:	e7a5      	b.n	801284c <_svfiprintf_r+0xd4>
 8012900:	2300      	movs	r3, #0
 8012902:	3401      	adds	r4, #1
 8012904:	9305      	str	r3, [sp, #20]
 8012906:	4619      	mov	r1, r3
 8012908:	f04f 0c0a 	mov.w	ip, #10
 801290c:	4620      	mov	r0, r4
 801290e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012912:	3a30      	subs	r2, #48	; 0x30
 8012914:	2a09      	cmp	r2, #9
 8012916:	d903      	bls.n	8012920 <_svfiprintf_r+0x1a8>
 8012918:	2b00      	cmp	r3, #0
 801291a:	d0c5      	beq.n	80128a8 <_svfiprintf_r+0x130>
 801291c:	9105      	str	r1, [sp, #20]
 801291e:	e7c3      	b.n	80128a8 <_svfiprintf_r+0x130>
 8012920:	fb0c 2101 	mla	r1, ip, r1, r2
 8012924:	4604      	mov	r4, r0
 8012926:	2301      	movs	r3, #1
 8012928:	e7f0      	b.n	801290c <_svfiprintf_r+0x194>
 801292a:	ab03      	add	r3, sp, #12
 801292c:	9300      	str	r3, [sp, #0]
 801292e:	462a      	mov	r2, r5
 8012930:	4b0f      	ldr	r3, [pc, #60]	; (8012970 <_svfiprintf_r+0x1f8>)
 8012932:	a904      	add	r1, sp, #16
 8012934:	4638      	mov	r0, r7
 8012936:	f7fc fbf5 	bl	800f124 <_printf_float>
 801293a:	1c42      	adds	r2, r0, #1
 801293c:	4606      	mov	r6, r0
 801293e:	d1d6      	bne.n	80128ee <_svfiprintf_r+0x176>
 8012940:	89ab      	ldrh	r3, [r5, #12]
 8012942:	065b      	lsls	r3, r3, #25
 8012944:	f53f af2c 	bmi.w	80127a0 <_svfiprintf_r+0x28>
 8012948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801294a:	b01d      	add	sp, #116	; 0x74
 801294c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012950:	ab03      	add	r3, sp, #12
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	462a      	mov	r2, r5
 8012956:	4b06      	ldr	r3, [pc, #24]	; (8012970 <_svfiprintf_r+0x1f8>)
 8012958:	a904      	add	r1, sp, #16
 801295a:	4638      	mov	r0, r7
 801295c:	f7fc fe86 	bl	800f66c <_printf_i>
 8012960:	e7eb      	b.n	801293a <_svfiprintf_r+0x1c2>
 8012962:	bf00      	nop
 8012964:	0801645c 	.word	0x0801645c
 8012968:	08016466 	.word	0x08016466
 801296c:	0800f125 	.word	0x0800f125
 8012970:	080126c1 	.word	0x080126c1
 8012974:	08016462 	.word	0x08016462

08012978 <__sfputc_r>:
 8012978:	6893      	ldr	r3, [r2, #8]
 801297a:	3b01      	subs	r3, #1
 801297c:	2b00      	cmp	r3, #0
 801297e:	b410      	push	{r4}
 8012980:	6093      	str	r3, [r2, #8]
 8012982:	da08      	bge.n	8012996 <__sfputc_r+0x1e>
 8012984:	6994      	ldr	r4, [r2, #24]
 8012986:	42a3      	cmp	r3, r4
 8012988:	db01      	blt.n	801298e <__sfputc_r+0x16>
 801298a:	290a      	cmp	r1, #10
 801298c:	d103      	bne.n	8012996 <__sfputc_r+0x1e>
 801298e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012992:	f000 b977 	b.w	8012c84 <__swbuf_r>
 8012996:	6813      	ldr	r3, [r2, #0]
 8012998:	1c58      	adds	r0, r3, #1
 801299a:	6010      	str	r0, [r2, #0]
 801299c:	7019      	strb	r1, [r3, #0]
 801299e:	4608      	mov	r0, r1
 80129a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129a4:	4770      	bx	lr

080129a6 <__sfputs_r>:
 80129a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a8:	4606      	mov	r6, r0
 80129aa:	460f      	mov	r7, r1
 80129ac:	4614      	mov	r4, r2
 80129ae:	18d5      	adds	r5, r2, r3
 80129b0:	42ac      	cmp	r4, r5
 80129b2:	d101      	bne.n	80129b8 <__sfputs_r+0x12>
 80129b4:	2000      	movs	r0, #0
 80129b6:	e007      	b.n	80129c8 <__sfputs_r+0x22>
 80129b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129bc:	463a      	mov	r2, r7
 80129be:	4630      	mov	r0, r6
 80129c0:	f7ff ffda 	bl	8012978 <__sfputc_r>
 80129c4:	1c43      	adds	r3, r0, #1
 80129c6:	d1f3      	bne.n	80129b0 <__sfputs_r+0xa>
 80129c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129cc <_vfiprintf_r>:
 80129cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d0:	460d      	mov	r5, r1
 80129d2:	b09d      	sub	sp, #116	; 0x74
 80129d4:	4614      	mov	r4, r2
 80129d6:	4698      	mov	r8, r3
 80129d8:	4606      	mov	r6, r0
 80129da:	b118      	cbz	r0, 80129e4 <_vfiprintf_r+0x18>
 80129dc:	6983      	ldr	r3, [r0, #24]
 80129de:	b90b      	cbnz	r3, 80129e4 <_vfiprintf_r+0x18>
 80129e0:	f000 fb40 	bl	8013064 <__sinit>
 80129e4:	4b89      	ldr	r3, [pc, #548]	; (8012c0c <_vfiprintf_r+0x240>)
 80129e6:	429d      	cmp	r5, r3
 80129e8:	d11b      	bne.n	8012a22 <_vfiprintf_r+0x56>
 80129ea:	6875      	ldr	r5, [r6, #4]
 80129ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129ee:	07d9      	lsls	r1, r3, #31
 80129f0:	d405      	bmi.n	80129fe <_vfiprintf_r+0x32>
 80129f2:	89ab      	ldrh	r3, [r5, #12]
 80129f4:	059a      	lsls	r2, r3, #22
 80129f6:	d402      	bmi.n	80129fe <_vfiprintf_r+0x32>
 80129f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129fa:	f000 fbd1 	bl	80131a0 <__retarget_lock_acquire_recursive>
 80129fe:	89ab      	ldrh	r3, [r5, #12]
 8012a00:	071b      	lsls	r3, r3, #28
 8012a02:	d501      	bpl.n	8012a08 <_vfiprintf_r+0x3c>
 8012a04:	692b      	ldr	r3, [r5, #16]
 8012a06:	b9eb      	cbnz	r3, 8012a44 <_vfiprintf_r+0x78>
 8012a08:	4629      	mov	r1, r5
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	f000 f99a 	bl	8012d44 <__swsetup_r>
 8012a10:	b1c0      	cbz	r0, 8012a44 <_vfiprintf_r+0x78>
 8012a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a14:	07dc      	lsls	r4, r3, #31
 8012a16:	d50e      	bpl.n	8012a36 <_vfiprintf_r+0x6a>
 8012a18:	f04f 30ff 	mov.w	r0, #4294967295
 8012a1c:	b01d      	add	sp, #116	; 0x74
 8012a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a22:	4b7b      	ldr	r3, [pc, #492]	; (8012c10 <_vfiprintf_r+0x244>)
 8012a24:	429d      	cmp	r5, r3
 8012a26:	d101      	bne.n	8012a2c <_vfiprintf_r+0x60>
 8012a28:	68b5      	ldr	r5, [r6, #8]
 8012a2a:	e7df      	b.n	80129ec <_vfiprintf_r+0x20>
 8012a2c:	4b79      	ldr	r3, [pc, #484]	; (8012c14 <_vfiprintf_r+0x248>)
 8012a2e:	429d      	cmp	r5, r3
 8012a30:	bf08      	it	eq
 8012a32:	68f5      	ldreq	r5, [r6, #12]
 8012a34:	e7da      	b.n	80129ec <_vfiprintf_r+0x20>
 8012a36:	89ab      	ldrh	r3, [r5, #12]
 8012a38:	0598      	lsls	r0, r3, #22
 8012a3a:	d4ed      	bmi.n	8012a18 <_vfiprintf_r+0x4c>
 8012a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a3e:	f000 fbb0 	bl	80131a2 <__retarget_lock_release_recursive>
 8012a42:	e7e9      	b.n	8012a18 <_vfiprintf_r+0x4c>
 8012a44:	2300      	movs	r3, #0
 8012a46:	9309      	str	r3, [sp, #36]	; 0x24
 8012a48:	2320      	movs	r3, #32
 8012a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a52:	2330      	movs	r3, #48	; 0x30
 8012a54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012c18 <_vfiprintf_r+0x24c>
 8012a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a5c:	f04f 0901 	mov.w	r9, #1
 8012a60:	4623      	mov	r3, r4
 8012a62:	469a      	mov	sl, r3
 8012a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a68:	b10a      	cbz	r2, 8012a6e <_vfiprintf_r+0xa2>
 8012a6a:	2a25      	cmp	r2, #37	; 0x25
 8012a6c:	d1f9      	bne.n	8012a62 <_vfiprintf_r+0x96>
 8012a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8012a72:	d00b      	beq.n	8012a8c <_vfiprintf_r+0xc0>
 8012a74:	465b      	mov	r3, fp
 8012a76:	4622      	mov	r2, r4
 8012a78:	4629      	mov	r1, r5
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	f7ff ff93 	bl	80129a6 <__sfputs_r>
 8012a80:	3001      	adds	r0, #1
 8012a82:	f000 80aa 	beq.w	8012bda <_vfiprintf_r+0x20e>
 8012a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a88:	445a      	add	r2, fp
 8012a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8012a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	f000 80a2 	beq.w	8012bda <_vfiprintf_r+0x20e>
 8012a96:	2300      	movs	r3, #0
 8012a98:	f04f 32ff 	mov.w	r2, #4294967295
 8012a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012aa0:	f10a 0a01 	add.w	sl, sl, #1
 8012aa4:	9304      	str	r3, [sp, #16]
 8012aa6:	9307      	str	r3, [sp, #28]
 8012aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012aac:	931a      	str	r3, [sp, #104]	; 0x68
 8012aae:	4654      	mov	r4, sl
 8012ab0:	2205      	movs	r2, #5
 8012ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ab6:	4858      	ldr	r0, [pc, #352]	; (8012c18 <_vfiprintf_r+0x24c>)
 8012ab8:	f7ed fb9a 	bl	80001f0 <memchr>
 8012abc:	9a04      	ldr	r2, [sp, #16]
 8012abe:	b9d8      	cbnz	r0, 8012af8 <_vfiprintf_r+0x12c>
 8012ac0:	06d1      	lsls	r1, r2, #27
 8012ac2:	bf44      	itt	mi
 8012ac4:	2320      	movmi	r3, #32
 8012ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aca:	0713      	lsls	r3, r2, #28
 8012acc:	bf44      	itt	mi
 8012ace:	232b      	movmi	r3, #43	; 0x2b
 8012ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8012ada:	d015      	beq.n	8012b08 <_vfiprintf_r+0x13c>
 8012adc:	9a07      	ldr	r2, [sp, #28]
 8012ade:	4654      	mov	r4, sl
 8012ae0:	2000      	movs	r0, #0
 8012ae2:	f04f 0c0a 	mov.w	ip, #10
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012aec:	3b30      	subs	r3, #48	; 0x30
 8012aee:	2b09      	cmp	r3, #9
 8012af0:	d94e      	bls.n	8012b90 <_vfiprintf_r+0x1c4>
 8012af2:	b1b0      	cbz	r0, 8012b22 <_vfiprintf_r+0x156>
 8012af4:	9207      	str	r2, [sp, #28]
 8012af6:	e014      	b.n	8012b22 <_vfiprintf_r+0x156>
 8012af8:	eba0 0308 	sub.w	r3, r0, r8
 8012afc:	fa09 f303 	lsl.w	r3, r9, r3
 8012b00:	4313      	orrs	r3, r2
 8012b02:	9304      	str	r3, [sp, #16]
 8012b04:	46a2      	mov	sl, r4
 8012b06:	e7d2      	b.n	8012aae <_vfiprintf_r+0xe2>
 8012b08:	9b03      	ldr	r3, [sp, #12]
 8012b0a:	1d19      	adds	r1, r3, #4
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	9103      	str	r1, [sp, #12]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	bfbb      	ittet	lt
 8012b14:	425b      	neglt	r3, r3
 8012b16:	f042 0202 	orrlt.w	r2, r2, #2
 8012b1a:	9307      	strge	r3, [sp, #28]
 8012b1c:	9307      	strlt	r3, [sp, #28]
 8012b1e:	bfb8      	it	lt
 8012b20:	9204      	strlt	r2, [sp, #16]
 8012b22:	7823      	ldrb	r3, [r4, #0]
 8012b24:	2b2e      	cmp	r3, #46	; 0x2e
 8012b26:	d10c      	bne.n	8012b42 <_vfiprintf_r+0x176>
 8012b28:	7863      	ldrb	r3, [r4, #1]
 8012b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8012b2c:	d135      	bne.n	8012b9a <_vfiprintf_r+0x1ce>
 8012b2e:	9b03      	ldr	r3, [sp, #12]
 8012b30:	1d1a      	adds	r2, r3, #4
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	9203      	str	r2, [sp, #12]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	bfb8      	it	lt
 8012b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b3e:	3402      	adds	r4, #2
 8012b40:	9305      	str	r3, [sp, #20]
 8012b42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012c28 <_vfiprintf_r+0x25c>
 8012b46:	7821      	ldrb	r1, [r4, #0]
 8012b48:	2203      	movs	r2, #3
 8012b4a:	4650      	mov	r0, sl
 8012b4c:	f7ed fb50 	bl	80001f0 <memchr>
 8012b50:	b140      	cbz	r0, 8012b64 <_vfiprintf_r+0x198>
 8012b52:	2340      	movs	r3, #64	; 0x40
 8012b54:	eba0 000a 	sub.w	r0, r0, sl
 8012b58:	fa03 f000 	lsl.w	r0, r3, r0
 8012b5c:	9b04      	ldr	r3, [sp, #16]
 8012b5e:	4303      	orrs	r3, r0
 8012b60:	3401      	adds	r4, #1
 8012b62:	9304      	str	r3, [sp, #16]
 8012b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b68:	482c      	ldr	r0, [pc, #176]	; (8012c1c <_vfiprintf_r+0x250>)
 8012b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b6e:	2206      	movs	r2, #6
 8012b70:	f7ed fb3e 	bl	80001f0 <memchr>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d03f      	beq.n	8012bf8 <_vfiprintf_r+0x22c>
 8012b78:	4b29      	ldr	r3, [pc, #164]	; (8012c20 <_vfiprintf_r+0x254>)
 8012b7a:	bb1b      	cbnz	r3, 8012bc4 <_vfiprintf_r+0x1f8>
 8012b7c:	9b03      	ldr	r3, [sp, #12]
 8012b7e:	3307      	adds	r3, #7
 8012b80:	f023 0307 	bic.w	r3, r3, #7
 8012b84:	3308      	adds	r3, #8
 8012b86:	9303      	str	r3, [sp, #12]
 8012b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b8a:	443b      	add	r3, r7
 8012b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012b8e:	e767      	b.n	8012a60 <_vfiprintf_r+0x94>
 8012b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b94:	460c      	mov	r4, r1
 8012b96:	2001      	movs	r0, #1
 8012b98:	e7a5      	b.n	8012ae6 <_vfiprintf_r+0x11a>
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	3401      	adds	r4, #1
 8012b9e:	9305      	str	r3, [sp, #20]
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	f04f 0c0a 	mov.w	ip, #10
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bac:	3a30      	subs	r2, #48	; 0x30
 8012bae:	2a09      	cmp	r2, #9
 8012bb0:	d903      	bls.n	8012bba <_vfiprintf_r+0x1ee>
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d0c5      	beq.n	8012b42 <_vfiprintf_r+0x176>
 8012bb6:	9105      	str	r1, [sp, #20]
 8012bb8:	e7c3      	b.n	8012b42 <_vfiprintf_r+0x176>
 8012bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	e7f0      	b.n	8012ba6 <_vfiprintf_r+0x1da>
 8012bc4:	ab03      	add	r3, sp, #12
 8012bc6:	9300      	str	r3, [sp, #0]
 8012bc8:	462a      	mov	r2, r5
 8012bca:	4b16      	ldr	r3, [pc, #88]	; (8012c24 <_vfiprintf_r+0x258>)
 8012bcc:	a904      	add	r1, sp, #16
 8012bce:	4630      	mov	r0, r6
 8012bd0:	f7fc faa8 	bl	800f124 <_printf_float>
 8012bd4:	4607      	mov	r7, r0
 8012bd6:	1c78      	adds	r0, r7, #1
 8012bd8:	d1d6      	bne.n	8012b88 <_vfiprintf_r+0x1bc>
 8012bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bdc:	07d9      	lsls	r1, r3, #31
 8012bde:	d405      	bmi.n	8012bec <_vfiprintf_r+0x220>
 8012be0:	89ab      	ldrh	r3, [r5, #12]
 8012be2:	059a      	lsls	r2, r3, #22
 8012be4:	d402      	bmi.n	8012bec <_vfiprintf_r+0x220>
 8012be6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012be8:	f000 fadb 	bl	80131a2 <__retarget_lock_release_recursive>
 8012bec:	89ab      	ldrh	r3, [r5, #12]
 8012bee:	065b      	lsls	r3, r3, #25
 8012bf0:	f53f af12 	bmi.w	8012a18 <_vfiprintf_r+0x4c>
 8012bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bf6:	e711      	b.n	8012a1c <_vfiprintf_r+0x50>
 8012bf8:	ab03      	add	r3, sp, #12
 8012bfa:	9300      	str	r3, [sp, #0]
 8012bfc:	462a      	mov	r2, r5
 8012bfe:	4b09      	ldr	r3, [pc, #36]	; (8012c24 <_vfiprintf_r+0x258>)
 8012c00:	a904      	add	r1, sp, #16
 8012c02:	4630      	mov	r0, r6
 8012c04:	f7fc fd32 	bl	800f66c <_printf_i>
 8012c08:	e7e4      	b.n	8012bd4 <_vfiprintf_r+0x208>
 8012c0a:	bf00      	nop
 8012c0c:	08016590 	.word	0x08016590
 8012c10:	080165b0 	.word	0x080165b0
 8012c14:	08016570 	.word	0x08016570
 8012c18:	0801645c 	.word	0x0801645c
 8012c1c:	08016466 	.word	0x08016466
 8012c20:	0800f125 	.word	0x0800f125
 8012c24:	080129a7 	.word	0x080129a7
 8012c28:	08016462 	.word	0x08016462
 8012c2c:	00000000 	.word	0x00000000

08012c30 <nan>:
 8012c30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012c38 <nan+0x8>
 8012c34:	4770      	bx	lr
 8012c36:	bf00      	nop
 8012c38:	00000000 	.word	0x00000000
 8012c3c:	7ff80000 	.word	0x7ff80000

08012c40 <_sbrk_r>:
 8012c40:	b538      	push	{r3, r4, r5, lr}
 8012c42:	4d06      	ldr	r5, [pc, #24]	; (8012c5c <_sbrk_r+0x1c>)
 8012c44:	2300      	movs	r3, #0
 8012c46:	4604      	mov	r4, r0
 8012c48:	4608      	mov	r0, r1
 8012c4a:	602b      	str	r3, [r5, #0]
 8012c4c:	f7f0 fee8 	bl	8003a20 <_sbrk>
 8012c50:	1c43      	adds	r3, r0, #1
 8012c52:	d102      	bne.n	8012c5a <_sbrk_r+0x1a>
 8012c54:	682b      	ldr	r3, [r5, #0]
 8012c56:	b103      	cbz	r3, 8012c5a <_sbrk_r+0x1a>
 8012c58:	6023      	str	r3, [r4, #0]
 8012c5a:	bd38      	pop	{r3, r4, r5, pc}
 8012c5c:	20005d88 	.word	0x20005d88

08012c60 <strncmp>:
 8012c60:	b510      	push	{r4, lr}
 8012c62:	b16a      	cbz	r2, 8012c80 <strncmp+0x20>
 8012c64:	3901      	subs	r1, #1
 8012c66:	1884      	adds	r4, r0, r2
 8012c68:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012c6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d103      	bne.n	8012c7c <strncmp+0x1c>
 8012c74:	42a0      	cmp	r0, r4
 8012c76:	d001      	beq.n	8012c7c <strncmp+0x1c>
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1f5      	bne.n	8012c68 <strncmp+0x8>
 8012c7c:	1a98      	subs	r0, r3, r2
 8012c7e:	bd10      	pop	{r4, pc}
 8012c80:	4610      	mov	r0, r2
 8012c82:	e7fc      	b.n	8012c7e <strncmp+0x1e>

08012c84 <__swbuf_r>:
 8012c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c86:	460e      	mov	r6, r1
 8012c88:	4614      	mov	r4, r2
 8012c8a:	4605      	mov	r5, r0
 8012c8c:	b118      	cbz	r0, 8012c96 <__swbuf_r+0x12>
 8012c8e:	6983      	ldr	r3, [r0, #24]
 8012c90:	b90b      	cbnz	r3, 8012c96 <__swbuf_r+0x12>
 8012c92:	f000 f9e7 	bl	8013064 <__sinit>
 8012c96:	4b21      	ldr	r3, [pc, #132]	; (8012d1c <__swbuf_r+0x98>)
 8012c98:	429c      	cmp	r4, r3
 8012c9a:	d12b      	bne.n	8012cf4 <__swbuf_r+0x70>
 8012c9c:	686c      	ldr	r4, [r5, #4]
 8012c9e:	69a3      	ldr	r3, [r4, #24]
 8012ca0:	60a3      	str	r3, [r4, #8]
 8012ca2:	89a3      	ldrh	r3, [r4, #12]
 8012ca4:	071a      	lsls	r2, r3, #28
 8012ca6:	d52f      	bpl.n	8012d08 <__swbuf_r+0x84>
 8012ca8:	6923      	ldr	r3, [r4, #16]
 8012caa:	b36b      	cbz	r3, 8012d08 <__swbuf_r+0x84>
 8012cac:	6923      	ldr	r3, [r4, #16]
 8012cae:	6820      	ldr	r0, [r4, #0]
 8012cb0:	1ac0      	subs	r0, r0, r3
 8012cb2:	6963      	ldr	r3, [r4, #20]
 8012cb4:	b2f6      	uxtb	r6, r6
 8012cb6:	4283      	cmp	r3, r0
 8012cb8:	4637      	mov	r7, r6
 8012cba:	dc04      	bgt.n	8012cc6 <__swbuf_r+0x42>
 8012cbc:	4621      	mov	r1, r4
 8012cbe:	4628      	mov	r0, r5
 8012cc0:	f000 f93c 	bl	8012f3c <_fflush_r>
 8012cc4:	bb30      	cbnz	r0, 8012d14 <__swbuf_r+0x90>
 8012cc6:	68a3      	ldr	r3, [r4, #8]
 8012cc8:	3b01      	subs	r3, #1
 8012cca:	60a3      	str	r3, [r4, #8]
 8012ccc:	6823      	ldr	r3, [r4, #0]
 8012cce:	1c5a      	adds	r2, r3, #1
 8012cd0:	6022      	str	r2, [r4, #0]
 8012cd2:	701e      	strb	r6, [r3, #0]
 8012cd4:	6963      	ldr	r3, [r4, #20]
 8012cd6:	3001      	adds	r0, #1
 8012cd8:	4283      	cmp	r3, r0
 8012cda:	d004      	beq.n	8012ce6 <__swbuf_r+0x62>
 8012cdc:	89a3      	ldrh	r3, [r4, #12]
 8012cde:	07db      	lsls	r3, r3, #31
 8012ce0:	d506      	bpl.n	8012cf0 <__swbuf_r+0x6c>
 8012ce2:	2e0a      	cmp	r6, #10
 8012ce4:	d104      	bne.n	8012cf0 <__swbuf_r+0x6c>
 8012ce6:	4621      	mov	r1, r4
 8012ce8:	4628      	mov	r0, r5
 8012cea:	f000 f927 	bl	8012f3c <_fflush_r>
 8012cee:	b988      	cbnz	r0, 8012d14 <__swbuf_r+0x90>
 8012cf0:	4638      	mov	r0, r7
 8012cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf4:	4b0a      	ldr	r3, [pc, #40]	; (8012d20 <__swbuf_r+0x9c>)
 8012cf6:	429c      	cmp	r4, r3
 8012cf8:	d101      	bne.n	8012cfe <__swbuf_r+0x7a>
 8012cfa:	68ac      	ldr	r4, [r5, #8]
 8012cfc:	e7cf      	b.n	8012c9e <__swbuf_r+0x1a>
 8012cfe:	4b09      	ldr	r3, [pc, #36]	; (8012d24 <__swbuf_r+0xa0>)
 8012d00:	429c      	cmp	r4, r3
 8012d02:	bf08      	it	eq
 8012d04:	68ec      	ldreq	r4, [r5, #12]
 8012d06:	e7ca      	b.n	8012c9e <__swbuf_r+0x1a>
 8012d08:	4621      	mov	r1, r4
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	f000 f81a 	bl	8012d44 <__swsetup_r>
 8012d10:	2800      	cmp	r0, #0
 8012d12:	d0cb      	beq.n	8012cac <__swbuf_r+0x28>
 8012d14:	f04f 37ff 	mov.w	r7, #4294967295
 8012d18:	e7ea      	b.n	8012cf0 <__swbuf_r+0x6c>
 8012d1a:	bf00      	nop
 8012d1c:	08016590 	.word	0x08016590
 8012d20:	080165b0 	.word	0x080165b0
 8012d24:	08016570 	.word	0x08016570

08012d28 <__ascii_wctomb>:
 8012d28:	b149      	cbz	r1, 8012d3e <__ascii_wctomb+0x16>
 8012d2a:	2aff      	cmp	r2, #255	; 0xff
 8012d2c:	bf85      	ittet	hi
 8012d2e:	238a      	movhi	r3, #138	; 0x8a
 8012d30:	6003      	strhi	r3, [r0, #0]
 8012d32:	700a      	strbls	r2, [r1, #0]
 8012d34:	f04f 30ff 	movhi.w	r0, #4294967295
 8012d38:	bf98      	it	ls
 8012d3a:	2001      	movls	r0, #1
 8012d3c:	4770      	bx	lr
 8012d3e:	4608      	mov	r0, r1
 8012d40:	4770      	bx	lr
	...

08012d44 <__swsetup_r>:
 8012d44:	4b32      	ldr	r3, [pc, #200]	; (8012e10 <__swsetup_r+0xcc>)
 8012d46:	b570      	push	{r4, r5, r6, lr}
 8012d48:	681d      	ldr	r5, [r3, #0]
 8012d4a:	4606      	mov	r6, r0
 8012d4c:	460c      	mov	r4, r1
 8012d4e:	b125      	cbz	r5, 8012d5a <__swsetup_r+0x16>
 8012d50:	69ab      	ldr	r3, [r5, #24]
 8012d52:	b913      	cbnz	r3, 8012d5a <__swsetup_r+0x16>
 8012d54:	4628      	mov	r0, r5
 8012d56:	f000 f985 	bl	8013064 <__sinit>
 8012d5a:	4b2e      	ldr	r3, [pc, #184]	; (8012e14 <__swsetup_r+0xd0>)
 8012d5c:	429c      	cmp	r4, r3
 8012d5e:	d10f      	bne.n	8012d80 <__swsetup_r+0x3c>
 8012d60:	686c      	ldr	r4, [r5, #4]
 8012d62:	89a3      	ldrh	r3, [r4, #12]
 8012d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d68:	0719      	lsls	r1, r3, #28
 8012d6a:	d42c      	bmi.n	8012dc6 <__swsetup_r+0x82>
 8012d6c:	06dd      	lsls	r5, r3, #27
 8012d6e:	d411      	bmi.n	8012d94 <__swsetup_r+0x50>
 8012d70:	2309      	movs	r3, #9
 8012d72:	6033      	str	r3, [r6, #0]
 8012d74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d78:	81a3      	strh	r3, [r4, #12]
 8012d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d7e:	e03e      	b.n	8012dfe <__swsetup_r+0xba>
 8012d80:	4b25      	ldr	r3, [pc, #148]	; (8012e18 <__swsetup_r+0xd4>)
 8012d82:	429c      	cmp	r4, r3
 8012d84:	d101      	bne.n	8012d8a <__swsetup_r+0x46>
 8012d86:	68ac      	ldr	r4, [r5, #8]
 8012d88:	e7eb      	b.n	8012d62 <__swsetup_r+0x1e>
 8012d8a:	4b24      	ldr	r3, [pc, #144]	; (8012e1c <__swsetup_r+0xd8>)
 8012d8c:	429c      	cmp	r4, r3
 8012d8e:	bf08      	it	eq
 8012d90:	68ec      	ldreq	r4, [r5, #12]
 8012d92:	e7e6      	b.n	8012d62 <__swsetup_r+0x1e>
 8012d94:	0758      	lsls	r0, r3, #29
 8012d96:	d512      	bpl.n	8012dbe <__swsetup_r+0x7a>
 8012d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d9a:	b141      	cbz	r1, 8012dae <__swsetup_r+0x6a>
 8012d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012da0:	4299      	cmp	r1, r3
 8012da2:	d002      	beq.n	8012daa <__swsetup_r+0x66>
 8012da4:	4630      	mov	r0, r6
 8012da6:	f7ff fbe1 	bl	801256c <_free_r>
 8012daa:	2300      	movs	r3, #0
 8012dac:	6363      	str	r3, [r4, #52]	; 0x34
 8012dae:	89a3      	ldrh	r3, [r4, #12]
 8012db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012db4:	81a3      	strh	r3, [r4, #12]
 8012db6:	2300      	movs	r3, #0
 8012db8:	6063      	str	r3, [r4, #4]
 8012dba:	6923      	ldr	r3, [r4, #16]
 8012dbc:	6023      	str	r3, [r4, #0]
 8012dbe:	89a3      	ldrh	r3, [r4, #12]
 8012dc0:	f043 0308 	orr.w	r3, r3, #8
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	6923      	ldr	r3, [r4, #16]
 8012dc8:	b94b      	cbnz	r3, 8012dde <__swsetup_r+0x9a>
 8012dca:	89a3      	ldrh	r3, [r4, #12]
 8012dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012dd4:	d003      	beq.n	8012dde <__swsetup_r+0x9a>
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	4630      	mov	r0, r6
 8012dda:	f000 fa07 	bl	80131ec <__smakebuf_r>
 8012dde:	89a0      	ldrh	r0, [r4, #12]
 8012de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012de4:	f010 0301 	ands.w	r3, r0, #1
 8012de8:	d00a      	beq.n	8012e00 <__swsetup_r+0xbc>
 8012dea:	2300      	movs	r3, #0
 8012dec:	60a3      	str	r3, [r4, #8]
 8012dee:	6963      	ldr	r3, [r4, #20]
 8012df0:	425b      	negs	r3, r3
 8012df2:	61a3      	str	r3, [r4, #24]
 8012df4:	6923      	ldr	r3, [r4, #16]
 8012df6:	b943      	cbnz	r3, 8012e0a <__swsetup_r+0xc6>
 8012df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012dfc:	d1ba      	bne.n	8012d74 <__swsetup_r+0x30>
 8012dfe:	bd70      	pop	{r4, r5, r6, pc}
 8012e00:	0781      	lsls	r1, r0, #30
 8012e02:	bf58      	it	pl
 8012e04:	6963      	ldrpl	r3, [r4, #20]
 8012e06:	60a3      	str	r3, [r4, #8]
 8012e08:	e7f4      	b.n	8012df4 <__swsetup_r+0xb0>
 8012e0a:	2000      	movs	r0, #0
 8012e0c:	e7f7      	b.n	8012dfe <__swsetup_r+0xba>
 8012e0e:	bf00      	nop
 8012e10:	20000028 	.word	0x20000028
 8012e14:	08016590 	.word	0x08016590
 8012e18:	080165b0 	.word	0x080165b0
 8012e1c:	08016570 	.word	0x08016570

08012e20 <abort>:
 8012e20:	b508      	push	{r3, lr}
 8012e22:	2006      	movs	r0, #6
 8012e24:	f000 fa96 	bl	8013354 <raise>
 8012e28:	2001      	movs	r0, #1
 8012e2a:	f7f0 fd81 	bl	8003930 <_exit>
	...

08012e30 <__sflush_r>:
 8012e30:	898a      	ldrh	r2, [r1, #12]
 8012e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e36:	4605      	mov	r5, r0
 8012e38:	0710      	lsls	r0, r2, #28
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	d458      	bmi.n	8012ef0 <__sflush_r+0xc0>
 8012e3e:	684b      	ldr	r3, [r1, #4]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	dc05      	bgt.n	8012e50 <__sflush_r+0x20>
 8012e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	dc02      	bgt.n	8012e50 <__sflush_r+0x20>
 8012e4a:	2000      	movs	r0, #0
 8012e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e52:	2e00      	cmp	r6, #0
 8012e54:	d0f9      	beq.n	8012e4a <__sflush_r+0x1a>
 8012e56:	2300      	movs	r3, #0
 8012e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e5c:	682f      	ldr	r7, [r5, #0]
 8012e5e:	602b      	str	r3, [r5, #0]
 8012e60:	d032      	beq.n	8012ec8 <__sflush_r+0x98>
 8012e62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e64:	89a3      	ldrh	r3, [r4, #12]
 8012e66:	075a      	lsls	r2, r3, #29
 8012e68:	d505      	bpl.n	8012e76 <__sflush_r+0x46>
 8012e6a:	6863      	ldr	r3, [r4, #4]
 8012e6c:	1ac0      	subs	r0, r0, r3
 8012e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e70:	b10b      	cbz	r3, 8012e76 <__sflush_r+0x46>
 8012e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e74:	1ac0      	subs	r0, r0, r3
 8012e76:	2300      	movs	r3, #0
 8012e78:	4602      	mov	r2, r0
 8012e7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e7c:	6a21      	ldr	r1, [r4, #32]
 8012e7e:	4628      	mov	r0, r5
 8012e80:	47b0      	blx	r6
 8012e82:	1c43      	adds	r3, r0, #1
 8012e84:	89a3      	ldrh	r3, [r4, #12]
 8012e86:	d106      	bne.n	8012e96 <__sflush_r+0x66>
 8012e88:	6829      	ldr	r1, [r5, #0]
 8012e8a:	291d      	cmp	r1, #29
 8012e8c:	d82c      	bhi.n	8012ee8 <__sflush_r+0xb8>
 8012e8e:	4a2a      	ldr	r2, [pc, #168]	; (8012f38 <__sflush_r+0x108>)
 8012e90:	40ca      	lsrs	r2, r1
 8012e92:	07d6      	lsls	r6, r2, #31
 8012e94:	d528      	bpl.n	8012ee8 <__sflush_r+0xb8>
 8012e96:	2200      	movs	r2, #0
 8012e98:	6062      	str	r2, [r4, #4]
 8012e9a:	04d9      	lsls	r1, r3, #19
 8012e9c:	6922      	ldr	r2, [r4, #16]
 8012e9e:	6022      	str	r2, [r4, #0]
 8012ea0:	d504      	bpl.n	8012eac <__sflush_r+0x7c>
 8012ea2:	1c42      	adds	r2, r0, #1
 8012ea4:	d101      	bne.n	8012eaa <__sflush_r+0x7a>
 8012ea6:	682b      	ldr	r3, [r5, #0]
 8012ea8:	b903      	cbnz	r3, 8012eac <__sflush_r+0x7c>
 8012eaa:	6560      	str	r0, [r4, #84]	; 0x54
 8012eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012eae:	602f      	str	r7, [r5, #0]
 8012eb0:	2900      	cmp	r1, #0
 8012eb2:	d0ca      	beq.n	8012e4a <__sflush_r+0x1a>
 8012eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eb8:	4299      	cmp	r1, r3
 8012eba:	d002      	beq.n	8012ec2 <__sflush_r+0x92>
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f7ff fb55 	bl	801256c <_free_r>
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8012ec6:	e7c1      	b.n	8012e4c <__sflush_r+0x1c>
 8012ec8:	6a21      	ldr	r1, [r4, #32]
 8012eca:	2301      	movs	r3, #1
 8012ecc:	4628      	mov	r0, r5
 8012ece:	47b0      	blx	r6
 8012ed0:	1c41      	adds	r1, r0, #1
 8012ed2:	d1c7      	bne.n	8012e64 <__sflush_r+0x34>
 8012ed4:	682b      	ldr	r3, [r5, #0]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d0c4      	beq.n	8012e64 <__sflush_r+0x34>
 8012eda:	2b1d      	cmp	r3, #29
 8012edc:	d001      	beq.n	8012ee2 <__sflush_r+0xb2>
 8012ede:	2b16      	cmp	r3, #22
 8012ee0:	d101      	bne.n	8012ee6 <__sflush_r+0xb6>
 8012ee2:	602f      	str	r7, [r5, #0]
 8012ee4:	e7b1      	b.n	8012e4a <__sflush_r+0x1a>
 8012ee6:	89a3      	ldrh	r3, [r4, #12]
 8012ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eec:	81a3      	strh	r3, [r4, #12]
 8012eee:	e7ad      	b.n	8012e4c <__sflush_r+0x1c>
 8012ef0:	690f      	ldr	r7, [r1, #16]
 8012ef2:	2f00      	cmp	r7, #0
 8012ef4:	d0a9      	beq.n	8012e4a <__sflush_r+0x1a>
 8012ef6:	0793      	lsls	r3, r2, #30
 8012ef8:	680e      	ldr	r6, [r1, #0]
 8012efa:	bf08      	it	eq
 8012efc:	694b      	ldreq	r3, [r1, #20]
 8012efe:	600f      	str	r7, [r1, #0]
 8012f00:	bf18      	it	ne
 8012f02:	2300      	movne	r3, #0
 8012f04:	eba6 0807 	sub.w	r8, r6, r7
 8012f08:	608b      	str	r3, [r1, #8]
 8012f0a:	f1b8 0f00 	cmp.w	r8, #0
 8012f0e:	dd9c      	ble.n	8012e4a <__sflush_r+0x1a>
 8012f10:	6a21      	ldr	r1, [r4, #32]
 8012f12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f14:	4643      	mov	r3, r8
 8012f16:	463a      	mov	r2, r7
 8012f18:	4628      	mov	r0, r5
 8012f1a:	47b0      	blx	r6
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	dc06      	bgt.n	8012f2e <__sflush_r+0xfe>
 8012f20:	89a3      	ldrh	r3, [r4, #12]
 8012f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f26:	81a3      	strh	r3, [r4, #12]
 8012f28:	f04f 30ff 	mov.w	r0, #4294967295
 8012f2c:	e78e      	b.n	8012e4c <__sflush_r+0x1c>
 8012f2e:	4407      	add	r7, r0
 8012f30:	eba8 0800 	sub.w	r8, r8, r0
 8012f34:	e7e9      	b.n	8012f0a <__sflush_r+0xda>
 8012f36:	bf00      	nop
 8012f38:	20400001 	.word	0x20400001

08012f3c <_fflush_r>:
 8012f3c:	b538      	push	{r3, r4, r5, lr}
 8012f3e:	690b      	ldr	r3, [r1, #16]
 8012f40:	4605      	mov	r5, r0
 8012f42:	460c      	mov	r4, r1
 8012f44:	b913      	cbnz	r3, 8012f4c <_fflush_r+0x10>
 8012f46:	2500      	movs	r5, #0
 8012f48:	4628      	mov	r0, r5
 8012f4a:	bd38      	pop	{r3, r4, r5, pc}
 8012f4c:	b118      	cbz	r0, 8012f56 <_fflush_r+0x1a>
 8012f4e:	6983      	ldr	r3, [r0, #24]
 8012f50:	b90b      	cbnz	r3, 8012f56 <_fflush_r+0x1a>
 8012f52:	f000 f887 	bl	8013064 <__sinit>
 8012f56:	4b14      	ldr	r3, [pc, #80]	; (8012fa8 <_fflush_r+0x6c>)
 8012f58:	429c      	cmp	r4, r3
 8012f5a:	d11b      	bne.n	8012f94 <_fflush_r+0x58>
 8012f5c:	686c      	ldr	r4, [r5, #4]
 8012f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d0ef      	beq.n	8012f46 <_fflush_r+0xa>
 8012f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f68:	07d0      	lsls	r0, r2, #31
 8012f6a:	d404      	bmi.n	8012f76 <_fflush_r+0x3a>
 8012f6c:	0599      	lsls	r1, r3, #22
 8012f6e:	d402      	bmi.n	8012f76 <_fflush_r+0x3a>
 8012f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f72:	f000 f915 	bl	80131a0 <__retarget_lock_acquire_recursive>
 8012f76:	4628      	mov	r0, r5
 8012f78:	4621      	mov	r1, r4
 8012f7a:	f7ff ff59 	bl	8012e30 <__sflush_r>
 8012f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f80:	07da      	lsls	r2, r3, #31
 8012f82:	4605      	mov	r5, r0
 8012f84:	d4e0      	bmi.n	8012f48 <_fflush_r+0xc>
 8012f86:	89a3      	ldrh	r3, [r4, #12]
 8012f88:	059b      	lsls	r3, r3, #22
 8012f8a:	d4dd      	bmi.n	8012f48 <_fflush_r+0xc>
 8012f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f8e:	f000 f908 	bl	80131a2 <__retarget_lock_release_recursive>
 8012f92:	e7d9      	b.n	8012f48 <_fflush_r+0xc>
 8012f94:	4b05      	ldr	r3, [pc, #20]	; (8012fac <_fflush_r+0x70>)
 8012f96:	429c      	cmp	r4, r3
 8012f98:	d101      	bne.n	8012f9e <_fflush_r+0x62>
 8012f9a:	68ac      	ldr	r4, [r5, #8]
 8012f9c:	e7df      	b.n	8012f5e <_fflush_r+0x22>
 8012f9e:	4b04      	ldr	r3, [pc, #16]	; (8012fb0 <_fflush_r+0x74>)
 8012fa0:	429c      	cmp	r4, r3
 8012fa2:	bf08      	it	eq
 8012fa4:	68ec      	ldreq	r4, [r5, #12]
 8012fa6:	e7da      	b.n	8012f5e <_fflush_r+0x22>
 8012fa8:	08016590 	.word	0x08016590
 8012fac:	080165b0 	.word	0x080165b0
 8012fb0:	08016570 	.word	0x08016570

08012fb4 <std>:
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	b510      	push	{r4, lr}
 8012fb8:	4604      	mov	r4, r0
 8012fba:	e9c0 3300 	strd	r3, r3, [r0]
 8012fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012fc2:	6083      	str	r3, [r0, #8]
 8012fc4:	8181      	strh	r1, [r0, #12]
 8012fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8012fc8:	81c2      	strh	r2, [r0, #14]
 8012fca:	6183      	str	r3, [r0, #24]
 8012fcc:	4619      	mov	r1, r3
 8012fce:	2208      	movs	r2, #8
 8012fd0:	305c      	adds	r0, #92	; 0x5c
 8012fd2:	f7fb ffff 	bl	800efd4 <memset>
 8012fd6:	4b05      	ldr	r3, [pc, #20]	; (8012fec <std+0x38>)
 8012fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8012fda:	4b05      	ldr	r3, [pc, #20]	; (8012ff0 <std+0x3c>)
 8012fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8012fde:	4b05      	ldr	r3, [pc, #20]	; (8012ff4 <std+0x40>)
 8012fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012fe2:	4b05      	ldr	r3, [pc, #20]	; (8012ff8 <std+0x44>)
 8012fe4:	6224      	str	r4, [r4, #32]
 8012fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8012fe8:	bd10      	pop	{r4, pc}
 8012fea:	bf00      	nop
 8012fec:	0801338d 	.word	0x0801338d
 8012ff0:	080133af 	.word	0x080133af
 8012ff4:	080133e7 	.word	0x080133e7
 8012ff8:	0801340b 	.word	0x0801340b

08012ffc <_cleanup_r>:
 8012ffc:	4901      	ldr	r1, [pc, #4]	; (8013004 <_cleanup_r+0x8>)
 8012ffe:	f000 b8af 	b.w	8013160 <_fwalk_reent>
 8013002:	bf00      	nop
 8013004:	08012f3d 	.word	0x08012f3d

08013008 <__sfmoreglue>:
 8013008:	b570      	push	{r4, r5, r6, lr}
 801300a:	1e4a      	subs	r2, r1, #1
 801300c:	2568      	movs	r5, #104	; 0x68
 801300e:	4355      	muls	r5, r2
 8013010:	460e      	mov	r6, r1
 8013012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013016:	f7ff faf9 	bl	801260c <_malloc_r>
 801301a:	4604      	mov	r4, r0
 801301c:	b140      	cbz	r0, 8013030 <__sfmoreglue+0x28>
 801301e:	2100      	movs	r1, #0
 8013020:	e9c0 1600 	strd	r1, r6, [r0]
 8013024:	300c      	adds	r0, #12
 8013026:	60a0      	str	r0, [r4, #8]
 8013028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801302c:	f7fb ffd2 	bl	800efd4 <memset>
 8013030:	4620      	mov	r0, r4
 8013032:	bd70      	pop	{r4, r5, r6, pc}

08013034 <__sfp_lock_acquire>:
 8013034:	4801      	ldr	r0, [pc, #4]	; (801303c <__sfp_lock_acquire+0x8>)
 8013036:	f000 b8b3 	b.w	80131a0 <__retarget_lock_acquire_recursive>
 801303a:	bf00      	nop
 801303c:	20005d84 	.word	0x20005d84

08013040 <__sfp_lock_release>:
 8013040:	4801      	ldr	r0, [pc, #4]	; (8013048 <__sfp_lock_release+0x8>)
 8013042:	f000 b8ae 	b.w	80131a2 <__retarget_lock_release_recursive>
 8013046:	bf00      	nop
 8013048:	20005d84 	.word	0x20005d84

0801304c <__sinit_lock_acquire>:
 801304c:	4801      	ldr	r0, [pc, #4]	; (8013054 <__sinit_lock_acquire+0x8>)
 801304e:	f000 b8a7 	b.w	80131a0 <__retarget_lock_acquire_recursive>
 8013052:	bf00      	nop
 8013054:	20005d7f 	.word	0x20005d7f

08013058 <__sinit_lock_release>:
 8013058:	4801      	ldr	r0, [pc, #4]	; (8013060 <__sinit_lock_release+0x8>)
 801305a:	f000 b8a2 	b.w	80131a2 <__retarget_lock_release_recursive>
 801305e:	bf00      	nop
 8013060:	20005d7f 	.word	0x20005d7f

08013064 <__sinit>:
 8013064:	b510      	push	{r4, lr}
 8013066:	4604      	mov	r4, r0
 8013068:	f7ff fff0 	bl	801304c <__sinit_lock_acquire>
 801306c:	69a3      	ldr	r3, [r4, #24]
 801306e:	b11b      	cbz	r3, 8013078 <__sinit+0x14>
 8013070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013074:	f7ff bff0 	b.w	8013058 <__sinit_lock_release>
 8013078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801307c:	6523      	str	r3, [r4, #80]	; 0x50
 801307e:	4b13      	ldr	r3, [pc, #76]	; (80130cc <__sinit+0x68>)
 8013080:	4a13      	ldr	r2, [pc, #76]	; (80130d0 <__sinit+0x6c>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	62a2      	str	r2, [r4, #40]	; 0x28
 8013086:	42a3      	cmp	r3, r4
 8013088:	bf04      	itt	eq
 801308a:	2301      	moveq	r3, #1
 801308c:	61a3      	streq	r3, [r4, #24]
 801308e:	4620      	mov	r0, r4
 8013090:	f000 f820 	bl	80130d4 <__sfp>
 8013094:	6060      	str	r0, [r4, #4]
 8013096:	4620      	mov	r0, r4
 8013098:	f000 f81c 	bl	80130d4 <__sfp>
 801309c:	60a0      	str	r0, [r4, #8]
 801309e:	4620      	mov	r0, r4
 80130a0:	f000 f818 	bl	80130d4 <__sfp>
 80130a4:	2200      	movs	r2, #0
 80130a6:	60e0      	str	r0, [r4, #12]
 80130a8:	2104      	movs	r1, #4
 80130aa:	6860      	ldr	r0, [r4, #4]
 80130ac:	f7ff ff82 	bl	8012fb4 <std>
 80130b0:	68a0      	ldr	r0, [r4, #8]
 80130b2:	2201      	movs	r2, #1
 80130b4:	2109      	movs	r1, #9
 80130b6:	f7ff ff7d 	bl	8012fb4 <std>
 80130ba:	68e0      	ldr	r0, [r4, #12]
 80130bc:	2202      	movs	r2, #2
 80130be:	2112      	movs	r1, #18
 80130c0:	f7ff ff78 	bl	8012fb4 <std>
 80130c4:	2301      	movs	r3, #1
 80130c6:	61a3      	str	r3, [r4, #24]
 80130c8:	e7d2      	b.n	8013070 <__sinit+0xc>
 80130ca:	bf00      	nop
 80130cc:	080160c4 	.word	0x080160c4
 80130d0:	08012ffd 	.word	0x08012ffd

080130d4 <__sfp>:
 80130d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130d6:	4607      	mov	r7, r0
 80130d8:	f7ff ffac 	bl	8013034 <__sfp_lock_acquire>
 80130dc:	4b1e      	ldr	r3, [pc, #120]	; (8013158 <__sfp+0x84>)
 80130de:	681e      	ldr	r6, [r3, #0]
 80130e0:	69b3      	ldr	r3, [r6, #24]
 80130e2:	b913      	cbnz	r3, 80130ea <__sfp+0x16>
 80130e4:	4630      	mov	r0, r6
 80130e6:	f7ff ffbd 	bl	8013064 <__sinit>
 80130ea:	3648      	adds	r6, #72	; 0x48
 80130ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80130f0:	3b01      	subs	r3, #1
 80130f2:	d503      	bpl.n	80130fc <__sfp+0x28>
 80130f4:	6833      	ldr	r3, [r6, #0]
 80130f6:	b30b      	cbz	r3, 801313c <__sfp+0x68>
 80130f8:	6836      	ldr	r6, [r6, #0]
 80130fa:	e7f7      	b.n	80130ec <__sfp+0x18>
 80130fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013100:	b9d5      	cbnz	r5, 8013138 <__sfp+0x64>
 8013102:	4b16      	ldr	r3, [pc, #88]	; (801315c <__sfp+0x88>)
 8013104:	60e3      	str	r3, [r4, #12]
 8013106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801310a:	6665      	str	r5, [r4, #100]	; 0x64
 801310c:	f000 f847 	bl	801319e <__retarget_lock_init_recursive>
 8013110:	f7ff ff96 	bl	8013040 <__sfp_lock_release>
 8013114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801311c:	6025      	str	r5, [r4, #0]
 801311e:	61a5      	str	r5, [r4, #24]
 8013120:	2208      	movs	r2, #8
 8013122:	4629      	mov	r1, r5
 8013124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013128:	f7fb ff54 	bl	800efd4 <memset>
 801312c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013134:	4620      	mov	r0, r4
 8013136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013138:	3468      	adds	r4, #104	; 0x68
 801313a:	e7d9      	b.n	80130f0 <__sfp+0x1c>
 801313c:	2104      	movs	r1, #4
 801313e:	4638      	mov	r0, r7
 8013140:	f7ff ff62 	bl	8013008 <__sfmoreglue>
 8013144:	4604      	mov	r4, r0
 8013146:	6030      	str	r0, [r6, #0]
 8013148:	2800      	cmp	r0, #0
 801314a:	d1d5      	bne.n	80130f8 <__sfp+0x24>
 801314c:	f7ff ff78 	bl	8013040 <__sfp_lock_release>
 8013150:	230c      	movs	r3, #12
 8013152:	603b      	str	r3, [r7, #0]
 8013154:	e7ee      	b.n	8013134 <__sfp+0x60>
 8013156:	bf00      	nop
 8013158:	080160c4 	.word	0x080160c4
 801315c:	ffff0001 	.word	0xffff0001

08013160 <_fwalk_reent>:
 8013160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013164:	4606      	mov	r6, r0
 8013166:	4688      	mov	r8, r1
 8013168:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801316c:	2700      	movs	r7, #0
 801316e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013172:	f1b9 0901 	subs.w	r9, r9, #1
 8013176:	d505      	bpl.n	8013184 <_fwalk_reent+0x24>
 8013178:	6824      	ldr	r4, [r4, #0]
 801317a:	2c00      	cmp	r4, #0
 801317c:	d1f7      	bne.n	801316e <_fwalk_reent+0xe>
 801317e:	4638      	mov	r0, r7
 8013180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013184:	89ab      	ldrh	r3, [r5, #12]
 8013186:	2b01      	cmp	r3, #1
 8013188:	d907      	bls.n	801319a <_fwalk_reent+0x3a>
 801318a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801318e:	3301      	adds	r3, #1
 8013190:	d003      	beq.n	801319a <_fwalk_reent+0x3a>
 8013192:	4629      	mov	r1, r5
 8013194:	4630      	mov	r0, r6
 8013196:	47c0      	blx	r8
 8013198:	4307      	orrs	r7, r0
 801319a:	3568      	adds	r5, #104	; 0x68
 801319c:	e7e9      	b.n	8013172 <_fwalk_reent+0x12>

0801319e <__retarget_lock_init_recursive>:
 801319e:	4770      	bx	lr

080131a0 <__retarget_lock_acquire_recursive>:
 80131a0:	4770      	bx	lr

080131a2 <__retarget_lock_release_recursive>:
 80131a2:	4770      	bx	lr

080131a4 <__swhatbuf_r>:
 80131a4:	b570      	push	{r4, r5, r6, lr}
 80131a6:	460e      	mov	r6, r1
 80131a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131ac:	2900      	cmp	r1, #0
 80131ae:	b096      	sub	sp, #88	; 0x58
 80131b0:	4614      	mov	r4, r2
 80131b2:	461d      	mov	r5, r3
 80131b4:	da07      	bge.n	80131c6 <__swhatbuf_r+0x22>
 80131b6:	2300      	movs	r3, #0
 80131b8:	602b      	str	r3, [r5, #0]
 80131ba:	89b3      	ldrh	r3, [r6, #12]
 80131bc:	061a      	lsls	r2, r3, #24
 80131be:	d410      	bmi.n	80131e2 <__swhatbuf_r+0x3e>
 80131c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131c4:	e00e      	b.n	80131e4 <__swhatbuf_r+0x40>
 80131c6:	466a      	mov	r2, sp
 80131c8:	f000 f946 	bl	8013458 <_fstat_r>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	dbf2      	blt.n	80131b6 <__swhatbuf_r+0x12>
 80131d0:	9a01      	ldr	r2, [sp, #4]
 80131d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80131d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80131da:	425a      	negs	r2, r3
 80131dc:	415a      	adcs	r2, r3
 80131de:	602a      	str	r2, [r5, #0]
 80131e0:	e7ee      	b.n	80131c0 <__swhatbuf_r+0x1c>
 80131e2:	2340      	movs	r3, #64	; 0x40
 80131e4:	2000      	movs	r0, #0
 80131e6:	6023      	str	r3, [r4, #0]
 80131e8:	b016      	add	sp, #88	; 0x58
 80131ea:	bd70      	pop	{r4, r5, r6, pc}

080131ec <__smakebuf_r>:
 80131ec:	898b      	ldrh	r3, [r1, #12]
 80131ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131f0:	079d      	lsls	r5, r3, #30
 80131f2:	4606      	mov	r6, r0
 80131f4:	460c      	mov	r4, r1
 80131f6:	d507      	bpl.n	8013208 <__smakebuf_r+0x1c>
 80131f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80131fc:	6023      	str	r3, [r4, #0]
 80131fe:	6123      	str	r3, [r4, #16]
 8013200:	2301      	movs	r3, #1
 8013202:	6163      	str	r3, [r4, #20]
 8013204:	b002      	add	sp, #8
 8013206:	bd70      	pop	{r4, r5, r6, pc}
 8013208:	ab01      	add	r3, sp, #4
 801320a:	466a      	mov	r2, sp
 801320c:	f7ff ffca 	bl	80131a4 <__swhatbuf_r>
 8013210:	9900      	ldr	r1, [sp, #0]
 8013212:	4605      	mov	r5, r0
 8013214:	4630      	mov	r0, r6
 8013216:	f7ff f9f9 	bl	801260c <_malloc_r>
 801321a:	b948      	cbnz	r0, 8013230 <__smakebuf_r+0x44>
 801321c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013220:	059a      	lsls	r2, r3, #22
 8013222:	d4ef      	bmi.n	8013204 <__smakebuf_r+0x18>
 8013224:	f023 0303 	bic.w	r3, r3, #3
 8013228:	f043 0302 	orr.w	r3, r3, #2
 801322c:	81a3      	strh	r3, [r4, #12]
 801322e:	e7e3      	b.n	80131f8 <__smakebuf_r+0xc>
 8013230:	4b0d      	ldr	r3, [pc, #52]	; (8013268 <__smakebuf_r+0x7c>)
 8013232:	62b3      	str	r3, [r6, #40]	; 0x28
 8013234:	89a3      	ldrh	r3, [r4, #12]
 8013236:	6020      	str	r0, [r4, #0]
 8013238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801323c:	81a3      	strh	r3, [r4, #12]
 801323e:	9b00      	ldr	r3, [sp, #0]
 8013240:	6163      	str	r3, [r4, #20]
 8013242:	9b01      	ldr	r3, [sp, #4]
 8013244:	6120      	str	r0, [r4, #16]
 8013246:	b15b      	cbz	r3, 8013260 <__smakebuf_r+0x74>
 8013248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801324c:	4630      	mov	r0, r6
 801324e:	f000 f915 	bl	801347c <_isatty_r>
 8013252:	b128      	cbz	r0, 8013260 <__smakebuf_r+0x74>
 8013254:	89a3      	ldrh	r3, [r4, #12]
 8013256:	f023 0303 	bic.w	r3, r3, #3
 801325a:	f043 0301 	orr.w	r3, r3, #1
 801325e:	81a3      	strh	r3, [r4, #12]
 8013260:	89a0      	ldrh	r0, [r4, #12]
 8013262:	4305      	orrs	r5, r0
 8013264:	81a5      	strh	r5, [r4, #12]
 8013266:	e7cd      	b.n	8013204 <__smakebuf_r+0x18>
 8013268:	08012ffd 	.word	0x08012ffd

0801326c <memmove>:
 801326c:	4288      	cmp	r0, r1
 801326e:	b510      	push	{r4, lr}
 8013270:	eb01 0402 	add.w	r4, r1, r2
 8013274:	d902      	bls.n	801327c <memmove+0x10>
 8013276:	4284      	cmp	r4, r0
 8013278:	4623      	mov	r3, r4
 801327a:	d807      	bhi.n	801328c <memmove+0x20>
 801327c:	1e43      	subs	r3, r0, #1
 801327e:	42a1      	cmp	r1, r4
 8013280:	d008      	beq.n	8013294 <memmove+0x28>
 8013282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013286:	f803 2f01 	strb.w	r2, [r3, #1]!
 801328a:	e7f8      	b.n	801327e <memmove+0x12>
 801328c:	4402      	add	r2, r0
 801328e:	4601      	mov	r1, r0
 8013290:	428a      	cmp	r2, r1
 8013292:	d100      	bne.n	8013296 <memmove+0x2a>
 8013294:	bd10      	pop	{r4, pc}
 8013296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801329a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801329e:	e7f7      	b.n	8013290 <memmove+0x24>

080132a0 <__malloc_lock>:
 80132a0:	4801      	ldr	r0, [pc, #4]	; (80132a8 <__malloc_lock+0x8>)
 80132a2:	f7ff bf7d 	b.w	80131a0 <__retarget_lock_acquire_recursive>
 80132a6:	bf00      	nop
 80132a8:	20005d80 	.word	0x20005d80

080132ac <__malloc_unlock>:
 80132ac:	4801      	ldr	r0, [pc, #4]	; (80132b4 <__malloc_unlock+0x8>)
 80132ae:	f7ff bf78 	b.w	80131a2 <__retarget_lock_release_recursive>
 80132b2:	bf00      	nop
 80132b4:	20005d80 	.word	0x20005d80

080132b8 <_realloc_r>:
 80132b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ba:	4607      	mov	r7, r0
 80132bc:	4614      	mov	r4, r2
 80132be:	460e      	mov	r6, r1
 80132c0:	b921      	cbnz	r1, 80132cc <_realloc_r+0x14>
 80132c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80132c6:	4611      	mov	r1, r2
 80132c8:	f7ff b9a0 	b.w	801260c <_malloc_r>
 80132cc:	b922      	cbnz	r2, 80132d8 <_realloc_r+0x20>
 80132ce:	f7ff f94d 	bl	801256c <_free_r>
 80132d2:	4625      	mov	r5, r4
 80132d4:	4628      	mov	r0, r5
 80132d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132d8:	f000 f8f2 	bl	80134c0 <_malloc_usable_size_r>
 80132dc:	42a0      	cmp	r0, r4
 80132de:	d20f      	bcs.n	8013300 <_realloc_r+0x48>
 80132e0:	4621      	mov	r1, r4
 80132e2:	4638      	mov	r0, r7
 80132e4:	f7ff f992 	bl	801260c <_malloc_r>
 80132e8:	4605      	mov	r5, r0
 80132ea:	2800      	cmp	r0, #0
 80132ec:	d0f2      	beq.n	80132d4 <_realloc_r+0x1c>
 80132ee:	4631      	mov	r1, r6
 80132f0:	4622      	mov	r2, r4
 80132f2:	f7fb fe61 	bl	800efb8 <memcpy>
 80132f6:	4631      	mov	r1, r6
 80132f8:	4638      	mov	r0, r7
 80132fa:	f7ff f937 	bl	801256c <_free_r>
 80132fe:	e7e9      	b.n	80132d4 <_realloc_r+0x1c>
 8013300:	4635      	mov	r5, r6
 8013302:	e7e7      	b.n	80132d4 <_realloc_r+0x1c>

08013304 <_raise_r>:
 8013304:	291f      	cmp	r1, #31
 8013306:	b538      	push	{r3, r4, r5, lr}
 8013308:	4604      	mov	r4, r0
 801330a:	460d      	mov	r5, r1
 801330c:	d904      	bls.n	8013318 <_raise_r+0x14>
 801330e:	2316      	movs	r3, #22
 8013310:	6003      	str	r3, [r0, #0]
 8013312:	f04f 30ff 	mov.w	r0, #4294967295
 8013316:	bd38      	pop	{r3, r4, r5, pc}
 8013318:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801331a:	b112      	cbz	r2, 8013322 <_raise_r+0x1e>
 801331c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013320:	b94b      	cbnz	r3, 8013336 <_raise_r+0x32>
 8013322:	4620      	mov	r0, r4
 8013324:	f000 f830 	bl	8013388 <_getpid_r>
 8013328:	462a      	mov	r2, r5
 801332a:	4601      	mov	r1, r0
 801332c:	4620      	mov	r0, r4
 801332e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013332:	f000 b817 	b.w	8013364 <_kill_r>
 8013336:	2b01      	cmp	r3, #1
 8013338:	d00a      	beq.n	8013350 <_raise_r+0x4c>
 801333a:	1c59      	adds	r1, r3, #1
 801333c:	d103      	bne.n	8013346 <_raise_r+0x42>
 801333e:	2316      	movs	r3, #22
 8013340:	6003      	str	r3, [r0, #0]
 8013342:	2001      	movs	r0, #1
 8013344:	e7e7      	b.n	8013316 <_raise_r+0x12>
 8013346:	2400      	movs	r4, #0
 8013348:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801334c:	4628      	mov	r0, r5
 801334e:	4798      	blx	r3
 8013350:	2000      	movs	r0, #0
 8013352:	e7e0      	b.n	8013316 <_raise_r+0x12>

08013354 <raise>:
 8013354:	4b02      	ldr	r3, [pc, #8]	; (8013360 <raise+0xc>)
 8013356:	4601      	mov	r1, r0
 8013358:	6818      	ldr	r0, [r3, #0]
 801335a:	f7ff bfd3 	b.w	8013304 <_raise_r>
 801335e:	bf00      	nop
 8013360:	20000028 	.word	0x20000028

08013364 <_kill_r>:
 8013364:	b538      	push	{r3, r4, r5, lr}
 8013366:	4d07      	ldr	r5, [pc, #28]	; (8013384 <_kill_r+0x20>)
 8013368:	2300      	movs	r3, #0
 801336a:	4604      	mov	r4, r0
 801336c:	4608      	mov	r0, r1
 801336e:	4611      	mov	r1, r2
 8013370:	602b      	str	r3, [r5, #0]
 8013372:	f7f0 facd 	bl	8003910 <_kill>
 8013376:	1c43      	adds	r3, r0, #1
 8013378:	d102      	bne.n	8013380 <_kill_r+0x1c>
 801337a:	682b      	ldr	r3, [r5, #0]
 801337c:	b103      	cbz	r3, 8013380 <_kill_r+0x1c>
 801337e:	6023      	str	r3, [r4, #0]
 8013380:	bd38      	pop	{r3, r4, r5, pc}
 8013382:	bf00      	nop
 8013384:	20005d88 	.word	0x20005d88

08013388 <_getpid_r>:
 8013388:	f7f0 baba 	b.w	8003900 <_getpid>

0801338c <__sread>:
 801338c:	b510      	push	{r4, lr}
 801338e:	460c      	mov	r4, r1
 8013390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013394:	f000 f89c 	bl	80134d0 <_read_r>
 8013398:	2800      	cmp	r0, #0
 801339a:	bfab      	itete	ge
 801339c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801339e:	89a3      	ldrhlt	r3, [r4, #12]
 80133a0:	181b      	addge	r3, r3, r0
 80133a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133a6:	bfac      	ite	ge
 80133a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80133aa:	81a3      	strhlt	r3, [r4, #12]
 80133ac:	bd10      	pop	{r4, pc}

080133ae <__swrite>:
 80133ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b2:	461f      	mov	r7, r3
 80133b4:	898b      	ldrh	r3, [r1, #12]
 80133b6:	05db      	lsls	r3, r3, #23
 80133b8:	4605      	mov	r5, r0
 80133ba:	460c      	mov	r4, r1
 80133bc:	4616      	mov	r6, r2
 80133be:	d505      	bpl.n	80133cc <__swrite+0x1e>
 80133c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133c4:	2302      	movs	r3, #2
 80133c6:	2200      	movs	r2, #0
 80133c8:	f000 f868 	bl	801349c <_lseek_r>
 80133cc:	89a3      	ldrh	r3, [r4, #12]
 80133ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80133d6:	81a3      	strh	r3, [r4, #12]
 80133d8:	4632      	mov	r2, r6
 80133da:	463b      	mov	r3, r7
 80133dc:	4628      	mov	r0, r5
 80133de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133e2:	f000 b817 	b.w	8013414 <_write_r>

080133e6 <__sseek>:
 80133e6:	b510      	push	{r4, lr}
 80133e8:	460c      	mov	r4, r1
 80133ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133ee:	f000 f855 	bl	801349c <_lseek_r>
 80133f2:	1c43      	adds	r3, r0, #1
 80133f4:	89a3      	ldrh	r3, [r4, #12]
 80133f6:	bf15      	itete	ne
 80133f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80133fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80133fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013402:	81a3      	strheq	r3, [r4, #12]
 8013404:	bf18      	it	ne
 8013406:	81a3      	strhne	r3, [r4, #12]
 8013408:	bd10      	pop	{r4, pc}

0801340a <__sclose>:
 801340a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801340e:	f000 b813 	b.w	8013438 <_close_r>
	...

08013414 <_write_r>:
 8013414:	b538      	push	{r3, r4, r5, lr}
 8013416:	4d07      	ldr	r5, [pc, #28]	; (8013434 <_write_r+0x20>)
 8013418:	4604      	mov	r4, r0
 801341a:	4608      	mov	r0, r1
 801341c:	4611      	mov	r1, r2
 801341e:	2200      	movs	r2, #0
 8013420:	602a      	str	r2, [r5, #0]
 8013422:	461a      	mov	r2, r3
 8013424:	f7f0 faab 	bl	800397e <_write>
 8013428:	1c43      	adds	r3, r0, #1
 801342a:	d102      	bne.n	8013432 <_write_r+0x1e>
 801342c:	682b      	ldr	r3, [r5, #0]
 801342e:	b103      	cbz	r3, 8013432 <_write_r+0x1e>
 8013430:	6023      	str	r3, [r4, #0]
 8013432:	bd38      	pop	{r3, r4, r5, pc}
 8013434:	20005d88 	.word	0x20005d88

08013438 <_close_r>:
 8013438:	b538      	push	{r3, r4, r5, lr}
 801343a:	4d06      	ldr	r5, [pc, #24]	; (8013454 <_close_r+0x1c>)
 801343c:	2300      	movs	r3, #0
 801343e:	4604      	mov	r4, r0
 8013440:	4608      	mov	r0, r1
 8013442:	602b      	str	r3, [r5, #0]
 8013444:	f7f0 fab7 	bl	80039b6 <_close>
 8013448:	1c43      	adds	r3, r0, #1
 801344a:	d102      	bne.n	8013452 <_close_r+0x1a>
 801344c:	682b      	ldr	r3, [r5, #0]
 801344e:	b103      	cbz	r3, 8013452 <_close_r+0x1a>
 8013450:	6023      	str	r3, [r4, #0]
 8013452:	bd38      	pop	{r3, r4, r5, pc}
 8013454:	20005d88 	.word	0x20005d88

08013458 <_fstat_r>:
 8013458:	b538      	push	{r3, r4, r5, lr}
 801345a:	4d07      	ldr	r5, [pc, #28]	; (8013478 <_fstat_r+0x20>)
 801345c:	2300      	movs	r3, #0
 801345e:	4604      	mov	r4, r0
 8013460:	4608      	mov	r0, r1
 8013462:	4611      	mov	r1, r2
 8013464:	602b      	str	r3, [r5, #0]
 8013466:	f7f0 fab2 	bl	80039ce <_fstat>
 801346a:	1c43      	adds	r3, r0, #1
 801346c:	d102      	bne.n	8013474 <_fstat_r+0x1c>
 801346e:	682b      	ldr	r3, [r5, #0]
 8013470:	b103      	cbz	r3, 8013474 <_fstat_r+0x1c>
 8013472:	6023      	str	r3, [r4, #0]
 8013474:	bd38      	pop	{r3, r4, r5, pc}
 8013476:	bf00      	nop
 8013478:	20005d88 	.word	0x20005d88

0801347c <_isatty_r>:
 801347c:	b538      	push	{r3, r4, r5, lr}
 801347e:	4d06      	ldr	r5, [pc, #24]	; (8013498 <_isatty_r+0x1c>)
 8013480:	2300      	movs	r3, #0
 8013482:	4604      	mov	r4, r0
 8013484:	4608      	mov	r0, r1
 8013486:	602b      	str	r3, [r5, #0]
 8013488:	f7f0 fab1 	bl	80039ee <_isatty>
 801348c:	1c43      	adds	r3, r0, #1
 801348e:	d102      	bne.n	8013496 <_isatty_r+0x1a>
 8013490:	682b      	ldr	r3, [r5, #0]
 8013492:	b103      	cbz	r3, 8013496 <_isatty_r+0x1a>
 8013494:	6023      	str	r3, [r4, #0]
 8013496:	bd38      	pop	{r3, r4, r5, pc}
 8013498:	20005d88 	.word	0x20005d88

0801349c <_lseek_r>:
 801349c:	b538      	push	{r3, r4, r5, lr}
 801349e:	4d07      	ldr	r5, [pc, #28]	; (80134bc <_lseek_r+0x20>)
 80134a0:	4604      	mov	r4, r0
 80134a2:	4608      	mov	r0, r1
 80134a4:	4611      	mov	r1, r2
 80134a6:	2200      	movs	r2, #0
 80134a8:	602a      	str	r2, [r5, #0]
 80134aa:	461a      	mov	r2, r3
 80134ac:	f7f0 faaa 	bl	8003a04 <_lseek>
 80134b0:	1c43      	adds	r3, r0, #1
 80134b2:	d102      	bne.n	80134ba <_lseek_r+0x1e>
 80134b4:	682b      	ldr	r3, [r5, #0]
 80134b6:	b103      	cbz	r3, 80134ba <_lseek_r+0x1e>
 80134b8:	6023      	str	r3, [r4, #0]
 80134ba:	bd38      	pop	{r3, r4, r5, pc}
 80134bc:	20005d88 	.word	0x20005d88

080134c0 <_malloc_usable_size_r>:
 80134c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134c4:	1f18      	subs	r0, r3, #4
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	bfbc      	itt	lt
 80134ca:	580b      	ldrlt	r3, [r1, r0]
 80134cc:	18c0      	addlt	r0, r0, r3
 80134ce:	4770      	bx	lr

080134d0 <_read_r>:
 80134d0:	b538      	push	{r3, r4, r5, lr}
 80134d2:	4d07      	ldr	r5, [pc, #28]	; (80134f0 <_read_r+0x20>)
 80134d4:	4604      	mov	r4, r0
 80134d6:	4608      	mov	r0, r1
 80134d8:	4611      	mov	r1, r2
 80134da:	2200      	movs	r2, #0
 80134dc:	602a      	str	r2, [r5, #0]
 80134de:	461a      	mov	r2, r3
 80134e0:	f7f0 fa30 	bl	8003944 <_read>
 80134e4:	1c43      	adds	r3, r0, #1
 80134e6:	d102      	bne.n	80134ee <_read_r+0x1e>
 80134e8:	682b      	ldr	r3, [r5, #0]
 80134ea:	b103      	cbz	r3, 80134ee <_read_r+0x1e>
 80134ec:	6023      	str	r3, [r4, #0]
 80134ee:	bd38      	pop	{r3, r4, r5, pc}
 80134f0:	20005d88 	.word	0x20005d88
 80134f4:	00000000 	.word	0x00000000

080134f8 <cos>:
 80134f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80134fa:	ec53 2b10 	vmov	r2, r3, d0
 80134fe:	4824      	ldr	r0, [pc, #144]	; (8013590 <cos+0x98>)
 8013500:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013504:	4281      	cmp	r1, r0
 8013506:	dc06      	bgt.n	8013516 <cos+0x1e>
 8013508:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8013588 <cos+0x90>
 801350c:	f001 fc2c 	bl	8014d68 <__kernel_cos>
 8013510:	ec51 0b10 	vmov	r0, r1, d0
 8013514:	e007      	b.n	8013526 <cos+0x2e>
 8013516:	481f      	ldr	r0, [pc, #124]	; (8013594 <cos+0x9c>)
 8013518:	4281      	cmp	r1, r0
 801351a:	dd09      	ble.n	8013530 <cos+0x38>
 801351c:	ee10 0a10 	vmov	r0, s0
 8013520:	4619      	mov	r1, r3
 8013522:	f7ec feb9 	bl	8000298 <__aeabi_dsub>
 8013526:	ec41 0b10 	vmov	d0, r0, r1
 801352a:	b005      	add	sp, #20
 801352c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013530:	4668      	mov	r0, sp
 8013532:	f001 f959 	bl	80147e8 <__ieee754_rem_pio2>
 8013536:	f000 0003 	and.w	r0, r0, #3
 801353a:	2801      	cmp	r0, #1
 801353c:	d007      	beq.n	801354e <cos+0x56>
 801353e:	2802      	cmp	r0, #2
 8013540:	d012      	beq.n	8013568 <cos+0x70>
 8013542:	b9c0      	cbnz	r0, 8013576 <cos+0x7e>
 8013544:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013548:	ed9d 0b00 	vldr	d0, [sp]
 801354c:	e7de      	b.n	801350c <cos+0x14>
 801354e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013552:	ed9d 0b00 	vldr	d0, [sp]
 8013556:	f002 f80f 	bl	8015578 <__kernel_sin>
 801355a:	ec53 2b10 	vmov	r2, r3, d0
 801355e:	ee10 0a10 	vmov	r0, s0
 8013562:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013566:	e7de      	b.n	8013526 <cos+0x2e>
 8013568:	ed9d 1b02 	vldr	d1, [sp, #8]
 801356c:	ed9d 0b00 	vldr	d0, [sp]
 8013570:	f001 fbfa 	bl	8014d68 <__kernel_cos>
 8013574:	e7f1      	b.n	801355a <cos+0x62>
 8013576:	ed9d 1b02 	vldr	d1, [sp, #8]
 801357a:	ed9d 0b00 	vldr	d0, [sp]
 801357e:	2001      	movs	r0, #1
 8013580:	f001 fffa 	bl	8015578 <__kernel_sin>
 8013584:	e7c4      	b.n	8013510 <cos+0x18>
 8013586:	bf00      	nop
	...
 8013590:	3fe921fb 	.word	0x3fe921fb
 8013594:	7fefffff 	.word	0x7fefffff

08013598 <sin>:
 8013598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801359a:	ec53 2b10 	vmov	r2, r3, d0
 801359e:	4826      	ldr	r0, [pc, #152]	; (8013638 <sin+0xa0>)
 80135a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80135a4:	4281      	cmp	r1, r0
 80135a6:	dc07      	bgt.n	80135b8 <sin+0x20>
 80135a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8013630 <sin+0x98>
 80135ac:	2000      	movs	r0, #0
 80135ae:	f001 ffe3 	bl	8015578 <__kernel_sin>
 80135b2:	ec51 0b10 	vmov	r0, r1, d0
 80135b6:	e007      	b.n	80135c8 <sin+0x30>
 80135b8:	4820      	ldr	r0, [pc, #128]	; (801363c <sin+0xa4>)
 80135ba:	4281      	cmp	r1, r0
 80135bc:	dd09      	ble.n	80135d2 <sin+0x3a>
 80135be:	ee10 0a10 	vmov	r0, s0
 80135c2:	4619      	mov	r1, r3
 80135c4:	f7ec fe68 	bl	8000298 <__aeabi_dsub>
 80135c8:	ec41 0b10 	vmov	d0, r0, r1
 80135cc:	b005      	add	sp, #20
 80135ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80135d2:	4668      	mov	r0, sp
 80135d4:	f001 f908 	bl	80147e8 <__ieee754_rem_pio2>
 80135d8:	f000 0003 	and.w	r0, r0, #3
 80135dc:	2801      	cmp	r0, #1
 80135de:	d008      	beq.n	80135f2 <sin+0x5a>
 80135e0:	2802      	cmp	r0, #2
 80135e2:	d00d      	beq.n	8013600 <sin+0x68>
 80135e4:	b9d0      	cbnz	r0, 801361c <sin+0x84>
 80135e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80135ea:	ed9d 0b00 	vldr	d0, [sp]
 80135ee:	2001      	movs	r0, #1
 80135f0:	e7dd      	b.n	80135ae <sin+0x16>
 80135f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80135f6:	ed9d 0b00 	vldr	d0, [sp]
 80135fa:	f001 fbb5 	bl	8014d68 <__kernel_cos>
 80135fe:	e7d8      	b.n	80135b2 <sin+0x1a>
 8013600:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013604:	ed9d 0b00 	vldr	d0, [sp]
 8013608:	2001      	movs	r0, #1
 801360a:	f001 ffb5 	bl	8015578 <__kernel_sin>
 801360e:	ec53 2b10 	vmov	r2, r3, d0
 8013612:	ee10 0a10 	vmov	r0, s0
 8013616:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801361a:	e7d5      	b.n	80135c8 <sin+0x30>
 801361c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013620:	ed9d 0b00 	vldr	d0, [sp]
 8013624:	f001 fba0 	bl	8014d68 <__kernel_cos>
 8013628:	e7f1      	b.n	801360e <sin+0x76>
 801362a:	bf00      	nop
 801362c:	f3af 8000 	nop.w
	...
 8013638:	3fe921fb 	.word	0x3fe921fb
 801363c:	7fefffff 	.word	0x7fefffff

08013640 <trunc>:
 8013640:	ec51 0b10 	vmov	r0, r1, d0
 8013644:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013648:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801364c:	2b13      	cmp	r3, #19
 801364e:	b5d0      	push	{r4, r6, r7, lr}
 8013650:	460c      	mov	r4, r1
 8013652:	dc10      	bgt.n	8013676 <trunc+0x36>
 8013654:	2b00      	cmp	r3, #0
 8013656:	bfa5      	ittet	ge
 8013658:	4a11      	ldrge	r2, [pc, #68]	; (80136a0 <trunc+0x60>)
 801365a:	fa42 f303 	asrge.w	r3, r2, r3
 801365e:	2100      	movlt	r1, #0
 8013660:	2100      	movge	r1, #0
 8013662:	bfb9      	ittee	lt
 8013664:	2000      	movlt	r0, #0
 8013666:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 801366a:	2000      	movge	r0, #0
 801366c:	ea24 0103 	bicge.w	r1, r4, r3
 8013670:	ec41 0b10 	vmov	d0, r0, r1
 8013674:	bdd0      	pop	{r4, r6, r7, pc}
 8013676:	2b33      	cmp	r3, #51	; 0x33
 8013678:	dd08      	ble.n	801368c <trunc+0x4c>
 801367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801367e:	d1f7      	bne.n	8013670 <trunc+0x30>
 8013680:	ee10 2a10 	vmov	r2, s0
 8013684:	460b      	mov	r3, r1
 8013686:	f7ec fe09 	bl	800029c <__adddf3>
 801368a:	e7f1      	b.n	8013670 <trunc+0x30>
 801368c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8013690:	f04f 33ff 	mov.w	r3, #4294967295
 8013694:	fa23 f202 	lsr.w	r2, r3, r2
 8013698:	ea20 0602 	bic.w	r6, r0, r2
 801369c:	4630      	mov	r0, r6
 801369e:	e7e7      	b.n	8013670 <trunc+0x30>
 80136a0:	000fffff 	.word	0x000fffff

080136a4 <acos>:
 80136a4:	b538      	push	{r3, r4, r5, lr}
 80136a6:	ed2d 8b02 	vpush	{d8}
 80136aa:	ec55 4b10 	vmov	r4, r5, d0
 80136ae:	f000 f917 	bl	80138e0 <__ieee754_acos>
 80136b2:	4b16      	ldr	r3, [pc, #88]	; (801370c <acos+0x68>)
 80136b4:	eeb0 8a40 	vmov.f32	s16, s0
 80136b8:	eef0 8a60 	vmov.f32	s17, s1
 80136bc:	f993 3000 	ldrsb.w	r3, [r3]
 80136c0:	3301      	adds	r3, #1
 80136c2:	d01c      	beq.n	80136fe <acos+0x5a>
 80136c4:	4622      	mov	r2, r4
 80136c6:	462b      	mov	r3, r5
 80136c8:	4620      	mov	r0, r4
 80136ca:	4629      	mov	r1, r5
 80136cc:	f7ed fa36 	bl	8000b3c <__aeabi_dcmpun>
 80136d0:	b9a8      	cbnz	r0, 80136fe <acos+0x5a>
 80136d2:	ec45 4b10 	vmov	d0, r4, r5
 80136d6:	f002 f80d 	bl	80156f4 <fabs>
 80136da:	4b0d      	ldr	r3, [pc, #52]	; (8013710 <acos+0x6c>)
 80136dc:	ec51 0b10 	vmov	r0, r1, d0
 80136e0:	2200      	movs	r2, #0
 80136e2:	f7ed fa21 	bl	8000b28 <__aeabi_dcmpgt>
 80136e6:	b150      	cbz	r0, 80136fe <acos+0x5a>
 80136e8:	f7fb fc3c 	bl	800ef64 <__errno>
 80136ec:	ecbd 8b02 	vpop	{d8}
 80136f0:	2321      	movs	r3, #33	; 0x21
 80136f2:	6003      	str	r3, [r0, #0]
 80136f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136f8:	4806      	ldr	r0, [pc, #24]	; (8013714 <acos+0x70>)
 80136fa:	f7ff ba99 	b.w	8012c30 <nan>
 80136fe:	eeb0 0a48 	vmov.f32	s0, s16
 8013702:	eef0 0a68 	vmov.f32	s1, s17
 8013706:	ecbd 8b02 	vpop	{d8}
 801370a:	bd38      	pop	{r3, r4, r5, pc}
 801370c:	200001fc 	.word	0x200001fc
 8013710:	3ff00000 	.word	0x3ff00000
 8013714:	08016203 	.word	0x08016203

08013718 <pow>:
 8013718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801371c:	ec59 8b10 	vmov	r8, r9, d0
 8013720:	ec57 6b11 	vmov	r6, r7, d1
 8013724:	f000 fb3c 	bl	8013da0 <__ieee754_pow>
 8013728:	4b4e      	ldr	r3, [pc, #312]	; (8013864 <pow+0x14c>)
 801372a:	f993 3000 	ldrsb.w	r3, [r3]
 801372e:	3301      	adds	r3, #1
 8013730:	ec55 4b10 	vmov	r4, r5, d0
 8013734:	d015      	beq.n	8013762 <pow+0x4a>
 8013736:	4632      	mov	r2, r6
 8013738:	463b      	mov	r3, r7
 801373a:	4630      	mov	r0, r6
 801373c:	4639      	mov	r1, r7
 801373e:	f7ed f9fd 	bl	8000b3c <__aeabi_dcmpun>
 8013742:	b970      	cbnz	r0, 8013762 <pow+0x4a>
 8013744:	4642      	mov	r2, r8
 8013746:	464b      	mov	r3, r9
 8013748:	4640      	mov	r0, r8
 801374a:	4649      	mov	r1, r9
 801374c:	f7ed f9f6 	bl	8000b3c <__aeabi_dcmpun>
 8013750:	2200      	movs	r2, #0
 8013752:	2300      	movs	r3, #0
 8013754:	b148      	cbz	r0, 801376a <pow+0x52>
 8013756:	4630      	mov	r0, r6
 8013758:	4639      	mov	r1, r7
 801375a:	f7ed f9bd 	bl	8000ad8 <__aeabi_dcmpeq>
 801375e:	2800      	cmp	r0, #0
 8013760:	d17d      	bne.n	801385e <pow+0x146>
 8013762:	ec45 4b10 	vmov	d0, r4, r5
 8013766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801376a:	4640      	mov	r0, r8
 801376c:	4649      	mov	r1, r9
 801376e:	f7ed f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8013772:	b1e0      	cbz	r0, 80137ae <pow+0x96>
 8013774:	2200      	movs	r2, #0
 8013776:	2300      	movs	r3, #0
 8013778:	4630      	mov	r0, r6
 801377a:	4639      	mov	r1, r7
 801377c:	f7ed f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8013780:	2800      	cmp	r0, #0
 8013782:	d16c      	bne.n	801385e <pow+0x146>
 8013784:	ec47 6b10 	vmov	d0, r6, r7
 8013788:	f001 ffbd 	bl	8015706 <finite>
 801378c:	2800      	cmp	r0, #0
 801378e:	d0e8      	beq.n	8013762 <pow+0x4a>
 8013790:	2200      	movs	r2, #0
 8013792:	2300      	movs	r3, #0
 8013794:	4630      	mov	r0, r6
 8013796:	4639      	mov	r1, r7
 8013798:	f7ed f9a8 	bl	8000aec <__aeabi_dcmplt>
 801379c:	2800      	cmp	r0, #0
 801379e:	d0e0      	beq.n	8013762 <pow+0x4a>
 80137a0:	f7fb fbe0 	bl	800ef64 <__errno>
 80137a4:	2321      	movs	r3, #33	; 0x21
 80137a6:	6003      	str	r3, [r0, #0]
 80137a8:	2400      	movs	r4, #0
 80137aa:	4d2f      	ldr	r5, [pc, #188]	; (8013868 <pow+0x150>)
 80137ac:	e7d9      	b.n	8013762 <pow+0x4a>
 80137ae:	ec45 4b10 	vmov	d0, r4, r5
 80137b2:	f001 ffa8 	bl	8015706 <finite>
 80137b6:	bbb8      	cbnz	r0, 8013828 <pow+0x110>
 80137b8:	ec49 8b10 	vmov	d0, r8, r9
 80137bc:	f001 ffa3 	bl	8015706 <finite>
 80137c0:	b390      	cbz	r0, 8013828 <pow+0x110>
 80137c2:	ec47 6b10 	vmov	d0, r6, r7
 80137c6:	f001 ff9e 	bl	8015706 <finite>
 80137ca:	b368      	cbz	r0, 8013828 <pow+0x110>
 80137cc:	4622      	mov	r2, r4
 80137ce:	462b      	mov	r3, r5
 80137d0:	4620      	mov	r0, r4
 80137d2:	4629      	mov	r1, r5
 80137d4:	f7ed f9b2 	bl	8000b3c <__aeabi_dcmpun>
 80137d8:	b160      	cbz	r0, 80137f4 <pow+0xdc>
 80137da:	f7fb fbc3 	bl	800ef64 <__errno>
 80137de:	2321      	movs	r3, #33	; 0x21
 80137e0:	6003      	str	r3, [r0, #0]
 80137e2:	2200      	movs	r2, #0
 80137e4:	2300      	movs	r3, #0
 80137e6:	4610      	mov	r0, r2
 80137e8:	4619      	mov	r1, r3
 80137ea:	f7ed f837 	bl	800085c <__aeabi_ddiv>
 80137ee:	4604      	mov	r4, r0
 80137f0:	460d      	mov	r5, r1
 80137f2:	e7b6      	b.n	8013762 <pow+0x4a>
 80137f4:	f7fb fbb6 	bl	800ef64 <__errno>
 80137f8:	2322      	movs	r3, #34	; 0x22
 80137fa:	6003      	str	r3, [r0, #0]
 80137fc:	2200      	movs	r2, #0
 80137fe:	2300      	movs	r3, #0
 8013800:	4640      	mov	r0, r8
 8013802:	4649      	mov	r1, r9
 8013804:	f7ed f972 	bl	8000aec <__aeabi_dcmplt>
 8013808:	2400      	movs	r4, #0
 801380a:	b158      	cbz	r0, 8013824 <pow+0x10c>
 801380c:	ec47 6b10 	vmov	d0, r6, r7
 8013810:	f002 f806 	bl	8015820 <rint>
 8013814:	4632      	mov	r2, r6
 8013816:	ec51 0b10 	vmov	r0, r1, d0
 801381a:	463b      	mov	r3, r7
 801381c:	f7ed f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 8013820:	2800      	cmp	r0, #0
 8013822:	d0c2      	beq.n	80137aa <pow+0x92>
 8013824:	4d11      	ldr	r5, [pc, #68]	; (801386c <pow+0x154>)
 8013826:	e79c      	b.n	8013762 <pow+0x4a>
 8013828:	2200      	movs	r2, #0
 801382a:	2300      	movs	r3, #0
 801382c:	4620      	mov	r0, r4
 801382e:	4629      	mov	r1, r5
 8013830:	f7ed f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8013834:	2800      	cmp	r0, #0
 8013836:	d094      	beq.n	8013762 <pow+0x4a>
 8013838:	ec49 8b10 	vmov	d0, r8, r9
 801383c:	f001 ff63 	bl	8015706 <finite>
 8013840:	2800      	cmp	r0, #0
 8013842:	d08e      	beq.n	8013762 <pow+0x4a>
 8013844:	ec47 6b10 	vmov	d0, r6, r7
 8013848:	f001 ff5d 	bl	8015706 <finite>
 801384c:	2800      	cmp	r0, #0
 801384e:	d088      	beq.n	8013762 <pow+0x4a>
 8013850:	f7fb fb88 	bl	800ef64 <__errno>
 8013854:	2322      	movs	r3, #34	; 0x22
 8013856:	6003      	str	r3, [r0, #0]
 8013858:	2400      	movs	r4, #0
 801385a:	2500      	movs	r5, #0
 801385c:	e781      	b.n	8013762 <pow+0x4a>
 801385e:	4d04      	ldr	r5, [pc, #16]	; (8013870 <pow+0x158>)
 8013860:	2400      	movs	r4, #0
 8013862:	e77e      	b.n	8013762 <pow+0x4a>
 8013864:	200001fc 	.word	0x200001fc
 8013868:	fff00000 	.word	0xfff00000
 801386c:	7ff00000 	.word	0x7ff00000
 8013870:	3ff00000 	.word	0x3ff00000

08013874 <sqrt>:
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	ed2d 8b02 	vpush	{d8}
 801387a:	ec55 4b10 	vmov	r4, r5, d0
 801387e:	f001 f9bd 	bl	8014bfc <__ieee754_sqrt>
 8013882:	4b15      	ldr	r3, [pc, #84]	; (80138d8 <sqrt+0x64>)
 8013884:	eeb0 8a40 	vmov.f32	s16, s0
 8013888:	eef0 8a60 	vmov.f32	s17, s1
 801388c:	f993 3000 	ldrsb.w	r3, [r3]
 8013890:	3301      	adds	r3, #1
 8013892:	d019      	beq.n	80138c8 <sqrt+0x54>
 8013894:	4622      	mov	r2, r4
 8013896:	462b      	mov	r3, r5
 8013898:	4620      	mov	r0, r4
 801389a:	4629      	mov	r1, r5
 801389c:	f7ed f94e 	bl	8000b3c <__aeabi_dcmpun>
 80138a0:	b990      	cbnz	r0, 80138c8 <sqrt+0x54>
 80138a2:	2200      	movs	r2, #0
 80138a4:	2300      	movs	r3, #0
 80138a6:	4620      	mov	r0, r4
 80138a8:	4629      	mov	r1, r5
 80138aa:	f7ed f91f 	bl	8000aec <__aeabi_dcmplt>
 80138ae:	b158      	cbz	r0, 80138c8 <sqrt+0x54>
 80138b0:	f7fb fb58 	bl	800ef64 <__errno>
 80138b4:	2321      	movs	r3, #33	; 0x21
 80138b6:	6003      	str	r3, [r0, #0]
 80138b8:	2200      	movs	r2, #0
 80138ba:	2300      	movs	r3, #0
 80138bc:	4610      	mov	r0, r2
 80138be:	4619      	mov	r1, r3
 80138c0:	f7ec ffcc 	bl	800085c <__aeabi_ddiv>
 80138c4:	ec41 0b18 	vmov	d8, r0, r1
 80138c8:	eeb0 0a48 	vmov.f32	s0, s16
 80138cc:	eef0 0a68 	vmov.f32	s1, s17
 80138d0:	ecbd 8b02 	vpop	{d8}
 80138d4:	bd38      	pop	{r3, r4, r5, pc}
 80138d6:	bf00      	nop
 80138d8:	200001fc 	.word	0x200001fc
 80138dc:	00000000 	.word	0x00000000

080138e0 <__ieee754_acos>:
 80138e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e4:	ec55 4b10 	vmov	r4, r5, d0
 80138e8:	49b7      	ldr	r1, [pc, #732]	; (8013bc8 <__ieee754_acos+0x2e8>)
 80138ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80138ee:	428b      	cmp	r3, r1
 80138f0:	dd1b      	ble.n	801392a <__ieee754_acos+0x4a>
 80138f2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80138f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80138fa:	4323      	orrs	r3, r4
 80138fc:	d106      	bne.n	801390c <__ieee754_acos+0x2c>
 80138fe:	2d00      	cmp	r5, #0
 8013900:	f300 8211 	bgt.w	8013d26 <__ieee754_acos+0x446>
 8013904:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8013b60 <__ieee754_acos+0x280>
 8013908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801390c:	ee10 2a10 	vmov	r2, s0
 8013910:	462b      	mov	r3, r5
 8013912:	ee10 0a10 	vmov	r0, s0
 8013916:	4629      	mov	r1, r5
 8013918:	f7ec fcbe 	bl	8000298 <__aeabi_dsub>
 801391c:	4602      	mov	r2, r0
 801391e:	460b      	mov	r3, r1
 8013920:	f7ec ff9c 	bl	800085c <__aeabi_ddiv>
 8013924:	ec41 0b10 	vmov	d0, r0, r1
 8013928:	e7ee      	b.n	8013908 <__ieee754_acos+0x28>
 801392a:	49a8      	ldr	r1, [pc, #672]	; (8013bcc <__ieee754_acos+0x2ec>)
 801392c:	428b      	cmp	r3, r1
 801392e:	f300 8087 	bgt.w	8013a40 <__ieee754_acos+0x160>
 8013932:	4aa7      	ldr	r2, [pc, #668]	; (8013bd0 <__ieee754_acos+0x2f0>)
 8013934:	4293      	cmp	r3, r2
 8013936:	f340 81f9 	ble.w	8013d2c <__ieee754_acos+0x44c>
 801393a:	ee10 2a10 	vmov	r2, s0
 801393e:	ee10 0a10 	vmov	r0, s0
 8013942:	462b      	mov	r3, r5
 8013944:	4629      	mov	r1, r5
 8013946:	f7ec fe5f 	bl	8000608 <__aeabi_dmul>
 801394a:	a387      	add	r3, pc, #540	; (adr r3, 8013b68 <__ieee754_acos+0x288>)
 801394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013950:	4606      	mov	r6, r0
 8013952:	460f      	mov	r7, r1
 8013954:	f7ec fe58 	bl	8000608 <__aeabi_dmul>
 8013958:	a385      	add	r3, pc, #532	; (adr r3, 8013b70 <__ieee754_acos+0x290>)
 801395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395e:	f7ec fc9d 	bl	800029c <__adddf3>
 8013962:	4632      	mov	r2, r6
 8013964:	463b      	mov	r3, r7
 8013966:	f7ec fe4f 	bl	8000608 <__aeabi_dmul>
 801396a:	a383      	add	r3, pc, #524	; (adr r3, 8013b78 <__ieee754_acos+0x298>)
 801396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013970:	f7ec fc92 	bl	8000298 <__aeabi_dsub>
 8013974:	4632      	mov	r2, r6
 8013976:	463b      	mov	r3, r7
 8013978:	f7ec fe46 	bl	8000608 <__aeabi_dmul>
 801397c:	a380      	add	r3, pc, #512	; (adr r3, 8013b80 <__ieee754_acos+0x2a0>)
 801397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013982:	f7ec fc8b 	bl	800029c <__adddf3>
 8013986:	4632      	mov	r2, r6
 8013988:	463b      	mov	r3, r7
 801398a:	f7ec fe3d 	bl	8000608 <__aeabi_dmul>
 801398e:	a37e      	add	r3, pc, #504	; (adr r3, 8013b88 <__ieee754_acos+0x2a8>)
 8013990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013994:	f7ec fc80 	bl	8000298 <__aeabi_dsub>
 8013998:	4632      	mov	r2, r6
 801399a:	463b      	mov	r3, r7
 801399c:	f7ec fe34 	bl	8000608 <__aeabi_dmul>
 80139a0:	a37b      	add	r3, pc, #492	; (adr r3, 8013b90 <__ieee754_acos+0x2b0>)
 80139a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a6:	f7ec fc79 	bl	800029c <__adddf3>
 80139aa:	4632      	mov	r2, r6
 80139ac:	463b      	mov	r3, r7
 80139ae:	f7ec fe2b 	bl	8000608 <__aeabi_dmul>
 80139b2:	a379      	add	r3, pc, #484	; (adr r3, 8013b98 <__ieee754_acos+0x2b8>)
 80139b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b8:	4680      	mov	r8, r0
 80139ba:	4689      	mov	r9, r1
 80139bc:	4630      	mov	r0, r6
 80139be:	4639      	mov	r1, r7
 80139c0:	f7ec fe22 	bl	8000608 <__aeabi_dmul>
 80139c4:	a376      	add	r3, pc, #472	; (adr r3, 8013ba0 <__ieee754_acos+0x2c0>)
 80139c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ca:	f7ec fc65 	bl	8000298 <__aeabi_dsub>
 80139ce:	4632      	mov	r2, r6
 80139d0:	463b      	mov	r3, r7
 80139d2:	f7ec fe19 	bl	8000608 <__aeabi_dmul>
 80139d6:	a374      	add	r3, pc, #464	; (adr r3, 8013ba8 <__ieee754_acos+0x2c8>)
 80139d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139dc:	f7ec fc5e 	bl	800029c <__adddf3>
 80139e0:	4632      	mov	r2, r6
 80139e2:	463b      	mov	r3, r7
 80139e4:	f7ec fe10 	bl	8000608 <__aeabi_dmul>
 80139e8:	a371      	add	r3, pc, #452	; (adr r3, 8013bb0 <__ieee754_acos+0x2d0>)
 80139ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ee:	f7ec fc53 	bl	8000298 <__aeabi_dsub>
 80139f2:	4632      	mov	r2, r6
 80139f4:	463b      	mov	r3, r7
 80139f6:	f7ec fe07 	bl	8000608 <__aeabi_dmul>
 80139fa:	4b76      	ldr	r3, [pc, #472]	; (8013bd4 <__ieee754_acos+0x2f4>)
 80139fc:	2200      	movs	r2, #0
 80139fe:	f7ec fc4d 	bl	800029c <__adddf3>
 8013a02:	4602      	mov	r2, r0
 8013a04:	460b      	mov	r3, r1
 8013a06:	4640      	mov	r0, r8
 8013a08:	4649      	mov	r1, r9
 8013a0a:	f7ec ff27 	bl	800085c <__aeabi_ddiv>
 8013a0e:	4622      	mov	r2, r4
 8013a10:	462b      	mov	r3, r5
 8013a12:	f7ec fdf9 	bl	8000608 <__aeabi_dmul>
 8013a16:	4602      	mov	r2, r0
 8013a18:	460b      	mov	r3, r1
 8013a1a:	a167      	add	r1, pc, #412	; (adr r1, 8013bb8 <__ieee754_acos+0x2d8>)
 8013a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a20:	f7ec fc3a 	bl	8000298 <__aeabi_dsub>
 8013a24:	4602      	mov	r2, r0
 8013a26:	460b      	mov	r3, r1
 8013a28:	4620      	mov	r0, r4
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	f7ec fc34 	bl	8000298 <__aeabi_dsub>
 8013a30:	4602      	mov	r2, r0
 8013a32:	460b      	mov	r3, r1
 8013a34:	a162      	add	r1, pc, #392	; (adr r1, 8013bc0 <__ieee754_acos+0x2e0>)
 8013a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a3a:	f7ec fc2d 	bl	8000298 <__aeabi_dsub>
 8013a3e:	e771      	b.n	8013924 <__ieee754_acos+0x44>
 8013a40:	2d00      	cmp	r5, #0
 8013a42:	f280 80cb 	bge.w	8013bdc <__ieee754_acos+0x2fc>
 8013a46:	ee10 0a10 	vmov	r0, s0
 8013a4a:	4b62      	ldr	r3, [pc, #392]	; (8013bd4 <__ieee754_acos+0x2f4>)
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	4629      	mov	r1, r5
 8013a50:	f7ec fc24 	bl	800029c <__adddf3>
 8013a54:	4b60      	ldr	r3, [pc, #384]	; (8013bd8 <__ieee754_acos+0x2f8>)
 8013a56:	2200      	movs	r2, #0
 8013a58:	f7ec fdd6 	bl	8000608 <__aeabi_dmul>
 8013a5c:	a342      	add	r3, pc, #264	; (adr r3, 8013b68 <__ieee754_acos+0x288>)
 8013a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a62:	4604      	mov	r4, r0
 8013a64:	460d      	mov	r5, r1
 8013a66:	f7ec fdcf 	bl	8000608 <__aeabi_dmul>
 8013a6a:	a341      	add	r3, pc, #260	; (adr r3, 8013b70 <__ieee754_acos+0x290>)
 8013a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a70:	f7ec fc14 	bl	800029c <__adddf3>
 8013a74:	4622      	mov	r2, r4
 8013a76:	462b      	mov	r3, r5
 8013a78:	f7ec fdc6 	bl	8000608 <__aeabi_dmul>
 8013a7c:	a33e      	add	r3, pc, #248	; (adr r3, 8013b78 <__ieee754_acos+0x298>)
 8013a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a82:	f7ec fc09 	bl	8000298 <__aeabi_dsub>
 8013a86:	4622      	mov	r2, r4
 8013a88:	462b      	mov	r3, r5
 8013a8a:	f7ec fdbd 	bl	8000608 <__aeabi_dmul>
 8013a8e:	a33c      	add	r3, pc, #240	; (adr r3, 8013b80 <__ieee754_acos+0x2a0>)
 8013a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a94:	f7ec fc02 	bl	800029c <__adddf3>
 8013a98:	4622      	mov	r2, r4
 8013a9a:	462b      	mov	r3, r5
 8013a9c:	f7ec fdb4 	bl	8000608 <__aeabi_dmul>
 8013aa0:	a339      	add	r3, pc, #228	; (adr r3, 8013b88 <__ieee754_acos+0x2a8>)
 8013aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa6:	f7ec fbf7 	bl	8000298 <__aeabi_dsub>
 8013aaa:	4622      	mov	r2, r4
 8013aac:	462b      	mov	r3, r5
 8013aae:	f7ec fdab 	bl	8000608 <__aeabi_dmul>
 8013ab2:	a337      	add	r3, pc, #220	; (adr r3, 8013b90 <__ieee754_acos+0x2b0>)
 8013ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab8:	f7ec fbf0 	bl	800029c <__adddf3>
 8013abc:	4622      	mov	r2, r4
 8013abe:	462b      	mov	r3, r5
 8013ac0:	f7ec fda2 	bl	8000608 <__aeabi_dmul>
 8013ac4:	ec45 4b10 	vmov	d0, r4, r5
 8013ac8:	4680      	mov	r8, r0
 8013aca:	4689      	mov	r9, r1
 8013acc:	f001 f896 	bl	8014bfc <__ieee754_sqrt>
 8013ad0:	a331      	add	r3, pc, #196	; (adr r3, 8013b98 <__ieee754_acos+0x2b8>)
 8013ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	4629      	mov	r1, r5
 8013ada:	ec57 6b10 	vmov	r6, r7, d0
 8013ade:	f7ec fd93 	bl	8000608 <__aeabi_dmul>
 8013ae2:	a32f      	add	r3, pc, #188	; (adr r3, 8013ba0 <__ieee754_acos+0x2c0>)
 8013ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae8:	f7ec fbd6 	bl	8000298 <__aeabi_dsub>
 8013aec:	4622      	mov	r2, r4
 8013aee:	462b      	mov	r3, r5
 8013af0:	f7ec fd8a 	bl	8000608 <__aeabi_dmul>
 8013af4:	a32c      	add	r3, pc, #176	; (adr r3, 8013ba8 <__ieee754_acos+0x2c8>)
 8013af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afa:	f7ec fbcf 	bl	800029c <__adddf3>
 8013afe:	4622      	mov	r2, r4
 8013b00:	462b      	mov	r3, r5
 8013b02:	f7ec fd81 	bl	8000608 <__aeabi_dmul>
 8013b06:	a32a      	add	r3, pc, #168	; (adr r3, 8013bb0 <__ieee754_acos+0x2d0>)
 8013b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0c:	f7ec fbc4 	bl	8000298 <__aeabi_dsub>
 8013b10:	4622      	mov	r2, r4
 8013b12:	462b      	mov	r3, r5
 8013b14:	f7ec fd78 	bl	8000608 <__aeabi_dmul>
 8013b18:	4b2e      	ldr	r3, [pc, #184]	; (8013bd4 <__ieee754_acos+0x2f4>)
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	f7ec fbbe 	bl	800029c <__adddf3>
 8013b20:	4602      	mov	r2, r0
 8013b22:	460b      	mov	r3, r1
 8013b24:	4640      	mov	r0, r8
 8013b26:	4649      	mov	r1, r9
 8013b28:	f7ec fe98 	bl	800085c <__aeabi_ddiv>
 8013b2c:	4632      	mov	r2, r6
 8013b2e:	463b      	mov	r3, r7
 8013b30:	f7ec fd6a 	bl	8000608 <__aeabi_dmul>
 8013b34:	a320      	add	r3, pc, #128	; (adr r3, 8013bb8 <__ieee754_acos+0x2d8>)
 8013b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b3a:	f7ec fbad 	bl	8000298 <__aeabi_dsub>
 8013b3e:	4632      	mov	r2, r6
 8013b40:	463b      	mov	r3, r7
 8013b42:	f7ec fbab 	bl	800029c <__adddf3>
 8013b46:	4602      	mov	r2, r0
 8013b48:	460b      	mov	r3, r1
 8013b4a:	f7ec fba7 	bl	800029c <__adddf3>
 8013b4e:	4602      	mov	r2, r0
 8013b50:	460b      	mov	r3, r1
 8013b52:	a103      	add	r1, pc, #12	; (adr r1, 8013b60 <__ieee754_acos+0x280>)
 8013b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b58:	e76f      	b.n	8013a3a <__ieee754_acos+0x15a>
 8013b5a:	bf00      	nop
 8013b5c:	f3af 8000 	nop.w
 8013b60:	54442d18 	.word	0x54442d18
 8013b64:	400921fb 	.word	0x400921fb
 8013b68:	0dfdf709 	.word	0x0dfdf709
 8013b6c:	3f023de1 	.word	0x3f023de1
 8013b70:	7501b288 	.word	0x7501b288
 8013b74:	3f49efe0 	.word	0x3f49efe0
 8013b78:	b5688f3b 	.word	0xb5688f3b
 8013b7c:	3fa48228 	.word	0x3fa48228
 8013b80:	0e884455 	.word	0x0e884455
 8013b84:	3fc9c155 	.word	0x3fc9c155
 8013b88:	03eb6f7d 	.word	0x03eb6f7d
 8013b8c:	3fd4d612 	.word	0x3fd4d612
 8013b90:	55555555 	.word	0x55555555
 8013b94:	3fc55555 	.word	0x3fc55555
 8013b98:	b12e9282 	.word	0xb12e9282
 8013b9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8013ba0:	1b8d0159 	.word	0x1b8d0159
 8013ba4:	3fe6066c 	.word	0x3fe6066c
 8013ba8:	9c598ac8 	.word	0x9c598ac8
 8013bac:	40002ae5 	.word	0x40002ae5
 8013bb0:	1c8a2d4b 	.word	0x1c8a2d4b
 8013bb4:	40033a27 	.word	0x40033a27
 8013bb8:	33145c07 	.word	0x33145c07
 8013bbc:	3c91a626 	.word	0x3c91a626
 8013bc0:	54442d18 	.word	0x54442d18
 8013bc4:	3ff921fb 	.word	0x3ff921fb
 8013bc8:	3fefffff 	.word	0x3fefffff
 8013bcc:	3fdfffff 	.word	0x3fdfffff
 8013bd0:	3c600000 	.word	0x3c600000
 8013bd4:	3ff00000 	.word	0x3ff00000
 8013bd8:	3fe00000 	.word	0x3fe00000
 8013bdc:	ee10 2a10 	vmov	r2, s0
 8013be0:	462b      	mov	r3, r5
 8013be2:	496d      	ldr	r1, [pc, #436]	; (8013d98 <__ieee754_acos+0x4b8>)
 8013be4:	2000      	movs	r0, #0
 8013be6:	f7ec fb57 	bl	8000298 <__aeabi_dsub>
 8013bea:	4b6c      	ldr	r3, [pc, #432]	; (8013d9c <__ieee754_acos+0x4bc>)
 8013bec:	2200      	movs	r2, #0
 8013bee:	f7ec fd0b 	bl	8000608 <__aeabi_dmul>
 8013bf2:	4604      	mov	r4, r0
 8013bf4:	460d      	mov	r5, r1
 8013bf6:	ec45 4b10 	vmov	d0, r4, r5
 8013bfa:	f000 ffff 	bl	8014bfc <__ieee754_sqrt>
 8013bfe:	a34e      	add	r3, pc, #312	; (adr r3, 8013d38 <__ieee754_acos+0x458>)
 8013c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c04:	4620      	mov	r0, r4
 8013c06:	4629      	mov	r1, r5
 8013c08:	ec59 8b10 	vmov	r8, r9, d0
 8013c0c:	f7ec fcfc 	bl	8000608 <__aeabi_dmul>
 8013c10:	a34b      	add	r3, pc, #300	; (adr r3, 8013d40 <__ieee754_acos+0x460>)
 8013c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c16:	f7ec fb41 	bl	800029c <__adddf3>
 8013c1a:	4622      	mov	r2, r4
 8013c1c:	462b      	mov	r3, r5
 8013c1e:	f7ec fcf3 	bl	8000608 <__aeabi_dmul>
 8013c22:	a349      	add	r3, pc, #292	; (adr r3, 8013d48 <__ieee754_acos+0x468>)
 8013c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c28:	f7ec fb36 	bl	8000298 <__aeabi_dsub>
 8013c2c:	4622      	mov	r2, r4
 8013c2e:	462b      	mov	r3, r5
 8013c30:	f7ec fcea 	bl	8000608 <__aeabi_dmul>
 8013c34:	a346      	add	r3, pc, #280	; (adr r3, 8013d50 <__ieee754_acos+0x470>)
 8013c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c3a:	f7ec fb2f 	bl	800029c <__adddf3>
 8013c3e:	4622      	mov	r2, r4
 8013c40:	462b      	mov	r3, r5
 8013c42:	f7ec fce1 	bl	8000608 <__aeabi_dmul>
 8013c46:	a344      	add	r3, pc, #272	; (adr r3, 8013d58 <__ieee754_acos+0x478>)
 8013c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c4c:	f7ec fb24 	bl	8000298 <__aeabi_dsub>
 8013c50:	4622      	mov	r2, r4
 8013c52:	462b      	mov	r3, r5
 8013c54:	f7ec fcd8 	bl	8000608 <__aeabi_dmul>
 8013c58:	a341      	add	r3, pc, #260	; (adr r3, 8013d60 <__ieee754_acos+0x480>)
 8013c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5e:	f7ec fb1d 	bl	800029c <__adddf3>
 8013c62:	4622      	mov	r2, r4
 8013c64:	462b      	mov	r3, r5
 8013c66:	f7ec fccf 	bl	8000608 <__aeabi_dmul>
 8013c6a:	a33f      	add	r3, pc, #252	; (adr r3, 8013d68 <__ieee754_acos+0x488>)
 8013c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c70:	4682      	mov	sl, r0
 8013c72:	468b      	mov	fp, r1
 8013c74:	4620      	mov	r0, r4
 8013c76:	4629      	mov	r1, r5
 8013c78:	f7ec fcc6 	bl	8000608 <__aeabi_dmul>
 8013c7c:	a33c      	add	r3, pc, #240	; (adr r3, 8013d70 <__ieee754_acos+0x490>)
 8013c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c82:	f7ec fb09 	bl	8000298 <__aeabi_dsub>
 8013c86:	4622      	mov	r2, r4
 8013c88:	462b      	mov	r3, r5
 8013c8a:	f7ec fcbd 	bl	8000608 <__aeabi_dmul>
 8013c8e:	a33a      	add	r3, pc, #232	; (adr r3, 8013d78 <__ieee754_acos+0x498>)
 8013c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c94:	f7ec fb02 	bl	800029c <__adddf3>
 8013c98:	4622      	mov	r2, r4
 8013c9a:	462b      	mov	r3, r5
 8013c9c:	f7ec fcb4 	bl	8000608 <__aeabi_dmul>
 8013ca0:	a337      	add	r3, pc, #220	; (adr r3, 8013d80 <__ieee754_acos+0x4a0>)
 8013ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca6:	f7ec faf7 	bl	8000298 <__aeabi_dsub>
 8013caa:	4622      	mov	r2, r4
 8013cac:	462b      	mov	r3, r5
 8013cae:	f7ec fcab 	bl	8000608 <__aeabi_dmul>
 8013cb2:	4b39      	ldr	r3, [pc, #228]	; (8013d98 <__ieee754_acos+0x4b8>)
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	f7ec faf1 	bl	800029c <__adddf3>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	4650      	mov	r0, sl
 8013cc0:	4659      	mov	r1, fp
 8013cc2:	f7ec fdcb 	bl	800085c <__aeabi_ddiv>
 8013cc6:	4642      	mov	r2, r8
 8013cc8:	464b      	mov	r3, r9
 8013cca:	f7ec fc9d 	bl	8000608 <__aeabi_dmul>
 8013cce:	2600      	movs	r6, #0
 8013cd0:	4682      	mov	sl, r0
 8013cd2:	468b      	mov	fp, r1
 8013cd4:	4632      	mov	r2, r6
 8013cd6:	464b      	mov	r3, r9
 8013cd8:	4630      	mov	r0, r6
 8013cda:	4649      	mov	r1, r9
 8013cdc:	f7ec fc94 	bl	8000608 <__aeabi_dmul>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	460b      	mov	r3, r1
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	4629      	mov	r1, r5
 8013ce8:	f7ec fad6 	bl	8000298 <__aeabi_dsub>
 8013cec:	4632      	mov	r2, r6
 8013cee:	4604      	mov	r4, r0
 8013cf0:	460d      	mov	r5, r1
 8013cf2:	464b      	mov	r3, r9
 8013cf4:	4640      	mov	r0, r8
 8013cf6:	4649      	mov	r1, r9
 8013cf8:	f7ec fad0 	bl	800029c <__adddf3>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	460b      	mov	r3, r1
 8013d00:	4620      	mov	r0, r4
 8013d02:	4629      	mov	r1, r5
 8013d04:	f7ec fdaa 	bl	800085c <__aeabi_ddiv>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	4650      	mov	r0, sl
 8013d0e:	4659      	mov	r1, fp
 8013d10:	f7ec fac4 	bl	800029c <__adddf3>
 8013d14:	4632      	mov	r2, r6
 8013d16:	464b      	mov	r3, r9
 8013d18:	f7ec fac0 	bl	800029c <__adddf3>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	460b      	mov	r3, r1
 8013d20:	f7ec fabc 	bl	800029c <__adddf3>
 8013d24:	e5fe      	b.n	8013924 <__ieee754_acos+0x44>
 8013d26:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8013d88 <__ieee754_acos+0x4a8>
 8013d2a:	e5ed      	b.n	8013908 <__ieee754_acos+0x28>
 8013d2c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8013d90 <__ieee754_acos+0x4b0>
 8013d30:	e5ea      	b.n	8013908 <__ieee754_acos+0x28>
 8013d32:	bf00      	nop
 8013d34:	f3af 8000 	nop.w
 8013d38:	0dfdf709 	.word	0x0dfdf709
 8013d3c:	3f023de1 	.word	0x3f023de1
 8013d40:	7501b288 	.word	0x7501b288
 8013d44:	3f49efe0 	.word	0x3f49efe0
 8013d48:	b5688f3b 	.word	0xb5688f3b
 8013d4c:	3fa48228 	.word	0x3fa48228
 8013d50:	0e884455 	.word	0x0e884455
 8013d54:	3fc9c155 	.word	0x3fc9c155
 8013d58:	03eb6f7d 	.word	0x03eb6f7d
 8013d5c:	3fd4d612 	.word	0x3fd4d612
 8013d60:	55555555 	.word	0x55555555
 8013d64:	3fc55555 	.word	0x3fc55555
 8013d68:	b12e9282 	.word	0xb12e9282
 8013d6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8013d70:	1b8d0159 	.word	0x1b8d0159
 8013d74:	3fe6066c 	.word	0x3fe6066c
 8013d78:	9c598ac8 	.word	0x9c598ac8
 8013d7c:	40002ae5 	.word	0x40002ae5
 8013d80:	1c8a2d4b 	.word	0x1c8a2d4b
 8013d84:	40033a27 	.word	0x40033a27
	...
 8013d90:	54442d18 	.word	0x54442d18
 8013d94:	3ff921fb 	.word	0x3ff921fb
 8013d98:	3ff00000 	.word	0x3ff00000
 8013d9c:	3fe00000 	.word	0x3fe00000

08013da0 <__ieee754_pow>:
 8013da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da4:	ed2d 8b06 	vpush	{d8-d10}
 8013da8:	b08d      	sub	sp, #52	; 0x34
 8013daa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013dae:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8013db2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8013db6:	ea56 0100 	orrs.w	r1, r6, r0
 8013dba:	ec53 2b10 	vmov	r2, r3, d0
 8013dbe:	f000 84d1 	beq.w	8014764 <__ieee754_pow+0x9c4>
 8013dc2:	497f      	ldr	r1, [pc, #508]	; (8013fc0 <__ieee754_pow+0x220>)
 8013dc4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8013dc8:	428c      	cmp	r4, r1
 8013dca:	ee10 8a10 	vmov	r8, s0
 8013dce:	4699      	mov	r9, r3
 8013dd0:	dc09      	bgt.n	8013de6 <__ieee754_pow+0x46>
 8013dd2:	d103      	bne.n	8013ddc <__ieee754_pow+0x3c>
 8013dd4:	b97a      	cbnz	r2, 8013df6 <__ieee754_pow+0x56>
 8013dd6:	42a6      	cmp	r6, r4
 8013dd8:	dd02      	ble.n	8013de0 <__ieee754_pow+0x40>
 8013dda:	e00c      	b.n	8013df6 <__ieee754_pow+0x56>
 8013ddc:	428e      	cmp	r6, r1
 8013dde:	dc02      	bgt.n	8013de6 <__ieee754_pow+0x46>
 8013de0:	428e      	cmp	r6, r1
 8013de2:	d110      	bne.n	8013e06 <__ieee754_pow+0x66>
 8013de4:	b178      	cbz	r0, 8013e06 <__ieee754_pow+0x66>
 8013de6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013dea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013dee:	ea54 0308 	orrs.w	r3, r4, r8
 8013df2:	f000 84b7 	beq.w	8014764 <__ieee754_pow+0x9c4>
 8013df6:	4873      	ldr	r0, [pc, #460]	; (8013fc4 <__ieee754_pow+0x224>)
 8013df8:	b00d      	add	sp, #52	; 0x34
 8013dfa:	ecbd 8b06 	vpop	{d8-d10}
 8013dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e02:	f7fe bf15 	b.w	8012c30 <nan>
 8013e06:	f1b9 0f00 	cmp.w	r9, #0
 8013e0a:	da36      	bge.n	8013e7a <__ieee754_pow+0xda>
 8013e0c:	496e      	ldr	r1, [pc, #440]	; (8013fc8 <__ieee754_pow+0x228>)
 8013e0e:	428e      	cmp	r6, r1
 8013e10:	dc51      	bgt.n	8013eb6 <__ieee754_pow+0x116>
 8013e12:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8013e16:	428e      	cmp	r6, r1
 8013e18:	f340 84af 	ble.w	801477a <__ieee754_pow+0x9da>
 8013e1c:	1531      	asrs	r1, r6, #20
 8013e1e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013e22:	2914      	cmp	r1, #20
 8013e24:	dd0f      	ble.n	8013e46 <__ieee754_pow+0xa6>
 8013e26:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8013e2a:	fa20 fc01 	lsr.w	ip, r0, r1
 8013e2e:	fa0c f101 	lsl.w	r1, ip, r1
 8013e32:	4281      	cmp	r1, r0
 8013e34:	f040 84a1 	bne.w	801477a <__ieee754_pow+0x9da>
 8013e38:	f00c 0c01 	and.w	ip, ip, #1
 8013e3c:	f1cc 0102 	rsb	r1, ip, #2
 8013e40:	9100      	str	r1, [sp, #0]
 8013e42:	b180      	cbz	r0, 8013e66 <__ieee754_pow+0xc6>
 8013e44:	e059      	b.n	8013efa <__ieee754_pow+0x15a>
 8013e46:	2800      	cmp	r0, #0
 8013e48:	d155      	bne.n	8013ef6 <__ieee754_pow+0x156>
 8013e4a:	f1c1 0114 	rsb	r1, r1, #20
 8013e4e:	fa46 fc01 	asr.w	ip, r6, r1
 8013e52:	fa0c f101 	lsl.w	r1, ip, r1
 8013e56:	42b1      	cmp	r1, r6
 8013e58:	f040 848c 	bne.w	8014774 <__ieee754_pow+0x9d4>
 8013e5c:	f00c 0c01 	and.w	ip, ip, #1
 8013e60:	f1cc 0102 	rsb	r1, ip, #2
 8013e64:	9100      	str	r1, [sp, #0]
 8013e66:	4959      	ldr	r1, [pc, #356]	; (8013fcc <__ieee754_pow+0x22c>)
 8013e68:	428e      	cmp	r6, r1
 8013e6a:	d12d      	bne.n	8013ec8 <__ieee754_pow+0x128>
 8013e6c:	2f00      	cmp	r7, #0
 8013e6e:	da79      	bge.n	8013f64 <__ieee754_pow+0x1c4>
 8013e70:	4956      	ldr	r1, [pc, #344]	; (8013fcc <__ieee754_pow+0x22c>)
 8013e72:	2000      	movs	r0, #0
 8013e74:	f7ec fcf2 	bl	800085c <__aeabi_ddiv>
 8013e78:	e016      	b.n	8013ea8 <__ieee754_pow+0x108>
 8013e7a:	2100      	movs	r1, #0
 8013e7c:	9100      	str	r1, [sp, #0]
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	d13b      	bne.n	8013efa <__ieee754_pow+0x15a>
 8013e82:	494f      	ldr	r1, [pc, #316]	; (8013fc0 <__ieee754_pow+0x220>)
 8013e84:	428e      	cmp	r6, r1
 8013e86:	d1ee      	bne.n	8013e66 <__ieee754_pow+0xc6>
 8013e88:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013e8c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013e90:	ea53 0308 	orrs.w	r3, r3, r8
 8013e94:	f000 8466 	beq.w	8014764 <__ieee754_pow+0x9c4>
 8013e98:	4b4d      	ldr	r3, [pc, #308]	; (8013fd0 <__ieee754_pow+0x230>)
 8013e9a:	429c      	cmp	r4, r3
 8013e9c:	dd0d      	ble.n	8013eba <__ieee754_pow+0x11a>
 8013e9e:	2f00      	cmp	r7, #0
 8013ea0:	f280 8464 	bge.w	801476c <__ieee754_pow+0x9cc>
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	2100      	movs	r1, #0
 8013ea8:	ec41 0b10 	vmov	d0, r0, r1
 8013eac:	b00d      	add	sp, #52	; 0x34
 8013eae:	ecbd 8b06 	vpop	{d8-d10}
 8013eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb6:	2102      	movs	r1, #2
 8013eb8:	e7e0      	b.n	8013e7c <__ieee754_pow+0xdc>
 8013eba:	2f00      	cmp	r7, #0
 8013ebc:	daf2      	bge.n	8013ea4 <__ieee754_pow+0x104>
 8013ebe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8013ec2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013ec6:	e7ef      	b.n	8013ea8 <__ieee754_pow+0x108>
 8013ec8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8013ecc:	d104      	bne.n	8013ed8 <__ieee754_pow+0x138>
 8013ece:	4610      	mov	r0, r2
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	f7ec fb99 	bl	8000608 <__aeabi_dmul>
 8013ed6:	e7e7      	b.n	8013ea8 <__ieee754_pow+0x108>
 8013ed8:	493e      	ldr	r1, [pc, #248]	; (8013fd4 <__ieee754_pow+0x234>)
 8013eda:	428f      	cmp	r7, r1
 8013edc:	d10d      	bne.n	8013efa <__ieee754_pow+0x15a>
 8013ede:	f1b9 0f00 	cmp.w	r9, #0
 8013ee2:	db0a      	blt.n	8013efa <__ieee754_pow+0x15a>
 8013ee4:	ec43 2b10 	vmov	d0, r2, r3
 8013ee8:	b00d      	add	sp, #52	; 0x34
 8013eea:	ecbd 8b06 	vpop	{d8-d10}
 8013eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef2:	f000 be83 	b.w	8014bfc <__ieee754_sqrt>
 8013ef6:	2100      	movs	r1, #0
 8013ef8:	9100      	str	r1, [sp, #0]
 8013efa:	ec43 2b10 	vmov	d0, r2, r3
 8013efe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013f02:	f001 fbf7 	bl	80156f4 <fabs>
 8013f06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f0a:	ec51 0b10 	vmov	r0, r1, d0
 8013f0e:	f1b8 0f00 	cmp.w	r8, #0
 8013f12:	d12a      	bne.n	8013f6a <__ieee754_pow+0x1ca>
 8013f14:	b12c      	cbz	r4, 8013f22 <__ieee754_pow+0x182>
 8013f16:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8013fcc <__ieee754_pow+0x22c>
 8013f1a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8013f1e:	45e6      	cmp	lr, ip
 8013f20:	d123      	bne.n	8013f6a <__ieee754_pow+0x1ca>
 8013f22:	2f00      	cmp	r7, #0
 8013f24:	da05      	bge.n	8013f32 <__ieee754_pow+0x192>
 8013f26:	4602      	mov	r2, r0
 8013f28:	460b      	mov	r3, r1
 8013f2a:	2000      	movs	r0, #0
 8013f2c:	4927      	ldr	r1, [pc, #156]	; (8013fcc <__ieee754_pow+0x22c>)
 8013f2e:	f7ec fc95 	bl	800085c <__aeabi_ddiv>
 8013f32:	f1b9 0f00 	cmp.w	r9, #0
 8013f36:	dab7      	bge.n	8013ea8 <__ieee754_pow+0x108>
 8013f38:	9b00      	ldr	r3, [sp, #0]
 8013f3a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013f3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013f42:	4323      	orrs	r3, r4
 8013f44:	d108      	bne.n	8013f58 <__ieee754_pow+0x1b8>
 8013f46:	4602      	mov	r2, r0
 8013f48:	460b      	mov	r3, r1
 8013f4a:	4610      	mov	r0, r2
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	f7ec f9a3 	bl	8000298 <__aeabi_dsub>
 8013f52:	4602      	mov	r2, r0
 8013f54:	460b      	mov	r3, r1
 8013f56:	e78d      	b.n	8013e74 <__ieee754_pow+0xd4>
 8013f58:	9b00      	ldr	r3, [sp, #0]
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d1a4      	bne.n	8013ea8 <__ieee754_pow+0x108>
 8013f5e:	4602      	mov	r2, r0
 8013f60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f64:	4610      	mov	r0, r2
 8013f66:	4619      	mov	r1, r3
 8013f68:	e79e      	b.n	8013ea8 <__ieee754_pow+0x108>
 8013f6a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8013f6e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8013f72:	950a      	str	r5, [sp, #40]	; 0x28
 8013f74:	9d00      	ldr	r5, [sp, #0]
 8013f76:	46ac      	mov	ip, r5
 8013f78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013f7a:	ea5c 0505 	orrs.w	r5, ip, r5
 8013f7e:	d0e4      	beq.n	8013f4a <__ieee754_pow+0x1aa>
 8013f80:	4b15      	ldr	r3, [pc, #84]	; (8013fd8 <__ieee754_pow+0x238>)
 8013f82:	429e      	cmp	r6, r3
 8013f84:	f340 80fc 	ble.w	8014180 <__ieee754_pow+0x3e0>
 8013f88:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013f8c:	429e      	cmp	r6, r3
 8013f8e:	4b10      	ldr	r3, [pc, #64]	; (8013fd0 <__ieee754_pow+0x230>)
 8013f90:	dd07      	ble.n	8013fa2 <__ieee754_pow+0x202>
 8013f92:	429c      	cmp	r4, r3
 8013f94:	dc0a      	bgt.n	8013fac <__ieee754_pow+0x20c>
 8013f96:	2f00      	cmp	r7, #0
 8013f98:	da84      	bge.n	8013ea4 <__ieee754_pow+0x104>
 8013f9a:	a307      	add	r3, pc, #28	; (adr r3, 8013fb8 <__ieee754_pow+0x218>)
 8013f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa0:	e795      	b.n	8013ece <__ieee754_pow+0x12e>
 8013fa2:	429c      	cmp	r4, r3
 8013fa4:	dbf7      	blt.n	8013f96 <__ieee754_pow+0x1f6>
 8013fa6:	4b09      	ldr	r3, [pc, #36]	; (8013fcc <__ieee754_pow+0x22c>)
 8013fa8:	429c      	cmp	r4, r3
 8013faa:	dd17      	ble.n	8013fdc <__ieee754_pow+0x23c>
 8013fac:	2f00      	cmp	r7, #0
 8013fae:	dcf4      	bgt.n	8013f9a <__ieee754_pow+0x1fa>
 8013fb0:	e778      	b.n	8013ea4 <__ieee754_pow+0x104>
 8013fb2:	bf00      	nop
 8013fb4:	f3af 8000 	nop.w
 8013fb8:	8800759c 	.word	0x8800759c
 8013fbc:	7e37e43c 	.word	0x7e37e43c
 8013fc0:	7ff00000 	.word	0x7ff00000
 8013fc4:	08016203 	.word	0x08016203
 8013fc8:	433fffff 	.word	0x433fffff
 8013fcc:	3ff00000 	.word	0x3ff00000
 8013fd0:	3fefffff 	.word	0x3fefffff
 8013fd4:	3fe00000 	.word	0x3fe00000
 8013fd8:	41e00000 	.word	0x41e00000
 8013fdc:	4b64      	ldr	r3, [pc, #400]	; (8014170 <__ieee754_pow+0x3d0>)
 8013fde:	2200      	movs	r2, #0
 8013fe0:	f7ec f95a 	bl	8000298 <__aeabi_dsub>
 8013fe4:	a356      	add	r3, pc, #344	; (adr r3, 8014140 <__ieee754_pow+0x3a0>)
 8013fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fea:	4604      	mov	r4, r0
 8013fec:	460d      	mov	r5, r1
 8013fee:	f7ec fb0b 	bl	8000608 <__aeabi_dmul>
 8013ff2:	a355      	add	r3, pc, #340	; (adr r3, 8014148 <__ieee754_pow+0x3a8>)
 8013ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff8:	4606      	mov	r6, r0
 8013ffa:	460f      	mov	r7, r1
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	4629      	mov	r1, r5
 8014000:	f7ec fb02 	bl	8000608 <__aeabi_dmul>
 8014004:	4b5b      	ldr	r3, [pc, #364]	; (8014174 <__ieee754_pow+0x3d4>)
 8014006:	4682      	mov	sl, r0
 8014008:	468b      	mov	fp, r1
 801400a:	2200      	movs	r2, #0
 801400c:	4620      	mov	r0, r4
 801400e:	4629      	mov	r1, r5
 8014010:	f7ec fafa 	bl	8000608 <__aeabi_dmul>
 8014014:	4602      	mov	r2, r0
 8014016:	460b      	mov	r3, r1
 8014018:	a14d      	add	r1, pc, #308	; (adr r1, 8014150 <__ieee754_pow+0x3b0>)
 801401a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801401e:	f7ec f93b 	bl	8000298 <__aeabi_dsub>
 8014022:	4622      	mov	r2, r4
 8014024:	462b      	mov	r3, r5
 8014026:	f7ec faef 	bl	8000608 <__aeabi_dmul>
 801402a:	4602      	mov	r2, r0
 801402c:	460b      	mov	r3, r1
 801402e:	2000      	movs	r0, #0
 8014030:	4951      	ldr	r1, [pc, #324]	; (8014178 <__ieee754_pow+0x3d8>)
 8014032:	f7ec f931 	bl	8000298 <__aeabi_dsub>
 8014036:	4622      	mov	r2, r4
 8014038:	4680      	mov	r8, r0
 801403a:	4689      	mov	r9, r1
 801403c:	462b      	mov	r3, r5
 801403e:	4620      	mov	r0, r4
 8014040:	4629      	mov	r1, r5
 8014042:	f7ec fae1 	bl	8000608 <__aeabi_dmul>
 8014046:	4602      	mov	r2, r0
 8014048:	460b      	mov	r3, r1
 801404a:	4640      	mov	r0, r8
 801404c:	4649      	mov	r1, r9
 801404e:	f7ec fadb 	bl	8000608 <__aeabi_dmul>
 8014052:	a341      	add	r3, pc, #260	; (adr r3, 8014158 <__ieee754_pow+0x3b8>)
 8014054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014058:	f7ec fad6 	bl	8000608 <__aeabi_dmul>
 801405c:	4602      	mov	r2, r0
 801405e:	460b      	mov	r3, r1
 8014060:	4650      	mov	r0, sl
 8014062:	4659      	mov	r1, fp
 8014064:	f7ec f918 	bl	8000298 <__aeabi_dsub>
 8014068:	4602      	mov	r2, r0
 801406a:	460b      	mov	r3, r1
 801406c:	4680      	mov	r8, r0
 801406e:	4689      	mov	r9, r1
 8014070:	4630      	mov	r0, r6
 8014072:	4639      	mov	r1, r7
 8014074:	f7ec f912 	bl	800029c <__adddf3>
 8014078:	2400      	movs	r4, #0
 801407a:	4632      	mov	r2, r6
 801407c:	463b      	mov	r3, r7
 801407e:	4620      	mov	r0, r4
 8014080:	460d      	mov	r5, r1
 8014082:	f7ec f909 	bl	8000298 <__aeabi_dsub>
 8014086:	4602      	mov	r2, r0
 8014088:	460b      	mov	r3, r1
 801408a:	4640      	mov	r0, r8
 801408c:	4649      	mov	r1, r9
 801408e:	f7ec f903 	bl	8000298 <__aeabi_dsub>
 8014092:	9b00      	ldr	r3, [sp, #0]
 8014094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014096:	3b01      	subs	r3, #1
 8014098:	4313      	orrs	r3, r2
 801409a:	4682      	mov	sl, r0
 801409c:	468b      	mov	fp, r1
 801409e:	f040 81f1 	bne.w	8014484 <__ieee754_pow+0x6e4>
 80140a2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014160 <__ieee754_pow+0x3c0>
 80140a6:	eeb0 8a47 	vmov.f32	s16, s14
 80140aa:	eef0 8a67 	vmov.f32	s17, s15
 80140ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80140b2:	2600      	movs	r6, #0
 80140b4:	4632      	mov	r2, r6
 80140b6:	463b      	mov	r3, r7
 80140b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140bc:	f7ec f8ec 	bl	8000298 <__aeabi_dsub>
 80140c0:	4622      	mov	r2, r4
 80140c2:	462b      	mov	r3, r5
 80140c4:	f7ec faa0 	bl	8000608 <__aeabi_dmul>
 80140c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140cc:	4680      	mov	r8, r0
 80140ce:	4689      	mov	r9, r1
 80140d0:	4650      	mov	r0, sl
 80140d2:	4659      	mov	r1, fp
 80140d4:	f7ec fa98 	bl	8000608 <__aeabi_dmul>
 80140d8:	4602      	mov	r2, r0
 80140da:	460b      	mov	r3, r1
 80140dc:	4640      	mov	r0, r8
 80140de:	4649      	mov	r1, r9
 80140e0:	f7ec f8dc 	bl	800029c <__adddf3>
 80140e4:	4632      	mov	r2, r6
 80140e6:	463b      	mov	r3, r7
 80140e8:	4680      	mov	r8, r0
 80140ea:	4689      	mov	r9, r1
 80140ec:	4620      	mov	r0, r4
 80140ee:	4629      	mov	r1, r5
 80140f0:	f7ec fa8a 	bl	8000608 <__aeabi_dmul>
 80140f4:	460b      	mov	r3, r1
 80140f6:	4604      	mov	r4, r0
 80140f8:	460d      	mov	r5, r1
 80140fa:	4602      	mov	r2, r0
 80140fc:	4649      	mov	r1, r9
 80140fe:	4640      	mov	r0, r8
 8014100:	f7ec f8cc 	bl	800029c <__adddf3>
 8014104:	4b1d      	ldr	r3, [pc, #116]	; (801417c <__ieee754_pow+0x3dc>)
 8014106:	4299      	cmp	r1, r3
 8014108:	ec45 4b19 	vmov	d9, r4, r5
 801410c:	4606      	mov	r6, r0
 801410e:	460f      	mov	r7, r1
 8014110:	468b      	mov	fp, r1
 8014112:	f340 82fe 	ble.w	8014712 <__ieee754_pow+0x972>
 8014116:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801411a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801411e:	4303      	orrs	r3, r0
 8014120:	f000 81f0 	beq.w	8014504 <__ieee754_pow+0x764>
 8014124:	a310      	add	r3, pc, #64	; (adr r3, 8014168 <__ieee754_pow+0x3c8>)
 8014126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412a:	ec51 0b18 	vmov	r0, r1, d8
 801412e:	f7ec fa6b 	bl	8000608 <__aeabi_dmul>
 8014132:	a30d      	add	r3, pc, #52	; (adr r3, 8014168 <__ieee754_pow+0x3c8>)
 8014134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014138:	e6cb      	b.n	8013ed2 <__ieee754_pow+0x132>
 801413a:	bf00      	nop
 801413c:	f3af 8000 	nop.w
 8014140:	60000000 	.word	0x60000000
 8014144:	3ff71547 	.word	0x3ff71547
 8014148:	f85ddf44 	.word	0xf85ddf44
 801414c:	3e54ae0b 	.word	0x3e54ae0b
 8014150:	55555555 	.word	0x55555555
 8014154:	3fd55555 	.word	0x3fd55555
 8014158:	652b82fe 	.word	0x652b82fe
 801415c:	3ff71547 	.word	0x3ff71547
 8014160:	00000000 	.word	0x00000000
 8014164:	bff00000 	.word	0xbff00000
 8014168:	8800759c 	.word	0x8800759c
 801416c:	7e37e43c 	.word	0x7e37e43c
 8014170:	3ff00000 	.word	0x3ff00000
 8014174:	3fd00000 	.word	0x3fd00000
 8014178:	3fe00000 	.word	0x3fe00000
 801417c:	408fffff 	.word	0x408fffff
 8014180:	4bd7      	ldr	r3, [pc, #860]	; (80144e0 <__ieee754_pow+0x740>)
 8014182:	ea03 0309 	and.w	r3, r3, r9
 8014186:	2200      	movs	r2, #0
 8014188:	b92b      	cbnz	r3, 8014196 <__ieee754_pow+0x3f6>
 801418a:	4bd6      	ldr	r3, [pc, #856]	; (80144e4 <__ieee754_pow+0x744>)
 801418c:	f7ec fa3c 	bl	8000608 <__aeabi_dmul>
 8014190:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014194:	460c      	mov	r4, r1
 8014196:	1523      	asrs	r3, r4, #20
 8014198:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801419c:	4413      	add	r3, r2
 801419e:	9309      	str	r3, [sp, #36]	; 0x24
 80141a0:	4bd1      	ldr	r3, [pc, #836]	; (80144e8 <__ieee754_pow+0x748>)
 80141a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80141a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80141aa:	429c      	cmp	r4, r3
 80141ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80141b0:	dd08      	ble.n	80141c4 <__ieee754_pow+0x424>
 80141b2:	4bce      	ldr	r3, [pc, #824]	; (80144ec <__ieee754_pow+0x74c>)
 80141b4:	429c      	cmp	r4, r3
 80141b6:	f340 8163 	ble.w	8014480 <__ieee754_pow+0x6e0>
 80141ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141bc:	3301      	adds	r3, #1
 80141be:	9309      	str	r3, [sp, #36]	; 0x24
 80141c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80141c4:	2400      	movs	r4, #0
 80141c6:	00e3      	lsls	r3, r4, #3
 80141c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80141ca:	4bc9      	ldr	r3, [pc, #804]	; (80144f0 <__ieee754_pow+0x750>)
 80141cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80141d0:	ed93 7b00 	vldr	d7, [r3]
 80141d4:	4629      	mov	r1, r5
 80141d6:	ec53 2b17 	vmov	r2, r3, d7
 80141da:	eeb0 8a47 	vmov.f32	s16, s14
 80141de:	eef0 8a67 	vmov.f32	s17, s15
 80141e2:	4682      	mov	sl, r0
 80141e4:	f7ec f858 	bl	8000298 <__aeabi_dsub>
 80141e8:	4652      	mov	r2, sl
 80141ea:	4606      	mov	r6, r0
 80141ec:	460f      	mov	r7, r1
 80141ee:	462b      	mov	r3, r5
 80141f0:	ec51 0b18 	vmov	r0, r1, d8
 80141f4:	f7ec f852 	bl	800029c <__adddf3>
 80141f8:	4602      	mov	r2, r0
 80141fa:	460b      	mov	r3, r1
 80141fc:	2000      	movs	r0, #0
 80141fe:	49bd      	ldr	r1, [pc, #756]	; (80144f4 <__ieee754_pow+0x754>)
 8014200:	f7ec fb2c 	bl	800085c <__aeabi_ddiv>
 8014204:	ec41 0b19 	vmov	d9, r0, r1
 8014208:	4602      	mov	r2, r0
 801420a:	460b      	mov	r3, r1
 801420c:	4630      	mov	r0, r6
 801420e:	4639      	mov	r1, r7
 8014210:	f7ec f9fa 	bl	8000608 <__aeabi_dmul>
 8014214:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014218:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801421c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014220:	2300      	movs	r3, #0
 8014222:	9304      	str	r3, [sp, #16]
 8014224:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014228:	46ab      	mov	fp, r5
 801422a:	106d      	asrs	r5, r5, #1
 801422c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014230:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014234:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014238:	2200      	movs	r2, #0
 801423a:	4640      	mov	r0, r8
 801423c:	4649      	mov	r1, r9
 801423e:	4614      	mov	r4, r2
 8014240:	461d      	mov	r5, r3
 8014242:	f7ec f9e1 	bl	8000608 <__aeabi_dmul>
 8014246:	4602      	mov	r2, r0
 8014248:	460b      	mov	r3, r1
 801424a:	4630      	mov	r0, r6
 801424c:	4639      	mov	r1, r7
 801424e:	f7ec f823 	bl	8000298 <__aeabi_dsub>
 8014252:	ec53 2b18 	vmov	r2, r3, d8
 8014256:	4606      	mov	r6, r0
 8014258:	460f      	mov	r7, r1
 801425a:	4620      	mov	r0, r4
 801425c:	4629      	mov	r1, r5
 801425e:	f7ec f81b 	bl	8000298 <__aeabi_dsub>
 8014262:	4602      	mov	r2, r0
 8014264:	460b      	mov	r3, r1
 8014266:	4650      	mov	r0, sl
 8014268:	4659      	mov	r1, fp
 801426a:	f7ec f815 	bl	8000298 <__aeabi_dsub>
 801426e:	4642      	mov	r2, r8
 8014270:	464b      	mov	r3, r9
 8014272:	f7ec f9c9 	bl	8000608 <__aeabi_dmul>
 8014276:	4602      	mov	r2, r0
 8014278:	460b      	mov	r3, r1
 801427a:	4630      	mov	r0, r6
 801427c:	4639      	mov	r1, r7
 801427e:	f7ec f80b 	bl	8000298 <__aeabi_dsub>
 8014282:	ec53 2b19 	vmov	r2, r3, d9
 8014286:	f7ec f9bf 	bl	8000608 <__aeabi_dmul>
 801428a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801428e:	ec41 0b18 	vmov	d8, r0, r1
 8014292:	4610      	mov	r0, r2
 8014294:	4619      	mov	r1, r3
 8014296:	f7ec f9b7 	bl	8000608 <__aeabi_dmul>
 801429a:	a37d      	add	r3, pc, #500	; (adr r3, 8014490 <__ieee754_pow+0x6f0>)
 801429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a0:	4604      	mov	r4, r0
 80142a2:	460d      	mov	r5, r1
 80142a4:	f7ec f9b0 	bl	8000608 <__aeabi_dmul>
 80142a8:	a37b      	add	r3, pc, #492	; (adr r3, 8014498 <__ieee754_pow+0x6f8>)
 80142aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ae:	f7eb fff5 	bl	800029c <__adddf3>
 80142b2:	4622      	mov	r2, r4
 80142b4:	462b      	mov	r3, r5
 80142b6:	f7ec f9a7 	bl	8000608 <__aeabi_dmul>
 80142ba:	a379      	add	r3, pc, #484	; (adr r3, 80144a0 <__ieee754_pow+0x700>)
 80142bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c0:	f7eb ffec 	bl	800029c <__adddf3>
 80142c4:	4622      	mov	r2, r4
 80142c6:	462b      	mov	r3, r5
 80142c8:	f7ec f99e 	bl	8000608 <__aeabi_dmul>
 80142cc:	a376      	add	r3, pc, #472	; (adr r3, 80144a8 <__ieee754_pow+0x708>)
 80142ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d2:	f7eb ffe3 	bl	800029c <__adddf3>
 80142d6:	4622      	mov	r2, r4
 80142d8:	462b      	mov	r3, r5
 80142da:	f7ec f995 	bl	8000608 <__aeabi_dmul>
 80142de:	a374      	add	r3, pc, #464	; (adr r3, 80144b0 <__ieee754_pow+0x710>)
 80142e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e4:	f7eb ffda 	bl	800029c <__adddf3>
 80142e8:	4622      	mov	r2, r4
 80142ea:	462b      	mov	r3, r5
 80142ec:	f7ec f98c 	bl	8000608 <__aeabi_dmul>
 80142f0:	a371      	add	r3, pc, #452	; (adr r3, 80144b8 <__ieee754_pow+0x718>)
 80142f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f6:	f7eb ffd1 	bl	800029c <__adddf3>
 80142fa:	4622      	mov	r2, r4
 80142fc:	4606      	mov	r6, r0
 80142fe:	460f      	mov	r7, r1
 8014300:	462b      	mov	r3, r5
 8014302:	4620      	mov	r0, r4
 8014304:	4629      	mov	r1, r5
 8014306:	f7ec f97f 	bl	8000608 <__aeabi_dmul>
 801430a:	4602      	mov	r2, r0
 801430c:	460b      	mov	r3, r1
 801430e:	4630      	mov	r0, r6
 8014310:	4639      	mov	r1, r7
 8014312:	f7ec f979 	bl	8000608 <__aeabi_dmul>
 8014316:	4642      	mov	r2, r8
 8014318:	4604      	mov	r4, r0
 801431a:	460d      	mov	r5, r1
 801431c:	464b      	mov	r3, r9
 801431e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014322:	f7eb ffbb 	bl	800029c <__adddf3>
 8014326:	ec53 2b18 	vmov	r2, r3, d8
 801432a:	f7ec f96d 	bl	8000608 <__aeabi_dmul>
 801432e:	4622      	mov	r2, r4
 8014330:	462b      	mov	r3, r5
 8014332:	f7eb ffb3 	bl	800029c <__adddf3>
 8014336:	4642      	mov	r2, r8
 8014338:	4682      	mov	sl, r0
 801433a:	468b      	mov	fp, r1
 801433c:	464b      	mov	r3, r9
 801433e:	4640      	mov	r0, r8
 8014340:	4649      	mov	r1, r9
 8014342:	f7ec f961 	bl	8000608 <__aeabi_dmul>
 8014346:	4b6c      	ldr	r3, [pc, #432]	; (80144f8 <__ieee754_pow+0x758>)
 8014348:	2200      	movs	r2, #0
 801434a:	4606      	mov	r6, r0
 801434c:	460f      	mov	r7, r1
 801434e:	f7eb ffa5 	bl	800029c <__adddf3>
 8014352:	4652      	mov	r2, sl
 8014354:	465b      	mov	r3, fp
 8014356:	f7eb ffa1 	bl	800029c <__adddf3>
 801435a:	9c04      	ldr	r4, [sp, #16]
 801435c:	460d      	mov	r5, r1
 801435e:	4622      	mov	r2, r4
 8014360:	460b      	mov	r3, r1
 8014362:	4640      	mov	r0, r8
 8014364:	4649      	mov	r1, r9
 8014366:	f7ec f94f 	bl	8000608 <__aeabi_dmul>
 801436a:	4b63      	ldr	r3, [pc, #396]	; (80144f8 <__ieee754_pow+0x758>)
 801436c:	4680      	mov	r8, r0
 801436e:	4689      	mov	r9, r1
 8014370:	2200      	movs	r2, #0
 8014372:	4620      	mov	r0, r4
 8014374:	4629      	mov	r1, r5
 8014376:	f7eb ff8f 	bl	8000298 <__aeabi_dsub>
 801437a:	4632      	mov	r2, r6
 801437c:	463b      	mov	r3, r7
 801437e:	f7eb ff8b 	bl	8000298 <__aeabi_dsub>
 8014382:	4602      	mov	r2, r0
 8014384:	460b      	mov	r3, r1
 8014386:	4650      	mov	r0, sl
 8014388:	4659      	mov	r1, fp
 801438a:	f7eb ff85 	bl	8000298 <__aeabi_dsub>
 801438e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014392:	f7ec f939 	bl	8000608 <__aeabi_dmul>
 8014396:	4622      	mov	r2, r4
 8014398:	4606      	mov	r6, r0
 801439a:	460f      	mov	r7, r1
 801439c:	462b      	mov	r3, r5
 801439e:	ec51 0b18 	vmov	r0, r1, d8
 80143a2:	f7ec f931 	bl	8000608 <__aeabi_dmul>
 80143a6:	4602      	mov	r2, r0
 80143a8:	460b      	mov	r3, r1
 80143aa:	4630      	mov	r0, r6
 80143ac:	4639      	mov	r1, r7
 80143ae:	f7eb ff75 	bl	800029c <__adddf3>
 80143b2:	4606      	mov	r6, r0
 80143b4:	460f      	mov	r7, r1
 80143b6:	4602      	mov	r2, r0
 80143b8:	460b      	mov	r3, r1
 80143ba:	4640      	mov	r0, r8
 80143bc:	4649      	mov	r1, r9
 80143be:	f7eb ff6d 	bl	800029c <__adddf3>
 80143c2:	9c04      	ldr	r4, [sp, #16]
 80143c4:	a33e      	add	r3, pc, #248	; (adr r3, 80144c0 <__ieee754_pow+0x720>)
 80143c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ca:	4620      	mov	r0, r4
 80143cc:	460d      	mov	r5, r1
 80143ce:	f7ec f91b 	bl	8000608 <__aeabi_dmul>
 80143d2:	4642      	mov	r2, r8
 80143d4:	ec41 0b18 	vmov	d8, r0, r1
 80143d8:	464b      	mov	r3, r9
 80143da:	4620      	mov	r0, r4
 80143dc:	4629      	mov	r1, r5
 80143de:	f7eb ff5b 	bl	8000298 <__aeabi_dsub>
 80143e2:	4602      	mov	r2, r0
 80143e4:	460b      	mov	r3, r1
 80143e6:	4630      	mov	r0, r6
 80143e8:	4639      	mov	r1, r7
 80143ea:	f7eb ff55 	bl	8000298 <__aeabi_dsub>
 80143ee:	a336      	add	r3, pc, #216	; (adr r3, 80144c8 <__ieee754_pow+0x728>)
 80143f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f4:	f7ec f908 	bl	8000608 <__aeabi_dmul>
 80143f8:	a335      	add	r3, pc, #212	; (adr r3, 80144d0 <__ieee754_pow+0x730>)
 80143fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fe:	4606      	mov	r6, r0
 8014400:	460f      	mov	r7, r1
 8014402:	4620      	mov	r0, r4
 8014404:	4629      	mov	r1, r5
 8014406:	f7ec f8ff 	bl	8000608 <__aeabi_dmul>
 801440a:	4602      	mov	r2, r0
 801440c:	460b      	mov	r3, r1
 801440e:	4630      	mov	r0, r6
 8014410:	4639      	mov	r1, r7
 8014412:	f7eb ff43 	bl	800029c <__adddf3>
 8014416:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014418:	4b38      	ldr	r3, [pc, #224]	; (80144fc <__ieee754_pow+0x75c>)
 801441a:	4413      	add	r3, r2
 801441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014420:	f7eb ff3c 	bl	800029c <__adddf3>
 8014424:	4682      	mov	sl, r0
 8014426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014428:	468b      	mov	fp, r1
 801442a:	f7ec f883 	bl	8000534 <__aeabi_i2d>
 801442e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014430:	4b33      	ldr	r3, [pc, #204]	; (8014500 <__ieee754_pow+0x760>)
 8014432:	4413      	add	r3, r2
 8014434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014438:	4606      	mov	r6, r0
 801443a:	460f      	mov	r7, r1
 801443c:	4652      	mov	r2, sl
 801443e:	465b      	mov	r3, fp
 8014440:	ec51 0b18 	vmov	r0, r1, d8
 8014444:	f7eb ff2a 	bl	800029c <__adddf3>
 8014448:	4642      	mov	r2, r8
 801444a:	464b      	mov	r3, r9
 801444c:	f7eb ff26 	bl	800029c <__adddf3>
 8014450:	4632      	mov	r2, r6
 8014452:	463b      	mov	r3, r7
 8014454:	f7eb ff22 	bl	800029c <__adddf3>
 8014458:	9c04      	ldr	r4, [sp, #16]
 801445a:	4632      	mov	r2, r6
 801445c:	463b      	mov	r3, r7
 801445e:	4620      	mov	r0, r4
 8014460:	460d      	mov	r5, r1
 8014462:	f7eb ff19 	bl	8000298 <__aeabi_dsub>
 8014466:	4642      	mov	r2, r8
 8014468:	464b      	mov	r3, r9
 801446a:	f7eb ff15 	bl	8000298 <__aeabi_dsub>
 801446e:	ec53 2b18 	vmov	r2, r3, d8
 8014472:	f7eb ff11 	bl	8000298 <__aeabi_dsub>
 8014476:	4602      	mov	r2, r0
 8014478:	460b      	mov	r3, r1
 801447a:	4650      	mov	r0, sl
 801447c:	4659      	mov	r1, fp
 801447e:	e606      	b.n	801408e <__ieee754_pow+0x2ee>
 8014480:	2401      	movs	r4, #1
 8014482:	e6a0      	b.n	80141c6 <__ieee754_pow+0x426>
 8014484:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80144d8 <__ieee754_pow+0x738>
 8014488:	e60d      	b.n	80140a6 <__ieee754_pow+0x306>
 801448a:	bf00      	nop
 801448c:	f3af 8000 	nop.w
 8014490:	4a454eef 	.word	0x4a454eef
 8014494:	3fca7e28 	.word	0x3fca7e28
 8014498:	93c9db65 	.word	0x93c9db65
 801449c:	3fcd864a 	.word	0x3fcd864a
 80144a0:	a91d4101 	.word	0xa91d4101
 80144a4:	3fd17460 	.word	0x3fd17460
 80144a8:	518f264d 	.word	0x518f264d
 80144ac:	3fd55555 	.word	0x3fd55555
 80144b0:	db6fabff 	.word	0xdb6fabff
 80144b4:	3fdb6db6 	.word	0x3fdb6db6
 80144b8:	33333303 	.word	0x33333303
 80144bc:	3fe33333 	.word	0x3fe33333
 80144c0:	e0000000 	.word	0xe0000000
 80144c4:	3feec709 	.word	0x3feec709
 80144c8:	dc3a03fd 	.word	0xdc3a03fd
 80144cc:	3feec709 	.word	0x3feec709
 80144d0:	145b01f5 	.word	0x145b01f5
 80144d4:	be3e2fe0 	.word	0xbe3e2fe0
 80144d8:	00000000 	.word	0x00000000
 80144dc:	3ff00000 	.word	0x3ff00000
 80144e0:	7ff00000 	.word	0x7ff00000
 80144e4:	43400000 	.word	0x43400000
 80144e8:	0003988e 	.word	0x0003988e
 80144ec:	000bb679 	.word	0x000bb679
 80144f0:	080165d0 	.word	0x080165d0
 80144f4:	3ff00000 	.word	0x3ff00000
 80144f8:	40080000 	.word	0x40080000
 80144fc:	080165f0 	.word	0x080165f0
 8014500:	080165e0 	.word	0x080165e0
 8014504:	a3b5      	add	r3, pc, #724	; (adr r3, 80147dc <__ieee754_pow+0xa3c>)
 8014506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801450a:	4640      	mov	r0, r8
 801450c:	4649      	mov	r1, r9
 801450e:	f7eb fec5 	bl	800029c <__adddf3>
 8014512:	4622      	mov	r2, r4
 8014514:	ec41 0b1a 	vmov	d10, r0, r1
 8014518:	462b      	mov	r3, r5
 801451a:	4630      	mov	r0, r6
 801451c:	4639      	mov	r1, r7
 801451e:	f7eb febb 	bl	8000298 <__aeabi_dsub>
 8014522:	4602      	mov	r2, r0
 8014524:	460b      	mov	r3, r1
 8014526:	ec51 0b1a 	vmov	r0, r1, d10
 801452a:	f7ec fafd 	bl	8000b28 <__aeabi_dcmpgt>
 801452e:	2800      	cmp	r0, #0
 8014530:	f47f adf8 	bne.w	8014124 <__ieee754_pow+0x384>
 8014534:	4aa4      	ldr	r2, [pc, #656]	; (80147c8 <__ieee754_pow+0xa28>)
 8014536:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801453a:	4293      	cmp	r3, r2
 801453c:	f340 810b 	ble.w	8014756 <__ieee754_pow+0x9b6>
 8014540:	151b      	asrs	r3, r3, #20
 8014542:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014546:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801454a:	fa4a f303 	asr.w	r3, sl, r3
 801454e:	445b      	add	r3, fp
 8014550:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014554:	4e9d      	ldr	r6, [pc, #628]	; (80147cc <__ieee754_pow+0xa2c>)
 8014556:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801455a:	4116      	asrs	r6, r2
 801455c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014560:	2000      	movs	r0, #0
 8014562:	ea23 0106 	bic.w	r1, r3, r6
 8014566:	f1c2 0214 	rsb	r2, r2, #20
 801456a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801456e:	fa4a fa02 	asr.w	sl, sl, r2
 8014572:	f1bb 0f00 	cmp.w	fp, #0
 8014576:	4602      	mov	r2, r0
 8014578:	460b      	mov	r3, r1
 801457a:	4620      	mov	r0, r4
 801457c:	4629      	mov	r1, r5
 801457e:	bfb8      	it	lt
 8014580:	f1ca 0a00 	rsblt	sl, sl, #0
 8014584:	f7eb fe88 	bl	8000298 <__aeabi_dsub>
 8014588:	ec41 0b19 	vmov	d9, r0, r1
 801458c:	4642      	mov	r2, r8
 801458e:	464b      	mov	r3, r9
 8014590:	ec51 0b19 	vmov	r0, r1, d9
 8014594:	f7eb fe82 	bl	800029c <__adddf3>
 8014598:	2400      	movs	r4, #0
 801459a:	a379      	add	r3, pc, #484	; (adr r3, 8014780 <__ieee754_pow+0x9e0>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	4620      	mov	r0, r4
 80145a2:	460d      	mov	r5, r1
 80145a4:	f7ec f830 	bl	8000608 <__aeabi_dmul>
 80145a8:	ec53 2b19 	vmov	r2, r3, d9
 80145ac:	4606      	mov	r6, r0
 80145ae:	460f      	mov	r7, r1
 80145b0:	4620      	mov	r0, r4
 80145b2:	4629      	mov	r1, r5
 80145b4:	f7eb fe70 	bl	8000298 <__aeabi_dsub>
 80145b8:	4602      	mov	r2, r0
 80145ba:	460b      	mov	r3, r1
 80145bc:	4640      	mov	r0, r8
 80145be:	4649      	mov	r1, r9
 80145c0:	f7eb fe6a 	bl	8000298 <__aeabi_dsub>
 80145c4:	a370      	add	r3, pc, #448	; (adr r3, 8014788 <__ieee754_pow+0x9e8>)
 80145c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ca:	f7ec f81d 	bl	8000608 <__aeabi_dmul>
 80145ce:	a370      	add	r3, pc, #448	; (adr r3, 8014790 <__ieee754_pow+0x9f0>)
 80145d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d4:	4680      	mov	r8, r0
 80145d6:	4689      	mov	r9, r1
 80145d8:	4620      	mov	r0, r4
 80145da:	4629      	mov	r1, r5
 80145dc:	f7ec f814 	bl	8000608 <__aeabi_dmul>
 80145e0:	4602      	mov	r2, r0
 80145e2:	460b      	mov	r3, r1
 80145e4:	4640      	mov	r0, r8
 80145e6:	4649      	mov	r1, r9
 80145e8:	f7eb fe58 	bl	800029c <__adddf3>
 80145ec:	4604      	mov	r4, r0
 80145ee:	460d      	mov	r5, r1
 80145f0:	4602      	mov	r2, r0
 80145f2:	460b      	mov	r3, r1
 80145f4:	4630      	mov	r0, r6
 80145f6:	4639      	mov	r1, r7
 80145f8:	f7eb fe50 	bl	800029c <__adddf3>
 80145fc:	4632      	mov	r2, r6
 80145fe:	463b      	mov	r3, r7
 8014600:	4680      	mov	r8, r0
 8014602:	4689      	mov	r9, r1
 8014604:	f7eb fe48 	bl	8000298 <__aeabi_dsub>
 8014608:	4602      	mov	r2, r0
 801460a:	460b      	mov	r3, r1
 801460c:	4620      	mov	r0, r4
 801460e:	4629      	mov	r1, r5
 8014610:	f7eb fe42 	bl	8000298 <__aeabi_dsub>
 8014614:	4642      	mov	r2, r8
 8014616:	4606      	mov	r6, r0
 8014618:	460f      	mov	r7, r1
 801461a:	464b      	mov	r3, r9
 801461c:	4640      	mov	r0, r8
 801461e:	4649      	mov	r1, r9
 8014620:	f7eb fff2 	bl	8000608 <__aeabi_dmul>
 8014624:	a35c      	add	r3, pc, #368	; (adr r3, 8014798 <__ieee754_pow+0x9f8>)
 8014626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462a:	4604      	mov	r4, r0
 801462c:	460d      	mov	r5, r1
 801462e:	f7eb ffeb 	bl	8000608 <__aeabi_dmul>
 8014632:	a35b      	add	r3, pc, #364	; (adr r3, 80147a0 <__ieee754_pow+0xa00>)
 8014634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014638:	f7eb fe2e 	bl	8000298 <__aeabi_dsub>
 801463c:	4622      	mov	r2, r4
 801463e:	462b      	mov	r3, r5
 8014640:	f7eb ffe2 	bl	8000608 <__aeabi_dmul>
 8014644:	a358      	add	r3, pc, #352	; (adr r3, 80147a8 <__ieee754_pow+0xa08>)
 8014646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464a:	f7eb fe27 	bl	800029c <__adddf3>
 801464e:	4622      	mov	r2, r4
 8014650:	462b      	mov	r3, r5
 8014652:	f7eb ffd9 	bl	8000608 <__aeabi_dmul>
 8014656:	a356      	add	r3, pc, #344	; (adr r3, 80147b0 <__ieee754_pow+0xa10>)
 8014658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465c:	f7eb fe1c 	bl	8000298 <__aeabi_dsub>
 8014660:	4622      	mov	r2, r4
 8014662:	462b      	mov	r3, r5
 8014664:	f7eb ffd0 	bl	8000608 <__aeabi_dmul>
 8014668:	a353      	add	r3, pc, #332	; (adr r3, 80147b8 <__ieee754_pow+0xa18>)
 801466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466e:	f7eb fe15 	bl	800029c <__adddf3>
 8014672:	4622      	mov	r2, r4
 8014674:	462b      	mov	r3, r5
 8014676:	f7eb ffc7 	bl	8000608 <__aeabi_dmul>
 801467a:	4602      	mov	r2, r0
 801467c:	460b      	mov	r3, r1
 801467e:	4640      	mov	r0, r8
 8014680:	4649      	mov	r1, r9
 8014682:	f7eb fe09 	bl	8000298 <__aeabi_dsub>
 8014686:	4604      	mov	r4, r0
 8014688:	460d      	mov	r5, r1
 801468a:	4602      	mov	r2, r0
 801468c:	460b      	mov	r3, r1
 801468e:	4640      	mov	r0, r8
 8014690:	4649      	mov	r1, r9
 8014692:	f7eb ffb9 	bl	8000608 <__aeabi_dmul>
 8014696:	2200      	movs	r2, #0
 8014698:	ec41 0b19 	vmov	d9, r0, r1
 801469c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80146a0:	4620      	mov	r0, r4
 80146a2:	4629      	mov	r1, r5
 80146a4:	f7eb fdf8 	bl	8000298 <__aeabi_dsub>
 80146a8:	4602      	mov	r2, r0
 80146aa:	460b      	mov	r3, r1
 80146ac:	ec51 0b19 	vmov	r0, r1, d9
 80146b0:	f7ec f8d4 	bl	800085c <__aeabi_ddiv>
 80146b4:	4632      	mov	r2, r6
 80146b6:	4604      	mov	r4, r0
 80146b8:	460d      	mov	r5, r1
 80146ba:	463b      	mov	r3, r7
 80146bc:	4640      	mov	r0, r8
 80146be:	4649      	mov	r1, r9
 80146c0:	f7eb ffa2 	bl	8000608 <__aeabi_dmul>
 80146c4:	4632      	mov	r2, r6
 80146c6:	463b      	mov	r3, r7
 80146c8:	f7eb fde8 	bl	800029c <__adddf3>
 80146cc:	4602      	mov	r2, r0
 80146ce:	460b      	mov	r3, r1
 80146d0:	4620      	mov	r0, r4
 80146d2:	4629      	mov	r1, r5
 80146d4:	f7eb fde0 	bl	8000298 <__aeabi_dsub>
 80146d8:	4642      	mov	r2, r8
 80146da:	464b      	mov	r3, r9
 80146dc:	f7eb fddc 	bl	8000298 <__aeabi_dsub>
 80146e0:	460b      	mov	r3, r1
 80146e2:	4602      	mov	r2, r0
 80146e4:	493a      	ldr	r1, [pc, #232]	; (80147d0 <__ieee754_pow+0xa30>)
 80146e6:	2000      	movs	r0, #0
 80146e8:	f7eb fdd6 	bl	8000298 <__aeabi_dsub>
 80146ec:	e9cd 0100 	strd	r0, r1, [sp]
 80146f0:	9b01      	ldr	r3, [sp, #4]
 80146f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80146f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80146fa:	da2f      	bge.n	801475c <__ieee754_pow+0x9bc>
 80146fc:	4650      	mov	r0, sl
 80146fe:	ed9d 0b00 	vldr	d0, [sp]
 8014702:	f001 f919 	bl	8015938 <scalbn>
 8014706:	ec51 0b10 	vmov	r0, r1, d0
 801470a:	ec53 2b18 	vmov	r2, r3, d8
 801470e:	f7ff bbe0 	b.w	8013ed2 <__ieee754_pow+0x132>
 8014712:	4b30      	ldr	r3, [pc, #192]	; (80147d4 <__ieee754_pow+0xa34>)
 8014714:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014718:	429e      	cmp	r6, r3
 801471a:	f77f af0b 	ble.w	8014534 <__ieee754_pow+0x794>
 801471e:	4b2e      	ldr	r3, [pc, #184]	; (80147d8 <__ieee754_pow+0xa38>)
 8014720:	440b      	add	r3, r1
 8014722:	4303      	orrs	r3, r0
 8014724:	d00b      	beq.n	801473e <__ieee754_pow+0x99e>
 8014726:	a326      	add	r3, pc, #152	; (adr r3, 80147c0 <__ieee754_pow+0xa20>)
 8014728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801472c:	ec51 0b18 	vmov	r0, r1, d8
 8014730:	f7eb ff6a 	bl	8000608 <__aeabi_dmul>
 8014734:	a322      	add	r3, pc, #136	; (adr r3, 80147c0 <__ieee754_pow+0xa20>)
 8014736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473a:	f7ff bbca 	b.w	8013ed2 <__ieee754_pow+0x132>
 801473e:	4622      	mov	r2, r4
 8014740:	462b      	mov	r3, r5
 8014742:	f7eb fda9 	bl	8000298 <__aeabi_dsub>
 8014746:	4642      	mov	r2, r8
 8014748:	464b      	mov	r3, r9
 801474a:	f7ec f9e3 	bl	8000b14 <__aeabi_dcmpge>
 801474e:	2800      	cmp	r0, #0
 8014750:	f43f aef0 	beq.w	8014534 <__ieee754_pow+0x794>
 8014754:	e7e7      	b.n	8014726 <__ieee754_pow+0x986>
 8014756:	f04f 0a00 	mov.w	sl, #0
 801475a:	e717      	b.n	801458c <__ieee754_pow+0x7ec>
 801475c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014760:	4619      	mov	r1, r3
 8014762:	e7d2      	b.n	801470a <__ieee754_pow+0x96a>
 8014764:	491a      	ldr	r1, [pc, #104]	; (80147d0 <__ieee754_pow+0xa30>)
 8014766:	2000      	movs	r0, #0
 8014768:	f7ff bb9e 	b.w	8013ea8 <__ieee754_pow+0x108>
 801476c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014770:	f7ff bb9a 	b.w	8013ea8 <__ieee754_pow+0x108>
 8014774:	9000      	str	r0, [sp, #0]
 8014776:	f7ff bb76 	b.w	8013e66 <__ieee754_pow+0xc6>
 801477a:	2100      	movs	r1, #0
 801477c:	f7ff bb60 	b.w	8013e40 <__ieee754_pow+0xa0>
 8014780:	00000000 	.word	0x00000000
 8014784:	3fe62e43 	.word	0x3fe62e43
 8014788:	fefa39ef 	.word	0xfefa39ef
 801478c:	3fe62e42 	.word	0x3fe62e42
 8014790:	0ca86c39 	.word	0x0ca86c39
 8014794:	be205c61 	.word	0xbe205c61
 8014798:	72bea4d0 	.word	0x72bea4d0
 801479c:	3e663769 	.word	0x3e663769
 80147a0:	c5d26bf1 	.word	0xc5d26bf1
 80147a4:	3ebbbd41 	.word	0x3ebbbd41
 80147a8:	af25de2c 	.word	0xaf25de2c
 80147ac:	3f11566a 	.word	0x3f11566a
 80147b0:	16bebd93 	.word	0x16bebd93
 80147b4:	3f66c16c 	.word	0x3f66c16c
 80147b8:	5555553e 	.word	0x5555553e
 80147bc:	3fc55555 	.word	0x3fc55555
 80147c0:	c2f8f359 	.word	0xc2f8f359
 80147c4:	01a56e1f 	.word	0x01a56e1f
 80147c8:	3fe00000 	.word	0x3fe00000
 80147cc:	000fffff 	.word	0x000fffff
 80147d0:	3ff00000 	.word	0x3ff00000
 80147d4:	4090cbff 	.word	0x4090cbff
 80147d8:	3f6f3400 	.word	0x3f6f3400
 80147dc:	652b82fe 	.word	0x652b82fe
 80147e0:	3c971547 	.word	0x3c971547
 80147e4:	00000000 	.word	0x00000000

080147e8 <__ieee754_rem_pio2>:
 80147e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ec:	ed2d 8b02 	vpush	{d8}
 80147f0:	ec55 4b10 	vmov	r4, r5, d0
 80147f4:	4bca      	ldr	r3, [pc, #808]	; (8014b20 <__ieee754_rem_pio2+0x338>)
 80147f6:	b08b      	sub	sp, #44	; 0x2c
 80147f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80147fc:	4598      	cmp	r8, r3
 80147fe:	4682      	mov	sl, r0
 8014800:	9502      	str	r5, [sp, #8]
 8014802:	dc08      	bgt.n	8014816 <__ieee754_rem_pio2+0x2e>
 8014804:	2200      	movs	r2, #0
 8014806:	2300      	movs	r3, #0
 8014808:	ed80 0b00 	vstr	d0, [r0]
 801480c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014810:	f04f 0b00 	mov.w	fp, #0
 8014814:	e028      	b.n	8014868 <__ieee754_rem_pio2+0x80>
 8014816:	4bc3      	ldr	r3, [pc, #780]	; (8014b24 <__ieee754_rem_pio2+0x33c>)
 8014818:	4598      	cmp	r8, r3
 801481a:	dc78      	bgt.n	801490e <__ieee754_rem_pio2+0x126>
 801481c:	9b02      	ldr	r3, [sp, #8]
 801481e:	4ec2      	ldr	r6, [pc, #776]	; (8014b28 <__ieee754_rem_pio2+0x340>)
 8014820:	2b00      	cmp	r3, #0
 8014822:	ee10 0a10 	vmov	r0, s0
 8014826:	a3b0      	add	r3, pc, #704	; (adr r3, 8014ae8 <__ieee754_rem_pio2+0x300>)
 8014828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801482c:	4629      	mov	r1, r5
 801482e:	dd39      	ble.n	80148a4 <__ieee754_rem_pio2+0xbc>
 8014830:	f7eb fd32 	bl	8000298 <__aeabi_dsub>
 8014834:	45b0      	cmp	r8, r6
 8014836:	4604      	mov	r4, r0
 8014838:	460d      	mov	r5, r1
 801483a:	d01b      	beq.n	8014874 <__ieee754_rem_pio2+0x8c>
 801483c:	a3ac      	add	r3, pc, #688	; (adr r3, 8014af0 <__ieee754_rem_pio2+0x308>)
 801483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014842:	f7eb fd29 	bl	8000298 <__aeabi_dsub>
 8014846:	4602      	mov	r2, r0
 8014848:	460b      	mov	r3, r1
 801484a:	e9ca 2300 	strd	r2, r3, [sl]
 801484e:	4620      	mov	r0, r4
 8014850:	4629      	mov	r1, r5
 8014852:	f7eb fd21 	bl	8000298 <__aeabi_dsub>
 8014856:	a3a6      	add	r3, pc, #664	; (adr r3, 8014af0 <__ieee754_rem_pio2+0x308>)
 8014858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485c:	f7eb fd1c 	bl	8000298 <__aeabi_dsub>
 8014860:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014864:	f04f 0b01 	mov.w	fp, #1
 8014868:	4658      	mov	r0, fp
 801486a:	b00b      	add	sp, #44	; 0x2c
 801486c:	ecbd 8b02 	vpop	{d8}
 8014870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014874:	a3a0      	add	r3, pc, #640	; (adr r3, 8014af8 <__ieee754_rem_pio2+0x310>)
 8014876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487a:	f7eb fd0d 	bl	8000298 <__aeabi_dsub>
 801487e:	a3a0      	add	r3, pc, #640	; (adr r3, 8014b00 <__ieee754_rem_pio2+0x318>)
 8014880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014884:	4604      	mov	r4, r0
 8014886:	460d      	mov	r5, r1
 8014888:	f7eb fd06 	bl	8000298 <__aeabi_dsub>
 801488c:	4602      	mov	r2, r0
 801488e:	460b      	mov	r3, r1
 8014890:	e9ca 2300 	strd	r2, r3, [sl]
 8014894:	4620      	mov	r0, r4
 8014896:	4629      	mov	r1, r5
 8014898:	f7eb fcfe 	bl	8000298 <__aeabi_dsub>
 801489c:	a398      	add	r3, pc, #608	; (adr r3, 8014b00 <__ieee754_rem_pio2+0x318>)
 801489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a2:	e7db      	b.n	801485c <__ieee754_rem_pio2+0x74>
 80148a4:	f7eb fcfa 	bl	800029c <__adddf3>
 80148a8:	45b0      	cmp	r8, r6
 80148aa:	4604      	mov	r4, r0
 80148ac:	460d      	mov	r5, r1
 80148ae:	d016      	beq.n	80148de <__ieee754_rem_pio2+0xf6>
 80148b0:	a38f      	add	r3, pc, #572	; (adr r3, 8014af0 <__ieee754_rem_pio2+0x308>)
 80148b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b6:	f7eb fcf1 	bl	800029c <__adddf3>
 80148ba:	4602      	mov	r2, r0
 80148bc:	460b      	mov	r3, r1
 80148be:	e9ca 2300 	strd	r2, r3, [sl]
 80148c2:	4620      	mov	r0, r4
 80148c4:	4629      	mov	r1, r5
 80148c6:	f7eb fce7 	bl	8000298 <__aeabi_dsub>
 80148ca:	a389      	add	r3, pc, #548	; (adr r3, 8014af0 <__ieee754_rem_pio2+0x308>)
 80148cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d0:	f7eb fce4 	bl	800029c <__adddf3>
 80148d4:	f04f 3bff 	mov.w	fp, #4294967295
 80148d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80148dc:	e7c4      	b.n	8014868 <__ieee754_rem_pio2+0x80>
 80148de:	a386      	add	r3, pc, #536	; (adr r3, 8014af8 <__ieee754_rem_pio2+0x310>)
 80148e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e4:	f7eb fcda 	bl	800029c <__adddf3>
 80148e8:	a385      	add	r3, pc, #532	; (adr r3, 8014b00 <__ieee754_rem_pio2+0x318>)
 80148ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ee:	4604      	mov	r4, r0
 80148f0:	460d      	mov	r5, r1
 80148f2:	f7eb fcd3 	bl	800029c <__adddf3>
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	e9ca 2300 	strd	r2, r3, [sl]
 80148fe:	4620      	mov	r0, r4
 8014900:	4629      	mov	r1, r5
 8014902:	f7eb fcc9 	bl	8000298 <__aeabi_dsub>
 8014906:	a37e      	add	r3, pc, #504	; (adr r3, 8014b00 <__ieee754_rem_pio2+0x318>)
 8014908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490c:	e7e0      	b.n	80148d0 <__ieee754_rem_pio2+0xe8>
 801490e:	4b87      	ldr	r3, [pc, #540]	; (8014b2c <__ieee754_rem_pio2+0x344>)
 8014910:	4598      	cmp	r8, r3
 8014912:	f300 80d9 	bgt.w	8014ac8 <__ieee754_rem_pio2+0x2e0>
 8014916:	f000 feed 	bl	80156f4 <fabs>
 801491a:	ec55 4b10 	vmov	r4, r5, d0
 801491e:	ee10 0a10 	vmov	r0, s0
 8014922:	a379      	add	r3, pc, #484	; (adr r3, 8014b08 <__ieee754_rem_pio2+0x320>)
 8014924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014928:	4629      	mov	r1, r5
 801492a:	f7eb fe6d 	bl	8000608 <__aeabi_dmul>
 801492e:	4b80      	ldr	r3, [pc, #512]	; (8014b30 <__ieee754_rem_pio2+0x348>)
 8014930:	2200      	movs	r2, #0
 8014932:	f7eb fcb3 	bl	800029c <__adddf3>
 8014936:	f7ec f917 	bl	8000b68 <__aeabi_d2iz>
 801493a:	4683      	mov	fp, r0
 801493c:	f7eb fdfa 	bl	8000534 <__aeabi_i2d>
 8014940:	4602      	mov	r2, r0
 8014942:	460b      	mov	r3, r1
 8014944:	ec43 2b18 	vmov	d8, r2, r3
 8014948:	a367      	add	r3, pc, #412	; (adr r3, 8014ae8 <__ieee754_rem_pio2+0x300>)
 801494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494e:	f7eb fe5b 	bl	8000608 <__aeabi_dmul>
 8014952:	4602      	mov	r2, r0
 8014954:	460b      	mov	r3, r1
 8014956:	4620      	mov	r0, r4
 8014958:	4629      	mov	r1, r5
 801495a:	f7eb fc9d 	bl	8000298 <__aeabi_dsub>
 801495e:	a364      	add	r3, pc, #400	; (adr r3, 8014af0 <__ieee754_rem_pio2+0x308>)
 8014960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014964:	4606      	mov	r6, r0
 8014966:	460f      	mov	r7, r1
 8014968:	ec51 0b18 	vmov	r0, r1, d8
 801496c:	f7eb fe4c 	bl	8000608 <__aeabi_dmul>
 8014970:	f1bb 0f1f 	cmp.w	fp, #31
 8014974:	4604      	mov	r4, r0
 8014976:	460d      	mov	r5, r1
 8014978:	dc0d      	bgt.n	8014996 <__ieee754_rem_pio2+0x1ae>
 801497a:	4b6e      	ldr	r3, [pc, #440]	; (8014b34 <__ieee754_rem_pio2+0x34c>)
 801497c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8014980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014984:	4543      	cmp	r3, r8
 8014986:	d006      	beq.n	8014996 <__ieee754_rem_pio2+0x1ae>
 8014988:	4622      	mov	r2, r4
 801498a:	462b      	mov	r3, r5
 801498c:	4630      	mov	r0, r6
 801498e:	4639      	mov	r1, r7
 8014990:	f7eb fc82 	bl	8000298 <__aeabi_dsub>
 8014994:	e00f      	b.n	80149b6 <__ieee754_rem_pio2+0x1ce>
 8014996:	462b      	mov	r3, r5
 8014998:	4622      	mov	r2, r4
 801499a:	4630      	mov	r0, r6
 801499c:	4639      	mov	r1, r7
 801499e:	f7eb fc7b 	bl	8000298 <__aeabi_dsub>
 80149a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80149a6:	9303      	str	r3, [sp, #12]
 80149a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80149ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80149b0:	f1b8 0f10 	cmp.w	r8, #16
 80149b4:	dc02      	bgt.n	80149bc <__ieee754_rem_pio2+0x1d4>
 80149b6:	e9ca 0100 	strd	r0, r1, [sl]
 80149ba:	e039      	b.n	8014a30 <__ieee754_rem_pio2+0x248>
 80149bc:	a34e      	add	r3, pc, #312	; (adr r3, 8014af8 <__ieee754_rem_pio2+0x310>)
 80149be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c2:	ec51 0b18 	vmov	r0, r1, d8
 80149c6:	f7eb fe1f 	bl	8000608 <__aeabi_dmul>
 80149ca:	4604      	mov	r4, r0
 80149cc:	460d      	mov	r5, r1
 80149ce:	4602      	mov	r2, r0
 80149d0:	460b      	mov	r3, r1
 80149d2:	4630      	mov	r0, r6
 80149d4:	4639      	mov	r1, r7
 80149d6:	f7eb fc5f 	bl	8000298 <__aeabi_dsub>
 80149da:	4602      	mov	r2, r0
 80149dc:	460b      	mov	r3, r1
 80149de:	4680      	mov	r8, r0
 80149e0:	4689      	mov	r9, r1
 80149e2:	4630      	mov	r0, r6
 80149e4:	4639      	mov	r1, r7
 80149e6:	f7eb fc57 	bl	8000298 <__aeabi_dsub>
 80149ea:	4622      	mov	r2, r4
 80149ec:	462b      	mov	r3, r5
 80149ee:	f7eb fc53 	bl	8000298 <__aeabi_dsub>
 80149f2:	a343      	add	r3, pc, #268	; (adr r3, 8014b00 <__ieee754_rem_pio2+0x318>)
 80149f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f8:	4604      	mov	r4, r0
 80149fa:	460d      	mov	r5, r1
 80149fc:	ec51 0b18 	vmov	r0, r1, d8
 8014a00:	f7eb fe02 	bl	8000608 <__aeabi_dmul>
 8014a04:	4622      	mov	r2, r4
 8014a06:	462b      	mov	r3, r5
 8014a08:	f7eb fc46 	bl	8000298 <__aeabi_dsub>
 8014a0c:	4602      	mov	r2, r0
 8014a0e:	460b      	mov	r3, r1
 8014a10:	4604      	mov	r4, r0
 8014a12:	460d      	mov	r5, r1
 8014a14:	4640      	mov	r0, r8
 8014a16:	4649      	mov	r1, r9
 8014a18:	f7eb fc3e 	bl	8000298 <__aeabi_dsub>
 8014a1c:	9a03      	ldr	r2, [sp, #12]
 8014a1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a22:	1ad3      	subs	r3, r2, r3
 8014a24:	2b31      	cmp	r3, #49	; 0x31
 8014a26:	dc24      	bgt.n	8014a72 <__ieee754_rem_pio2+0x28a>
 8014a28:	e9ca 0100 	strd	r0, r1, [sl]
 8014a2c:	4646      	mov	r6, r8
 8014a2e:	464f      	mov	r7, r9
 8014a30:	e9da 8900 	ldrd	r8, r9, [sl]
 8014a34:	4630      	mov	r0, r6
 8014a36:	4642      	mov	r2, r8
 8014a38:	464b      	mov	r3, r9
 8014a3a:	4639      	mov	r1, r7
 8014a3c:	f7eb fc2c 	bl	8000298 <__aeabi_dsub>
 8014a40:	462b      	mov	r3, r5
 8014a42:	4622      	mov	r2, r4
 8014a44:	f7eb fc28 	bl	8000298 <__aeabi_dsub>
 8014a48:	9b02      	ldr	r3, [sp, #8]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014a50:	f6bf af0a 	bge.w	8014868 <__ieee754_rem_pio2+0x80>
 8014a54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014a58:	f8ca 3004 	str.w	r3, [sl, #4]
 8014a5c:	f8ca 8000 	str.w	r8, [sl]
 8014a60:	f8ca 0008 	str.w	r0, [sl, #8]
 8014a64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a68:	f8ca 300c 	str.w	r3, [sl, #12]
 8014a6c:	f1cb 0b00 	rsb	fp, fp, #0
 8014a70:	e6fa      	b.n	8014868 <__ieee754_rem_pio2+0x80>
 8014a72:	a327      	add	r3, pc, #156	; (adr r3, 8014b10 <__ieee754_rem_pio2+0x328>)
 8014a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a78:	ec51 0b18 	vmov	r0, r1, d8
 8014a7c:	f7eb fdc4 	bl	8000608 <__aeabi_dmul>
 8014a80:	4604      	mov	r4, r0
 8014a82:	460d      	mov	r5, r1
 8014a84:	4602      	mov	r2, r0
 8014a86:	460b      	mov	r3, r1
 8014a88:	4640      	mov	r0, r8
 8014a8a:	4649      	mov	r1, r9
 8014a8c:	f7eb fc04 	bl	8000298 <__aeabi_dsub>
 8014a90:	4602      	mov	r2, r0
 8014a92:	460b      	mov	r3, r1
 8014a94:	4606      	mov	r6, r0
 8014a96:	460f      	mov	r7, r1
 8014a98:	4640      	mov	r0, r8
 8014a9a:	4649      	mov	r1, r9
 8014a9c:	f7eb fbfc 	bl	8000298 <__aeabi_dsub>
 8014aa0:	4622      	mov	r2, r4
 8014aa2:	462b      	mov	r3, r5
 8014aa4:	f7eb fbf8 	bl	8000298 <__aeabi_dsub>
 8014aa8:	a31b      	add	r3, pc, #108	; (adr r3, 8014b18 <__ieee754_rem_pio2+0x330>)
 8014aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aae:	4604      	mov	r4, r0
 8014ab0:	460d      	mov	r5, r1
 8014ab2:	ec51 0b18 	vmov	r0, r1, d8
 8014ab6:	f7eb fda7 	bl	8000608 <__aeabi_dmul>
 8014aba:	4622      	mov	r2, r4
 8014abc:	462b      	mov	r3, r5
 8014abe:	f7eb fbeb 	bl	8000298 <__aeabi_dsub>
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	460d      	mov	r5, r1
 8014ac6:	e75f      	b.n	8014988 <__ieee754_rem_pio2+0x1a0>
 8014ac8:	4b1b      	ldr	r3, [pc, #108]	; (8014b38 <__ieee754_rem_pio2+0x350>)
 8014aca:	4598      	cmp	r8, r3
 8014acc:	dd36      	ble.n	8014b3c <__ieee754_rem_pio2+0x354>
 8014ace:	ee10 2a10 	vmov	r2, s0
 8014ad2:	462b      	mov	r3, r5
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	4629      	mov	r1, r5
 8014ad8:	f7eb fbde 	bl	8000298 <__aeabi_dsub>
 8014adc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014ae0:	e9ca 0100 	strd	r0, r1, [sl]
 8014ae4:	e694      	b.n	8014810 <__ieee754_rem_pio2+0x28>
 8014ae6:	bf00      	nop
 8014ae8:	54400000 	.word	0x54400000
 8014aec:	3ff921fb 	.word	0x3ff921fb
 8014af0:	1a626331 	.word	0x1a626331
 8014af4:	3dd0b461 	.word	0x3dd0b461
 8014af8:	1a600000 	.word	0x1a600000
 8014afc:	3dd0b461 	.word	0x3dd0b461
 8014b00:	2e037073 	.word	0x2e037073
 8014b04:	3ba3198a 	.word	0x3ba3198a
 8014b08:	6dc9c883 	.word	0x6dc9c883
 8014b0c:	3fe45f30 	.word	0x3fe45f30
 8014b10:	2e000000 	.word	0x2e000000
 8014b14:	3ba3198a 	.word	0x3ba3198a
 8014b18:	252049c1 	.word	0x252049c1
 8014b1c:	397b839a 	.word	0x397b839a
 8014b20:	3fe921fb 	.word	0x3fe921fb
 8014b24:	4002d97b 	.word	0x4002d97b
 8014b28:	3ff921fb 	.word	0x3ff921fb
 8014b2c:	413921fb 	.word	0x413921fb
 8014b30:	3fe00000 	.word	0x3fe00000
 8014b34:	08016600 	.word	0x08016600
 8014b38:	7fefffff 	.word	0x7fefffff
 8014b3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8014b40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8014b44:	ee10 0a10 	vmov	r0, s0
 8014b48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8014b4c:	ee10 6a10 	vmov	r6, s0
 8014b50:	460f      	mov	r7, r1
 8014b52:	f7ec f809 	bl	8000b68 <__aeabi_d2iz>
 8014b56:	f7eb fced 	bl	8000534 <__aeabi_i2d>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	4630      	mov	r0, r6
 8014b60:	4639      	mov	r1, r7
 8014b62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014b66:	f7eb fb97 	bl	8000298 <__aeabi_dsub>
 8014b6a:	4b22      	ldr	r3, [pc, #136]	; (8014bf4 <__ieee754_rem_pio2+0x40c>)
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	f7eb fd4b 	bl	8000608 <__aeabi_dmul>
 8014b72:	460f      	mov	r7, r1
 8014b74:	4606      	mov	r6, r0
 8014b76:	f7eb fff7 	bl	8000b68 <__aeabi_d2iz>
 8014b7a:	f7eb fcdb 	bl	8000534 <__aeabi_i2d>
 8014b7e:	4602      	mov	r2, r0
 8014b80:	460b      	mov	r3, r1
 8014b82:	4630      	mov	r0, r6
 8014b84:	4639      	mov	r1, r7
 8014b86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b8a:	f7eb fb85 	bl	8000298 <__aeabi_dsub>
 8014b8e:	4b19      	ldr	r3, [pc, #100]	; (8014bf4 <__ieee754_rem_pio2+0x40c>)
 8014b90:	2200      	movs	r2, #0
 8014b92:	f7eb fd39 	bl	8000608 <__aeabi_dmul>
 8014b96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014b9a:	ad04      	add	r5, sp, #16
 8014b9c:	f04f 0803 	mov.w	r8, #3
 8014ba0:	46a9      	mov	r9, r5
 8014ba2:	2600      	movs	r6, #0
 8014ba4:	2700      	movs	r7, #0
 8014ba6:	4632      	mov	r2, r6
 8014ba8:	463b      	mov	r3, r7
 8014baa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8014bae:	46c3      	mov	fp, r8
 8014bb0:	3d08      	subs	r5, #8
 8014bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8014bb6:	f7eb ff8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	d1f3      	bne.n	8014ba6 <__ieee754_rem_pio2+0x3be>
 8014bbe:	4b0e      	ldr	r3, [pc, #56]	; (8014bf8 <__ieee754_rem_pio2+0x410>)
 8014bc0:	9301      	str	r3, [sp, #4]
 8014bc2:	2302      	movs	r3, #2
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	4622      	mov	r2, r4
 8014bc8:	465b      	mov	r3, fp
 8014bca:	4651      	mov	r1, sl
 8014bcc:	4648      	mov	r0, r9
 8014bce:	f000 f993 	bl	8014ef8 <__kernel_rem_pio2>
 8014bd2:	9b02      	ldr	r3, [sp, #8]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	4683      	mov	fp, r0
 8014bd8:	f6bf ae46 	bge.w	8014868 <__ieee754_rem_pio2+0x80>
 8014bdc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014be0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014be4:	f8ca 3004 	str.w	r3, [sl, #4]
 8014be8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8014bec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014bf0:	e73a      	b.n	8014a68 <__ieee754_rem_pio2+0x280>
 8014bf2:	bf00      	nop
 8014bf4:	41700000 	.word	0x41700000
 8014bf8:	08016680 	.word	0x08016680

08014bfc <__ieee754_sqrt>:
 8014bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c00:	ec55 4b10 	vmov	r4, r5, d0
 8014c04:	4e56      	ldr	r6, [pc, #344]	; (8014d60 <__ieee754_sqrt+0x164>)
 8014c06:	43ae      	bics	r6, r5
 8014c08:	ee10 0a10 	vmov	r0, s0
 8014c0c:	ee10 3a10 	vmov	r3, s0
 8014c10:	4629      	mov	r1, r5
 8014c12:	462a      	mov	r2, r5
 8014c14:	d110      	bne.n	8014c38 <__ieee754_sqrt+0x3c>
 8014c16:	ee10 2a10 	vmov	r2, s0
 8014c1a:	462b      	mov	r3, r5
 8014c1c:	f7eb fcf4 	bl	8000608 <__aeabi_dmul>
 8014c20:	4602      	mov	r2, r0
 8014c22:	460b      	mov	r3, r1
 8014c24:	4620      	mov	r0, r4
 8014c26:	4629      	mov	r1, r5
 8014c28:	f7eb fb38 	bl	800029c <__adddf3>
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	460d      	mov	r5, r1
 8014c30:	ec45 4b10 	vmov	d0, r4, r5
 8014c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c38:	2d00      	cmp	r5, #0
 8014c3a:	dc10      	bgt.n	8014c5e <__ieee754_sqrt+0x62>
 8014c3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014c40:	4330      	orrs	r0, r6
 8014c42:	d0f5      	beq.n	8014c30 <__ieee754_sqrt+0x34>
 8014c44:	b15d      	cbz	r5, 8014c5e <__ieee754_sqrt+0x62>
 8014c46:	ee10 2a10 	vmov	r2, s0
 8014c4a:	462b      	mov	r3, r5
 8014c4c:	ee10 0a10 	vmov	r0, s0
 8014c50:	f7eb fb22 	bl	8000298 <__aeabi_dsub>
 8014c54:	4602      	mov	r2, r0
 8014c56:	460b      	mov	r3, r1
 8014c58:	f7eb fe00 	bl	800085c <__aeabi_ddiv>
 8014c5c:	e7e6      	b.n	8014c2c <__ieee754_sqrt+0x30>
 8014c5e:	1509      	asrs	r1, r1, #20
 8014c60:	d076      	beq.n	8014d50 <__ieee754_sqrt+0x154>
 8014c62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014c66:	07ce      	lsls	r6, r1, #31
 8014c68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8014c6c:	bf5e      	ittt	pl
 8014c6e:	0fda      	lsrpl	r2, r3, #31
 8014c70:	005b      	lslpl	r3, r3, #1
 8014c72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8014c76:	0fda      	lsrs	r2, r3, #31
 8014c78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8014c7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014c80:	2000      	movs	r0, #0
 8014c82:	106d      	asrs	r5, r5, #1
 8014c84:	005b      	lsls	r3, r3, #1
 8014c86:	f04f 0e16 	mov.w	lr, #22
 8014c8a:	4684      	mov	ip, r0
 8014c8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014c90:	eb0c 0401 	add.w	r4, ip, r1
 8014c94:	4294      	cmp	r4, r2
 8014c96:	bfde      	ittt	le
 8014c98:	1b12      	suble	r2, r2, r4
 8014c9a:	eb04 0c01 	addle.w	ip, r4, r1
 8014c9e:	1840      	addle	r0, r0, r1
 8014ca0:	0052      	lsls	r2, r2, #1
 8014ca2:	f1be 0e01 	subs.w	lr, lr, #1
 8014ca6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014caa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014cae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014cb2:	d1ed      	bne.n	8014c90 <__ieee754_sqrt+0x94>
 8014cb4:	4671      	mov	r1, lr
 8014cb6:	2720      	movs	r7, #32
 8014cb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014cbc:	4562      	cmp	r2, ip
 8014cbe:	eb04 060e 	add.w	r6, r4, lr
 8014cc2:	dc02      	bgt.n	8014cca <__ieee754_sqrt+0xce>
 8014cc4:	d113      	bne.n	8014cee <__ieee754_sqrt+0xf2>
 8014cc6:	429e      	cmp	r6, r3
 8014cc8:	d811      	bhi.n	8014cee <__ieee754_sqrt+0xf2>
 8014cca:	2e00      	cmp	r6, #0
 8014ccc:	eb06 0e04 	add.w	lr, r6, r4
 8014cd0:	da43      	bge.n	8014d5a <__ieee754_sqrt+0x15e>
 8014cd2:	f1be 0f00 	cmp.w	lr, #0
 8014cd6:	db40      	blt.n	8014d5a <__ieee754_sqrt+0x15e>
 8014cd8:	f10c 0801 	add.w	r8, ip, #1
 8014cdc:	eba2 020c 	sub.w	r2, r2, ip
 8014ce0:	429e      	cmp	r6, r3
 8014ce2:	bf88      	it	hi
 8014ce4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014ce8:	1b9b      	subs	r3, r3, r6
 8014cea:	4421      	add	r1, r4
 8014cec:	46c4      	mov	ip, r8
 8014cee:	0052      	lsls	r2, r2, #1
 8014cf0:	3f01      	subs	r7, #1
 8014cf2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014cf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014cfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014cfe:	d1dd      	bne.n	8014cbc <__ieee754_sqrt+0xc0>
 8014d00:	4313      	orrs	r3, r2
 8014d02:	d006      	beq.n	8014d12 <__ieee754_sqrt+0x116>
 8014d04:	1c4c      	adds	r4, r1, #1
 8014d06:	bf13      	iteet	ne
 8014d08:	3101      	addne	r1, #1
 8014d0a:	3001      	addeq	r0, #1
 8014d0c:	4639      	moveq	r1, r7
 8014d0e:	f021 0101 	bicne.w	r1, r1, #1
 8014d12:	1043      	asrs	r3, r0, #1
 8014d14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014d18:	0849      	lsrs	r1, r1, #1
 8014d1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014d1e:	07c2      	lsls	r2, r0, #31
 8014d20:	bf48      	it	mi
 8014d22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014d26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8014d2a:	460c      	mov	r4, r1
 8014d2c:	463d      	mov	r5, r7
 8014d2e:	e77f      	b.n	8014c30 <__ieee754_sqrt+0x34>
 8014d30:	0ada      	lsrs	r2, r3, #11
 8014d32:	3815      	subs	r0, #21
 8014d34:	055b      	lsls	r3, r3, #21
 8014d36:	2a00      	cmp	r2, #0
 8014d38:	d0fa      	beq.n	8014d30 <__ieee754_sqrt+0x134>
 8014d3a:	02d7      	lsls	r7, r2, #11
 8014d3c:	d50a      	bpl.n	8014d54 <__ieee754_sqrt+0x158>
 8014d3e:	f1c1 0420 	rsb	r4, r1, #32
 8014d42:	fa23 f404 	lsr.w	r4, r3, r4
 8014d46:	1e4d      	subs	r5, r1, #1
 8014d48:	408b      	lsls	r3, r1
 8014d4a:	4322      	orrs	r2, r4
 8014d4c:	1b41      	subs	r1, r0, r5
 8014d4e:	e788      	b.n	8014c62 <__ieee754_sqrt+0x66>
 8014d50:	4608      	mov	r0, r1
 8014d52:	e7f0      	b.n	8014d36 <__ieee754_sqrt+0x13a>
 8014d54:	0052      	lsls	r2, r2, #1
 8014d56:	3101      	adds	r1, #1
 8014d58:	e7ef      	b.n	8014d3a <__ieee754_sqrt+0x13e>
 8014d5a:	46e0      	mov	r8, ip
 8014d5c:	e7be      	b.n	8014cdc <__ieee754_sqrt+0xe0>
 8014d5e:	bf00      	nop
 8014d60:	7ff00000 	.word	0x7ff00000
 8014d64:	00000000 	.word	0x00000000

08014d68 <__kernel_cos>:
 8014d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	ec57 6b10 	vmov	r6, r7, d0
 8014d70:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014d74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8014d78:	ed8d 1b00 	vstr	d1, [sp]
 8014d7c:	da07      	bge.n	8014d8e <__kernel_cos+0x26>
 8014d7e:	ee10 0a10 	vmov	r0, s0
 8014d82:	4639      	mov	r1, r7
 8014d84:	f7eb fef0 	bl	8000b68 <__aeabi_d2iz>
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	f000 8088 	beq.w	8014e9e <__kernel_cos+0x136>
 8014d8e:	4632      	mov	r2, r6
 8014d90:	463b      	mov	r3, r7
 8014d92:	4630      	mov	r0, r6
 8014d94:	4639      	mov	r1, r7
 8014d96:	f7eb fc37 	bl	8000608 <__aeabi_dmul>
 8014d9a:	4b51      	ldr	r3, [pc, #324]	; (8014ee0 <__kernel_cos+0x178>)
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	4604      	mov	r4, r0
 8014da0:	460d      	mov	r5, r1
 8014da2:	f7eb fc31 	bl	8000608 <__aeabi_dmul>
 8014da6:	a340      	add	r3, pc, #256	; (adr r3, 8014ea8 <__kernel_cos+0x140>)
 8014da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dac:	4682      	mov	sl, r0
 8014dae:	468b      	mov	fp, r1
 8014db0:	4620      	mov	r0, r4
 8014db2:	4629      	mov	r1, r5
 8014db4:	f7eb fc28 	bl	8000608 <__aeabi_dmul>
 8014db8:	a33d      	add	r3, pc, #244	; (adr r3, 8014eb0 <__kernel_cos+0x148>)
 8014dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbe:	f7eb fa6d 	bl	800029c <__adddf3>
 8014dc2:	4622      	mov	r2, r4
 8014dc4:	462b      	mov	r3, r5
 8014dc6:	f7eb fc1f 	bl	8000608 <__aeabi_dmul>
 8014dca:	a33b      	add	r3, pc, #236	; (adr r3, 8014eb8 <__kernel_cos+0x150>)
 8014dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd0:	f7eb fa62 	bl	8000298 <__aeabi_dsub>
 8014dd4:	4622      	mov	r2, r4
 8014dd6:	462b      	mov	r3, r5
 8014dd8:	f7eb fc16 	bl	8000608 <__aeabi_dmul>
 8014ddc:	a338      	add	r3, pc, #224	; (adr r3, 8014ec0 <__kernel_cos+0x158>)
 8014dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de2:	f7eb fa5b 	bl	800029c <__adddf3>
 8014de6:	4622      	mov	r2, r4
 8014de8:	462b      	mov	r3, r5
 8014dea:	f7eb fc0d 	bl	8000608 <__aeabi_dmul>
 8014dee:	a336      	add	r3, pc, #216	; (adr r3, 8014ec8 <__kernel_cos+0x160>)
 8014df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df4:	f7eb fa50 	bl	8000298 <__aeabi_dsub>
 8014df8:	4622      	mov	r2, r4
 8014dfa:	462b      	mov	r3, r5
 8014dfc:	f7eb fc04 	bl	8000608 <__aeabi_dmul>
 8014e00:	a333      	add	r3, pc, #204	; (adr r3, 8014ed0 <__kernel_cos+0x168>)
 8014e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e06:	f7eb fa49 	bl	800029c <__adddf3>
 8014e0a:	4622      	mov	r2, r4
 8014e0c:	462b      	mov	r3, r5
 8014e0e:	f7eb fbfb 	bl	8000608 <__aeabi_dmul>
 8014e12:	4622      	mov	r2, r4
 8014e14:	462b      	mov	r3, r5
 8014e16:	f7eb fbf7 	bl	8000608 <__aeabi_dmul>
 8014e1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e1e:	4604      	mov	r4, r0
 8014e20:	460d      	mov	r5, r1
 8014e22:	4630      	mov	r0, r6
 8014e24:	4639      	mov	r1, r7
 8014e26:	f7eb fbef 	bl	8000608 <__aeabi_dmul>
 8014e2a:	460b      	mov	r3, r1
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	4629      	mov	r1, r5
 8014e30:	4620      	mov	r0, r4
 8014e32:	f7eb fa31 	bl	8000298 <__aeabi_dsub>
 8014e36:	4b2b      	ldr	r3, [pc, #172]	; (8014ee4 <__kernel_cos+0x17c>)
 8014e38:	4598      	cmp	r8, r3
 8014e3a:	4606      	mov	r6, r0
 8014e3c:	460f      	mov	r7, r1
 8014e3e:	dc10      	bgt.n	8014e62 <__kernel_cos+0xfa>
 8014e40:	4602      	mov	r2, r0
 8014e42:	460b      	mov	r3, r1
 8014e44:	4650      	mov	r0, sl
 8014e46:	4659      	mov	r1, fp
 8014e48:	f7eb fa26 	bl	8000298 <__aeabi_dsub>
 8014e4c:	460b      	mov	r3, r1
 8014e4e:	4926      	ldr	r1, [pc, #152]	; (8014ee8 <__kernel_cos+0x180>)
 8014e50:	4602      	mov	r2, r0
 8014e52:	2000      	movs	r0, #0
 8014e54:	f7eb fa20 	bl	8000298 <__aeabi_dsub>
 8014e58:	ec41 0b10 	vmov	d0, r0, r1
 8014e5c:	b003      	add	sp, #12
 8014e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e62:	4b22      	ldr	r3, [pc, #136]	; (8014eec <__kernel_cos+0x184>)
 8014e64:	4920      	ldr	r1, [pc, #128]	; (8014ee8 <__kernel_cos+0x180>)
 8014e66:	4598      	cmp	r8, r3
 8014e68:	bfcc      	ite	gt
 8014e6a:	4d21      	ldrgt	r5, [pc, #132]	; (8014ef0 <__kernel_cos+0x188>)
 8014e6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8014e70:	2400      	movs	r4, #0
 8014e72:	4622      	mov	r2, r4
 8014e74:	462b      	mov	r3, r5
 8014e76:	2000      	movs	r0, #0
 8014e78:	f7eb fa0e 	bl	8000298 <__aeabi_dsub>
 8014e7c:	4622      	mov	r2, r4
 8014e7e:	4680      	mov	r8, r0
 8014e80:	4689      	mov	r9, r1
 8014e82:	462b      	mov	r3, r5
 8014e84:	4650      	mov	r0, sl
 8014e86:	4659      	mov	r1, fp
 8014e88:	f7eb fa06 	bl	8000298 <__aeabi_dsub>
 8014e8c:	4632      	mov	r2, r6
 8014e8e:	463b      	mov	r3, r7
 8014e90:	f7eb fa02 	bl	8000298 <__aeabi_dsub>
 8014e94:	4602      	mov	r2, r0
 8014e96:	460b      	mov	r3, r1
 8014e98:	4640      	mov	r0, r8
 8014e9a:	4649      	mov	r1, r9
 8014e9c:	e7da      	b.n	8014e54 <__kernel_cos+0xec>
 8014e9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8014ed8 <__kernel_cos+0x170>
 8014ea2:	e7db      	b.n	8014e5c <__kernel_cos+0xf4>
 8014ea4:	f3af 8000 	nop.w
 8014ea8:	be8838d4 	.word	0xbe8838d4
 8014eac:	bda8fae9 	.word	0xbda8fae9
 8014eb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8014eb4:	3e21ee9e 	.word	0x3e21ee9e
 8014eb8:	809c52ad 	.word	0x809c52ad
 8014ebc:	3e927e4f 	.word	0x3e927e4f
 8014ec0:	19cb1590 	.word	0x19cb1590
 8014ec4:	3efa01a0 	.word	0x3efa01a0
 8014ec8:	16c15177 	.word	0x16c15177
 8014ecc:	3f56c16c 	.word	0x3f56c16c
 8014ed0:	5555554c 	.word	0x5555554c
 8014ed4:	3fa55555 	.word	0x3fa55555
 8014ed8:	00000000 	.word	0x00000000
 8014edc:	3ff00000 	.word	0x3ff00000
 8014ee0:	3fe00000 	.word	0x3fe00000
 8014ee4:	3fd33332 	.word	0x3fd33332
 8014ee8:	3ff00000 	.word	0x3ff00000
 8014eec:	3fe90000 	.word	0x3fe90000
 8014ef0:	3fd20000 	.word	0x3fd20000
 8014ef4:	00000000 	.word	0x00000000

08014ef8 <__kernel_rem_pio2>:
 8014ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014efc:	ed2d 8b02 	vpush	{d8}
 8014f00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8014f04:	f112 0f14 	cmn.w	r2, #20
 8014f08:	9308      	str	r3, [sp, #32]
 8014f0a:	9101      	str	r1, [sp, #4]
 8014f0c:	4bc6      	ldr	r3, [pc, #792]	; (8015228 <__kernel_rem_pio2+0x330>)
 8014f0e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8014f10:	9009      	str	r0, [sp, #36]	; 0x24
 8014f12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f16:	9304      	str	r3, [sp, #16]
 8014f18:	9b08      	ldr	r3, [sp, #32]
 8014f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014f1e:	bfa8      	it	ge
 8014f20:	1ed4      	subge	r4, r2, #3
 8014f22:	9306      	str	r3, [sp, #24]
 8014f24:	bfb2      	itee	lt
 8014f26:	2400      	movlt	r4, #0
 8014f28:	2318      	movge	r3, #24
 8014f2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8014f2e:	f06f 0317 	mvn.w	r3, #23
 8014f32:	fb04 3303 	mla	r3, r4, r3, r3
 8014f36:	eb03 0a02 	add.w	sl, r3, r2
 8014f3a:	9b04      	ldr	r3, [sp, #16]
 8014f3c:	9a06      	ldr	r2, [sp, #24]
 8014f3e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015218 <__kernel_rem_pio2+0x320>
 8014f42:	eb03 0802 	add.w	r8, r3, r2
 8014f46:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014f48:	1aa7      	subs	r7, r4, r2
 8014f4a:	ae20      	add	r6, sp, #128	; 0x80
 8014f4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014f50:	2500      	movs	r5, #0
 8014f52:	4545      	cmp	r5, r8
 8014f54:	dd18      	ble.n	8014f88 <__kernel_rem_pio2+0x90>
 8014f56:	9b08      	ldr	r3, [sp, #32]
 8014f58:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014f5c:	aa20      	add	r2, sp, #128	; 0x80
 8014f5e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8015218 <__kernel_rem_pio2+0x320>
 8014f62:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014f66:	f1c3 0301 	rsb	r3, r3, #1
 8014f6a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8014f6e:	9307      	str	r3, [sp, #28]
 8014f70:	9b07      	ldr	r3, [sp, #28]
 8014f72:	9a04      	ldr	r2, [sp, #16]
 8014f74:	4443      	add	r3, r8
 8014f76:	429a      	cmp	r2, r3
 8014f78:	db2f      	blt.n	8014fda <__kernel_rem_pio2+0xe2>
 8014f7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014f7e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014f82:	462f      	mov	r7, r5
 8014f84:	2600      	movs	r6, #0
 8014f86:	e01b      	b.n	8014fc0 <__kernel_rem_pio2+0xc8>
 8014f88:	42ef      	cmn	r7, r5
 8014f8a:	d407      	bmi.n	8014f9c <__kernel_rem_pio2+0xa4>
 8014f8c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014f90:	f7eb fad0 	bl	8000534 <__aeabi_i2d>
 8014f94:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014f98:	3501      	adds	r5, #1
 8014f9a:	e7da      	b.n	8014f52 <__kernel_rem_pio2+0x5a>
 8014f9c:	ec51 0b18 	vmov	r0, r1, d8
 8014fa0:	e7f8      	b.n	8014f94 <__kernel_rem_pio2+0x9c>
 8014fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014fa6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014faa:	f7eb fb2d 	bl	8000608 <__aeabi_dmul>
 8014fae:	4602      	mov	r2, r0
 8014fb0:	460b      	mov	r3, r1
 8014fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fb6:	f7eb f971 	bl	800029c <__adddf3>
 8014fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fbe:	3601      	adds	r6, #1
 8014fc0:	9b06      	ldr	r3, [sp, #24]
 8014fc2:	429e      	cmp	r6, r3
 8014fc4:	f1a7 0708 	sub.w	r7, r7, #8
 8014fc8:	ddeb      	ble.n	8014fa2 <__kernel_rem_pio2+0xaa>
 8014fca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014fce:	3508      	adds	r5, #8
 8014fd0:	ecab 7b02 	vstmia	fp!, {d7}
 8014fd4:	f108 0801 	add.w	r8, r8, #1
 8014fd8:	e7ca      	b.n	8014f70 <__kernel_rem_pio2+0x78>
 8014fda:	9b04      	ldr	r3, [sp, #16]
 8014fdc:	aa0c      	add	r2, sp, #48	; 0x30
 8014fde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014fe4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014fe6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014fea:	9c04      	ldr	r4, [sp, #16]
 8014fec:	930a      	str	r3, [sp, #40]	; 0x28
 8014fee:	ab98      	add	r3, sp, #608	; 0x260
 8014ff0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014ff4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8014ff8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8014ffc:	f8cd b008 	str.w	fp, [sp, #8]
 8015000:	4625      	mov	r5, r4
 8015002:	2d00      	cmp	r5, #0
 8015004:	dc78      	bgt.n	80150f8 <__kernel_rem_pio2+0x200>
 8015006:	ec47 6b10 	vmov	d0, r6, r7
 801500a:	4650      	mov	r0, sl
 801500c:	f000 fc94 	bl	8015938 <scalbn>
 8015010:	ec57 6b10 	vmov	r6, r7, d0
 8015014:	2200      	movs	r2, #0
 8015016:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801501a:	ee10 0a10 	vmov	r0, s0
 801501e:	4639      	mov	r1, r7
 8015020:	f7eb faf2 	bl	8000608 <__aeabi_dmul>
 8015024:	ec41 0b10 	vmov	d0, r0, r1
 8015028:	f000 fb7a 	bl	8015720 <floor>
 801502c:	4b7f      	ldr	r3, [pc, #508]	; (801522c <__kernel_rem_pio2+0x334>)
 801502e:	ec51 0b10 	vmov	r0, r1, d0
 8015032:	2200      	movs	r2, #0
 8015034:	f7eb fae8 	bl	8000608 <__aeabi_dmul>
 8015038:	4602      	mov	r2, r0
 801503a:	460b      	mov	r3, r1
 801503c:	4630      	mov	r0, r6
 801503e:	4639      	mov	r1, r7
 8015040:	f7eb f92a 	bl	8000298 <__aeabi_dsub>
 8015044:	460f      	mov	r7, r1
 8015046:	4606      	mov	r6, r0
 8015048:	f7eb fd8e 	bl	8000b68 <__aeabi_d2iz>
 801504c:	9007      	str	r0, [sp, #28]
 801504e:	f7eb fa71 	bl	8000534 <__aeabi_i2d>
 8015052:	4602      	mov	r2, r0
 8015054:	460b      	mov	r3, r1
 8015056:	4630      	mov	r0, r6
 8015058:	4639      	mov	r1, r7
 801505a:	f7eb f91d 	bl	8000298 <__aeabi_dsub>
 801505e:	f1ba 0f00 	cmp.w	sl, #0
 8015062:	4606      	mov	r6, r0
 8015064:	460f      	mov	r7, r1
 8015066:	dd70      	ble.n	801514a <__kernel_rem_pio2+0x252>
 8015068:	1e62      	subs	r2, r4, #1
 801506a:	ab0c      	add	r3, sp, #48	; 0x30
 801506c:	9d07      	ldr	r5, [sp, #28]
 801506e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015072:	f1ca 0118 	rsb	r1, sl, #24
 8015076:	fa40 f301 	asr.w	r3, r0, r1
 801507a:	441d      	add	r5, r3
 801507c:	408b      	lsls	r3, r1
 801507e:	1ac0      	subs	r0, r0, r3
 8015080:	ab0c      	add	r3, sp, #48	; 0x30
 8015082:	9507      	str	r5, [sp, #28]
 8015084:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015088:	f1ca 0317 	rsb	r3, sl, #23
 801508c:	fa40 f303 	asr.w	r3, r0, r3
 8015090:	9302      	str	r3, [sp, #8]
 8015092:	9b02      	ldr	r3, [sp, #8]
 8015094:	2b00      	cmp	r3, #0
 8015096:	dd66      	ble.n	8015166 <__kernel_rem_pio2+0x26e>
 8015098:	9b07      	ldr	r3, [sp, #28]
 801509a:	2200      	movs	r2, #0
 801509c:	3301      	adds	r3, #1
 801509e:	9307      	str	r3, [sp, #28]
 80150a0:	4615      	mov	r5, r2
 80150a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80150a6:	4294      	cmp	r4, r2
 80150a8:	f300 8099 	bgt.w	80151de <__kernel_rem_pio2+0x2e6>
 80150ac:	f1ba 0f00 	cmp.w	sl, #0
 80150b0:	dd07      	ble.n	80150c2 <__kernel_rem_pio2+0x1ca>
 80150b2:	f1ba 0f01 	cmp.w	sl, #1
 80150b6:	f000 80a5 	beq.w	8015204 <__kernel_rem_pio2+0x30c>
 80150ba:	f1ba 0f02 	cmp.w	sl, #2
 80150be:	f000 80c1 	beq.w	8015244 <__kernel_rem_pio2+0x34c>
 80150c2:	9b02      	ldr	r3, [sp, #8]
 80150c4:	2b02      	cmp	r3, #2
 80150c6:	d14e      	bne.n	8015166 <__kernel_rem_pio2+0x26e>
 80150c8:	4632      	mov	r2, r6
 80150ca:	463b      	mov	r3, r7
 80150cc:	4958      	ldr	r1, [pc, #352]	; (8015230 <__kernel_rem_pio2+0x338>)
 80150ce:	2000      	movs	r0, #0
 80150d0:	f7eb f8e2 	bl	8000298 <__aeabi_dsub>
 80150d4:	4606      	mov	r6, r0
 80150d6:	460f      	mov	r7, r1
 80150d8:	2d00      	cmp	r5, #0
 80150da:	d044      	beq.n	8015166 <__kernel_rem_pio2+0x26e>
 80150dc:	4650      	mov	r0, sl
 80150de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015220 <__kernel_rem_pio2+0x328>
 80150e2:	f000 fc29 	bl	8015938 <scalbn>
 80150e6:	4630      	mov	r0, r6
 80150e8:	4639      	mov	r1, r7
 80150ea:	ec53 2b10 	vmov	r2, r3, d0
 80150ee:	f7eb f8d3 	bl	8000298 <__aeabi_dsub>
 80150f2:	4606      	mov	r6, r0
 80150f4:	460f      	mov	r7, r1
 80150f6:	e036      	b.n	8015166 <__kernel_rem_pio2+0x26e>
 80150f8:	4b4e      	ldr	r3, [pc, #312]	; (8015234 <__kernel_rem_pio2+0x33c>)
 80150fa:	2200      	movs	r2, #0
 80150fc:	4630      	mov	r0, r6
 80150fe:	4639      	mov	r1, r7
 8015100:	f7eb fa82 	bl	8000608 <__aeabi_dmul>
 8015104:	f7eb fd30 	bl	8000b68 <__aeabi_d2iz>
 8015108:	f7eb fa14 	bl	8000534 <__aeabi_i2d>
 801510c:	4b4a      	ldr	r3, [pc, #296]	; (8015238 <__kernel_rem_pio2+0x340>)
 801510e:	2200      	movs	r2, #0
 8015110:	4680      	mov	r8, r0
 8015112:	4689      	mov	r9, r1
 8015114:	f7eb fa78 	bl	8000608 <__aeabi_dmul>
 8015118:	4602      	mov	r2, r0
 801511a:	460b      	mov	r3, r1
 801511c:	4630      	mov	r0, r6
 801511e:	4639      	mov	r1, r7
 8015120:	f7eb f8ba 	bl	8000298 <__aeabi_dsub>
 8015124:	f7eb fd20 	bl	8000b68 <__aeabi_d2iz>
 8015128:	9b02      	ldr	r3, [sp, #8]
 801512a:	f843 0b04 	str.w	r0, [r3], #4
 801512e:	3d01      	subs	r5, #1
 8015130:	9302      	str	r3, [sp, #8]
 8015132:	ab70      	add	r3, sp, #448	; 0x1c0
 8015134:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513c:	4640      	mov	r0, r8
 801513e:	4649      	mov	r1, r9
 8015140:	f7eb f8ac 	bl	800029c <__adddf3>
 8015144:	4606      	mov	r6, r0
 8015146:	460f      	mov	r7, r1
 8015148:	e75b      	b.n	8015002 <__kernel_rem_pio2+0x10a>
 801514a:	d105      	bne.n	8015158 <__kernel_rem_pio2+0x260>
 801514c:	1e63      	subs	r3, r4, #1
 801514e:	aa0c      	add	r2, sp, #48	; 0x30
 8015150:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015154:	15c3      	asrs	r3, r0, #23
 8015156:	e79b      	b.n	8015090 <__kernel_rem_pio2+0x198>
 8015158:	4b38      	ldr	r3, [pc, #224]	; (801523c <__kernel_rem_pio2+0x344>)
 801515a:	2200      	movs	r2, #0
 801515c:	f7eb fcda 	bl	8000b14 <__aeabi_dcmpge>
 8015160:	2800      	cmp	r0, #0
 8015162:	d139      	bne.n	80151d8 <__kernel_rem_pio2+0x2e0>
 8015164:	9002      	str	r0, [sp, #8]
 8015166:	2200      	movs	r2, #0
 8015168:	2300      	movs	r3, #0
 801516a:	4630      	mov	r0, r6
 801516c:	4639      	mov	r1, r7
 801516e:	f7eb fcb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8015172:	2800      	cmp	r0, #0
 8015174:	f000 80b4 	beq.w	80152e0 <__kernel_rem_pio2+0x3e8>
 8015178:	f104 3bff 	add.w	fp, r4, #4294967295
 801517c:	465b      	mov	r3, fp
 801517e:	2200      	movs	r2, #0
 8015180:	9904      	ldr	r1, [sp, #16]
 8015182:	428b      	cmp	r3, r1
 8015184:	da65      	bge.n	8015252 <__kernel_rem_pio2+0x35a>
 8015186:	2a00      	cmp	r2, #0
 8015188:	d07b      	beq.n	8015282 <__kernel_rem_pio2+0x38a>
 801518a:	ab0c      	add	r3, sp, #48	; 0x30
 801518c:	f1aa 0a18 	sub.w	sl, sl, #24
 8015190:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8015194:	2b00      	cmp	r3, #0
 8015196:	f000 80a0 	beq.w	80152da <__kernel_rem_pio2+0x3e2>
 801519a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8015220 <__kernel_rem_pio2+0x328>
 801519e:	4650      	mov	r0, sl
 80151a0:	f000 fbca 	bl	8015938 <scalbn>
 80151a4:	4f23      	ldr	r7, [pc, #140]	; (8015234 <__kernel_rem_pio2+0x33c>)
 80151a6:	ec55 4b10 	vmov	r4, r5, d0
 80151aa:	46d8      	mov	r8, fp
 80151ac:	2600      	movs	r6, #0
 80151ae:	f1b8 0f00 	cmp.w	r8, #0
 80151b2:	f280 80cf 	bge.w	8015354 <__kernel_rem_pio2+0x45c>
 80151b6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8015218 <__kernel_rem_pio2+0x320>
 80151ba:	465f      	mov	r7, fp
 80151bc:	f04f 0800 	mov.w	r8, #0
 80151c0:	2f00      	cmp	r7, #0
 80151c2:	f2c0 80fd 	blt.w	80153c0 <__kernel_rem_pio2+0x4c8>
 80151c6:	ab70      	add	r3, sp, #448	; 0x1c0
 80151c8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8015240 <__kernel_rem_pio2+0x348>
 80151cc:	ec55 4b18 	vmov	r4, r5, d8
 80151d0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80151d4:	2600      	movs	r6, #0
 80151d6:	e0e5      	b.n	80153a4 <__kernel_rem_pio2+0x4ac>
 80151d8:	2302      	movs	r3, #2
 80151da:	9302      	str	r3, [sp, #8]
 80151dc:	e75c      	b.n	8015098 <__kernel_rem_pio2+0x1a0>
 80151de:	f8db 3000 	ldr.w	r3, [fp]
 80151e2:	b955      	cbnz	r5, 80151fa <__kernel_rem_pio2+0x302>
 80151e4:	b123      	cbz	r3, 80151f0 <__kernel_rem_pio2+0x2f8>
 80151e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80151ea:	f8cb 3000 	str.w	r3, [fp]
 80151ee:	2301      	movs	r3, #1
 80151f0:	3201      	adds	r2, #1
 80151f2:	f10b 0b04 	add.w	fp, fp, #4
 80151f6:	461d      	mov	r5, r3
 80151f8:	e755      	b.n	80150a6 <__kernel_rem_pio2+0x1ae>
 80151fa:	1acb      	subs	r3, r1, r3
 80151fc:	f8cb 3000 	str.w	r3, [fp]
 8015200:	462b      	mov	r3, r5
 8015202:	e7f5      	b.n	80151f0 <__kernel_rem_pio2+0x2f8>
 8015204:	1e62      	subs	r2, r4, #1
 8015206:	ab0c      	add	r3, sp, #48	; 0x30
 8015208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801520c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015210:	a90c      	add	r1, sp, #48	; 0x30
 8015212:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015216:	e754      	b.n	80150c2 <__kernel_rem_pio2+0x1ca>
	...
 8015224:	3ff00000 	.word	0x3ff00000
 8015228:	080167c8 	.word	0x080167c8
 801522c:	40200000 	.word	0x40200000
 8015230:	3ff00000 	.word	0x3ff00000
 8015234:	3e700000 	.word	0x3e700000
 8015238:	41700000 	.word	0x41700000
 801523c:	3fe00000 	.word	0x3fe00000
 8015240:	08016788 	.word	0x08016788
 8015244:	1e62      	subs	r2, r4, #1
 8015246:	ab0c      	add	r3, sp, #48	; 0x30
 8015248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801524c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015250:	e7de      	b.n	8015210 <__kernel_rem_pio2+0x318>
 8015252:	a90c      	add	r1, sp, #48	; 0x30
 8015254:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015258:	3b01      	subs	r3, #1
 801525a:	430a      	orrs	r2, r1
 801525c:	e790      	b.n	8015180 <__kernel_rem_pio2+0x288>
 801525e:	3301      	adds	r3, #1
 8015260:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015264:	2900      	cmp	r1, #0
 8015266:	d0fa      	beq.n	801525e <__kernel_rem_pio2+0x366>
 8015268:	9a08      	ldr	r2, [sp, #32]
 801526a:	18e3      	adds	r3, r4, r3
 801526c:	18a6      	adds	r6, r4, r2
 801526e:	aa20      	add	r2, sp, #128	; 0x80
 8015270:	1c65      	adds	r5, r4, #1
 8015272:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8015276:	9302      	str	r3, [sp, #8]
 8015278:	9b02      	ldr	r3, [sp, #8]
 801527a:	42ab      	cmp	r3, r5
 801527c:	da04      	bge.n	8015288 <__kernel_rem_pio2+0x390>
 801527e:	461c      	mov	r4, r3
 8015280:	e6b5      	b.n	8014fee <__kernel_rem_pio2+0xf6>
 8015282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015284:	2301      	movs	r3, #1
 8015286:	e7eb      	b.n	8015260 <__kernel_rem_pio2+0x368>
 8015288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801528a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801528e:	f7eb f951 	bl	8000534 <__aeabi_i2d>
 8015292:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015298:	46b3      	mov	fp, r6
 801529a:	461c      	mov	r4, r3
 801529c:	2700      	movs	r7, #0
 801529e:	f04f 0800 	mov.w	r8, #0
 80152a2:	f04f 0900 	mov.w	r9, #0
 80152a6:	9b06      	ldr	r3, [sp, #24]
 80152a8:	429f      	cmp	r7, r3
 80152aa:	dd06      	ble.n	80152ba <__kernel_rem_pio2+0x3c2>
 80152ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80152ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80152b2:	e9c3 8900 	strd	r8, r9, [r3]
 80152b6:	3501      	adds	r5, #1
 80152b8:	e7de      	b.n	8015278 <__kernel_rem_pio2+0x380>
 80152ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80152be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80152c2:	f7eb f9a1 	bl	8000608 <__aeabi_dmul>
 80152c6:	4602      	mov	r2, r0
 80152c8:	460b      	mov	r3, r1
 80152ca:	4640      	mov	r0, r8
 80152cc:	4649      	mov	r1, r9
 80152ce:	f7ea ffe5 	bl	800029c <__adddf3>
 80152d2:	3701      	adds	r7, #1
 80152d4:	4680      	mov	r8, r0
 80152d6:	4689      	mov	r9, r1
 80152d8:	e7e5      	b.n	80152a6 <__kernel_rem_pio2+0x3ae>
 80152da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80152de:	e754      	b.n	801518a <__kernel_rem_pio2+0x292>
 80152e0:	ec47 6b10 	vmov	d0, r6, r7
 80152e4:	f1ca 0000 	rsb	r0, sl, #0
 80152e8:	f000 fb26 	bl	8015938 <scalbn>
 80152ec:	ec57 6b10 	vmov	r6, r7, d0
 80152f0:	4b9f      	ldr	r3, [pc, #636]	; (8015570 <__kernel_rem_pio2+0x678>)
 80152f2:	ee10 0a10 	vmov	r0, s0
 80152f6:	2200      	movs	r2, #0
 80152f8:	4639      	mov	r1, r7
 80152fa:	f7eb fc0b 	bl	8000b14 <__aeabi_dcmpge>
 80152fe:	b300      	cbz	r0, 8015342 <__kernel_rem_pio2+0x44a>
 8015300:	4b9c      	ldr	r3, [pc, #624]	; (8015574 <__kernel_rem_pio2+0x67c>)
 8015302:	2200      	movs	r2, #0
 8015304:	4630      	mov	r0, r6
 8015306:	4639      	mov	r1, r7
 8015308:	f7eb f97e 	bl	8000608 <__aeabi_dmul>
 801530c:	f7eb fc2c 	bl	8000b68 <__aeabi_d2iz>
 8015310:	4605      	mov	r5, r0
 8015312:	f7eb f90f 	bl	8000534 <__aeabi_i2d>
 8015316:	4b96      	ldr	r3, [pc, #600]	; (8015570 <__kernel_rem_pio2+0x678>)
 8015318:	2200      	movs	r2, #0
 801531a:	f7eb f975 	bl	8000608 <__aeabi_dmul>
 801531e:	460b      	mov	r3, r1
 8015320:	4602      	mov	r2, r0
 8015322:	4639      	mov	r1, r7
 8015324:	4630      	mov	r0, r6
 8015326:	f7ea ffb7 	bl	8000298 <__aeabi_dsub>
 801532a:	f7eb fc1d 	bl	8000b68 <__aeabi_d2iz>
 801532e:	f104 0b01 	add.w	fp, r4, #1
 8015332:	ab0c      	add	r3, sp, #48	; 0x30
 8015334:	f10a 0a18 	add.w	sl, sl, #24
 8015338:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801533c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8015340:	e72b      	b.n	801519a <__kernel_rem_pio2+0x2a2>
 8015342:	4630      	mov	r0, r6
 8015344:	4639      	mov	r1, r7
 8015346:	f7eb fc0f 	bl	8000b68 <__aeabi_d2iz>
 801534a:	ab0c      	add	r3, sp, #48	; 0x30
 801534c:	46a3      	mov	fp, r4
 801534e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015352:	e722      	b.n	801519a <__kernel_rem_pio2+0x2a2>
 8015354:	ab70      	add	r3, sp, #448	; 0x1c0
 8015356:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801535a:	ab0c      	add	r3, sp, #48	; 0x30
 801535c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8015360:	f7eb f8e8 	bl	8000534 <__aeabi_i2d>
 8015364:	4622      	mov	r2, r4
 8015366:	462b      	mov	r3, r5
 8015368:	f7eb f94e 	bl	8000608 <__aeabi_dmul>
 801536c:	4632      	mov	r2, r6
 801536e:	e9c9 0100 	strd	r0, r1, [r9]
 8015372:	463b      	mov	r3, r7
 8015374:	4620      	mov	r0, r4
 8015376:	4629      	mov	r1, r5
 8015378:	f7eb f946 	bl	8000608 <__aeabi_dmul>
 801537c:	f108 38ff 	add.w	r8, r8, #4294967295
 8015380:	4604      	mov	r4, r0
 8015382:	460d      	mov	r5, r1
 8015384:	e713      	b.n	80151ae <__kernel_rem_pio2+0x2b6>
 8015386:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801538a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801538e:	f7eb f93b 	bl	8000608 <__aeabi_dmul>
 8015392:	4602      	mov	r2, r0
 8015394:	460b      	mov	r3, r1
 8015396:	4620      	mov	r0, r4
 8015398:	4629      	mov	r1, r5
 801539a:	f7ea ff7f 	bl	800029c <__adddf3>
 801539e:	3601      	adds	r6, #1
 80153a0:	4604      	mov	r4, r0
 80153a2:	460d      	mov	r5, r1
 80153a4:	9b04      	ldr	r3, [sp, #16]
 80153a6:	429e      	cmp	r6, r3
 80153a8:	dc01      	bgt.n	80153ae <__kernel_rem_pio2+0x4b6>
 80153aa:	45b0      	cmp	r8, r6
 80153ac:	daeb      	bge.n	8015386 <__kernel_rem_pio2+0x48e>
 80153ae:	ab48      	add	r3, sp, #288	; 0x120
 80153b0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80153b4:	e9c3 4500 	strd	r4, r5, [r3]
 80153b8:	3f01      	subs	r7, #1
 80153ba:	f108 0801 	add.w	r8, r8, #1
 80153be:	e6ff      	b.n	80151c0 <__kernel_rem_pio2+0x2c8>
 80153c0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80153c2:	2b02      	cmp	r3, #2
 80153c4:	dc0b      	bgt.n	80153de <__kernel_rem_pio2+0x4e6>
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	dc6e      	bgt.n	80154a8 <__kernel_rem_pio2+0x5b0>
 80153ca:	d045      	beq.n	8015458 <__kernel_rem_pio2+0x560>
 80153cc:	9b07      	ldr	r3, [sp, #28]
 80153ce:	f003 0007 	and.w	r0, r3, #7
 80153d2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80153d6:	ecbd 8b02 	vpop	{d8}
 80153da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80153e0:	2b03      	cmp	r3, #3
 80153e2:	d1f3      	bne.n	80153cc <__kernel_rem_pio2+0x4d4>
 80153e4:	ab48      	add	r3, sp, #288	; 0x120
 80153e6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80153ea:	46d0      	mov	r8, sl
 80153ec:	46d9      	mov	r9, fp
 80153ee:	f1b9 0f00 	cmp.w	r9, #0
 80153f2:	f1a8 0808 	sub.w	r8, r8, #8
 80153f6:	dc64      	bgt.n	80154c2 <__kernel_rem_pio2+0x5ca>
 80153f8:	465c      	mov	r4, fp
 80153fa:	2c01      	cmp	r4, #1
 80153fc:	f1aa 0a08 	sub.w	sl, sl, #8
 8015400:	dc7e      	bgt.n	8015500 <__kernel_rem_pio2+0x608>
 8015402:	2000      	movs	r0, #0
 8015404:	2100      	movs	r1, #0
 8015406:	f1bb 0f01 	cmp.w	fp, #1
 801540a:	f300 8097 	bgt.w	801553c <__kernel_rem_pio2+0x644>
 801540e:	9b02      	ldr	r3, [sp, #8]
 8015410:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8015414:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015418:	2b00      	cmp	r3, #0
 801541a:	f040 8099 	bne.w	8015550 <__kernel_rem_pio2+0x658>
 801541e:	9b01      	ldr	r3, [sp, #4]
 8015420:	e9c3 5600 	strd	r5, r6, [r3]
 8015424:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8015428:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801542c:	e7ce      	b.n	80153cc <__kernel_rem_pio2+0x4d4>
 801542e:	ab48      	add	r3, sp, #288	; 0x120
 8015430:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015438:	f7ea ff30 	bl	800029c <__adddf3>
 801543c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015440:	f1bb 0f00 	cmp.w	fp, #0
 8015444:	daf3      	bge.n	801542e <__kernel_rem_pio2+0x536>
 8015446:	9b02      	ldr	r3, [sp, #8]
 8015448:	b113      	cbz	r3, 8015450 <__kernel_rem_pio2+0x558>
 801544a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801544e:	4619      	mov	r1, r3
 8015450:	9b01      	ldr	r3, [sp, #4]
 8015452:	e9c3 0100 	strd	r0, r1, [r3]
 8015456:	e7b9      	b.n	80153cc <__kernel_rem_pio2+0x4d4>
 8015458:	2000      	movs	r0, #0
 801545a:	2100      	movs	r1, #0
 801545c:	e7f0      	b.n	8015440 <__kernel_rem_pio2+0x548>
 801545e:	ab48      	add	r3, sp, #288	; 0x120
 8015460:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015468:	f7ea ff18 	bl	800029c <__adddf3>
 801546c:	3c01      	subs	r4, #1
 801546e:	2c00      	cmp	r4, #0
 8015470:	daf5      	bge.n	801545e <__kernel_rem_pio2+0x566>
 8015472:	9b02      	ldr	r3, [sp, #8]
 8015474:	b1e3      	cbz	r3, 80154b0 <__kernel_rem_pio2+0x5b8>
 8015476:	4602      	mov	r2, r0
 8015478:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801547c:	9c01      	ldr	r4, [sp, #4]
 801547e:	e9c4 2300 	strd	r2, r3, [r4]
 8015482:	4602      	mov	r2, r0
 8015484:	460b      	mov	r3, r1
 8015486:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801548a:	f7ea ff05 	bl	8000298 <__aeabi_dsub>
 801548e:	ad4a      	add	r5, sp, #296	; 0x128
 8015490:	2401      	movs	r4, #1
 8015492:	45a3      	cmp	fp, r4
 8015494:	da0f      	bge.n	80154b6 <__kernel_rem_pio2+0x5be>
 8015496:	9b02      	ldr	r3, [sp, #8]
 8015498:	b113      	cbz	r3, 80154a0 <__kernel_rem_pio2+0x5a8>
 801549a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801549e:	4619      	mov	r1, r3
 80154a0:	9b01      	ldr	r3, [sp, #4]
 80154a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80154a6:	e791      	b.n	80153cc <__kernel_rem_pio2+0x4d4>
 80154a8:	465c      	mov	r4, fp
 80154aa:	2000      	movs	r0, #0
 80154ac:	2100      	movs	r1, #0
 80154ae:	e7de      	b.n	801546e <__kernel_rem_pio2+0x576>
 80154b0:	4602      	mov	r2, r0
 80154b2:	460b      	mov	r3, r1
 80154b4:	e7e2      	b.n	801547c <__kernel_rem_pio2+0x584>
 80154b6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80154ba:	f7ea feef 	bl	800029c <__adddf3>
 80154be:	3401      	adds	r4, #1
 80154c0:	e7e7      	b.n	8015492 <__kernel_rem_pio2+0x59a>
 80154c2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80154c6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80154ca:	4620      	mov	r0, r4
 80154cc:	4632      	mov	r2, r6
 80154ce:	463b      	mov	r3, r7
 80154d0:	4629      	mov	r1, r5
 80154d2:	f7ea fee3 	bl	800029c <__adddf3>
 80154d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154da:	4602      	mov	r2, r0
 80154dc:	460b      	mov	r3, r1
 80154de:	4620      	mov	r0, r4
 80154e0:	4629      	mov	r1, r5
 80154e2:	f7ea fed9 	bl	8000298 <__aeabi_dsub>
 80154e6:	4632      	mov	r2, r6
 80154e8:	463b      	mov	r3, r7
 80154ea:	f7ea fed7 	bl	800029c <__adddf3>
 80154ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 80154f2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80154f6:	ed88 7b00 	vstr	d7, [r8]
 80154fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80154fe:	e776      	b.n	80153ee <__kernel_rem_pio2+0x4f6>
 8015500:	e9da 8900 	ldrd	r8, r9, [sl]
 8015504:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8015508:	4640      	mov	r0, r8
 801550a:	4632      	mov	r2, r6
 801550c:	463b      	mov	r3, r7
 801550e:	4649      	mov	r1, r9
 8015510:	f7ea fec4 	bl	800029c <__adddf3>
 8015514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015518:	4602      	mov	r2, r0
 801551a:	460b      	mov	r3, r1
 801551c:	4640      	mov	r0, r8
 801551e:	4649      	mov	r1, r9
 8015520:	f7ea feba 	bl	8000298 <__aeabi_dsub>
 8015524:	4632      	mov	r2, r6
 8015526:	463b      	mov	r3, r7
 8015528:	f7ea feb8 	bl	800029c <__adddf3>
 801552c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015530:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015534:	ed8a 7b00 	vstr	d7, [sl]
 8015538:	3c01      	subs	r4, #1
 801553a:	e75e      	b.n	80153fa <__kernel_rem_pio2+0x502>
 801553c:	ab48      	add	r3, sp, #288	; 0x120
 801553e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015546:	f7ea fea9 	bl	800029c <__adddf3>
 801554a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801554e:	e75a      	b.n	8015406 <__kernel_rem_pio2+0x50e>
 8015550:	9b01      	ldr	r3, [sp, #4]
 8015552:	9a01      	ldr	r2, [sp, #4]
 8015554:	601d      	str	r5, [r3, #0]
 8015556:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801555a:	605c      	str	r4, [r3, #4]
 801555c:	609f      	str	r7, [r3, #8]
 801555e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8015562:	60d3      	str	r3, [r2, #12]
 8015564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015568:	6110      	str	r0, [r2, #16]
 801556a:	6153      	str	r3, [r2, #20]
 801556c:	e72e      	b.n	80153cc <__kernel_rem_pio2+0x4d4>
 801556e:	bf00      	nop
 8015570:	41700000 	.word	0x41700000
 8015574:	3e700000 	.word	0x3e700000

08015578 <__kernel_sin>:
 8015578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801557c:	ed2d 8b04 	vpush	{d8-d9}
 8015580:	eeb0 8a41 	vmov.f32	s16, s2
 8015584:	eef0 8a61 	vmov.f32	s17, s3
 8015588:	ec55 4b10 	vmov	r4, r5, d0
 801558c:	b083      	sub	sp, #12
 801558e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015592:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015596:	9001      	str	r0, [sp, #4]
 8015598:	da06      	bge.n	80155a8 <__kernel_sin+0x30>
 801559a:	ee10 0a10 	vmov	r0, s0
 801559e:	4629      	mov	r1, r5
 80155a0:	f7eb fae2 	bl	8000b68 <__aeabi_d2iz>
 80155a4:	2800      	cmp	r0, #0
 80155a6:	d051      	beq.n	801564c <__kernel_sin+0xd4>
 80155a8:	4622      	mov	r2, r4
 80155aa:	462b      	mov	r3, r5
 80155ac:	4620      	mov	r0, r4
 80155ae:	4629      	mov	r1, r5
 80155b0:	f7eb f82a 	bl	8000608 <__aeabi_dmul>
 80155b4:	4682      	mov	sl, r0
 80155b6:	468b      	mov	fp, r1
 80155b8:	4602      	mov	r2, r0
 80155ba:	460b      	mov	r3, r1
 80155bc:	4620      	mov	r0, r4
 80155be:	4629      	mov	r1, r5
 80155c0:	f7eb f822 	bl	8000608 <__aeabi_dmul>
 80155c4:	a341      	add	r3, pc, #260	; (adr r3, 80156cc <__kernel_sin+0x154>)
 80155c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ca:	4680      	mov	r8, r0
 80155cc:	4689      	mov	r9, r1
 80155ce:	4650      	mov	r0, sl
 80155d0:	4659      	mov	r1, fp
 80155d2:	f7eb f819 	bl	8000608 <__aeabi_dmul>
 80155d6:	a33f      	add	r3, pc, #252	; (adr r3, 80156d4 <__kernel_sin+0x15c>)
 80155d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155dc:	f7ea fe5c 	bl	8000298 <__aeabi_dsub>
 80155e0:	4652      	mov	r2, sl
 80155e2:	465b      	mov	r3, fp
 80155e4:	f7eb f810 	bl	8000608 <__aeabi_dmul>
 80155e8:	a33c      	add	r3, pc, #240	; (adr r3, 80156dc <__kernel_sin+0x164>)
 80155ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ee:	f7ea fe55 	bl	800029c <__adddf3>
 80155f2:	4652      	mov	r2, sl
 80155f4:	465b      	mov	r3, fp
 80155f6:	f7eb f807 	bl	8000608 <__aeabi_dmul>
 80155fa:	a33a      	add	r3, pc, #232	; (adr r3, 80156e4 <__kernel_sin+0x16c>)
 80155fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015600:	f7ea fe4a 	bl	8000298 <__aeabi_dsub>
 8015604:	4652      	mov	r2, sl
 8015606:	465b      	mov	r3, fp
 8015608:	f7ea fffe 	bl	8000608 <__aeabi_dmul>
 801560c:	a337      	add	r3, pc, #220	; (adr r3, 80156ec <__kernel_sin+0x174>)
 801560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015612:	f7ea fe43 	bl	800029c <__adddf3>
 8015616:	9b01      	ldr	r3, [sp, #4]
 8015618:	4606      	mov	r6, r0
 801561a:	460f      	mov	r7, r1
 801561c:	b9eb      	cbnz	r3, 801565a <__kernel_sin+0xe2>
 801561e:	4602      	mov	r2, r0
 8015620:	460b      	mov	r3, r1
 8015622:	4650      	mov	r0, sl
 8015624:	4659      	mov	r1, fp
 8015626:	f7ea ffef 	bl	8000608 <__aeabi_dmul>
 801562a:	a325      	add	r3, pc, #148	; (adr r3, 80156c0 <__kernel_sin+0x148>)
 801562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015630:	f7ea fe32 	bl	8000298 <__aeabi_dsub>
 8015634:	4642      	mov	r2, r8
 8015636:	464b      	mov	r3, r9
 8015638:	f7ea ffe6 	bl	8000608 <__aeabi_dmul>
 801563c:	4602      	mov	r2, r0
 801563e:	460b      	mov	r3, r1
 8015640:	4620      	mov	r0, r4
 8015642:	4629      	mov	r1, r5
 8015644:	f7ea fe2a 	bl	800029c <__adddf3>
 8015648:	4604      	mov	r4, r0
 801564a:	460d      	mov	r5, r1
 801564c:	ec45 4b10 	vmov	d0, r4, r5
 8015650:	b003      	add	sp, #12
 8015652:	ecbd 8b04 	vpop	{d8-d9}
 8015656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801565a:	4b1b      	ldr	r3, [pc, #108]	; (80156c8 <__kernel_sin+0x150>)
 801565c:	ec51 0b18 	vmov	r0, r1, d8
 8015660:	2200      	movs	r2, #0
 8015662:	f7ea ffd1 	bl	8000608 <__aeabi_dmul>
 8015666:	4632      	mov	r2, r6
 8015668:	ec41 0b19 	vmov	d9, r0, r1
 801566c:	463b      	mov	r3, r7
 801566e:	4640      	mov	r0, r8
 8015670:	4649      	mov	r1, r9
 8015672:	f7ea ffc9 	bl	8000608 <__aeabi_dmul>
 8015676:	4602      	mov	r2, r0
 8015678:	460b      	mov	r3, r1
 801567a:	ec51 0b19 	vmov	r0, r1, d9
 801567e:	f7ea fe0b 	bl	8000298 <__aeabi_dsub>
 8015682:	4652      	mov	r2, sl
 8015684:	465b      	mov	r3, fp
 8015686:	f7ea ffbf 	bl	8000608 <__aeabi_dmul>
 801568a:	ec53 2b18 	vmov	r2, r3, d8
 801568e:	f7ea fe03 	bl	8000298 <__aeabi_dsub>
 8015692:	a30b      	add	r3, pc, #44	; (adr r3, 80156c0 <__kernel_sin+0x148>)
 8015694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015698:	4606      	mov	r6, r0
 801569a:	460f      	mov	r7, r1
 801569c:	4640      	mov	r0, r8
 801569e:	4649      	mov	r1, r9
 80156a0:	f7ea ffb2 	bl	8000608 <__aeabi_dmul>
 80156a4:	4602      	mov	r2, r0
 80156a6:	460b      	mov	r3, r1
 80156a8:	4630      	mov	r0, r6
 80156aa:	4639      	mov	r1, r7
 80156ac:	f7ea fdf6 	bl	800029c <__adddf3>
 80156b0:	4602      	mov	r2, r0
 80156b2:	460b      	mov	r3, r1
 80156b4:	4620      	mov	r0, r4
 80156b6:	4629      	mov	r1, r5
 80156b8:	f7ea fdee 	bl	8000298 <__aeabi_dsub>
 80156bc:	e7c4      	b.n	8015648 <__kernel_sin+0xd0>
 80156be:	bf00      	nop
 80156c0:	55555549 	.word	0x55555549
 80156c4:	3fc55555 	.word	0x3fc55555
 80156c8:	3fe00000 	.word	0x3fe00000
 80156cc:	5acfd57c 	.word	0x5acfd57c
 80156d0:	3de5d93a 	.word	0x3de5d93a
 80156d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80156d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80156dc:	57b1fe7d 	.word	0x57b1fe7d
 80156e0:	3ec71de3 	.word	0x3ec71de3
 80156e4:	19c161d5 	.word	0x19c161d5
 80156e8:	3f2a01a0 	.word	0x3f2a01a0
 80156ec:	1110f8a6 	.word	0x1110f8a6
 80156f0:	3f811111 	.word	0x3f811111

080156f4 <fabs>:
 80156f4:	ec51 0b10 	vmov	r0, r1, d0
 80156f8:	ee10 2a10 	vmov	r2, s0
 80156fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015700:	ec43 2b10 	vmov	d0, r2, r3
 8015704:	4770      	bx	lr

08015706 <finite>:
 8015706:	b082      	sub	sp, #8
 8015708:	ed8d 0b00 	vstr	d0, [sp]
 801570c:	9801      	ldr	r0, [sp, #4]
 801570e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015712:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015716:	0fc0      	lsrs	r0, r0, #31
 8015718:	b002      	add	sp, #8
 801571a:	4770      	bx	lr
 801571c:	0000      	movs	r0, r0
	...

08015720 <floor>:
 8015720:	ec51 0b10 	vmov	r0, r1, d0
 8015724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015728:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801572c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015730:	2e13      	cmp	r6, #19
 8015732:	ee10 5a10 	vmov	r5, s0
 8015736:	ee10 8a10 	vmov	r8, s0
 801573a:	460c      	mov	r4, r1
 801573c:	dc32      	bgt.n	80157a4 <floor+0x84>
 801573e:	2e00      	cmp	r6, #0
 8015740:	da14      	bge.n	801576c <floor+0x4c>
 8015742:	a333      	add	r3, pc, #204	; (adr r3, 8015810 <floor+0xf0>)
 8015744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015748:	f7ea fda8 	bl	800029c <__adddf3>
 801574c:	2200      	movs	r2, #0
 801574e:	2300      	movs	r3, #0
 8015750:	f7eb f9ea 	bl	8000b28 <__aeabi_dcmpgt>
 8015754:	b138      	cbz	r0, 8015766 <floor+0x46>
 8015756:	2c00      	cmp	r4, #0
 8015758:	da57      	bge.n	801580a <floor+0xea>
 801575a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801575e:	431d      	orrs	r5, r3
 8015760:	d001      	beq.n	8015766 <floor+0x46>
 8015762:	4c2d      	ldr	r4, [pc, #180]	; (8015818 <floor+0xf8>)
 8015764:	2500      	movs	r5, #0
 8015766:	4621      	mov	r1, r4
 8015768:	4628      	mov	r0, r5
 801576a:	e025      	b.n	80157b8 <floor+0x98>
 801576c:	4f2b      	ldr	r7, [pc, #172]	; (801581c <floor+0xfc>)
 801576e:	4137      	asrs	r7, r6
 8015770:	ea01 0307 	and.w	r3, r1, r7
 8015774:	4303      	orrs	r3, r0
 8015776:	d01f      	beq.n	80157b8 <floor+0x98>
 8015778:	a325      	add	r3, pc, #148	; (adr r3, 8015810 <floor+0xf0>)
 801577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801577e:	f7ea fd8d 	bl	800029c <__adddf3>
 8015782:	2200      	movs	r2, #0
 8015784:	2300      	movs	r3, #0
 8015786:	f7eb f9cf 	bl	8000b28 <__aeabi_dcmpgt>
 801578a:	2800      	cmp	r0, #0
 801578c:	d0eb      	beq.n	8015766 <floor+0x46>
 801578e:	2c00      	cmp	r4, #0
 8015790:	bfbe      	ittt	lt
 8015792:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015796:	fa43 f606 	asrlt.w	r6, r3, r6
 801579a:	19a4      	addlt	r4, r4, r6
 801579c:	ea24 0407 	bic.w	r4, r4, r7
 80157a0:	2500      	movs	r5, #0
 80157a2:	e7e0      	b.n	8015766 <floor+0x46>
 80157a4:	2e33      	cmp	r6, #51	; 0x33
 80157a6:	dd0b      	ble.n	80157c0 <floor+0xa0>
 80157a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80157ac:	d104      	bne.n	80157b8 <floor+0x98>
 80157ae:	ee10 2a10 	vmov	r2, s0
 80157b2:	460b      	mov	r3, r1
 80157b4:	f7ea fd72 	bl	800029c <__adddf3>
 80157b8:	ec41 0b10 	vmov	d0, r0, r1
 80157bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80157c4:	f04f 33ff 	mov.w	r3, #4294967295
 80157c8:	fa23 f707 	lsr.w	r7, r3, r7
 80157cc:	4207      	tst	r7, r0
 80157ce:	d0f3      	beq.n	80157b8 <floor+0x98>
 80157d0:	a30f      	add	r3, pc, #60	; (adr r3, 8015810 <floor+0xf0>)
 80157d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d6:	f7ea fd61 	bl	800029c <__adddf3>
 80157da:	2200      	movs	r2, #0
 80157dc:	2300      	movs	r3, #0
 80157de:	f7eb f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80157e2:	2800      	cmp	r0, #0
 80157e4:	d0bf      	beq.n	8015766 <floor+0x46>
 80157e6:	2c00      	cmp	r4, #0
 80157e8:	da02      	bge.n	80157f0 <floor+0xd0>
 80157ea:	2e14      	cmp	r6, #20
 80157ec:	d103      	bne.n	80157f6 <floor+0xd6>
 80157ee:	3401      	adds	r4, #1
 80157f0:	ea25 0507 	bic.w	r5, r5, r7
 80157f4:	e7b7      	b.n	8015766 <floor+0x46>
 80157f6:	2301      	movs	r3, #1
 80157f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80157fc:	fa03 f606 	lsl.w	r6, r3, r6
 8015800:	4435      	add	r5, r6
 8015802:	4545      	cmp	r5, r8
 8015804:	bf38      	it	cc
 8015806:	18e4      	addcc	r4, r4, r3
 8015808:	e7f2      	b.n	80157f0 <floor+0xd0>
 801580a:	2500      	movs	r5, #0
 801580c:	462c      	mov	r4, r5
 801580e:	e7aa      	b.n	8015766 <floor+0x46>
 8015810:	8800759c 	.word	0x8800759c
 8015814:	7e37e43c 	.word	0x7e37e43c
 8015818:	bff00000 	.word	0xbff00000
 801581c:	000fffff 	.word	0x000fffff

08015820 <rint>:
 8015820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015822:	ec51 0b10 	vmov	r0, r1, d0
 8015826:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801582a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801582e:	2e13      	cmp	r6, #19
 8015830:	ee10 4a10 	vmov	r4, s0
 8015834:	460b      	mov	r3, r1
 8015836:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801583a:	dc58      	bgt.n	80158ee <rint+0xce>
 801583c:	2e00      	cmp	r6, #0
 801583e:	da2b      	bge.n	8015898 <rint+0x78>
 8015840:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015844:	4302      	orrs	r2, r0
 8015846:	d023      	beq.n	8015890 <rint+0x70>
 8015848:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801584c:	4302      	orrs	r2, r0
 801584e:	4254      	negs	r4, r2
 8015850:	4314      	orrs	r4, r2
 8015852:	0c4b      	lsrs	r3, r1, #17
 8015854:	0b24      	lsrs	r4, r4, #12
 8015856:	045b      	lsls	r3, r3, #17
 8015858:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801585c:	ea44 0103 	orr.w	r1, r4, r3
 8015860:	4b32      	ldr	r3, [pc, #200]	; (801592c <rint+0x10c>)
 8015862:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015866:	e9d3 6700 	ldrd	r6, r7, [r3]
 801586a:	4602      	mov	r2, r0
 801586c:	460b      	mov	r3, r1
 801586e:	4630      	mov	r0, r6
 8015870:	4639      	mov	r1, r7
 8015872:	f7ea fd13 	bl	800029c <__adddf3>
 8015876:	e9cd 0100 	strd	r0, r1, [sp]
 801587a:	463b      	mov	r3, r7
 801587c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015880:	4632      	mov	r2, r6
 8015882:	f7ea fd09 	bl	8000298 <__aeabi_dsub>
 8015886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801588a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801588e:	4639      	mov	r1, r7
 8015890:	ec41 0b10 	vmov	d0, r0, r1
 8015894:	b003      	add	sp, #12
 8015896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015898:	4a25      	ldr	r2, [pc, #148]	; (8015930 <rint+0x110>)
 801589a:	4132      	asrs	r2, r6
 801589c:	ea01 0702 	and.w	r7, r1, r2
 80158a0:	4307      	orrs	r7, r0
 80158a2:	d0f5      	beq.n	8015890 <rint+0x70>
 80158a4:	0851      	lsrs	r1, r2, #1
 80158a6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80158aa:	4314      	orrs	r4, r2
 80158ac:	d00c      	beq.n	80158c8 <rint+0xa8>
 80158ae:	ea23 0201 	bic.w	r2, r3, r1
 80158b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80158b6:	2e13      	cmp	r6, #19
 80158b8:	fa43 f606 	asr.w	r6, r3, r6
 80158bc:	bf0c      	ite	eq
 80158be:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80158c2:	2400      	movne	r4, #0
 80158c4:	ea42 0306 	orr.w	r3, r2, r6
 80158c8:	4918      	ldr	r1, [pc, #96]	; (801592c <rint+0x10c>)
 80158ca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80158ce:	4622      	mov	r2, r4
 80158d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80158d4:	4620      	mov	r0, r4
 80158d6:	4629      	mov	r1, r5
 80158d8:	f7ea fce0 	bl	800029c <__adddf3>
 80158dc:	e9cd 0100 	strd	r0, r1, [sp]
 80158e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158e4:	4622      	mov	r2, r4
 80158e6:	462b      	mov	r3, r5
 80158e8:	f7ea fcd6 	bl	8000298 <__aeabi_dsub>
 80158ec:	e7d0      	b.n	8015890 <rint+0x70>
 80158ee:	2e33      	cmp	r6, #51	; 0x33
 80158f0:	dd07      	ble.n	8015902 <rint+0xe2>
 80158f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80158f6:	d1cb      	bne.n	8015890 <rint+0x70>
 80158f8:	ee10 2a10 	vmov	r2, s0
 80158fc:	f7ea fcce 	bl	800029c <__adddf3>
 8015900:	e7c6      	b.n	8015890 <rint+0x70>
 8015902:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8015906:	f04f 36ff 	mov.w	r6, #4294967295
 801590a:	40d6      	lsrs	r6, r2
 801590c:	4230      	tst	r0, r6
 801590e:	d0bf      	beq.n	8015890 <rint+0x70>
 8015910:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8015914:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8015918:	bf1f      	itttt	ne
 801591a:	ea24 0101 	bicne.w	r1, r4, r1
 801591e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015922:	fa44 f202 	asrne.w	r2, r4, r2
 8015926:	ea41 0402 	orrne.w	r4, r1, r2
 801592a:	e7cd      	b.n	80158c8 <rint+0xa8>
 801592c:	080167d8 	.word	0x080167d8
 8015930:	000fffff 	.word	0x000fffff
 8015934:	00000000 	.word	0x00000000

08015938 <scalbn>:
 8015938:	b570      	push	{r4, r5, r6, lr}
 801593a:	ec55 4b10 	vmov	r4, r5, d0
 801593e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015942:	4606      	mov	r6, r0
 8015944:	462b      	mov	r3, r5
 8015946:	b99a      	cbnz	r2, 8015970 <scalbn+0x38>
 8015948:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801594c:	4323      	orrs	r3, r4
 801594e:	d036      	beq.n	80159be <scalbn+0x86>
 8015950:	4b39      	ldr	r3, [pc, #228]	; (8015a38 <scalbn+0x100>)
 8015952:	4629      	mov	r1, r5
 8015954:	ee10 0a10 	vmov	r0, s0
 8015958:	2200      	movs	r2, #0
 801595a:	f7ea fe55 	bl	8000608 <__aeabi_dmul>
 801595e:	4b37      	ldr	r3, [pc, #220]	; (8015a3c <scalbn+0x104>)
 8015960:	429e      	cmp	r6, r3
 8015962:	4604      	mov	r4, r0
 8015964:	460d      	mov	r5, r1
 8015966:	da10      	bge.n	801598a <scalbn+0x52>
 8015968:	a32b      	add	r3, pc, #172	; (adr r3, 8015a18 <scalbn+0xe0>)
 801596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801596e:	e03a      	b.n	80159e6 <scalbn+0xae>
 8015970:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015974:	428a      	cmp	r2, r1
 8015976:	d10c      	bne.n	8015992 <scalbn+0x5a>
 8015978:	ee10 2a10 	vmov	r2, s0
 801597c:	4620      	mov	r0, r4
 801597e:	4629      	mov	r1, r5
 8015980:	f7ea fc8c 	bl	800029c <__adddf3>
 8015984:	4604      	mov	r4, r0
 8015986:	460d      	mov	r5, r1
 8015988:	e019      	b.n	80159be <scalbn+0x86>
 801598a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801598e:	460b      	mov	r3, r1
 8015990:	3a36      	subs	r2, #54	; 0x36
 8015992:	4432      	add	r2, r6
 8015994:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015998:	428a      	cmp	r2, r1
 801599a:	dd08      	ble.n	80159ae <scalbn+0x76>
 801599c:	2d00      	cmp	r5, #0
 801599e:	a120      	add	r1, pc, #128	; (adr r1, 8015a20 <scalbn+0xe8>)
 80159a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159a4:	da1c      	bge.n	80159e0 <scalbn+0xa8>
 80159a6:	a120      	add	r1, pc, #128	; (adr r1, 8015a28 <scalbn+0xf0>)
 80159a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159ac:	e018      	b.n	80159e0 <scalbn+0xa8>
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	dd08      	ble.n	80159c4 <scalbn+0x8c>
 80159b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80159b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80159ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80159be:	ec45 4b10 	vmov	d0, r4, r5
 80159c2:	bd70      	pop	{r4, r5, r6, pc}
 80159c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80159c8:	da19      	bge.n	80159fe <scalbn+0xc6>
 80159ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80159ce:	429e      	cmp	r6, r3
 80159d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80159d4:	dd0a      	ble.n	80159ec <scalbn+0xb4>
 80159d6:	a112      	add	r1, pc, #72	; (adr r1, 8015a20 <scalbn+0xe8>)
 80159d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1e2      	bne.n	80159a6 <scalbn+0x6e>
 80159e0:	a30f      	add	r3, pc, #60	; (adr r3, 8015a20 <scalbn+0xe8>)
 80159e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e6:	f7ea fe0f 	bl	8000608 <__aeabi_dmul>
 80159ea:	e7cb      	b.n	8015984 <scalbn+0x4c>
 80159ec:	a10a      	add	r1, pc, #40	; (adr r1, 8015a18 <scalbn+0xe0>)
 80159ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d0b8      	beq.n	8015968 <scalbn+0x30>
 80159f6:	a10e      	add	r1, pc, #56	; (adr r1, 8015a30 <scalbn+0xf8>)
 80159f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159fc:	e7b4      	b.n	8015968 <scalbn+0x30>
 80159fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a02:	3236      	adds	r2, #54	; 0x36
 8015a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	4b0c      	ldr	r3, [pc, #48]	; (8015a40 <scalbn+0x108>)
 8015a10:	2200      	movs	r2, #0
 8015a12:	e7e8      	b.n	80159e6 <scalbn+0xae>
 8015a14:	f3af 8000 	nop.w
 8015a18:	c2f8f359 	.word	0xc2f8f359
 8015a1c:	01a56e1f 	.word	0x01a56e1f
 8015a20:	8800759c 	.word	0x8800759c
 8015a24:	7e37e43c 	.word	0x7e37e43c
 8015a28:	8800759c 	.word	0x8800759c
 8015a2c:	fe37e43c 	.word	0xfe37e43c
 8015a30:	c2f8f359 	.word	0xc2f8f359
 8015a34:	81a56e1f 	.word	0x81a56e1f
 8015a38:	43500000 	.word	0x43500000
 8015a3c:	ffff3cb0 	.word	0xffff3cb0
 8015a40:	3c900000 	.word	0x3c900000

08015a44 <_init>:
 8015a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a46:	bf00      	nop
 8015a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a4a:	bc08      	pop	{r3}
 8015a4c:	469e      	mov	lr, r3
 8015a4e:	4770      	bx	lr

08015a50 <_fini>:
 8015a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a52:	bf00      	nop
 8015a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a56:	bc08      	pop	{r3}
 8015a58:	469e      	mov	lr, r3
 8015a5a:	4770      	bx	lr
